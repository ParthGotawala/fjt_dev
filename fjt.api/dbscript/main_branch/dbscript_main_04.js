(function (maxBuildNumber, userid) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 574:
            /* **************************** New Script -> 03-11-2020  *********************************** */
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 03-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`)" +
                " VALUES (575,'1.00','V1',' Test fourth script file'," + userid + ");"
            );
            break;
        case 575:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 03-11-2020 *********************************** */
                "INSERT INTO `table_mapping_details`  \n" +
                "(`tabel_name`, `display_page_name`)  \n" +
                "VALUES  \n" +
                "('invalid_mfgmappingmst','Manufacturer Mapping');  \n" +
                /* **************************** Add Script Version -> 03-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(  \n" +
                "  IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)    \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_mst\" else \"\" end as msg FROM supplier_attribute_template_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_mapping_mst\" else \"\" end as msg FROM supplier_mapping_mst WHERE deletedAt IS NULL AND refMfgCodeMstID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"invalid_mfgmappingmst\" else \"\" end as msg FROM invalid_mfgmappingmst WHERE isdeleted = 0 AND refmfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		 ');                        \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)  \n" +
                "	           -- UNION ALL    \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "	           -- UNION ALL    \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;    \n" +
                "						EXECUTE stmt1;    \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');    \n" +
                "						PREPARE stmt2 FROM @SQL2;    \n" +
                "						EXECUTE stmt2;       \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;    \n" +
                "			ELSE    \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempMFGCodeMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"   \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (576,'1.00','V1','Delete MFR related change for check MFR mapping detail related changes - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 576:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "ALTER TABLE `users`   \n" +
                "DROP FOREIGN KEY `FK_users_printFormatID`,  \n" +
                "DROP INDEX `FK_users_printFormatID`,   \n" +
                "DROP COLUMN `printFormatID`;  \n" +
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (577,'1.00','V1',' Profile Page - Dharmesh P '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 577:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetUserAuthDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetUserAuthDetail`(        \n" +
                "	pUserID INT(11)         \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	SELECT	u.id, 			u.username, 	u.emailAddress,		u.firstName,		u.lastName,         \n" +
                "			u.deletedAt, 	u.isDeleted, 	u.employeeID, 	 	u.printerID,         \n" +
                "            u.defaultLoginRoleID, 			e.isActive   , e.initialName      \n" +
                "	FROM 	users u        \n" +
                "	INNER JOIN employees e ON u.employeeID = e.id AND (e.deletedAt IS NULL AND e.isActive = TRUE)        \n" +
                "	WHERE (u.deletedAt IS NULL AND u.id = pUserID);        \n" +
                "  \n" +
                "    SELECT s.`key`, s.`values` FROM systemconfigrations s WHERE s.`key` = 'TextAngularKeyCode';        \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (578,'1.00','V1',' Profile Page - Dharmesh P '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 578:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 04-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(          \n" +
                "	IN ppageIndex INT,          \n" +
                "	IN precordPerPage INT,          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pPartID INT,          \n" +
                "	IN pPackaging TINYINT        \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT;        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);     \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);     \n" +
                "  \n" +
                "  SET SESSION group_concat_max_len = 500000;        \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;      \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS Temp_Sproc_GetRFQLineItems;          \n" +
                "           set @RFQLineItemDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS Temp_Sproc_GetRFQLineItems AS          \n" +
                "			select  rl.id,  IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,        \n" +
                "			IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,        \n" +
                "			rl.lineID,  fun_getAssyPIDCodeByID(rl.custPNID) CPNPID, rl.qpa, rl.refDesig,rl.isPurchase, rl.isInstall, rl.dnpQty, rl.dnpDesig,        \n" +
                "			(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES'         \n" +
                "            WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned'         \n" +
                "            WHEN rl.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'        \n" +
                "            ELSE 'NO' END) AS isBuyDNPQty,        \n" +
                "			fun_getUnitNameByID(rl.uomID) unitName, fun_GetBOMLineMountingType(rl.id) as `name`,        \n" +
                "			CONCAT(GROUP_CONCAT(IFNULL(REPLACE(ra.description,'        \n" +
                "			','<br/>'),'') SEPARATOR '<br/>'),(CASE WHEN GROUP_CONCAT(IFNULL(ra.description,'') SEPARATOR '<br/>') = ''  THEN '' ELSE '<br/>'END), IFNULL(REPLACE(rl.description,'','<br/>'),'')) AS internalComment,          \n" +
                "			rl.numOfPosition, rl.valueAddedCost, com.PIDCode, com.category, rl.cust_lineID, rl.level, rl.uomID,   rl.partID, ra.mfgPNID,        \n" +
                "			b.mfgPN, b.PIDList     \n" +
                "			from rfq_lineitems rl        \n" +
                "			LEFT JOIN rfq_lineitems_alternatepart ra ON rl.id =ra.rfqLineItemsID AND rl.isDeleted = 0          \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND com.isDeleted = 0          \n" +
                "			inner join         \n" +
                "				(select a.id, a.partid,    \n" +
                "                GROUP_CONCAT(DISTINCT(IFNULL(REPLACE(REPLACE(a.PIDCode,',','***'),',','..'),'N/A')),'@@@',    \n" +
                "                a.RoHSStatusID,'@@@',IFNULL(a.name,''),'@@@', IFNULL(a.rohsIcon,''),'@@@',IFNULL(a.isCustom,0),    \n" +
                "                '@@@',REPLACE(IFNULL(a.feature,''),',',''),'@@@',IFNULL(a.partStatusname,''),'@@@',        \n" +
                "				REPLACE(IFNULL(a.partStatusColor,''),',','***'),'@@@',REPLACE(IFNULL(a.partTBD,''),',','***'),'@@@',        \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,'@@@',        \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',        \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',        \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),'@@@',        \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',        \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',        \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',        \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@',        \n" +
                "				IFNULL(REPLACE(REPLACE(a.description,',','***'),'','<br/>'),''),'@@@','','@@@','','@@@',        \n" +
                "				IFNULL(a.approvedMountingType,0),'@@@',        \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),'@@@' ,              \n" +
                "				REPLACE(a.mfgPN,',','***'),'@@@',              \n" +
                "				a.mfgCode,'@@@',              \n" +
                "				a.mfgPNID,'@@@',       \n" +
                "                IFNULL(a.isDocumentUpload,0)    \n" +
                "				ORDER BY a.mfgPN asc separator '\",v_GroupConcatSeparator,\"') AS mfgPn ,        \n" +
                "				GROUP_CONCAT(a.PIDCode) PIDList        \n" +
                "				from (        \n" +
                "					SELECT  `z`.`id` AS `id`, `z`.`partid` AS `partid`, `z`.`isBomLine` AS `isBomLine`, `z`.`mfgPNID` AS `mfgPNID`, `z`.`PIDCode` AS `PIDCode`,        \n" +
                "					`z`.`RoHSStatusID` AS `RoHSStatusID`, FUN_GETROHSNAMEBYID(`z`.`RoHSStatusID`) AS `name`, FUN_GETROHSICONBYID(`z`.`RoHSStatusID`) AS `rohsIcon`,        \n" +
                "					FUN_GETPARTSTATUSNAMEBYID(`z`.`partStatus`) AS `partStatusName`, `z`.`approvedMountingType` AS `approvedMountingType`, `z`.`mismatchMountingTypeStep` AS `mismatchMountingTypeStep`,        \n" +
                "					FUN_GETPARTSTATUSCOLORBYID(`z`.`partStatus`) AS `partStatusColor`, FUN_GETPARTTBDDETAILS(`z`.`mfgPNID`) AS `partTBD`, FUN_GETMFGCODEBYID(`z`.`mfgCodeID`) AS `mfgCode`,        \n" +
                "					`z`.`isCustom` AS `iscustom`, `z`.`feature` AS `feature`, `z`.`mfgPN` AS `mfgpn`, `z`.`isDocumentUpload` AS `isDocumentUpload`, `z`.`description` AS `description`,        \n" +
                "					MAX(`z`.`restrictUseInBOMStep`) AS `restrictUseInBOMStep`,        \n" +
                "					MAX(`z`.`restrictUseInBOMWithPermissionStep`) AS `restrictUseInBOMWithPermissionStep`,        \n" +
                "					MIN(`z`.`restrictUsePermanentlyStep`) AS `restrictUsePermanentlyStep`,        \n" +
                "					MIN(`z`.`restrictUseWithPermissionStep`) AS `restrictUseWithPermissionStep`,        \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasStep`) AS `restrictUseInBOMExcludingAliasStep`,        \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasWithPermissionStep`) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,        \n" +
                "					MIN(`z`.`restrictUseExcludingAliasStep`) AS `restrictUseExcludingAliasStep`,        \n" +
                "					MIN(`z`.`restrictUseExcludingAliasWithPermissionStep`) AS `restrictUseExcludingAliasWithPermissionStep`        \n" +
                "					FROM        \n" +
                "					(SELECT  `l`.`id` AS `id`, `l`.`partID` AS `partid`, IFNULL(`d`.`id`, `c`.`id`) AS `mfgPNID`,        \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), TRUE, FALSE) AS `isBomLine`,        \n" +
                "							IFNULL(`d`.`mfgcodeID`, `c`.`mfgcodeID`) AS `mfgCodeID`,        \n" +
                "							IFNULL(`d`.`mfgPN`, `c`.`mfgPN`) AS `mfgPN`,        \n" +
                "							IFNULL(`d`.`PIDCode`, `c`.`PIDCode`) AS `PIDCode`,        \n" +
                "							IFNULL(`d`.`RoHSStatusID`, `c`.`RoHSStatusID`) AS `RoHSStatusID`,        \n" +
                "							IFNULL(`d`.`feature`, `c`.`feature`) AS `feature`,        \n" +
                "							IFNULL(`d`.`isCustom`, `c`.`isCustom`) AS `isCustom`,        \n" +
                "							IFNULL(`d`.`partStatus`, `c`.`partStatus`) AS `partStatus`,        \n" +
                "							IFNULL(`al`.`restrictUseInBOMStep`, 0) AS `restrictUseInBOMStep`,        \n" +
                "							IFNULL(`al`.`restrictUseInBOMWithPermissionStep`, 0) AS `restrictUseInBOMWithPermissionStep`,        \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), `al`.`description`, '') AS `description`,        \n" +
                "							(CASE        \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUsePermanentlyStep`, 1)        \n" +
                "								ELSE (CASE        \n" +
                "									WHEN (IFNULL(`d`.`restrictUsePermanently`, 0) = 1) THEN 0        \n" +
                "									ELSE 1        \n" +
                "								END)        \n" +
                "							END) AS `restrictUsePermanentlyStep`,        \n" +
                "							IFNULL(`al`.`restrictUseWithPermissionStep`, 1) AS `restrictUseWithPermissionStep`,        \n" +
                "							(CASE        \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasStep`, 0)        \n" +
                "								ELSE (CASE        \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1        \n" +
                "									ELSE 0        \n" +
                "								END)        \n" +
                "							END) AS `restrictUseInBOMExcludingAliasStep`,        \n" +
                "							(CASE        \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasWithPermissionStep`, 0)        \n" +
                "								ELSE (CASE        \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1        \n" +
                "									ELSE 0        \n" +
                "								END)        \n" +
                "							END) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,        \n" +
                "							(CASE        \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasStep`, 1)        \n" +
                "								ELSE (CASE        \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0        \n" +
                "									ELSE 1        \n" +
                "								END)        \n" +
                "							END) AS `restrictUseExcludingAliasStep`,        \n" +
                "							(CASE        \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasWithPermissionStep`, 1)        \n" +
                "								ELSE (CASE        \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0        \n" +
                "									ELSE 1        \n" +
                "								END)        \n" +
                "							END) AS `restrictUseExcludingAliasWithPermissionStep`,        \n" +
                "							IFNULL(`al`.`approvedMountingType`, 0) AS `approvedMountingType`,        \n" +
                "							IFNULL(`al`.`mismatchMountingTypeStep`, 1) AS `mismatchMountingTypeStep`,        \n" +
                "							IFNULL(`ccl`.`isDocumentUpload`, IFNULL(`ccld`.`isDocumentUpload`, 0)) AS `isDocumentUpload`        \n" +
                "					FROM `rfq_lineitems` `l`        \n" +
                "					JOIN `rfq_lineitems_alternatepart` `al` ON `l`.`id` = `al`.`rfqLineItemsID` AND `l`.`isDeleted` = 0 AND `al`.`isDeleted` = 0        \n" +
                "						AND `al`.`mfgPNID` IS NOT NULL        \n" +
                "					JOIN `component` `c` ON `al`.`mfgPNID` = `c`.`id`        \n" +
                "					LEFT JOIN `component` `d` ON `c`.`packaginggroupID` = `d`.`packaginggroupID`        \n" +
                "						AND NOT EXISTS (SELECT  1 FROM `rfq_lineitems_alternatepart` `x`        \n" +
                "						WHERE `x`.`rfqLineItemsID` = `al`.`rfqLineItemsID` AND `x`.`mfgPNID` = `d`.`id` AND `d`.`id` <> `c`.`id` and `x`.`isDeleted` = 0)                    \n" +
                "					LEFT JOIN `component_customer_loa` `ccl` ON `ccl`.`componentID` = `c`.`id`        \n" +
                "						AND `ccl`.`customerID` = (SELECT `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)        \n" +
                "						AND `ccl`.`isDeleted` = 0        \n" +
                "					LEFT JOIN `component_customer_loa` `ccld` ON `ccld`.`componentID` = `d`.`id`        \n" +
                "						AND `ccld`.`customerID` = (SELECT  `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)         \n" +
                "						AND `ccld`.`isDeleted` = 0        \n" +
                "						where l.partID = \", pPartID ,\"        \n" +
                "				) `z`        \n" +
                "				GROUP BY `z`.`id` , `z`.`partid` , `z`.`isBomLine` , `z`.`mfgPNID` , `z`.`mfgCodeID` , `z`.`PIDCode` , `z`.`RoHSStatusID` , `z`.`description` , `z`.`partStatus` , `z`.`approvedMountingType` , `z`.`mismatchMountingTypeStep` , `z`.`isCustom` , `z`.`feature` , `z`.`mfgPN` , `z`.`isDocumentUpload`                        \n" +
                "				) a        \n" +
                "			where partID = \", pPartID,\" and (case when \",pPackaging,\" = 1 then 1=1 else a.isBomLine = 1 end)        \n" +
                "				Group by id, partid         \n" +
                "			) b on rl.id = b.id        \n" +
                "			WHERE  rl.partID = \", pPartID ,\" and ra.mfgPNID is not null and ra.isDeleted = 0             \n" +
                "			GROUP BY rl.id          \n" +
                "			ORDER BY rl.lineID \");         \n" +
                "  \n" +
                "            PREPARE RFQLineItemDetail FROM @RFQLineItemDetail;          \n" +
                "			EXECUTE RFQLineItemDetail;          \n" +
                "			DEALLOCATE PREPARE RFQLineItemDetail;    \n" +
                "  \n" +
                "			IF (pOrderBy IS NOT NULL) THEN          \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "			ELSE          \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;          \n" +
                "			END IF;          \n" +
                "  \n" +
                "  \n" +
                "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "				SET pWhereClause = '1=1' ;          \n" +
                "			END IF;          \n" +
                "  \n" +
                "  \n" +
                "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN          \n" +
                "				SET pOffset = (ppageIndex -1) * precordPerPage;          \n" +
                "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "			ELSE          \n" +
                "				SET rowNumWhere = '';          \n" +
                "			END IF;          \n" +
                "  \n" +
                "  \n" +
                "			/* to get total count of rows */          \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause );          \n" +
                "			PREPARE query1 FROM @SQLStatement1;          \n" +
                "			EXECUTE query1;          \n" +
                "			DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "			PREPARE query2 FROM @SQLStatement2;    \n" +
                "			EXECUTE query2;    \n" +
                "			DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "			SET @SQLStatement3= (SELECT fun_getRestrictedPartsinPlannBOM(IFNULL(pPartID,0)));          \n" +
                "			PREPARE query3 FROM @SQLStatement3;          \n" +
                "			EXECUTE query3;          \n" +
                "			DEALLOCATE PREPARE query3;          \n" +
                "			DROP TEMPORARY TABLE Temp_Sproc_GetRFQLineItems;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPricingHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPricingHistory`(          \n" +
                "	IN prfqAssyID INT  \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "    DECLARE vTimeZone VARCHAR(50);   \n" +
                "    DECLARE vnum int;   \n" +
                "	    set vTimeZone = fun_getTimeZone();  \n" +
                "	    SET vnum = 0;       \n" +
                "            SELECT rch.id historyID, CAST(CONVERT_TZ(rch.createdAt,'+00:00',vTimeZone) AS CHAR(100)) createdAt,  vnum = vnum+1 `id` FROM rfq_consolidated_history rch WHERE rch.rfqAssyID=prfqAssyID;         \n" +
                "  \n" +
                "            SELECT raq.id,raq.requestQty FROM rfq_assy_quantity raq WHERE raq.rfqAssyID= prfqAssyID AND raq.isdeleted=0 ORDER BY raq.requestQty ASC;           \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-11-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineMFGPN_New`;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPN_New`(        \n" +
                "  pIsPackaging TINYINT,             \n" +
                "  pRfqAssyID INT,              \n" +
                "  pCustomerID INT              \n" +
                "	) RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE result TEXT;    \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);     \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;      \n" +
                "		SELECT  CONCAT('(SELECT               \n" +
                "			GROUP_CONCAT(              \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',              \n" +
                "				a.RoHSStatusID,''@@@'',              \n" +
                "				IFNULL(a.name,\"\"),''@@@'',                      \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',              \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',              \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',              \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',           \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',              \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',                      \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',                      \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',                      \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',                       \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',                      \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',                      \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',                      \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',                      \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'','''',''@@@'','''',''@@@'',                  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',                      \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,              \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',              \n" +
                "				a.mfgCode,''@@@'',              \n" +
                "				a.mfgPNID,''@@@'',              \n" +
                "				IFNULL(a.isDocumentUpload,0) SEPARATOR \"', v_GroupConcatSeparator ,'\")                  \n" +
                "			FROM                      \n" +
                "			( select z.mfgPNID ,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,          \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,approvedMountingType,mismatchMountingTypeStep,fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,          \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,           \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom, z.feature, z.mfgpn,z.isDocumentUpload,          \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,          \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,          \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,          \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,          \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,          \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,          \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,          \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep          \n" +
                "						  from           \n" +
                "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,          \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,          \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,               \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,              \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,              \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/	              \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,              \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */          \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)             \n" +
                "									ELSE    /*Packaging Alias*/           \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/                 \n" +
                "									END AS restrictUsePermanentlyStep,           \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */                 \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/          \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/          \n" +
                "									ELSE               \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */          \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,              \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/          \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)           \n" +
                "									ELSE     /*Packaging Alias*/          \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */          \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,              \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/               \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/           \n" +
                "									ELSE               \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */          \n" +
                "									END AS restrictUseExcludingAliasStep,               \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/              \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/           \n" +
                "									ELSE               \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */          \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,               \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,              \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,              \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload              \n" +
                "									FROM rfq_consolidated_mfgpn_lineitem_alternate  al              \n" +
                "									JOIN rfq_consolidated_mfgpn_lineitem l ON  l.id = al.consolidateID              \n" +
                "									JOIN component c ON al.mfgPNID = c.id              \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid               \n" +
                "									and  not exists ( select 1  from  rfq_consolidated_mfgpn_lineitem_alternate x            \n" +
                "													where  x.consolidateID  =  al.consolidateID            \n" +
                "															 and x.mfgpnid = d.id          \n" +
                "															 and d.id != c.id and `x`.`isdeleted` = 0)          \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0          \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0             \n" +
                "									WHERE l.rfqAssyid = ', pRfqAssyID,'              \n" +
                "									AND l.id = rl.id AND al.isDeleted = 0 ',          \n" +
                "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'             \n" +
                "							) z group by  z.mfgPNID ,z.mfgCodeID,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload          \n" +
                "					) a                      \n" +
                "  		) AS mfgPN')  INTO @result;        \n" +
                "	SET result = @result;        \n" +
                "	RETURN result;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(  \n" +
                "  IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)    \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL     \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_mst\" else \"\" end as msg FROM supplier_attribute_template_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_mapping_mst\" else \"\" end as msg FROM supplier_mapping_mst WHERE deletedAt IS NULL AND refMfgCodeMstID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"invalid_mfgmappingmst\" else \"\" end as msg FROM invalid_mfgmappingmst WHERE isdeleted = 0 AND refmfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		 ');                        \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)  \n" +
                "	           -- UNION ALL    \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "	           -- UNION ALL    \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;    \n" +
                "						EXECUTE stmt1;    \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');    \n" +
                "						PREPARE stmt2 FROM @SQL2;    \n" +
                "						EXECUTE stmt2;       \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;    \n" +
                "			ELSE    \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempMFGCodeMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"   \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (579,'1.00','V1','Resolve BOM priceing related issue related changes - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 579:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 04-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(                                                                        \n" +
                "	IN ppageIndex INT,                                                                        \n" +
                "	IN precordPerPage INT,                                                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                                                        \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "    IN pSupplierIDs VARCHAR(16383),            \n" +
                "    IN pPaymentMethodIDs VARCHAR(16383),            \n" +
                "    IN pBankAccountCodeIDs VARCHAR(16383),            \n" +
                "	IN pPaymentNumber VARCHAR(10),             \n" +
                "	IN pInvoiceNumber VARCHAR(50),             \n" +
                "	IN pAmount DECIMAL(18,8),                 \n" +
                "	IN pFromDate DATE,                          \n" +
                "	IN pToDate DATE                 \n" +
                ")  \n" +
                "BEGIN                                                                        \n" +
                "	DECLARE pOffset INT;                                                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                      \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);                      \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                       \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';            \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "  		SET pWhereClause = '1=1' ;                  \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN                                                                                                                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');                                                   \n" +
                "	END IF;	             \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                   \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                   \n" +
                "	END IF;	        \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber = ',pPaymentNumber,' ');                                                   \n" +
                "	END IF;	             \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                              \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "					SELECT  1 FROM packing_slip_material_receive psd  \n" +
                "					where psd.refPayementid = inv.id AND   \n" +
                "                    psd.isDeleted=0 AND psd.invoiceNumber = \"',pInvoiceNumber,'\" )');                                                         \n" +
                "	END IF;	             \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount = ',pAmount,' ');                                                   \n" +
                "	END IF;	                 \n" +
                "  \n" +
                "    IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                        \n" +
                "    ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                  \n" +
                "    ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                  \n" +
                "    END IF;                 \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"              			                                \n" +
                "            SELECT 						                          \n" +
                "				inv.id,                                      \n" +
                "                inv.mfgcodeID,                  \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,                  \n" +
                "                inv.paymentNumber,                  \n" +
                "                inv.bankName,                  \n" +
                "                inv.bankAccountNo,                  \n" +
                "                inv.paymentType,                  \n" +
                "                inv.bankAccountMasID,                  \n" +
                "                gc.gencCategoryName paymentMethod,            \n" +
                "				inv.paymentDate,            \n" +
                "                round(inv.paymentAmount) invoiceAmount,            \n" +
                "                inv.paymentAmount,            \n" +
                "				inv.payToAddress payToAddress,                           \n" +
                "                inv.accountReference,            \n" +
                "                inv.remark,            \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,                                        \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,                        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                        \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,                   \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole                   \n" +
                "			FROM                          \n" +
                "				packingslip_invoice_payment inv             \n" +
                "			INNER JOIN genericcategory gc ON inv.paymentType = gc.gencCategoryID             \n" +
                "            WHERE             \n" +
                "				inv.isDeleted = 0 AND             \n" +
                "                gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause);                    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                        \n" +
                "		SET pOrderBy = \"ORDER BY paymentDate desc\";                                                                        \n" +
                "	ELSE                                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                        \n" +
                "	END IF;	                                                            		            \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                        \n" +
                "	ELSE	                                                                        \n" +
                "		SET rowNumWhere = '';                                                                        \n" +
                "	END IF;	                                                                         \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                     \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			            \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                                    \n" +
                "	EXECUTE query1;                                                    \n" +
                "	DEALLOCATE PREPARE query1;                                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                               \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                    \n" +
                "	EXECUTE query2;                                                    \n" +
                "	DEALLOCATE PREPARE query2;                                                 \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (580,'1.00','V1',' Payment History - Dharmesh P '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 580:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-11-2020  *********************************** */
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "ADD COLUMN `isPaymentVoided` TINYINT NULL DEFAULT '0';  \n" +
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "ADD COLUMN `voidPaymentReason` VARCHAR(255) NULL;  \n" +
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "ADD COLUMN `refVoidedPaymentNumber` VARCHAR(50) NULL;  \n" +
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "ADD COLUMN `refVoidedPaymentId` INT NULL;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (581,'1.00','V1','User Story 27253: Void payment Changes for Payment Invoice - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 581:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-11-2020  *********************************** */
                "drop procedure if exists `Sproc_GetPackingSlipInvoicePaymentToInformation`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
                "IN pPaymentId INT,  \n" +
                "IN pMfgCodeId INT  \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	IF pPaymentId IS NOT NULL THEN        \n" +
                "		SELECT pi.accountReference,        \n" +
                "				pi.mfgcodeID,        \n" +
                "				m.mfgCode,        \n" +
                "				m.mfgName,        \n" +
                "                CONCAT('(',m.mfgCode,') ',m.mfgName) fullMfgName,        \n" +
                "				pi.paymentType,        \n" +
                "                p.gencCategoryName paymentTypeName,        \n" +
                "				pi.paymentNumber,        \n" +
                "                pi.bankAccountMasID,        \n" +
                "				pi.bankName,        \n" +
                "				pi.bankAccountNo,        \n" +
                "				pi.paymentDate,        \n" +
                "                pi.paymentAmount,        \n" +
                "				pi.payToName,        \n" +
                "                pi.payToAddress,        \n" +
                "				pi.remark,  \n" +
                "                pi.isPaymentVoided,  \n" +
                "                pi.voidPaymentReason  \n" +
                "		 FROM packingslip_invoice_payment PI        \n" +
                "		INNER JOIN mfgcodemst m ON m.id = pi.mfgcodeID        \n" +
                "		INNER JOIN genericcategory p ON p.gencCategoryID = pi.paymentType        \n" +
                "        WHERE pi.isDeleted = 0        \n" +
                "          AND pi.id = pPaymentId;        \n" +
                "    ELSE        \n" +
                "			SELECT m.accountRef accountReference,        \n" +
                "					m.id mfgcodeID,        \n" +
                "					m.mfgCode,        \n" +
                "					m.mfgName,        \n" +
                "					CONCAT('(',m.mfgCode,') ',m.mfgName) fullMfgName,        \n" +
                "					m.paymentMethodID paymentType,        \n" +
                "					p.gencCategoryName paymentTypeName,        \n" +
                "					NULL paymentNumber,        \n" +
                "					b.id bankAccountMasID,        \n" +
                "					b.bankName,        \n" +
                "					b.accountCode bankAccountNo,        \n" +
                "					NULL paymentDate,        \n" +
                "					NULL paymentAmount,        \n" +
                "					ca.bankRemitToName payToName,        \n" +
                "					fun_getAddressbyIDForCheckPrint(ca.id) payToAddress,        \n" +
                "					NULL remark,  \n" +
                "					0 isPaymentVoided,  \n" +
                "					null voidPaymentReason  \n" +
                "			FROM mfgcodemst m        \n" +
                "			LEFT JOIN bank_mst b ON b.id = m.bankID AND b.isDeleted = 0 AND b.isActive = 1        \n" +
                "			LEFT JOIN genericcategory p ON p.gencCategoryID = m.paymentMethodID        \n" +
                "			LEFT JOIN customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1        \n" +
                "            WHERE m.isDeleted = 0        \n" +
                "			  AND m.id = pMfgCodeId;        \n" +
                "	END IF;        \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_InvoicePaymentVoidAndReIssue`;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
                "IN pPaymentId INT,  \n" +
                "IN pNewPaymentOrCheckNo varchar(50),  \n" +
                "IN pVoidPaymentReason varchar(255),  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	declare vCount int;  \n" +
                "    declare vNewPaymentID int;  \n" +
                "    declare vOldPaymentOrCheckNo varchar(50);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "  BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "	select count(1) into vCount  \n" +
                "      from packingslip_invoice_payment  \n" +
                "	 where id = pPaymentId  \n" +
                "       and isPaymentVoided = 0;  \n" +
                "	if vCount = 1 then  \n" +
                "		insert into packingslip_invoice_payment  \n" +
                "				(mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,  \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId)  \n" +
                "		select mfgcodeID, pNewPaymentOrCheckNo /*paymentNumber*/, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, pUserID /*createdBy*/, pRoleID /*createByRoleId*/,  \n" +
                "				pUserID /*updatedBy*/, pRoleID /*updateByRoleId*/, paymentNumber, id  \n" +
                "		  from packingslip_invoice_payment  \n" +
                "		 where id = pPaymentId  \n" +
                "           and isDeleted = 0;  \n" +
                "         set vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "         insert into packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId,   \n" +
                "				updatedBy, updateByRoleId)  \n" +
                "         select vNewPaymentID /*refPayementid*/, refPackingslipInvoiceID, pUserID /*createdBy*/, pRoleID /*createByRoleId*/,   \n" +
                "				pUserID /*updatedBy*/, pRoleID /*updateByRoleId*/  \n" +
                "		  from packingslip_invoice_payment_det  \n" +
                "		 where refPayementid = pPaymentId  \n" +
                "           and isDeleted = 0;  \n" +
                "  \n" +
                "         update packing_slip_material_receive  \n" +
                "            set refPayementid = vNewPaymentID,  \n" +
                "				updatedBy = pUserID,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "		  where refPayementid = pPaymentId  \n" +
                "             and isDeleted = 0;  \n" +
                "  \n" +
                "		update packingslip_invoice_payment  \n" +
                "			set voidPaymentReason = pVoidPaymentReason,  \n" +
                "				isPaymentVoided = 1,  \n" +
                "				updatedBy = pUserID,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "		 where id = pPaymentId  \n" +
                "           and isDeleted = 0;  \n" +
                "		select vNewPaymentID refPayementid;  \n" +
                "    else  \n" +
                "		rollback;  \n" +
                "		select 'NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (582,'1.00','V1','User Story 27253: Void payment Changes for Payment Invoice - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 582:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-11-2020  *********************************** */
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(                                                                          \n" +
                "	IN ppageIndex INT,                                                                          \n" +
                "	IN precordPerPage INT,                                                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                                                          \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "    IN pSupplierIDs VARCHAR(16383),              \n" +
                "    IN pPaymentMethodIDs VARCHAR(16383),              \n" +
                "    IN pBankAccountCodeIDs VARCHAR(16383),              \n" +
                "	IN pPaymentNumber VARCHAR(10),               \n" +
                "	IN pInvoiceNumber VARCHAR(50),               \n" +
                "	IN pAmount DECIMAL(18,8),                   \n" +
                "	IN pFromDate DATE,                            \n" +
                "	IN pToDate DATE                   \n" +
                ")  \n" +
                "BEGIN                                                                          \n" +
                "	DECLARE pOffset INT;                                                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                          \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                        \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);                        \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                              \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                         \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';              \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                    \n" +
                "  		SET pWhereClause = '1=1' ;                    \n" +
                "	END IF;                       \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN                                                                                                                                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');                                                     \n" +
                "	END IF;	               \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                     \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                     \n" +
                "	END IF;	          \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber = ',pPaymentNumber,' ');                                                     \n" +
                "	END IF;	               \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                                \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND    \n" +
                "             EXISTS(    \n" +
                "					SELECT  1 FROM packing_slip_material_receive psd    \n" +
                "					where psd.refPayementid = inv.id AND     \n" +
                "                    psd.isDeleted=0 AND psd.invoiceNumber = \"',pInvoiceNumber,'\" )');                                                           \n" +
                "	END IF;	               \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount = ',pAmount,' ');                                                     \n" +
                "	END IF;	                   \n" +
                "  \n" +
                "    IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                          \n" +
                "    ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                    \n" +
                "    ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                    \n" +
                "    END IF;                   \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"              			                                  \n" +
                "            SELECT 						                            \n" +
                "				inv.id,                                        \n" +
                "                inv.mfgcodeID,                    \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,       \n" +
                "                inv.isPaymentVoided,  \n" +
                "                case when inv.isPaymentVoided = 0 then  \n" +
                "					'Paid'  \n" +
                "                    else 'Voided' end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "                inv.refVoidedPaymentNumber,  \n" +
                "                inv.paymentNumber,                    \n" +
                "                inv.bankName,                    \n" +
                "                inv.bankAccountNo,                    \n" +
                "                inv.paymentType,                    \n" +
                "                inv.bankAccountMasID,                    \n" +
                "                gc.gencCategoryName paymentMethod,              \n" +
                "				inv.paymentDate,              \n" +
                "                round(inv.paymentAmount) invoiceAmount,              \n" +
                "                inv.paymentAmount,              \n" +
                "				inv.payToAddress payToAddress,                             \n" +
                "                inv.accountReference,              \n" +
                "                inv.remark,              \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,                                          \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,                          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                          \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,                     \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole                     \n" +
                "			FROM                            \n" +
                "				packingslip_invoice_payment inv               \n" +
                "			INNER JOIN genericcategory gc ON inv.paymentType = gc.gencCategoryID               \n" +
                "            WHERE               \n" +
                "				inv.isDeleted = 0 AND               \n" +
                "                gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause);                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                          \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";                                                                          \n" +
                "	ELSE                                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                          \n" +
                "	END IF;	                                                            		              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                          \n" +
                "	ELSE	                                                                          \n" +
                "		SET rowNumWhere = '';                                                                          \n" +
                "	END IF;	                                                                           \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                       \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			              \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                                      \n" +
                "	EXECUTE query1;                                                      \n" +
                "	DEALLOCATE PREPARE query1;                                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                 \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                      \n" +
                "	EXECUTE query2;                                                      \n" +
                "	DEALLOCATE PREPARE query2;                                                   \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                                        \n" +
                "	IN pPageIndex INT,                                        \n" +
                "	IN pRecordPerPage INT,                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                            \n" +
                "	IN pReceiptType VARCHAR(10),      \n" +
                "    IN pMfgCodeIds LONGTEXT,      \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "    IN pDueDate DATE,      \n" +
                "    IN pAdditionalDays INT,      \n" +
                "    IN pTermsAndAboveDays INT,      \n" +
                "    IN pInvoiceNumber VARCHAR(50)      \n" +
                ")  \n" +
                "BEGIN                                        \n" +
                "	DECLARE pOffset INT;                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);            \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;              \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"              \n" +
                "		SELECT 		p.id,          \n" +
                "				p.poNumber,          \n" +
                "				p.mfgCodeID,          \n" +
                "				p.supplierSONumber,          \n" +
                "				p.packingSlipNumber,          \n" +
                "				p.packingSlipDate,          \n" +
                "				p.invoiceNumber,          \n" +
                "				p.invoiceDate,          \n" +
                "				p.creditMemoNumber,          \n" +
                "				p.creditMemoDate,          \n" +
                "				p.debitMemoNumber,          \n" +
                "				p.debitMemoDate,          \n" +
                "				p.receiptDate,          \n" +
                "				p.description,          \n" +
                "				p.billToAddress,          \n" +
                "				p.shipToAddress,          \n" +
                "				p.poVersion,          \n" +
                "				p.isDeleted,          \n" +
                "				p.receiptType,          \n" +
                "				p.`status`,          \n" +
                "				pinv.paymentNumber chequeNumber,          \n" +
                "				pinv.paymentDate chequeDate,          \n" +
                "				pinv.paymentAmount chequeAmount,    \n" +
                "                pinv.bankAccountNo,  \n" +
                "                pinv.bankAccountMasID,  \n" +
                "                pinv.accountReference,  \n" +
                "                gp.gencCategoryName paymentTypeName,  \n" +
                "                pinv.paymentType,  \n" +
                "				p.applyDate,          \n" +
                "				p.refParentCreditDebitInvoiceno,          \n" +
                "				p.refPackingSlipNumberForInvoice,          \n" +
                "				p.invoiceTotalDue,          \n" +
                "				p.isTariffInvoice,          \n" +
                "				pinv.bankName,              									                             \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,                       \n" +
                "				fun_getUserNameByID(p.createdBy)  createdByName,            \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,            \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                     \n" +
                "				fun_getMfgCodeByID(p.mfgCodeID) supplierCode,			              \n" +
                "				(              \n" +
                "					SELECT COUNT(1)               \n" +
                "					  FROM genericfiles g               \n" +
                "					 WHERE g.refTransID = p.id               \n" +
                "					   and g.entityID = -13      \n" +
                "					   AND g.gencFileOwnerType = 'supplier_invoice'               \n" +
                "					   AND g.isDeleted =0      \n" +
                "				) invoiceDocCount,              \n" +
                "				(              \n" +
                "					SELECT COUNT(1)               \n" +
                "					 FROM genericfiles g               \n" +
                "					WHERE g.refTransID = (SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = p.id)               \n" +
                "					  and g.entityID = -14      \n" +
                "					  AND g.gencFileOwnerType = 'packing_slip'               \n" +
                "					  AND g.isDeleted =0      \n" +
                "				) packingSlipDocCount,	                              \n" +
                "				pd.itemReceived,      \n" +
                "				pd.itemDisapproved,      \n" +
                "				(              \n" +
                "					CASE 	WHEN p.`receiptType` = 'I' THEN               \n" +
                "							'Invoice'               \n" +
                "						WHEN p.`receiptType` = 'C' THEN               \n" +
                "							'Credit Memo'               \n" +
                "						ELSE               \n" +
                "							'Debit Memo'               \n" +
                "					END              \n" +
                "				) receiptMemoType,      									                        \n" +
                "				(              \n" +
                "					CASE 	WHEN p.`status` = 'W' THEN               \n" +
                "							'Waiting for Invoice'               \n" +
                "						WHEN p.`status` = 'I' THEN               \n" +
                "							'Investigate'               \n" +
                "						WHEN p.`status` = 'A' THEN               \n" +
                "							'Approved to Pay'               \n" +
                "						ELSE               \n" +
                "							'Paid'               \n" +
                "					END              \n" +
                "				) invoiceVerificationStatus,                              \n" +
                "				(              \n" +
                "					SELECT 	ps.invoiceNumber               \n" +
                "					FROM 	packing_slip_material_receive ps               \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno              \n" +
                "							AND ps.isDeleted = 0      \n" +
                "				) refInvoiceNumber,                        \n" +
                "				pd.totalExtendedAmount,      \n" +
                "				pe.totalCreditAmount,      \n" +
                "				pe.totalDebitAmount,      \n" +
                "				(      \n" +
                " 					IFNULL(pd.totalExtendedAmount, 0)      \n" +
                " 					- IFNULL((pe.totalCreditAmount*-1), 0)      \n" +
                " 					- IFNULL((pe.totalDebitAmount*-1), 0)      \n" +
                " 				) amountToPay,      \n" +
                "                /*not found use of this column so commented*/      \n" +
                "				/* (              \n" +
                "					SELECT 	SUM(ps.extendedPrice)               \n" +
                "					FROM 	packing_slip_material_receive_det ps               \n" +
                "					WHERE 	ps.deletedAt IS NULL               \n" +
                "							AND ps.refPackingSlipMaterialRecID = p.id               \n" +
                "							AND ps.refPackingSlipMaterialRecID NOT IN                             \n" +
                "							(              \n" +
                "								SELECT 	psm.refCreditDebitInvoiceNo               \n" +
                "								FROM 	packing_slip_material_receive_det psm               \n" +
                "								WHERE 	psm.refCreditDebitInvoiceNo IS NOT NULL               \n" +
                "										AND psm.deletedAt IS NULL              \n" +
                "							)               \n" +
                "					GROUP BY ps.refPackingSlipMaterialRecID                            \n" +
                "				) totalOfExtendedPrice, */      \n" +
                "                /*not found use of this column so commented*/      \n" +
                "				/* (              \n" +
                "					SELECT 	SUM(ps.extendedPrice - (IFNULL(ps.difference, 0) * ps.receivedQty))               \n" +
                "					FROM 	packing_slip_material_receive_det ps               \n" +
                "					WHERE 	ps.deletedAt IS NULL               \n" +
                "							AND ps.refPackingSlipMaterialRecID = p.id               \n" +
                "							AND ps.refPackingSlipMaterialRecID NOT IN                             \n" +
                "							(              \n" +
                "								SELECT 	psm.refCreditDebitInvoiceNo               \n" +
                "								FROM 	packing_slip_material_receive_det psm               \n" +
                "								WHERE 	psm.refCreditDebitInvoiceNo IS NOT NULL               \n" +
                "										AND psm.deletedAt IS NULL              \n" +
                "							)               \n" +
                "					GROUP BY ps.refPackingSlipMaterialRecID                            \n" +
                "				) payableOfExtendedPrice, */      \n" +
                "				pd.packingDetailNote,      \n" +
                "				pd.approveLineCount,      \n" +
                "                DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),       \n" +
                "					INTERVAL IFNULL((max(p.termsDays) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,      \n" +
                "				p.refPayementid,      \n" +
                "                max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,  \n" +
                "                max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,  \n" +
                "                (SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = ifnull(p.refParentCreditDebitInvoiceno,p.id)) packingSlipId  \n" +
                "		FROM		packing_slip_material_receive p      \n" +
                "		\");      \n" +
                "        IF (pPaymentMethodTypeIds IS NULL OR pPaymentMethodTypeIds = '') THEN      \n" +
                "			SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" left \");      \n" +
                "		end if;      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"      \n" +
                "				join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0      \n" +
                "        left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'      \n" +
                "        left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'      \n" +
                "        left join (select a.refPackingSlipMaterialRecID,      \n" +
                "						GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,      \n" +
                "						sum(a.itemReceived) itemReceived,      \n" +
                "						sum(a.itemDisapproved) itemDisapproved,      \n" +
                "						sum(a.approveLineCount) approveLineCount,      \n" +
                "						sum(a.extendedPrice) totalExtendedAmount      \n" +
                "				from (SELECT psm.refPackingSlipMaterialRecID, psm.packingSlipSerialNumber, psm.approveNote,      \n" +
                "							1 itemReceived,      \n" +
                "							case when psm.status='D' then      \n" +
                "								1 else 0 end itemDisapproved,      \n" +
                "							case when psm.status='A' then      \n" +
                "								1 else 0 end approveLineCount,      \n" +
                "							extendedPrice      \n" +
                "					  FROM packing_slip_material_receive_det psm      \n" +
                "					 WHERE psm.isDeleted = 0) a      \n" +
                "				group by a.refPackingSlipMaterialRecID) pd ON pd.refPackingSlipMaterialRecID = p.id      \n" +
                "		left join (select ps.refParentCreditDebitInvoiceno,       \n" +
                "						sum(case when ps.receiptType = 'C' then      \n" +
                "							pd.extendedPrice      \n" +
                "						else 0 end) totalCreditAmount,      \n" +
                "						sum(case when ps.receiptType = 'D' then      \n" +
                "							pd.extendedPrice      \n" +
                "						else 0 end) totalDebitAmount      \n" +
                "				  from packing_slip_material_receive ps      \n" +
                "				  inner join packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID      \n" +
                "					and ps.isDeleted = 0      \n" +
                "					and pd.isDeleted = 0      \n" +
                "					and ps.receiptType in ('C','D')      \n" +
                "			group by ps.refParentCreditDebitInvoiceno) pe ON pe.refParentCreditDebitInvoiceno = p.id      \n" +
                "		    WHERE p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')      \n" +
                "	\");      \n" +
                "  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND pinv.paymentType in (', pPaymentMethodTypeIds, ' )');      \n" +
                "    END IF;      \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;      \n" +
                "	ELSE                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                        \n" +
                "		SET pWhereClause = '1=1' ;                                        \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "    if pDueDate is not null then    \n" +
                "		set pWhereClause = concat(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",ifnull(pAdditionalDays,0),\" DAY) \");      \n" +
                "	elseif (pTermsAndAboveDays is not null OR pTermsAndAboveDays = 0) then      \n" +
                "		set pWhereClause = concat(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",ifnull(pTermsAndAboveDays,0),\" DAY) \");      \n" +
                "    end if;      \n" +
                "  \n" +
                "    IF pInvoiceNumber is not null AND pInvoiceNumber != '' THEN      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND ( c.supplierSONumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.poNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.packingSlipNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.invoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"      \n" +
                "									  \" ) \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                         \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "	ELSE	                                        \n" +
                "		SET rowNumWhere = '';                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "	/* to get total count of rows */                                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                        \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.*,      \n" +
                "										case when c.refPayementid is null and c.paymentDueDate <= current_date() then      \n" +
                "											1      \n" +
                "										else 0 end isPaymentDueDatePassed      \n" +
                "									FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                        \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (583,'1.00','V1','User Story 27253: Void payment Changes for Payment Invoice - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 583:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-11-2020  *********************************** */
                "drop procedure if exists `Sproc_Utility_maintain_invoice_payment_information`;  \n" +
                "create procedure `Sproc_Utility_maintain_invoice_payment_information` (  \n" +
                "	IN pUserId int,  \n" +
                "    IN pUserRoleId int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		/*creating payment entry from old records from packing_slip_material_receive table*/  \n" +
                "		insert into packingslip_invoice_payment(mfgCodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference,  \n" +
                "					bankAccountMasID, bankAccountNo, bankName, payToName, payToAddress, createdBy, createByRoleId, updatedBy, updateByRoleId  \n" +
                "			)  \n" +
                "		select mfgCodeID,  \n" +
                "				chequeNumber paymentNumber,  \n" +
                "				chequeDate paymentDate,  \n" +
                "				chequeAmount paymentAmount,  \n" +
                "				0 paymentType,  \n" +
                "				'FCA' accountReference,  \n" +
                "				null bankAccountMasID,  \n" +
                "				0 bankAccountNo,  \n" +
                "				bankName,  \n" +
                "				null payToName,  \n" +
                "				null payToAddress,  \n" +
                "                pUserId createdBy,  \n" +
                "                pUserRoleId createByRoleId,  \n" +
                "				pUserId updatedBy,  \n" +
                "                pUserRoleId updateByRoleId  \n" +
                "		from packing_slip_material_receive a  \n" +
                "	   where status = 'P'  \n" +
                "		 and not exists (select 1 from packingslip_invoice_payment_det pd where pd.refPackingslipInvoiceID = a.id)  \n" +
                "	   group by mfgCodeID, chequeNumber, chequeDate, chequeAmount, bankName;  \n" +
                "  \n" +
                "       /*updating payment id in refPayementid from new created payment entries*/  \n" +
                "        update packing_slip_material_receive a  \n" +
                "		 inner join packingslip_invoice_payment b on b.mfgcodeID = a.mfgcodeID and a.chequeNumber = b.paymentNumber   \n" +
                "													and a.chequeDate = b.paymentDate and a.chequeAmount = b.paymentAmount   \n" +
                "                                                    and a.bankName = b.bankName  \n" +
                "		   set a.refPayementid = b.id  \n" +
                "		 where a.refPayementid is null  \n" +
                "		   and a.status = 'P';  \n" +
                "  \n" +
                "		/*creating reference detail packingslip_invoice_payment_det table entries*/  \n" +
                "		insert into packingslip_invoice_payment_det (refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId)  \n" +
                "		select b.id refPayementid,  \n" +
                "				a.id refPackingslipInvoiceID,  \n" +
                "				b.createdBy,  \n" +
                "				b.createByRoleId,  \n" +
                "				b.updatedBy,  \n" +
                "				b.updateByRoleId  \n" +
                "		  from packing_slip_material_receive a  \n" +
                "		 inner join packingslip_invoice_payment b on b.id = a.refPayementid  \n" +
                "		 where not exists (select 1 from packingslip_invoice_payment_det pd where pd.refPackingslipInvoiceID = a.id and pd.refPayementid = b.id);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (584,'1.00','V1','User Story 26555: Payment flow for Invoice - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 584:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-11-2020  *********************************** */
                "INSERT INTO systemconfigrations(`key`, `values`, isActive, createdBy, updatedBy, isEditable, description, displayName, createByRoleId, updateByRoleId)  \n" +
                "VALUES ('DatePickerPaymentReportDateFormat', 'MM/dd/yyyy', 1, 1, 1, 1, 'Purpose: Apply date format in payment related reports.', 'DatePickerPaymentReportDateFormat', 1, 1);  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (585,'1.00','V1','Data Kyes for Date format in Payment Reports - Ashish'," + userid + ");"
            );
            break;
        case 585:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-11-2020  *********************************** */
                "drop function if exists fun_NumberToWords;  \n" +
                "CREATE FUNCTION fun_NumberToWords(pNumber decimal(20,2))  \n" +
                "    RETURNS VARCHAR(1024)  \n" +
                "BEGIN  \n" +
                "	Declare vtemp varchar(9);  \n" +
                "	Declare vtemp1 varchar(2);  \n" +
                "	Declare vA9   varchar(25);  \n" +
                "	Declare vA8   varchar(25);  \n" +
                "	Declare vA7   varchar(25);  \n" +
                "	Declare vA6   varchar(25);  \n" +
                "	Declare vA5   varchar(25);  \n" +
                "	Declare vA4   varchar(25);  \n" +
                "	Declare vA3   varchar(25);  \n" +
                "	Declare vA2   varchar(25);  \n" +
                "	Declare vA1   varchar(25);  \n" +
                "	Declare vD1   varchar(25);  \n" +
                "	Declare vD2   varchar(25);  \n" +
                "	Declare vResult varchar(200);  \n" +
                "	Declare vResult1 varchar(50);  \n" +
                "	Declare vZero varchar(10);  \n" +
                "	Declare vRetval varchar(300);  \n" +
                "BEGIN  \n" +
                "	set vtemp1 = SUBSTRING(CONVERT(((pNumber - floor(pNumber))*100), char),1,2);  \n" +
                "	set vtemp =  concat(repeat('0',9-length(convert(floor(pNumber), char))) , convert(floor(pNumber), char));  \n" +
                "    /*if SUBSTRING(vtemp1,1,1) = '0' and SUBSTRING(vtemp1,2,1) = '0' then  \n" +
                "		set vD1 = 'ZERO';   \n" +
                "		set vResult1 ='ZERO';  \n" +
                "    elseif SUBSTRING(vtemp1,1,1) = '0' and SUBSTRING(vtemp1,2,1) != '0' then  \n" +
                "		set vD1 = 'ZERO';  \n" +
                "        set vD2 = case SUBSTRING(vtemp1,2,1) when '1' then 'ONE' when '2' then 'TWO' when '3' then 'THREE' when '4' then 'FOUR' when '5' then 'FIVE' when '6' then 'SIX' when '7' then 'SEVEN' when '8' then 'EIGHT' when '9' then 'NINE' end;  \n" +
                "        set vResult1 = concat(ifnull(vD1,''), ' ', ifnull(vD2,''));  \n" +
                "	elseif SUBSTRING(vtemp1,1,1) !='0' then  \n" +
                "	    if SUBSTRING(vtemp1,2,1) = '0' then  \n" +
                "            set vD1 = case SUBSTRING(vtemp1,1,1) when '1' then 'TEN' when '2' then 'TWENTY' when '3' then 'THIRTY' when '4' then 'FOURTY' when '5' then 'FIFTY' when '6' then 'SIXTY' when '7' then 'SEVENTY' when '8' then 'EIGHTY' when '9' then 'Ninety' end;  \n" +
                "            set vResult1 = ifnull(vD1,'');  \n" +
                "        elseif SUBSTRING(vtemp1,1,1) != '1' and SUBSTRING(vtemp1,2,1) != '0' then  \n" +
                "            set vD1 = case SUBSTRING(vtemp1,1,1) when '2' then 'TWENTY' when '3' then 'THIRTY' when '4' then 'FOURTY' when '5' then 'FIFTY' when '6' then 'SIXTY' when '7' then 'SEVENTY' when '8' then 'EIGHTY' when '9' then 'Ninety' end;  \n" +
                "            set vD2 = case SUBSTRING(vtemp1,2,1) when '1' then 'One' when '2' then 'Two' when '3' then 'Three' when '4' then 'Four' when '5' then 'Five' when '6' then 'Six' when '7' then 'Seven' when '8' then 'Eight' when '9' then 'Nine' end;  \n" +
                "            set vResult1 = concat(ifnull(vD1,''),' ', ifnull(vD2,''));  \n" +
                "		elseif SUBSTRING(vtemp1,1,1) = '1' and SUBSTRING(vtemp1,2,1) != '0' then  \n" +
                "            set vD1 = case SUBSTRING(vtemp1,2,1) when '1' then 'Eleven' when '2' then 'Twelve' when '3' then 'Thirteen' when '4' then 'Fourteen' when '5' then 'Fifteen' when '6' then 'Sixteen' when '7' then 'Seventeen' when '8' then 'Eighteen' when '9' then 'Nineteen' end;  \n" +
                "            set vResult1 = ifnull(vD1,'');  \n" +
                "		end if;  \n" +
                "    end if;*/  \n" +
                "  \n" +
                "    set vtemp1 = replace(ifnull(vtemp1,''),'.','');  \n" +
                "    set vtemp1 =  concat(repeat('0',2-length(vtemp1)), vtemp1);  \n" +
                "    set vResult1 = ifnull(vtemp1,'');  \n" +
                "  \n" +
                "    if SUBSTRING(vtemp,9,1) != '0' and SUBSTRING(vtemp,8,1) != '1' then  \n" +
                "		set vA9 = case SUBSTRING(vtemp,9,1) when '1' then 'ONE' when '2' then 'TWO' when '3' then 'THREE' when '4' then 'FOUR' when '5' then 'FIVE' when '6' then 'SIX' when '7' then 'SEVEN' when '8' then 'EIGHT' when '9' then 'NINE' end;  \n" +
                "		set vA8 = case SUBSTRING(vtemp,8,1) when '2' then 'TWENTY' when '3' then 'THIRTY' when '4' then 'FOURTY' when '5' then 'FIFTY' when '6' then 'SIXTY' when '7' then 'SEVENTY' when '8' then 'EIGHTY' when '9' then 'Ninety' end;  \n" +
                "		if SUBSTRING(vtemp,7,1)!= '0'  then  \n" +
                "             set vA7 = case SUBSTRING(vtemp,7,1) when '1' then 'One' when '2' then 'Two' when '3' then 'Three' when '4' then 'Four' when '5' then 'Five' when '6' then 'Six' when '7' then 'Seven' when '8' then 'Eight' when '9' then 'Nine' end;  \n" +
                "             set vA7 = concat(vA7, ' HUNDRED');  \n" +
                "		else   \n" +
                "			set vA7 = NULL;  \n" +
                "		end if;  \n" +
                "		set vResult = concat(ifnull(vA7,''),' ',ifnull(vA8,''),' ',ifnull(vA9,''));  \n" +
                "    end if;  \n" +
                "    if SUBSTRING(vtemp,9,1) = '0' then  \n" +
                "		set vA8 = case SUBSTRING(vtemp,8,1) when '1' then 'Ten' when '2' then 'Twenty' when '3' then 'Thirty' when '4' then 'Fourty' when '5' then 'Fifty' when '6' then 'Sixty' when '7' then 'Seventy' when '8' then 'Eighty' when '9' then 'Ninety' end;  \n" +
                "		if SUBSTRING(vtemp,7,1)!= '0' then  \n" +
                "			set vA7 = case SUBSTRING(vtemp,7,1) when '1' then 'One' when '2' then 'Two' when '3' then 'Three' when '4' then 'Four' when '5' then 'Five' when '6' then 'Six' when '7' then 'Seven' when '8' then 'Eight' when '9' then 'Nine' end;  \n" +
                "		else   \n" +
                "			set vA7 = NULL;  \n" +
                "        end if;  \n" +
                "		IF vA7 IS NOT NULL then  \n" +
                "			set vA7 = concat(vA7, ' HUNDRED ');  \n" +
                "		end if;  \n" +
                "		set vResult = concat(ifnull(vA7,''), ifnull(vA8,''));  \n" +
                "    end if;  \n" +
                "	if SUBSTRING(vtemp,9,1) != '0' and SUBSTRING(vtemp,8,1) = '1' then  \n" +
                "		set vA8 = case SUBSTRING(vtemp,9,1) when '1' then 'Eleven' when '2' then 'Twelve' when '3' then 'Thirteen' when '4' then 'Fourteen' when '5' then 'Fifteen' when '6' then 'Sixteen' when '7' then 'Seventeen' when '8' then 'Eighteen' when '9' then 'Nineteen' end;  \n" +
                "		if SUBSTRING(vtemp,7,1)!= '0' then  \n" +
                "			set vA7 = case SUBSTRING(vtemp,7,1) when '1' then 'One' when '2' then 'Two' when '3' then 'Three' when '4' then 'Four' when '5' then 'Five' when '6' then 'Six' when '7' then 'Seven' when '8' then 'Eight' when '9' then 'Nine' end;  \n" +
                "		else   \n" +
                "			set vA7 = NULL;  \n" +
                "		end if;  \n" +
                "		IF vA7 IS NOT NULL then  \n" +
                "			set vA7 = concat(vA7,' HUNDRED ');  \n" +
                "		end if;  \n" +
                "		set vResult = concat(ifnull(vA7,''), ifnull(vA8,''));  \n" +
                "    end if;  \n" +
                "  \n" +
                "	if SUBSTRING(vtemp,6,1) != '0' and SUBSTRING(vtemp,5,1) != '1' then  \n" +
                "		set vA6 = case SUBSTRING(vtemp,6,1) when '1' then 'One' when '2' then 'Two' when '3' then 'Three' when '4' then 'Four' when '5' then 'Five' when '6' then 'Six' when '7' then 'Seven' when '8' then 'Eight' when '9' then 'Nine' end;  \n" +
                "        set vA5 = case SUBSTRING(vtemp,5,1) when '2' then 'Twenty' when '3' then 'Thirty' when '4' then 'Fourty' when '5' then 'Fifty' when '6' then 'Sixty' when '7' then 'Seventy' when '8' then 'Eighty' when '9' then 'Ninety' end;  \n" +
                "		set vA6 = concat(ifnull(vA5,''), ' ', ifnull(vA6,''));  \n" +
                "    elseif SUBSTRING(vtemp,6,1)= '0' and SUBSTRING(vtemp,5,1) != '0' then  \n" +
                "		set vA6 = case SUBSTRING(vtemp,5,1) when '1' then 'Ten' when '2' then 'Twenty' when '3' then 'Thirty' when '4' then 'Fourty' when '5' then 'Fifty' when '6' then 'Sixty' when '7' then 'Seventy' when '8' then 'Eighty' when '9' then 'Ninety' end;  \n" +
                "    elseif  SUBSTRING(vtemp,6,1)!= '0' and SUBSTRING(vtemp,5,1) = '1' then  \n" +
                "		set vA6 = case SUBSTRING(vtemp,6,1) when '1' then 'Eleven' when '2' then 'Twelve' when '3' then 'Thirteen' when '4' then 'Fourteen' when '5' then 'Fifteen' when '6' then 'Sixteen' when '7' then 'Seventeen' when '8' then 'Eighteen' when '9' then 'Nineteen' end;  \n" +
                "    else  \n" +
                "		set vA6 = NULL;  \n" +
                "	end if;  \n" +
                "	/*Problem from here*/  \n" +
                "  \n" +
                "    IF vA6 IS NOT NULL then  \n" +
                "		set vA6 = concat(vA6,' THOUSAND ');  \n" +
                "	END IF;  \n" +
                "    set vResult = concat(ifnull(vA6,''), ifnull(vResult,''));  \n" +
                "    if  SUBSTRING(vtemp,4,1) != '0' and SUBSTRING(vtemp,3,1) != '1' then  \n" +
                "		set vA4 = case SUBSTRING(vtemp,4,1) when '1' then 'One' when '2' then 'Two' when '3' then 'Three' when '4' then 'Four' when '5' then 'Five' when '6' then 'Six' when '7' then 'Seven' when '8' then 'Eight' when '9' then 'Nine' end;  \n" +
                "        set vA3 = case SUBSTRING(vtemp,3,1) when '2' then 'Twenty' when '3' then 'Thirty' when '4' then 'Fourty' when '5' then 'Fifty' when '6' then 'Sixty' when '7' then 'Seventy' when '8' then 'Eighty' when '9' then 'Ninety' end;  \n" +
                "        set vA4 = concat(ifnull(vA3,''), ' ', ifnull(vA4,''));  \n" +
                "    elseif  SUBSTRING(vtemp,4,1)='0' and SUBSTRING(vtemp,3,1)!= '0' then  \n" +
                "		set vA4 = case SUBSTRING(vtemp,3,1) when '1' then 'Ten' when '2' then 'Twenty' when '3' then 'Thirty' when '4' then 'Fourty' when '5' then 'Fifty' when '6' then 'Sixty' when '7' then 'Seventy' when '8' then 'Eighty' when '9' then 'Ninety' end;  \n" +
                "    elseif  SUBSTRING(vtemp,4,1)!='0' and SUBSTRING(vtemp,3,1) = '1' then  \n" +
                "		set vA4 = case SUBSTRING(vtemp,4,1) when '1' then 'Eleven' when '2' then 'Twelve' when '3' then 'Thirteen' when '4' then 'Fourteen' when '5' then 'Fifteen' when '6' then 'Sixteen' when '7' then 'Seventeen' when '8' then 'Eighteen' when '9' then 'Nineteen' end;  \n" +
                "    else  \n" +
                "		set vA4 = NULL;  \n" +
                "	end if;  \n" +
                "	IF vA4 IS NOT NULL then  \n" +
                "		set vA4 = concat(vA4,' LAKH ');  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vResult = concat(ifnull(vA4,''), vResult);  \n" +
                "  \n" +
                "	if SUBSTRING(vtemp,2,1) != '0' and SUBSTRING(vtemp,1,1) != '1' then  \n" +
                "        set vA2 = case SUBSTRING(vtemp,2,1) when '1' then 'One' when '2' then 'Two' when '3' then 'Three' when '4' then 'Four' when '5' then 'Five' when '6' then 'Six' when '7' then 'Seven' when '8' then 'Eight' when '9' then 'Nine' end;  \n" +
                "        set vA1 = case SUBSTRING(vtemp,1,1) when '2' then 'Twenty' when '3' then 'Thirty' when '4' then 'Fourty' when '5' then 'Fifty' when '6' then 'Sixty' when '7' then 'Seventy' when '8' then 'Eighty' when '9' then 'Ninety' end;  \n" +
                "        set vA2 = concat(ifnull(vA1,''), ' ', ifnull(vA2,''));  \n" +
                "    elseif  SUBSTRING(vtemp,2,1)= '0' and SUBSTRING(vtemp,1,1)!= '0' then  \n" +
                "        set vA2 = case SUBSTRING(vtemp,1,1) when '1' then 'Ten' when '2' then 'Twenty' when '3' then 'Thirty' when '4' then 'Fourty' when '5' then 'Fifty' when '6' then 'Sixty' when '7' then 'Seventy' when '8' then 'Eighty' when '9' then 'Ninety' end;  \n" +
                "    elseif  SUBSTRING(vtemp,2,1)!= '0' and SUBSTRING(vtemp,1,1) = '1' then  \n" +
                "		set vA2 = case SUBSTRING(vtemp,2,1) when '1' then 'Eleven' when '2' then 'Twelve' when '3' then 'Thirteen' when '4' then 'Fourteen' when '5' then 'Fifteen' when '6' then 'Sixteen' when '7' then 'Seventeen' when '8' then 'Eighteen' when '9' then 'Nineteen' end;  \n" +
                "    else  \n" +
                "		set vA2 = NULL;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF vA2 IS NOT NULL then  \n" +
                "		set vA2 = Concat(vA2,' CRORE ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    set vResult = concat(ifnull(vA2,''), vResult);  \n" +
                "	set vZero = ' USD';  \n" +
                "	/*if vResult1 = 'ZERO' then  \n" +
                "		set vZero = ' ONLY';  \n" +
                "	else  \n" +
                "		set vZero = ' ONLY';  \n" +
                "	end if;*/  \n" +
                "    /*return dbo.InitCap(ifnull(vResult,'')+ ' AND CENTS '+ ifnull(vResult1,'') +vZero)*/  \n" +
                "	/*if vResult1 = 'ZERO' then  \n" +
                "		set vRetval = dbo.InitCap(ifnull(vResult,'') + vZero);  \n" +
                "	else  \n" +
                "		set vRetval = dbo.InitCap(ifnull(vResult,'')+ ' AND PAISA '+ ifnull(vResult1,'') +vZero);  \n" +
                "	end if;*/  \n" +
                "  \n" +
                "	set vRetval = ltrim(concat(ifnull(vResult,''), ' AND '));  \n" +
                "  \n" +
                "    set vRetval = CONCAT(UCASE(LEFT(vRetval, 1)),  \n" +
                "						 LCASE(SUBSTRING(vRetval, 2)));  \n" +
                "  \n" +
                "    set vRetval = concat(vRetval, ifnull(vResult1,''),'/100', vZero);  \n" +
                "	return vRetval;  \n" +
                "	END;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (586,'1.00','V1','Created fun_NumberToWords function - Ashish'," + userid + ");"
            );
            break;
        case 586:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-11-2020  *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(    \n" +
                "	IN pPaymentID text(11)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,     \n" +
                "				pip.paymentAmount,   \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,    \n" +
                "				pip.payToAddress,  \n" +
                "				ca.companyName supplierName,    \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) supplierAddress,    \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber    \n" +
                "		  from packingslip_invoice_payment pip    \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1      \n" +
                "		 where pip.isDeleted = 0    \n" +
                "		   and pip.id = pPaymentID;    \n" +
                "  \n" +
                "		  SELECT p.refPayementid id,    \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN    \n" +
                "							p.invoiceNumber    \n" +
                "						WHEN p.`receiptType` = 'C' THEN    \n" +
                "							p.creditMemoNumber    \n" +
                "						ELSE    \n" +
                "							p.debitMemoNumber    \n" +
                "					END) invoiceNumber,    \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN    \n" +
                "							p.invoiceNumber    \n" +
                "				else    \n" +
                "					(SELECT 	ps.invoiceNumber               \n" +
                "					FROM 	packing_slip_material_receive ps               \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno              \n" +
                "							AND ps.isDeleted = 0  )    \n" +
                "				end    \n" +
                "				) refInvoiceNumber,    \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN    \n" +
                "							p.invoiceDate    \n" +
                "						WHEN p.`receiptType` = 'C' THEN    \n" +
                "							p.creditMemoDate    \n" +
                "						ELSE    \n" +
                "							p.debitMemoDate    \n" +
                "					END) invoiceDate,    \n" +
                "  \n" +
                "				null `description`,    \n" +
                "				(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,    \n" +
                "				0 discount,    \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN    \n" +
                "							'Invoice'    \n" +
                "						WHEN p.`receiptType` = 'C' THEN    \n" +
                "							'Credit Memo'    \n" +
                "						ELSE    \n" +
                "							'Debit Memo'    \n" +
                "					END) receiptMemoType    \n" +
                "			FROM packing_slip_material_receive p    \n" +
                "			WHERE p.isDeleted =0    \n" +
                "			and p.receiptType in ('I','C','D')    \n" +
                "			and p.`status` = 'P'    \n" +
                "			 and p.refPayementid = pPaymentID;    \n" +
                "  \n" +
                "		SELECT concat(cua.street1,',\r',cua.city,', ',cua.state,' ',cua.postcode,'\r',c.countryName) AS address,  \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,                      \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, cu.mfgName companyName    \n" +
                "		FROM customer_addresses cua                              \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                              \n" +
                "        join countrymst c ON c.countryID = cua.countryID  \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;          \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePaymentLines`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentLines`(                                      \n" +
                "	IN pPaymentID INT    \n" +
                ")  \n" +
                "BEGIN	    \n" +
                "    SELECT  ps.id,  \n" +
                "		SUM(psd.extendedPrice) totalExtendedAmount,    \n" +
                "		ps.receiptType,    \n" +
                "		ps.invoiceNumber,    \n" +
                "		ps.invoiceDate,    \n" +
                "		ps.creditMemoNumber,    \n" +
                "		ps.creditMemoDate,    \n" +
                "		ps.debitMemoNumber,    \n" +
                "		ps.debitMemoDate,    \n" +
                "        psr.invoiceNumber refInvoiceNumber,  \n" +
                "        ps.refParentCreditDebitInvoiceno  \n" +
                "    FROM     \n" +
                "		packingslip_invoice_payment_det pid    \n" +
                "    INNER JOIN  packing_slip_material_receive ps ON pid.refPackingslipInvoiceID = ps.id     \n" +
                "    INNER JOIN  packing_slip_material_receive_det psd ON ps.id = psd.refPackingSlipMaterialRecID    \n" +
                "	LEFT JOIN packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno AND psr.isDeleted = 0     \n" +
                "	WHERE pid.refPayementid = pPaymentID AND    \n" +
                "		  pid.isDeleted = 0 AND    \n" +
                "		  ps.isDeleted = 0    \n" +
                "	GROUP BY ps.id,	ps.receiptType, ps.invoiceNumber,    \n" +
                "			 ps.invoiceDate, ps.creditMemoNumber, ps.creditMemoDate,    \n" +
                "		    ps.debitMemoNumber, ps.debitMemoDate, psr.invoiceNumber,ps.refParentCreditDebitInvoiceno;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (587,'1.00','V1','changes in Sproc_RetrieveSupplierInvoicePaymentLines and Sproc_GetCheckPrintAndRemittanceReport SP - Ashish'," + userid + ");"
            );
            break;
        case 587:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-11-2020  *********************************** */
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "CHANGE COLUMN `payToAddress` `payToAddress` VARCHAR(255) NULL;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (588,'1.00','V1','Make payToAddress nullable due to old data maintain - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 588:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD internalRef VARCHAR(50) AFTER refChargesTypeId;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (589,'1.00','V1','Packing slip and Invoice flow chages - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 589:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD purchaseInspectionComment LONGTEXT;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (590,'1.00','V1','Packing slip and Invoice flow chages - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 590:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det MODIFY COLUMN remark LONGTEXT;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (591,'1.00','V1','Packing slip and Invoice flow chages - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 591:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive ADD packingSlipModeStatus VARCHAR(5) AFTER `status`;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (592,'1.00','V1','Packing slip and Invoice flow chages - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 592:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive MODIFY COLUMN `status` VARCHAR(5);  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (593,'1.00','V1','Packing slip and Invoice flow chages - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 593:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "UPDATE 	packing_slip_material_receive  \n" +
                "SET 	packingSlipModeStatus = (  \n" +
                "					CASE  \n" +
                "						WHEN (refPackingSlipNumberForInvoice IS NOT NULL) THEN 'P'  \n" +
                "						ELSE 'D'   \n" +
                "					END  \n" +
                "				)  \n" +
                "WHERE 	receiptType = 'P' AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE 	packing_slip_material_receive ps  \n" +
                "SET 	ps.`status` = (  \n" +
                "			CASE   \n" +
                "				WHEN refPayementid IS NOT NULL THEN 'P'  \n" +
                "				WHEN ((SELECT COUNT(1) FROM (SELECT COUNT(1) FROM packing_slip_material_receive_det pd WHERE pd.refPackingSlipMaterialRecID = ps.id AND isDeleted = 0 GROUP BY `status`) AS a) != 1) THEN 'I'  \n" +
                "				WHEN ((SELECT COUNT(1) FROM packing_slip_material_receive_det pd WHERE pd.refPackingSlipMaterialRecID = ps.id AND `status` = 'A' AND isDeleted = 0) = (SELECT COUNT(1) FROM packing_slip_material_receive_det pd WHERE pd.refPackingSlipMaterialRecID = ps.id AND isDeleted = 0)) THEN 'A'   \n" +
                "				ELSE 'PE'  \n" +
                "			END  \n" +
                "		)  \n" +
                "WHERE 	ps.isDeleted = 0 AND ps.receiptType IN ('I','C','D');  \n" +
                "  \n" +
                "UPDATE 	packing_slip_material_receive p, (SELECT ps.id, ps.`status` FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0) a  \n" +
                "SET 	p.`status` = (  \n" +
                "		CASE  \n" +
                "			WHEN p.packingSlipModeStatus = 'D' THEN 'I'  \n" +
                "			WHEN (p.packingSlipModeStatus = 'P' AND p.refPackingSlipNumberForInvoice IS NULL) THEN 'W'  \n" +
                "			WHEN (p.packingSlipModeStatus = 'P' AND p.refPackingSlipNumberForInvoice IS NOT NULL AND (a.`status` != 'A' AND a.`status` != 'P')) THEN 'IR'  \n" +
                "			WHEN (p.packingSlipModeStatus = 'P' AND p.refPackingSlipNumberForInvoice IS NOT NULL AND (a.`status` = 'A')) THEN 'A'  \n" +
                "			WHEN (p.packingSlipModeStatus = 'P' AND p.refPackingSlipNumberForInvoice IS NOT NULL AND (a.`status` = 'P')) THEN 'P'  \n" +
                "			ELSE NULL  \n" +
                "		END  \n" +
                "	)  \n" +
                "WHERE 	p.receiptType = 'P' AND a.id = p.refPackingSlipNumberForInvoice AND p.isDeleted = 0;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (594,'1.00','V1','Packing slip and Invoice flow chages - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 594:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                                        \n" +
                "	IN pPageIndex INT,                                        \n" +
                "	IN pRecordPerPage INT,                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                            \n" +
                "	IN pReceiptType VARCHAR(10),      \n" +
                "    IN pMfgCodeIds LONGTEXT,      \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "    IN pDueDate DATE,      \n" +
                "    IN pAdditionalDays INT,      \n" +
                "    IN pTermsAndAboveDays INT,      \n" +
                "    IN pInvoiceNumber VARCHAR(50)      \n" +
                ")  \n" +
                "BEGIN                                        \n" +
                "	DECLARE pOffset INT;                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);            \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;              \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"              \n" +
                "		SELECT 		p.id,          \n" +
                "				p.poNumber,          \n" +
                "				p.mfgCodeID,          \n" +
                "				p.supplierSONumber,          \n" +
                "				p.packingSlipNumber,          \n" +
                "				p.packingSlipDate,          \n" +
                "				p.invoiceNumber,          \n" +
                "				p.invoiceDate,          \n" +
                "				p.creditMemoNumber,          \n" +
                "				p.creditMemoDate,          \n" +
                "				p.debitMemoNumber,          \n" +
                "				p.debitMemoDate,          \n" +
                "				p.receiptDate,          \n" +
                "				p.description,          \n" +
                "				p.billToAddress,          \n" +
                "				p.shipToAddress,          \n" +
                "				p.poVersion,          \n" +
                "				p.isDeleted,          \n" +
                "				p.receiptType,          \n" +
                "				p.`status`,          \n" +
                "				pinv.paymentNumber chequeNumber,          \n" +
                "				pinv.paymentDate chequeDate,          \n" +
                "				pinv.paymentAmount chequeAmount,       \n" +
                "				pinv.bankAccountNo,    \n" +
                "				pinv.bankAccountMasID,    \n" +
                "				pinv.accountReference,    \n" +
                "				gp.gencCategoryName paymentTypeName,    \n" +
                "				pinv.paymentType,  \n" +
                "				p.applyDate,          \n" +
                "				p.refParentCreditDebitInvoiceno,          \n" +
                "				p.refPackingSlipNumberForInvoice,          \n" +
                "				p.invoiceTotalDue,          \n" +
                "				p.isTariffInvoice,          \n" +
                "				pinv.bankName,              									                             \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,                       \n" +
                "				fun_getUserNameByID(p.createdBy)  createdByName,            \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,            \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                     \n" +
                "				fun_getMfgCodeByID(p.mfgCodeID) supplierCode,			              \n" +
                "				(              \n" +
                "					SELECT COUNT(1)               \n" +
                "					  FROM genericfiles g               \n" +
                "					 WHERE g.refTransID = p.id               \n" +
                "					   and g.entityID = -13      \n" +
                "					   AND g.gencFileOwnerType = 'supplier_invoice'               \n" +
                "					   AND g.isDeleted =0      \n" +
                "				) invoiceDocCount,              \n" +
                "				(              \n" +
                "					SELECT COUNT(1)               \n" +
                "					 FROM genericfiles g               \n" +
                "					WHERE g.refTransID = (SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = p.id)               \n" +
                "					  and g.entityID = -14      \n" +
                "					  AND g.gencFileOwnerType = 'packing_slip'               \n" +
                "					  AND g.isDeleted =0      \n" +
                "				) packingSlipDocCount,	                              \n" +
                "				pd.itemReceived,      \n" +
                "				pd.itemDisapproved,      \n" +
                "				(              \n" +
                "					CASE 	WHEN p.`receiptType` = 'I' THEN               \n" +
                "							'Invoice'               \n" +
                "						WHEN p.`receiptType` = 'C' THEN               \n" +
                "							'Credit Memo'               \n" +
                "						ELSE               \n" +
                "							'Debit Memo'               \n" +
                "					END              \n" +
                "				) receiptMemoType,      									                        \n" +
                "				(              \n" +
                "					CASE 	WHEN p.`status` = 'PE' THEN               \n" +
                "							'Pending'               \n" +
                "						WHEN p.`status` = 'I' THEN               \n" +
                "							'Investigate'               \n" +
                "						WHEN p.`status` = 'A' THEN               \n" +
                "							'Approved to Pay'               \n" +
                "						ELSE               \n" +
                "							'Paid'               \n" +
                "					END              \n" +
                "				) invoiceVerificationStatus,                              \n" +
                "				ps.invoiceNumber refInvoiceNumber,                  \n" +
                "				pd.totalExtendedAmount,      \n" +
                "				pe.totalCreditAmount,      \n" +
                "				pe.totalDebitAmount,      \n" +
                "				(      \n" +
                " 					IFNULL(pd.totalExtendedAmount, 0)      \n" +
                " 					- IFNULL((pe.totalCreditAmount*-1), 0)      \n" +
                " 					- IFNULL((pe.totalDebitAmount*-1), 0)      \n" +
                " 				) amountToPay,      \n" +
                "				pd.packingDetailNote,      \n" +
                "				pd.approveLineCount,      \n" +
                "				DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),       \n" +
                "				INTERVAL IFNULL((max(p.termsDays) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,      \n" +
                "				p.refPayementid,      \n" +
                "				max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,  \n" +
                "				max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,    \n" +
                "				(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = ifnull(p.refParentCreditDebitInvoiceno,p.id)) packingSlipId    \n" +
                "				psm.packingSlipModeStatus      \n" +
                "		FROM		packing_slip_material_receive p      \n" +
                "		LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0      \n" +
                "		LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id   \n" +
                "		\");    \n" +
                "  \n" +
                "		IF (pPaymentMethodTypeIds IS NULL OR pPaymentMethodTypeIds = '') THEN      \n" +
                "			SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" left \");      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"      \n" +
                "				join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0      \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'   \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'  \n" +
                "				left join (select a.refPackingSlipMaterialRecID,      \n" +
                "						GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,      \n" +
                "						sum(a.itemReceived) itemReceived,      \n" +
                "						sum(a.itemDisapproved) itemDisapproved,      \n" +
                "						sum(a.approveLineCount) approveLineCount,      \n" +
                "						sum(a.extendedPrice) totalExtendedAmount      \n" +
                "				from (SELECT psm.refPackingSlipMaterialRecID, psm.packingSlipSerialNumber, psm.approveNote,      \n" +
                "							1 itemReceived,      \n" +
                "							case when psm.status='D' then      \n" +
                "								1 else 0 end itemDisapproved,      \n" +
                "							case when psm.status='A' then      \n" +
                "								1 else 0 end approveLineCount,      \n" +
                "							extendedPrice      \n" +
                "					  FROM packing_slip_material_receive_det psm      \n" +
                "					 WHERE psm.isDeleted = 0) a      \n" +
                "				group by a.refPackingSlipMaterialRecID) pd ON pd.refPackingSlipMaterialRecID = p.id      \n" +
                "				left join (select ps.refParentCreditDebitInvoiceno,       \n" +
                "						sum(case when ps.receiptType = 'C' then      \n" +
                "							pd.extendedPrice      \n" +
                "						else 0 end) totalCreditAmount,      \n" +
                "						sum(case when ps.receiptType = 'D' then      \n" +
                "							pd.extendedPrice      \n" +
                "						else 0 end) totalDebitAmount      \n" +
                "				  from packing_slip_material_receive ps      \n" +
                "				  inner join packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID      \n" +
                "					and ps.isDeleted = 0      \n" +
                "					and pd.isDeleted = 0      \n" +
                "					and ps.receiptType in ('C','D')      \n" +
                "			group by ps.refParentCreditDebitInvoiceno) pe ON pe.refParentCreditDebitInvoiceno = p.id      \n" +
                "		    WHERE p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')      \n" +
                "	\");      \n" +
                "  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND pinv.paymentType in (', pPaymentMethodTypeIds, ' )');      \n" +
                "    END IF;      \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;      \n" +
                "	ELSE                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                        \n" +
                "		SET pWhereClause = '1=1' ;                                        \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "    IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND ( c.supplierSONumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.poNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.packingSlipNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.invoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"      \n" +
                "									  \" ) \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                         \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "	ELSE	                                        \n" +
                "		SET rowNumWhere = '';                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "	/* to get total count of rows */                                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                        \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.*,      \n" +
                "										case when c.refPayementid is null and c.paymentDueDate <= current_date() then      \n" +
                "											1      \n" +
                "										else 0 end isPaymentDueDatePassed      \n" +
                "									FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                        \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(        \n" +
                "	IN pPageIndex INT,                                                                              \n" +
                "	IN pRecordPerPage INT,                                                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                    \n" +
                "	IN pPackingSlipID INT                                                                 \n" +
                ")  \n" +
                "BEGIN                                                                    \n" +
                "	DECLARE pOffset INT;                                                                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                \n" +
                "	DECLARE v_ParentPackingSlipId INT;              \n" +
                "	DECLARE v_InvoiceSlipId INT;             \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                         \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                                                                              \n" +
                "	SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                        \n" +
                "			CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                                   \n" +
                "			p.nickname, 					p.partID, 						p.scanLabel, 	                                                    \n" +
                "			p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                    \n" +
                "			p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                    \n" +
                "			p.invoicePrice, 				p.disputedPrice,					            \n" +
                "			fun_getUserNameByID(p.createdBy) createdByName,                                                     \n" +
                "			fun_getUserNameByID(p.updatedBy) updatedByName, 	            \n" +
                "			fun_getRoleByID(p.createByRoleId) createdbyRole,     	         \n" +
                "			fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					            \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					            \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                            \n" +
                "			p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                     \n" +
                "			p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                                     \n" +
                "			p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                                    \n" +
                "			fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                               \n" +
                "			c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                               \n" +
                "			c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                        \n" +
                "			0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                      \n" +
                "			p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                      \n" +
                "			fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                \n" +
                "			c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                    \n" +
                "			sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                              \n" +
                "			sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,    \n" +
                "			c.partType,                     \n" +
                "			(                \n" +
                "				CASE                \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN                \n" +
                "						p.receivedStatus                \n" +
                "					ELSE                 \n" +
                "						(SELECT receivedStatus                 \n" +
                "						FROM 	packing_slip_material_receive_det                 \n" +
                "						WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                 \n" +
                "								AND packingSlipSerialNumber = p.packingSlipSerialNumber                  \n" +
                "								AND isDeleted = 0 LIMIT 1)                \n" +
                "				END                \n" +
                "			)                \n" +
                "			receivedStatus,				                \n" +
                "			(                \n" +
                "				CASE                 \n" +
                "					WHEN p.receivedStatus = 'P' THEN 'Pending'                \n" +
                "					WHEN p.receivedStatus = 'A' THEN 'Accepted'                \n" +
                "					WHEN p.receivedStatus = 'R' THEN 'Rejected'                \n" +
                "					ELSE NULL                \n" +
                "				END                \n" +
                "			) AS receivedStatusValue,                \n" +
                "			p.remark,               \n" +
                "			p.comment,  \n" +
                "			p.internalRef,  \n" +
                "			p.purchaseInspectionComment,             \n" +
                "			(                \n" +
                "				CASE                \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN                \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')        \n" +
                "					ELSE                 \n" +
                "						(SELECT COUNT(1)                 \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det psmp        \n" +
                "						WHERE EXISTS (        \n" +
                "								SELECT 	1                 \n" +
                "								FROM 	packing_slip_material_receive_det pslip        \n" +
                "								WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                 \n" +
                "                                 AND 	pslip.id = psmp.lineId        \n" +
                "								 AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                 \n" +
                "								 AND	pslip.isDeleted = 0)        \n" +
                "							AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                \n" +
                "				END                \n" +
                "			) AS purchaseRequirementCount,                \n" +
                "			(                \n" +
                "				CASE                \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN                \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                \n" +
                "					ELSE                \n" +
                "						(SELECT COUNT(1)                 \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det psm                \n" +
                "						WHERE 	EXISTS (        \n" +
                "								SELECT 	1        \n" +
                "								FROM 	packing_slip_material_receive_det psmr        \n" +
                "								WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "                                  AND	psmr.id = psm.lineId        \n" +
                "								  AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "								  AND 	psmr.isDeleted = 0        \n" +
                "									)        \n" +
                "							AND psm.inspectionStatus = 'R'                 \n" +
                "							AND psm.isDeleted = 0        \n" +
                "							AND psm.category = 'P' AND psm.requiementType = 'R')        \n" +
                "				END                \n" +
                "			) AS rejectedPurchaseRequirementCount,                  \n" +
                "			(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                                    \n" +
                "			fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                              \n" +
                "			(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                        \n" +
                "			 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                        \n" +
                "			(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                          \n" +
                "			(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                          \n" +
                "			(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,               \n" +
                "			(              \n" +
                "				CASE              \n" +
                "					WHEN 	v_InvoiceSlipId IS NULL THEN NULL              \n" +
                "					ELSE               \n" +
                "						(SELECT `status`               \n" +
                "						FROM 	packing_slip_material_receive_det               \n" +
                "						WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId               \n" +
                "								AND packingSlipSerialNumber = p.packingSlipSerialNumber               \n" +
                "								AND isDeleted = 0)        \n" +
                "				END              \n" +
                "			) invoiceStatus,                          \n" +
                "			sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                       \n" +
                "			(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd         \n" +
                "			  WHERE pd.isdeleted = 0 AND pd.category = 'P'        \n" +
                "				AND pd.requiementType ='C' AND pd.lineId = p.id        \n" +
                "				AND pd.partId = p.partID) commentCount        \n" +
                "	FROM		packing_slip_material_receive_det p                                                            \n" +
                "	LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                    \n" +
                "	LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL                                        \n" +
                "	WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                     \n" +
                "	AND 		p.isDeleted = 0;                                                                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                              \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                      \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                    \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID         \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)        \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)        \n" +
                "	AND			ps.receiptType = 'P'                                                          \n" +
                "	AND			psm.isDeleted = 0        \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                  \n" +
                "  \n" +
                "	-- Set received qty detail                                                                          \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                              \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty, r.pendingQty = (r.orderedQty - IFNULL(q.totalReceivedQty,0))        \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                              \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                              \n" +
                "		SET pWhereClause = '1=1' ;                                                                              \n" +
                "	END IF;	                                                                      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                               \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                              \n" +
                "	ELSE	                                                                              \n" +
                "		SET rowNumWhere = '';                                                                              \n" +
                "	END IF;	                                                                              \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                              \n" +
                "	EXECUTE query1;                                                                              \n" +
                "	DEALLOCATE PREPARE query1;                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                              \n" +
                "	EXECUTE query2;                                                                              \n" +
                "	DEALLOCATE PREPARE query2;                                                                          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(                                          \n" +
                "	IN pPageIndex INT,                                          \n" +
                "	IN pRecordPerPage INT,                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                              \n" +
                "	IN pReceiptType VARCHAR(10),    \n" +
                "	IN pMfgCodeIds VARCHAR(16383),    \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50)    \n" +
                ")  \n" +
                "BEGIN                                          \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);       \n" +
                "	SET SESSION group_concat_max_len = 500000;               \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;              \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;           \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN    \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN    \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (     \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'     \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'      \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'      \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"      \n" +
                "									  \" )     \n" +
                "					\");      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"	    \n" +
                "			SELECT  *    \n" +
                "			FROM	(    \n" +
                "					SELECT 		p.id,          \n" +
                "							p.poNumber,          \n" +
                "							p.mfgCodeID,          \n" +
                "							p.supplierSONumber,          \n" +
                "							p.packingSlipNumber,          \n" +
                "							p.packingSlipDate,          \n" +
                "							p.invoiceNumber,          \n" +
                "							p.invoiceDate,          \n" +
                "							p.creditMemoNumber,          \n" +
                "							p.creditMemoDate,          \n" +
                "							p.debitMemoNumber,          \n" +
                "							p.debitMemoDate,          \n" +
                "							p.receiptDate,          \n" +
                "							p.description,          \n" +
                "							p.billToAddress,          \n" +
                "							p.shipToAddress,          \n" +
                "							p.poVersion,          \n" +
                "							p.isDeleted,          \n" +
                "							p.receiptType,          \n" +
                "							p.`status`,     \n" +
                "							p.packingSlipModeStatus,       \n" +
                "							p.chequeNumber,          \n" +
                "							p.chequeDate,          \n" +
                "							p.chequeAmount,          \n" +
                "							p.applyDate,          \n" +
                "							p.refParentCreditDebitInvoiceno,          \n" +
                "							p.refPackingSlipNumberForInvoice,          \n" +
                "							p.invoiceTotalDue,          \n" +
                "							p.isTariffInvoice,          \n" +
                "							p.bankName,              									                             \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,                       \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,                             \n" +
                "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,                \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,            \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,            \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,            \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  	  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							g.documentCount packingSlipDocCount,  \n" +
                "							psm.totalDetailLine itemReceived  \n" +
                "					FROM		packing_slip_material_receive p    \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0    \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine   \n" +
                "								FROM 		packing_slip_material_receive_det psm   \n" +
                "								WHERE 		isDeleted = 0   \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 		g.refTransID, g.gencFileOwnerType, COUNT(1) documentCount   \n" +
                "								FROM 		genericfiles g   \n" +
                "								WHERE 		g.gencFileOwnerType = 'packing_slip'   \n" +
                "											AND g.isDeleted = 0   \n" +
                "								GROUP BY g.refTransID, g.gencFileOwnerType  \n" +
                "							) g ON g.refTransID = p.id                              \n" +
                "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')     \n" +
                "				) a    \n" +
                "			WHERE \", v_advanceFilterWhereClause    \n" +
                "		);                \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;                                          \n" +
                "	ELSE                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "	END IF;	                                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                          \n" +
                "		SET pWhereClause = '1=1' ;                                          \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                           \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "	ELSE	                                          \n" +
                "		SET rowNumWhere = '';                                          \n" +
                "	END IF;	                                          \n" +
                "  \n" +
                "	/* to get total count of rows */                             \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);            	                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveInvoiceAndInvoiceLineDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(                                                                                          \n" +
                "	IN pInvoiceDetail JSON,                                                \n" +
                "	IN pPackingSlipId INT,          \n" +
                "	IN pUserId VARCHAR(50),      \n" +
                "	IN pUserRoleId VARCHAR(50)                  \n" +
                ")  \n" +
                "BEGIN                     \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;                  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;                  \n" +
                "	DECLARE v_IdOfInvoice INT;                  \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                                                                                  \n" +
                "	BEGIN                                                                                                                  \n" +
                "		ROLLBACK;                                                                                                                  \n" +
                "		RESIGNAL;                                                                                                                  \n" +
                "	END;                                                                  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                                                                                  \n" +
                "	BEGIN                                                                                                                  \n" +
                "		ROLLBACK;                                                                                                                  \n" +
                "		RESIGNAL;                                                                                                                  \n" +
                "	END;                                                                  \n" +
                "  \n" +
                "	START TRANSACTION;  */                                                               \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS                                      \n" +
                "		SELECT 	*                                       \n" +
                "		FROM 	JSON_TABLE(                                      \n" +
                "			pInvoiceDetail,                                      \n" +
                "			\"$[*]\" COLUMNS(                                      \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",                                      \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",                                      \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",                                      \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",                                      \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",                                      \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",                                      \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",                                      \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",                                      \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",                                      \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",                                      \n" +
                "				applyDate DATE PATH \"$.applyDate\",                        \n" +
                "				-- refParentCreditDebitInvoiceno INT PATH \"$.refParentCreditDebitInvoiceno\",                        \n" +
                "				-- refPackingSlipNumberForInvoice INT PATH \"$.refPackingSlipNumberForInvoice\",                        \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",                        \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",                  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",    \n" +
                "                paymentTermsID INT PATH \"$.paymentTermsID\",    \n" +
                "                termsDays INT PATH \"$.termsDays\"    \n" +
                "			)                                      \n" +
                "		) AS Invoice_Detail_JT;               \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;                                                                                 \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail                          \n" +
                "		(                                                                                \n" +
                "			packingSlipSerialNumber VARCHAR(50),                        \n" +
                "			refChargesTypeId INT,              \n" +
                "			nickname VARCHAR(50),          \n" +
                "			partID INT,          \n" +
                "			refSupplierPartId INT,          \n" +
                "			scanLabel VARCHAR(1000),          \n" +
                "			orderedQty DECIMAL(18,8),          \n" +
                "			receivedQty DECIMAL(18,8),          \n" +
                "			packingSlipQty DECIMAL(18,8),          \n" +
                "			binID INT,          \n" +
                "			warehouseID INT,          \n" +
                "			parentWarehouseID INT,          \n" +
                "			invoicePrice DECIMAL(18,8),          \n" +
                "			purchasePrice DECIMAL(18,8),          \n" +
                "			disputedPrice DECIMAL(18,8),          \n" +
                "			approveNote VARCHAR(1000),          \n" +
                "			otherCharges INT,          \n" +
                "			`status` VARCHAR(1),          \n" +
                "			extendedPrice DECIMAL(18,8),          \n" +
                "			refCreditDebitInvoiceNo INT,          \n" +
                "			difference DECIMAL(18,8),          \n" +
                "			umidCreated TINYINT,          \n" +
                "			poReleaseNumber VARCHAR(1000),          \n" +
                "			packagingID INT,        \n" +
                "			receivedStatus VARCHAR(2),        \n" +
                "			remark VARCHAR(255)        \n" +
                "		);               \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (          \n" +
                "			packingSlipSerialNumber,                        \n" +
                "			refChargesTypeId,              \n" +
                "			nickname,          \n" +
                "			partID,          \n" +
                "			refSupplierPartId,          \n" +
                "			scanLabel,          \n" +
                "			orderedQty,          \n" +
                "			receivedQty,          \n" +
                "			packingSlipQty,          \n" +
                "			binID,          \n" +
                "			warehouseID,          \n" +
                "			parentWarehouseID,          \n" +
                "			invoicePrice,          \n" +
                "			purchasePrice,          \n" +
                "			disputedPrice,          \n" +
                "			approveNote,          \n" +
                "			otherCharges,          \n" +
                "			`status`,          \n" +
                "			extendedPrice,          \n" +
                "			refCreditDebitInvoiceNo,          \n" +
                "			difference,          \n" +
                "			umidCreated,          \n" +
                "			poReleaseNumber,          \n" +
                "			packagingID,        \n" +
                "			receivedStatus,        \n" +
                "			remark          \n" +
                "		)          \n" +
                "		SELECT  packingSlipSerialNumber,                        \n" +
                "			refChargesTypeId,              \n" +
                "			nickname,          \n" +
                "			partID,          \n" +
                "			refSupplierPartId,          \n" +
                "			scanLabel,          \n" +
                "			orderedQty,          \n" +
                "			receivedQty,          \n" +
                "			packingSlipQty,          \n" +
                "			binID,          \n" +
                "			warehouseID,          \n" +
                "			parentWarehouseID,          \n" +
                "			invoicePrice,          \n" +
                "			purchasePrice,          \n" +
                "			disputedPrice,          \n" +
                "			approveNote,          \n" +
                "			otherCharges,          \n" +
                "			`status`,          \n" +
                "			extendedPrice,          \n" +
                "			refCreditDebitInvoiceNo,          \n" +
                "			difference,          \n" +
                "			umidCreated,          \n" +
                "			poReleaseNumber,          \n" +
                "			packagingID,        \n" +
                "			receivedStatus,        \n" +
                "			remark            \n" +
                "		FROM 	packing_slip_material_receive_det           \n" +
                "		WHERE 	deletedAt IS NULL           \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;          \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;                  \n" +
                "  \n" +
                "		IF (v_CountOfInvoiceDetail > 0) THEN                  \n" +
                "			INSERT INTO packing_slip_material_receive (poNumber, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice, createdBy, updatedBy,paymentTermsID,termsDays)                  \n" +
                "			SELECT 	poNumber, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice, pUserId, pUserId,paymentTermsID,termsDays    \n" +
                "			FROM 	temp_Invoice_Detail;	                  \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;                  \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive                  \n" +
                "			SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,   \n" +
                "				`status` = 'IR'  \n" +
                "			WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)                  \n" +
                "					AND deletedAt IS NULL;                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;                  \n" +
                "		IF (v_CountOfInvoiceLineDetail > 0) THEN                  \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, orderedQty, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)                  \n" +
                "			SELECT 	v_IdOfInvoice, packingSlipSerialNumber,            \n" +
                "				(CASE WHEN (refChargesTypeId > 0) THEN refChargesTypeId ELSE NULL END),          \n" +
                "				nickname,            \n" +
                "				(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),              \n" +
                "				(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),              \n" +
                "				scanLabel,            \n" +
                "				orderedQty,            \n" +
                "				receivedQty,            \n" +
                "				packingSlipQty,            \n" +
                "				(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),              \n" +
                "				(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),              \n" +
                "				(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),              \n" +
                "				invoicePrice,            \n" +
                "				purchasePrice,            \n" +
                "				disputedPrice,            \n" +
                "				otherCharges,           \n" +
                "				`status`,            \n" +
                "				extendedPrice,            \n" +
                "				(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),              \n" +
                "				difference,            \n" +
                "				umidCreated,            \n" +
                "				poReleaseNumber,            \n" +
                "				(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),              \n" +
                "				receivedStatus,         \n" +
                "				remark,        \n" +
                "				pUserId,            \n" +
                "				pUserId,      \n" +
                "				pUserRoleId,      \n" +
                "				pUserRoleId                  \n" +
                "			FROM 	temp_Invoice_Line_Detail;	                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "	-- COMMIT;                  \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipDetailByPackingSlipNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailByPackingSlipNumber`(                                                                              \n" +
                "	IN pPackingSlipNumber VARCHAR(100),          \n" +
                "	IN pMFGCodeId INT          \n" +
                ")  \n" +
                "BEGIN             \n" +
                "	DECLARE v_CountOfPSRecord INT;    \n" +
                "	DECLARE v_CountOfPSDraftRecord INT;        \n" +
                "	DECLARE v_CountOfSIRecord INT;          \n" +
                "	DECLARE v_CountOfPSDetailRecord INT;          \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(1000);       \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;               \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_PackingSlip_Validation_Error;                                                                                 \n" +
                "	CREATE TEMPORARY TABLE temp_PackingSlip_Validation_Error                          \n" +
                "	(                                                                                \n" +
                "		IsSuccess BOOLEAN,                        \n" +
                "		ErrorCode INT,          \n" +
                "		FullMFGCode VARCHAR(1000)          \n" +
                "	);                           \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord           \n" +
                "	FROM 	packing_slip_material_receive           \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber           \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)          \n" +
                "			AND receiptType = 'P'          \n" +
                "			AND deletedAt IS NULL;          \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN          \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 1, NULL);          \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;          \n" +
                "	ELSEIF (v_CountOfPSRecord = 1) THEN          \n" +
                "		SELECT 	COUNT(1) INTO v_CountOfPSDraftRecord           \n" +
                "		FROM 	packing_slip_material_receive           \n" +
                "		WHERE 	packingSlipNumber = pPackingSlipNumber           \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)          \n" +
                "			AND receiptType = 'P'   \n" +
                "			AND packingSlipModeStatus = 'D'         \n" +
                "			AND deletedAt IS NULL;   \n" +
                "  \n" +
                "		IF (v_CountOfPSDraftRecord = 1) THEN  \n" +
                "			INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 5, NULL);          \n" +
                "			SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;         \n" +
                "		ELSE   \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(fullMFGCode) INTO v_CountOfSIRecord, v_StringOfMFGCode          \n" +
                "			FROM 	(          \n" +
                "					SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(mfgCodeID) fullMFGCode          \n" +
                "					FROM 	packing_slip_material_receive           \n" +
                "					WHERE 	packingSlipNumber = pPackingSlipNumber           \n" +
                "							AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)          \n" +
                "							AND receiptType = 'I'          \n" +
                "							AND deletedAt IS NULL          \n" +
                "			) a;          \n" +
                "  \n" +
                "			IF (v_CountOfSIRecord = 0) THEN          \n" +
                "  \n" +
                "				SELECT 	COUNT(1) INTO v_CountOfPSDetailRecord          \n" +
                "				FROM 	packing_slip_material_receive_det          \n" +
                "				WHERE	deletedAt IS NULL           \n" +
                "						AND refPackingSlipMaterialRecID IN (          \n" +
                "							SELECT 	id           \n" +
                "							FROM 	packing_slip_material_receive           \n" +
                "							WHERE 	packingSlipNumber = pPackingSlipNumber           \n" +
                "									AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)          \n" +
                "									AND receiptType = 'P'          \n" +
                "									AND deletedAt IS NULL          \n" +
                "						);          \n" +
                "  \n" +
                "				IF (v_CountOfPSDetailRecord = 0) THEN          \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 4, v_StringOfMFGCode);          \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;          \n" +
                "				ELSE          \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (TRUE, 0, NULL);          \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;          \n" +
                "  \n" +
                "					SELECT 		pr.id, pr.poNumber, pr.mfgCodeID, pr.supplierSONumber, pr.packingSlipNumber, pr.packingSlipDate,    \n" +
                "							pr.receiptDate, pr.receiptType, pr.`status`, m.paymentTermsID, p.termsDays    \n" +
                "					FROM 		packing_slip_material_receive pr    \n" +
                "					JOIN 		mfgcodemst m ON m.id = pr.mfgCodeID    \n" +
                "					LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentTermsID    \n" +
                "					WHERE 		pr.packingSlipNumber = pPackingSlipNumber           \n" +
                "							AND pr.mfgCodeID = IFNULL(pMFGCodeId, pr.mfgCodeID)          \n" +
                "							AND pr.receiptType = 'P'          \n" +
                "							AND pr.deletedAt IS NULL;          \n" +
                "  \n" +
                "					SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				                      \n" +
                "							CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                 \n" +
                "							p.nickname, 					p.partID, 						p.scanLabel, 	                                  \n" +
                "							p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                  \n" +
                "							p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                  \n" +
                "							p.invoicePrice, 				p.disputedPrice,					p.createdBy,                                   \n" +
                "							p.createdAt, 					p.updatedBy, 						p.updatedAt,                                  \n" +
                "							p.deletedBy, 					p.deletedAt, 						p.isDeleted,                                  \n" +
                "							p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                   \n" +
                "							p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                   \n" +
                "							p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                  \n" +
                "							fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                             \n" +
                "							c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                             \n" +
                "							c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                      \n" +
                "							0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                    \n" +
                "							p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                    \n" +
                "							fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                              \n" +
                "							c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                  \n" +
                "							sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,            \n" +
                "							sc.packagingID supplierPackagingId,                                                  \n" +
                "							'Pending' invoiceVerificationStatus,        \n" +
                "							p.receivedStatus,        \n" +
                "							p.remark,                                                  \n" +
                "							fun_getUserNameByID(p.createdBy) createdByName,      \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,      \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					      \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					      \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt                                                        \n" +
                "					FROM		packing_slip_material_receive_det p                                          \n" +
                "					LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL                  \n" +
                "					LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                      \n" +
                "					WHERE   	p.refPackingSlipMaterialRecID IN (          \n" +
                "								SELECT 	id           \n" +
                "								FROM 	packing_slip_material_receive           \n" +
                "								WHERE 	packingSlipNumber = pPackingSlipNumber           \n" +
                "										AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)          \n" +
                "										AND receiptType = 'P'          \n" +
                "										AND deletedAt IS NULL          \n" +
                "							)                                                   \n" +
                "					AND 		p.deletedAt IS NULL;          \n" +
                "				END IF;          \n" +
                "			ELSE          \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 3, v_StringOfMFGCode);          \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;          \n" +
                "			END IF;          \n" +
                "		END IF;  \n" +
                "	ELSEIF (v_CountOfPSRecord > 1) THEN          \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 2, NULL);          \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (595,'1.00','V1','Packing slip and Invoice flow chages - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 595:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                                          \n" +
                "	IN pPageIndex INT,                                          \n" +
                "	IN pRecordPerPage INT,                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                              \n" +
                "	IN pReceiptType VARCHAR(10),        \n" +
                "    IN pMfgCodeIds LONGTEXT,        \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,        \n" +
                "    IN pDueDate DATE,        \n" +
                "    IN pAdditionalDays INT,        \n" +
                "    IN pTermsAndAboveDays INT,        \n" +
                "    IN pInvoiceNumber VARCHAR(50)        \n" +
                ")  \n" +
                "BEGIN                                          \n" +
                "	DECLARE pOffset INT;                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);              \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                       \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                \n" +
                "		SELECT 		p.id,            \n" +
                "				p.poNumber,            \n" +
                "				p.mfgCodeID,            \n" +
                "				p.supplierSONumber,            \n" +
                "				p.packingSlipNumber,            \n" +
                "				p.packingSlipDate,            \n" +
                "				p.invoiceNumber,            \n" +
                "				p.invoiceDate,            \n" +
                "				p.creditMemoNumber,            \n" +
                "				p.creditMemoDate,            \n" +
                "				p.debitMemoNumber,            \n" +
                "				p.debitMemoDate,            \n" +
                "				p.receiptDate,            \n" +
                "				p.description,            \n" +
                "				p.billToAddress,            \n" +
                "				p.shipToAddress,            \n" +
                "				p.poVersion,            \n" +
                "				p.isDeleted,            \n" +
                "				p.receiptType,            \n" +
                "				p.`status`,            \n" +
                "				pinv.paymentNumber chequeNumber,            \n" +
                "				pinv.paymentDate chequeDate,            \n" +
                "				pinv.paymentAmount chequeAmount,         \n" +
                "				pinv.bankAccountNo,      \n" +
                "				pinv.bankAccountMasID,      \n" +
                "				pinv.accountReference,      \n" +
                "				gp.gencCategoryName paymentTypeName,      \n" +
                "				pinv.paymentType,    \n" +
                "				p.applyDate,            \n" +
                "				p.refParentCreditDebitInvoiceno,            \n" +
                "				p.refPackingSlipNumberForInvoice,            \n" +
                "				p.invoiceTotalDue,            \n" +
                "				p.isTariffInvoice,            \n" +
                "				pinv.bankName,              									                               \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,                         \n" +
                "				fun_getUserNameByID(p.createdBy)  createdByName,              \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,              \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,              \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,              \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                       \n" +
                "				fun_getMfgCodeByID(p.mfgCodeID) supplierCode,			                \n" +
                "				(                \n" +
                "					SELECT COUNT(1)                 \n" +
                "					  FROM genericfiles g                 \n" +
                "					 WHERE g.refTransID = p.id                 \n" +
                "					   and g.entityID = -13        \n" +
                "					   AND g.gencFileOwnerType = 'supplier_invoice'                 \n" +
                "					   AND g.isDeleted =0        \n" +
                "				) invoiceDocCount,                \n" +
                "				(                \n" +
                "					SELECT COUNT(1)                 \n" +
                "					 FROM genericfiles g                 \n" +
                "					WHERE g.refTransID = (SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = p.id)                 \n" +
                "					  and g.entityID = -14        \n" +
                "					  AND g.gencFileOwnerType = 'packing_slip'                 \n" +
                "					  AND g.isDeleted =0        \n" +
                "				) packingSlipDocCount,	                                \n" +
                "				pd.itemReceived,        \n" +
                "				pd.itemDisapproved,        \n" +
                "				(                \n" +
                "					CASE 	WHEN p.`receiptType` = 'I' THEN                 \n" +
                "							'Invoice'                 \n" +
                "						WHEN p.`receiptType` = 'C' THEN                 \n" +
                "							'Credit Memo'                 \n" +
                "						ELSE                 \n" +
                "							'Debit Memo'                 \n" +
                "					END                \n" +
                "				) receiptMemoType,      									                          \n" +
                "				(                \n" +
                "					CASE 	WHEN p.`status` = 'PE' THEN                 \n" +
                "							'Pending'                 \n" +
                "						WHEN p.`status` = 'I' THEN                 \n" +
                "							'Investigate'                 \n" +
                "						WHEN p.`status` = 'A' THEN                 \n" +
                "							'Approved to Pay'                 \n" +
                "						ELSE                 \n" +
                "							'Paid'                 \n" +
                "					END                \n" +
                "				) invoiceVerificationStatus,                                \n" +
                "				ps.invoiceNumber refInvoiceNumber,                    \n" +
                "				pd.totalExtendedAmount,        \n" +
                "				pe.totalCreditAmount,        \n" +
                "				pe.totalDebitAmount,        \n" +
                "				(        \n" +
                " 					IFNULL(pd.totalExtendedAmount, 0)        \n" +
                " 					- IFNULL((pe.totalCreditAmount*-1), 0)        \n" +
                " 					- IFNULL((pe.totalDebitAmount*-1), 0)        \n" +
                " 				) amountToPay,        \n" +
                "				pd.packingDetailNote,        \n" +
                "				pd.approveLineCount,        \n" +
                "				DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),         \n" +
                "				INTERVAL IFNULL((max(p.termsDays) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,        \n" +
                "				p.refPayementid,        \n" +
                "				max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,    \n" +
                "				max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,      \n" +
                "				(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = ifnull(p.refParentCreditDebitInvoiceno,p.id)) packingSlipId,      \n" +
                "				psm.packingSlipModeStatus        \n" +
                "		FROM		packing_slip_material_receive p        \n" +
                "		LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0        \n" +
                "		LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id     \n" +
                "		\");      \n" +
                "  \n" +
                "		IF (pPaymentMethodTypeIds IS NULL OR pPaymentMethodTypeIds = '') THEN        \n" +
                "			SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" left \");        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"        \n" +
                "				join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0        \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'     \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'    \n" +
                "				left join (select a.refPackingSlipMaterialRecID,        \n" +
                "						GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,        \n" +
                "						sum(a.itemReceived) itemReceived,        \n" +
                "						sum(a.itemDisapproved) itemDisapproved,        \n" +
                "						sum(a.approveLineCount) approveLineCount,        \n" +
                "						sum(a.extendedPrice) totalExtendedAmount        \n" +
                "				from (SELECT psm.refPackingSlipMaterialRecID, psm.packingSlipSerialNumber, psm.approveNote,        \n" +
                "							1 itemReceived,        \n" +
                "							case when psm.status='D' then        \n" +
                "								1 else 0 end itemDisapproved,        \n" +
                "							case when psm.status='A' then        \n" +
                "								1 else 0 end approveLineCount,        \n" +
                "							extendedPrice        \n" +
                "					  FROM packing_slip_material_receive_det psm        \n" +
                "					 WHERE psm.isDeleted = 0) a        \n" +
                "				group by a.refPackingSlipMaterialRecID) pd ON pd.refPackingSlipMaterialRecID = p.id        \n" +
                "				left join (select ps.refParentCreditDebitInvoiceno,         \n" +
                "						sum(case when ps.receiptType = 'C' then        \n" +
                "							pd.extendedPrice        \n" +
                "						else 0 end) totalCreditAmount,        \n" +
                "						sum(case when ps.receiptType = 'D' then        \n" +
                "							pd.extendedPrice        \n" +
                "						else 0 end) totalDebitAmount        \n" +
                "				  from packing_slip_material_receive ps        \n" +
                "				  inner join packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID        \n" +
                "					and ps.isDeleted = 0        \n" +
                "					and pd.isDeleted = 0        \n" +
                "					and ps.receiptType in ('C','D')        \n" +
                "			group by ps.refParentCreditDebitInvoiceno) pe ON pe.refParentCreditDebitInvoiceno = p.id        \n" +
                "		    WHERE p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')        \n" +
                "	\");        \n" +
                "  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND pinv.paymentType in (', pPaymentMethodTypeIds, ' )');        \n" +
                "    END IF;        \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;        \n" +
                "	ELSE                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "	END IF;	                                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                          \n" +
                "		SET pWhereClause = '1=1' ;                                          \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");        \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");        \n" +
                "    END IF;        \n" +
                "  \n" +
                "    IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN        \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \"        \n" +
                "									AND ( c.supplierSONumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR c.poNumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR c.packingSlipNumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR c.invoiceNumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"        \n" +
                "									  \" ) \");        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                           \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "	ELSE	                                          \n" +
                "		SET rowNumWhere = '';                                          \n" +
                "	END IF;	                                          \n" +
                "  \n" +
                "	/* to get total count of rows */                                          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                          \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                          \n" +
                "	EXECUTE query1;                                          \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.*,        \n" +
                "										case when c.refPayementid is null and c.paymentDueDate <= current_date() then        \n" +
                "											1        \n" +
                "										else 0 end isPaymentDueDatePassed        \n" +
                "									FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                          \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "	EXECUTE query2;                                          \n" +
                "	DEALLOCATE PREPARE query2;                                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (596,'1.00','V1','Sproc_RetriveSupplierInvoiceList - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 596:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`)  \n" +
                "VALUES ('Allow to Void, Void and Re Issue Payment', '1', '0', SYSDATE(), '1', SYSDATE());  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (597,'1.00','V1','created feature for void and re issue payment - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 597:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "drop procedure if exists `Sproc_InvoicePaymentVoidAndReIssue`;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
                "IN pRefVoidPaymentId INT,  \n" +
                "IN pAccountReference varchar(50),  \n" +
                "IN pPaymentType INT,  \n" +
                "IN pPaymentNumber varchar(50),  \n" +
                "IN pBankAccountMasID INT,  \n" +
                "IN pBankAccountNo varchar(50),  \n" +
                "IN pBankName varchar(255),  \n" +
                "IN pPaymentDate date,  \n" +
                "IN pRemark varchar(255),  \n" +
                "IN pPayToName varchar(255),  \n" +
                "IN pPayToAddress varchar(255),  \n" +
                "IN pVoidPaymentReason varchar(255),  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	declare vCount int;    \n" +
                "    declare vCountExistsCheckNo int;    \n" +
                "    declare vNewPaymentID int;    \n" +
                "    declare vOldPaymentOrCheckNo varchar(50);    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
                "  BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "	select count(1) into vCount    \n" +
                "      from packingslip_invoice_payment    \n" +
                "	 where id = pRefVoidPaymentId    \n" +
                "       and isPaymentVoided = 0;    \n" +
                "  \n" +
                "	select count(1) into vCountExistsCheckNo  \n" +
                "	  from packingslip_invoice_payment  \n" +
                "	 where isdeleted = 0  \n" +
                "	   and paymentNumber = pPaymentNumber  \n" +
                "	   and bankAccountMasID = pBankAccountMasID;  \n" +
                "  \n" +
                "	if vCount = 1 and vCountExistsCheckNo = 0 then    \n" +
                "		insert into packingslip_invoice_payment    \n" +
                "				(mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,    \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,    \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId)    \n" +
                "		select mfgcodeID, pPaymentNumber /*paymentNumber*/, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,    \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID /*createdBy*/, pRoleID /*createByRoleId*/,    \n" +
                "				pUserID /*updatedBy*/, pRoleID /*updateByRoleId*/, paymentNumber/*refVoidedPaymentNumber*/, id/*refVoidedPaymentId*/  \n" +
                "		  from packingslip_invoice_payment    \n" +
                "		 where id = pRefVoidPaymentId    \n" +
                "           and isDeleted = 0;    \n" +
                "         set vNewPaymentID = LAST_INSERT_ID();    \n" +
                "  \n" +
                "         insert into packingslip_invoice_payment_det    \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId,     \n" +
                "				updatedBy, updateByRoleId)    \n" +
                "         select vNewPaymentID /*refPayementid*/, refPackingslipInvoiceID, pUserID /*createdBy*/, pRoleID /*createByRoleId*/,     \n" +
                "				pUserID /*updatedBy*/, pRoleID /*updateByRoleId*/    \n" +
                "		  from packingslip_invoice_payment_det    \n" +
                "		 where refPayementid = pRefVoidPaymentId    \n" +
                "           and isDeleted = 0;    \n" +
                "  \n" +
                "         update packing_slip_material_receive    \n" +
                "            set refPayementid = vNewPaymentID,    \n" +
                "				updatedBy = pUserID,    \n" +
                "                updateByRoleId = pRoleID    \n" +
                "		  where refPayementid = pRefVoidPaymentId    \n" +
                "             and isDeleted = 0;    \n" +
                "  \n" +
                "		update packingslip_invoice_payment    \n" +
                "			set voidPaymentReason = pVoidPaymentReason,    \n" +
                "				isPaymentVoided = 1,    \n" +
                "				updatedBy = pUserID,    \n" +
                "                updateByRoleId = pRoleID,  \n" +
                "                updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		 where id = pRefVoidPaymentId    \n" +
                "           and isDeleted = 0;    \n" +
                "		select vNewPaymentID refPayementid;    \n" +
                "    else    \n" +
                "		rollback;    \n" +
                "        if vCountExistsCheckNo != 0 then  \n" +
                "			select 'DUPLICATE_CHECKNO' as message;  \n" +
                "        else  \n" +
                "			select 'NOT_FOUND' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "	end if;    \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_Packingslip_Invoice_Payment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN   \n" +
                "  declare vTableName varchar(50) default \"packingslip_invoice_payment\";  \n" +
                "  declare vColname varchar(200) default '';  \n" +
                "  declare vOldval longtext default '';  \n" +
                "  declare vNewval longtext default '';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                "		set vColname = \"Payment or Check Number\";  \n" +
                "		set vOldval = OLD.paymentNumber;  \n" +
                "		set vNewval = NEW.paymentNumber;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                "		set vColname = \"Payment Date\";  \n" +
                "		set vOldval = CAST(date(OLD.paymentDate) AS CHAR);  \n" +
                "		set vNewval = CAST(date(NEW.paymentDate) AS CHAR);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN  \n" +
                "		set vColname = \"Payment Amount\";  \n" +
                "		set vOldval = CAST(OLD.paymentAmount AS CHAR);  \n" +
                "		set vNewval = CAST(NEW.paymentAmount AS CHAR);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                "		set vColname = \"Payment Method\";  \n" +
                "  \n" +
                "        select IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                "		  from genericcategory  \n" +
                "		 where gencCategoryID = OLD.paymentType  \n" +
                "		 limit 1;  \n" +
                "  \n" +
                "        select IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                "		  from genericcategory  \n" +
                "		 where gencCategoryID = NEW.paymentAmount  \n" +
                "		 limit 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                "		set vColname = \"Account Reference\";  \n" +
                "		set vOldval = OLD.accountReference;  \n" +
                "		set vNewval = NEW.accountReference;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                "		set vColname = \"Bank Account Code\";  \n" +
                "		set vOldval = OLD.bankAccountNo;  \n" +
                "		set vNewval = NEW.bankAccountNo;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                "		set vColname = \"Bank Name\";  \n" +
                "		set vOldval = OLD.bankName;  \n" +
                "		set vNewval = NEW.bankName;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                "		set vColname = \"Pay To name\";  \n" +
                "		set vOldval = OLD.payToName;  \n" +
                "		set vNewval = NEW.payToName;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                "		set vColname = \"Pay To Address\";  \n" +
                "		set vOldval = OLD.payToAddress;  \n" +
                "		set vNewval = NEW.payToAddress;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                "		set vColname = \"Remark\";  \n" +
                "		set vOldval = OLD.remark;  \n" +
                "		set vNewval = NEW.remark;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                "		set vColname = \"Void Payment Reason\";  \n" +
                "		set vOldval = OLD.voidPaymentReason;  \n" +
                "		set vNewval = NEW.voidPaymentReason;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                "		set vColname = \"Payment Status\";  \n" +
                "		set vOldval = case when OLD.isPaymentVoided = true then 'Voided' else 'Paid' end;  \n" +
                "		set vNewval = case when NEW.isPaymentVoided = true then 'Voided' else 'Paid' end;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                "		set vColname = \"Ref Voided Payment Or Check number\";  \n" +
                "		set vOldval = OLD.refVoidedPaymentNumber;  \n" +
                "		set vNewval = NEW.refVoidedPaymentNumber;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "                    Colname,									Oldval,  \n" +
                "                    Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "                    vColname,									vOldval,  \n" +
                "                    vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (598,'1.00','V1',' - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 598:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(          \n" +
                "	IN pPageIndex INT,                                                                                \n" +
                "	IN pRecordPerPage INT,                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                      \n" +
                "	IN pPackingSlipID INT                                                                   \n" +
                ")  \n" +
                "BEGIN                                                                      \n" +
                "	DECLARE pOffset INT;                                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                  \n" +
                "	DECLARE v_ParentPackingSlipId INT;                \n" +
                "	DECLARE v_InvoiceSlipId INT;               \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                          \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                    \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                           \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                                                                                \n" +
                "	SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                          \n" +
                "			CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                                     \n" +
                "			p.nickname, 					p.partID, 						p.scanLabel, 	                                                      \n" +
                "			p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                      \n" +
                "			p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                      \n" +
                "			p.invoicePrice, 				p.disputedPrice,					              \n" +
                "			fun_getUserNameByID(p.createdBy) createdByName,                                                       \n" +
                "			fun_getUserNameByID(p.updatedBy) updatedByName, 	              \n" +
                "			fun_getRoleByID(p.createByRoleId) createdbyRole,     	           \n" +
                "			fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					              \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					              \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                              \n" +
                "			p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                       \n" +
                "			p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                                       \n" +
                "			p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                                      \n" +
                "			fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                 \n" +
                "			c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                 \n" +
                "			c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                          \n" +
                "			0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                        \n" +
                "			p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                        \n" +
                "			fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                  \n" +
                "			c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                      \n" +
                "			sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                \n" +
                "			sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,      \n" +
                "			c.partType,                       \n" +
                "			(                  \n" +
                "				CASE                  \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN                  \n" +
                "						p.receivedStatus                  \n" +
                "					ELSE                   \n" +
                "						(SELECT receivedStatus                   \n" +
                "						FROM 	packing_slip_material_receive_det                   \n" +
                "						WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                   \n" +
                "								AND packingSlipSerialNumber = p.packingSlipSerialNumber                    \n" +
                "								AND isDeleted = 0 LIMIT 1)                  \n" +
                "				END                  \n" +
                "			)                  \n" +
                "			receivedStatus,				                  \n" +
                "			(                  \n" +
                "				CASE                   \n" +
                "					WHEN p.receivedStatus = 'P' THEN 'Pending'                  \n" +
                "					WHEN p.receivedStatus = 'A' THEN 'Accepted'                  \n" +
                "					WHEN p.receivedStatus = 'R' THEN 'Rejected'                  \n" +
                "					ELSE NULL                  \n" +
                "				END                  \n" +
                "			) AS receivedStatusValue,                  \n" +
                "			p.remark,                 \n" +
                "			p.comment,    \n" +
                "			p.internalRef,    \n" +
                "			p.purchaseInspectionComment,               \n" +
                "			(                  \n" +
                "				CASE                  \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN                  \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')          \n" +
                "					ELSE                   \n" +
                "						(SELECT COUNT(1)                   \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det psmp          \n" +
                "						WHERE EXISTS (          \n" +
                "								SELECT 	1                   \n" +
                "								FROM 	packing_slip_material_receive_det pslip          \n" +
                "								WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                   \n" +
                "										AND 	pslip.id = psmp.lineId          \n" +
                "										AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                   \n" +
                "										AND	pslip.isDeleted = 0)          \n" +
                "							AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                  \n" +
                "				END                  \n" +
                "			) AS purchaseRequirementCount,                  \n" +
                "			(                  \n" +
                "				CASE                  \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN                  \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                  \n" +
                "					ELSE                  \n" +
                "						(SELECT COUNT(1)                   \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det psm                  \n" +
                "						WHERE 	EXISTS (          \n" +
                "								SELECT 	1          \n" +
                "								FROM 	packing_slip_material_receive_det psmr          \n" +
                "								WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId          \n" +
                "									AND	psmr.id = psm.lineId          \n" +
                "									AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber          \n" +
                "									AND 	psmr.isDeleted = 0          \n" +
                "								)          \n" +
                "							AND psm.inspectionStatus = 'R'                   \n" +
                "							AND psm.isDeleted = 0          \n" +
                "							AND psm.category = 'P' AND psm.requiementType = 'R')          \n" +
                "				END                  \n" +
                "			) AS rejectedPurchaseRequirementCount,                    \n" +
                "			(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                                      \n" +
                "			fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                \n" +
                "			(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                          \n" +
                "			 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                          \n" +
                "			(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                            \n" +
                "			(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                            \n" +
                "			(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                 \n" +
                "			(                \n" +
                "				CASE                \n" +
                "					WHEN 	v_InvoiceSlipId IS NULL THEN NULL                \n" +
                "					ELSE                 \n" +
                "						(SELECT `status`                 \n" +
                "						FROM 	packing_slip_material_receive_det                 \n" +
                "						WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                 \n" +
                "								AND packingSlipSerialNumber = p.packingSlipSerialNumber                 \n" +
                "								AND isDeleted = 0)          \n" +
                "				END                \n" +
                "			) invoiceStatus,                            \n" +
                "			sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                         \n" +
                "			(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd           \n" +
                "			  WHERE pd.isdeleted = 0 AND pd.category = 'P'          \n" +
                "				AND pd.requiementType ='C' AND pd.lineId = p.id          \n" +
                "				AND pd.partId = p.partID) commentCount,     \n" +
                "			(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0) psInspectionStatus       \n" +
                "	FROM		packing_slip_material_receive_det p                                                              \n" +
                "	LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                      \n" +
                "	LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL                                          \n" +
                "	WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                       \n" +
                "	AND 		p.isDeleted = 0;                                                                          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                        \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                      \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID           \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)          \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)          \n" +
                "	AND			ps.receiptType = 'P'                                                            \n" +
                "	AND			psm.isDeleted = 0          \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                    \n" +
                "  \n" +
                "	-- Set received qty detail                                                                            \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty, r.pendingQty = (r.orderedQty - IFNULL(q.totalReceivedQty,0))          \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                                                \n" +
                "	END IF;	                                                                        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                 \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                \n" +
                "	ELSE	                                                                                \n" +
                "		SET rowNumWhere = '';                                                                                \n" +
                "	END IF;	                                                                                \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                \n" +
                "	EXECUTE query1;                                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                \n" +
                "	EXECUTE query2;                                                                                \n" +
                "	DEALLOCATE PREPARE query2;                                                                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (599,'1.00','V1','Packing slip changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 599:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-11-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_part_inspection_det MODIFY COLUMN remark LONGTEXT;  \n" +
                /* **************************** Add Script Version -> 06-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (600,'1.00','V1','Packing slip changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 600:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Update_Assembly_On_Standard_Change`;  \n" +
                "CREATE PROCEDURE `Sproc_Update_Assembly_On_Standard_Change`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pOldStandard TEXT,  \n" +
                "	IN pNewStandard TEXT,  \n" +
                "	IN pUserID INT  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE subAssyType INT;  \n" +
                "	DECLARE pLiveInternalVersion VARCHAR(100);  \n" +
                "	DECLARE totalAssyCount INT DEFAULT 0;  \n" +
                "	DECLARE currAssyIndex INT DEFAULT 0;  \n" +
                "	DECLARE currAssyID INT;  \n" +
                "	SET  subAssyType = 3;  \n" +
                "  \n" +
                "	IF((SELECT COUNT(1) FROM component c WHERE c.id = pPartID AND c.category=subAssyType AND c.deletedAt IS NULL) > 0) THEN        \n" +
                "		CALL Sproc_UpdatePartInternalVersion (pPartID);        \n" +
                "  \n" +
                "		SELECT liveVersion INTO pLiveInternalVersion FROM component WHERE id = pPartID;         \n" +
                "  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			description,createdAt,createdBy,updatedBy,updatedAt)  \n" +
                "		VALUES 	(\"component\", pPartID, NULL, NULL, pPartID, \"Standard\",  \n" +
                "			pOldStandard, pNewStandard, pLiveInternalVersion,  \n" +
                "			'Standard Updated',fun_DatetimetoUTCDateTime(),pUserID,pUserID,fun_DatetimetoUTCDateTime());  \n" +
                "  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(pPartID, 'component', pUserID);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "	-- Start Update Assembly standard in case of standard is export control  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllAssemblyResult AS  \n" +
                "	SELECT partId FROM rfq_lineitems_alternatepart WHERE mfgPNID = pPartID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalAssyCount FROM tempAllAssemblyResult;  \n" +
                "	IF totalAssyCount > 0 THEN  \n" +
                "  \n" +
                "		WHILE currAssyIndex < totalAssyCount DO  \n" +
                "			SELECT  a.partId  \n" +
                "			INTO 	currAssyID  \n" +
                "			FROM 	tempAllAssemblyResult a LIMIT currAssyIndex, 1;  \n" +
                "  \n" +
                "			CALL Sproc_UpdateExportControllAssembly(currAssyID, pUserID);  \n" +
                "  \n" +
                "			SET currAssyIndex = currAssyIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempAllAssemblyResult;  \n" +
                "  \n" +
                "	-- End Update Assembly standard in case of standard is export control  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (601,'1.00','V1','Resolve BOM History related issue changes - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 601:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-11-2020  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_workorder` ;  \n" +
                "CREATE TRIGGER `Trg_BI_workorder` BEFORE INSERT ON `workorder`   \n" +
                "    FOR EACH ROW BEGIN       \n" +
                "  \n" +
                "		/* check for work order master */      \n" +
                "		IF (SELECT COUNT(1) FROM workorder       \n" +
                "			WHERE (`woNumber`= NEW.woNumber)      \n" +
                "			AND isdeleted=0 AND deletedAt IS NULL ) >  0 THEN             \n" +
                "  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';           \n" +
                "  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* check for Assembly Stock */      \n" +
                "		IF (SELECT COUNT(1) FROM assemblystock       \n" +
                "			WHERE `woNumber`= NEW.woNumber    \n" +
                "			AND isdeleted=0 AND `type` = 'OS') >  0 THEN             \n" +
                "  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';           \n" +
                "  \n" +
                "		END IF;	          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-11-2020  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_workorder` ;  \n" +
                "CREATE TRIGGER `Trg_BU_workorder` BEFORE UPDATE ON `workorder`   \n" +
                "    FOR EACH ROW BEGIN           \n" +
                "  \n" +
                "		/* check for mfg master */          \n" +
                "		IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL)     \n" +
                "			AND (SELECT COUNT(1) FROM workorder           \n" +
                "			WHERE (`woNumber`= NEW.woNumber)          \n" +
                "			AND isdeleted=0 AND deletedAt IS NULL           \n" +
                "			AND woID != NEW.woID) >  0) THEN                 \n" +
                "  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';               \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* check for Assembly Stock */          \n" +
                "		IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL)     \n" +
                "			AND (SELECT COUNT(1) FROM assemblystock           \n" +
                "			WHERE (`woNumber`= NEW.woNumber)          \n" +
                "			AND isdeleted=0 AND `type` = 'OS') >  0) THEN                 \n" +
                "  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';               \n" +
                "  \n" +
                "		END IF;	              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetMaxWorkorderNumberByAssyID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetMaxWorkorderNumberByAssyID`(                      \n" +
                "	IN passyID INT       \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE maxWONumberOfProduction VARCHAR(100); 	    \n" +
                "	DECLARE maxWONumberOpeningPartBalance VARCHAR(100);   \n" +
                "	DECLARE maxWONumberOfProductionWithOutAssy VARCHAR(100); 	    \n" +
                "	DECLARE maxWONumberOpeningPartBalanceWithOutAssy VARCHAR(100);   \n" +
                "	DECLARE maxWONumberOfAssy VARCHAR(100);     \n" +
                "  \n" +
                "	-- 1.check assembly work order already created.     \n" +
                "	/* get max work order number (production work order) by assy nick name */    \n" +
                "	SELECT IFNULL(MAX(w.`woNumber`),0) INTO maxWONumberOfProduction     \n" +
                "	FROM workorder w        \n" +
                "		LEFT JOIN component c ON (c.id=w.partID AND c.deletedAt IS NULL)        \n" +
                "	WHERE w.deletedAt IS NULL         \n" +
                "	AND (c.nickname = (SELECT c.nickname FROM component c     \n" +
                "				WHERE c.deletedAt IS NULL AND c.id=passyID)) ;    \n" +
                "  \n" +
                "	/* get max work order number by assembly opening stock */			    \n" +
                "	SELECT IFNULL(MAX(cas.woNumber),0)  INTO maxWONumberOpeningPartBalance    \n" +
                "	FROM assemblystock cas    \n" +
                "		LEFT JOIN component c ON (c.id=cas.partID AND c.deletedAt IS NULL)      \n" +
                "	WHERE cas.deletedAt IS NULL AND cas.partID=passyID AND cas.`type`='OS'	    \n" +
                "	AND (c.nickname = (SELECT c.nickname FROM component c     \n" +
                "				WHERE c.deletedAt IS NULL AND c.id = passyID)) ;			      \n" +
                "  \n" +
                "	SELECT GREATEST(maxWONumberOfProduction,maxWONumberOpeningPartBalance) INTO maxWONumberOfAssy ;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (maxWONumberOfAssy <> 0) THEN	    \n" +
                "		-- 2.if yes than get max work order number for same assembly.    \n" +
                "  \n" +
                "		/* get max wo number from prefix series production */  \n" +
                "		SELECT IFNULL(MAX(`woNumber`),0) INTO maxWONumberOfProductionWithOutAssy	  \n" +
                "		FROM `workorder`   \n" +
                "		WHERE woNumber LIKE CONCAT('%',SUBSTRING_INDEX(maxWONumberOfAssy,'-',1),'%')   \n" +
                "		AND isDeleted = 0 ;   \n" +
                "  \n" +
                "  \n" +
                "		/* get max wo number from prefix series opening part balance */  \n" +
                "		SELECT IFNULL(MAX(`woNumber`),0)  INTO maxWONumberOpeningPartBalanceWithOutAssy  \n" +
                "		FROM `assemblystock`   \n" +
                "		WHERE woNumber LIKE CONCAT('%',SUBSTRING_INDEX(maxWONumberOfAssy,'-',1),'%')  \n" +
                "		AND `type`='OS'  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT GREATEST(maxWONumberOfProductionWithOutAssy,maxWONumberOpeningPartBalanceWithOutAssy) AS `maxValue`,  \n" +
                "			1 AS isRepeat,     \n" +
                "			LEAST(    \n" +
                "				(SELECT COUNT(1) FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.partID=passyID) = 0    \n" +
                "			     , (SELECT COUNT(1) FROM assemblystock cas WHERE cas.deletedAt IS NULL AND cas.`type`='OS' AND cas.partID=passyID) = 0    \n" +
                "			     )    \n" +
                "			   AS isNewRevision ;    \n" +
                "  \n" +
                "	ELSE 	    \n" +
                "		-- 3.if no than get max work order number across assembly.    \n" +
                "		SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue`, 0 AS isRepeat, 1 AS isNewRevision     \n" +
                "		FROM `workorder`  WHERE `deletedAt` IS NULL ;     \n" +
                "	END IF; 	    \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (602,'1.00','V1',' Sproc_GetMaxWorkorderNumberByAssyID and before insert/update trg - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 602:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-11-2020  *********************************** */
                "UPDATE page_detail set displayMenuName='Payment Method' WHERE pageRoute='app.paymentmethods.managegenericcategory';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (603,'1.00','V1',' Payment Method - Dharmesh P '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 603:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-11-2020  *********************************** */
                "update feature_mst  \n" +
                "  set featureName = 'Allow to Void, Void & Reissue Payment'  \n" +
                " where featureName = 'Allow to Void, Void and Re Issue Payment';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (604,'1.00','V1','Bug 27565: Payment History page Enable Void button only if user has feature rights and disable if payment voided already - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 604:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-11-2020  *********************************** */
                "drop procedure if exists `Sproc_GetAssemblySamplesList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblySamplesList`(    \n" +
                "	IN pWoId INT(11),    \n" +
                "	IN pAssyId INT(11),          \n" +
                "    IN pIsShowAll TINYINT(1)          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	select eq.eqpID, gf.gencFileName, co.PIDCode, eq.assetName,           \n" +
                "		bin.Name binName, wh.Name wareHouseName, pwh.Name parentWareHouseName,           \n" +
                "		et.gencCategoryName ownership,        \n" +
                "        co.id partID,        \n" +
                "        co.mfgPN,        \n" +
                "        rr.rohsIcon,        \n" +
                "        rr.name rohsName,    \n" +
                "        (select wo.selectedSampleID from workorder wo where wo.selectedSampleID = eq.eqpID and wo.woID = pWoId) selectedSampleID    \n" +
                "	  from equipment eq          \n" +
                "	  join component co ON co.id = eq.assyId          \n" +
                "      left join rfq_rohsmst rr ON rr.id = co.RoHSStatusID    \n" +
                "	  left join binmst bin ON bin.id = eq.binId    \n" +
                "	  left join warehousemst wh ON wh.ID = bin.WarehouseID    \n" +
                "	  left join warehousemst pwh ON pwh.ID = wh.parentWHID    \n" +
                "	  left join genericcategory et ON et.gencCategoryID = eq.eqpOwnershipTypeID and et.categoryType = 'Equipment, Workstation & Sample Ownerships'    \n" +
                "	  left join genericfiles gf ON gf.refTransID = eq.eqpID and gf.gencFileOwnerType = 'equipment' and gf.isDefault = 1 and gf.deletedAt is null and gf.isdeleted = false    \n" +
                "	 where eq.equipmentAs = 'S'    \n" +
                "	   and eq.deletedAt is null    \n" +
                "	   and eq.isdeleted = false    \n" +
                "       and eq.isActive = true    \n" +
                "       and case when pIsShowAll=true then    \n" +
                "				exists (select 1 from component c where c.custAssyPN = co.custAssyPN and c.mfgcodeID = co.mfgcodeID and c.id=pAssyId)    \n" +
                "			else    \n" +
                "				co.id = pAssyId    \n" +
                "			end    \n" +
                "	order by selectedSampleID is null asc, selectedSampleID asc, co.PIDCode asc;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (605,'1.00','V1','Bug 27565: Payment History page Enable Void button only if user has feature rights and disable if payment voided already - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;


        case 605:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(                                                                            \n" +
                "	IN ppageIndex INT,                                                                            \n" +
                "	IN precordPerPage INT,                                                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "    IN pSupplierIDs VARCHAR(16383),                \n" +
                "    IN pPaymentMethodIDs VARCHAR(16383),                \n" +
                "    IN pBankAccountCodeIDs VARCHAR(16383),                \n" +
                "	IN pPaymentNumber VARCHAR(10),                 \n" +
                "	IN pInvoiceNumber VARCHAR(50),                 \n" +
                "	IN pAmount DECIMAL(18,8),                     \n" +
                "	IN pFromDate DATE,                              \n" +
                "	IN pToDate DATE                     \n" +
                ")  \n" +
                "BEGIN                                                                            \n" +
                "	DECLARE pOffset INT;                                                                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                            \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                          \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);                          \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                           \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';                \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                      \n" +
                "  		SET pWhereClause = '1=1' ;                      \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN                                                                                                                                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');                                                       \n" +
                "	END IF;	                 \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                       \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                       \n" +
                "	END IF;	            \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber = ',pPaymentNumber,' ');                                                       \n" +
                "	END IF;	                 \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                                  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND      \n" +
                "             EXISTS(      \n" +
                "					SELECT  1 FROM packing_slip_material_receive psd      \n" +
                "					where psd.refPayementid = inv.id AND       \n" +
                "                    psd.isDeleted=0 AND psd.invoiceNumber = \"',pInvoiceNumber,'\" )');                                                             \n" +
                "	END IF;	                 \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount = ',pAmount,' ');                                                       \n" +
                "	END IF;	                     \n" +
                "  \n" +
                "    IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                            \n" +
                "    ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                      \n" +
                "    ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                      \n" +
                "    END IF;                     \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"              			                                    \n" +
                "            SELECT 						                              \n" +
                "				inv.id,                                          \n" +
                "                inv.mfgcodeID,                      \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,         \n" +
                "                inv.isPaymentVoided,    \n" +
                "                case when inv.isPaymentVoided = 0 then    \n" +
                "					'Paid'    \n" +
                "                    else 'Voided' end isPaymentVoidedConvertedValue,    \n" +
                "				inv.voidPaymentReason,    \n" +
                "                inv.refVoidedPaymentNumber,    \n" +
                "                inv.paymentNumber,                      \n" +
                "                inv.bankName,                      \n" +
                "                inv.bankAccountNo,                      \n" +
                "                inv.paymentType,                      \n" +
                "                inv.bankAccountMasID,                      \n" +
                "                gc.gencCategoryName paymentMethod,                \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                \n" +
                "				inv.paymentDate,                \n" +
                "                round(inv.paymentAmount) invoiceAmount,                \n" +
                "                inv.paymentAmount,                \n" +
                "				inv.payToAddress payToAddress,                               \n" +
                "                inv.accountReference,                \n" +
                "                inv.remark,                \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,                                            \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,                            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                            \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,                       \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole                       \n" +
                "			FROM                              \n" +
                "				packingslip_invoice_payment inv                 \n" +
                "			INNER JOIN genericcategory gc ON inv.paymentType = gc.gencCategoryID                 \n" +
                "            WHERE                 \n" +
                "				inv.isDeleted = 0 AND                 \n" +
                "                gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause);                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                            \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";                                                                            \n" +
                "	ELSE                                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                            \n" +
                "	END IF;	                                                            		                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                            \n" +
                "	ELSE	                                                                            \n" +
                "		SET rowNumWhere = '';                                                                            \n" +
                "	END IF;	                                                                             \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                         \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                                        \n" +
                "	EXECUTE query1;                                                        \n" +
                "	DEALLOCATE PREPARE query1;                                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                   \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                        \n" +
                "	EXECUTE query2;                                                        \n" +
                "	DEALLOCATE PREPARE query2;                                                     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-11-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (606,'1.00','V1',' Payment History - Dharmesh P '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 606:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSupplierQuoteByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierQuoteByPartID`(                                       \n" +
                "IN pPartID TEXT                                       \n" +
                ")  \n" +
                "BEGIN                                       \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(100);                   \n" +
                "	DECLARE vTimeZone VARCHAR(50);                   \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;          \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSuplierPrice;    \n" +
                "  \n" +
                "	SET @quoteresult =  CONCAT(\"    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSuplierPrice AS        \n" +
                "	      SELECT DISTINCT sq.id supplierQuoteID,        \n" +
                "		sp.id supplierQuotePartID,        \n" +
                "		sq.supplierID,        \n" +
                "		m.mfgCode AS supplierCode,        \n" +
                "		m.mfgName AS supplierName,       \n" +
                "		cm.mfgCode,        \n" +
                "		cm.mfgName,        \n" +
                "		sp.partID,        \n" +
                "		sp.supplierPartID,        \n" +
                "		sq.quoteNumber,        \n" +
                "		sq.quoteDate,        \n" +
                "		fun_ApplyCommonDateFormatByParaValue(sq.quoteDate,'\",vTimeZone,\"', '\",vDateDisplayFormat,\"') quoteDateValue,        \n" +
                "		sq.quoteStatus,        \n" +
                "		c.mfgPN,        \n" +
                "		c.PIDCode,        \n" +
                "		c.RoHSStatusID,        \n" +
                "		c.isCustom,        \n" +
                "		r.name rohs,        \n" +
                "		r.rohsIcon,    \n" +
                "		(select count(1) from supplier_quote_part_price sqp where sqp.supplierquotepartdetid= sp.id and sqp.isdeleted=0) priceCount       \n" +
                "	FROM supplier_quote_parts_det sp        \n" +
                "	LEFT JOIN supplier_quote_mst sq ON sq.id = sp.supplierQuoteMstID  \n" +
                "	LeFt Join mfgcodemst m on m.id = sq.supplierID      \n" +
                "	LEFT JOIN Component c ON c.id = sp.partID     \n" +
                "	LEFT JOIN mfgcodemst cm ON cm.id = c.mfgCodeID      \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID        \n" +
                "	WHERE sp.partID in (\",pPartID,\") AND sp.isDeleted = 0 AND sp.isActive;\");        \n" +
                "	PREPARE quoteresult1 FROM @quoteresult;       \n" +
                "	EXECUTE quoteresult1;                                                                          \n" +
                "	DEALLOCATE PREPARE quoteresult1;        \n" +
                "  \n" +
                "	SELECT * FROM    tempSuplierPrice WHERE priceCount>0;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSuplierPrice;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesorderdet` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet`   \n" +
                "    FOR EACH ROW BEGIN            \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN            \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),            \n" +
                "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),            \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(CAST(OLD.price AS DECIMAL(15,5)) AS CHAR),            \n" +
                "      CAST(CAST(new.price AS DECIMAL(15,5)) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),            \n" +
                "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),            \n" +
                "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),            \n" +
                "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),            \n" +
                "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),            \n" +
                "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),            \n" +
                "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),            \n" +
                "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN            \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),            \n" +
                "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN            \n" +
                "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),            \n" +
                "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;            \n" +
                "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN            \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),            \n" +
                "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "	END IF;     \n" +
                "	IF IFNULL(old.custPOLineNumber,0)!=IFNULL(NEW.custPOLineNumber,0)THEN    \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',CAST(OLD.custPOLineNumber AS CHAR),            \n" +
                "       CAST(new.custPOLineNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "  \n" +
                "       END IF;    \n" +
                "       IF IFNULL(old.frequency,0)!=IFNULL(NEW.frequency,0)THEN    \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)              \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'Frequency',CASE WHEN OLD.frequency=1 THEN 'Every' WHEN OLD.frequency=2 THEN 'First' WHEN OLD.frequency=3 THEN 'Last' ELSE '' END ,            \n" +
                "       CASE WHEN NEW.frequency=1 THEN 'Every' WHEN NEW.frequency=2 THEN 'First' WHEN NEW.frequency=3 THEN 'Last' ELSE '' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "  \n" +
                "       END IF;            \n" +
                "       END;  \n" +
                /* **************************** Add Script Version -> 23-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (607,'1.00','V1','Sproc_GetSupplierQuoteByPartID Trg_AU_salesorderdet - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 607:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 23-11-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_validateParentRohs`;  \n" +
                "CREATE PROCEDURE `Sproc_validateParentRohs`(      \n" +
                "	IN pRoHSID INT,      \n" +
                "	IN pParentRoHSID text,  \n" +
                "    IN pDeletedPeersID text  \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "if (pDeletedPeersID is null or pDeletedPeersID = '' ) then  \n" +
                "	set @WhereDeletedPeer = '1=1';  \n" +
                "else  \n" +
                "	set @WhereDeletedPeer = concat(\"rohsPeerID not in(\",pDeletedPeersID,\")\");  \n" +
                "end if;  \n" +
                "	/* get detail of parent rohs to validate parent rohs */    \n" +
                "		DROP temporary table if exists temp_ParentRoHS;      \n" +
                "		Create temporary table temp_ParentRoHS      \n" +
                "		WITH RECURSIVE cte AS      \n" +
                "        (      \n" +
                "			(      \n" +
                "				select id,refParentID from rfq_rohsmst where id = pParentRoHSID and isdeleted = 0      \n" +
                "			)      \n" +
                "			union all      \n" +
                "			(      \n" +
                "				select ro.id, ro.refParentID from rfq_rohsmst ro       \n" +
                "				join cte cte on cte.refParentID = ro.id      \n" +
                "				where ro.isdeleted = 0      \n" +
                "			)      \n" +
                "		)      \n" +
                "		SELECT cte.* FROM cte;     \n" +
                "	/* get Peer detail recursively for rohs to velidate parent rohs */    \n" +
                "        DROP temporary table if exists temp_PeerRoHS;      \n" +
                "       set @tempRoHsPeerstatement = concat(\"Create temporary table temp_PeerRoHS      \n" +
                "		WITH RECURSIVE cte AS      \n" +
                "		(      \n" +
                "			(      \n" +
                "				select rohsID, rohsPeerID from rfq_rohsmst_peer where rohsid = \",pRoHSID,\" and isdeleted = 0 and  \n" +
                "                \",@WhereDeletedPeer,\"     \n" +
                "			)      \n" +
                "			union all      \n" +
                "			(      \n" +
                "				select ro.rohsID, ro.rohsPeerID from rfq_rohsmst_peer ro       \n" +
                "				join cte cte on cte.rohsPeerID = ro.rohsID    \n" +
                "				where ro.isdeleted = 0      \n" +
                "			)      \n" +
                "		)      \n" +
                "		SELECT cte.* FROM cte\");      \n" +
                "		PREPARE query1 FROM @tempRoHsPeerstatement;                    \n" +
                "		EXECUTE query1;                    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "	/* get max count for validate parent rohs looping if it greater then 1 then it create looping */    \n" +
                "		select max(itemCount) itemCount from(       \n" +
                "			select Count(1) as itemCount from temp_ParentRoHS where (refParentID = pRoHSID or id = pRoHSID)      \n" +
                "			union all      \n" +
                "			select Count(1) as itemCount from temp_PeerRoHS where (rohsPeerID = pParentRoHSID or rohsID = pParentRoHSID)   \n" +
                "        )a;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (608,'1.00','V1','Resolve RoHS Master peer parent validaiton related issue changes - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 608:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                                              \n" +
                "	IN pPageIndex INT,                                              \n" +
                "	IN pRecordPerPage INT,                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN pReceiptType VARCHAR(10),            \n" +
                "    IN pMfgCodeIds LONGTEXT,            \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,            \n" +
                "    IN pDueDate DATE,            \n" +
                "    IN pAdditionalDays INT,            \n" +
                "    IN pTermsAndAboveDays INT,            \n" +
                "    IN pInvoiceNumber VARCHAR(50)            \n" +
                ")  \n" +
                "BEGIN                                              \n" +
                "	DECLARE pOffset INT;                                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                          \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                           \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                    \n" +
                "			SELECT 		p.id,                \n" +
                "					p.poNumber,                \n" +
                "					p.mfgCodeID,                \n" +
                "					p.supplierSONumber,      \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                \n" +
                "					p.packingSlipDate,                \n" +
                "					p.invoiceNumber,                \n" +
                "					p.invoiceDate,                \n" +
                "					p.creditMemoNumber,                \n" +
                "					p.creditMemoDate,                \n" +
                "					p.debitMemoNumber,                \n" +
                "					p.debitMemoDate,                \n" +
                "					p.receiptDate,                \n" +
                "					p.description,                \n" +
                "					p.billToAddress,                \n" +
                "					p.shipToAddress,                \n" +
                "					p.poVersion,                \n" +
                "					p.isDeleted,                \n" +
                "					p.receiptType,                \n" +
                "					p.`status`,                \n" +
                "					pinv.paymentNumber chequeNumber,                \n" +
                "					pinv.paymentDate chequeDate,                \n" +
                "					pinv.paymentAmount chequeAmount,             \n" +
                "					pinv.bankAccountNo,          \n" +
                "					pinv.bankAccountMasID,          \n" +
                "					pinv.accountReference,          \n" +
                "					gp.gencCategoryName paymentTypeName,          \n" +
                "					pinv.paymentType,        \n" +
                "					p.applyDate,                \n" +
                "					p.refParentCreditDebitInvoiceno,                \n" +
                "					p.refPackingSlipNumberForInvoice,                \n" +
                "					p.invoiceTotalDue,                \n" +
                "					p.isTariffInvoice,                \n" +
                "					pinv.bankName,              									                                   \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                             \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                           \n" +
                "					fun_getMfgCodeByID(p.mfgCodeID) supplierCode,			                    \n" +
                "					(                    \n" +
                "						SELECT COUNT(1)                     \n" +
                "						  FROM genericfiles g                     \n" +
                "						 WHERE g.refTransID = p.id                     \n" +
                "						   and g.entityID = -13            \n" +
                "						   AND g.gencFileOwnerType = 'supplier_invoice'                     \n" +
                "						   AND g.isDeleted =0            \n" +
                "					) invoiceDocCount,                    \n" +
                "					(                    \n" +
                "						SELECT COUNT(1)                     \n" +
                "						 FROM genericfiles g                     \n" +
                "						WHERE g.refTransID = psm.id                     \n" +
                "						  and g.entityID = -14            \n" +
                "						  AND g.gencFileOwnerType = 'packing_slip'                     \n" +
                "						  AND g.isDeleted =0            \n" +
                "					) packingSlipDocCount,  \n" +
                "					pd.itemReceived,    \n" +
                "					pd.otherChargesItemReceived,          \n" +
                "					pd.itemDisapproved,            \n" +
                "					(                    \n" +
                "						CASE 	WHEN p.`receiptType` = 'I' THEN                     \n" +
                "								'Invoice'                     \n" +
                "							WHEN p.`receiptType` = 'C' THEN                     \n" +
                "								'Credit Memo'                     \n" +
                "							ELSE                     \n" +
                "								'Debit Memo'                     \n" +
                "						END                    \n" +
                "					) receiptMemoType,      									                              \n" +
                "					(                    \n" +
                "						CASE 	WHEN p.`status` = 'PE' THEN                     \n" +
                "								'Pending'                     \n" +
                "							WHEN p.`status` = 'I' THEN                     \n" +
                "								'Investigate'                     \n" +
                "							WHEN p.`status` = 'A' THEN                     \n" +
                "								'Approved to Pay'                     \n" +
                "							ELSE                     \n" +
                "								'Paid'                     \n" +
                "						END                    \n" +
                "					) invoiceVerificationStatus,                                    \n" +
                "					ps.invoiceNumber refInvoiceNumber,                        \n" +
                "					pd.totalExtendedAmount,            \n" +
                "					pe.totalCreditAmount,            \n" +
                "					pe.totalDebitAmount,            \n" +
                "					(            \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)            \n" +
                "					) amountToPay,            \n" +
                "					pd.packingDetailNote,            \n" +
                "					pd.approveLineCount,            \n" +
                "					DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),             \n" +
                "					INTERVAL IFNULL((max(p.termsDays) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,            \n" +
                "					p.refPayementid,            \n" +
                "					max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,        \n" +
                "					max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,          \n" +
                "					psm.packingSlipModeStatus            \n" +
                "			FROM		packing_slip_material_receive p            \n" +
                "			LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0            \n" +
                "			LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id  \n" +
                "		\");          \n" +
                "  \n" +
                "		IF (pPaymentMethodTypeIds IS NULL OR pPaymentMethodTypeIds = '') THEN            \n" +
                "			SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" left \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"            \n" +
                "				join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0            \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'         \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'        \n" +
                "				left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,            \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,            \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,            \n" +
                "								sum(a.itemDisapproved) itemDisapproved,            \n" +
                "								sum(a.approveLineCount) approveLineCount,            \n" +
                "								sum(a.extendedPrice) totalExtendedAmount            \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,   \n" +
                "										psm.packingSlipSerialNumber,   \n" +
                "										psm.approveNote,            \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,            \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,            \n" +
                "										extendedPrice            \n" +
                "									FROM 	packing_slip_material_receive_det psm            \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "								) a            \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id            \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,             \n" +
                "									sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,            \n" +
                "									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount            \n" +
                "							from 		packing_slip_material_receive ps            \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID            \n" +
                "										and ps.isDeleted = 0            \n" +
                "										and pd.isDeleted = 0            \n" +
                "										and ps.receiptType in ('C','D')            \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id            \n" +
                "				WHERE 	p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')            \n" +
                "	\");            \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN            \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN            \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND pinv.paymentType in (', pPaymentMethodTypeIds, ' )');            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;            \n" +
                "	ELSE                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                              \n" +
                "		SET pWhereClause = '1=1' ;                                              \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");            \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN            \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \"            \n" +
                "								AND (   \n" +
                "										c.supplierSONumber = '\", pInvoiceNumber, \"'            \n" +
                "									OR 	c.poNumber = '\", pInvoiceNumber, \"'            \n" +
                "									OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'            \n" +
                "									OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'            \n" +
                "									OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"            \n" +
                "								  \" ) \"  \n" +
                "					);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                               \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "	ELSE	                                              \n" +
                "		SET rowNumWhere = '';                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "	/* to get total count of rows */                                              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                              \n" +
                "	EXECUTE query1;                                              \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"   \n" +
                "			SELECT 	c.*,   \n" +
                "				case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed            \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c   \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                              \n" +
                "	EXECUTE query2;                                              \n" +
                "	DEALLOCATE PREPARE query2;                                             \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (609,'1.00','V1','Sproc_RetriveSupplierInvoiceList - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 609:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-11-2020 *********************************** */
                "DROP function IF EXISTS `fun_getCertificationByPartID`;  \n" +
                "CREATE FUNCTION `fun_getCertificationByPartID`(                    \n" +
                "	pPartID INT                  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                    \n" +
                "	DECLARE compCertificationList LONGTEXT;			  \n" +
                "	/* SELECT   \n" +
                "    GROUP_CONCAT(DISTINCT IFNULL(cs.fullName, ''),  \n" +
                "        '',  \n" +
                "        CASE  \n" +
                "            WHEN wc.classIDs IS NULL THEN ''  \n" +
                "            ELSE (SELECT   \n" +
                "                    GROUP_CONCAT(IFNULL(className, ''))  \n" +
                "                FROM  \n" +
                "                    standard_class  \n" +
                "                WHERE  \n" +
                "                    classID = wc.classIDs and isDeleted = 0)  \n" +
                "        END  \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "        SEPARATOR ', ')  \n" +
                "FROM  \n" +
                "    `workorder_certification` wc  \n" +
                "        JOIN  \n" +
                "    certificate_standards cs ON wc.certificateStandardID = cs.certificateStandardID  \n" +
                "WHERE  \n" +
                "    wc.isDeleted = 0  \n" +
                "        AND wc.woID IN (SELECT   \n" +
                "            woID  \n" +
                "        FROM  \n" +
                "            assemblystock  \n" +
                "        WHERE  \n" +
                "            partID = pPartID AND isDeleted = 0) INTO compCertificationList;          \n" +
                "	IF compCertificationList IS NULL  \n" +
                "    THEN */  \n" +
                "		SELECT       \n" +
                "    GROUP_CONCAT(cs.fullName,      \n" +
                "        '',      \n" +
                "        CASE      \n" +
                "            WHEN csd.classID IS NULL THEN ''      \n" +
                "            ELSE (SELECT       \n" +
                "                    GROUP_CONCAT(IFNULL(className, ''))      \n" +
                "                FROM      \n" +
                "                    standard_class      \n" +
                "                WHERE      \n" +
                "                    classID = csd.classID and isDeleted = 0)      \n" +
                "        END      \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC      \n" +
                "        SEPARATOR ', ')      \n" +
                "FROM         \n" +
                "    `component_standard_details` csd      \n" +
                "        JOIN      \n" +
                "    certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID      \n" +
                "WHERE      \n" +
                "    csd.isDeleted = 0      \n" +
                "        AND csd.componentID = pPartID INTO compCertificationList;          \n" +
                "	#  END IF;      \n" +
                "    RETURN compCertificationList;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2020 *********************************** */
                "DROP function IF EXISTS `fun_getCertificationByWoNumber`;  \n" +
                "CREATE FUNCTION `fun_getCertificationByWoNumber`(                    \n" +
                "	pWoNumber VARCHAR(250)                  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                    \n" +
                "	DECLARE compCertificationList LONGTEXT;          \n" +
                "	DECLARE pPartID int;  \n" +
                "	SELECT DISTINCT  \n" +
                "    partID  \n" +
                "INTO pPartID FROM  \n" +
                "    assemblyStock  \n" +
                "WHERE  \n" +
                "    woNumber = pWoNumber AND isDeleted = 0;		  \n" +
                "    IF (SELECT COUNT(1) FROM assemblyStock WHERE woNumber = pWoNumber and isDeleted = 0 and woID IS NULL) > 0  \n" +
                "    THEN	    \n" +
                "	SELECT   \n" +
                "    GROUP_CONCAT(cs.fullName,  \n" +
                "        '',  \n" +
                "        CASE  \n" +
                "            WHEN csd.classID IS NULL THEN ''  \n" +
                "            ELSE (SELECT   \n" +
                "                    GROUP_CONCAT(IFNULL(className, ''))  \n" +
                "                FROM  \n" +
                "                    standard_class  \n" +
                "                WHERE  \n" +
                "                    classID = csd.classID and isDeleted = 0)  \n" +
                "        END  \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "        SEPARATOR ', ')  \n" +
                "FROM  \n" +
                "    `component_standard_details` csd  \n" +
                "        JOIN  \n" +
                "    certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID  \n" +
                "WHERE  \n" +
                "    csd.isDeleted = 0  \n" +
                "        AND csd.componentID = pPartID INTO compCertificationList;    \n" +
                "ELSE   \n" +
                "		SELECT   \n" +
                "    GROUP_CONCAT(DISTINCT IFNULL(cs.fullName, ''),  \n" +
                "        '',  \n" +
                "        CASE  \n" +
                "            WHEN wc.classIDs IS NULL THEN ''  \n" +
                "            ELSE (SELECT   \n" +
                "                    GROUP_CONCAT(IFNULL(className, ''))  \n" +
                "                FROM  \n" +
                "                    standard_class  \n" +
                "                WHERE  \n" +
                "                    classID = wc.classIDs)  \n" +
                "        END  \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "        SEPARATOR ', ')  \n" +
                "FROM  \n" +
                "    `workorder_certification` wc  \n" +
                "        JOIN  \n" +
                "    certificate_standards cs ON wc.certificateStandardID = cs.certificateStandardID  \n" +
                "WHERE  \n" +
                "    wc.isDeleted = 0  \n" +
                "        AND wc.woID IN (SELECT   \n" +
                "            woID  \n" +
                "        FROM  \n" +
                "            assemblystock  \n" +
                "        WHERE  \n" +
                "            partID = pPartID AND isDeleted = 0) INTO compCertificationList;	  \n" +
                "        END IF;  \n" +
                "	RETURN compCertificationList;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerPackingslipReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(          \n" +
                "	IN cpid INT,          \n" +
                "    IN pEmployeeID INT          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	# Company detail - Use in Packing slip header                       \n" +
                "	SELECT           \n" +
                "    CONCAT(street1,          \n" +
                "            ', ',          \n" +
                "            '<br/>',          \n" +
                "            city,          \n" +
                "            ', ',          \n" +
                "            state,          \n" +
                "            ' - ',          \n" +
                "            postcode,          \n" +
                "            ', ',          \n" +
                "            '<br/>',          \n" +
                "            IFNULL(c.countryName, ''),          \n" +
                "            '<br/>',          \n" +
                "            'Email: ',          \n" +
                "            cua.email,          \n" +
                "            '<br/>',          \n" +
                "            'Phone: ',          \n" +
                "            cua.contact,          \n" +
                "            '<br/>',          \n" +
                "            'Fax: ',          \n" +
                "            IFNULL(cua.faxNumber, '')) AS address,          \n" +
                "    cua.email,          \n" +
                "    cua.faxNumber,          \n" +
                "    cu.contact,          \n" +
                "    cua.contact AS phoneNo,          \n" +
                "    cu.primaryContactName AS companyContactName,                \n" +
                "	fun_getUserNameByEmployeID(pEmployeeID) employeeName,          \n" +
                "    cu.mfgName          \n" +
                "FROM          \n" +
                "    customer_addresses cua          \n" +
                "        JOIN          \n" +
                "    mfgcodemst cu ON cu.id = cua.customerId          \n" +
                "        LEFT JOIN          \n" +
                "    countrymst c ON cua.countryID = c.countryID          \n" +
                "WHERE          \n" +
                "    cua.addressType = 'B'          \n" +
                "        AND cu.isCompany = 1          \n" +
                "        AND cua.isDeleted = 0          \n" +
                "        AND cua.isDefault = 1;      \n" +
                "  \n" +
                "	SELECT       \n" +
                "    cp.id,      \n" +
                "    cp.packingSlipNumber AS PackingSlip,      \n" +
                "    cp.packingSlipDate AS PackingSlipDate,      \n" +
                "    cp.poDate AS PODate,      \n" +
                "    cp.soNumber AS SalesOrderNumber,      \n" +
                "    cp.poNumber AS PONumber,      \n" +
                "    IFNULL(CONCAT('(',      \n" +
                "                    gc.gencCategoryCode,      \n" +
                "                    ') ',      \n" +
                "                    gc.gencCategoryName),      \n" +
                "            '-') AS ShippingMethod,      \n" +
                "    IFNULL(CONCAT('(',      \n" +
                "                    gcc.gencCategoryCode,      \n" +
                "                    ') ',      \n" +
                "                    gcc.gencCategoryName),      \n" +
                "            '-') AS PaymentMethod,      \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,      \n" +
                "    'S & M Group, Inc. d/b/a,' AS Headername,      \n" +
                "    cp.soDate AS SODate,      \n" +
                "    cp.sorevision AS SORevision,      \n" +
                "    CASE      \n" +
                "        WHEN      \n" +
                "            cp.shipToId IS NOT NULL      \n" +
                "        THEN      \n" +
                "            (SELECT       \n" +
                "                    CONCAT('<b>',      \n" +
                "                                IFNULL(ca.companyName, ''),      \n" +
                "                                '</b>',      \n" +
                "                                '<br/>',      \n" +
                "                                IFNULL(ca.personName, ''),      \n" +
                "                                '<br/>',      \n" +
                "                                IFNULL(ca.division, ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.division IS NOT NULL THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(ca.street1, ''),      \n" +
                "                                ' ',      \n" +
                "                                IFNULL(ca.street2, ''),      \n" +
                "                                ' ',      \n" +
                "                                IFNULL(ca.street3, ''),      \n" +
                "                                '<br/>',      \n" +
                "                                IFNULL(ca.city, ''),      \n" +
                "                                ', ',      \n" +
                "                                IFNULL(ca.state, ''),      \n" +
                "                                ', ',      \n" +
                "                                IFNULL(co.countryName, ''),      \n" +
                "                                ' ',      \n" +
                "                                '-',      \n" +
                "                                ' ',      \n" +
                "                                IFNULL(ca.postcode, ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.contact THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(CONCAT('Phone: ', ca.contact), ''),      \n" +
                "                                IFNULL(CONCAT(' Ext. ', ca.phExtension), ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.faxNumber THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(CONCAT('Fax: ', ca.faxNumber), ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.email IS NOT NULL THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(CONCAT('Email: ', ca.email), ''))      \n" +
                "                FROM      \n" +
                "                    customer_addresses ca      \n" +
                "                        JOIN      \n" +
                "                    countrymst co ON co.countryID = ca.countryID      \n" +
                "                WHERE      \n" +
                "                    ca.id = cp.shipToId AND ca.isDeleted = 0      \n" +
                "                        AND ca.addressType = 'S')      \n" +
                "    END AS ShippingAddress,      \n" +
                "    CASE      \n" +
                "        WHEN      \n" +
                "            cp.billToId IS NOT NULL      \n" +
                "        THEN      \n" +
                "            (SELECT       \n" +
                "                    CONCAT('<b>',      \n" +
                "                                IFNULL(ca.companyName, ''),      \n" +
                "                                '</b>',      \n" +
                "                                '<br/>',      \n" +
                "                                IFNULL(ca.personName, ''),      \n" +
                "                                '<br/>',      \n" +
                "                                IFNULL(ca.division, ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.division IS NOT NULL THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(ca.street1, ''),      \n" +
                "                                ' ',      \n" +
                "                                IFNULL(ca.street2, ''),      \n" +
                "                                ' ',      \n" +
                "                                IFNULL(ca.street3, ''),      \n" +
                "                                '<br/>',      \n" +
                "                                IFNULL(ca.city, ''),      \n" +
                "                                ', ',      \n" +
                "                                IFNULL(ca.state, ''),      \n" +
                "                                ', ',      \n" +
                "                                IFNULL(co.countryName, ''),      \n" +
                "                                ' ',      \n" +
                "                                '-',      \n" +
                "                                ' ',      \n" +
                "                                IFNULL(ca.postcode, ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.contact THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(CONCAT('Phone: ', ca.contact), ''),      \n" +
                "                                IFNULL(CONCAT(' Ext. ', ca.phExtension), ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.faxNumber THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(CONCAT('Fax: ', ca.faxNumber), ''),      \n" +
                "                                (CASE      \n" +
                "                                    WHEN ca.email IS NOT NULL THEN '<br/>'      \n" +
                "                                    ELSE ''      \n" +
                "                                END),      \n" +
                "                                IFNULL(CONCAT('Email: ', ca.email), ''))      \n" +
                "                FROM      \n" +
                "                    customer_addresses ca      \n" +
                "                        JOIN      \n" +
                "                    countrymst co ON co.countryID = ca.countryID      \n" +
                "                WHERE      \n" +
                "                    ca.id = cp.billToId AND ca.isDeleted = 0      \n" +
                "                        AND ca.addressType = 'B')      \n" +
                "    END AS SoldToAddress,      \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),      \n" +
                "            '-') AS SalesOrderPersonName      \n" +
                "FROM      \n" +
                "    customer_packingslip cp      \n" +
                "        INNER JOIN      \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID      \n" +
                "        AND sm.isDeleted = 0      \n" +
                "        LEFT JOIN      \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId      \n" +
                "        AND gc.isDeleted = 0      \n" +
                "        AND gc.categoryType = 'Shipping Methods'      \n" +
                "        LEFT JOIN      \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = sm.termsID      \n" +
                "        AND gcc.isDeleted = 0      \n" +
                "        AND gcc.categoryType = 'Payment Terms'      \n" +
                "WHERE      \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid      \n" +
                "LIMIT 1;      \n" +
                "  \n" +
                "SELECT       \n" +
                "	ROW_NUMBER() OVER () AS PSLine,    \n" +
                "    cpd.id,      \n" +
                "    cpd.partId,      \n" +
                "    cp.id AS cpID,      \n" +
                "    cpd.shipQty AS ShippedQty,      \n" +
                "    cpd.custPOLineID AS POLine,      \n" +
                "    c.custAssyPN AS PartNumber,      \n" +
                "    FUN_GETUOMABBREVIATIONBYID(c.uom) AS UOM,      \n" +
                "    IFNULL(c.rev, '') AS Revision,      \n" +
                "    CONCAT(IFNULL(c.mfgpndescription, ''),      \n" +
                "            IFNULL(CONCAT(', ', rr.name), ''),      \n" +
                "            IFNULL(CONCAT(', ',      \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),      \n" +
                "                    ''),      \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),      \n" +
                "            IFNULL(CONCAT(', HTS Code : ', c.htsCode), ''),      \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton      \n" +
                "FROM      \n" +
                "    customer_packingslip_det cpd      \n" +
                "        LEFT JOIN      \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id      \n" +
                "        AND cp.isDeleted = 0      \n" +
                "        LEFT JOIN      \n" +
                "    component c ON c.id = cpd.partid      \n" +
                "        LEFT JOIN      \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID      \n" +
                "        AND sd.isDeleted = 0     \n" +
                "        LEFT JOIN     \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID      \n" +
                "        LEFT JOIN      \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID      \n" +
                "        LEFT JOIN      \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id      \n" +
                "        AND ra.partID = cpd.partId      \n" +
                "        LEFT JOIN      \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id      \n" +
                "WHERE      \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid; 		 		        \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipAssemblyDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(    \n" +
                "	IN partID INT ,     \n" +
                "    IN cpID INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	# COFC Report Header details    \n" +
                "	SELECT       \n" +
                "    cp.id,    \n" +
                "    cp.packingSlipNumber AS PackingSlip,    \n" +
                "    cp.packingSlipDate AS PackingSlipDate,    \n" +
                "    cp.soNumber AS SalesOrderNumber,    \n" +
                "    cp.poNumber AS PONumber,    \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,    \n" +
                "    '_BAS_' AS DepartmentName,    \n" +
                "    'Jay Vora' AS ManagerName    \n" +
                "FROM    \n" +
                "    customer_packingslip cp    \n" +
                "        LEFT JOIN    \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID    \n" +
                "        AND mfg.isDeleted = 0    \n" +
                "WHERE    \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID    \n" +
                "LIMIT 1;    \n" +
                "  \n" +
                "	SELECT     \n" +
                "    cpd.id,    \n" +
                "    cpd.partId,    \n" +
                "    cpd.custPOLineID AS POLine,    \n" +
                "    sa.shippedqty AS ShippedQty,    \n" +
                "    cpd.poQty AS OrderQty,    \n" +
                "    c.custAssyPN AS PartNumber,    \n" +
                "    IFNULL(c.rev, '') AS Revision,    \n" +
                "    sa.woNumber AS WorkOrderNumber,    \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,    \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,    \n" +
                "    IFNULL(ast.datecode, '') AS DateCode    \n" +
                "FROM  		  \n" +
                "    customer_packingslip_det cpd    \n" +
                "        INNER JOIN    \n" +
                "    shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID    \n" +
                "        AND sa.isDeleted = 0    \n" +
                "        INNER JOIN    \n" +
                "    component c ON c.id = cpd.partid    \n" +
                "        LEFT JOIN    \n" +
                "    salesorderdet sd ON (cpd.refSalesorderDetid = sd.refSalesOrderID    \n" +
                "        AND sd.isDeleted = 0)    \n" +
                "        LEFT JOIN    \n" +
                "    assemblyStock ast ON ast.partID = cpd.partid    \n" +
                "        LEFT JOIN    \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = sd.refRFQGroupID    \n" +
                "        AND ra.partID = cpd.partId    \n" +
                "        LEFT JOIN    \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id    \n" +
                "WHERE    \n" +
                "    cpd.isDeleted = 0    \n" +
                "        AND cpd.refCustPackingSlipID = cpID    \n" +
                "        AND cpd.partId = partID;    \n" +
                "  \n" +
                "   # REQUIREMENT LIST - STATIC AS PER CLIENT REQUIREMENT    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2020 *****************************/
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (610,'1.00','V1','User Story 22786 - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 610:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipDetailByPackingSlipNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailByPackingSlipNumber`(                                                                                \n" +
                "	IN pPackingSlipNumber VARCHAR(100),            \n" +
                "	IN pMFGCodeId INT            \n" +
                ")  \n" +
                "BEGIN               \n" +
                "	DECLARE v_CountOfPSRecord INT;      \n" +
                "	DECLARE v_CountOfPSDraftRecord INT;          \n" +
                "	DECLARE v_CountOfSIRecord INT;            \n" +
                "	DECLARE v_CountOfPSDetailRecord INT;            \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(1000);         \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;              \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                 \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_PackingSlip_Validation_Error;                                                                                   \n" +
                "	CREATE TEMPORARY TABLE temp_PackingSlip_Validation_Error                            \n" +
                "	(                                                                                  \n" +
                "		IsSuccess BOOLEAN,                          \n" +
                "		ErrorCode INT,            \n" +
                "		FullMFGCode VARCHAR(1000)            \n" +
                "	);                             \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord             \n" +
                "	FROM 	packing_slip_material_receive             \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber             \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)            \n" +
                "			AND receiptType = 'P'            \n" +
                "			AND deletedAt IS NULL;            \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN            \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 1, NULL);            \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;            \n" +
                "	ELSEIF (v_CountOfPSRecord = 1) THEN            \n" +
                "		SELECT 	COUNT(1) INTO v_CountOfPSDraftRecord             \n" +
                "		FROM 	packing_slip_material_receive             \n" +
                "		WHERE 	packingSlipNumber = pPackingSlipNumber             \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)            \n" +
                "			AND receiptType = 'P'     \n" +
                "			AND packingSlipModeStatus = 'D'           \n" +
                "			AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		IF (v_CountOfPSDraftRecord = 1) THEN    \n" +
                "			INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 5, NULL);            \n" +
                "			SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;           \n" +
                "		ELSE     \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(fullMFGCode) INTO v_CountOfSIRecord, v_StringOfMFGCode            \n" +
                "			FROM 	(            \n" +
                "					SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(mfgCodeID) fullMFGCode            \n" +
                "					FROM 	packing_slip_material_receive             \n" +
                "					WHERE 	packingSlipNumber = pPackingSlipNumber             \n" +
                "							AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)            \n" +
                "							AND receiptType = 'I'            \n" +
                "							AND deletedAt IS NULL            \n" +
                "			) a;            \n" +
                "  \n" +
                "			IF (v_CountOfSIRecord = 0) THEN            \n" +
                "  \n" +
                "				SELECT 	COUNT(1) INTO v_CountOfPSDetailRecord            \n" +
                "				FROM 	packing_slip_material_receive_det            \n" +
                "				WHERE	deletedAt IS NULL             \n" +
                "						AND refPackingSlipMaterialRecID IN (            \n" +
                "							SELECT 	id             \n" +
                "							FROM 	packing_slip_material_receive             \n" +
                "							WHERE 	packingSlipNumber = pPackingSlipNumber             \n" +
                "									AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)            \n" +
                "									AND receiptType = 'P'            \n" +
                "									AND deletedAt IS NULL            \n" +
                "						);            \n" +
                "  \n" +
                "				IF (v_CountOfPSDetailRecord = 0) THEN            \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 4, v_StringOfMFGCode);            \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;            \n" +
                "				ELSE            \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (TRUE, 0, NULL);            \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;            \n" +
                "  \n" +
                "					SELECT 		pr.id, pr.poNumber, pr.mfgCodeID, pr.supplierSONumber, pr.packingSlipNumber, pr.packingSlipDate,      \n" +
                "							pr.receiptDate, pr.receiptType, pr.`status`, m.paymentTermsID, p.termsDays      \n" +
                "					FROM 		packing_slip_material_receive pr      \n" +
                "					JOIN 		mfgcodemst m ON m.id = pr.mfgCodeID      \n" +
                "					LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentTermsID      \n" +
                "					WHERE 		pr.packingSlipNumber = pPackingSlipNumber             \n" +
                "							AND pr.mfgCodeID = IFNULL(pMFGCodeId, pr.mfgCodeID)            \n" +
                "							AND pr.receiptType = 'P'            \n" +
                "							AND pr.deletedAt IS NULL;            \n" +
                "  \n" +
                "					SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				                        \n" +
                "							CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                   \n" +
                "							p.nickname, 					p.partID, 						p.scanLabel, 	                                    \n" +
                "							p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                    \n" +
                "							p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                    \n" +
                "							p.invoicePrice, 				p.disputedPrice,					p.createdBy,                                     \n" +
                "							p.createdAt, 					p.updatedBy, 						p.updatedAt,                                    \n" +
                "							p.deletedBy, 					p.deletedAt, 						p.isDeleted,                                    \n" +
                "							p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                     \n" +
                "							p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                     \n" +
                "							p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                    \n" +
                "							fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                               \n" +
                "							c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                               \n" +
                "							c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                        \n" +
                "							0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                      \n" +
                "							p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                      \n" +
                "							fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                \n" +
                "							c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                    \n" +
                "							sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,              \n" +
                "							sc.packagingID supplierPackagingId,                                                    \n" +
                "							'Pending' invoiceVerificationStatus,          \n" +
                "							p.receivedStatus,   \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.receivedStatus = 'P' THEN 'Pending'  \n" +
                "									WHEN p.receivedStatus = 'A' THEN 'Approved'  \n" +
                "									WHEN p.receivedStatus = 'R' THEN 'Received'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) receivedStatusValue,  \n" +
                "							p.remark,                                                    \n" +
                "							fun_getUserNameByID(p.createdBy) createdByName,        \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,        \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,          \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					        \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					        \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt                                                          \n" +
                "					FROM		packing_slip_material_receive_det p                                            \n" +
                "					LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL                    \n" +
                "					LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                        \n" +
                "					WHERE   	p.refPackingSlipMaterialRecID IN (            \n" +
                "								SELECT 	id             \n" +
                "								FROM 	packing_slip_material_receive             \n" +
                "								WHERE 	packingSlipNumber = pPackingSlipNumber             \n" +
                "										AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)            \n" +
                "										AND receiptType = 'P'            \n" +
                "										AND deletedAt IS NULL            \n" +
                "							)                                                     \n" +
                "					AND 		p.deletedAt IS NULL;            \n" +
                "				END IF;            \n" +
                "			ELSE            \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 3, v_StringOfMFGCode);            \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;            \n" +
                "			END IF;            \n" +
                "		END IF;    \n" +
                "	ELSEIF (v_CountOfPSRecord > 1) THEN            \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 2, NULL);            \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (611,'1.00','V1','Sproc_GetPackingSlipDetailByPackingSlipNumber - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 611:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2020  *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                                                \n" +
                "	IN pPageIndex INT,                                                \n" +
                "	IN pRecordPerPage INT,                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN pReceiptType VARCHAR(10),              \n" +
                "    IN pMfgCodeIds LONGTEXT,              \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,              \n" +
                "    IN pDueDate DATE,              \n" +
                "    IN pAdditionalDays INT,              \n" +
                "    IN pTermsAndAboveDays INT,              \n" +
                "    IN pInvoiceNumber VARCHAR(50)              \n" +
                ")  \n" +
                "BEGIN                                                \n" +
                "	DECLARE pOffset INT;                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                            \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                             \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                      \n" +
                "			SELECT 		p.id,                  \n" +
                "					p.poNumber,                  \n" +
                "					p.mfgCodeID,                  \n" +
                "					p.supplierSONumber,        \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                  \n" +
                "					p.packingSlipDate,                  \n" +
                "					p.invoiceNumber,                  \n" +
                "					p.invoiceDate,                  \n" +
                "					p.creditMemoNumber,                  \n" +
                "					p.creditMemoDate,                  \n" +
                "					p.debitMemoNumber,                  \n" +
                "					p.debitMemoDate,                  \n" +
                "					p.receiptDate,                  \n" +
                "					p.description,                  \n" +
                "					p.billToAddress,                  \n" +
                "					p.shipToAddress,                  \n" +
                "					p.poVersion,                  \n" +
                "					p.isDeleted,                  \n" +
                "					p.receiptType,                  \n" +
                "					p.`status`,                  \n" +
                "					pinv.paymentNumber chequeNumber,                  \n" +
                "					pinv.paymentDate chequeDate,                  \n" +
                "					pinv.paymentAmount chequeAmount,               \n" +
                "					pinv.bankAccountNo,            \n" +
                "					pinv.bankAccountMasID,            \n" +
                "					pinv.accountReference,            \n" +
                "					gp.gencCategoryName paymentTypeName,            \n" +
                "					pinv.paymentType,          \n" +
                "					p.applyDate,                  \n" +
                "					p.refParentCreditDebitInvoiceno,                  \n" +
                "					p.refPackingSlipNumberForInvoice,                  \n" +
                "					p.invoiceTotalDue,                  \n" +
                "					p.isTariffInvoice,                  \n" +
                "					pinv.bankName,              									                                     \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                               \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                    \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                    \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                             \n" +
                "					m.mfgCode supplierCode,  \n" +
                "					(                      \n" +
                "						SELECT COUNT(1)                       \n" +
                "						  FROM genericfiles g                       \n" +
                "						 WHERE g.refTransID = p.id                       \n" +
                "						   and g.entityID = -13              \n" +
                "						   AND g.gencFileOwnerType = 'supplier_invoice'                       \n" +
                "						   AND g.isDeleted =0              \n" +
                "					) invoiceDocCount,                      \n" +
                "					(                      \n" +
                "						SELECT COUNT(1)                       \n" +
                "						 FROM genericfiles g                       \n" +
                "						WHERE g.refTransID = psm.id                       \n" +
                "						  and g.entityID = -14              \n" +
                "						  AND g.gencFileOwnerType = 'packing_slip'                       \n" +
                "						  AND g.isDeleted =0              \n" +
                "					) packingSlipDocCount,    \n" +
                "					pd.itemReceived,      \n" +
                "					pd.otherChargesItemReceived,            \n" +
                "					pd.itemDisapproved,              \n" +
                "					(                      \n" +
                "						CASE 	WHEN p.`receiptType` = 'I' THEN                       \n" +
                "								'Invoice'                       \n" +
                "							WHEN p.`receiptType` = 'C' THEN                       \n" +
                "								'Credit Memo'                       \n" +
                "							ELSE                       \n" +
                "								'Debit Memo'                       \n" +
                "						END                      \n" +
                "					) receiptMemoType,      									                                \n" +
                "					(                      \n" +
                "						CASE 	WHEN p.`status` = 'PE' THEN                       \n" +
                "								'Pending'                       \n" +
                "							WHEN p.`status` = 'I' THEN                       \n" +
                "								'Investigate'                       \n" +
                "							WHEN p.`status` = 'A' THEN                       \n" +
                "								'Approved to Pay'                       \n" +
                "							ELSE                       \n" +
                "								'Paid'                       \n" +
                "						END                      \n" +
                "					) invoiceVerificationStatus,                                      \n" +
                "					ps.invoiceNumber refInvoiceNumber,                          \n" +
                "					pd.totalExtendedAmount,              \n" +
                "					pe.totalCreditAmount,              \n" +
                "					pe.totalDebitAmount,              \n" +
                "					(              \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)              \n" +
                "					) amountToPay,              \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),  \n" +
                "					INTERVAL IFNULL((max(p.termsDays) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,  \n" +
                "					p.refPayementid,  \n" +
                "					max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,  \n" +
                "					max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus  \n" +
                "			FROM		packing_slip_material_receive p  \n" +
                "            inner join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "			LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0              \n" +
                "			LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id    \n" +
                "		\");            \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"              \n" +
                "				left join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0              \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'           \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'          \n" +
                "				left join (    \n" +
                "							select 	a.refPackingSlipMaterialRecID,              \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,              \n" +
                "								sum(a.itemReceived) itemReceived,    \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,              \n" +
                "								sum(a.itemDisapproved) itemDisapproved,              \n" +
                "								sum(a.approveLineCount) approveLineCount,              \n" +
                "								sum(a.extendedPrice) totalExtendedAmount              \n" +
                "							from 	(    \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,     \n" +
                "										psm.packingSlipSerialNumber,     \n" +
                "										psm.approveNote,              \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,    \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,    \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,              \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,              \n" +
                "										extendedPrice              \n" +
                "									FROM 	packing_slip_material_receive_det psm              \n" +
                "									WHERE 	psm.isDeleted = 0    \n" +
                "								) a              \n" +
                "							group by a.refPackingSlipMaterialRecID    \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id              \n" +
                "				left join (    \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,               \n" +
                "									sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,              \n" +
                "									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount              \n" +
                "							from 		packing_slip_material_receive ps              \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID              \n" +
                "										and ps.isDeleted = 0              \n" +
                "										and pd.isDeleted = 0              \n" +
                "										and ps.receiptType in ('C','D')              \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno    \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id              \n" +
                "				WHERE 	p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')              \n" +
                "	\");              \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN              \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN              \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;              \n" +
                "	ELSE                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");              \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN              \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \"              \n" +
                "								AND (     \n" +
                "										c.supplierSONumber = '\", pInvoiceNumber, \"'              \n" +
                "									OR 	c.poNumber = '\", pInvoiceNumber, \"'              \n" +
                "									OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'              \n" +
                "									OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'              \n" +
                "									OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"              \n" +
                "								  \" ) \"    \n" +
                "					);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                 \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                \n" +
                "	ELSE	                                                \n" +
                "		SET rowNumWhere = '';                                                \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "	/* to get total count of rows */                                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                \n" +
                "	EXECUTE query1;                                                \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"     \n" +
                "			SELECT 	c.*,     \n" +
                "				case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed              \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c     \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                \n" +
                "	EXECUTE query2;                                                \n" +
                "	DEALLOCATE PREPARE query2;                                               \n" +
                "    select @SQLStatement2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (612,'1.00','V1','User Story 27924: Payment Method Filter changes on invoice payment page - Ashish '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 612:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipAssemblyDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(      \n" +
                "	IN partID INT ,       \n" +
                "    IN cpID INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	# COFC Report Header details      \n" +
                "	SELECT         \n" +
                "    cp.id,      \n" +
                "    cp.packingSlipNumber AS PackingSlip,      \n" +
                "    cp.packingSlipDate AS PackingSlipDate,      \n" +
                "    cp.soNumber AS SalesOrderNumber,      \n" +
                "    cp.poNumber AS PONumber,     \n" +
                "	cp.soDate AS SODate,        \n" +
                "    cp.sorevision AS SORevision,    \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,      \n" +
                "    '_BAS_' AS DepartmentName,      \n" +
                "    'Jay Vora' AS ManagerName      \n" +
                "FROM      \n" +
                "    customer_packingslip cp      \n" +
                "        LEFT JOIN      \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID      \n" +
                "        AND mfg.isDeleted = 0      \n" +
                "WHERE      \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID      \n" +
                "LIMIT 1;      \n" +
                "  \n" +
                "  # COFC Report Table details    \n" +
                "	SELECT       \n" +
                "    cpd.id,      \n" +
                "    cpd.partId,      \n" +
                "    cpd.custPOLineID AS POLine,      \n" +
                "    sa.shippedqty AS ShippedQty,      \n" +
                "    cpd.poQty AS OrderQty,      \n" +
                "    c.custAssyPN AS PartNumber,      \n" +
                "    IFNULL(c.rev, '') AS Revision,      \n" +
                "    sa.woNumber AS WorkOrderNumber,      \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,      \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,      \n" +
                "    IFNULL(ast.datecode, '') AS DateCode      \n" +
                "FROM  		    \n" +
                "    customer_packingslip_det cpd      \n" +
                "        INNER JOIN      \n" +
                "    shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID      \n" +
                "        AND sa.isDeleted = 0      \n" +
                "        INNER JOIN      \n" +
                "    component c ON c.id = cpd.partid      \n" +
                "        LEFT JOIN      \n" +
                "    salesorderdet sd ON (cpd.refSalesorderDetid = sd.refSalesOrderID      \n" +
                "        AND sd.isDeleted = 0)      \n" +
                "        LEFT JOIN      \n" +
                "    assemblyStock ast ON ast.partID = cpd.partid      \n" +
                "        LEFT JOIN      \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = sd.refRFQGroupID      \n" +
                "        AND ra.partID = cpd.partId      \n" +
                "        LEFT JOIN      \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id      \n" +
                "WHERE      \n" +
                "    cpd.isDeleted = 0      \n" +
                "        AND cpd.refCustPackingSlipID = cpID      \n" +
                "        AND cpd.partId = partID;      \n" +
                "  \n" +
                "   # REQUIREMENT LIST - STATIC AS PER CLIENT REQUIREMENT      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2020 *****************************/
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (613,'1.00','V1','Sproc_GetPackingSlipAssemblyDetails - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 613:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2020  *********************************** */
                "drop function if exists `number_to_string`;  \n" +
                "    CREATE FUNCTION `number_to_string`(n INT) RETURNS varchar(100)  \n" +
                "    BEGIN  \n" +
                "        -- This function returns the string representation of a number.  \n" +
                "        -- It's just an example... I'll restrict it to hundreds, but  \n" +
                "        -- it can be extended easily.  \n" +
                "        -- The idea is:   \n" +
                "        --      For each digit you need a position,  \n" +
                "        --      For each position, you assign a string  \n" +
                "        declare ans varchar(100);  \n" +
                "        declare dig1, dig2, dig3 int; -- (one variable per digit)  \n" +
                "        set ans = '';  \n" +
                "        set dig3 = floor(n / 100);  \n" +
                "        set dig2 = floor(n / 10) - dig3*10;  \n" +
                "        set dig1 = n - (dig3*100 + dig2*10);  \n" +
                "        if dig3 > 0 then  \n" +
                "            case  \n" +
                "                when dig3=1 then set ans=concat(ans, 'one hundred');  \n" +
                "                when dig3=2 then set ans=concat(ans, 'two hundred');  \n" +
                "                when dig3=3 then set ans=concat(ans, 'three hundred');  \n" +
                "                when dig3=4 then set ans=concat(ans, 'four hundred');  \n" +
                "                when dig3=5 then set ans=concat(ans, 'five hundred');  \n" +
                "                when dig3=6 then set ans=concat(ans, 'six hundred');  \n" +
                "                when dig3=7 then set ans=concat(ans, 'seven hundred');  \n" +
                "                when dig3=8 then set ans=concat(ans, 'eight hundred');  \n" +
                "                when dig3=9 then set ans=concat(ans, 'nine hundred');  \n" +
                "                else set ans = ans;  \n" +
                "            end case;  \n" +
                "        end if;  \n" +
                "        if dig2 = 1 then  \n" +
                "            case  \n" +
                "                when (dig2*10 + dig1) = 10 then set ans=concat(ans,' ten');  \n" +
                "                when (dig2*10 + dig1) = 11 then set ans=concat(ans,' eleven');  \n" +
                "                when (dig2*10 + dig1) = 12 then set ans=concat(ans,' twelve');  \n" +
                "                when (dig2*10 + dig1) = 13 then set ans=concat(ans,' thirteen');  \n" +
                "                when (dig2*10 + dig1) = 14 then set ans=concat(ans,' fourteen');  \n" +
                "                when (dig2*10 + dig1) = 15 then set ans=concat(ans,' fifteen');  \n" +
                "                when (dig2*10 + dig1) = 16 then set ans=concat(ans,' sixteen');  \n" +
                "                when (dig2*10 + dig1) = 17 then set ans=concat(ans,' seventeen');  \n" +
                "                when (dig2*10 + dig1) = 18 then set ans=concat(ans,' eighteen');  \n" +
                "                when (dig2*10 + dig1) = 19 then set ans=concat(ans,' nineteen');  \n" +
                "                else set ans=ans;  \n" +
                "            end case;  \n" +
                "        else  \n" +
                "            if dig2 > 0 then  \n" +
                "                case  \n" +
                "                    when dig2=2 then set ans=concat(ans, ' twenty');  \n" +
                "                    when dig2=3 then set ans=concat(ans, ' thirty');  \n" +
                "                    when dig2=4 then set ans=concat(ans, ' fourty');  \n" +
                "                    when dig2=5 then set ans=concat(ans, ' fifty');  \n" +
                "                    when dig2=6 then set ans=concat(ans, ' sixty');  \n" +
                "                    when dig2=7 then set ans=concat(ans, ' seventy');  \n" +
                "                    when dig2=8 then set ans=concat(ans, ' eighty');  \n" +
                "                    when dig2=9 then set ans=concat(ans, ' ninety');  \n" +
                "                    else set ans=ans;  \n" +
                "                end case;  \n" +
                "            end if;  \n" +
                "            if dig1 >= 0 then  \n" +
                "                case  \n" +
                "					when dig1=0 then set ans=concat(ans, ' zero');  \n" +
                "                    when dig1=1 then set ans=concat(ans, ' one');  \n" +
                "                    when dig1=2 then set ans=concat(ans, ' two');  \n" +
                "                    when dig1=3 then set ans=concat(ans, ' three');  \n" +
                "                    when dig1=4 then set ans=concat(ans, ' four');  \n" +
                "                    when dig1=5 then set ans=concat(ans, ' five');  \n" +
                "                    when dig1=6 then set ans=concat(ans, ' six');  \n" +
                "                    when dig1=7 then set ans=concat(ans, ' seven');  \n" +
                "                    when dig1=8 then set ans=concat(ans, ' eight');  \n" +
                "                    when dig1=9 then set ans=concat(ans, ' nine');  \n" +
                "                    else set ans=ans;  \n" +
                "                end case;  \n" +
                "            end if;  \n" +
                "        end if;  \n" +
                "        return trim(ans);  \n" +
                "    END;  \n" +
                "drop function if exists `fun_NumberToWords`;  \n" +
                "CREATE FUNCTION `fun_NumberToWords`(pNumber decimal(20,2)) RETURNS varchar(1024) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	Declare vtemp varchar(12);    \n" +
                "	Declare vtemp1 varchar(2);   \n" +
                "	Declare vRetval varchar(500);    \n" +
                "    declare vIntTemp int;  \n" +
                "    Declare vResultCent varchar(50);  \n" +
                "    Declare vResultAmount varchar(500);  \n" +
                "BEGIN    \n" +
                "	set vtemp1 = SUBSTRING(CONVERT(((pNumber - floor(pNumber))*100), char),1,2);    \n" +
                "	set vtemp =  concat(repeat('0',12-length(convert(floor(pNumber), char))) , convert(floor(pNumber), char));    \n" +
                "  \n" +
                "    set vtemp1 = replace(ifnull(vtemp1,''),'.','');    \n" +
                "    set vtemp1 =  concat(repeat('0',2-length(vtemp1)), vtemp1);    \n" +
                "    set vResultCent = ifnull(vtemp1,'');    \n" +
                "  \n" +
                "	set vResultAmount = number_to_string(SUBSTRING(vtemp,10,3));  \n" +
                "  \n" +
                "    set vIntTemp = CONVERT(SUBSTRING(vtemp,7,3), UNSIGNED INTEGER);  \n" +
                "    if vIntTemp > 0 then  \n" +
                "		set vResultAmount = concat(number_to_string(SUBSTRING(vtemp,7,3)), ' thousand ', vResultAmount);  \n" +
                "	end if;  \n" +
                "  \n" +
                "	set vIntTemp = CONVERT(SUBSTRING(vtemp,4,3), UNSIGNED INTEGER);  \n" +
                "	if vIntTemp > 0 then  \n" +
                "		set vResultAmount = concat(number_to_string(SUBSTRING(vtemp,4,3)), ' million ', vResultAmount);  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vIntTemp = CONVERT(SUBSTRING(vtemp,1,3), UNSIGNED INTEGER);  \n" +
                "	if vIntTemp > 0 then  \n" +
                "		set vResultAmount = concat(number_to_string(SUBSTRING(vtemp,1,3)), ' billion ', vResultAmount);  \n" +
                "	end if;  \n" +
                "  \n" +
                "	set vRetval = ltrim(concat(ifnull(vResultAmount,''), ' AND '));  \n" +
                "  \n" +
                "    set vRetval = CONCAT(UCASE(LEFT(vRetval, 1)),  \n" +
                "						 LCASE(SUBSTRING(vRetval, 2)));  \n" +
                "  \n" +
                "    set vRetval = concat(vRetval, ifnull(vResultCent,''),'/100', ' USD');  \n" +
                "	return vRetval;    \n" +
                "	END;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (614,'1.00','V1','Bug 28100: Convert Amount to Words need to format as per United States standards use millions instead of lakh - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 614:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2020  *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(      \n" +
                "	IN pPaymentID text(11)      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,       \n" +
                "				pip.paymentAmount,     \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,      \n" +
                "				pip.payToAddress,    \n" +
                "				ca.companyName supplierName,      \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) supplierAddress,      \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip      \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1        \n" +
                "          join genericcategory g ON g.categoryType = 'Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0      \n" +
                "		   and pip.id = pPaymentID;      \n" +
                "  \n" +
                "		  SELECT p.refPayementid id,      \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							p.creditMemoNumber      \n" +
                "						ELSE      \n" +
                "							p.debitMemoNumber      \n" +
                "					END) invoiceNumber,      \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "				else      \n" +
                "					(SELECT 	ps.invoiceNumber                 \n" +
                "					FROM 	packing_slip_material_receive ps                 \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno                \n" +
                "							AND ps.isDeleted = 0  )      \n" +
                "				end      \n" +
                "				) refInvoiceNumber,      \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceDate      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							p.creditMemoDate      \n" +
                "						ELSE      \n" +
                "							p.debitMemoDate      \n" +
                "					END) invoiceDate,      \n" +
                "  \n" +
                "				null `description`,      \n" +
                "				(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,      \n" +
                "				0 discount,      \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							'Invoice'      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							'Credit Memo'      \n" +
                "						ELSE      \n" +
                "							'Debit Memo'      \n" +
                "					END) receiptMemoType      \n" +
                "			FROM packing_slip_material_receive p      \n" +
                "			WHERE p.isDeleted =0      \n" +
                "			and p.receiptType in ('I','C','D')      \n" +
                "			and p.`status` = 'P'      \n" +
                "			 and p.refPayementid = pPaymentID;      \n" +
                "  \n" +
                "		SELECT concat(cua.street1,',  \n" +
                "',cua.city,', ',cua.state,' ',cua.postcode,'  \n" +
                "',c.countryName) AS address,    \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,                        \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, cu.mfgName companyName      \n" +
                "		FROM customer_addresses cua                                \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                                \n" +
                "        join countrymst c ON c.countryID = cua.countryID    \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;            \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                                                  \n" +
                "	IN pPageIndex INT,                                                  \n" +
                "	IN pRecordPerPage INT,                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                      \n" +
                "	IN pReceiptType VARCHAR(10),                \n" +
                "    IN pMfgCodeIds LONGTEXT,                \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,                \n" +
                "    IN pDueDate DATE,                \n" +
                "    IN pAdditionalDays INT,                \n" +
                "    IN pTermsAndAboveDays INT,                \n" +
                "    IN pInvoiceNumber VARCHAR(50)                \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "	DECLARE pOffset INT;                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                              \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                               \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                        \n" +
                "			SELECT 		p.id,                    \n" +
                "					p.poNumber,                    \n" +
                "					p.mfgCodeID,                    \n" +
                "					p.supplierSONumber,          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                    \n" +
                "					p.packingSlipDate,                    \n" +
                "					p.invoiceNumber,                    \n" +
                "					p.invoiceDate,                    \n" +
                "					p.creditMemoNumber,                    \n" +
                "					p.creditMemoDate,                    \n" +
                "					p.debitMemoNumber,                    \n" +
                "					p.debitMemoDate,                    \n" +
                "					p.receiptDate,                    \n" +
                "					p.description,                    \n" +
                "					p.billToAddress,                    \n" +
                "					p.shipToAddress,                    \n" +
                "					p.poVersion,                    \n" +
                "					p.isDeleted,                    \n" +
                "					p.receiptType,                    \n" +
                "					p.`status`,                    \n" +
                "					pinv.paymentNumber chequeNumber,                    \n" +
                "					pinv.paymentDate chequeDate,                    \n" +
                "					pinv.paymentAmount chequeAmount,                 \n" +
                "					pinv.bankAccountNo,              \n" +
                "					pinv.bankAccountMasID,              \n" +
                "					pinv.accountReference,              \n" +
                "					gp.gencCategoryName paymentTypeName,  \n" +
                "                    gp.systemGenerated paymentTypeSystemGenerated,  \n" +
                "					pinv.paymentType,            \n" +
                "					p.applyDate,                    \n" +
                "					p.refParentCreditDebitInvoiceno,                    \n" +
                "					p.refPackingSlipNumberForInvoice,                    \n" +
                "					p.invoiceTotalDue,                    \n" +
                "					p.isTariffInvoice,                    \n" +
                "					pinv.bankName,              									                                       \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                 \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                      \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                      \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                               \n" +
                "					m.mfgCode supplierCode,    \n" +
                "					(                        \n" +
                "						SELECT COUNT(1)                         \n" +
                "						  FROM genericfiles g                         \n" +
                "						 WHERE g.refTransID = p.id                         \n" +
                "						   and g.entityID = -13                \n" +
                "						   AND g.gencFileOwnerType = 'supplier_invoice'                         \n" +
                "						   AND g.isDeleted =0                \n" +
                "					) invoiceDocCount,                        \n" +
                "					(                        \n" +
                "						SELECT COUNT(1)                         \n" +
                "						 FROM genericfiles g                         \n" +
                "						WHERE g.refTransID = psm.id                         \n" +
                "						  and g.entityID = -14                \n" +
                "						  AND g.gencFileOwnerType = 'packing_slip'                         \n" +
                "						  AND g.isDeleted =0                \n" +
                "					) packingSlipDocCount,      \n" +
                "					pd.itemReceived,        \n" +
                "					pd.otherChargesItemReceived,              \n" +
                "					pd.itemDisapproved,                \n" +
                "					(                        \n" +
                "						CASE 	WHEN p.`receiptType` = 'I' THEN                         \n" +
                "								'Invoice'                         \n" +
                "							WHEN p.`receiptType` = 'C' THEN                         \n" +
                "								'Credit Memo'                         \n" +
                "							ELSE                         \n" +
                "								'Debit Memo'                         \n" +
                "						END                        \n" +
                "					) receiptMemoType,      									                                  \n" +
                "					(                        \n" +
                "						CASE 	WHEN p.`status` = 'PE' THEN                         \n" +
                "								'Pending'                         \n" +
                "							WHEN p.`status` = 'I' THEN                         \n" +
                "								'Investigate'                         \n" +
                "							WHEN p.`status` = 'A' THEN                         \n" +
                "								'Approved to Pay'                         \n" +
                "							ELSE                         \n" +
                "								'Paid'                         \n" +
                "						END                        \n" +
                "					) invoiceVerificationStatus,                                        \n" +
                "					ps.invoiceNumber refInvoiceNumber,                            \n" +
                "					pd.totalExtendedAmount,                \n" +
                "					pe.totalCreditAmount,                \n" +
                "					pe.totalDebitAmount,                \n" +
                "					(                \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                \n" +
                "					) amountToPay,                \n" +
                "					pd.packingDetailNote,    \n" +
                "					pd.approveLineCount,    \n" +
                "					DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),    \n" +
                "					INTERVAL IFNULL((max(p.termsDays) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,    \n" +
                "					p.refPayementid,    \n" +
                "					max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,    \n" +
                "					max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,    \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,    \n" +
                "					psm.packingSlipModeStatus    \n" +
                "			FROM		packing_slip_material_receive p    \n" +
                "            inner join mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "			LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                \n" +
                "			LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id      \n" +
                "		\");              \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"                \n" +
                "				left join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0                \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'             \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'            \n" +
                "				left join (      \n" +
                "							select 	a.refPackingSlipMaterialRecID,                \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                \n" +
                "								sum(a.itemReceived) itemReceived,      \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                \n" +
                "								sum(a.approveLineCount) approveLineCount,                \n" +
                "								sum(a.extendedPrice) totalExtendedAmount                \n" +
                "							from 	(      \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,       \n" +
                "										psm.packingSlipSerialNumber,       \n" +
                "										psm.approveNote,                \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,      \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,      \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                \n" +
                "										extendedPrice                \n" +
                "									FROM 	packing_slip_material_receive_det psm                \n" +
                "									WHERE 	psm.isDeleted = 0      \n" +
                "								) a                \n" +
                "							group by a.refPackingSlipMaterialRecID      \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                \n" +
                "				left join (      \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                 \n" +
                "									sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                \n" +
                "									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount                \n" +
                "							from 		packing_slip_material_receive ps                \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                \n" +
                "										and ps.isDeleted = 0                \n" +
                "										and pd.isDeleted = 0                \n" +
                "										and ps.receiptType in ('C','D')                \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno      \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                \n" +
                "				WHERE 	p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')                \n" +
                "	\");                \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                \n" +
                "	ELSE                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                  \n" +
                "	END IF;	                                          \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \"                \n" +
                "								AND (       \n" +
                "										c.supplierSONumber = '\", pInvoiceNumber, \"'                \n" +
                "									OR 	c.poNumber = '\", pInvoiceNumber, \"'                \n" +
                "									OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                \n" +
                "									OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                \n" +
                "									OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"                \n" +
                "								  \" ) \"      \n" +
                "					);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                   \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "	ELSE	                                                  \n" +
                "		SET rowNumWhere = '';                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                  \n" +
                "	EXECUTE query1;                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"       \n" +
                "			SELECT 	c.*,       \n" +
                "				case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed                \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c       \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                  \n" +
                "	EXECUTE query2;                                                  \n" +
                "	DEALLOCATE PREPARE query2;                                                 \n" +
                "    #select @SQLStatement2;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (615,'1.00','V1','Bug 28094: Issues with the supplier invoice report - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 615:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2020  *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(      \n" +
                "	IN pPaymentID text(11)      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,       \n" +
                "				pip.paymentAmount,     \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,      \n" +
                "				pip.payToAddress,    \n" +
                "				ca.companyName supplierName,      \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) supplierAddress,      \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip      \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1        \n" +
                "          join genericcategory g ON g.categoryType = 'Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0      \n" +
                "		   and pip.id = pPaymentID;      \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,      \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							p.creditMemoNumber      \n" +
                "						ELSE      \n" +
                "							p.debitMemoNumber      \n" +
                "					END) invoiceNumber,      \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "				else      \n" +
                "					(SELECT 	ps.invoiceNumber                 \n" +
                "					FROM 	packing_slip_material_receive ps                 \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno                \n" +
                "							AND ps.isDeleted = 0  )      \n" +
                "				end      \n" +
                "				) refInvoiceNumber,      \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceDate      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							p.creditMemoDate      \n" +
                "						ELSE      \n" +
                "							p.debitMemoDate      \n" +
                "					END) invoiceDate,      \n" +
                "  \n" +
                "				null `description`,      \n" +
                "				(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,      \n" +
                "				0 discount,      \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							'Invoice'      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							'Credit Memo'      \n" +
                "						ELSE      \n" +
                "							'Debit Memo'      \n" +
                "					END) receiptMemoType      \n" +
                "			FROM packing_slip_material_receive p      \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE p.isDeleted =0      \n" +
                "			and p.receiptType in ('I','C','D')  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID;      \n" +
                "  \n" +
                "		SELECT concat(cua.street1,',  \n" +
                "',cua.city,', ',cua.state,' ',cua.postcode,'  \n" +
                "',c.countryName) AS address,    \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,                        \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, cu.mfgName companyName      \n" +
                "		FROM customer_addresses cua                                \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                                \n" +
                "        join countrymst c ON c.countryID = cua.countryID    \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (616,'1.00','V1','Task 28148: Remove Payment Method and Pay By from Check Print Report - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 616:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(                                                                              \n" +
                "	IN ppageIndex INT,                                                                              \n" +
                "	IN precordPerPage INT,                                                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                  \n" +
                "    IN pSupplierIDs VARCHAR(16383),                  \n" +
                "    IN pPaymentMethodIDs VARCHAR(16383),                  \n" +
                "    IN pBankAccountCodeIDs VARCHAR(16383),                  \n" +
                "	IN pPaymentNumber VARCHAR(10),                   \n" +
                "	IN pInvoiceNumber VARCHAR(50),                   \n" +
                "	IN pAmount DECIMAL(18,8),                       \n" +
                "	IN pFromDate DATE,                                \n" +
                "	IN pToDate DATE                       \n" +
                ")  \n" +
                "BEGIN                                                                              \n" +
                "	DECLARE pOffset INT;                                                                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                              \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                            \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);                            \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                             \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';                  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                        \n" +
                "  		SET pWhereClause = '1=1' ;                        \n" +
                "	END IF;                           \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN                                                                                                                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');                                                         \n" +
                "	END IF;	                   \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                         \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                         \n" +
                "	END IF;	              \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber = ',pPaymentNumber,' ');                                                         \n" +
                "	END IF;	                   \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                                    \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND        \n" +
                "             EXISTS(        \n" +
                "					SELECT  1 FROM packing_slip_material_receive psd        \n" +
                "					where psd.refPayementid = inv.id AND         \n" +
                "                    psd.isDeleted=0 AND psd.invoiceNumber = \"',pInvoiceNumber,'\" )');                                                               \n" +
                "	END IF;	                   \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount = ',pAmount,' ');                                                         \n" +
                "	END IF;	                       \n" +
                "  \n" +
                "    IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                              \n" +
                "    ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                        \n" +
                "    ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                        \n" +
                "    END IF;                       \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"              			                                      \n" +
                "            SELECT 						                                \n" +
                "				inv.id,                                            \n" +
                "                inv.mfgcodeID,                        \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,           \n" +
                "                inv.isPaymentVoided,      \n" +
                "                case when inv.isPaymentVoided = 0 then      \n" +
                "					'Paid'      \n" +
                "                    else 'Voided' end isPaymentVoidedConvertedValue,      \n" +
                "				inv.voidPaymentReason,      \n" +
                "                inv.refVoidedPaymentNumber,      \n" +
                "                inv.paymentNumber,                        \n" +
                "                inv.bankName,                        \n" +
                "                inv.bankAccountNo,                        \n" +
                "                inv.paymentType,                        \n" +
                "                inv.bankAccountMasID,                        \n" +
                "                gc.gencCategoryName paymentMethod,                  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                  \n" +
                "				inv.paymentDate,                  \n" +
                "                invdet.invoiceAmount,                  \n" +
                "                inv.paymentAmount,                  \n" +
                "				inv.payToAddress payToAddress,                                 \n" +
                "                inv.accountReference,                  \n" +
                "                inv.remark,                  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,                                              \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,                              \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                              \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,                         \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole                         \n" +
                "			FROM                                \n" +
                "				packingslip_invoice_payment inv                   \n" +
                "			INNER JOIN genericcategory gc ON inv.paymentType = gc.gencCategoryID       \n" +
                "            INNER JOIN (   \n" +
                "				SELECT pid.refPayementid,SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "				FROM packingslip_invoice_payment_det pid  \n" +
                "				INNER JOIN packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID   \n" +
                "				WHERE pid.isDeleted = 0 AND psmd.isDeleted = 0  \n" +
                "				GROUP BY pid.refPayementid   \n" +
                "            ) invdet ON invdet.refPayementid = inv.id   \n" +
                "            WHERE                   \n" +
                "				inv.isDeleted = 0 AND                   \n" +
                "                gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause);                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                              \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";                                                                              \n" +
                "	ELSE                                                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                              \n" +
                "	END IF;	                                                            		                  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                              \n" +
                "	ELSE	                                                                              \n" +
                "		SET rowNumWhere = '';                                                                              \n" +
                "	END IF;	                                                                               \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                           \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                							  \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                          \n" +
                "	EXECUTE query1;                                                          \n" +
                "	DEALLOCATE PREPARE query1;                                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                     \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                          \n" +
                "	EXECUTE query2;                                                          \n" +
                "	DEALLOCATE PREPARE query2;                                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-12-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (617,'1.00','V1',' Bug 28074: Filter validations on the payment history page- Dharmesh P'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 617:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sys_DB_AddColumnIfNotExists` ;  \n" +
                "CREATE PROCEDURE `Sys_DB_AddColumnIfNotExists`(                               \n" +
                "	IN ptblName VARCHAR(5000),                     \n" +
                "	IN pcolumnName VARCHAR(5000),                     \n" +
                "	IN pcolumnDataType VARCHAR(5000),  \n" +
                "	IN padditionalDetails VARCHAR(5000)                 \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE dbName VARCHAR(1000);                \n" +
                "	SELECT DATABASE() INTO dbName;  \n" +
                "  \n" +
                "	IF NOT EXISTS( SELECT NULL  \n" +
                "            FROM INFORMATION_SCHEMA.COLUMNS  \n" +
                "           WHERE table_name = ptblName  \n" +
                "             AND table_schema = dbName  \n" +
                "             AND column_name = pcolumnName)  THEN  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\"ALTER TABLE \", ptblName,\" ADD \", pcolumnName, \" \", pcolumnDataType, \" \", padditionalDetails, \";\");           \n" +
                "		PREPARE query1 FROM @SQLStatement1;                \n" +
                "		EXECUTE query1;                \n" +
                "		DEALLOCATE PREPARE query1;          	  \n" +
                "  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-12-2020  *********************************** */
                "CALL Sys_DB_AddColumnIfNotExists('kit_allocation', 'allocationRemark', 'LONGTEXT', 'AFTER Remark');  \n" +
                /* **************************** New Script -> 03-12-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (618,'1.00','V1','Created New DBScript for Add new Column if not exists- Vaibhav'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 618:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCreditDebitMemoDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getCreditDebitMemoDetails`(    \n" +
                "	IN pInvoiceID INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_InvoiceAmount DECIMAL(18,8);  \n" +
                "	DECLARE v_StringOfIds VARCHAR(10000);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempInvoiceDet;    \n" +
                "	CREATE TEMPORARY TABLE tempInvoiceDet AS    \n" +
                "	SELECT 	id, refPackingSlipMaterialRecID, extendedPrice,refCreditDebitInvoiceNo, refPackingSlipDetId    \n" +
                "	FROM 	packing_slip_material_receive_det    \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pInvoiceID    \n" +
                "			AND isDeleted = 0;    \n" +
                "  \n" +
                "	SELECT SUM(extendedPrice), GROUP_CONCAT(refCreditDebitInvoiceNo) INTO v_InvoiceAmount, v_StringOfIds FROM tempInvoiceDet;    \n" +
                "  \n" +
                "	SELECT 		SUM(CASE WHEN p.receiptType = 'D' THEN psd.extendedPrice ELSE 0 END) debitMemoAmount,     \n" +
                "			SUM(CASE WHEN p.receiptType = 'C' THEN psd.extendedPrice ELSE 0 END) creditMemoAmount,    \n" +
                "			v_InvoiceAmount invoiceAmount    \n" +
                "	FROM 		packing_slip_material_receive_det psd    \n" +
                "	INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND p.isDeleted = 0    \n" +
                "	WHERE 		FIND_IN_SET(p.id, v_StringOfIds)  \n" +
                "				AND psd.isDeleted = 0;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (619,'1.00','V1','Invoice Flow Changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 619:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2020  *********************************** */
                "UPDATE datecodeformatmst SET isDeleted = 0 WHERE isDeleted IS NULL;  \n" +
                /* **************************** Add Script Version -> 10-12-2020 *********************************** */
                "ALTER TABLE dateCodeFormatMst MODIFY COLUMN isDeleted TINYINT(1) NOT NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 10-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (620,'1.00','V1','Invoice Flow Changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 620:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                                              \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                                              \n" +
                "    IN puserID VARCHAR(50),                                                                                                                        \n" +
                "    IN pnickName VARCHAR(20),                                                                                                                                        \n" +
                "    IN pprefix VARCHAR(20),                                                                                                                                        \n" +
                "    IN puid VARCHAR(20),                                                                                                                                    \n" +
                "    IN pComponentID INT,                                                                                                                                \n" +
                "    IN pCustomerID INT,                                                                                                                                \n" +
                "    IN pCPN BOOL,                                                                                                                                \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                                                \n" +
                "    IN pRefCpnMfgID INT,                                                                                                                            \n" +
                "    IN pAssyID INT,                                                                                                                            \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                                            \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                                                  \n" +
                "    IN pkitAssemblyID INT,                                                                                                            \n" +
                "    IN pBarcodeID INT,                                                            \n" +
                "    IN pBOMLineID INT,                  \n" +
                "    IN pSupplierID INT, 	                                                                                                                           \n" +
                "    IN pCategory VARCHAR(2),                                                                                                                           \n" +
                "    IN pInventoryType VARCHAR(2)                                                                                                                           \n" +
                ")  \n" +
                "BEGIN                                                                                                                                              \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                                              \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                                              \n" +
                "	DECLARE v_length INT;                                                                                                                                               \n" +
                "	DECLARE v_fieldType INT;                                                                                                                                                   \n" +
                "	DECLARE v_entityId INT;                                                                                                                                              \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                                              \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                                              \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                                              \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                                              \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                                              \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                                                        \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                                                        \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                                              \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                                              \n" +
                "	DECLARE plen,slen INT;                                                                                                                                              \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                                              \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                                                          \n" +
                "	DECLARE barcode_type_id INT;                                                                                                                                    \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                                                \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                                                 \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                                                \n" +
                "	DECLARE v_SupplierID INT;                                                                                                            \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                                              \n" +
                "	DECLARE v_barcode_id INT;                                                                                                            \n" +
                "	DECLARE v_barcode_count INT;                                                                                                            \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                                             \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                                                       \n" +
                "	DECLARE v_componentCount INT;                                                                                    \n" +
                "	DECLARE v_componentId INT;                                                                                          \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                                                    \n" +
                "	DECLARE v_partMFG INT;                                                                                        \n" +
                "	DECLARE v_isGoodPart TINYINT;                                                                                    \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;                                                                                    \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;                                                                                    \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;                                                                              \n" +
                "	DECLARE v_isInstall TINYINT;                                                                               \n" +
                "	DECLARE v_isBOMLineClean TINYINT;                                                                            \n" +
                "	DECLARE v_BOMLineId INT;                                                                          \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;                                                                          \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;                                                                          \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                                                          \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                                                       \n" +
                "	DECLARE v_isPurchase TINYINT;                                                                    \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                                               \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                                            \n" +
                "	DECLARE v_BOMLineCount INT;                                                             \n" +
                "	DECLARE v_AlternateLineId INT;                                                           \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                                                          \n" +
                "	DECLARE v_BOMAssyId INT;                                                          \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                                                          \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;                                                  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;                                                  \n" +
                "	DECLARE v_isCPNFlag TINYINT;                                     \n" +
                "	DECLARE v_dateCodeFormatID INT;                                       \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);                                          \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);                   \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;                  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;                  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);                \n" +
                "	DECLARE v_barcode_status INT;                \n" +
                "	DECLARE v_category INT;                \n" +
                "	DECLARE v_partType INT;    \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;	                  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                                               \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                                              \n" +
                "	(                                                                                                                                              \n" +
                "		errorText LONGTEXT,                                                                                                                                              \n" +
                "		IsSuccess VARCHAR (2),                                                                                                                                    \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                                                   \n" +
                "	);              \n" +
                "  \n" +
                "	IF (pCategory = 'P') THEN              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;                                                                                                                                               \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive              \n" +
                "		(                       \n" +
                "			scanlabel VARCHAR(1000),              \n" +
                "			poNumber VARCHAR(50),                                                                                                                                              \n" +
                "			supplierSONumber VARCHAR(50),        \n" +
                "			packingSlipNumber VARCHAR(50),        \n" +
                "			invoiceNumber VARCHAR(50)        \n" +
                "		);              \n" +
                "	ELSE               \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                                               \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                                              \n" +
                "		(                                                                                                                                              \n" +
                "			refcompid INT,                                                                                                                                              \n" +
                "			pkgQty DECIMAL(18,6),                                                                                                          \n" +
                "			dateCode VARCHAR(10),                                                                                                          \n" +
                "			lotCode VARCHAR(255),                                                                                                          \n" +
                "			scanlabel VARCHAR(1000),                                                                                                          \n" +
                "			createdBy VARCHAR(255),                                                                                                          \n" +
                "			uid VARCHAR(14),                                                                                                          \n" +
                "			prefix VARCHAR(20),                                                                                                          \n" +
                "			nickName VARCHAR(50),                                                                                                          \n" +
                "			cpn TINYINT,                                                                                                          \n" +
                "			mfgAvailabel TINYINT,                                                                                                          \n" +
                "			refCPNMFGPNID INT,                                                                                                          \n" +
                "			customerID INT,                                                                                                          \n" +
                "			assyID INT,                                                                                                          \n" +
                "			salesOrderDetailID INT,                                                                                                          \n" +
                "			receiveMaterialType VARCHAR(255),                                                                                                          \n" +
                "			refSupplierPartId INT,                                  \n" +
                "			mfrDateCode VARCHAR(50),        \n" +
                "			poNumber VARCHAR(50),                                                                                                                                              \n" +
                "			supplierSONumber VARCHAR(50),        \n" +
                "			packingSlipNumber VARCHAR(50),        \n" +
                "			invoiceNumber VARCHAR(50),    \n" +
                "			binName VARCHAR(100),    \n" +
                "			packaging VARCHAR(100),    \n" +
                "			packingSlipDetailNickname VARCHAR(50)    \n" +
                "		);                                                                                                            \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                                               \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                                              \n" +
                "		(                                                                                                                                              \n" +
                "			entityid INT,                                                                                                          \n" +
                "			dataelementid INT,                                                                                                          \n" +
                "			`value` LONGTEXT,                                                                                                          \n" +
                "			createdBy VARCHAR(255)                                                                                                          \n" +
                "		);                                                                                                                             \n" +
                "    END IF;                  \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator                                                                                             \n" +
                "	# return error code                                                                                          \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                                                          \n" +
                "	# 0: Barcode template does not exist, Please add template                                                                                          \n" +
                "	# 1: Validation Clear                                                                                          \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                                                          \n" +
                "	# 3: Mfgcode is not found                                                                                          \n" +
                "	# 4: MFG PN does not exist                                                                                          \n" +
                "	# 5: Multiple MFG PN found                                                                                          \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                                                          \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                                                          \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                                                          \n" +
                "	# 9:  Multiple barcode template found.                                                                                          \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                                                          \n" +
                "	# 11: MFG PN is incorrect part                                                                                        \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                                                      \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                                                 \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                                                \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                                            \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                                                          \n" +
                "	# 17: PID is contain more than 1 BOM line.                                                     \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                                                  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                        \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.                                     \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.                                                                              \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.      \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other        \n" +
                "  \n" +
                "	block1: BEGIN         \n" +
                "		-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter      \n" +
                "		-- SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");      \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                                            \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status               \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND              \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                           \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                                               \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN                \n" +
                "				IF (v_barcode_count > 1) THEN                                                                                                            \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                                                                                                                                \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                           \n" +
                "					-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                                              \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                                               \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                                              \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                 \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                   \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                            \n" +
                "				ELSE                                                                                               \n" +
                "					/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE isDeleted = 0 AND `status`=1 AND                                                                                                                                              \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                                            \n" +
                "					(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                                            \n" +
                "					SET pBarcodeID = v_barcode_id;                                                                                                            \n" +
                "				END IF;                 \n" +
                "			END IF;                                                                                                           \n" +
                "		ELSE                                                                                                             \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;                                                                                                            \n" +
                "		END IF;                                                                                   \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN               \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                                                       \n" +
                "			(                                                                                                                      \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.isDeleted = 0                                                                                                                     \n" +
                "				UNION                                                                                                                      \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                                                       \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.isDeleted = 0 AND c.isDeleted = 0                                                                                                                     \n" +
                "			) a;                                              \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                                                        \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);         \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name               \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                                                                                              \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                                            \n" +
                "				SET pBarcodeID = v_barcode_id;                                                    \n" +
                "			/*END IF;  */                                        \n" +
                "		END IF;                                                                                                             \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                                                      \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                                              \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                                            \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;                                                                                                            \n" +
                "			SET v_BarcodeType = '2D';                                                                                                                                    \n" +
                "		ELSE /* barcode 1D */                                             \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                                             \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;                                           \n" +
                "			SET v_BarcodeType = '1D';                                                                                                                                 \n" +
                "		END IF;                                                                                             \n" +
                "	END block1;                                                \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                            \n" +
                "		block2: BEGIN                            \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                                              \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                                              \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                                                           \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;                                                                                                                                       \n" +
                "			-- declare exit loop if data not found                                                                                                                                              \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                                              \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                                                         \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                                              \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                                              \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                                              \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                                              \n" +
                "					pentityId INT,                                                                                                                                              \n" +
                "					pdataElementId INT,                                                                                                                                              \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                                              \n" +
                "				);                                                                                                                                         \n" +
                "				-- create temporary table for separator string values                                                                                                                                              \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                                              \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                                                    \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                                              \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength               \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;                                                                                                                                   \n" +
                "				-- open cursor                                                                                                                                              \n" +
                "				OPEN barcodeMatch_cursor;     \n" +
                "				-- set str label as whereclause                                                                                                                                            \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter      \n" +
                "				-- SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                                                                                                                                              \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");        \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                                              \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                                              \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                                                      \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                                              \n" +
                "				 END IF;                                                                                                                                             \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                                               \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                                              \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                                              \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                                              \n" +
                "				 END IF;	                                                                      \n" +
                "				-- insert all values after seprator split                                                                                                                    \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                                    				      \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                                              \n" +
                "				EXECUTE stmt1;                         \n" +
                "				DEALLOCATE PREPARE stmt1;        \n" +
                "				IF (pCategory = 'P') THEN              \n" +
                "					-- create dynamic query to insert in packing slip                                                                                                                                              \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';                              \n" +
                "				ELSE               \n" +
                "					-- create dynamic query to insert in recieving material                                                                                                                                              \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                              \n" +
                "				END IF;              \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                                              \n" +
                "				barcodeMatch_loop:LOOP                                                                                                                           \n" +
                "					-- get all five selected values                                                                                                                                              \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                                                      \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                                              \n" +
                "					IF exit_loop THEN                                                                            \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                                              \n" +
                "					END IF;                                                                                                                                         \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                                              \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');            \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                                              \n" +
                "					EXECUTE stmtdelimiter;                              \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;               \n" +
                "  \n" +
                "					-- get delimiter values from string                                                                                                                                              \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                                                      \n" +
                "					-- check for field type is static or dynamic                                                                                                                                              \n" +
                "					-- if static field than check for mfg code and mfg part number                        										            \n" +
                "					IF v_fieldType = 0  THEN              \n" +
                "						-- component_sid_stock                                                                                                                                               \n" +
                "						-- get static field name from barcode table delimiter data element id                          \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);                                                                                                 \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                                              \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                  \n" +
                "							SET MFG_Part_No = delimiter_value_data;     \n" +
                "							IF(pComponentID = 0)THEN                                                                                   \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                                                   \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                          \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM                                                                                                                       \n" +
                "								(                                                                                                                      \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                     \n" +
                "									FROM 	component c                                                                                     \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0                                                                                                                      \n" +
                "									UNION                                                                                                                      \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                     \n" +
                "									FROM 		component_otherpn co                                                                                     \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0                                                                                                                   \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND c.isGoodPart = 1 AND co.isDeleted = 0	                    \n" +
                "								) a                    \n" +
                "								UNION                    \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM                                                                                                                       \n" +
                "								(                                                                                                                      \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                  \n" +
                "									FROM 	component c                                                                                     \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.isDeleted = 0                                                                                                                   \n" +
                "									UNION                                                                                                                      \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                  \n" +
                "									FROM 		component_otherpn co                                                                                     \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                                       \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.isDeleted = 0 AND c.isDeleted = 0	                    \n" +
                "								) a                    \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;                    \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN																	                  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID                   \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;                  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail; 				                  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  		                  \n" +
                "								   ELSE								                     \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;   								                      \n" +
                "								END IF;					                  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN                                                                                  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                                                   \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                                                  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;                                                                                  \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                                                  \n" +
                "									IF (v_componentCount < 2) THEN                                                                                  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                                           \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                                                    \n" +
                "										FROM 	temp_component_supplier_detail;                                                                                  \n" +
                "									END IF;                                                                                  \n" +
                "								ELSE                                                                                   \n" +
                "									IF (pSupplierID IS NULL) THEN	                  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType                                                                           \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType                                                                                   \n" +
                "										FROM 	temp_component_detail;                  \n" +
                "									ELSE 	                  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN                  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;                  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN                  \n" +
                "											SET v_componentCount=0;                  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;                  \n" +
                "										ELSE                  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission          \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission          \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);                  \n" +
                "										END IF;                  \n" +
                "									END IF;                                                                       \n" +
                "								END IF;                                                                                                                                                        \n" +
                "							ELSE                                                                                                                          \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType          \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType          \n" +
                "								FROM 	component                                                                                     \n" +
                "								WHERE 	id = pComponentID AND isDeleted = 0;                                                                                                                                    \n" +
                "							END IF;                                                                                            \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                            \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                                    \n" +
                "							END IF;                                                                                  \n" +
                "  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN           \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                                    \n" +
                "							END IF;          \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                  \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "								LEAVE barcodeMatch_loop;                                                                                             \n" +
                "							END IF;                                                                                          \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1) THEN                     \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "								LEAVE barcodeMatch_loop;                                                                                        \n" +
                "							END IF;                                                                          \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1) THEN                   \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "								LEAVE barcodeMatch_loop;                                                                                        \n" +
                "							END IF;                                                                                        \n" +
                "  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                                                \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                   \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                  \n" +
                "							END IF;                                                                                                                \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                                                                                                \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                                                \n" +
                "								SET v_SupplierID = v_componentId;                                                                                                                \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                                                \n" +
                "							END IF;                                                           \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                                              \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;			                                                          \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId                                                                            \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId      \n" +
                "								FROM 	(                                              \n" +
                "										SELECT 	*                                              \n" +
                "										FROM                                                                \n" +
                "											(                                                                                                            \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,     \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                                                  \n" +
                "												FROM 		component_packagingalias cp                                                                                                              \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                                              \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                                               \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                                             \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0                                                                                   \n" +
                "												UNION                                                                                                              \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                                            \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                                                 \n" +
                "												FROM 		rfq_lineitems_alternatepart rla                                                                              \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                                             \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0                                                                                                 \n" +
                "												UNION                                                             \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                                                              \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                                                  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla                                                                              \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                                             \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL                                                             \n" +
                "												GROUP BY 	custPNID, rla.partID                                                  \n" +
                "											) b     \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                                              \n" +
                "										GROUP BY b.lineID, b.assyId                                              \n" +
                "									) a;                                              \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                 \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "									LEAVE barcodeMatch_loop;                                                                                \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                  \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "									LEAVE barcodeMatch_loop;                                                                             \n" +
                "								ELSE                                                          \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                                                  \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "										LEAVE barcodeMatch_loop;                                                                                                                  \n" +
                "									END IF;                                                       \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                                                          \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                                            \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "										LEAVE barcodeMatch_loop;                                                                             \n" +
                "									END IF;                                                          \n" +
                "								END IF;                                                                                \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                              \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                                              \n" +
                "									LEAVE barcodeMatch_loop;                                                                              \n" +
                "								END IF;                                                                               \n" +
                "							END IF;     \n" +
                "  \n" +
                "							IF  v_componentCount = 1 THEN                   \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                                              \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                        \n" +
                "								ELSE                \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                                              \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"'); 	    				                                                                                                                                              \n" +
                "								END IF;                \n" +
                "							END IF;      \n" +
                "						END IF;                                                                                                                                              \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                                              \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                                                      \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;                                                                                                                                                              \n" +
                "						END IF;                                                                                                                                \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN                   \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN															                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                             \n" +
                "							END IF;                \n" +
                "						END IF;                \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;                                                                                                                                                                                                                          \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                                  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                                  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                                  \n" +
                "							ELSE                \n" +
                "								SET exit_loop = FALSE;                \n" +
                "							END IF;                 \n" +
                "						END IF;      \n" +
                "  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;        \n" +
                "  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;      \n" +
                "  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;           \n" +
                "  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;           \n" +
                "  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							ELSE                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                                                                                                                                              \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                              \n" +
                "							END IF;                \n" +
                "						END IF;      \n" +
                "					ELSE                                                                                                                          \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                                               \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;                                                                                                                                           \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                                               \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                                                       \n" +
                "					END IF;                                         \n" +
                "				END LOOP barcodeMatch_loop;                                                                                       \n" +
                "				-- check if mfg and component both found than                                                                    				                  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN                                                                                                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);      \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                                              \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);                                                                                                                            	                  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MFR PN whose MFR is already mapped and the part is custom part, and the scanned MFR PN is not a custom part.',21,MFG_Part_No);				                  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MFR PN whose MFR is already mapped and the part is custom part, and the scanned MFR PN is not a custom part.',21,MFG_Part_No);                                                                                                                            								                  \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);           \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND puid IS NOT NULL) THEN                                                                                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);           \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                       \n" +
                "					IF (v_isGoodPart = 2) THEN                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                                        \n" +
                "					ELSE                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                                        \n" +
                "					END IF;                                                                  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1) THEN                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                                                        \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1) THEN                                                       \n" +
                "					IF (v_isCPNFlag = 1) THEN                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                                        \n" +
                "					ELSE                                                   \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                                        \n" +
                "					END IF;                                                  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                                              \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                                            \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                                                  \n" +
                "					-- else                                                                                                            \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                                                  \n" +
                "					-- end if;                                                                                                            \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                                                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                                                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                                                                          \n" +
                "					-- INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Due to the below pending issues/status your BOM line is not clean. So, you can not allocate to kit.<br/><div class=\"cm-bom-error-block\">',v_bomErrorDescription,'</div>'),15,MFG_Part_No);                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line no <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> is not clean. So, you can not allocate UMID into kit.'),15,MFG_Part_No);                                                                                                                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN                                                                                                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                                                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                                              \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                                                 \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                                              \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                                                 \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                                              \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                                                 \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN                                                                                                                                             \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);          \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                                              \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                                              \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                                              \n" +
                "					END IF;									                                                                                                                                              \n" +
                "				ELSE 		                                                                                                                                    \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                                              \n" +
                "					END IF;	                                                                                                                                              \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                                              \n" +
                "					END IF;*/	                                                                                                                                              \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                                                \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                                              \n" +
                "					END IF;						                                                                                                                                              \n" +
                "				END IF;	                                                                                          \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                                             \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                                                \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                                                \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                                              \n" +
                "					END IF;                                                                                                   \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                                              \n" +
                "					END IF;                                                                                                                             \n" +
                "				END IF;                                                                                                                            \n" +
                "				IF (puid IS NOT NULL) THEN                                                                             \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                                              \n" +
                "						/*IF (pprefix = '') THEN	                                                                                                               \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                                                \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                                                \n" +
                "						END IF;*/                                                                                                                             \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                                                    \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						                  						                \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                                              \n" +
                "						EXECUTE stmt1;                                                                                                                                           \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                                                \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                                                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                                                \n" +
                "						END IF;                                                                                                                  \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                                            \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                                                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                                                \n" +
                "						END IF;                                                                                                                   \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                                                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                                                \n" +
                "						END IF;                                                                                                               \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                                                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                                                \n" +
                "						END IF;                                                                                                                 \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                                                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                                                \n" +
                "						END IF;                                                                                                                  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                                                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                                             \n" +
                "						END IF;                                                                                                               \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                                                \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                                                \n" +
                "						END IF;                                                                                                               \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                                           \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                                               \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                                              \n" +
                "						EXECUTE stmt2;	                                                                                                            \n" +
                "						DEALLOCATE PREPARE stmt2;                 \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                                          \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                                              \n" +
                "						ELSE                                                           \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                                              \n" +
                "						END IF;                                                          \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                                                    \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                                               \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                                              \n" +
                "						END IF;                                                                                                                                              \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                              \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                                              \n" +
                "  \n" +
                "						SELECT 	c.*,                                        \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                        \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                         \n" +
                "							csup.packageQty AS supplierPkgQty,                                         \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                         \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                         \n" +
                "							mcm.mfgName AS supplierMFGName,                                         \n" +
                "							csup.mfgPN AS supplierMFGPN,                                         \n" +
                "							csup.packagingID AS supplierPackagingId,                                         \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                                         \n" +
                "							csup.minimum AS supplierMinimum,                                         \n" +
                "							ccpn.id AS cpnID,                                         \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                         \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                         \n" +
                "							rfqroh.name AS rohsName,                                         \n" +
                "							rfqmou.name AS mountingTypeName,                                         \n" +
                "							um.unitName AS uomName,                                        \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                        \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                        \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                      \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                         \n" +
                "						FROM component AS c                                                                                                           \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                                          \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                                          \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                        \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                                          \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                                      \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                                          \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                                            \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                                         \n" +
                "						WHERE c.id = v_componentId;                                                                                                          \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                                                          \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                                                           \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                                                          \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;                                                                                                 \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                                                 \n" +
                "						FROM 	component_cust_alias_rev_pn                                                                 \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;                                                  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                                                    \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0                                                                                     \n" +
                "						) AND isDeleted = 0;                                                          \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                                                   \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                                                 \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                                                \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                                                    \n" +
                "						WHERE 		rla.isDeleted = 0                                                                \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                                                 \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                                                 \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                                                          \n" +
                "  \n" +
                "					ELSE                                                                                                                                             \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                                              \n" +
                "					END IF;                                                                                              \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                                                 \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                            \n" +
                "				ELSE         \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN              \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');                                                                																		        						                  						                \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                                              \n" +
                "						EXECUTE stmt1;                                                         \n" +
                "						DEALLOCATE PREPARE stmt1;      \n" +
                "					END IF;    \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                     \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                 \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                 \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                         \n" +
                "  \n" +
                "					IF (pCategory = 'M') THEN    \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                 \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                    \n" +
                "						SELECT 	c.*,                                         \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                         \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                         \n" +
                "							csup.packageQty AS supplierPkgQty,                                         \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                         \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                         \n" +
                "							mcm.mfgName AS supplierMFGName,                                         \n" +
                "							csup.packagingID AS supplierPackagingId,                                         \n" +
                "							csup.mfgPN AS supplierMFGPN,                                         \n" +
                "							csup.id AS supplierMFGPNID,                                         \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                                         \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                                   \n" +
                "							ccpn.id AS cpnID,                                         \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                         \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                         \n" +
                "							rfqroh.name AS rohsName,                                         \n" +
                "							rfqmou.name AS mountingTypeName,                                         \n" +
                "							um.unitName AS uomName,                                        \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                        \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                        \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                      \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                                           \n" +
                "						FROM component AS c                                                                                                           \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                                          \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                                          \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                        \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                                          \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                                       \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                                     \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                                              \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                            \n" +
                "						WHERE c.id = v_componentId;       \n" +
                "					END IF;                  \n" +
                "				END IF;                                                                                                        \n" +
                "			ELSE                                           \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                                               \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                                              \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;	                \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                 \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                \n" +
                "				SELECT 1;                 \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                 \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                \n" +
                "				SELECT 1; 		              \n" +
                "			END IF;                                                                                                                                              \n" +
                "  \n" +
                "		END block2;                                  \n" +
                "	ELSE                                \n" +
                "		IF (puid IS NOT NULL) THEN                                \n" +
                "			SELECT * FROM tempUIDSuccessDetail;                                \n" +
                "		ELSE                                 \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                 \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                \n" +
                "			SELECT 1;                                \n" +
                "		END IF;                                \n" +
                "	END IF;                                                                                                                                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (621,'1.00','V1','Sproc_MatchBarCodeAndSaveDelimiters - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 621:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2020  *********************************** */
                "drop function if exists `fun_NumberToWords`;  \n" +
                "CREATE FUNCTION `fun_NumberToWords`(pNumber decimal(20,2)) RETURNS varchar(1024) CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	Declare vtemp varchar(12);      \n" +
                "	Declare vtemp1 varchar(2);     \n" +
                "	Declare vRetval varchar(500) default '';      \n" +
                "    declare vIntTemp int;    \n" +
                "    Declare vResultCent varchar(50);    \n" +
                "    Declare vResultAmount varchar(500);    \n" +
                "BEGIN      \n" +
                "	set vtemp1 = SUBSTRING(CONVERT(((pNumber - floor(pNumber))*100), char),1,2);      \n" +
                "	set vtemp =  concat(repeat('0',12-length(convert(floor(pNumber), char))) , convert(floor(pNumber), char));      \n" +
                "  \n" +
                "    set vtemp1 = replace(ifnull(vtemp1,''),'.','');      \n" +
                "    set vtemp1 =  concat(repeat('0',2-length(vtemp1)), vtemp1);      \n" +
                "    set vResultCent = ifnull(vtemp1,'');      \n" +
                "  \n" +
                "	set vResultAmount = number_to_string(SUBSTRING(vtemp,10,3));    \n" +
                "  \n" +
                "    set vIntTemp = CONVERT(SUBSTRING(vtemp,7,3), UNSIGNED INTEGER);    \n" +
                "    if vIntTemp > 0 then    \n" +
                "		set vResultAmount = concat(number_to_string(SUBSTRING(vtemp,7,3)), ' thousand ', vResultAmount);    \n" +
                "	end if;    \n" +
                "  \n" +
                "	set vIntTemp = CONVERT(SUBSTRING(vtemp,4,3), UNSIGNED INTEGER);    \n" +
                "	if vIntTemp > 0 then    \n" +
                "		set vResultAmount = concat(number_to_string(SUBSTRING(vtemp,4,3)), ' million ', vResultAmount);    \n" +
                "	end if;    \n" +
                "  \n" +
                "    set vIntTemp = CONVERT(SUBSTRING(vtemp,1,3), UNSIGNED INTEGER);    \n" +
                "	if vIntTemp > 0 then    \n" +
                "		set vResultAmount = concat(number_to_string(SUBSTRING(vtemp,1,3)), ' billion ', vResultAmount);    \n" +
                "	end if;    \n" +
                "  \n" +
                "	if trim(ifnull(vResultAmount,'')) != '' then  \n" +
                "		/*set vRetval = ltrim(concat(ifnull(vResultAmount,''), ' AND ')); */  \n" +
                "        set vRetval = ltrim(concat(ifnull(vResultAmount,''), ' AND '));  \n" +
                "	elseif CONVERT(vtemp1, UNSIGNED INTEGER) = 0 then  \n" +
                "		set vRetval = 'zero and ';    \n" +
                "    end if;  \n" +
                "  \n" +
                "    set vRetval = CONCAT(UCASE(LEFT(vRetval, 1)),  \n" +
                "						 LCASE(SUBSTRING(vRetval, 2)));  \n" +
                "  \n" +
                "    set vRetval = concat(vRetval, ifnull(vResultCent,''),'/100', ' USD');    \n" +
                "	return vRetval;      \n" +
                "	END;      \n" +
                "END;  \n" +
                "drop function if exists `number_to_string`;  \n" +
                "CREATE FUNCTION `number_to_string`(n INT) RETURNS varchar(100) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "        -- This function returns the string representation of a number.    \n" +
                "        -- It's just an example... I'll restrict it to hundreds, but    \n" +
                "        -- it can be extended easily.    \n" +
                "        -- The idea is:     \n" +
                "        --      For each digit you need a position,    \n" +
                "        --      For each position, you assign a string    \n" +
                "        declare ans varchar(100);    \n" +
                "        declare dig1, dig2, dig3 int; -- (one variable per digit)    \n" +
                "        set ans = '';    \n" +
                "        set dig3 = floor(n / 100);    \n" +
                "        set dig2 = floor(n / 10) - dig3*10;    \n" +
                "        set dig1 = n - (dig3*100 + dig2*10);    \n" +
                "        if dig3 > 0 then    \n" +
                "            case    \n" +
                "                when dig3=1 then set ans=concat(ans, 'one hundred');    \n" +
                "                when dig3=2 then set ans=concat(ans, 'two hundred');    \n" +
                "                when dig3=3 then set ans=concat(ans, 'three hundred');    \n" +
                "                when dig3=4 then set ans=concat(ans, 'four hundred');    \n" +
                "                when dig3=5 then set ans=concat(ans, 'five hundred');    \n" +
                "                when dig3=6 then set ans=concat(ans, 'six hundred');    \n" +
                "                when dig3=7 then set ans=concat(ans, 'seven hundred');    \n" +
                "                when dig3=8 then set ans=concat(ans, 'eight hundred');    \n" +
                "                when dig3=9 then set ans=concat(ans, 'nine hundred');    \n" +
                "                else set ans = ans;    \n" +
                "            end case;    \n" +
                "        end if;    \n" +
                "        if dig2 = 1 then    \n" +
                "            case    \n" +
                "                when (dig2*10 + dig1) = 10 then set ans=concat(ans,' ten');    \n" +
                "                when (dig2*10 + dig1) = 11 then set ans=concat(ans,' eleven');    \n" +
                "                when (dig2*10 + dig1) = 12 then set ans=concat(ans,' twelve');    \n" +
                "                when (dig2*10 + dig1) = 13 then set ans=concat(ans,' thirteen');    \n" +
                "                when (dig2*10 + dig1) = 14 then set ans=concat(ans,' fourteen');    \n" +
                "                when (dig2*10 + dig1) = 15 then set ans=concat(ans,' fifteen');    \n" +
                "                when (dig2*10 + dig1) = 16 then set ans=concat(ans,' sixteen');    \n" +
                "                when (dig2*10 + dig1) = 17 then set ans=concat(ans,' seventeen');    \n" +
                "                when (dig2*10 + dig1) = 18 then set ans=concat(ans,' eighteen');    \n" +
                "                when (dig2*10 + dig1) = 19 then set ans=concat(ans,' nineteen');    \n" +
                "                else set ans=ans;    \n" +
                "            end case;    \n" +
                "        else    \n" +
                "            if dig2 > 0 then    \n" +
                "                case    \n" +
                "                    when dig2=2 then set ans=concat(ans, ' twenty');    \n" +
                "                    when dig2=3 then set ans=concat(ans, ' thirty');    \n" +
                "                    when dig2=4 then set ans=concat(ans, ' forty');    \n" +
                "                    when dig2=5 then set ans=concat(ans, ' fifty');    \n" +
                "                    when dig2=6 then set ans=concat(ans, ' sixty');    \n" +
                "                    when dig2=7 then set ans=concat(ans, ' seventy');    \n" +
                "                    when dig2=8 then set ans=concat(ans, ' eighty');    \n" +
                "                    when dig2=9 then set ans=concat(ans, ' ninety');    \n" +
                "                    else set ans=ans;    \n" +
                "                end case;    \n" +
                "            end if;    \n" +
                "            /*if dig1 >= 0 then*/ /*commented due to displayed zero in all amount words*/  \n" +
                "            if dig1 > 0 then    \n" +
                "                case    \n" +
                "					/*when dig1=0 then set ans=concat(ans, ' zero');*/ /*commented due to displayed zero in all amount words*/  \n" +
                "                    when dig1=1 then set ans=concat(ans, ' one');    \n" +
                "                    when dig1=2 then set ans=concat(ans, ' two');    \n" +
                "                    when dig1=3 then set ans=concat(ans, ' three');    \n" +
                "                    when dig1=4 then set ans=concat(ans, ' four');    \n" +
                "                    when dig1=5 then set ans=concat(ans, ' five');    \n" +
                "                    when dig1=6 then set ans=concat(ans, ' six');    \n" +
                "                    when dig1=7 then set ans=concat(ans, ' seven');    \n" +
                "                    when dig1=8 then set ans=concat(ans, ' eight');    \n" +
                "                    when dig1=9 then set ans=concat(ans, ' nine');    \n" +
                "                    else set ans=ans;    \n" +
                "                end case;    \n" +
                "            end if;    \n" +
                "        end if;    \n" +
                "        return trim(ans);    \n" +
                "    END;  \n" +
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(        \n" +
                "	IN pPaymentID text(11)        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,         \n" +
                "				pip.paymentAmount,       \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,        \n" +
                "				pip.payToAddress,      \n" +
                "				ca.companyName supplierName,        \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) supplierAddress,        \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,    \n" +
                "                pip.bankAccountNo,    \n" +
                "                g.gencCategoryName paymentType    \n" +
                "		  from packingslip_invoice_payment pip        \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1          \n" +
                "          join genericcategory g ON g.categoryType = 'Payment Method' and g.gencCategoryID = pip.paymentType    \n" +
                "		 where pip.isDeleted = 0        \n" +
                "		   and pip.id = pPaymentID;        \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,        \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN        \n" +
                "							p.invoiceNumber        \n" +
                "						WHEN p.`receiptType` = 'C' THEN        \n" +
                "							p.creditMemoNumber        \n" +
                "						ELSE        \n" +
                "							p.debitMemoNumber        \n" +
                "					END) invoiceNumber,        \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN        \n" +
                "							p.invoiceNumber        \n" +
                "				else        \n" +
                "					(SELECT 	ps.invoiceNumber                   \n" +
                "					FROM 	packing_slip_material_receive ps                   \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno                  \n" +
                "							AND ps.isDeleted = 0  )        \n" +
                "				end        \n" +
                "				) refInvoiceNumber,        \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN        \n" +
                "							p.invoiceDate        \n" +
                "						WHEN p.`receiptType` = 'C' THEN        \n" +
                "							p.creditMemoDate        \n" +
                "						ELSE        \n" +
                "							p.debitMemoDate        \n" +
                "					END) invoiceDate,        \n" +
                "  \n" +
                "				null `description`,        \n" +
                "				(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,        \n" +
                "				0 discount,        \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN        \n" +
                "							'Invoice'        \n" +
                "						WHEN p.`receiptType` = 'C' THEN        \n" +
                "							'Credit Memo'        \n" +
                "						ELSE        \n" +
                "							'Debit Memo'        \n" +
                "					END) receiptMemoType        \n" +
                "			FROM packing_slip_material_receive p        \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id    \n" +
                "			WHERE p.isDeleted =0        \n" +
                "			and p.receiptType in ('I','C','D')    \n" +
                "			/*and p.`status` = 'P'*/    \n" +
                "			and pd.refPayementid = pPaymentID;        \n" +
                "  \n" +
                "		/*SELECT concat(cua.street1,',\r',cua.city,', ',cua.state,' ',cua.postcode,'\r',c.countryName) AS address,*/  \n" +
                "		SELECT concat(cua.street1,',\r',cua.city,', ',cua.state,' ',cua.postcode,'\r',c.countryName) AS address,  \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, cu.mfgName companyName        \n" +
                "		FROM customer_addresses cua                                  \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                                  \n" +
                "        join countrymst c ON c.countryID = cua.countryID      \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (622,'1.00','V1','Bug 28440: Correction of amount in words on Print report and remittance report - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 622:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                \n" +
                "	IN pPageIndex INT,                                                                                      \n" +
                "	IN pRecordPerPage INT,                                                                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                            \n" +
                "	IN pPackingSlipID INT                                                                         \n" +
                ")  \n" +
                "BEGIN                                                                            \n" +
                "	DECLARE pOffset INT;                                                                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                        \n" +
                "	DECLARE v_ParentPackingSlipId INT;                      \n" +
                "	DECLARE v_InvoiceSlipId INT;                     \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                          \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                          \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                        \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                                 \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS             \n" +
                "	SELECT 	*,      \n" +
                "		(                        \n" +
                "			CASE                         \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'                        \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'                        \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'                        \n" +
                "				ELSE NULL                        \n" +
                "			END                        \n" +
                "		) AS receivedStatusValue      \n" +
                "	FROM 	(                                                                               \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                                \n" +
                "				CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                                           \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel, 	                                                            \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                            \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                            \n" +
                "				p.invoicePrice, 				p.disputedPrice,					                    \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,                                                             \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName, 	                    \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,     	                 \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					                    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					                    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                                    \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                             \n" +
                "				p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                                             \n" +
                "				p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                                            \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                       \n" +
                "				c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                       \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                                \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                              \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                              \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                        \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                            \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                      \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,            \n" +
                "				c.partType,                             \n" +
                "				(                        \n" +
                "					CASE                        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                        \n" +
                "							p.receivedStatus                        \n" +
                "						ELSE                         \n" +
                "							(SELECT receivedStatus                         \n" +
                "							FROM 	packing_slip_material_receive_det                         \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                         \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                          \n" +
                "									AND isDeleted = 0 LIMIT 1)                        \n" +
                "					END                        \n" +
                "				) receivedStatus,			                        \n" +
                "				p.remark,                       \n" +
                "				p.comment,          \n" +
                "				p.internalRef,          \n" +
                "				p.purchaseInspectionComment,                     \n" +
                "				(                        \n" +
                "					CASE                        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                        \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                \n" +
                "						ELSE                         \n" +
                "							(SELECT COUNT(1)                         \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp                \n" +
                "							WHERE EXISTS (                \n" +
                "									SELECT 	1                         \n" +
                "									FROM 	packing_slip_material_receive_det pslip                \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                         \n" +
                "											AND 	pslip.id = psmp.lineId                \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                         \n" +
                "											AND	pslip.isDeleted = 0)                \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                        \n" +
                "					END                        \n" +
                "				) AS purchaseRequirementCount,                        \n" +
                "				(                        \n" +
                "					CASE                        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                        \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                        \n" +
                "						ELSE                        \n" +
                "							(SELECT COUNT(1)                         \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm                        \n" +
                "							WHERE 	EXISTS (                \n" +
                "									SELECT 	1                \n" +
                "									FROM 	packing_slip_material_receive_det psmr                \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId                \n" +
                "										AND	psmr.id = psm.lineId                \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber                \n" +
                "										AND 	psmr.isDeleted = 0                \n" +
                "									)                \n" +
                "								AND psm.inspectionStatus = 'R'                         \n" +
                "								AND psm.isDeleted = 0                \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')                \n" +
                "					END                        \n" +
                "				) AS rejectedPurchaseRequirementCount,                          \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                                            \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                      \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                                \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                                \n" +
                "				(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                                  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                                  \n" +
                "				(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                       \n" +
                "				(                      \n" +
                "					CASE                      \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                      \n" +
                "						ELSE                       \n" +
                "							(SELECT `status`                       \n" +
                "							FROM 	packing_slip_material_receive_det                       \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                       \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                       \n" +
                "									AND isDeleted = 0)                \n" +
                "					END                      \n" +
                "				) invoiceStatus,       \n" +
                "				(                      \n" +
                "					CASE                      \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                      \n" +
                "						ELSE                       \n" +
                "							(SELECT refCreditDebitInvoiceNo                       \n" +
                "							FROM 	packing_slip_material_receive_det                       \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                       \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                       \n" +
                "									AND isDeleted = 0)                \n" +
                "					END                      \n" +
                "				) invoiceLineHasMemo,                                  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                               \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd                 \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'                \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id                \n" +
                "					AND pd.partId = p.partID) commentCount,           \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0) psInspectionStatus             \n" +
                "		FROM		packing_slip_material_receive_det p                                                                    \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                            \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL                                                \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                             \n" +
                "		AND 		p.isDeleted = 0      \n" +
                "	) a;                                                                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                      \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                              \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                            \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID                 \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)                \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)                \n" +
                "	AND			ps.receiptType = 'P'                                                                  \n" +
                "	AND			psm.isDeleted = 0                \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                          \n" +
                "  \n" +
                "	-- Set received qty detail                                                                                  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                      \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,       \n" +
                "		r.pendingQty = (r.orderedQty - IFNULL(q.totalReceivedQty,0))      \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                      \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;                \n" +
                "	ELSE                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                      \n" +
                "		SET pWhereClause = '1=1' ;                                                                                      \n" +
                "	END IF;	                                                                              \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                       \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                      \n" +
                "	ELSE	                                                                                      \n" +
                "		SET rowNumWhere = '';                                                                                      \n" +
                "	END IF;	                                                                                      \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                      \n" +
                "	EXECUTE query1;                                                                                      \n" +
                "	DEALLOCATE PREPARE query1;                                                                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                      \n" +
                "	EXECUTE query2;                                                                                      \n" +
                "	DEALLOCATE PREPARE query2;     \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip FROM packing_slip_material_receive WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");                    \n" +
                "	PREPARE query3 FROM @SQLStatement3;                    \n" +
                "	EXECUTE query3;                    \n" +
                "	DEALLOCATE PREPARE query3;                                                                                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (623,'1.00','V1','Sproc_RetrivePackingSlipMaterialDetList - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 623:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-12-2020  *********************************** */
                "UPDATE datecodeformatmst SET isDeleted = 0 WHERE isDeleted IS NULL;  \n" +
                /* **************************** Add Script Version -> 12-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (624,'1.00','V1','Delete supplier memo provision - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 624:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                                                    \n" +
                "	IN pPageIndex INT,                                                    \n" +
                "	IN pRecordPerPage INT,                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN pReceiptType VARCHAR(10),                  \n" +
                "    IN pMfgCodeIds LONGTEXT,                  \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,                  \n" +
                "    IN pDueDate DATE,                  \n" +
                "    IN pAdditionalDays INT,                  \n" +
                "    IN pTermsAndAboveDays INT,                  \n" +
                "    IN pInvoiceNumber VARCHAR(50)                  \n" +
                ")  \n" +
                "BEGIN                                                    \n" +
                "	DECLARE pOffset INT;                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                          \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                 \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                          \n" +
                "			SELECT 		p.id,                      \n" +
                "					p.poNumber,                      \n" +
                "					p.mfgCodeID,                      \n" +
                "					p.supplierSONumber,            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                      \n" +
                "					p.packingSlipDate,                      \n" +
                "					p.invoiceNumber,                      \n" +
                "					p.invoiceDate,                      \n" +
                "					p.creditMemoNumber,                      \n" +
                "					p.creditMemoDate,                      \n" +
                "					p.debitMemoNumber,                      \n" +
                "					p.debitMemoDate,                      \n" +
                "					p.receiptDate,                      \n" +
                "					p.description,                      \n" +
                "					p.billToAddress,                      \n" +
                "					p.shipToAddress,                      \n" +
                "					p.poVersion,                      \n" +
                "					p.isDeleted,                      \n" +
                "					p.receiptType,                      \n" +
                "					p.`status`,                      \n" +
                "					pinv.paymentNumber chequeNumber,                      \n" +
                "					pinv.paymentDate chequeDate,                      \n" +
                "					pinv.paymentAmount chequeAmount,                   \n" +
                "					pinv.bankAccountNo,                \n" +
                "					pinv.bankAccountMasID,                \n" +
                "					pinv.accountReference,                \n" +
                "					gp.gencCategoryName paymentTypeName,    \n" +
                "					gp.systemGenerated paymentTypeSystemGenerated,    \n" +
                "					pinv.paymentType,              \n" +
                "					p.applyDate,                      \n" +
                "					p.refParentCreditDebitInvoiceno,                      \n" +
                "					p.refPackingSlipNumberForInvoice,                      \n" +
                "					p.invoiceTotalDue,                      \n" +
                "					p.isTariffInvoice,                      \n" +
                "					pinv.bankName,              									                                         \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                   \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                        \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                        \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                 \n" +
                "					m.mfgCode supplierCode,      \n" +
                "					(                          \n" +
                "						SELECT COUNT(1)                           \n" +
                "						  FROM genericfiles g                           \n" +
                "						 WHERE g.refTransID = p.id                           \n" +
                "						   and g.entityID = -13                  \n" +
                "						   AND g.gencFileOwnerType = 'supplier_invoice'                           \n" +
                "						   AND g.isDeleted =0                  \n" +
                "					) invoiceDocCount,                          \n" +
                "					(                          \n" +
                "						SELECT COUNT(1)                           \n" +
                "						 FROM genericfiles g                           \n" +
                "						WHERE g.refTransID = psm.id                           \n" +
                "						  and g.entityID = -14                  \n" +
                "						  AND g.gencFileOwnerType = 'packing_slip'                           \n" +
                "						  AND g.isDeleted =0                  \n" +
                "					) packingSlipDocCount,        \n" +
                "					pd.itemReceived,          \n" +
                "					pd.otherChargesItemReceived,                \n" +
                "					pd.itemDisapproved,                  \n" +
                "					(                          \n" +
                "						CASE 	WHEN p.`receiptType` = 'I' THEN                           \n" +
                "								'Invoice'                           \n" +
                "							WHEN p.`receiptType` = 'C' THEN                           \n" +
                "								'Credit Memo'                           \n" +
                "							ELSE                           \n" +
                "								'Debit Memo'                           \n" +
                "						END                          \n" +
                "					) receiptMemoType,      									                                    \n" +
                "					(                          \n" +
                "						CASE 	WHEN p.`status` = 'PE' THEN                           \n" +
                "								'Pending'                           \n" +
                "							WHEN p.`status` = 'I' THEN                           \n" +
                "								'Investigate'                           \n" +
                "							WHEN p.`status` = 'A' THEN                           \n" +
                "								'Approved to Pay'                           \n" +
                "							ELSE                           \n" +
                "								'Paid'                           \n" +
                "						END                          \n" +
                "					) invoiceVerificationStatus,   \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,                              \n" +
                "					pd.totalExtendedAmount,                  \n" +
                "					pe.totalCreditAmount,                  \n" +
                "					pe.totalDebitAmount,                  \n" +
                "					(                  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                  \n" +
                "					) amountToPay,                  \n" +
                "					pd.packingDetailNote,      \n" +
                "					pd.approveLineCount,      \n" +
                "					DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),      \n" +
                "					INTERVAL IFNULL((max(p.termsDays) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,      \n" +
                "					p.refPayementid,      \n" +
                "					max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,      \n" +
                "					max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,      \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,      \n" +
                "					psm.packingSlipModeStatus      \n" +
                "			FROM		packing_slip_material_receive p      \n" +
                "            inner join mfgcodemst m ON m.id = p.mfgCodeID      \n" +
                "			LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                  \n" +
                "			LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id        \n" +
                "		\");                \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"                  \n" +
                "				left join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0                  \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'               \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'              \n" +
                "				left join (        \n" +
                "							select 	a.refPackingSlipMaterialRecID,                  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                  \n" +
                "								sum(a.itemReceived) itemReceived,        \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                  \n" +
                "								sum(a.approveLineCount) approveLineCount,                  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount                  \n" +
                "							from 	(        \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,         \n" +
                "										psm.packingSlipSerialNumber,         \n" +
                "										psm.approveNote,                  \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,        \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,        \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                  \n" +
                "										extendedPrice                  \n" +
                "									FROM 	packing_slip_material_receive_det psm                  \n" +
                "									WHERE 	psm.isDeleted = 0        \n" +
                "								) a                  \n" +
                "							group by a.refPackingSlipMaterialRecID        \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                  \n" +
                "				left join (        \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                   \n" +
                "									sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                  \n" +
                "									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount                  \n" +
                "							from 		packing_slip_material_receive ps                  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                  \n" +
                "										and ps.isDeleted = 0                  \n" +
                "										and pd.isDeleted = 0                  \n" +
                "										and ps.receiptType in ('C','D')                  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno        \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                  \n" +
                "				WHERE 	p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')                  \n" +
                "	\");                  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                  \n" +
                "	ELSE                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                    \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                    \n" +
                "	END IF;	                                            \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \"                  \n" +
                "								AND (         \n" +
                "										c.supplierSONumber = '\", pInvoiceNumber, \"'                  \n" +
                "									OR 	c.poNumber = '\", pInvoiceNumber, \"'                  \n" +
                "									OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                  \n" +
                "									OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                  \n" +
                "									OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"                  \n" +
                "								  \" ) \"        \n" +
                "					);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                     \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                    \n" +
                "	ELSE	                                                    \n" +
                "		SET rowNumWhere = '';                                                    \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "	/* to get total count of rows */                                                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                    \n" +
                "	EXECUTE query1;                                                    \n" +
                "	DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"         \n" +
                "			SELECT 	c.*,         \n" +
                "				case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed                  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c         \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                    \n" +
                "	EXECUTE query2;                                                    \n" +
                "	DEALLOCATE PREPARE query2;                                                   \n" +
                "    #select @SQLStatement2;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(      \n" +
                "	IN tableName VARCHAR(255),      \n" +
                "	IN IDs LONGTEXT,      \n" +
                "	IN deletedBy INT,      \n" +
                "	IN entityID VARCHAR(255),      \n" +
                "	IN refrenceIDs LONGTEXT,      \n" +
                "	IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "		DECLARE v_StartIndex INT;          \n" +
                "		DECLARE v_EndIndex INT;      \n" +
                "		DECLARE v_Id VARCHAR(10);      \n" +
                "		DECLARE v_InvoiceId INT;  \n" +
                "		DECLARE v_InvoiceDetailId INT;  \n" +
                "		DECLARE v_MainInvoiceId INT;  \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);  \n" +
                "  \n" +
                "		SET v_StartIndex = 0;          \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');    	    \n" +
                "		PREPARE stmt2 FROM @SQL2;        \n" +
                "		EXECUTE stmt2;    \n" +
                "		DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;  \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));   \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");                                                        				                                    				      \n" +
                "		PREPARE stmt3 FROM @SQL3;                                                                                                                                              \n" +
                "		EXECUTE stmt3;                         \n" +
                "		DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table; 	    \n" +
                "		WHILE v_StartIndex < v_EndIndex DO         \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;    \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId INTO v_InvoiceId, v_InvoiceDetailId FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "			IF ((SELECT COUNT(1) FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D')) > 0) THEN  \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;	  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;  \n" +
                "				CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));   \n" +
                "				SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");                                                        				                                    				      \n" +
                "				PREPARE stmt4 FROM @SQL4;                                                                                                                                              \n" +
                "				EXECUTE stmt4;                         \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "				DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;  \n" +
                "				SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive_det  \n" +
                "				SET 	`status` = 'D',  \n" +
                "					refCreditDebitInvoiceNo = v_UpdatedMemoIds  \n" +
                "				WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	`status` = 'I'  \n" +
                "				WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;  \n" +
                "				UPDATE 	packing_slip_material_receive ps  \n" +
                "				SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)  \n" +
                "				WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;          \n" +
                "		END WHILE;                         \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');        \n" +
                "		PREPARE stmt1 FROM @SQL1;        \n" +
                "		EXECUTE stmt1;      \n" +
                "		DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                  \n" +
                "	IN pPageIndex INT,                                                                                        \n" +
                "	IN pRecordPerPage INT,                                                                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                              \n" +
                "	IN pPackingSlipID INT                                                                           \n" +
                ")  \n" +
                "BEGIN                                                                              \n" +
                "	DECLARE pOffset INT;                                                                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                          \n" +
                "	DECLARE v_ParentPackingSlipId INT;                        \n" +
                "	DECLARE v_InvoiceSlipId INT;                       \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                            \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                          \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                                   \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS               \n" +
                "	SELECT 	*,        \n" +
                "		(                          \n" +
                "			CASE                           \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'                          \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'                          \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'                          \n" +
                "				ELSE NULL                          \n" +
                "			END                          \n" +
                "		) AS receivedStatusValue        \n" +
                "	FROM 	(                                                                                 \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                                  \n" +
                "				CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                                             \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel, 	                                                              \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                              \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                              \n" +
                "				p.invoicePrice, 				p.disputedPrice,					                      \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,                                                               \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName, 	                      \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,     	                   \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					                      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					                      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                                      \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                               \n" +
                "				p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                                               \n" +
                "				p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                                              \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                         \n" +
                "				c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                         \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                                  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                                \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                                \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                          \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                              \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                        \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,              \n" +
                "				c.partType,                               \n" +
                "				(                          \n" +
                "					CASE                          \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                          \n" +
                "							p.receivedStatus                          \n" +
                "						ELSE                           \n" +
                "							(SELECT receivedStatus                           \n" +
                "							FROM 	packing_slip_material_receive_det                           \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                           \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                            \n" +
                "									AND isDeleted = 0 LIMIT 1)                          \n" +
                "					END                          \n" +
                "				) receivedStatus,			                          \n" +
                "				p.remark,                         \n" +
                "				p.comment,            \n" +
                "				p.internalRef,            \n" +
                "				p.purchaseInspectionComment,                       \n" +
                "				(                          \n" +
                "					CASE                          \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                          \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                  \n" +
                "						ELSE                           \n" +
                "							(SELECT COUNT(1)                           \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp                  \n" +
                "							WHERE EXISTS (                  \n" +
                "									SELECT 	1                           \n" +
                "									FROM 	packing_slip_material_receive_det pslip                  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                           \n" +
                "											AND 	pslip.id = psmp.lineId                  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                           \n" +
                "											AND	pslip.isDeleted = 0)                  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                          \n" +
                "					END                          \n" +
                "				) AS purchaseRequirementCount,                          \n" +
                "				(                          \n" +
                "					CASE                          \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                          \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                          \n" +
                "						ELSE                          \n" +
                "							(SELECT COUNT(1)                           \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm                          \n" +
                "							WHERE 	EXISTS (                  \n" +
                "									SELECT 	1                  \n" +
                "									FROM 	packing_slip_material_receive_det psmr                  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId                  \n" +
                "										AND	psmr.id = psm.lineId                  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber                  \n" +
                "										AND 	psmr.isDeleted = 0                  \n" +
                "									)                  \n" +
                "								AND psm.inspectionStatus = 'R'                           \n" +
                "								AND psm.isDeleted = 0                  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')                  \n" +
                "					END                          \n" +
                "				) AS rejectedPurchaseRequirementCount,                            \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                                              \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                        \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                                  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                                  \n" +
                "				(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                                    \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                                    \n" +
                "				(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                         \n" +
                "				(                        \n" +
                "					CASE                        \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                        \n" +
                "						ELSE                         \n" +
                "							(SELECT `status`                         \n" +
                "							FROM 	packing_slip_material_receive_det                         \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                         \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                         \n" +
                "									AND isDeleted = 0)                  \n" +
                "					END                        \n" +
                "				) invoiceStatus,         \n" +
                "				(                        \n" +
                "					CASE                        \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                        \n" +
                "						ELSE                         \n" +
                "							(SELECT refCreditDebitInvoiceNo                         \n" +
                "							FROM 	packing_slip_material_receive_det                         \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                         \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                         \n" +
                "									AND isDeleted = 0)                  \n" +
                "					END                        \n" +
                "				) invoiceLineHasMemo,                                    \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                                 \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd                   \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'                  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id                  \n" +
                "					AND pd.partId = p.partID) commentCount,             \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0) psInspectionStatus               \n" +
                "		FROM		packing_slip_material_receive_det p                                                                      \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                              \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL                                                  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                               \n" +
                "		AND 		p.isDeleted = 0        \n" +
                "	) a;                                                                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                        \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                                \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                              \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID                   \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)                  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)                  \n" +
                "	AND			ps.receiptType = 'P'                                                                    \n" +
                "	AND			psm.isDeleted = 0                  \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                            \n" +
                "  \n" +
                "	-- Set received qty detail                                                                                    \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                        \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,         \n" +
                "		r.pendingQty = (r.orderedQty - IFNULL(q.totalReceivedQty,0))        \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                        \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;                  \n" +
                "	ELSE                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                        \n" +
                "		SET pWhereClause = '1=1' ;                                                                                        \n" +
                "	END IF;	                                                                                \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                         \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                        \n" +
                "	ELSE	                                                                                        \n" +
                "		SET rowNumWhere = '';                                                                                        \n" +
                "	END IF;	                                                                                        \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                        \n" +
                "	EXECUTE query1;                                                                                        \n" +
                "	DEALLOCATE PREPARE query1;                                                                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                        \n" +
                "	EXECUTE query2;                                                                                        \n" +
                "	DEALLOCATE PREPARE query2;       \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip FROM packing_slip_material_receive WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");                      \n" +
                "	PREPARE query3 FROM @SQLStatement3;                      \n" +
                "	EXECUTE query3;                      \n" +
                "	DEALLOCATE PREPARE query3;                                                                                           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (625,'1.00','V1','Delete supplier memo provision - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 625:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(            \n" +
                "	IN pPaymentID text(11)            \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,             \n" +
                "				pip.paymentAmount,           \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,            \n" +
                "				pip.payToAddress,          \n" +
                "				ca.companyName supplierName,            \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) supplierAddress,            \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,        \n" +
                "                pip.bankAccountNo,        \n" +
                "                g.gencCategoryName paymentType        \n" +
                "		  from packingslip_invoice_payment pip            \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1              \n" +
                "          join genericcategory g ON g.categoryType = 'Payment Method' and g.gencCategoryID = pip.paymentType        \n" +
                "		 where pip.isDeleted = 0            \n" +
                "		   and pip.id = pPaymentID;            \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,            \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN            \n" +
                "							p.invoiceNumber            \n" +
                "						WHEN p.`receiptType` = 'C' THEN            \n" +
                "							p.creditMemoNumber            \n" +
                "						ELSE            \n" +
                "							p.debitMemoNumber            \n" +
                "					END) invoiceNumber,            \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN            \n" +
                "							p.invoiceNumber            \n" +
                "				else            \n" +
                "					(SELECT 	ps.invoiceNumber                       \n" +
                "					FROM 	packing_slip_material_receive ps                       \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno                      \n" +
                "							AND ps.isDeleted = 0  )            \n" +
                "				end            \n" +
                "				) refInvoiceNumber,            \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN            \n" +
                "							p.invoiceDate            \n" +
                "						WHEN p.`receiptType` = 'C' THEN            \n" +
                "							p.creditMemoDate            \n" +
                "						ELSE            \n" +
                "							p.debitMemoDate            \n" +
                "					END) invoiceDate,            \n" +
                "  \n" +
                "				null `description`,            \n" +
                "				(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,            \n" +
                "				0 discount,            \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN            \n" +
                "							'Invoice'            \n" +
                "						WHEN p.`receiptType` = 'C' THEN            \n" +
                "							'Credit Memo'            \n" +
                "						ELSE            \n" +
                "							'Debit Memo'            \n" +
                "					END) receiptMemoType            \n" +
                "			FROM packing_slip_material_receive p            \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id        \n" +
                "			WHERE p.isDeleted =0            \n" +
                "			and p.receiptType in ('I','C','D')        \n" +
                "			/*and p.`status` = 'P'*/        \n" +
                "			and pd.refPayementid = pPaymentID;            \n" +
                "		SELECT concat(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,      \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,      \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, cu.mfgName companyName            \n" +
                "		FROM customer_addresses cua                                      \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                                      \n" +
                "        join countrymst c ON c.countryID = cua.countryID          \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;                  \n" +
                "  \n" +
                "END;  \n" +
                "drop function if exists `fun_getAddressbyIDForCheckPrint`;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDForCheckPrint`(      \n" +
                "	pAddressID INT      \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "	SELECT concat('ATTN: ',ca.personName,fun_getNewLineCharacter(),ca.street1,fun_getNewLineCharacter(),ca.city,', ',ca.state,' ',ca.postcode,fun_getNewLineCharacter(),c.countryName) INTO pAddress FROM customer_addresses ca LEFT JOIN countrymst c ON c.countryID=ca.countryID          \n" +
                "	WHERE ca.id=pAddressID ;          \n" +
                "  \n" +
                "	RETURN pAddress;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (626,'1.00','V1','Sample entry - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 626:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCompanyReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN  \n" +
                "	# Company detail                        \n" +
                "	SELECT CONCAT(cua.street1,'<br/>',cua.city,', ',cua.state,' ',cua.postcode,'<br/>',IFNULL(c.countryName,''),'<br/>','&nbsp;&nbsp;Email: ',cua.email,'<br/>','Phone: ',cua.contact,'<br/>','&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fax: ',IFNULL(cua.faxNumber,''))AS address,    \n" +
                "		cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo, cu.mfgName,'S & M Group, Inc. d/b/a,' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
                "		ci.ein, ci.remittanceAddress   \n" +
                "	FROM customer_addresses cua                        \n" +
                "	JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "    JOIN company_info ci ON ci.mfgCodeId = cu.id       \n" +
                "	LEFT JOIN countrymst c ON cua.countryID=c.countryID                       \n" +
                "	WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDeleted = 0 AND cua.isDefault = 1;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesOrderReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(	                            \n" +
                "	IN pid INT(11)                  \n" +
                "    )  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate,sm.revision,                    \n" +
                "		sm.soDate,                          \n" +
                "		sm.status,                          \n" +
                "		mfg.mfgName AS customer,                          \n" +
                "		gctsm.gencCategoryName AS shippingMethod,                          \n" +
                "		gctpm.gencCategoryName AS paymentMethod,                          \n" +
                "        -- get shipping detils of customer                                   \n" +
                "        CASE                           \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN                                  \n" +
                "	(                                  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                          \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                       \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),               \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),               \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),              \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                      \n" +
                "	FROM customer_addresses ca                                      \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                      \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                                   \n" +
                "	) END AS shippingAddress,                          \n" +
                "	-- get billing Address                          \n" +
                "	CASE                           \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN                                  \n" +
                "	(                                  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                       \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),              \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),               \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),              \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                      \n" +
                "	FROM customer_addresses ca                                      \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID                                      \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'                                 \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson              \n" +
                "  \n" +
                "  \n" +
                "	FROM salesordermst sm                            \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)                          \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)                            \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0              \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId                \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo                        \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);                        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT   \n" +
                "    sd.lineID,  \n" +
                "    c.PIDCode,  \n" +
                "    sd.id AS sDetID,  \n" +
                "    (CASE  \n" +
                "        WHEN partType = 4 THEN c.mfgPN  \n" +
                "        ELSE c.custAssyPN  \n" +
                "    END) mfgPN,  \n" +
                "    c.rev revision,  \n" +
                "    sd.partDescription AS description,  \n" +
                "    sd.qty,  \n" +
                "    sd.price,  \n" +
                "    sd.qty * sd.price AS extPrice,  \n" +
                "    sd.materialTentitiveDocDate,  \n" +
                "    CASE  \n" +
                "        WHEN sd.partCategory = 2 THEN NULL  \n" +
                "        ELSE sd.shippingQty  \n" +
                "    END shippingQty,  \n" +
                "    ro.rohsIcon AS rohsIcon,  \n" +
                "    ro.name AS rohsStatus,  \n" +
                "    CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,  \n" +
                "    su.emailAddress,  \n" +
                "    sd.custPOLineNumber,  \n" +
                "    CASE  \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber  \n" +
                "        ELSE sd.quoteNumber  \n" +
                "    END quoteNumber,  \n" +
                "    sd.remark,  \n" +
                "    emp.phExtension  \n" +
                "FROM  \n" +
                "    salesorderdet sd  \n" +
                "        JOIN  \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id  \n" +
                "        AND sm.deletedAt IS NULL)  \n" +
                "        JOIN  \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "        JOIN  \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id  \n" +
                "        AND ro.deletedAt IS NULL)  \n" +
                "        LEFT JOIN  \n" +
                "    users su ON su.id = sm.updatedBy  \n" +
                "        LEFT JOIN  \n" +
                "    employees emp ON emp.id = su.employeeID  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = sd.partID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)  \n" +
                "        AND sm.id = pid  \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;	              \n" +
                "  \n" +
                "        -- get salesorder level total details for              \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS              \n" +
                "	SELECT SUM(sd.qty * sd.price) totalLinePrice,              \n" +
                "	(SELECT SUM(sod.qty * sod.price) FROM salesorder_otherexpense_details sod WHERE sod.refSalesOrderDetID IN (SELECT s.id FROM salesorderdet s WHERE s.refsalesorderID=pid AND s.partCategory=3 AND s.isDeleted=0 ) AND sod.isdeleted=0) totalLineMiscPrice,              \n" +
                "	(SELECT SUM(ssd.qty * ssd.price) FROM salesorderdet ssd WHERE ssd.refsalesorderID=pid AND ssd.partCategory=2 AND ssd.isdeleted=0) totalSOMiscPrice              \n" +
                "	FROM salesorderdet sd               \n" +
                "	WHERE sd.refsalesorderID=pid AND sd.partCategory=3 AND sd.isdeleted=0;  \n" +
                "  \n" +
                "	SELECT   \n" +
                "    totalLinePrice,  \n" +
                "    IFNULL(totalLineMiscPrice, 0) totalLineMiscPrice,  \n" +
                "    IFNULL(totalSOMiscPrice, 0) totalSOMiscPrice,  \n" +
                "    (totalLinePrice + IFNULL(totalLineMiscPrice, 0) + IFNULL(totalSOMiscPrice, 0)) totalSOPrice  \n" +
                "FROM  \n" +
                "    tempTotalPrice;              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSupplierRMAReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierRMAReportDetails`(    \n" +
                "	IN pid INT    \n" +
                ")  \n" +
                "BEGIN	    \n" +
                "  \n" +
                "    #Supplier RMA Master Report    \n" +
                "    SELECT  pr.id,    \n" +
                "		pr.poNumber,    \n" +
                "        pr.poDate,    \n" +
                "        pr.packingSlipNumber,    \n" +
                "        pr.packingSlipDate,    \n" +
                "        pr.rmaShippingAddress,    \n" +
                "        pr.shippingInsurance,    \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,    \n" +
                "        pr.status,    \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,    \n" +
                "		us.emailAddress,    \n" +
                "		emp.phExtension    \n" +
                "		FROM packing_slip_material_receive pr     \n" +
                "			INNER JOIN genericcategory gcs ON gcs.gencCategoryID = pr.shippingMethodId AND gcs.isDeleted = 0     \n" +
                "            LEFT JOIN users us ON us.id = pr.updatedBy AND us.isDeleted = 0          \n" +
                "			LEFT JOIN employees emp ON emp.id = us.employeeID  AND emp.isDeleted = 0     \n" +
                "        WHERE pr.id = pid AND pr.receiptType = 'R' and pr.isDeleted = 0;    \n" +
                "  \n" +
                "	# Supplier RMA Line Level Details    \n" +
                "    SELECT 	prd.id AS prDetID,    \n" +
                "		prd.packingSlipSerialNumber,    \n" +
                "		fun_getMfgNameByPartID(prd.partID) mfgName,    \n" +
                "        fun_getMFGPNByID(prd.partID) mfgPN,    \n" +
                "        c.mfgPNDescription AS description,    \n" +
                "        IFNULL(c.rev, '') AS revision,    \n" +
                "        fun_getUOMAbbreviationByID(c.uom) uom,    \n" +
                "        IFNULL(prd.receivedQty,0) AS qty    \n" +
                "		FROM packing_slip_material_receive_det prd     \n" +
                "         INNER JOIN component c ON (c.id = prd.partID AND c.isDeleted = 0)     \n" +
                "        WHERE prd.refPackingSlipMaterialRecID = pid AND prd.isDeleted = 0    \n" +
                "		ORDER BY prd.packingSlipSerialNumber ASC;	    \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerPackingslipReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                \n" +
                "	IN cpid INT                \n" +
                ")  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	SELECT             \n" +
                "    cp.id,        \n" +
                "    cp.status,      \n" +
                "    cp.packingSlipNumber AS PackingSlip,            \n" +
                "    cp.packingSlipDate AS PackingSlipDate,            \n" +
                "    cp.poDate AS PODate,            \n" +
                "    cp.soNumber AS SalesOrderNumber,            \n" +
                "    cp.poNumber AS PONumber,            \n" +
                "    IFNULL(CONCAT('(',            \n" +
                "                    gc.gencCategoryCode,            \n" +
                "                    ') ',            \n" +
                "                    gc.gencCategoryName),            \n" +
                "            '-') AS ShippingMethod,            \n" +
                "    IFNULL(CONCAT('(',            \n" +
                "                    gcc.gencCategoryCode,            \n" +
                "                    ') ',            \n" +
                "                    gcc.gencCategoryName),            \n" +
                "            '-') AS PaymentMethod,            \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,        \n" +
                "    cp.soDate AS SODate,            \n" +
                "    cp.sorevision AS SORevision,            \n" +
                "	cp.billingAddress AS SoldToAddress,      \n" +
                "	cp.shippingAddress AS ShippingAddress,      \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),            \n" +
                "            '-') AS SalesOrderPersonName,      \n" +
                "	CONCAT(us.firstName,' ',us.lastName) AS  preparedBy, us.emailAddress, emp.phExtension        \n" +
                "FROM            \n" +
                "    customer_packingslip cp            \n" +
                "        LEFT JOIN            \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID            \n" +
                "        AND sm.isDeleted = 0            \n" +
                "        LEFT JOIN            \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId            \n" +
                "        AND gc.isDeleted = 0            \n" +
                "        AND gc.categoryType = 'Shipping Methods'            \n" +
                "        LEFT JOIN            \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = sm.termsID            \n" +
                "        AND gcc.isDeleted = 0            \n" +
                "        AND gcc.categoryType = 'Payment Terms'          \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID         \n" +
                "WHERE            \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid            \n" +
                "LIMIT 1;            \n" +
                "  \n" +
                "SELECT             \n" +
                "	cpd.lineID AS PSLine,      \n" +
                "    cpd.id AS cpDetID,      \n" +
                "    cpd.refCustPackingSlipID AS cpID,       \n" +
                "    cpd.partId,      \n" +
                "    IFNULL(cpd.shippedQty,0) AS ShippedQty,        \n" +
                "    IFNULL(cpd.remainingQty,0) AS RemainingQty,        \n" +
                "    cpd.custPOLineID AS POLine,      \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN      \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)      \n" +
                "		WHEN (c.partType = 3) THEN      \n" +
                "		c.custAssyPN      \n" +
                "		WHEN (c.partType = 2 OR c.partType = 4) THEN      \n" +
                "		c.mfgPN      \n" +
                "		ELSE      \n" +
                "		''      \n" +
                "	END) AS PartNumber,         \n" +
                "    FUN_GETUOMABBREVIATIONBYID(c.uom) AS UOM,            \n" +
                "    IFNULL(c.rev, '') AS Revision,       \n" +
                "    c.partType,      \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''),            \n" +
                "            IFNULL(CONCAT(', ', rr.name), ''),            \n" +
                "            IFNULL(CONCAT(', ',            \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),            \n" +
                "                    ''),            \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),            \n" +
                "            IFNULL(CONCAT(', HTS Code : ', c.htsCode), ''),            \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton            \n" +
                "FROM            \n" +
                "    customer_packingslip_det cpd      \n" +
                "        LEFT JOIN            \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id            \n" +
                "        AND cp.isDeleted = 0            \n" +
                "        LEFT JOIN            \n" +
                "    component c ON c.id = cpd.partid            \n" +
                "        LEFT JOIN            \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID            \n" +
                "        AND sd.isDeleted = 0           \n" +
                "        LEFT JOIN           \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID            \n" +
                "        LEFT JOIN            \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID      	      \n" +
                "        LEFT JOIN            \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id            \n" +
                "        AND ra.partID = cpd.partId            \n" +
                "        LEFT JOIN            \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id       \n" +
                "WHERE    \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		              \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerInvoiceReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(          \n" +
                "	IN cpID INT          \n" +
                ")  \n" +
                "BEGIN	          \n" +
                "  \n" +
                "    # Customer Invoice Master table details           \n" +
                "    SELECT  cp.id,          \n" +
                "		cp.invoiceNumber,          \n" +
                "        cp.invoiceDate,          \n" +
                "		cp.packingSlipNumber,                \n" +
                "		cp.packingSlipDate,                \n" +
                "		cp.poDate,                \n" +
                "		cp.poNumber,          \n" +
                "        cp.status,          \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR ', ') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,        \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,          \n" +
                "        cp.billingAddress,          \n" +
                "        cp.shippingAddress,          \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,          \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                            \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,           \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,          \n" +
                "        cp.systemID AS legalnumber,          \n" +
                "        CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,          \n" +
                "		us.emailAddress,          \n" +
                "		emp.phExtension          \n" +
                "		FROM customer_packingslip cp           \n" +
                "         LEFT JOIN                \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId           \n" +
                "        AND gcs.isDeleted = 0               \n" +
                "           LEFT JOIN                \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID           \n" +
                "        AND gcp.isDeleted = 0             \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID           \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;           \n" +
                "  \n" +
                "	# Customer Invoice line level details           \n" +
                "	SELECT            \n" +
                "		cpd.id,                \n" +
                "		cpd.partId,      \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,       \n" +
                "		cpd.lineID,          \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN             \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)          \n" +
                "		  WHEN (c.partType = 3) THEN           \n" +
                "			c.custAssyPN          \n" +
                "		  WHEN (c.partType = 2 OR c.partType = 4) THEN           \n" +
                "			c.mfgPN           \n" +
                "        ELSE                                                   \n" +
                "			  ''                                  \n" +
                "			END) AS mfgPN ,          \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN               \n" +
                "			'Other Charges'                \n" +
                "		ELSE                                                   \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                  \n" +
                "			END) AS  mfgName,          \n" +
                "		IFNULL(c.rev, '') AS revision,          \n" +
                "		fun_getUOMAbbreviationByID(c.uom) uom,          \n" +
                "		cpd.shippedQty AS qty,           \n" +
                "		cpd.unitPrice AS price,          \n" +
                "		(IFNULL(cpd.shippedQty,0)*IFNULL(cpd.unitPrice,0)) extPrice,            \n" +
                "		cpd.assyDescription AS DESCRIPTION          \n" +
                "	FROM                \n" +
                "		customer_packingslip_det cpd                \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                 \n" +
                "	WHERE                \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;           \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS           \n" +
                "    SELECT                        \n" +
                "			(SELECT SUM(cp.shippedQty * cp.unitPrice) FROM customer_packingslip_det cp           \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId           \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID in (select id from customer_packingslip_det where refCustPackingSlipId = cpID and isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                    \n" +
                "			(SELECT SUM(cpp.shippedQty * cpp.unitPrice) FROM customer_packingslip_det cpp           \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId           \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,          \n" +
                "			(SELECT SUM(csp.shippedQty * csp.unitPrice) FROM customer_packingslip_det csp           \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice          \n" +
                "		FROM customer_packingslip_det cpd               \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID            \n" +
                "		AND cpd.isdeleted=0;                \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,            \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,            \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,               \n" +
                "                IFNULL((totalLinePrice+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice FROM tempTotalPrice LIMIT 1;           \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseOrderReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(    \n" +
                "	IN pid INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "    # Purchase Order Master details    \n" +
                "    SELECT  po.id,     \n" +
                "		po.status,    \n" +
                "		po.poNumber,    \n" +
                "        po.poRevision,    \n" +
                "        po.poDate,    \n" +
                "        po.supplierAddress,    \n" +
                "		po.shippingAddress,    \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                      \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,    \n" +
                "        po.shippingInsurance,    \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,    \n" +
                "        po.poComment,    \n" +
                "        po.serialNumber,   \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,    \n" +
                "		us.emailAddress,    \n" +
                "		emp.phExtension    \n" +
                "	FROM purchase_order_mst po    \n" +
                "         INNER JOIN          \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID          \n" +
                "        AND gcs.isDeleted = 0          \n" +
                "        INNER JOIN          \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID          \n" +
                "        AND gcp.isDeleted = 0    \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy            \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID      \n" +
                "        where po.isDeleted = 0 and po.id = pid;    \n" +
                "  \n" +
                "	# Purchase Order Line details    \n" +
                "    SELECT  pod.lineID,    \n" +
                "		pod.id AS pODetID,    \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,    \n" +
                "        fun_getMFGPNByID(pod.mfgPartID) mfgPN,    \n" +
                "        IFNULL(c.rev, '') AS revision,    \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,    \n" +
                "		pod.supplierQuoteNumber,    \n" +
                "        pod.internalRef,    \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,    \n" +
                "        pod.qty,    \n" +
                "        fun_getUOMAbbreviationByID(c.uom) uom,    \n" +
                "        pod.price,    \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,      \n" +
                "        pod.partDescription AS description,    \n" +
                "        pod.lineComment    \n" +
                "	 FROM purchase_order_det pod    \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)     \n" +
                "	 WHERE pod.isDeleted = 0 and pod.refPurchaseOrderID = pid     \n" +
                "	 ORDER BY pod.lineID ASC;	    \n" +
                "  \n" +
                "	# Get purchase order Total Price table details     \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                  \n" +
                "		SELECT SUM(pd.qty * pd.price) totalLinePrice ,        \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,            \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd     \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID    \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 and c.partType = 4) totalPOMiscPrice            \n" +
                "		FROM purchase_order_det pd       \n" +
                "		WHERE pd.refPurchaseOrderID= pid    \n" +
                "		AND pd.isdeleted=0;             \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,    \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,    \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,            \n" +
                "				IFNULL((totalLinePrice+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0)),0) totalPOPrice FROM tempTotalPrice;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	    \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (627,'1.00','V1',' Bug #28972 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 627:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "UPDATE systemconfigrations sc SET sc.values = 'All Purchase Order or Sales Order by Flextron Circuit Assembly are subject to Terms and Conditions posted at <a href=\"https://www.flextronassembly.com/terms-conditions\"     \n" +
                "target=\"_blank\"> https://www.flextronassembly.com/terms-conditions</a>' WHERE sc.key = 'Terms & Condition';  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (628,'1.00','V1',' Bug #28972 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 628:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "UPDATE systemconfigrations sc SET sc.key = 'Terms & Conditions' WHERE sc.key = 'Terms & Condition';  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (629,'1.00','V1',' Bug #28972 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 629:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                  \n" +
                "    IN tableName VARCHAR(255),                  \n" +
                "    IN IDs LONGTEXT,                  \n" +
                "    IN deletedBy INT,                  \n" +
                "    IN entityID VARCHAR(255),                  \n" +
                "    IN refrenceIDs LONGTEXT,                  \n" +
                "    IN countList INT,                  \n" +
                "    IN pRoleID INT                  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "IF tableName=\"employees\" THEN                  \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"eco_type_category\" THEN                  \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"eco_type_values\" THEN                  \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"customers\" THEN                  \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"certificate_standards\" THEN                  \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"department\" THEN                  \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"genericcategory\" THEN                  \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"equipment\" THEN                  \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"master_templates\" THEN                  \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"operations\" THEN                  \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder\" THEN                  \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"roles\" THEN                  \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"standard_class\" THEN                  \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"dataelement\" THEN                  \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_cluster\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_operation\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_operation_part\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"entity\" THEN                  \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"salesordermst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"mfgcodemst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                  \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"shippedassembly\" THEN                  \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                  \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"br_label_template\" THEN                  \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"measurement_types\" THEN                  \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"uoms\" THEN                  \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"jobtypes\" THEN                  \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfqtype\" THEN                  \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"reasonmst\" THEN                  \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_sid_stock\" THEN                  \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"chart_templatemst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"shipping_requestdet\" THEN                  \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                  \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_lineitems\" THEN                  \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"requirement\" THEN                  \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"customer_addresses\" THEN                  \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfqforms\" THEN                  \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"who_bought_who\" THEN                  \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                  \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                  \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"cost_category\" THEN                  \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"chartypemst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"countrymst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"warehousemst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"binmst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rackmst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_logicalgroup\" THEN                  \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_memo\" THEN                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_memo(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"reserve_stock_request\" THEN                  \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_packagingmst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                  \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"scannermst\" THEN                  \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                  \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_price_break_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"department_location\" THEN                  \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"purchase_parts_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_partstatusmst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"labor_cost_template\" THEN                  \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"labeltemplatesmst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"reportmaster\" THEN                  \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"inspection_mst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"inspection_template_mst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN                  \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"supplier_quote_mst\" THEN                  \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN                  \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"calibration_details\" THEN                  \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"customer_packingslip\" THEN                  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"customer_packingslip_det\" THEN                  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"supplier_attribute_template_mst\" THEN                  \n" +
                "      CALL Sproc_checkDelete_supplier_attribute_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"freeonboardmst\" THEN                  \n" +
                "   CALL Sproc_checkDelete_freeonboard(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"generic_file_extension\" THEN                  \n" +
                "   CALL Sproc_checkDelete_genericFileExtension(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                  \n" +
                "IF tableName=\"assemblystock\" THEN                  \n" +
                "   CALL Sproc_checkDelete_assemblystock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                \n" +
                "IF tableName=\"customer_invoice\" THEN                  \n" +
                "   CALL Sproc_checkDelete_customer_invoice(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_boxserialno\" THEN                  \n" +
                "   CALL Sproc_checkDelete_wo_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_trans_boxserialno\" THEN                  \n" +
                "   CALL Sproc_checkDelete_wo_trans_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                 \n" +
                "IF tableName=\"bank_mst\" THEN          \n" +
                "   CALL Sproc_checkDelete_bank(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;          \n" +
                "IF tableName=\"cameramst\" THEN                  \n" +
                "   CALL Sproc_checkDelete_cameramst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;         \n" +
                "IF tableName=\"release_notes_detail\" THEN                  \n" +
                "   CALL Sproc_checkDelete_releasenotes_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;      \n" +
                "IF tableName=\"release_notes\" THEN                  \n" +
                "   CALL Sproc_checkDelete_releasenotes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;     \n" +
                "IF tableName=\"purchase_order_mst\" THEN                  \n" +
                "   CALL Sproc_checkDelete_purchase_order_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;     \n" +
                "IF tableName=\"purchase_order_det\" THEN                  \n" +
                "   CALL Sproc_checkDelete_purchase_order_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF; 		      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_memo` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_memo`(              \n" +
                "	IN tableName VARCHAR(255),              \n" +
                "	IN IDs LONGTEXT,              \n" +
                "	IN deletedBy INT,              \n" +
                "	IN entityID VARCHAR(255),              \n" +
                "	IN refrenceIDs LONGTEXT,              \n" +
                "	IN pRoleID INT              \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "		DECLARE v_StartIndex INT;                  \n" +
                "		DECLARE v_EndIndex INT;              \n" +
                "		DECLARE v_Id VARCHAR(10);              \n" +
                "		DECLARE v_InvoiceDetailIds LONGTEXT;          \n" +
                "  \n" +
                "		SET v_StartIndex = 0;                  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_memo_Ids_String_Into_Table;          \n" +
                "		CREATE TEMPORARY TABLE temp_Split_memo_Ids_String_Into_Table (id VARCHAR(10));           \n" +
                "		SET @SQL1 = CONCAT(\"INSERT INTO temp_Split_memo_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");                                                        				                                    				              \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                                                                                                                      \n" +
                "		EXECUTE stmt1;                                 \n" +
                "		DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_memo_Ids_String_Into_Table;   \n" +
                "  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO   \n" +
                "			SELECT id INTO v_Id FROM temp_Split_memo_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;    \n" +
                "			IF (refrenceIDs IS NOT NULL) THEN  \n" +
                "				SELECT GROUP_CONCAT(id) INTO v_InvoiceDetailIds FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_Id AND FIND_IN_SET(refPackingSlipDetId, refrenceIDs) AND isDeleted = 0;  \n" +
                "			ELSE  \n" +
                "				SELECT GROUP_CONCAT(id) INTO v_InvoiceDetailIds FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_Id AND isDeleted = 0;  \n" +
                "			END IF;   \n" +
                "			CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName, v_InvoiceDetailIds, deletedBy, entityID, refrenceIDs, pRoleID);      \n" +
                "  \n" +
                "			IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_Id AND isDeleted = 0) = 0) THEN  \n" +
                "				UPDATE packing_slip_material_receive SET isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime() WHERE id = v_Id AND isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;                  \n" +
                "		END WHILE;  	            \n" +
                "  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive WHERE id IN (IDs) AND isDeleted = 0;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(    \n" +
                "	IN pPageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pReceiptType VARCHAR(10),    \n" +
                "    IN pMfgCodeIds LONGTEXT,    \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,    \n" +
                "    IN pDueDate DATE,    \n" +
                "    IN pAdditionalDays INT,    \n" +
                "    IN pTermsAndAboveDays INT,    \n" +
                "    IN pInvoiceNumber VARCHAR(50),    \n" +
                "    IN pIsExactSearch TINYINT    \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "	DECLARE pOffset INT;                                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                            \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                       \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                              \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                              \n" +
                "			SELECT 		p.id,                          \n" +
                "					p.poNumber,                          \n" +
                "					p.mfgCodeID,                          \n" +
                "					p.supplierSONumber,                \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                          \n" +
                "					p.packingSlipDate,                          \n" +
                "					p.invoiceNumber,                          \n" +
                "					p.invoiceDate,                          \n" +
                "					p.creditMemoNumber,                          \n" +
                "					p.creditMemoDate,                          \n" +
                "					p.debitMemoNumber,                          \n" +
                "					p.debitMemoDate,                          \n" +
                "					p.receiptDate,                          \n" +
                "					p.description,                          \n" +
                "					p.billToAddress,                          \n" +
                "					p.shipToAddress,                          \n" +
                "					p.poVersion,                          \n" +
                "					p.isDeleted,                          \n" +
                "					p.receiptType,                          \n" +
                "					p.`status`,                          \n" +
                "					pinv.paymentNumber chequeNumber,                          \n" +
                "					pinv.paymentDate chequeDate,                          \n" +
                "					pinv.paymentAmount chequeAmount,                       \n" +
                "					pinv.bankAccountNo,                    \n" +
                "					pinv.bankAccountMasID,                    \n" +
                "					pinv.accountReference,                    \n" +
                "					gp.gencCategoryName paymentTypeName,        \n" +
                "                    gp.systemGenerated paymentTypeSystemGenerated,        \n" +
                "					pinv.paymentType,                  \n" +
                "					p.applyDate,                          \n" +
                "					p.refParentCreditDebitInvoiceno,                          \n" +
                "					p.refPackingSlipNumberForInvoice,                          \n" +
                "					p.invoiceTotalDue,                          \n" +
                "					p.isTariffInvoice,                          \n" +
                "					pinv.bankName,              									                                             \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                       \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                            \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                            \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                            \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                            \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                     \n" +
                "					m.mfgCode supplierCode,          \n" +
                "					(                              \n" +
                "						SELECT COUNT(1)                               \n" +
                "						  FROM genericfiles g                               \n" +
                "						 WHERE g.refTransID = p.id                               \n" +
                "						   and g.entityID = -13                      \n" +
                "						   AND g.gencFileOwnerType = 'supplier_invoice'                               \n" +
                "						   AND g.isDeleted =0                      \n" +
                "					) invoiceDocCount,                              \n" +
                "					(                              \n" +
                "						SELECT COUNT(1)                               \n" +
                "						 FROM genericfiles g                               \n" +
                "						WHERE g.refTransID = psm.id                               \n" +
                "						  and g.entityID = -14                      \n" +
                "						  AND g.gencFileOwnerType = 'packing_slip'                               \n" +
                "						  AND g.isDeleted =0                      \n" +
                "					) packingSlipDocCount,            \n" +
                "					pd.itemReceived,              \n" +
                "					pd.otherChargesItemReceived,                    \n" +
                "					pd.itemDisapproved,                      \n" +
                "					(                              \n" +
                "						CASE 	WHEN p.`receiptType` = 'I' THEN                               \n" +
                "								'Invoice'                               \n" +
                "							WHEN p.`receiptType` = 'C' THEN                               \n" +
                "								'Credit Memo'                               \n" +
                "							ELSE                               \n" +
                "								'Debit Memo'                               \n" +
                "						END                              \n" +
                "					) receiptMemoType,      									                                        \n" +
                "					(                              \n" +
                "						CASE 	WHEN p.`status` = 'PE' THEN                               \n" +
                "								'Pending'                               \n" +
                "							WHEN p.`status` = 'I' THEN                               \n" +
                "								'Investigate'                               \n" +
                "							WHEN p.`status` = 'A' THEN                               \n" +
                "								'Approved to Pay'                               \n" +
                "							ELSE                               \n" +
                "								'Paid'                               \n" +
                "						END                              \n" +
                "					) invoiceVerificationStatus,       \n" +
                "					ps.status parentInvoiceStatus,                                              \n" +
                "					ps.invoiceNumber refInvoiceNumber,                                  \n" +
                "					(IFNULL(pd.totalExtendedAmount, 0) + IFNULL((pe.totalCreditAmount * -1), 0) + IFNULL((pe.totalDebitAmount * -1), 0)) totalExtendedAmount,                      \n" +
                "					pe.totalCreditAmount,                      \n" +
                "					pe.totalDebitAmount,                      \n" +
                "					/*(                      \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0) totalExtendedAmount,                      \n" +
                "					) amountToPay,*/  \n" +
                "					IFNULL(pd.totalExtendedAmount, 0) amountToPay,  \n" +
                "					pd.packingDetailNote,          \n" +
                "					pd.approveLineCount,          \n" +
                "					DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),          \n" +
                "					INTERVAL IFNULL((max(case when p.termsDays != 0 then    \n" +
                "													p.termsDays-1    \n" +
                "											else p.termsDays end) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,          \n" +
                "					p.refPayementid,          \n" +
                "					max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,          \n" +
                "					max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,          \n" +
                "					psm.packingSlipModeStatus          \n" +
                "			FROM		packing_slip_material_receive p          \n" +
                "            inner join mfgcodemst m ON m.id = p.mfgCodeID          \n" +
                "			LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                      \n" +
                "			LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id            \n" +
                "		\");                    \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"                      \n" +
                "				left join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0                      \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'                   \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'                  \n" +
                "				left join (            \n" +
                "							select 	a.refPackingSlipMaterialRecID,                      \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                      \n" +
                "								sum(a.itemReceived) itemReceived,            \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                      \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                      \n" +
                "								sum(a.approveLineCount) approveLineCount,                      \n" +
                "								sum(a.extendedPrice) totalExtendedAmount                      \n" +
                "							from 	(            \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,             \n" +
                "										psm.packingSlipSerialNumber,             \n" +
                "										psm.approveNote,                      \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,            \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,            \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                      \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                      \n" +
                "										extendedPrice                      \n" +
                "									FROM 	packing_slip_material_receive_det psm                      \n" +
                "									WHERE 	psm.isDeleted = 0            \n" +
                "								) a                      \n" +
                "							group by a.refPackingSlipMaterialRecID            \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                      \n" +
                "				left join (            \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                       \n" +
                "									sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                      \n" +
                "									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount                      \n" +
                "							from 		packing_slip_material_receive ps                      \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                      \n" +
                "										and ps.isDeleted = 0                      \n" +
                "										and pd.isDeleted = 0                      \n" +
                "										and ps.receiptType in ('C','D')                      \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno            \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                      \n" +
                "				WHERE 	p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')                      \n" +
                "	\");                      \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                      \n" +
                "	ELSE                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                        \n" +
                "	END IF;	                                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                        \n" +
                "		SET pWhereClause = '1=1' ;                                                        \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN    \n" +
                "		IF pIsExactSearch = 1 THEN    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"    \n" +
                "									AND (    \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"    \n" +
                "									  \" ) \"    \n" +
                "						);    \n" +
                "		ELSE    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"    \n" +
                "									AND (    \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'\"    \n" +
                "									  \" ) \"    \n" +
                "						);    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                         \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                        \n" +
                "	ELSE	                                                        \n" +
                "		SET rowNumWhere = '';                                                        \n" +
                "	END IF;	                                                        \n" +
                "  \n" +
                "	/* to get total count of rows */                                                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                                        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                        \n" +
                "	EXECUTE query1;                                                        \n" +
                "	DEALLOCATE PREPARE query1;                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"             \n" +
                "			SELECT 	c.*,             \n" +
                "				case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed                      \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c             \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                        \n" +
                "	EXECUTE query2;                                                        \n" +
                "	DEALLOCATE PREPARE query2;                                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (630,'1.00','V1','Changes of invoice flow - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 630:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD extendedReceivedPrice DECIMAL(18,8) AFTER extendedPrice;  \n" +
                /* **************************** Add Script Version -> 22-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (631,'1.00','V1','Fix the issue of supplier invoice screen - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 631:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD lineVariance DECIMAL(18,8) AFTER extendedReceivedPrice;  \n" +
                /* **************************** Add Script Version -> 22-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (632,'1.00','V1','Fix the issue of supplier invoice screen - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 632:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(      \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pReceiptType VARCHAR(10),      \n" +
                "    IN pMfgCodeIds LONGTEXT,      \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "    IN pDueDate DATE,      \n" +
                "    IN pAdditionalDays INT,      \n" +
                "    IN pTermsAndAboveDays INT,      \n" +
                "    IN pInvoiceNumber VARCHAR(50),      \n" +
                "    IN pIsExactSearch TINYINT      \n" +
                ")  \n" +
                "BEGIN                                                          \n" +
                "	DECLARE pOffset INT;                                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                              \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                       \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                \n" +
                "			SELECT 		p.id,                            \n" +
                "					p.poNumber,                            \n" +
                "					p.mfgCodeID,                            \n" +
                "					p.supplierSONumber,                  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                            \n" +
                "					p.packingSlipDate,                            \n" +
                "					p.invoiceNumber,                            \n" +
                "					p.invoiceDate,                            \n" +
                "					p.creditMemoNumber,                            \n" +
                "					p.creditMemoDate,                            \n" +
                "					p.debitMemoNumber,                            \n" +
                "					p.debitMemoDate,                            \n" +
                "					p.receiptDate,                            \n" +
                "					p.description,                            \n" +
                "					p.billToAddress,                            \n" +
                "					p.shipToAddress,                            \n" +
                "					p.poVersion,                            \n" +
                "					p.isDeleted,                            \n" +
                "					p.receiptType,                            \n" +
                "					p.`status`,                            \n" +
                "					pinv.paymentNumber chequeNumber,                            \n" +
                "					pinv.paymentDate chequeDate,                            \n" +
                "					pinv.paymentAmount chequeAmount,                         \n" +
                "					pinv.bankAccountNo,                      \n" +
                "					pinv.bankAccountMasID,                      \n" +
                "					pinv.accountReference,                      \n" +
                "					gp.gencCategoryName paymentTypeName,          \n" +
                "                    gp.systemGenerated paymentTypeSystemGenerated,          \n" +
                "					pinv.paymentType,                    \n" +
                "					p.applyDate,                            \n" +
                "					p.refParentCreditDebitInvoiceno,                            \n" +
                "					p.refPackingSlipNumberForInvoice,                            \n" +
                "					p.invoiceTotalDue,                            \n" +
                "					p.isTariffInvoice,                            \n" +
                "					pinv.bankName,              									                                               \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                         \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                              \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                              \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                       \n" +
                "					m.mfgCode supplierCode,            \n" +
                "					(                                \n" +
                "						SELECT COUNT(1)                                 \n" +
                "						  FROM genericfiles g                                 \n" +
                "						 WHERE g.refTransID = p.id                                 \n" +
                "						   and g.entityID = -13                        \n" +
                "						   AND g.gencFileOwnerType = 'supplier_invoice'                                 \n" +
                "						   AND g.isDeleted =0                        \n" +
                "					) invoiceDocCount,                                \n" +
                "					(                                \n" +
                "						SELECT COUNT(1)                                 \n" +
                "						 FROM genericfiles g                                 \n" +
                "						WHERE g.refTransID = psm.id                                 \n" +
                "						  and g.entityID = -14                        \n" +
                "						  AND g.gencFileOwnerType = 'packing_slip'                                 \n" +
                "						  AND g.isDeleted =0                        \n" +
                "					) packingSlipDocCount,              \n" +
                "					pd.itemReceived,                \n" +
                "					pd.otherChargesItemReceived,                      \n" +
                "					pd.itemDisapproved,                        \n" +
                "					(                                \n" +
                "						CASE 	WHEN p.`receiptType` = 'I' THEN                                 \n" +
                "								'Invoice'                                 \n" +
                "							WHEN p.`receiptType` = 'C' THEN                                 \n" +
                "								'Credit Memo'                                 \n" +
                "							ELSE                                 \n" +
                "								'Debit Memo'                                 \n" +
                "						END                                \n" +
                "					) receiptMemoType,      									                                          \n" +
                "					(                                \n" +
                "						CASE 	WHEN p.`status` = 'PE' THEN                                 \n" +
                "								'Pending'                                 \n" +
                "							WHEN p.`status` = 'I' THEN                                 \n" +
                "								'Investigate'                                 \n" +
                "							WHEN p.`status` = 'A' THEN                                 \n" +
                "								'Approved to Pay'                                 \n" +
                "							ELSE                                 \n" +
                "								'Paid'                                 \n" +
                "						END                                \n" +
                "					) invoiceVerificationStatus,         \n" +
                "					ps.status parentInvoiceStatus,                                                \n" +
                "					ps.invoiceNumber refInvoiceNumber,                                    \n" +
                "					pd.totalExtendedAmount,                        \n" +
                "					pe.totalCreditAmount,                        \n" +
                "					pe.totalDebitAmount,                        \n" +
                "					(                        \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                        \n" +
                "					) amountToPay,    \n" +
                "					pd.packingDetailNote,            \n" +
                "					pd.approveLineCount,            \n" +
                "					DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),            \n" +
                "					INTERVAL IFNULL((max(case when p.termsDays != 0 then      \n" +
                "													p.termsDays-1      \n" +
                "											else p.termsDays end) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,            \n" +
                "					p.refPayementid,            \n" +
                "					max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,            \n" +
                "					max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,            \n" +
                "					psm.packingSlipModeStatus            \n" +
                "			FROM		packing_slip_material_receive p            \n" +
                "            inner join mfgcodemst m ON m.id = p.mfgCodeID            \n" +
                "			LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                        \n" +
                "			LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id              \n" +
                "		\");                      \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"                        \n" +
                "				left join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0                        \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'                     \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'                    \n" +
                "				left join (              \n" +
                "							select 	a.refPackingSlipMaterialRecID,                        \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                        \n" +
                "								sum(a.itemReceived) itemReceived,              \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                        \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                        \n" +
                "								sum(a.approveLineCount) approveLineCount,                        \n" +
                "								sum(a.extendedPrice) totalExtendedAmount                        \n" +
                "							from 	(              \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,               \n" +
                "										psm.packingSlipSerialNumber,               \n" +
                "										psm.approveNote,                        \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,              \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,              \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                        \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                        \n" +
                "										extendedPrice                        \n" +
                "									FROM 	packing_slip_material_receive_det psm                        \n" +
                "									WHERE 	psm.isDeleted = 0              \n" +
                "								) a                        \n" +
                "							group by a.refPackingSlipMaterialRecID              \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                        \n" +
                "				left join (              \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                         \n" +
                "									sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                        \n" +
                "									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount                        \n" +
                "							from 		packing_slip_material_receive ps                        \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                        \n" +
                "										and ps.isDeleted = 0                        \n" +
                "										and pd.isDeleted = 0                        \n" +
                "										and ps.receiptType in ('C','D')                        \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno              \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                        \n" +
                "				WHERE 	p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')                        \n" +
                "	\");                        \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                        \n" +
                "	ELSE                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                          \n" +
                "	END IF;	                                                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                          \n" +
                "		SET pWhereClause = '1=1' ;                                                          \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                        \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN      \n" +
                "		IF pIsExactSearch = 1 THEN      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		ELSE      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                           \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                          \n" +
                "	ELSE	                                                          \n" +
                "		SET rowNumWhere = '';                                                          \n" +
                "	END IF;	                                                          \n" +
                "  \n" +
                "	/* to get total count of rows */                                                          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                                          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                          \n" +
                "	EXECUTE query1;                                                          \n" +
                "	DEALLOCATE PREPARE query1;                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"               \n" +
                "			SELECT 	c.*,               \n" +
                "				case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed                        \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c               \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                          \n" +
                "	EXECUTE query2;                                                          \n" +
                "	DEALLOCATE PREPARE query2;                                                         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                      \n" +
                "	IN pPageIndex INT,                                                                                            \n" +
                "	IN pRecordPerPage INT,                                                                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                  \n" +
                "	IN pPackingSlipID INT                                                                               \n" +
                ")  \n" +
                "BEGIN                                                                                  \n" +
                "	DECLARE pOffset INT;                                                                                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                              \n" +
                "	DECLARE v_ParentPackingSlipId INT;                            \n" +
                "	DECLARE v_InvoiceSlipId INT;                           \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                              \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                                       \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                   \n" +
                "	SELECT 	*,            \n" +
                "		(                              \n" +
                "			CASE                               \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'                              \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'                              \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'                              \n" +
                "				ELSE NULL                              \n" +
                "			END                              \n" +
                "		) AS receivedStatusValue            \n" +
                "	FROM 	(                                                                                     \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                                      \n" +
                "				CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                                                 \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel, 	                                                                  \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                                  \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                                  \n" +
                "				p.invoicePrice, 				p.disputedPrice,					                          \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,                                                                   \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName, 	                          \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,     	                       \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					                          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					                          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                                          \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                                   \n" +
                "				p.status, 					p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.lineVariance, 				p.refCreditDebitInvoiceNo,                                                                   \n" +
                "				p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                                                  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                             \n" +
                "				c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                             \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                                      \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                                    \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                                    \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                              \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                                  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                            \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,                  \n" +
                "				c.partType,                                   \n" +
                "				(                              \n" +
                "					CASE                              \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                              \n" +
                "							p.receivedStatus                              \n" +
                "						ELSE                               \n" +
                "							(SELECT receivedStatus                               \n" +
                "							FROM 	packing_slip_material_receive_det                               \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                               \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                \n" +
                "									AND isDeleted = 0 LIMIT 1)                              \n" +
                "					END                              \n" +
                "				) receivedStatus,			                              \n" +
                "				p.remark,                             \n" +
                "				p.comment,                \n" +
                "				p.internalRef,                \n" +
                "				p.purchaseInspectionComment,                           \n" +
                "				(                              \n" +
                "					CASE                              \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                              \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                      \n" +
                "						ELSE                               \n" +
                "							(SELECT COUNT(1)                               \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp                      \n" +
                "							WHERE EXISTS (                      \n" +
                "									SELECT 	1                               \n" +
                "									FROM 	packing_slip_material_receive_det pslip                      \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                               \n" +
                "											AND 	pslip.id = psmp.lineId                      \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                               \n" +
                "											AND	pslip.isDeleted = 0)                      \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                              \n" +
                "					END                              \n" +
                "				) AS purchaseRequirementCount,                              \n" +
                "				(                              \n" +
                "					CASE                              \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                              \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                              \n" +
                "						ELSE                              \n" +
                "							(SELECT COUNT(1)                               \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm                              \n" +
                "							WHERE 	EXISTS (                      \n" +
                "									SELECT 	1                      \n" +
                "									FROM 	packing_slip_material_receive_det psmr                      \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId                      \n" +
                "										AND	psmr.id = psm.lineId                      \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber                      \n" +
                "										AND 	psmr.isDeleted = 0                      \n" +
                "									)                      \n" +
                "								AND psm.inspectionStatus = 'R'                               \n" +
                "								AND psm.isDeleted = 0                      \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')                      \n" +
                "					END                              \n" +
                "				) AS rejectedPurchaseRequirementCount,                                \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                                                  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                            \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                                      \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                                      \n" +
                "				(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                                        \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                                        \n" +
                "				(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                             \n" +
                "				(                            \n" +
                "					CASE                            \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                            \n" +
                "						ELSE                             \n" +
                "							(SELECT `status`                             \n" +
                "							FROM 	packing_slip_material_receive_det                             \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                             \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                             \n" +
                "									AND isDeleted = 0)                      \n" +
                "					END                            \n" +
                "				) invoiceStatus,             \n" +
                "				(                            \n" +
                "					CASE                            \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                            \n" +
                "						ELSE                             \n" +
                "							(SELECT refCreditDebitInvoiceNo                             \n" +
                "							FROM 	packing_slip_material_receive_det                             \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                             \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                             \n" +
                "									AND isDeleted = 0)                      \n" +
                "					END                            \n" +
                "				) invoiceLineHasMemo,                                        \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                                     \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd                       \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'                      \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id                      \n" +
                "					AND pd.partId = p.partID) commentCount,                 \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0) psInspectionStatus,      \n" +
                "				p.refPackingSlipIdForRma,      \n" +
                "				p.refInvoiceIdForRma,      \n" +
                "				p.refPackingSlipForRma,      \n" +
                "				p.refInvoiceForRma,      \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,      \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber      \n" +
                "		FROM		packing_slip_material_receive_det p                                                                          \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                                  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL                                                      \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                                   \n" +
                "		AND 		p.isDeleted = 0            \n" +
                "	) a;                                                                                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                            \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                                    \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                                  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID                       \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)                      \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)                      \n" +
                "	AND			ps.receiptType = 'P'                                                                        \n" +
                "	AND			psm.isDeleted = 0                      \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                                \n" +
                "  \n" +
                "	-- Set received qty detail                                                                                        \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                            \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,             \n" +
                "		r.pendingQty = (r.orderedQty - IFNULL(q.totalReceivedQty,0))            \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                            \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;                      \n" +
                "	ELSE                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                            \n" +
                "		SET pWhereClause = '1=1' ;                                                                                            \n" +
                "	END IF;	                                                                                    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                             \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                            \n" +
                "	ELSE	                                                                                            \n" +
                "		SET rowNumWhere = '';                                                                                            \n" +
                "	END IF;	                                                                                            \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                            \n" +
                "	EXECUTE query1;                                                                                            \n" +
                "	DEALLOCATE PREPARE query1;                                                                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                            \n" +
                "	EXECUTE query2;                                                                                            \n" +
                "	DEALLOCATE PREPARE query2;           \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceTotalDue As invoiceTotalDue FROM packing_slip_material_receive WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");                          \n" +
                "	PREPARE query3 FROM @SQLStatement3;                          \n" +
                "	EXECUTE query3;                          \n" +
                "	DEALLOCATE PREPARE query3;                                                                                               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCreditDebitMemoDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getCreditDebitMemoDetails`(        \n" +
                "	IN pInvoiceID INT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE v_InvoiceAmount DECIMAL(18,8);   \n" +
                "	DECLARE v_InvoiceReceivedAmount DECIMAL(18,8);  \n" +
                "	DECLARE v_StringOfIds VARCHAR(10000);    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempInvoiceDet;        \n" +
                "	CREATE TEMPORARY TABLE tempInvoiceDet AS        \n" +
                "	SELECT 	id, refPackingSlipMaterialRecID, extendedPrice, extendedReceivedPrice, refCreditDebitInvoiceNo, refPackingSlipDetId        \n" +
                "	FROM 	packing_slip_material_receive_det        \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pInvoiceID        \n" +
                "			AND isDeleted = 0;        \n" +
                "  \n" +
                "	SELECT SUM(extendedPrice), SUM(extendedReceivedPrice), GROUP_CONCAT(refCreditDebitInvoiceNo) INTO v_InvoiceAmount, v_InvoiceReceivedAmount, v_StringOfIds FROM tempInvoiceDet;        \n" +
                "  \n" +
                "	SELECT 		SUM(CASE WHEN p.receiptType = 'D' THEN psd.extendedPrice ELSE 0 END) debitMemoAmount,         \n" +
                "			SUM(CASE WHEN p.receiptType = 'C' THEN psd.extendedPrice ELSE 0 END) creditMemoAmount,        \n" +
                "			v_InvoiceAmount invoiceAmount,  \n" +
                "			v_InvoiceReceivedAmount invoiceReceivedAmount  \n" +
                "	FROM 		packing_slip_material_receive_det psd        \n" +
                "	INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND p.isDeleted = 0        \n" +
                "	WHERE 		FIND_IN_SET(p.id, v_StringOfIds)      \n" +
                "				AND psd.isDeleted = 0;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_memo` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_memo`(                \n" +
                "	IN tableName VARCHAR(255),                \n" +
                "	IN IDs LONGTEXT,                \n" +
                "	IN deletedBy INT,                \n" +
                "	IN entityID VARCHAR(255),                \n" +
                "	IN refrenceIDs LONGTEXT,                \n" +
                "	IN pRoleID INT                \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "		DECLARE v_StartIndex INT;                    \n" +
                "		DECLARE v_EndIndex INT;                \n" +
                "		DECLARE v_Id VARCHAR(10);                \n" +
                "		DECLARE v_InvoiceDetailIds LONGTEXT;            \n" +
                "  \n" +
                "		SET v_StartIndex = 0;                    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_memo_Ids_String_Into_Table;            \n" +
                "		CREATE TEMPORARY TABLE temp_Split_memo_Ids_String_Into_Table (id VARCHAR(10));             \n" +
                "		SET @SQL1 = CONCAT(\"INSERT INTO temp_Split_memo_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");                                                        				                                    				                \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                                                                                                                        \n" +
                "		EXECUTE stmt1;                                   \n" +
                "		DEALLOCATE PREPARE stmt1;            \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_memo_Ids_String_Into_Table;     \n" +
                "  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO     \n" +
                "			SELECT id INTO v_Id FROM temp_Split_memo_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;      \n" +
                "			IF (refrenceIDs IS NOT NULL) THEN    \n" +
                "				SELECT GROUP_CONCAT(id) INTO v_InvoiceDetailIds FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_Id AND FIND_IN_SET(refPackingSlipDetId, refrenceIDs) AND isDeleted = 0;    \n" +
                "			ELSE    \n" +
                "				SELECT GROUP_CONCAT(id) INTO v_InvoiceDetailIds FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_Id AND isDeleted = 0;    \n" +
                "			END IF;     \n" +
                "  \n" +
                "			IF (v_InvoiceDetailIds IS NOT NULL) THEN  \n" +
                "				CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName, v_InvoiceDetailIds, deletedBy, entityID, refrenceIDs, pRoleID);        \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_Id AND isDeleted = 0) = 0) THEN    \n" +
                "				UPDATE packing_slip_material_receive SET isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime() WHERE id = v_Id AND isDeleted = 0;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;                    \n" +
                "		END WHILE;  	              \n" +
                "  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive WHERE id IN (IDs) AND isDeleted = 0;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (633,'1.00','V1','Fix the issue of supplier invoice screen - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 633:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "UPDATE systemconfigrations sc SET sc.key = 'Terms & Condition' WHERE sc.key = 'Terms & Conditions';  \n" +
                /* **************************** New Script -> 21-12-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (634,'1.00','V1',' Bug #28972 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 634:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-12-2020  *********************************** */
                "update rfq_parttypemst  \n" +
                "	set isDeleted = 0  \n" +
                " where id = -4  \n" +
                "   and isDeleted = 1;  \n" +
                "  \n" +
                "update component_requirefunctionaltype cr  \n" +
                "   set partTypeID = -4  \n" +
                "where cr.partTypeID = (select id  \n" +
                "						from (select rp.id  \n" +
                "							  from rfq_parttypemst rp  \n" +
                "							 where rp.partTypeName = 'PCB'  \n" +
                "							   and rp.isDeleted = 0  \n" +
                "							union all  \n" +
                "							select refId as id  \n" +
                "							  from component_fields_genericalias_mst  \n" +
                "							 where refTableName = 'rfq_parttypemst'  \n" +
                "							   and refId != -4  \n" +
                "							   and alias in ('PCB','Bare PCB','Bare-PCB')  \n" +
                "							   and isDeleted = 0  \n" +
                "							   ) a limit 1);  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (635,'1.00','V1','update functional type PCB to Bare PCB - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 635:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-12-2020  *********************************** */
                "ALTER TABLE purchase_order_mst ADD COLUMN poWorkingStatus VARCHAR(5) DEFAULT 'P' COMMENT 'P-In Progress, C-Completed, CA-Canceled';  \n" +
                /* **************************** New Script -> 23-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePricingDetailsByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePricingDetailsByPartID`(                                                          \n" +
                "	IN pPartID INT(11)      \n" +
                ")  \n" +
                "BEGIN             \n" +
                "		  DROP TEMPORARY TABLE IF EXISTS tempSupplierQuote;  \n" +
                "CREATE TEMPORARY TABLE IF NOT EXISTS tempSupplierQuote  \n" +
                "SELECT MAX(sqm.id) id,sqm.supplierid   \n" +
                "FROM   \n" +
                "                    supplier_quote_parts_det sqpd   \n" +
                "                               JOIN supplier_quote_mst SQM ON SQM.id=sqpd.supplierQuoteMstID AND SQM.isdeleted=0  \n" +
                "                              WHERE sqpd.partid=pPartID AND sqpd.isDeleted=0 GROUP BY sqm.supplierid;  \n" +
                "SELECT SQPP.id,      \n" +
                "		SQPP.supplierQuotePartDetID,      \n" +
                "                SQPP.itemNumber,      \n" +
                "                SQPP.qty,      \n" +
                "                SQPP.`min`,      \n" +
                "                SQPP.mult,      \n" +
                "                SQPP.stock,      \n" +
                "                SQPP.packageID,      \n" +
                "                SQPP.reeling,      \n" +
                "                SQPP.NCNR,      \n" +
                "                SQPP.leadTime,      \n" +
                "                SQPP.UnitOfTime,      \n" +
                "                SQPP.UnitPrice,      \n" +
                "                SQPP.negotiatePrice,  \n" +
                "                SQM.quoteNumber,  \n" +
                "                SQM.supplierID,  \n" +
                "                mg.mfgCode,  \n" +
                "                mg.mfgName Supplier  \n" +
                "                FROM   \n" +
                "                    supplier_quote_part_price SQPP JOIN supplier_quote_parts_det sqpd ON sqpd.id=SQPP.supplierQuotePartDetID  \n" +
                "                    JOIN supplier_quote_mst SQM ON SQM.id=sqpd.supplierQuoteMstID AND SQM.isdeleted=0  \n" +
                "                    JOIN mfgcodemst mg ON mg.id=SQM.supplierID AND mg.isdeleted=0  \n" +
                "                    WHERE SQPP.isdeleted=0 AND sqm.id IN (SELECT id FROM tempSupplierQuote);                                     \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(       \n" +
                "IN pSearch VARCHAR(100),              \n" +
                "IN pId INT,              \n" +
                "IN pMfgType VARCHAR(50),              \n" +
                "IN pRoHSStatusID VARCHAR(100),              \n" +
                "IN pMfgCodeId INT,              \n" +
                "IN pCategoryID INT,              \n" +
                "IN pIsContainCPN TINYINT,   \n" +
                "IN prefSupplierMfgpnComponentID INT ,      \n" +
                "IN ppackagingID INT,      \n" +
                "IN pstrictCustomPart TINYINT,      \n" +
                "IN psupplierID INT,  \n" +
                "IN pofftheself TINYINT      \n" +
                ")  \n" +
                "BEGIN                \n" +
                "   /*<===this logic is added to compare invert rohs category*/      \n" +
                "   /* this logic used in purchase order when supplier is strictly custom part */    \n" +
                "   IF(pstrictCustomPart=1)THEN   \n" +
                "   DROP TEMPORARY TABLE IF EXISTS tempcomponent;  \n" +
                "   IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "	SELECT smm.refMfgCodeMstID   \n" +
                "	FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID  \n" +
                "   UNION  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "   UNION  \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4) AND c.isdeleted=0;  \n" +
                "   ELSE  \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "   UNION  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "   UNION  \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;  \n" +
                "   END IF;    \n" +
                "          SELECT * FROM                          \n" +
                " (                          \n" +
                "	 SELECT `com`.`id`,                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                          \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,              \n" +
                "        `com`.`PIDCode`,            \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "        `com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                     \n" +
                "        `com`.`category`,      \n" +
                "        com.imageURL,      \n" +
                "        com.documentPath,      \n" +
                "        `com`.`mfgPNDescription`,            \n" +
                "        `com`.`minOperatingTemp`,              \n" +
                "        `com`.`maxOperatingTemp`,              \n" +
                "        `com`.`value`,              \n" +
                "        `com`.`partPackage`,              \n" +
                "        `com`.`powerRating`,              \n" +
                "        `com`.`functionalCategoryID`,              \n" +
                "        `com`.`mountingTypeID`,              \n" +
                "        `com`.`connecterTypeID`,              \n" +
                "        `com`.`noOfPosition`,              \n" +
                "        `com`.`noOfRows`,              \n" +
                "        `com`.`pitch`,              \n" +
                "        `com`.`pitchMating`,              \n" +
                "        `com`.`length`,              \n" +
                "        `com`.`width`,              \n" +
                "        `com`.`height`,              \n" +
                "        `com`.`voltage`,              \n" +
                "        `com`.`weight`,              \n" +
                "        `com`.`feature`,              \n" +
                "        `com`.`color`,              \n" +
                "        `com`.`partStatus`,              \n" +
                "        `com`.`uom`,              \n" +
                "        `com`.`uomClassID`,              \n" +
                "        `com`.`unit`,              \n" +
                "        `com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,    \n" +
                "		u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,       \n" +
                "                r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,              \n" +
                "               `com`.`partPackageID`,              \n" +
                "                `com`.`bomLock`,              \n" +
                "		`com`.`businessRisk`,              \n" +
                "		`com`.`costCategoryID`,              \n" +
                "		`com`.`deviceMarking`,              \n" +
                "		`com`.`driverToolRequired`,              \n" +
                "		`com`.`eau`,              \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                    \n" +
                "		`com`.`plannedValuePerBuild`,                    \n" +
                "		`com`.`programingRequired`,                    \n" +
                "		`com`.`rfqOnly`,                    \n" +
                "		`com`.`saftyStock`,                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                    \n" +
                "		`com`.`scrapValuePerBuild`,                    \n" +
                "		`com`.`selfLifeDays`,                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                    \n" +
                "		`com`.`temperatureCoefficient`,                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                    \n" +
                "		`com`.`temperatureCoefficientValue`,                    \n" +
                "		`com`.`trackSerialNumber`,                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,          \n" +
                "                com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,          \n" +
                "                fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                    \n" +
                "	FROM `component` AS `com`            \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID     \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0     \n" +
                "	WHERE `com`.isdeleted=0        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)   \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`)   \n" +
                "        AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)        \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "        AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "        AND com.mfgcodeid IN (SELECT refMfgCodeMstID FROM tempcomponent)  \n" +
                "        AND (com.iscustom=1 OR com.parttype=4 OR com.isCPN=1)      \n" +
                "    ) AS a                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                      \n" +
                "	)                    \n" +
                "	ORDER BY mfgPN;        \n" +
                "  \n" +
                "ELSEIF(pofftheself=1 AND pstrictCustomPart=0) THEN        \n" +
                "/* this logic used in purchase order     \n" +
                "  packing slip    \n" +
                "  UMID management    \n" +
                "  Component Master    \n" +
                "  Reserve Stock    \n" +
                "  Component Assy DFM    \n" +
                "  Reports    \n" +
                "  Price Break Update    \n" +
                "  Customer Part    \n" +
                "  Good-Bad Mapping Part    \n" +
                "  Supplier Quote    \n" +
                "  Supplier RMA    \n" +
                "   */                       \n" +
                " SELECT * FROM                          \n" +
                " (                          \n" +
                "	 SELECT `com`.`id`,                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                          \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,              \n" +
                "        `com`.`PIDCode`,            \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "        `com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                     \n" +
                "        `com`.`category`,      \n" +
                "        com.imageURL,      \n" +
                "        com.documentPath,      \n" +
                "        `com`.`mfgPNDescription`,            \n" +
                "        `com`.`minOperatingTemp`,              \n" +
                "        `com`.`maxOperatingTemp`,              \n" +
                "        `com`.`value`,              \n" +
                "        `com`.`partPackage`,              \n" +
                "        `com`.`powerRating`,              \n" +
                "        `com`.`functionalCategoryID`,              \n" +
                "        `com`.`mountingTypeID`,              \n" +
                "        `com`.`connecterTypeID`,              \n" +
                "        `com`.`noOfPosition`,              \n" +
                "        `com`.`noOfRows`,              \n" +
                "        `com`.`pitch`,              \n" +
                "        `com`.`pitchMating`,              \n" +
                "        `com`.`length`,              \n" +
                "        `com`.`width`,              \n" +
                "        `com`.`height`,              \n" +
                "        `com`.`voltage`,              \n" +
                "        `com`.`weight`,              \n" +
                "        `com`.`feature`,              \n" +
                "        `com`.`color`,              \n" +
                "        `com`.`partStatus`,              \n" +
                "        `com`.`uom`,              \n" +
                "        `com`.`uomClassID`,              \n" +
                "        `com`.`unit`,              \n" +
                "        `com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                              \n" +
                "              u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,               \n" +
                "        r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,              \n" +
                "        `com`.`partPackageID`,              \n" +
                "        `com`.`bomLock`,              \n" +
                "		`com`.`businessRisk`,              \n" +
                "		`com`.`costCategoryID`,              \n" +
                "		`com`.`deviceMarking`,              \n" +
                "		`com`.`driverToolRequired`,              \n" +
                "		`com`.`eau`,              \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                    \n" +
                "		`com`.`plannedValuePerBuild`,                    \n" +
                "		`com`.`programingRequired`,                    \n" +
                "		`com`.`rfqOnly`,                    \n" +
                "		`com`.`saftyStock`,                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                    \n" +
                "		`com`.`scrapValuePerBuild`,                    \n" +
                "		`com`.`selfLifeDays`,                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                    \n" +
                "		`com`.`temperatureCoefficient`,                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                    \n" +
                "		`com`.`temperatureCoefficientValue`,                    \n" +
                "		`com`.`trackSerialNumber`,                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,          \n" +
                "                 com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,          \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                    \n" +
                "	FROM `component` AS `com`            \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID     \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0     \n" +
                "	 WHERE (`com`.isdeleted=0)        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)   \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)        \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "         AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)   \n" +
                "         AND com.iscustom=0 AND com.category=2 AND com.iscpn=FALSE  \n" +
                "    ) AS a                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                      \n" +
                "	)                    \n" +
                "	ORDER BY mfgPN;                    \n" +
                "  \n" +
                "  ELSE       \n" +
                "  /* this logic used in purchase order     \n" +
                "  packing slip    \n" +
                "  UMID management    \n" +
                "  Component Master    \n" +
                "  Reserve Stock    \n" +
                "  Component Assy DFM    \n" +
                "  Reports    \n" +
                "  Price Break Update    \n" +
                "  Customer Part    \n" +
                "  Good-Bad Mapping Part    \n" +
                "  Supplier Quote    \n" +
                "  Supplier RMA    \n" +
                "   */                 \n" +
                "   SELECT * FROM                    \n" +
                " (                    \n" +
                "	 SELECT `com`.`id`,                    \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/              \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,              \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,                              \n" +
                "		`com`.`PIDCode`,                              \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "		`com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,      \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                   \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,              \n" +
                "		`com`.`tolerance`,        \n" +
                "		`com`.`category`,      \n" +
                "                 com.imageURL,      \n" +
                "                 com.documentPath,      \n" +
                "                `com`.`mfgPNDescription`,               \n" +
                "		`com`.`minOperatingTemp`,              \n" +
                "		`com`.`maxOperatingTemp`,              \n" +
                "		`com`.`value`,              \n" +
                "		`com`.`partPackage`,              \n" +
                "		`com`.`powerRating`,              \n" +
                "		`com`.`functionalCategoryID`,              \n" +
                "		`com`.`mountingTypeID`,              \n" +
                "		`com`.`connecterTypeID`,              \n" +
                "		`com`.`noOfPosition`,              \n" +
                "		`com`.`noOfRows`,              \n" +
                "		`com`.`pitch`,              \n" +
                "		`com`.`pitchMating`,              \n" +
                "		`com`.`length`,              \n" +
                "		`com`.`width`,              \n" +
                "		`com`.`height`,              \n" +
                "		`com`.`voltage`,              \n" +
                "		`com`.`weight`,              \n" +
                "		`com`.`feature`,              \n" +
                "		`com`.`color`,                                          \n" +
                "		`com`.`partStatus`,                                          \n" +
                "		`com`.`uom`,                                        \n" +
                "                `com`.`uomClassID`,                          \n" +
                "		`com`.`unit`,                                \n" +
                "		`com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                              \n" +
                "		`com`.`packagingID`,                            \n" +
                "		`com`.`packaging`,                            \n" +
                "		u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,                                    \n" +
                "		r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,        \n" +
                "               `com`.`partPackageID`,                    \n" +
                "               `com`.`bomLock`,                    \n" +
                "		`com`.`businessRisk`,                    \n" +
                "		`com`.`costCategoryID`,                    \n" +
                "		`com`.`deviceMarking`,                    \n" +
                "		`com`.`driverToolRequired`,                    \n" +
                "		`com`.`eau`,                    \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,        \n" +
                "		`com`.`plannedValuePerBuild`,        \n" +
                "		`com`.`programingRequired`,        \n" +
                "		`com`.`rfqOnly`,        \n" +
                "		`com`.`saftyStock`,        \n" +
                "		`com`.`scrapRatePercentagePerBuild`,        \n" +
                "		`com`.`scrapValuePerBuild`,        \n" +
                "		`com`.`selfLifeDays`,        \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,        \n" +
                "		`com`.`temperatureCoefficient`,        \n" +
                "		`com`.`temperatureCoefficientUnit`,        \n" +
                "		`com`.`temperatureCoefficientValue`,        \n" +
                "		`com`.`trackSerialNumber`,        \n" +
                "		`com`.`refSupplierMfgpnComponentID`,        \n" +
                "                 com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,        \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,        \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`        \n" +
                "	FROM `component` AS `com`        \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))       \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID       \n" +
                "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0        \n" +
                "        WHERE `com`.`isdeleted` =0   \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)       \n" +
                "	AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "	AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)       \n" +
                "        AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)        \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)      \n" +
                "        AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)        \n" +
                "    ) AS a        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR        \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')        \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))              \n" +
                ")        \n" +
                "ORDER BY mfgPN;              \n" +
                "END IF;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (636,'1.00','V1',' Alter procedure Sproc_RetrieveSupplierQuotePricingDetailsByPartID-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 636:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2020  *********************************** */
                "DROP function IF EXISTS `fun_CalculateKitFeasibility`;  \n" +
                "CREATE FUNCTION `fun_CalculateKitFeasibility`(                                        \n" +
                "	pRefSalesOrderDetID INT(11),  \n" +
                "	pAssyID INT(11),  \n" +
                "	pIsConsolidated TINYINT(1),                                      \n" +
                "	pInputQty DECIMAL(18,8)  \n" +
                ") RETURNS decimal(18,8)  \n" +
                "BEGIN                                        \n" +
                "	DECLARE vKitQty DECIMAL(18,8);        \n" +
                "	DECLARE vCustomerId INT;  \n" +
                "  \n" +
                "	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    SELECT 		customerID     \n" +
                "	INTO		vCustomerId    \n" +
                "	FROM 		salesorderdet sd    \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID    \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;                                            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet                        \n" +
                "	(                                            \n" +
                "		mountingTypeID INT(11),  		                        \n" +
                "		mountingType VARCHAR(50),              \n" +
                "		connecterTypeID INT(11),              \n" +
                "		connecterType VARCHAR(50),              \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),	                                            \n" +
                "		shortageLine DECIMAL(18,8), 	                        \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),                                            \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),						                        \n" +
                "		shortageForInputQty DECIMAL(18,8),                                            \n" +
                "		releasedQty DECIMAL(18,8),		                        \n" +
                "		pendingQty DECIMAL(18,8),	                        \n" +
                "		releasePercentage DECIMAL(18,8),                        \n" +
                "		totalLine INT                                            \n" +
                "	);                      \n" +
                "  \n" +
                "	IF(pIsConsolidated = 1) THEN        \n" +
                "		/* Get consolidated parts detail from consolidated table */        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS                                                  \n" +
                "		SELECT 	k.id, 				k.refsalesORderDetid,	k.consolidatedLineItemIDs,	        \n" +
                "				k.mountingTypeID, 	k.connecterTypeID,		k.consolidatedMfgPNIDs, 	        \n" +
                "				k.numOfPosition, 	k.kitQPAWithDNP,		k.uomMismatchedStep,		        \n" +
                "				k.isNotRequiredKitAllocation,				k.uomID,    \n" +
                "				k.custPNID      \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail k        \n" +
                "		WHERE 	k.refSalesOrderDetID = pRefSalesOrderDetID AND k.isAssembly = 0 AND k.isDeleted = 0;        \n" +
                "	ELSE        \n" +
                "		/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS              \n" +
                "		SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs, 	        \n" +
                "			kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,        \n" +
                "			(    \n" +
                "				CASE     \n" +
                "					WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN     \n" +
                "						(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))        \n" +
                "					ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))        \n" +
                "				END    \n" +
                "			) AS kitQPAWithDNP,         \n" +
                "			kl.uomMismatchedStep,        \n" +
                "			k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID        \n" +
                "		FROM 	(        \n" +
                "				SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem, 	        \n" +
                "						(    \n" +
                "							CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */        \n" +
                "									THEN  MIN(c.mountingTypeID)          \n" +
                "								WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */          \n" +
                "									THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))         \n" +
                "								ELSE  -1         \n" +
                "							END    \n" +
                "						) mountingTypeID,        \n" +
                "						IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,        \n" +
                "						GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,        \n" +
                "						MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */        \n" +
                "				FROM 		kit_allocation_lineitems_alternatepart kal        \n" +
                "				JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1        \n" +
                "				LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0          \n" +
                "				WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID        \n" +
                "							AND 	kal.partID =  pAssyID        \n" +
                "							AND 	kal.isDeleted = 0        \n" +
                "							AND	c.isDeleted = 0        \n" +
                "				GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem        \n" +
                "		) AS kl         \n" +
                "		INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem;        \n" +
                "	END IF;		                                     \n" +
                "  \n" +
                "	/* Get available and allocated stock for selected assembly*/        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS           \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,         \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,        \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,        \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,        \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin        \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r          \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId         \n" +
                "					AND ks.assyID = (CASE WHEN pIsConsolidated = 1 THEN ks.assyID ELSE pAssyID END)        \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)            \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))         \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1                \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;      \n" +
                "  \n" +
                "	/* Create temporary table to get avilable and allocated stock against each line with shortage*/        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS            \n" +
                "	SELECT 		r.kitQPAWithDNP qpa,		t.allocatedUnit,              		        \n" +
                "			t.allocatedPin,			t.availableStock,			t.availableStockInPin,        \n" +
                "			r.mountingTypeID,   		(CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,        \n" +
                "			(    \n" +
                "				CASE     \n" +
                "					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN     \n" +
                "						(t.allocatedUnit/r.kitQPAWithDNP)         \n" +
                "					ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))         \n" +
                "				END    \n" +
                "			) feasibilityWithAllocation,                        \n" +
                "			(    \n" +
                "				CASE     \n" +
                "					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN     \n" +
                "						((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)                    \n" +
                "					ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))                    \n" +
                "				END    \n" +
                "			) feasibilityWithAvailableAndAllocatedStock,            \n" +
                "			(CASE                  \n" +
                "				WHEN r.uomMismatchedStep = 0 THEN 0                  \n" +
                "				ELSE     \n" +
                "					CASE                  \n" +
                "						WHEN r.connecterTypeID = -2 THEN                  \n" +
                "							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)         \n" +
                "									THEN 0         \n" +
                "									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))         \n" +
                "							END)           \n" +
                "						ELSE                  \n" +
                "							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)         \n" +
                "									THEN 0         \n" +
                "									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0))         \n" +
                "							END)              \n" +
                "					END                  \n" +
                "			END) shortagePerBuild        \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r        \n" +
                "	INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id;                           \n" +
                "  \n" +
                "	Insert into tempMountingTypeWiseKitDet  \n" +
                "	SELECT 		mountingTypeID,							fun_getMountingTypeNameByID(mountingTypeID) mountingType,        \n" +
                "			connecterTypeID, 						(CASE WHEN connecterTypeID IS NOT NULL THEN fun_getConnectorTypeNameByID(connecterTypeID) ELSE NULL END) connecterType,        \n" +
                "			MIN(feasibilityWithAllocation) feasibilityWithAllocation,	SUM(Shortage) shortageLine,        \n" +
                "			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,        \n" +
                "			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,     	SUM(shortageForInputQty) shortageForInputQty,        \n" +
                "			0 releasedQty,		vKitQty pendingQty,			0 releasePercentage,		COUNT(1) totalLine        \n" +
                "	FROM    	(        \n" +
                "				SELECT 	mountingTypeID, 		connecterTypeID, 		availableStock,		         \n" +
                "					IFNULL(feasibilityWithAllocation, 0) feasibilityWithAllocation,               \n" +
                "					CASE WHEN (shortagePerBuild > 0) THEN 1 ELSE 0 END Shortage,          \n" +
                "					IFNULL(feasibilityWithAvailableAndAllocatedStock, 0) feasibilityWithAvailableAndAllocatedStock,        \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,        \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty        \n" +
                "				FROM 	tempFeasibilityDetail t        \n" +
                "			) AS feasibilityDet        \n" +
                "	GROUP BY 	mountingTypeID, connecterTypeID        \n" +
                "	ORDER BY 	mountingType;     \n" +
                "  \n" +
                "    RETURN vKitQty;                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (637,'1.00','V1',' Modify function to calculate feasibility detail - Dharmishtha '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 637:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                      \n" +
                "	IN pFromPartID INT,          \n" +
                "    IN pNewEpicorType varchar(50),          \n" +
                "    IN pNewAssemblyType INT,          \n" +
                "    IN pNewMfgcodeID INT,          \n" +
                "    IN pNewCustAssyPN varchar(50),          \n" +
                "    IN pNewPartRev varchar(50),          \n" +
                "    IN pNewMfgPN varchar(100),          \n" +
                "    IN pNewAssyCode varchar(50),          \n" +
                "    IN pNewNickName varchar(50),          \n" +
                "    IN pNewPIDCode varchar(109),          \n" +
                "    IN pUserID Int,                      \n" +
                "    IN pUserRoleId Int,                      \n" +
                "    IN pIsAttribute tinyint,                      \n" +
                "    IN pIsSettings tinyint,                      \n" +
                "    IN pIsAdditionalAttibute tinyint,                      \n" +
                "    IN pIsPackagingDetail tinyint,                      \n" +
                "    IN pIsStandards tinyint,                      \n" +
                "    IN pIsRequiredFunctionalType tinyint,                      \n" +
                "    IN pIsRequiredMountingType tinyint,                      \n" +
                "    IN pIsPackagingAliasPart tinyint,                      \n" +
                "    IN pIsOtherPartName tinyint,                      \n" +
                "    IN pIsAlternatePart tinyint,                      \n" +
                "    IN pIsRoHSReplacementPart tinyint,                      \n" +
                "    IN pIsDriveTool tinyint,                      \n" +
                "    IN pIsProcessMaterial tinyint,                      \n" +
                "    IN pIsRequiredMattingParts tinyint,                      \n" +
                "    IN pIsPickupPad tinyint,                      \n" +
                "    IN pIsFunctionalTesingTool tinyint,                      \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                      \n" +
                "    IN pIsBOM tinyint                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "DECLARE vValidationPassed tinyint;          \n" +
                "DECLARE vFromPartCategory tinyint;          \n" +
                "DECLARE vFromMfgType varchar(5);      \n" +
                "DECLARE vCount INT;                    \n" +
                "DECLARE vToPartID INT;                    \n" +
                "DECLARE vUserRoleId INT;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "  BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed          \n" +
                "  \n" +
                "    select co.category, m.mfgType      \n" +
                "      into vFromPartCategory, vFromMfgType      \n" +
                "	  from component co      \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID      \n" +
                "	 where co.id = pFromPartID;      \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/      \n" +
                "		set pIsAttribute = 1;      \n" +
                "        set pIsAdditionalAttibute = 1;      \n" +
                "    end if;      \n" +
                "  \n" +
                "	set vCount = 0;          \n" +
                "    if (vFromPartCategory = 3) then # check category          \n" +
                "	   select count(1) into vCount                    \n" +
                "		 from component co                    \n" +
                "		where co.mfgcodeID = pNewMfgcodeID          \n" +
                "          and co.category = 3          \n" +
                "		  and co.custAssyPN = pNewCustAssyPN        \n" +
                "		  and co.rev = pNewPartRev                    \n" +
                "          and co.isDeleted = 0                    \n" +
                "		  and co.deletedAt is null;                   \n" +
                "		if vCount > 0 then          \n" +
                "			set vValidationPassed = 0;          \n" +
                "            select 'DUPLICATE_REV' as message;          \n" +
                "        end if;          \n" +
                "  \n" +
                "         set vCount = 0;          \n" +
                "		 select count(1) into vCount          \n" +
                "			 from component co          \n" +
                "			where co.nickName != pNewNickName          \n" +
                "              and co.category = 3          \n" +
                "              and co.custAssyPN = pNewCustAssyPN          \n" +
                "              and co.mfgcodeID = pNewMfgcodeID          \n" +
                "			  and co.isDeleted = 0          \n" +
                "			  and co.deletedAt is null;           \n" +
                "		  if vCount > 0 then          \n" +
                "			set vValidationPassed = 0;          \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,          \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName          \n" +
                "				 from component co          \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID          \n" +
                "				where co.nickName != pNewNickName          \n" +
                "				  and co.category = 3          \n" +
                "				  and co.custAssyPN = pNewCustAssyPN          \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID          \n" +
                "				  and co.isDeleted = 0          \n" +
                "				  and co.deletedAt is null          \n" +
                "				  limit 1;          \n" +
                "		  end if;          \n" +
                "  \n" +
                "		set vCount = 0;          \n" +
                "		 select count(1) into vCount          \n" +
                "			 from component co          \n" +
                "			where co.nickName = pNewNickName          \n" +
                "              and co.category = 3          \n" +
                "              and co.custAssyPN != pNewCustAssyPN          \n" +
                "              and co.mfgcodeID = pNewMfgcodeID          \n" +
                "			  and co.isDeleted = 0        \n" +
                "			  and co.deletedAt is null;          \n" +
                "		 if vCount > 0 then          \n" +
                "			set vValidationPassed = 0;          \n" +
                "				select 'DUPLICATE_NICKNAME' as message,          \n" +
                "                        custAssyPN          \n" +
                "				 from component co          \n" +
                "				where co.nickName = pNewNickName          \n" +
                "				  and co.category = 3          \n" +
                "				  and co.custAssyPN != pNewCustAssyPN          \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID          \n" +
                "				  and co.isDeleted = 0        \n" +
                "				  and co.deletedAt is null          \n" +
                "				  limit 1;          \n" +
                "		  end if;          \n" +
                "	end if;          \n" +
                "  \n" +
                "    set vCount = 0;          \n" +
                "		select count(1) into vCount                    \n" +
                "		 from component co                    \n" +
                "		where co.mfgcodeID = pNewMfgcodeID          \n" +
                "		  and co.mfgPN = pNewMfgPN                    \n" +
                "          and co.isDeleted = 0        \n" +
                "		  and co.deletedAt is null;                   \n" +
                "	 if vCount > 0 then          \n" +
                "		set vValidationPassed = 0;          \n" +
                "        select 'DUPLICATE_MFGPN' as message;          \n" +
                "     end if;          \n" +
                "  \n" +
                "    set vCount = 0;          \n" +
                "		select count(1) into vCount                    \n" +
                "		 from component co                    \n" +
                "		where co.PIDCode = pNewPIDCode                    \n" +
                "		  and co.isDeleted = 0        \n" +
                "		  and co.deletedAt is null;               \n" +
                "    if vCount > 0 then          \n" +
                "		set vValidationPassed = 0;          \n" +
                "        select 'DUPLICATE_PID' as message;          \n" +
                "     end if;          \n" +
                "  \n" +
                "		if vValidationPassed = 1 then  #1 passed, 0 failed               \n" +
                "				insert into component(                    \n" +
                "						isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                    \n" +
                "						custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                    \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                    \n" +
                "						partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                    \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                    \n" +
                "                        countryOfOrigin, htsCode, createdBy, createByRoleId,                    \n" +
                "                        updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,      \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean)          \n" +
                "                select isCustom, isCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                    \n" +
                "						pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                    \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                    \n" +
                "						partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                    \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                    \n" +
                "                        countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                    \n" +
                "                        pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,      \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID,isFluxNotApplicable,isWaterSoluble,isNoClean  \n" +
                "				 from component                    \n" +
                "				where id = pFromPartID;                    \n" +
                "  \n" +
                "				set vToPartID = LAST_INSERT_ID();                    \n" +
                "  \n" +
                "                insert into component_images                    \n" +
                "						(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                    \n" +
                "                select imageURL, vToPartID/*refComponentID*/,pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                    \n" +
                "						pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/,isDeleted                    \n" +
                "				 from component_images                    \n" +
                "				where refComponentID = pFromPartID                    \n" +
                "                  and isDeleted = false;                    \n" +
                "  \n" +
                "                insert into component_datasheets                    \n" +
                "						(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                    \n" +
                "                select datasheetURL, vToPartID/*refComponentID*/,pUserID /*createdBy*/,pUserID/*updatedBy*/,isDeleted,                    \n" +
                "						pUserRoleId/*createByRoleId*/, pUserRoleId/*updateByRoleId*/                    \n" +
                "				 from component_datasheets                    \n" +
                "				where refComponentID = pFromPartID                    \n" +
                "                  and isDeleted = false;                    \n" +
                "  \n" +
                "				IF pIsAttribute  then                        \n" +
                "					UPDATE `component` toPart,                       \n" +
                "					(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                      \n" +
                "					`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                      \n" +
                "					`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                      \n" +
                "					`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                      \n" +
                "					SET                      \n" +
                "					toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                      \n" +
                "					toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                      \n" +
                "					toPart.`mountingTypeID` = fromPart.mountingTypeID,                      \n" +
                "					toPart.`mountingTypeText` = fromPart.mountingTypeText,                      \n" +
                "					toPart.`operatingTemp` = fromPart.operatingTemp,                      \n" +
                "					toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                      \n" +
                "					toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                      \n" +
                "					toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                      \n" +
                "					toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                      \n" +
                "					toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                      \n" +
                "					toPart.`connecterTypeID` = fromPart.connecterTypeID,                      \n" +
                "					toPart.`connectorTypeText` = fromPart.connectorTypeText,                      \n" +
                "					toPart.`noOfPositionText` = fromPart.noOfPositionText,                      \n" +
                "					toPart.`noOfPosition` = fromPart.noOfPosition,                      \n" +
                "					toPart.`noOfRowsText` = fromPart.noOfRowsText,                      \n" +
                "					toPart.`noOfRows` = fromPart.noOfRows,                      \n" +
                "					toPart.`pitch` = fromPart.pitch,                      \n" +
                "					toPart.`pitchMating` = fromPart.pitchMating,                      \n" +
                "					toPart.`sizeDimension` = fromPart.sizeDimension,                      \n" +
                "					toPart.`length` = fromPart.length,                      \n" +
                "					toPart.`width` = fromPart.width,                      \n" +
                "					toPart.`heightText` = fromPart.heightText,                      \n" +
                "					toPart.`height` = fromPart.height,                      \n" +
                "					toPart.`updatedBy` = pUserID,                      \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "					toPart.`updatedAt` = current_timestamp()                      \n" +
                "					WHERE toPart.`id` = vToPartID;                      \n" +
                "				end if;                      \n" +
                "  \n" +
                "				IF pIsSettings then                      \n" +
                "					UPDATE `component` toPart,                       \n" +
                "					(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                      \n" +
                "					`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                      \n" +
                "					`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                      \n" +
                "					`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                      \n" +
                "					SET                      \n" +
                "					toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                      \n" +
                "					toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                      \n" +
                "					toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                      \n" +
                "					toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                      \n" +
                "					toPart.`selfLifeDays` = fromPart.selfLifeDays,                      \n" +
                "					toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                      \n" +
                "					toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                      \n" +
                "					toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                      \n" +
                "					toPart.`saftyStock` = fromPart.saftyStock,                      \n" +
                "					toPart.`eau` = fromPart.eau,                      \n" +
                "					toPart.`businessRisk` = fromPart.businessRisk,                      \n" +
                "					toPart.`driverToolRequired` = fromPart.driverToolRequired,                      \n" +
                "					toPart.`matingPartRquired` = fromPart.matingPartRquired,                      \n" +
                "					toPart.`pickupPadRequired` = fromPart.pickupPadRequired,                      \n" +
                "					toPart.`programingRequired` = fromPart.programingRequired,                      \n" +
                "					toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,                      \n" +
                "					toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,                      \n" +
                "					toPart.`bomLock` = fromPart.bomLock,                      \n" +
                "					toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,                      \n" +
                "					toPart.`updatedBy` = pUserID,                    \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "					toPart.`updatedAt` = current_timestamp()                      \n" +
                "					WHERE toPart.`id` = vToPartID;                    \n" +
                "  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`                      \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                      \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                      \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                      \n" +
                "  \n" +
                "				end if;                      \n" +
                "  \n" +
                "				IF pIsAdditionalAttibute then                      \n" +
                "					UPDATE `component` toPart,                       \n" +
                "					(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                       \n" +
                "					from component where id = pFromPartID) fromPart                      \n" +
                "					SET                      \n" +
                "					toPart.`tolerance` = fromPart.tolerance,                      \n" +
                "					toPart.`voltage` = fromPart.voltage,                      \n" +
                "					toPart.`value` = fromPart.value,                      \n" +
                "					toPart.`partPackage` = fromPart.partPackage,                      \n" +
                "					toPart.`powerRating` = fromPart.powerRating,                      \n" +
                "					toPart.`weight` = fromPart.weight,                      \n" +
                "					toPart.`feature` = fromPart.feature,                      \n" +
                "					toPart.`color` = fromPart.color,                      \n" +
                "					toPart.`updatedBy` = pUserID,                      \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "					toPart.`updatedAt` = current_timestamp()                      \n" +
                "					WHERE toPart.`id` = vToPartID;                      \n" +
                "				end if;                      \n" +
                "  \n" +
                "				IF pIsPackagingDetail then                      \n" +
                "					UPDATE `component` toPart,                       \n" +
                "					(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                      \n" +
                "					`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                      \n" +
                "					SET                      \n" +
                "					toPart.`deviceMarking` = fromPart.deviceMarking,                      \n" +
                "					toPart.`packagingID` = fromPart.packagingID,                      \n" +
                "					toPart.`minimum` = fromPart.minimum,                      \n" +
                "					toPart.`mult` = fromPart.mult,                      \n" +
                "					toPart.`packageQty` = fromPart.packageQty,                      \n" +
                "					toPart.`uomClassID` = fromPart.uomClassID,                      \n" +
                "					toPart.`uom` = fromPart.uom,                      \n" +
                "					toPart.`uomText` = fromPart.uomText,                      \n" +
                "					toPart.`unit` = fromPart.unit,                      \n" +
                "					toPart.`pcbPerArray` = fromPart.pcbPerArray,                      \n" +
                "					toPart.`grossWeight` = fromPart.grossWeight,                      \n" +
                "					toPart.`grossWeightUom` = fromPart.grossWeightUom,                      \n" +
                "					toPart.`packagingWeight` = fromPart.packagingWeight,                      \n" +
                "					toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                      \n" +
                "					toPart.`updatedBy` = pUserID,                      \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "					toPart.`updatedAt` = current_timestamp()                      \n" +
                "					WHERE toPart.`id` = vToPartID;                      \n" +
                "				end if;                      \n" +
                "  \n" +
                "				if pIsStandards then                      \n" +
                "					UPDATE `component` toPart,                       \n" +
                "					(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                      \n" +
                "					SET                      \n" +
                "					toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                      \n" +
                "					toPart.`htsCode` = fromPart.htsCode,                      \n" +
                "					toPart.`updatedBy` = pUserID,                      \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "					toPart.`updatedAt` = current_timestamp()                      \n" +
                "					WHERE toPart.`id` = vToPartID;                      \n" +
                "  \n" +
                "					INSERT INTO `component_standard_details`                      \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                      \n" +
                "					select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                      \n" +
                "					from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                      \n" +
                "					and not exists (select 1 from component_standard_details csd                      \n" +
                "					where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                      \n" +
                "				end if;                      \n" +
                "				if pIsRequiredMountingType then                      \n" +
                "					INSERT INTO `component_requiremountingtype`                      \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                      \n" +
                "					SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                      \n" +
                "					FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                       \n" +
                "					and not exists (select 1 from component_requiremountingtype                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                      \n" +
                "  \n" +
                "					set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                      \n" +
                "					if @requiredMountingTypecount>0 then                      \n" +
                "						UPDATE `component` toPart                      \n" +
                "						SET                      \n" +
                "						toPart.`mountingTypePartRequired` = true,                      \n" +
                "						toPart.`updatedBy` = pUserID,                      \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "						toPart.`updatedAt` = current_timestamp()                      \n" +
                "						WHERE toPart.`id` = vToPartID;                      \n" +
                "					end if;                      \n" +
                "				end if;                      \n" +
                "				if pIsRequiredFunctionalType then                      \n" +
                "					INSERT INTO `component_requirefunctionaltype`                      \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                      \n" +
                "					SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                      \n" +
                "					FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                      \n" +
                "					and not exists (select 1 from component_requirefunctionaltype                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                      \n" +
                "  \n" +
                "  \n" +
                "					set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                      \n" +
                "					if @requiredFunctionalTypecount>0 then                      \n" +
                "						UPDATE `component` toPart                      \n" +
                "						SET                      \n" +
                "						toPart.`functionalTypePartRequired` = true,                      \n" +
                "						toPart.`updatedBy` = pUserID,                      \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "						toPart.`updatedAt` = current_timestamp()                      \n" +
                "						WHERE toPart.`id` = vToPartID;                      \n" +
                "					end if;                      \n" +
                "  \n" +
                "				end if;                      \n" +
                "				if pIsPackagingAliasPart then                      \n" +
                "  \n" +
                "					set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                      \n" +
                "					set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                      \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                      \n" +
                "						# generate new packaging alias group id                      \n" +
                "						set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                      \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                      \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                      \n" +
                "						# update packaging alias group id as new packaging alias group id in component table                      \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                      \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                      \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                      \n" +
                "						INSERT INTO `component_packagingalias`                      \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                      \n" +
                "						values                      \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                      \n" +
                "					# Update data for packaging alias group id for  ToPartID	                      \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                      \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                      \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                      \n" +
                "						INSERT INTO `component_packagingalias`                      \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                      \n" +
                "						values                      \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                      \n" +
                "					# Update data for packaging alias group id for  FromPartID		                      \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                      \n" +
                "  \n" +
                "					end if;                      \n" +
                "				end if;                      \n" +
                "				if pIsOtherPartName then                      \n" +
                "					INSERT INTO `component_otherpn`                      \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                      \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                      \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                      \n" +
                "					and not exists (select 1 from component_otherpn                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                      \n" +
                "				end if;                      \n" +
                "				If pIsAlternatePart then                      \n" +
                "					INSERT INTO `component_alternatepn`                      \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                      \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                      \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                      \n" +
                "					and not exists (select 1 from component_alternatepn                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                      \n" +
                "				end if;                      \n" +
                "				if pIsRoHSReplacementPart then                      \n" +
                "  \n" +
                "					set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                      \n" +
                "					set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                      \n" +
                "					if @FromrohsgroupID is not null and @TorohsgroupID is not null then                      \n" +
                "						# generate new packaging alias group id                      \n" +
                "						set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                      \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                      \n" +
                "						  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                          \n" +
                "					   # update packaging alias group id as new packaging alias group id in component table                      \n" +
                "						 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                      \n" +
                "					elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                      \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                      \n" +
                "						INSERT INTO `component_rohsalternatepn`                      \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                      \n" +
                "						values                      \n" +
                "						(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                      \n" +
                "					# Update data for packaging alias group id for  ToPartID	                      \n" +
                "						update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                      \n" +
                "  \n" +
                "					elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                      \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                      \n" +
                "						INSERT INTO `component_rohsalternatepn`                      \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                      \n" +
                "						values                      \n" +
                "						(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                      \n" +
                "					# Update data for packaging alias group id for  FromPartID		                      \n" +
                "						update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                      \n" +
                "  \n" +
                "					end if;                      \n" +
                "				end if;                      \n" +
                "				if pIsDriveTool then                      \n" +
                "					INSERT INTO `component_drivetools`                      \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                      \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                      \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                      \n" +
                "					and not exists (select 1 from component_drivetools                       \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                      \n" +
                "  \n" +
                "					set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                      \n" +
                "					if @DriveToolcount>0 then                      \n" +
                "						UPDATE `component` toPart                      \n" +
                "						SET                      \n" +
                "						toPart.`driverToolRequired` = true,                      \n" +
                "						toPart.`updatedBy` = pUserID,                      \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "						toPart.`updatedAt` = current_timestamp()                      \n" +
                "						WHERE toPart.`id` = vToPartID;                      \n" +
                "					end if;                      \n" +
                "				end if;                      \n" +
                "				if pIsProcessMaterial then                      \n" +
                "					INSERT INTO `component_processmaterial`                      \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                      \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                      \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                      \n" +
                "					and not exists (select 1 from component_processmaterial                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                       \n" +
                "				end if;                      \n" +
                "				if pIsRequiredMattingParts then                      \n" +
                "					INSERT INTO `component_alternatepn`                      \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                      \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                      \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                      \n" +
                "					and not exists (select 1 from component_alternatepn                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                      \n" +
                "  \n" +
                "					set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                      \n" +
                "					if @mattingpartcount>0 then                      \n" +
                "						UPDATE `component` toPart                      \n" +
                "						SET                      \n" +
                "						toPart.`matingPartRquired` = true,                      \n" +
                "						toPart.`updatedBy` = pUserID,                      \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "						toPart.`updatedAt` = current_timestamp()                      \n" +
                "						WHERE toPart.`id` = vToPartID;                      \n" +
                "					end if;                      \n" +
                "  \n" +
                "				end if;                      \n" +
                "				if pIsPickupPad then                      \n" +
                "				INSERT INTO `component_alternatepn`                      \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                      \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                      \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                      \n" +
                "					and not exists (select 1 from component_alternatepn                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                      \n" +
                "  \n" +
                "					set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                      \n" +
                "					if @PickupPadcount>0 then                      \n" +
                "						UPDATE `component` toPart                      \n" +
                "						SET                      \n" +
                "						toPart.`pickupPadRequired` = true,                      \n" +
                "						toPart.`updatedBy` = pUserID,                      \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "						toPart.`updatedAt` = current_timestamp()                      \n" +
                "						WHERE toPart.`id` = vToPartID;                      \n" +
                "					end if;                      \n" +
                "				end if;          \n" +
                "  \n" +
                "				if pIsFunctionalTesingTool then                      \n" +
                "					INSERT INTO `component_alternatepn`                      \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                      \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                      \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                      \n" +
                "					and not exists (select 1 from component_alternatepn                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                      \n" +
                "  \n" +
                "					set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                      \n" +
                "					if @FunctionalTesingToolcount>0 then                      \n" +
                "						UPDATE `component` toPart                      \n" +
                "						SET                      \n" +
                "						toPart.`functionalTestingRequired` = true,                      \n" +
                "						toPart.`updatedBy` = pUserID,                      \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,              \n" +
                "						toPart.`updatedAt` = current_timestamp()                      \n" +
                "						WHERE toPart.`id` = vToPartID;                      \n" +
                "					end if;                      \n" +
                "				end if;                      \n" +
                "				if pIsFinctionalRestingEquipment then                      \n" +
                "					INSERT INTO `component_functionaltestingequipment`                      \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                      \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                      \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                      \n" +
                "					and not exists (select 1 from component_functionaltestingequipment                       \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                      \n" +
                "				end if;                      \n" +
                "  \n" +
                "                if (vFromPartCategory = 3) then          \n" +
                "					if pIsBOM then                    \n" +
                "						call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);              \n" +
                "					end if;                    \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                \n" +
                "                end if;          \n" +
                "				commit;          \n" +
                "			select * from component where id = vToPartID;          \n" +
                "        end if;                    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (638,'1.00','V1',' Update SP for Sproc_CreateAssemblyRevision - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 638:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det DROP lineVariance;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (639,'1.00','V1','Invoice flow changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 639:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD differenceQty DECIMAL(18,8) AFTER difference;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (640,'1.00','V1','Invoice flow changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 640:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD isMemoForPrice TINYINT(1) AFTER differenceQty;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (641,'1.00','V1','Invoice flow changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 641:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2020  *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD isMemoForQty TINYINT(1) AFTER isMemoForPrice;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (642,'1.00','V1','Invoice flow changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 642:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipDetailByPackingSlipNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailByPackingSlipNumber`(                                                                                    \n" +
                "	IN pPackingSlipNumber VARCHAR(100),                \n" +
                "	IN pMFGCodeId INT,    \n" +
                "	IN pCreditMemoType VARCHAR(5)                \n" +
                ")  \n" +
                "BEGIN                   \n" +
                "	DECLARE v_CountOfPSRecord INT;          \n" +
                "	DECLARE v_CountOfPSDraftRecord INT;              \n" +
                "	DECLARE v_CountOfSIRecord INT;                \n" +
                "	DECLARE v_CountOfPSDetailRecord INT;                \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(1000);             \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_PackingSlip_Validation_Error;                                                                                       \n" +
                "	CREATE TEMPORARY TABLE temp_PackingSlip_Validation_Error                                \n" +
                "	(                                                                                      \n" +
                "		IsSuccess BOOLEAN,                              \n" +
                "		ErrorCode INT,                \n" +
                "		FullMFGCode VARCHAR(1000)                \n" +
                "	);                                 \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord                 \n" +
                "	FROM 	packing_slip_material_receive                 \n" +
                "	WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                 \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)                \n" +
                "			AND isDeleted = 0;                \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN                \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 1, NULL);                \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                \n" +
                "	ELSEIF (v_CountOfPSRecord = 1) THEN                \n" +
                "		SELECT 	COUNT(1) INTO v_CountOfPSDraftRecord                 \n" +
                "		FROM 	packing_slip_material_receive                 \n" +
                "		WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                 \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)         \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN (packingSlipModeStatus = 'D' OR packingSlipModeStatus = 'P') ELSE packingSlipModeStatus = 'D' END)    \n" +
                "			AND isDeleted = 0;         \n" +
                "  \n" +
                "		IF (v_CountOfPSDraftRecord = 1) THEN        \n" +
                "			INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 5, NULL);                \n" +
                "			SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;               \n" +
                "		ELSE         \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(fullMFGCode) INTO v_CountOfSIRecord, v_StringOfMFGCode                \n" +
                "			FROM 	(                \n" +
                "					SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(mfgCodeID) fullMFGCode                \n" +
                "					FROM 	packing_slip_material_receive                 \n" +
                "					WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                 \n" +
                "							AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                \n" +
                "							AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'C' ELSE receiptType = 'I' END)                \n" +
                "							AND isDeleted = 0                \n" +
                "			) a;                \n" +
                "  \n" +
                "			IF (v_CountOfSIRecord = 0) THEN                \n" +
                "  \n" +
                "				SELECT 	COUNT(1) INTO v_CountOfPSDetailRecord                \n" +
                "				FROM 	packing_slip_material_receive_det                \n" +
                "				WHERE	deletedAt IS NULL                 \n" +
                "						AND refPackingSlipMaterialRecID IN (                \n" +
                "							SELECT 	id                 \n" +
                "							FROM 	packing_slip_material_receive                 \n" +
                "							WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                 \n" +
                "									AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                \n" +
                "									AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)                \n" +
                "									AND deletedAt IS NULL                \n" +
                "						);                \n" +
                "  \n" +
                "				IF (v_CountOfPSDetailRecord = 0) THEN                \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 4, v_StringOfMFGCode);                \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                \n" +
                "				ELSE                \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (TRUE, 0, NULL);                \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                \n" +
                "  \n" +
                "					-- pr.poNumber, pr.supplierSONumber,    \n" +
                "					SELECT 		pr.id, pr.mfgCodeID,    \n" +
                "							pr.poNumber, pr.poDate, pr.supplierSONumber,    \n" +
                "							/*(CASE WHEN pCreditMemoType = 'RC' THEN pr.poNumber ELSE null END) poNumber,     \n" +
                "							(CASE WHEN pCreditMemoType = 'RC' THEN pr.poDate ELSE NULL END) poDate, */    \n" +
                "							pr.packingSlipNumber, pr.packingSlipDate,          \n" +
                "							pr.receiptDate, pr.receiptType, pr.`status`, m.paymentTermsID, p.termsDays          \n" +
                "					FROM 		packing_slip_material_receive pr          \n" +
                "					JOIN 		mfgcodemst m ON m.id = pr.mfgCodeID          \n" +
                "					LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentTermsID          \n" +
                "					WHERE 		(CASE WHEN pCreditMemoType = 'RC' THEN pr.poNumber = pPackingSlipNumber ELSE pr.packingSlipNumber = pPackingSlipNumber END)                 \n" +
                "								AND pr.mfgCodeID = IFNULL(pMFGCodeId, pr.mfgCodeID)                \n" +
                "								AND (CASE WHEN pCreditMemoType = 'RC' THEN pr.receiptType = 'R' ELSE pr.receiptType = 'P' END)    \n" +
                "								AND pr.isDeleted = 0;                \n" +
                "  \n" +
                "					SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				                            \n" +
                "							CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                       \n" +
                "							p.nickname, 					p.partID, 						p.scanLabel, 	                                        \n" +
                "							p.receivedQty, 					p.packingSlipQty, 	                                        \n" +
                "							p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                        \n" +
                "							p.invoicePrice,					p.disputedPrice,					p.createdBy,                                         \n" +
                "							p.createdAt, 					p.updatedBy, 						p.updatedAt,                                        \n" +
                "							p.deletedBy, 					p.deletedAt, 						p.isDeleted,                                        \n" +
                "							p.approveNote, 					p.otherCharges,                                         \n" +
                "							p.status, 					p.refCreditDebitInvoiceNo,                                         \n" +
                "							p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                        \n" +
                "							fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                   \n" +
                "							c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                   \n" +
                "							c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                            \n" +
                "							0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                          \n" +
                "							p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                          \n" +
                "							fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                    \n" +
                "							c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                        \n" +
                "							sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                  \n" +
                "							sc.packagingID supplierPackagingId,                                                        \n" +
                "							'Pending' invoiceVerificationStatus,              \n" +
                "							p.receivedStatus,       \n" +
                "							(      \n" +
                "								CASE      \n" +
                "									WHEN p.receivedStatus = 'P' THEN 'Pending'      \n" +
                "									WHEN p.receivedStatus = 'A' THEN 'Approved'      \n" +
                "									WHEN p.receivedStatus = 'R' THEN 'Received'      \n" +
                "									ELSE NULL      \n" +
                "								END      \n" +
                "							) receivedStatusValue,      \n" +
                "							p.remark,                                                        \n" +
                "							fun_getUserNameByID(p.createdBy) createdByName,            \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,            \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,              \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					            \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					            \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt                                                              \n" +
                "					FROM		packing_slip_material_receive_det p                                                \n" +
                "					LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL                        \n" +
                "					LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                            \n" +
                "					WHERE   	p.refPackingSlipMaterialRecID IN (                \n" +
                "								SELECT 	id                 \n" +
                "								FROM 	packing_slip_material_receive                 \n" +
                "								WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                \n" +
                "										AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                \n" +
                "										AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)               \n" +
                "										AND isDeleted = 0               \n" +
                "							)                                                         \n" +
                "					AND 		p.isDeleted = 0;                \n" +
                "				END IF;                \n" +
                "			ELSE                \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 3, v_StringOfMFGCode);                \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                \n" +
                "			END IF;                \n" +
                "		END IF;        \n" +
                "	ELSEIF (v_CountOfPSRecord > 1) THEN                \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 2, NULL);                \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveInvoiceAndInvoiceLineDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(                                                                                                \n" +
                "	IN pInvoiceDetail JSON,                                                      \n" +
                "	IN pPackingSlipId INT,                \n" +
                "	IN pUserId VARCHAR(50),            \n" +
                "	IN pUserRoleId VARCHAR(50)                        \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;                        \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;                        \n" +
                "	DECLARE v_IdOfInvoice INT;                        \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                                                                                        \n" +
                "	BEGIN                                                                                                                        \n" +
                "		ROLLBACK;                                                                                                                        \n" +
                "		RESIGNAL;                                                                                                                        \n" +
                "	END;                                                                        \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                                                                                        \n" +
                "	BEGIN                                                                                                                        \n" +
                "		ROLLBACK;                                                                                                                        \n" +
                "		RESIGNAL;                                                                                                                        \n" +
                "	END;                                                                        \n" +
                "  \n" +
                "	START TRANSACTION;  */                                                                     \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS                                            \n" +
                "		SELECT 	*                                             \n" +
                "		FROM 	JSON_TABLE(                                            \n" +
                "			pInvoiceDetail,                                            \n" +
                "			\"$[*]\" COLUMNS(                                            \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",           \n" +
                "				poDate DATE PATH \"$.poDate\",                                     \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",                                            \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",                                            \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",                                            \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",                                            \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",                                            \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",                                            \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",                                            \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",                                            \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",                                            \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",                                            \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",                                            \n" +
                "				applyDate DATE PATH \"$.applyDate\",                              \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",                              \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",                        \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",          \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",          \n" +
                "				termsDays INT PATH \"$.termsDays\",    \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\"           \n" +
                "			)                                            \n" +
                "		) AS Invoice_Detail_JT;                     \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;                                                                                       \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail                                \n" +
                "		(                                                                                      \n" +
                "			packingSlipSerialNumber VARCHAR(50),                              \n" +
                "			refChargesTypeId INT,                    \n" +
                "			nickname VARCHAR(50),                \n" +
                "			partID INT,                \n" +
                "			refSupplierPartId INT,                \n" +
                "			scanLabel VARCHAR(1000),                              \n" +
                "			receivedQty DECIMAL(18,8),                \n" +
                "			packingSlipQty DECIMAL(18,8),                \n" +
                "			binID INT,                \n" +
                "			warehouseID INT,                \n" +
                "			parentWarehouseID INT,                \n" +
                "			invoicePrice DECIMAL(18,8),                \n" +
                "			purchasePrice DECIMAL(18,8),                \n" +
                "			disputedPrice DECIMAL(18,8),                \n" +
                "			approveNote VARCHAR(1000),                \n" +
                "			otherCharges INT,                \n" +
                "			`status` VARCHAR(1),                \n" +
                "			extendedPrice DECIMAL(18,8),                \n" +
                "			refCreditDebitInvoiceNo INT,                \n" +
                "			difference DECIMAL(18,8),                \n" +
                "			umidCreated TINYINT,                \n" +
                "			poReleaseNumber VARCHAR(1000),                \n" +
                "			packagingID INT,              \n" +
                "			receivedStatus VARCHAR(2),              \n" +
                "			remark LONGTEXT        \n" +
                "		);                     \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (                \n" +
                "			packingSlipSerialNumber,                              \n" +
                "			refChargesTypeId,                    \n" +
                "			nickname,                \n" +
                "			partID,                \n" +
                "			refSupplierPartId,                \n" +
                "			scanLabel,                \n" +
                "			receivedQty,                \n" +
                "			packingSlipQty,                \n" +
                "			binID,                \n" +
                "			warehouseID,                \n" +
                "			parentWarehouseID,             \n" +
                "			invoicePrice,       \n" +
                "			disputedPrice,                \n" +
                "			approveNote,                \n" +
                "			otherCharges,                \n" +
                "			`status`,                \n" +
                "			refCreditDebitInvoiceNo,                \n" +
                "			difference,                \n" +
                "			umidCreated,                \n" +
                "			poReleaseNumber,                \n" +
                "			packagingID,              \n" +
                "			receivedStatus,              \n" +
                "			remark                \n" +
                "		)                \n" +
                "		SELECT  packingSlipSerialNumber,                              \n" +
                "			refChargesTypeId,                    \n" +
                "			nickname,                \n" +
                "			partID,                \n" +
                "			refSupplierPartId,                \n" +
                "			scanLabel,                \n" +
                "			receivedQty,                \n" +
                "			packingSlipQty,                \n" +
                "			binID,                \n" +
                "			warehouseID,                \n" +
                "			parentWarehouseID,      \n" +
                "			invoicePrice,               \n" +
                "			disputedPrice,                \n" +
                "			approveNote,                \n" +
                "			otherCharges,                \n" +
                "			`status`,                \n" +
                "			refCreditDebitInvoiceNo,                \n" +
                "			difference,                \n" +
                "			umidCreated,                \n" +
                "			poReleaseNumber,                \n" +
                "			packagingID,              \n" +
                "			receivedStatus,              \n" +
                "			remark                  \n" +
                "		FROM 	packing_slip_material_receive_det                 \n" +
                "		WHERE 	isDeleted = 0                 \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;                \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;                        \n" +
                "  \n" +
                "		IF (v_CountOfInvoiceDetail > 0) THEN                        \n" +
                "			INSERT INTO packing_slip_material_receive (poNumber, poDate, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate, creditMemoNumber, creditMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice, creditMemoType, createdBy, updatedBy,paymentTermsID,termsDays)                        \n" +
                "			SELECT 	(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),     \n" +
                "				(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),    \n" +
                "				mfgCodeID,     \n" +
                "				(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),     \n" +
                "				packingSlipNumber, packingSlipDate,     \n" +
                "				(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),     \n" +
                "				(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),    \n" +
                "				(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),     \n" +
                "				(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),     \n" +
                "				receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,     \n" +
                "				(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),    \n" +
                "				pUserId, pUserId, paymentTermsID, termsDays          \n" +
                "			FROM 	temp_Invoice_Detail;	                        \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;                        \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive                        \n" +
                "			SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,         \n" +
                "				`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)         \n" +
                "			WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)                        \n" +
                "					AND isDeleted = 0;                        \n" +
                "		END IF;                        \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;                        \n" +
                "		IF (v_CountOfInvoiceLineDetail > 0) THEN                        \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)                        \n" +
                "			SELECT 	v_IdOfInvoice, packingSlipSerialNumber,                  \n" +
                "				(CASE WHEN (refChargesTypeId > 0) THEN refChargesTypeId ELSE NULL END),                \n" +
                "				nickname,                  \n" +
                "				(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),                    \n" +
                "				(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),                    \n" +
                "				scanLabel,                                  \n" +
                "				receivedQty,                  \n" +
                "				packingSlipQty,                  \n" +
                "				(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),                    \n" +
                "				(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),                    \n" +
                "				(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),                    \n" +
                "				invoicePrice,                  \n" +
                "				purchasePrice,                  \n" +
                "				disputedPrice,                  \n" +
                "				otherCharges,                 \n" +
                "				`status`,                  \n" +
                "				extendedPrice,                  \n" +
                "				(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),                    \n" +
                "				difference,                  \n" +
                "				umidCreated,                  \n" +
                "				poReleaseNumber,                  \n" +
                "				(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),                    \n" +
                "				receivedStatus,               \n" +
                "				remark,              \n" +
                "				pUserId,                  \n" +
                "				pUserId,            \n" +
                "				pUserRoleId,            \n" +
                "				pUserRoleId                        \n" +
                "			FROM 	temp_Invoice_Line_Detail;	                        \n" +
                "		END IF;                        \n" +
                "  \n" +
                "	-- COMMIT;                        \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                        \n" +
                "	IN pPageIndex INT,                                                                                              \n" +
                "	IN pRecordPerPage INT,                                                                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                    \n" +
                "	IN pPackingSlipID INT                                                                                 \n" +
                ")  \n" +
                "BEGIN                                                                                    \n" +
                "	DECLARE pOffset INT;                                                                                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                \n" +
                "	DECLARE v_ParentPackingSlipId INT;                              \n" +
                "	DECLARE v_InvoiceSlipId INT;                             \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                                \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                                         \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                     \n" +
                "	SELECT 	*,              \n" +
                "		(                                \n" +
                "			CASE                                 \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'                                \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'                                \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'                                \n" +
                "				ELSE NULL                                \n" +
                "			END                                \n" +
                "		) AS receivedStatusValue              \n" +
                "	FROM 	(                                                                                       \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                                        \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(8,1)) packingSlipSerialNumber,                                                                   \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel, 	                                                                    \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                                    \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                                    \n" +
                "				p.invoicePrice, 				p.disputedPrice,					                            \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,                                                                     \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName, 	                            \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,     	                         \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					                            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					                            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                                            \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                                     \n" +
                "				p.status, 					p.extendedPrice, 					p.extendedReceivedPrice,    \n" +
                "				(IFNULL(p.extendedPrice, 0) - IFNULL(p.extendedReceivedPrice, 0)) lineVariance, 			p.refCreditDebitInvoiceNo,                                                                     \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated, 						  \n" +
                "				p.poReleaseNumber,                              p.isMemoForPrice,					p.isMemoForQty,                                      \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                               \n" +
                "				c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                               \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                                        \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                                      \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                                      \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                                \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                                    \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                              \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,                    \n" +
                "				c.partType,                                     \n" +
                "				(                                \n" +
                "					CASE                                \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                \n" +
                "							p.receivedStatus                                \n" +
                "						ELSE                                 \n" +
                "							(SELECT receivedStatus                                 \n" +
                "							FROM 	packing_slip_material_receive_det                                 \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                                 \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                  \n" +
                "									AND isDeleted = 0 LIMIT 1)                                \n" +
                "					END                                \n" +
                "				) receivedStatus,			                                \n" +
                "				p.remark,                               \n" +
                "				p.comment,                  \n" +
                "				p.internalRef,                  \n" +
                "				p.purchaseInspectionComment,                             \n" +
                "				(                                \n" +
                "					CASE                                \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                        \n" +
                "						ELSE                                 \n" +
                "							(SELECT COUNT(1)                                 \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp                        \n" +
                "							WHERE EXISTS (                        \n" +
                "									SELECT 	1                                 \n" +
                "									FROM 	packing_slip_material_receive_det pslip                        \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                                 \n" +
                "											AND 	pslip.id = psmp.lineId                        \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                                 \n" +
                "											AND	pslip.isDeleted = 0)                        \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                                \n" +
                "					END                                \n" +
                "				) AS purchaseRequirementCount,                                \n" +
                "				(                                \n" +
                "					CASE                                \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                                \n" +
                "						ELSE                                \n" +
                "							(SELECT COUNT(1)                                 \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm                                \n" +
                "							WHERE 	EXISTS (                        \n" +
                "									SELECT 	1                        \n" +
                "									FROM 	packing_slip_material_receive_det psmr                        \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId                        \n" +
                "										AND	psmr.id = psm.lineId                        \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber                        \n" +
                "										AND 	psmr.isDeleted = 0                        \n" +
                "									)                        \n" +
                "								AND psm.inspectionStatus = 'R'                                 \n" +
                "								AND psm.isDeleted = 0                        \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')                        \n" +
                "					END                                \n" +
                "				) AS rejectedPurchaseRequirementCount,                                  \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                                                    \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                              \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                                        \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                                        \n" +
                "				(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                                          \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                                          \n" +
                "				(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                               \n" +
                "				(                              \n" +
                "					CASE                              \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                              \n" +
                "						ELSE                               \n" +
                "							(SELECT `status`                               \n" +
                "							FROM 	packing_slip_material_receive_det                               \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                               \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                               \n" +
                "									AND isDeleted = 0)                        \n" +
                "					END                              \n" +
                "				) invoiceStatus,               \n" +
                "				(                              \n" +
                "					CASE                              \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                              \n" +
                "						ELSE                               \n" +
                "							(SELECT refCreditDebitInvoiceNo                               \n" +
                "							FROM 	packing_slip_material_receive_det                               \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                               \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                               \n" +
                "									AND isDeleted = 0)                        \n" +
                "					END                              \n" +
                "				) invoiceLineHasMemo,                                          \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                                       \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd                         \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'                        \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id                        \n" +
                "					AND pd.partId = p.partID) commentCount,                   \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0) psInspectionStatus,        \n" +
                "				p.refPackingSlipIdForRma,        \n" +
                "				p.refInvoiceIdForRma,        \n" +
                "				p.refPackingSlipForRma,        \n" +
                "				p.refInvoiceForRma,        \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,        \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber        \n" +
                "		FROM		packing_slip_material_receive_det p                                                                            \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                                    \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL                                                        \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                                     \n" +
                "		AND 		p.isDeleted = 0              \n" +
                "	) a;                                                                                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                              \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                                      \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                                    \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID                         \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)                        \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)                        \n" +
                "	AND			ps.receiptType = 'P'                                                                          \n" +
                "	AND			psm.isDeleted = 0                        \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                                  \n" +
                "  \n" +
                "	-- Set received qty detail                                                                                          \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                              \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,               \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalReceivedQty,0))              \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                              \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;                        \n" +
                "	ELSE                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                              \n" +
                "		SET pWhereClause = '1=1' ;                                                                                              \n" +
                "	END IF;	                                                                                      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                               \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                              \n" +
                "	ELSE	                                                                                              \n" +
                "		SET rowNumWhere = '';                                                                                              \n" +
                "	END IF;	                                                                                              \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                              \n" +
                "	EXECUTE query1;                                                                                              \n" +
                "	DEALLOCATE PREPARE query1;                                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                              \n" +
                "	EXECUTE query2;                                                                                              \n" +
                "	DEALLOCATE PREPARE query2;             \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceTotalDue As invoiceTotalDue FROM packing_slip_material_receive WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");                            \n" +
                "	PREPARE query3 FROM @SQLStatement3;                            \n" +
                "	EXECUTE query3;                            \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetOldCreditDebitMemoData` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetOldCreditDebitMemoData`(                                        \n" +
                "	IN pPackingSlipDetId INT                                                         \n" +
                ")  \n" +
                "BEGIN                 \n" +
                "	SELECT 		a.id,  \n" +
                "			SUM(a.extendedPrice) extendedPrice,  \n" +
                "			a.refPackingSlipMaterialRecID,  \n" +
                "			a.refPackingSlipDetId,  \n" +
                "			GROUP_CONCAT(a.approveNote SEPARATOR '###') approveNote,  \n" +
                "			b.id packingSlipId,  \n" +
                "			b.status,  \n" +
                "			b.receiptType,  \n" +
                "			b.packingSlipNumber,  \n" +
                "			b.packingSlipDate,  \n" +
                "			b.creditMemoNumber,  \n" +
                "			b.debitMemoNumber,  \n" +
                "			(SELECT COUNT(1) FROM (SELECT id FROM packing_slip_material_receive_det c WHERE c.refPackingSlipMaterialRecID = b.id AND c.isDeleted = 0 GROUP BY c.refPackingSlipDetId) a) noOfLineInPackingSlip  \n" +
                "	FROM 		packing_slip_material_receive_det a   \n" +
                "	LEFT JOIN	packing_slip_material_receive b ON a.refPackingSlipMaterialRecID = b.id AND b.isDeleted = 0  \n" +
                "	WHERE 		refPackingSlipDetId = pPackingSlipDetId AND a.isDeleted = 0  \n" +
                "	GROUP BY 	a.refPackingSlipMaterialRecID, a.refPackingSlipDetId, b.id, b.receiptType, b.packingSlipNumber, b.packingSlipDate;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(              \n" +
                "	IN tableName VARCHAR(255),              \n" +
                "	IN IDs LONGTEXT,              \n" +
                "	IN deletedBy INT,              \n" +
                "	IN entityID VARCHAR(255),              \n" +
                "	IN refrenceIDs LONGTEXT,              \n" +
                "	IN pRoleID INT              \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "		DECLARE v_StartIndex INT;                  \n" +
                "		DECLARE v_EndIndex INT;              \n" +
                "		DECLARE v_Id VARCHAR(10);              \n" +
                "		DECLARE v_InvoiceId INT;          \n" +
                "		DECLARE v_InvoiceDetailId INT;          \n" +
                "		DECLARE v_MainInvoiceId INT;          \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);          \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);      \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);        \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);    \n" +
                "		DECLARE v_CountOfMemo INT;   \n" +
                "		DECLARE v_MemoType VARCHAR(10);     \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;  \n" +
                "		DECLARE v_IsMemoForQty TINYINT;  \n" +
                "  \n" +
                "		SET v_StartIndex = 0;                  \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');    	            \n" +
                "		PREPARE stmt2 FROM @SQL2;                \n" +
                "		EXECUTE stmt2;            \n" +
                "		DEALLOCATE PREPARE stmt2;          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;          \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));           \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");                                                        				                                    				              \n" +
                "		PREPARE stmt3 FROM @SQL3;                                                                                                                                                      \n" +
                "		EXECUTE stmt3;                                 \n" +
                "		DEALLOCATE PREPARE stmt3;          \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table; 	            \n" +
                "		WHILE v_StartIndex < v_EndIndex DO                 \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;            \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;          \n" +
                "			SELECT COUNT(1), receiptType INTO v_CountOfMemo, v_MemoType FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  \n" +
                "			IF (v_CountOfMemo > 0) THEN          \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;	          \n" +
                "  \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN      \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;          \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));           \n" +
                "					SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");                                                        				                                    				              \n" +
                "					PREPARE stmt4 FROM @SQL4;                                                                                                                                                      \n" +
                "					EXECUTE stmt4;                                 \n" +
                "					DEALLOCATE PREPARE stmt4;          \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive          \n" +
                "					SET 	`status` = 'I'          \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;       \n" +
                "  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;    \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;    \n" +
                "					UPDATE 	packing_slip_material_receive          \n" +
                "					SET 	`status` = 'A',    \n" +
                "						invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)     \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;             \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive ps          \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)          \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;       \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det   \n" +
                "					SET 	isDeleted = 1,   \n" +
                "						deletedBy = deletedBy,   \n" +
                "						deleteByRoleId = pRoleID,  \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN  \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;        	  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;          \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det          \n" +
                "					SET 	`status` = 'D',          \n" +
                "						refCreditDebitInvoiceNo = v_UpdatedMemoIds,  \n" +
                "						isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),  \n" +
                "						isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END),  \n" +
                "						difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END),  \n" +
                "						differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)  \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;   \n" +
                "				END IF;      \n" +
                "			END IF;          \n" +
                "			SET v_StartIndex = v_StartIndex + 1;                  \n" +
                "		END WHILE;                                 \n" +
                "  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');                \n" +
                "		PREPARE stmt1 FROM @SQL1;                \n" +
                "		EXECUTE stmt1;              \n" +
                "		DEALLOCATE PREPARE stmt1;   */       \n" +
                "  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (643,'1.00','V1','Invoice flow changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 643:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(                          \n" +
                "	IN ppageIndex INT,                          \n" +
                "	IN precordPerPage INT,                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN psupplierID VARCHAR(16000),    \n" +
                "	IN pshippingMethodId VARCHAR(16000),    \n" +
                "	IN psearchposotype VARCHAR(10),    \n" +
                "	IN psearchposotext VARCHAR(1000),    \n" +
                "	IN ppartIds VARCHAR(1000)               \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "  \n" +
                "	DECLARE pOffset INT;                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                         \n" +
                "	DECLARE vTimeZone VARCHAR(50);                         \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;         \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"                      \n" +
                "		SELECT pom.id,    \n" +
                "       pom.poNumber,    \n" +
                "       pom.supplierID,    \n" +
                "       pom.poDate,    \n" +
                "       pom.soNumber,    \n" +
                "       pom.soDate,    \n" +
                "       pom.termsID,    \n" +
                "       pom.shippingMethodID,    \n" +
                "       CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,    \n" +
                "       pom.status,    \n" +
                "       pom.poComment,    \n" +
                "       pom.shippingComment,    \n" +
                "       pom.serialNumber,    \n" +
                "       pom.poRevision,    \n" +
                "       pom.carrierAccountNumber,    \n" +
                "       CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,    \n" +
                "       pom.shippingInsurance,    \n" +
                "       pom.supplierAddress,    \n" +
                "       pom.shippingAddress,    \n" +
                "       pom.intermediateAddress,    \n" +
                "       CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,    \n" +
                "       pom.isBlanketPO,    \n" +
                "       m.mfgcode,   \n" +
                "       pom.poWorkingStatus,  \n" +
                "       case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,   \n" +
                "       (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-20 AND gc.refTransID=pom.id AND gc.isdeleted=0) poDocumentCount,    \n" +
                "       (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID    \n" +
                "        WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,    \n" +
                "        (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID    \n" +
                "        WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,    \n" +
                "       fun_getFOBById(pom.freeOnBoardId) freeOnBoard,    \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,    \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,     \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,    \n" +
                "       (select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,    \n" +
                "       fun_getUserNameByID(pom.updatedBy)updatedby,     \n" +
                "       fun_getUserNameByID(pom.createdBy) createdby,    \n" +
                "       fun_getRoleByID(pom.createByRoleId) createdbyRole,     \n" +
                "       fun_getRoleByID(pom.updateByRoleId) updatedbyRole,    \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt          \n" +
                "FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID    \n" +
                "LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0     \n" +
                "WHERE pom.isdeleted=0      \n" +
                "	\");     \n" +
                "  \n" +
                "  IF(psupplierID IS NOT NULL)THEN    \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');    \n" +
                "  END IF;    \n" +
                "  IF(pshippingMethodId IS NOT NULL)THEN    \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');    \n" +
                "  END IF;    \n" +
                "  IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN    \n" +
                "	IF(psearchposotype='C')THEN    \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');    \n" +
                "         ELSE    \n" +
                "         SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  =',psearchposotext,' OR pom.poNumber  =',psearchposotext,')');    \n" +
                "         END IF;    \n" +
                "  END IF;    \n" +
                "  IF(ppartIds IS NOT NULL)THEN    \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and     \n" +
                "   (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');    \n" +
                "  END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "		SET pWhereClause = '1=1' ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "	ELSE	                          \n" +
                "		SET rowNumWhere = '';                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                             \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query1 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(       \n" +
                "IN pSearch VARCHAR(100),              \n" +
                "IN pId INT,              \n" +
                "IN pMfgType VARCHAR(50),              \n" +
                "IN pRoHSStatusID VARCHAR(100),              \n" +
                "IN pMfgCodeId INT,              \n" +
                "IN pCategoryID INT,              \n" +
                "IN pIsContainCPN TINYINT,   \n" +
                "IN prefSupplierMfgpnComponentID INT ,      \n" +
                "IN ppackagingID INT,      \n" +
                "IN pstrictCustomPart TINYINT,      \n" +
                "IN psupplierID INT,  \n" +
                "IN pofftheself TINYINT      \n" +
                ")  \n" +
                "BEGIN                \n" +
                "   /*<===this logic is added to compare invert rohs category*/      \n" +
                "   /* this logic used in purchase order when supplier is strictly custom part */    \n" +
                "   IF(pstrictCustomPart=1)THEN   \n" +
                "   DROP TEMPORARY TABLE IF EXISTS tempcomponent;  \n" +
                "   IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "	SELECT smm.refMfgCodeMstID   \n" +
                "	FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID  \n" +
                "   UNION  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "   UNION  \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4) AND c.isdeleted=0;  \n" +
                "   ELSE  \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "   UNION  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "   UNION  \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;  \n" +
                "   END IF;    \n" +
                "          SELECT * FROM                          \n" +
                " (                          \n" +
                "	 SELECT `com`.`id`,                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                          \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "		com.packagingID,              \n" +
                "        `com`.`PIDCode`,            \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "        `com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                     \n" +
                "        `com`.`category`,      \n" +
                "        com.imageURL,      \n" +
                "        com.documentPath,      \n" +
                "        `com`.`mfgPNDescription`,            \n" +
                "        `com`.`minOperatingTemp`,              \n" +
                "        `com`.`maxOperatingTemp`,              \n" +
                "        `com`.`value`,              \n" +
                "        `com`.`partPackage`,              \n" +
                "        `com`.`powerRating`,              \n" +
                "        `com`.`functionalCategoryID`,              \n" +
                "        `com`.`mountingTypeID`,              \n" +
                "        `com`.`connecterTypeID`,              \n" +
                "        `com`.`noOfPosition`,              \n" +
                "        `com`.`noOfRows`,              \n" +
                "        `com`.`pitch`,              \n" +
                "        `com`.`pitchMating`,              \n" +
                "        `com`.`length`,              \n" +
                "        `com`.`width`,              \n" +
                "        `com`.`height`,              \n" +
                "        `com`.`voltage`,              \n" +
                "        `com`.`weight`,              \n" +
                "        `com`.`feature`,              \n" +
                "        `com`.`color`,              \n" +
                "        `com`.`partStatus`,              \n" +
                "        `com`.`uom`,              \n" +
                "        `com`.`uomClassID`,              \n" +
                "        `com`.`unit`,              \n" +
                "        `com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,    \n" +
                "		u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,       \n" +
                "                r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,              \n" +
                "               `com`.`partPackageID`,              \n" +
                "                `com`.`bomLock`,              \n" +
                "		`com`.`businessRisk`,              \n" +
                "		`com`.`costCategoryID`,              \n" +
                "		`com`.`deviceMarking`,              \n" +
                "		`com`.`driverToolRequired`,              \n" +
                "		`com`.`eau`,              \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                    \n" +
                "		`com`.`plannedValuePerBuild`,                    \n" +
                "		`com`.`programingRequired`,                    \n" +
                "		`com`.`rfqOnly`,                    \n" +
                "		`com`.`saftyStock`,                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                    \n" +
                "		`com`.`scrapValuePerBuild`,                    \n" +
                "		`com`.`selfLifeDays`,                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                    \n" +
                "		`com`.`temperatureCoefficient`,                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                    \n" +
                "		`com`.`temperatureCoefficientValue`,                    \n" +
                "		`com`.`trackSerialNumber`,                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,          \n" +
                "                com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,          \n" +
                "                fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                    \n" +
                "	FROM `component` AS `com`            \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID     \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0     \n" +
                "	WHERE `com`.isdeleted=0        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)   \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`)   \n" +
                "        AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)        \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "        AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "        AND com.mfgcodeid IN (SELECT refMfgCodeMstID FROM tempcomponent)  \n" +
                "        AND (com.iscustom=1 OR com.parttype=4 OR com.isCPN=1)      \n" +
                "    ) AS a                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                      \n" +
                "	)                    \n" +
                "	ORDER BY mfgPN;        \n" +
                "  \n" +
                "ELSEIF(pofftheself=1 AND pstrictCustomPart=0) THEN        \n" +
                "/* this logic used in purchase order     \n" +
                "  packing slip    \n" +
                "  UMID management    \n" +
                "  Component Master    \n" +
                "  Reserve Stock    \n" +
                "  Component Assy DFM    \n" +
                "  Reports    \n" +
                "  Price Break Update    \n" +
                "  Customer Part    \n" +
                "  Good-Bad Mapping Part    \n" +
                "  Supplier Quote    \n" +
                "  Supplier RMA    \n" +
                "   */                       \n" +
                " SELECT * FROM                          \n" +
                " (                          \n" +
                "	 SELECT `com`.`id`,                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                          \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "		com.packagingID,              \n" +
                "        `com`.`PIDCode`,            \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "        `com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                     \n" +
                "        `com`.`category`,      \n" +
                "        com.imageURL,      \n" +
                "        com.documentPath,      \n" +
                "        `com`.`mfgPNDescription`,            \n" +
                "        `com`.`minOperatingTemp`,              \n" +
                "        `com`.`maxOperatingTemp`,              \n" +
                "        `com`.`value`,              \n" +
                "        `com`.`partPackage`,              \n" +
                "        `com`.`powerRating`,              \n" +
                "        `com`.`functionalCategoryID`,              \n" +
                "        `com`.`mountingTypeID`,              \n" +
                "        `com`.`connecterTypeID`,              \n" +
                "        `com`.`noOfPosition`,              \n" +
                "        `com`.`noOfRows`,              \n" +
                "        `com`.`pitch`,              \n" +
                "        `com`.`pitchMating`,              \n" +
                "        `com`.`length`,              \n" +
                "        `com`.`width`,              \n" +
                "        `com`.`height`,              \n" +
                "        `com`.`voltage`,              \n" +
                "        `com`.`weight`,              \n" +
                "        `com`.`feature`,              \n" +
                "        `com`.`color`,              \n" +
                "        `com`.`partStatus`,              \n" +
                "        `com`.`uom`,              \n" +
                "        `com`.`uomClassID`,              \n" +
                "        `com`.`unit`,              \n" +
                "        `com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                              \n" +
                "              u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,               \n" +
                "        r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,              \n" +
                "        `com`.`partPackageID`,              \n" +
                "        `com`.`bomLock`,              \n" +
                "		`com`.`businessRisk`,              \n" +
                "		`com`.`costCategoryID`,              \n" +
                "		`com`.`deviceMarking`,              \n" +
                "		`com`.`driverToolRequired`,              \n" +
                "		`com`.`eau`,              \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                    \n" +
                "		`com`.`plannedValuePerBuild`,                    \n" +
                "		`com`.`programingRequired`,                    \n" +
                "		`com`.`rfqOnly`,                    \n" +
                "		`com`.`saftyStock`,                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                    \n" +
                "		`com`.`scrapValuePerBuild`,                    \n" +
                "		`com`.`selfLifeDays`,                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                    \n" +
                "		`com`.`temperatureCoefficient`,                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                    \n" +
                "		`com`.`temperatureCoefficientValue`,                    \n" +
                "		`com`.`trackSerialNumber`,                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,          \n" +
                "                 com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,          \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                    \n" +
                "	FROM `component` AS `com`            \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID     \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0     \n" +
                "	 WHERE (`com`.isdeleted=0)        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)   \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)        \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "         AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)   \n" +
                "         AND com.iscustom=0 AND com.category=2 AND com.iscpn=FALSE  \n" +
                "    ) AS a                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                      \n" +
                "	)                    \n" +
                "	ORDER BY mfgPN;                    \n" +
                "  \n" +
                "  ELSE       \n" +
                "  /* this logic used in purchase order     \n" +
                "  packing slip    \n" +
                "  UMID management    \n" +
                "  Component Master    \n" +
                "  Reserve Stock    \n" +
                "  Component Assy DFM    \n" +
                "  Reports    \n" +
                "  Price Break Update    \n" +
                "  Customer Part    \n" +
                "  Good-Bad Mapping Part    \n" +
                "  Supplier Quote    \n" +
                "  Supplier RMA    \n" +
                "   */                 \n" +
                "   SELECT * FROM                    \n" +
                " (                    \n" +
                "	 SELECT `com`.`id`,                    \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/              \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,              \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "		com.packagingID,                              \n" +
                "		`com`.`PIDCode`,                              \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "		`com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,      \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                   \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,              \n" +
                "		`com`.`tolerance`,        \n" +
                "		`com`.`category`,      \n" +
                "                 com.imageURL,      \n" +
                "                 com.documentPath,      \n" +
                "                `com`.`mfgPNDescription`,               \n" +
                "		`com`.`minOperatingTemp`,              \n" +
                "		`com`.`maxOperatingTemp`,              \n" +
                "		`com`.`value`,              \n" +
                "		`com`.`partPackage`,              \n" +
                "		`com`.`powerRating`,              \n" +
                "		`com`.`functionalCategoryID`,              \n" +
                "		`com`.`mountingTypeID`,              \n" +
                "		`com`.`connecterTypeID`,              \n" +
                "		`com`.`noOfPosition`,              \n" +
                "		`com`.`noOfRows`,              \n" +
                "		`com`.`pitch`,              \n" +
                "		`com`.`pitchMating`,              \n" +
                "		`com`.`length`,              \n" +
                "		`com`.`width`,              \n" +
                "		`com`.`height`,              \n" +
                "		`com`.`voltage`,              \n" +
                "		`com`.`weight`,              \n" +
                "		`com`.`feature`,              \n" +
                "		`com`.`color`,                                          \n" +
                "		`com`.`partStatus`,                                          \n" +
                "		`com`.`uom`,                                        \n" +
                "                `com`.`uomClassID`,                          \n" +
                "		`com`.`unit`,                                \n" +
                "		`com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                              \n" +
                "		`com`.`packagingID`,                            \n" +
                "		`com`.`packaging`,                            \n" +
                "		u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,                                    \n" +
                "		r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,        \n" +
                "               `com`.`partPackageID`,                    \n" +
                "               `com`.`bomLock`,                    \n" +
                "		`com`.`businessRisk`,                    \n" +
                "		`com`.`costCategoryID`,                    \n" +
                "		`com`.`deviceMarking`,                    \n" +
                "		`com`.`driverToolRequired`,                    \n" +
                "		`com`.`eau`,                    \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,        \n" +
                "		`com`.`plannedValuePerBuild`,        \n" +
                "		`com`.`programingRequired`,        \n" +
                "		`com`.`rfqOnly`,        \n" +
                "		`com`.`saftyStock`,        \n" +
                "		`com`.`scrapRatePercentagePerBuild`,        \n" +
                "		`com`.`scrapValuePerBuild`,        \n" +
                "		`com`.`selfLifeDays`,        \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,        \n" +
                "		`com`.`temperatureCoefficient`,        \n" +
                "		`com`.`temperatureCoefficientUnit`,        \n" +
                "		`com`.`temperatureCoefficientValue`,        \n" +
                "		`com`.`trackSerialNumber`,        \n" +
                "		`com`.`refSupplierMfgpnComponentID`,        \n" +
                "                 com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,        \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,        \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`        \n" +
                "	FROM `component` AS `com`        \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))       \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID       \n" +
                "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0        \n" +
                "        WHERE `com`.`isdeleted` =0   \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)       \n" +
                "	AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "	AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)       \n" +
                "        AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)        \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)      \n" +
                "        AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)        \n" +
                "    ) AS a        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR        \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')        \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))              \n" +
                ")        \n" +
                "ORDER BY mfgPN;              \n" +
                "END IF;              \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(                          \n" +
                "	IN ppageIndex INT,                          \n" +
                "	IN precordPerPage INT,                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN psupplierID VARCHAR(16000),    \n" +
                "	IN pshippingMethodId VARCHAR(16000),    \n" +
                "	IN psearchposotype VARCHAR(10),    \n" +
                "	IN psearchposotext VARCHAR(1000),    \n" +
                "	IN ppartIds VARCHAR(1000)                     \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "  \n" +
                "	DECLARE pOffset INT;                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                         \n" +
                "	DECLARE vTimeZone VARCHAR(50);                         \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;         \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"                      \n" +
                "		SELECT pod.id,    \n" +
                "       pod.refPurchaseOrderID,    \n" +
                "       CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,    \n" +
                "       pod.mfgPartID,    \n" +
                "       pod.packagingID,    \n" +
                "       pod.supplierPartID,    \n" +
                "       pod.partDescription,    \n" +
                "       pod.pcbPerArray,    \n" +
                "       pod.rohsStatusID,    \n" +
                "       pod.internalRef,    \n" +
                "       pod.qty,    \n" +
                "       pod.price,    \n" +
                "       pom.shippingMethodID,    \n" +
                "       (pod.qty * pod.price) extPrice,    \n" +
                "       pod.totalRelease,    \n" +
                "       pod.lineComment,    \n" +
                "       pod.lineID,    \n" +
                "       pod.supplierQuoteNumber,    \n" +
                "       pom.poDate,    \n" +
                "       pom.poRevision,    \n" +
                "       pom.soNumber,    \n" +
                "       pom.soDate,    \n" +
                "       c.mfgPN,    \n" +
                "       c.pidCode,    \n" +
                "       c.unit,    \n" +
                "       c.iscustom,  \n" +
                "       c.partType,    \n" +
                "       rr.name AS rohsName,    \n" +
                "       rr.rohsIcon,    \n" +
                "       cp.name AS packagingName,    \n" +
                "       mc.mfgCode,    \n" +
                "       mc.mfgName,    \n" +
                "       mc.id As mfgcodeID,    \n" +
                "       pom.poNumber,    \n" +
                "       pom.status,  \n" +
                "       pom.poWorkingStatus,    \n" +
                "       fun_getUnitNameByID(c.uom) uomName,    \n" +
                "       sc.mfgPN supplierPN,    \n" +
                "       pom.supplierID,  \n" +
                "        fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,    \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,     \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,     \n" +
                "        pom.carrierAccountNumber,    \n" +
                "        pom.poComment,    \n" +
                "       pom.shippingComment,    \n" +
                "        m.mfgcode as supplierMfgName,    \n" +
                "       fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,    \n" +
                "       (SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,    \n" +
                "       (ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,    \n" +
                "       CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,    \n" +
                "       fun_getUserNameByID(pod.updatedBy)updatedby,     \n" +
                "       fun_getUserNameByID(pod.createdBy) createdby,    \n" +
                "       fun_getRoleByID(pod.createByRoleId) createdbyRole,     \n" +
                "       fun_getRoleByID(pod.updateByRoleId) updatedbyRole,    \n" +
                "       (select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,    \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt          \n" +
                "FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID    \n" +
                "JOIN mfgcodemst m ON m.id=pom.supplierID    \n" +
                "JOIN component c ON c.id=pod.mfgPartID    \n" +
                "left join component sc on sc.id=pod.supplierPartID    \n" +
                "JOIN mfgcodemst mc ON mc.id=c.mfgcodeID    \n" +
                "LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID    \n" +
                "LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID    \n" +
                "WHERE pod.isdeleted=0    \n" +
                "	\");                          \n" +
                "  IF(psupplierID IS NOT NULL)THEN    \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');    \n" +
                "  END IF;    \n" +
                "  IF(pshippingMethodId IS NOT NULL)THEN    \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');    \n" +
                "  END IF;    \n" +
                "  IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN    \n" +
                "	IF(psearchposotype='C')THEN    \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');    \n" +
                "         ELSE    \n" +
                "         SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =',psearchposotext,' OR pom.poNumber  =',psearchposotext,')');    \n" +
                "         END IF;    \n" +
                "  END IF;    \n" +
                "  IF(ppartIds IS NOT NULL)THEN    \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');    \n" +
                "  END IF;    \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "		SET pWhereClause = '1=1' ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "	ELSE	                          \n" +
                "		SET rowNumWhere = '';                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                             \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query1 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-12-2020  *********************************** */

                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (644,'1.00','V1',' Purchase Order Changes -Champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 644:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-12-2020  *********************************** */
                "drop procedure if exists `Sproc_checkDelete_component_price_break_details`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_price_break_details`(        \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update component_price_break_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in(',IDs,') and isDeleted = 0 and type = 1');    \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "  \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "                        SELECT ROW_COUNT();    \n" +
                "			COMMIT;    \n" +
                "		END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (645,'1.00','V1','Bug 29114: While add price break details at part master details page that time duplicate message displayed on screen. - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 645:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                          \n" +
                "	IN pPageIndex INT,                                                                                                \n" +
                "	IN pRecordPerPage INT,                                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                      \n" +
                "	IN pPackingSlipID INT                                                                                   \n" +
                ")  \n" +
                "BEGIN                                                                                      \n" +
                "	DECLARE pOffset INT;                                                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                  \n" +
                "	DECLARE v_ParentPackingSlipId INT;                                \n" +
                "	DECLARE v_InvoiceSlipId INT;                               \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                          \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                    \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                                  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                                           \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                       \n" +
                "	SELECT 	*,                \n" +
                "		(                                  \n" +
                "			CASE                                   \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'                                  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'                                  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'                                  \n" +
                "				ELSE NULL                                  \n" +
                "			END                                  \n" +
                "		) AS receivedStatusValue                \n" +
                "	FROM 	(                                                                                         \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                                          \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(8,1)) packingSlipSerialNumber,                                                                     \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel, 	                                                                      \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                                      \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                                      \n" +
                "				p.invoicePrice, 				p.disputedPrice,					                              \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,                                                                       \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName, 	                              \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,     	                           \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					                              \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					                              \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                                              \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                                       \n" +
                "				p.status, 					p.extendedPrice, 					p.extendedReceivedPrice,      \n" +
                "				(IFNULL(p.extendedPrice, 0) - IFNULL(p.extendedReceivedPrice, 0)) lineVariance, 			  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance, 			  \n" +
                "				p.refCreditDebitInvoiceNo,                                                                       \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated, 						    \n" +
                "				p.poReleaseNumber,                              p.isMemoForPrice,					p.isMemoForQty,                                        \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                                 \n" +
                "				c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                                 \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                                          \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                                        \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                                        \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                                  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                                      \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                                \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,                      \n" +
                "				c.partType,                                       \n" +
                "				(                                  \n" +
                "					CASE                                  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                  \n" +
                "							p.receivedStatus                                  \n" +
                "						ELSE                                   \n" +
                "							(SELECT receivedStatus                                   \n" +
                "							FROM 	packing_slip_material_receive_det                                   \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                                   \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                    \n" +
                "									AND isDeleted = 0 LIMIT 1)                                  \n" +
                "					END                                  \n" +
                "				) receivedStatus,			                                  \n" +
                "				p.remark,                                 \n" +
                "				p.comment,                    \n" +
                "				p.internalRef,                    \n" +
                "				p.purchaseInspectionComment,                               \n" +
                "				(                                  \n" +
                "					CASE                                  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                          \n" +
                "						ELSE                                   \n" +
                "							(SELECT COUNT(1)                                   \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp                          \n" +
                "							WHERE EXISTS (                          \n" +
                "									SELECT 	1                                   \n" +
                "									FROM 	packing_slip_material_receive_det pslip                          \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                                   \n" +
                "											AND 	pslip.id = psmp.lineId                          \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                                   \n" +
                "											AND	pslip.isDeleted = 0)                          \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                                  \n" +
                "					END                                  \n" +
                "				) AS purchaseRequirementCount,                                  \n" +
                "				(                                  \n" +
                "					CASE                                  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                                  \n" +
                "						ELSE                                  \n" +
                "							(SELECT COUNT(1)                                   \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm                                  \n" +
                "							WHERE 	EXISTS (                          \n" +
                "									SELECT 	1                          \n" +
                "									FROM 	packing_slip_material_receive_det psmr                          \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId                          \n" +
                "										AND	psmr.id = psm.lineId                          \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber                          \n" +
                "										AND 	psmr.isDeleted = 0                          \n" +
                "									)                          \n" +
                "								AND psm.inspectionStatus = 'R'                                   \n" +
                "								AND psm.isDeleted = 0                          \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')                          \n" +
                "					END                                  \n" +
                "				) AS rejectedPurchaseRequirementCount,                                    \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                                                      \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                                \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                                          \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                                          \n" +
                "				(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                                            \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                                            \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                                 \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,   \n" +
                "				(                                \n" +
                "					CASE                                \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                                \n" +
                "						ELSE                                 \n" +
                "							(SELECT `status`                                 \n" +
                "							FROM 	packing_slip_material_receive_det                                 \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                                 \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                 \n" +
                "									AND isDeleted = 0)                          \n" +
                "					END                                \n" +
                "				) invoiceStatus,                 \n" +
                "				(                                \n" +
                "					CASE                                \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                                \n" +
                "						ELSE                                 \n" +
                "							(SELECT refCreditDebitInvoiceNo                                 \n" +
                "							FROM 	packing_slip_material_receive_det                                 \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                                 \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                 \n" +
                "									AND isDeleted = 0)                          \n" +
                "					END                                \n" +
                "				) invoiceLineHasMemo,                                            \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                                         \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd                           \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'                          \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id                          \n" +
                "					AND pd.partId = p.partID) commentCount,                     \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0) psInspectionStatus,          \n" +
                "				p.refPackingSlipIdForRma,          \n" +
                "				p.refInvoiceIdForRma,          \n" +
                "				p.refPackingSlipForRma,          \n" +
                "				p.refInvoiceForRma,          \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,          \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber          \n" +
                "		FROM		packing_slip_material_receive_det p                                                                              \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                                      \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL    \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo   \n" +
                "					FROM 	packing_slip_material_receive_det ps   \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId                                                         \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                                       \n" +
                "		AND 		p.isDeleted = 0                \n" +
                "	) a;                                                                                          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                                \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                                        \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                                      \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID                           \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)                          \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)                          \n" +
                "	AND			ps.receiptType = 'P'                                                                            \n" +
                "	AND			psm.isDeleted = 0                          \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                                    \n" +
                "  \n" +
                "	-- Set received qty detail                                                                                            \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                                \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,                 \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalReceivedQty,0))                \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;                          \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                                                                \n" +
                "	END IF;	                                                                                        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                                 \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                \n" +
                "	ELSE	                                                                                                \n" +
                "		SET rowNumWhere = '';                                                                                                \n" +
                "	END IF;	                                                                                                \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                \n" +
                "	EXECUTE query1;                                                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                \n" +
                "	EXECUTE query2;                                                                                                \n" +
                "	DEALLOCATE PREPARE query2;               \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceTotalDue As invoiceTotalDue FROM packing_slip_material_receive WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");                              \n" +
                "	PREPARE query3 FROM @SQLStatement3;                              \n" +
                "	EXECUTE query3;                              \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(                \n" +
                "	IN tableName VARCHAR(255),                \n" +
                "	IN IDs LONGTEXT,                \n" +
                "	IN deletedBy INT,                \n" +
                "	IN entityID VARCHAR(255),                \n" +
                "	IN refrenceIDs LONGTEXT,                \n" +
                "	IN pRoleID INT                \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "		DECLARE v_StartIndex INT;                    \n" +
                "		DECLARE v_EndIndex INT;                \n" +
                "		DECLARE v_Id VARCHAR(10);                \n" +
                "		DECLARE v_InvoiceId INT;            \n" +
                "		DECLARE v_InvoiceDetailId INT;            \n" +
                "		DECLARE v_MainInvoiceId INT;            \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);            \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);        \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);          \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);      \n" +
                "		DECLARE v_CountOfMemo INT;     \n" +
                "		DECLARE v_MemoType VARCHAR(10);       \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;    \n" +
                "		DECLARE v_IsMemoForQty TINYINT;    \n" +
                "  \n" +
                "		SET v_StartIndex = 0;                    \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');    	              \n" +
                "		PREPARE stmt2 FROM @SQL2;                  \n" +
                "		EXECUTE stmt2;              \n" +
                "		DEALLOCATE PREPARE stmt2;            \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;            \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));             \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");                                                        				                                    				                \n" +
                "		PREPARE stmt3 FROM @SQL3;                                                                                                                                                        \n" +
                "		EXECUTE stmt3;                                   \n" +
                "		DEALLOCATE PREPARE stmt3;            \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table; 	              \n" +
                "		WHILE v_StartIndex < v_EndIndex DO                   \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;              \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;            \n" +
                "			SELECT COUNT(1), receiptType INTO v_CountOfMemo, v_MemoType FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  			  \n" +
                "			IF (v_CountOfMemo > 0) THEN            \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;	            \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN        \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;            \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));             \n" +
                "					SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");                                                        				                                    				                \n" +
                "					PREPARE stmt4 FROM @SQL4;                                                                                                                                                        \n" +
                "					EXECUTE stmt4;                                   \n" +
                "					DEALLOCATE PREPARE stmt4;            \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive            \n" +
                "					SET 	`status` = 'I'            \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;         \n" +
                "  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;      \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;      \n" +
                "					UPDATE 	packing_slip_material_receive            \n" +
                "					SET 	`status` = 'A',      \n" +
                "						invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)       \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;               \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive ps            \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)            \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;         \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det     \n" +
                "					SET 	isDeleted = 1,     \n" +
                "						deletedBy = deletedBy,     \n" +
                "						deleteByRoleId = pRoleID,    \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()    \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;    \n" +
                "  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN    \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;        	    \n" +
                "					END IF;    \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;            \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det            \n" +
                "					SET 	`status` = 'D',            \n" +
                "						refCreditDebitInvoiceNo = v_UpdatedMemoIds,    \n" +
                "						isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),    \n" +
                "						isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END),    \n" +
                "						difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END),    \n" +
                "						differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)    \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;     \n" +
                "				END IF;        \n" +
                "			ELSE  \n" +
                "				UPDATE 	packing_slip_material_receive_det     \n" +
                "				SET 	isDeleted = 1,     \n" +
                "					deletedBy = deletedBy,     \n" +
                "					deleteByRoleId = pRoleID,    \n" +
                "					deletedAt = fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;    \n" +
                "			END IF;            \n" +
                "			SET v_StartIndex = v_StartIndex + 1;                    \n" +
                "		END WHILE;                                   \n" +
                "  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');                  \n" +
                "		PREPARE stmt1 FROM @SQL1;                  \n" +
                "		EXECUTE stmt1;                \n" +
                "		DEALLOCATE PREPARE stmt1;   */         \n" +
                "  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (646,'1.00','V1','Invoice flow changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 646:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(                  \n" +
                "	IN tableName VARCHAR(255),                  \n" +
                "	IN IDs LONGTEXT,                  \n" +
                "	IN deletedBy INT,                  \n" +
                "	IN entityID VARCHAR(255),                  \n" +
                "	IN refrenceIDs LONGTEXT,                  \n" +
                "	IN pRoleID INT                  \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "		DECLARE v_StartIndex INT;                      \n" +
                "		DECLARE v_EndIndex INT;                  \n" +
                "		DECLARE v_Id VARCHAR(10);                  \n" +
                "		DECLARE v_InvoiceId INT;              \n" +
                "		DECLARE v_InvoiceDetailId INT;              \n" +
                "		DECLARE v_MainInvoiceId INT;              \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);              \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);          \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);            \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);        \n" +
                "		DECLARE v_CountOfMemo INT;       \n" +
                "		DECLARE v_MemoType VARCHAR(10);         \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;      \n" +
                "		DECLARE v_IsMemoForQty TINYINT;      \n" +
                "  \n" +
                "		SET v_StartIndex = 0;                      \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');    	                \n" +
                "		PREPARE stmt2 FROM @SQL2;                    \n" +
                "		EXECUTE stmt2;                \n" +
                "		DEALLOCATE PREPARE stmt2;              \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;              \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));               \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");                                                        				                                    				                  \n" +
                "		PREPARE stmt3 FROM @SQL3;                                                                                                                                                          \n" +
                "		EXECUTE stmt3;                                     \n" +
                "		DEALLOCATE PREPARE stmt3;              \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table; 	                \n" +
                "		WHILE v_StartIndex < v_EndIndex DO                     \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;                \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;              \n" +
                "			SELECT COUNT(1), receiptType INTO v_CountOfMemo, v_MemoType FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  			    \n" +
                "			IF (v_CountOfMemo > 0) THEN              \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;	            				  \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN          \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;              \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));               \n" +
                "					SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");                                                        				                                    				                  \n" +
                "					PREPARE stmt4 FROM @SQL4;                                                                                                                                                          \n" +
                "					EXECUTE stmt4;                                     \n" +
                "					DEALLOCATE PREPARE stmt4;              \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive              \n" +
                "					SET 	`status` = 'I'              \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;           \n" +
                "  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;        \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;        \n" +
                "					UPDATE 	packing_slip_material_receive              \n" +
                "					SET 	`status` = 'A',        \n" +
                "						invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)         \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;                 \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive ps              \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)              \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;           \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det       \n" +
                "					SET 	isDeleted = 1,       \n" +
                "						deletedBy = deletedBy,       \n" +
                "						deleteByRoleId = pRoleID,      \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()      \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;      \n" +
                "  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN      \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;        	      \n" +
                "					END IF;      \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;              \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det              \n" +
                "					SET 	`status` = 'D',              \n" +
                "						refCreditDebitInvoiceNo = v_UpdatedMemoIds,      \n" +
                "						isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),      \n" +
                "						isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END),      \n" +
                "						difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END),      \n" +
                "						differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)      \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;       \n" +
                "				ELSE  \n" +
                "					UPDATE 	packing_slip_material_receive_det       \n" +
                "					SET 	isDeleted = 1,       \n" +
                "						deletedBy = deletedBy,       \n" +
                "						deleteByRoleId = pRoleID,      \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()      \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;    \n" +
                "				END IF;          \n" +
                "			ELSE    \n" +
                "				UPDATE 	packing_slip_material_receive_det       \n" +
                "				SET 	isDeleted = 1,       \n" +
                "					deletedBy = deletedBy,       \n" +
                "					deleteByRoleId = pRoleID,      \n" +
                "					deletedAt = fun_DatetimetoUTCDateTime()      \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;      \n" +
                "			END IF;              \n" +
                "			SET v_StartIndex = v_StartIndex + 1;                      \n" +
                "		END WHILE;                                     \n" +
                "  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');                    \n" +
                "		PREPARE stmt1 FROM @SQL1;                    \n" +
                "		EXECUTE stmt1;                  \n" +
                "		DEALLOCATE PREPARE stmt1;   */           \n" +
                "  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (647,'1.00','V1','Sproc_checkDelete_packing_slip_material_receive_det - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 647:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(         \n" +
                "IN pSearch VARCHAR(100),                \n" +
                "IN pId INT,                \n" +
                "IN pMfgType VARCHAR(50),                \n" +
                "IN pRoHSStatusID VARCHAR(100),                \n" +
                "IN pMfgCodeId INT,                \n" +
                "IN pCategoryID INT,                \n" +
                "IN pIsContainCPN TINYINT,     \n" +
                "IN prefSupplierMfgpnComponentID INT ,        \n" +
                "IN ppackagingID INT,        \n" +
                "IN pstrictCustomPart TINYINT,        \n" +
                "IN psupplierID INT,    \n" +
                "IN pofftheself TINYINT        \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "   /*<===this logic is added to compare invert rohs category*/        \n" +
                "   /* this logic used in purchase order when supplier is strictly custom part */      \n" +
                "   IF(pstrictCustomPart=1)THEN     \n" +
                "   DROP TEMPORARY TABLE IF EXISTS tempcomponent;    \n" +
                "   IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN    \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent    \n" +
                "	SELECT smm.refMfgCodeMstID     \n" +
                "	FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID    \n" +
                "   UNION    \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0    \n" +
                "   UNION    \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4) AND c.isdeleted=0;    \n" +
                "   ELSE    \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent    \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0    \n" +
                "   UNION    \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0    \n" +
                "   UNION    \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;    \n" +
                "   END IF;      \n" +
                "          SELECT * FROM                            \n" +
                " (                            \n" +
                "	 SELECT `com`.`id`,                            \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                            \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                            \n" +
                "		`com`.`mfgPN` orgMfgPN,                \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		com.packagingID,                \n" +
                "        `com`.`PIDCode`,              \n" +
                "		`com`.`isGoodPart`,                \n" +
                "		`com`.`RoHSStatusID`,                \n" +
                "		`com`.`rohsgroupID`,                \n" +
                "        `com`.`mfgcodeID`,                \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,         \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                       \n" +
                "        `com`.`category`,        \n" +
                "        com.imageURL,        \n" +
                "        com.documentPath,        \n" +
                "        `com`.`mfgPNDescription`,              \n" +
                "        `com`.`minOperatingTemp`,                \n" +
                "        `com`.`maxOperatingTemp`,                \n" +
                "        `com`.`value`,                \n" +
                "        `com`.`partPackage`,                \n" +
                "        `com`.`powerRating`,                \n" +
                "        `com`.`functionalCategoryID`,                \n" +
                "        `com`.`mountingTypeID`,                \n" +
                "        `com`.`connecterTypeID`,                \n" +
                "        `com`.`noOfPosition`,                \n" +
                "        `com`.`noOfRows`,                \n" +
                "        `com`.`pitch`,                \n" +
                "        `com`.`pitchMating`,                \n" +
                "        `com`.`length`,                \n" +
                "        `com`.`width`,                \n" +
                "        `com`.`height`,                \n" +
                "        `com`.`voltage`,                \n" +
                "        `com`.`weight`,                \n" +
                "        `com`.`feature`,                \n" +
                "        `com`.`color`,                \n" +
                "        `com`.`partStatus`,                \n" +
                "        `com`.`uom`,                \n" +
                "        `com`.`uomClassID`,                \n" +
                "        `com`.`unit`,                \n" +
                "        `com`.`restrictUsePermanently`,                                  \n" +
                "		`com`.`restrictUSEwithpermission`,                                \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                \n" +
                "		`com`.`restrictPackagingUseWithpermission`,      \n" +
                "		u.abbreviation AS uomName,      \n" +
                "		u.unitName AS  unitName,         \n" +
                "                r.rohsIcon,          \n" +
                "		r.name AS `rohsName`,                \n" +
                "               `com`.`partPackageID`,                \n" +
                "                `com`.`bomLock`,                \n" +
                "		`com`.`businessRisk`,                \n" +
                "		`com`.`costCategoryID`,                \n" +
                "		`com`.`deviceMarking`,                \n" +
                "		`com`.`driverToolRequired`,                \n" +
                "		`com`.`eau`,                \n" +
                "		`com`.`epicorType`,                      \n" +
                "		`com`.`functionalTestingRequired`,                      \n" +
                "		`com`.`heightText`,                      \n" +
                "		`com`.`isCPN`,                      \n" +
                "		`com`.`isCustom`,                      \n" +
                "		`com`.`isLeadFree`,                      \n" +
                "		`com`.`leadTime`,                      \n" +
                "		`com`.`matingPartRquired`,                      \n" +
                "		`com`.`maxPriceLimit`,                      \n" +
                "		`com`.`maxQtyonHand`,                      \n" +
                "		`com`.`minimum`,                      \n" +
                "		`com`.`mult`,                      \n" +
                "		`com`.`packageQty`,                      \n" +
                "		`com`.`partType`,                      \n" +
                "		`com`.`pcbPerArray`,                      \n" +
                "		`com`.`pickupPadRequired`,                      \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                      \n" +
                "		`com`.`plannedValuePerBuild`,                      \n" +
                "		`com`.`programingRequired`,                      \n" +
                "		`com`.`rfqOnly`,                      \n" +
                "		`com`.`saftyStock`,                      \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                      \n" +
                "		`com`.`scrapValuePerBuild`,                      \n" +
                "		`com`.`selfLifeDays`,                      \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                      \n" +
                "		`com`.`temperatureCoefficient`,                      \n" +
                "		`com`.`temperatureCoefficientUnit`,                      \n" +
                "		`com`.`temperatureCoefficientValue`,                      \n" +
                "		`com`.`trackSerialNumber`,                    \n" +
                "		`com`.`refSupplierMfgpnComponentID`,            \n" +
                "                com.refMfgPNMfgCodeId,          \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,            \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,            \n" +
                "                fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                      \n" +
                "	FROM `component` AS `com`              \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))      \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID       \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0       \n" +
                "	WHERE `com`.isdeleted=0          \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)     \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`)     \n" +
                "        AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)          \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)         \n" +
                "        AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)    \n" +
                "        AND com.mfgcodeid IN (SELECT refMfgCodeMstID FROM tempcomponent)    \n" +
                "        AND (com.iscustom=1 OR com.parttype=4 OR com.isCPN=1)        \n" +
                "    ) AS a                                        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                        \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                        \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                        \n" +
                "	)                      \n" +
                "	ORDER BY mfgPN;          \n" +
                "  \n" +
                "ELSEIF(pofftheself=1 AND pstrictCustomPart=0) THEN          \n" +
                "/* this logic used in purchase order       \n" +
                "  packing slip      \n" +
                "  UMID management      \n" +
                "  Component Master      \n" +
                "  Reserve Stock      \n" +
                "  Component Assy DFM      \n" +
                "  Reports      \n" +
                "  Price Break Update      \n" +
                "  Customer Part      \n" +
                "  Good-Bad Mapping Part      \n" +
                "  Supplier Quote      \n" +
                "  Supplier RMA      \n" +
                "   */                         \n" +
                " SELECT * FROM                            \n" +
                " (                            \n" +
                "	 SELECT `com`.`id`,                            \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                            \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                            \n" +
                "		`com`.`mfgPN` orgMfgPN,                \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		com.packagingID,                \n" +
                "        `com`.`PIDCode`,              \n" +
                "		`com`.`isGoodPart`,                \n" +
                "		`com`.`RoHSStatusID`,                \n" +
                "		`com`.`rohsgroupID`,                \n" +
                "        `com`.`mfgcodeID`,                \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,         \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                       \n" +
                "        `com`.`category`,        \n" +
                "        com.imageURL,        \n" +
                "        com.documentPath,        \n" +
                "        `com`.`mfgPNDescription`,              \n" +
                "        `com`.`minOperatingTemp`,                \n" +
                "        `com`.`maxOperatingTemp`,                \n" +
                "        `com`.`value`,                \n" +
                "        `com`.`partPackage`,                \n" +
                "        `com`.`powerRating`,                \n" +
                "        `com`.`functionalCategoryID`,                \n" +
                "        `com`.`mountingTypeID`,                \n" +
                "        `com`.`connecterTypeID`,                \n" +
                "        `com`.`noOfPosition`,                \n" +
                "        `com`.`noOfRows`,                \n" +
                "        `com`.`pitch`,                \n" +
                "        `com`.`pitchMating`,                \n" +
                "        `com`.`length`,                \n" +
                "        `com`.`width`,                \n" +
                "        `com`.`height`,                \n" +
                "        `com`.`voltage`,                \n" +
                "        `com`.`weight`,                \n" +
                "        `com`.`feature`,                \n" +
                "        `com`.`color`,                \n" +
                "        `com`.`partStatus`,                \n" +
                "        `com`.`uom`,                \n" +
                "        `com`.`uomClassID`,                \n" +
                "        `com`.`unit`,                \n" +
                "        `com`.`restrictUsePermanently`,                                  \n" +
                "		`com`.`restrictUSEwithpermission`,                                \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                                \n" +
                "              u.abbreviation AS uomName,      \n" +
                "		u.unitName AS  unitName,                 \n" +
                "        r.rohsIcon,          \n" +
                "		r.name AS `rohsName`,                \n" +
                "        `com`.`partPackageID`,                \n" +
                "        `com`.`bomLock`,                \n" +
                "		`com`.`businessRisk`,                \n" +
                "		`com`.`costCategoryID`,                \n" +
                "		`com`.`deviceMarking`,                \n" +
                "		`com`.`driverToolRequired`,                \n" +
                "		`com`.`eau`,                \n" +
                "		`com`.`epicorType`,                      \n" +
                "		`com`.`functionalTestingRequired`,                      \n" +
                "		`com`.`heightText`,                      \n" +
                "		`com`.`isCPN`,                      \n" +
                "		`com`.`isCustom`,                      \n" +
                "		`com`.`isLeadFree`,                      \n" +
                "		`com`.`leadTime`,                      \n" +
                "		`com`.`matingPartRquired`,                      \n" +
                "		`com`.`maxPriceLimit`,                      \n" +
                "		`com`.`maxQtyonHand`,                      \n" +
                "		`com`.`minimum`,                      \n" +
                "		`com`.`mult`,                      \n" +
                "		`com`.`packageQty`,                      \n" +
                "		`com`.`partType`,                      \n" +
                "		`com`.`pcbPerArray`,                      \n" +
                "		`com`.`pickupPadRequired`,                      \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                      \n" +
                "		`com`.`plannedValuePerBuild`,                      \n" +
                "		`com`.`programingRequired`,                      \n" +
                "		`com`.`rfqOnly`,                      \n" +
                "		`com`.`saftyStock`,                      \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                      \n" +
                "		`com`.`scrapValuePerBuild`,                      \n" +
                "		`com`.`selfLifeDays`,                      \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                      \n" +
                "		`com`.`temperatureCoefficient`,                      \n" +
                "		`com`.`temperatureCoefficientUnit`,                      \n" +
                "		`com`.`temperatureCoefficientValue`,                      \n" +
                "		`com`.`trackSerialNumber`,                    \n" +
                "		`com`.`refSupplierMfgpnComponentID`,            \n" +
                "                 com.refMfgPNMfgCodeId,          \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,            \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,            \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                      \n" +
                "	FROM `component` AS `com`              \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))      \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID       \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0       \n" +
                "	 WHERE (`com`.isdeleted=0)          \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)     \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)          \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)         \n" +
                "         AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)     \n" +
                "         AND com.iscustom=0 AND com.category=2 AND com.iscpn=FALSE    \n" +
                "    ) AS a                                        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                        \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                        \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                        \n" +
                "	)                      \n" +
                "	ORDER BY mfgPN;                      \n" +
                "  \n" +
                "  ELSE         \n" +
                "  /* this logic used in purchase order       \n" +
                "  packing slip      \n" +
                "  UMID management      \n" +
                "  Component Master      \n" +
                "  Reserve Stock      \n" +
                "  Component Assy DFM      \n" +
                "  Reports      \n" +
                "  Price Break Update      \n" +
                "  Customer Part      \n" +
                "  Good-Bad Mapping Part      \n" +
                "  Supplier Quote      \n" +
                "  Supplier RMA      \n" +
                "   */                   \n" +
                "   SELECT * FROM                      \n" +
                " (                      \n" +
                "	 SELECT `com`.`id`,                      \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                \n" +
                "		`com`.`mfgPN` orgMfgPN,                \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		com.packagingID,                                \n" +
                "		`com`.`PIDCode`,                                \n" +
                "		`com`.`isGoodPart`,                \n" +
                "		`com`.`RoHSStatusID`,                \n" +
                "		`com`.`rohsgroupID`,                \n" +
                "		`com`.`mfgcodeID`,                \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,        \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                     \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                \n" +
                "		`com`.`tolerance`,          \n" +
                "		`com`.`category`,        \n" +
                "                 com.imageURL,        \n" +
                "                 com.documentPath,        \n" +
                "                `com`.`mfgPNDescription`,                 \n" +
                "		`com`.`minOperatingTemp`,                \n" +
                "		`com`.`maxOperatingTemp`,                \n" +
                "		`com`.`value`,                \n" +
                "		`com`.`partPackage`,                \n" +
                "		`com`.`powerRating`,                \n" +
                "		`com`.`functionalCategoryID`,                \n" +
                "		`com`.`mountingTypeID`,                \n" +
                "		`com`.`connecterTypeID`,                \n" +
                "		`com`.`noOfPosition`,                \n" +
                "		`com`.`noOfRows`,                \n" +
                "		`com`.`pitch`,                \n" +
                "		`com`.`pitchMating`,                \n" +
                "		`com`.`length`,                \n" +
                "		`com`.`width`,                \n" +
                "		`com`.`height`,                \n" +
                "		`com`.`voltage`,                \n" +
                "		`com`.`weight`,                \n" +
                "		`com`.`feature`,                \n" +
                "		`com`.`color`,                                            \n" +
                "		`com`.`partStatus`,                                            \n" +
                "		`com`.`uom`,                                          \n" +
                "                `com`.`uomClassID`,                            \n" +
                "		`com`.`unit`,                                  \n" +
                "		`com`.`restrictUsePermanently`,                                  \n" +
                "		`com`.`restrictUSEwithpermission`,                                \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                             \n" +
                "		`com`.`packaging`,                              \n" +
                "		u.abbreviation AS uomName,      \n" +
                "		u.unitName AS  unitName,                                      \n" +
                "		r.rohsIcon,          \n" +
                "		r.name AS `rohsName`,          \n" +
                "               `com`.`partPackageID`,                      \n" +
                "               `com`.`bomLock`,                      \n" +
                "		`com`.`businessRisk`,                      \n" +
                "		`com`.`costCategoryID`,                      \n" +
                "		`com`.`deviceMarking`,                      \n" +
                "		`com`.`driverToolRequired`,                      \n" +
                "		`com`.`eau`,                      \n" +
                "		`com`.`epicorType`,                      \n" +
                "		`com`.`functionalTestingRequired`,                      \n" +
                "		`com`.`heightText`,                      \n" +
                "		`com`.`isCPN`,                      \n" +
                "		`com`.`isCustom`,                      \n" +
                "		`com`.`isLeadFree`,                      \n" +
                "		`com`.`leadTime`,                      \n" +
                "		`com`.`matingPartRquired`,                      \n" +
                "		`com`.`maxPriceLimit`,                      \n" +
                "		`com`.`maxQtyonHand`,                      \n" +
                "		`com`.`minimum`,                      \n" +
                "		`com`.`mult`,                      \n" +
                "		`com`.`packageQty`,                      \n" +
                "		`com`.`partType`,                      \n" +
                "		`com`.`pcbPerArray`,                      \n" +
                "		`com`.`pickupPadRequired`,                      \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,          \n" +
                "		`com`.`plannedValuePerBuild`,          \n" +
                "		`com`.`programingRequired`,          \n" +
                "		`com`.`rfqOnly`,          \n" +
                "		`com`.`saftyStock`,          \n" +
                "		`com`.`scrapRatePercentagePerBuild`,          \n" +
                "		`com`.`scrapValuePerBuild`,          \n" +
                "		`com`.`selfLifeDays`,          \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,          \n" +
                "		`com`.`temperatureCoefficient`,          \n" +
                "		`com`.`temperatureCoefficientUnit`,          \n" +
                "		`com`.`temperatureCoefficientValue`,          \n" +
                "		`com`.`trackSerialNumber`,          \n" +
                "		`com`.`refSupplierMfgpnComponentID`,          \n" +
                "                 com.refMfgPNMfgCodeId,          \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,          \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`          \n" +
                "	FROM `component` AS `com`          \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))         \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID         \n" +
                "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0          \n" +
                "        WHERE `com`.`isdeleted` =0     \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)    \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)         \n" +
                "	AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)         \n" +
                "	AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)         \n" +
                "        AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)          \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)  \n" +
                "    ) AS a          \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR          \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')          \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                \n" +
                ")          \n" +
                "ORDER BY mfgPN;                \n" +
                "END IF;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (648,'1.00','V1','Sproc_GetComponentMFGAliasSearchPurchaseOrder - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 648:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2020  *********************************** */
                "UPDATE 	page_detail  \n" +
                "SET 	iconClass = 'icons-rma'  \n" +
                "WHERE 	pageName = 'Manage Supplier RMA'   \n" +
                "			AND isDeleted = 0;  \n" +
                /* **************************** Add Script Version -> 29-12-20 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (649,'1.00','V1','Changes of credit and debit memo flow - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 649:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipDetailByPackingSlipNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailByPackingSlipNumber`(                                                                                      \n" +
                "	IN pPackingSlipNumber VARCHAR(100),                  \n" +
                "	IN pMFGCodeId INT,      \n" +
                "	IN pCreditMemoType VARCHAR(5)                  \n" +
                ")  \n" +
                "BEGIN                     \n" +
                "	DECLARE v_CountOfPSRecord INT;            \n" +
                "	DECLARE v_CountOfPSDraftRecord INT;                \n" +
                "	DECLARE v_CountOfSIRecord INT;                  \n" +
                "	DECLARE v_CountOfPSDetailRecord INT;                  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(1000);               \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                          \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_PackingSlip_Validation_Error;                                                                                         \n" +
                "	CREATE TEMPORARY TABLE temp_PackingSlip_Validation_Error                                  \n" +
                "	(                                                                                        \n" +
                "		IsSuccess BOOLEAN,                                \n" +
                "		ErrorCode INT,                  \n" +
                "		FullMFGCode VARCHAR(1000)                  \n" +
                "	);                                   \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord                   \n" +
                "	FROM 	packing_slip_material_receive                   \n" +
                "	WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                   \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)                  \n" +
                "			AND isDeleted = 0;                  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN                  \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 1, NULL);                  \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                  \n" +
                "	ELSEIF (v_CountOfPSRecord = 1) THEN                  \n" +
                "		SELECT 	COUNT(1) INTO v_CountOfPSDraftRecord                   \n" +
                "		FROM 	packing_slip_material_receive                   \n" +
                "		WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                   \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)           \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN (packingSlipModeStatus = 'D' OR packingSlipModeStatus = 'P') ELSE packingSlipModeStatus = 'D' END)      \n" +
                "			AND isDeleted = 0;           \n" +
                "  \n" +
                "		IF (v_CountOfPSDraftRecord = 1) THEN          \n" +
                "			INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 5, NULL);                  \n" +
                "			SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                 \n" +
                "		ELSE           \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(fullMFGCode) INTO v_CountOfSIRecord, v_StringOfMFGCode                  \n" +
                "			FROM 	(                  \n" +
                "					SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(mfgCodeID) fullMFGCode                  \n" +
                "					FROM 	packing_slip_material_receive                   \n" +
                "					WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                   \n" +
                "							AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                  \n" +
                "							AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'C' ELSE receiptType = 'I' END)                  \n" +
                "							AND isDeleted = 0                  \n" +
                "			) a;                  \n" +
                "  \n" +
                "			IF (v_CountOfSIRecord = 0) THEN                  \n" +
                "  \n" +
                "				SELECT 	COUNT(1) INTO v_CountOfPSDetailRecord                  \n" +
                "				FROM 	packing_slip_material_receive_det                  \n" +
                "				WHERE	deletedAt IS NULL                   \n" +
                "						AND refPackingSlipMaterialRecID IN (                  \n" +
                "							SELECT 	id                   \n" +
                "							FROM 	packing_slip_material_receive                   \n" +
                "							WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                   \n" +
                "									AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                  \n" +
                "									AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)                  \n" +
                "									AND deletedAt IS NULL                  \n" +
                "						);                  \n" +
                "  \n" +
                "				IF (v_CountOfPSDetailRecord = 0) THEN                  \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 4, v_StringOfMFGCode);                  \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                  \n" +
                "				ELSE                  \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (TRUE, 0, NULL);                  \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                  \n" +
                "  \n" +
                "					-- pr.poNumber, pr.supplierSONumber,      \n" +
                "					SELECT 		pr.id, pr.mfgCodeID,      \n" +
                "							pr.poNumber, pr.poDate, pr.supplierSONumber,      \n" +
                "							/*(CASE WHEN pCreditMemoType = 'RC' THEN pr.poNumber ELSE null END) poNumber,       \n" +
                "							(CASE WHEN pCreditMemoType = 'RC' THEN pr.poDate ELSE NULL END) poDate, */      \n" +
                "							pr.packingSlipNumber, pr.packingSlipDate,            \n" +
                "							pr.receiptDate, pr.receiptType, pr.`status`, m.paymentTermsID, p.termsDays            \n" +
                "					FROM 		packing_slip_material_receive pr            \n" +
                "					JOIN 		mfgcodemst m ON m.id = pr.mfgCodeID            \n" +
                "					LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentTermsID            \n" +
                "					WHERE 		(CASE WHEN pCreditMemoType = 'RC' THEN pr.poNumber = pPackingSlipNumber ELSE pr.packingSlipNumber = pPackingSlipNumber END)                   \n" +
                "								AND pr.mfgCodeID = IFNULL(pMFGCodeId, pr.mfgCodeID)                  \n" +
                "								AND (CASE WHEN pCreditMemoType = 'RC' THEN pr.receiptType = 'R' ELSE pr.receiptType = 'P' END)      \n" +
                "								AND pr.isDeleted = 0;                  \n" +
                "  \n" +
                "					SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				                              \n" +
                "							CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                         \n" +
                "							p.nickname, 					p.partID, 						p.scanLabel, 	                                          \n" +
                "							p.receivedQty, 					p.packingSlipQty, 	                                  \n" +
                "							(CASE WHEN pCreditMemoType = 'RC' THEN (IFNULL(p.invoicePrice, 0) * IFNULL(p.packingSlipQty, 0)) ELSE NULL END) extendedPrice,          \n" +
                "							p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                          \n" +
                "							p.invoicePrice,					p.disputedPrice,					p.createdBy,                                           \n" +
                "							p.createdAt, 					p.updatedBy, 						p.updatedAt,                                          \n" +
                "							p.deletedBy, 					p.deletedAt, 						p.isDeleted,                                          \n" +
                "							p.approveNote, 					p.otherCharges,                                           \n" +
                "							p.status, 					p.refCreditDebitInvoiceNo,     \n" +
                "							(IFNULL(p.extendedPrice, 0) - IFNULL(p.extendedReceivedPrice, 0)) lineVariance,  \n" +
                "							(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "							p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                          \n" +
                "							fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                     \n" +
                "							c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                     \n" +
                "							c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                              \n" +
                "							0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                            \n" +
                "							p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                            \n" +
                "							fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                      \n" +
                "							c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                          \n" +
                "							sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                    \n" +
                "							sc.packagingID supplierPackagingId,                                                          \n" +
                "							'Pending' invoiceVerificationStatus,                \n" +
                "							p.receivedStatus,         \n" +
                "							(        \n" +
                "								CASE        \n" +
                "									WHEN p.receivedStatus = 'P' THEN 'Pending'        \n" +
                "									WHEN p.receivedStatus = 'A' THEN 'Approved'        \n" +
                "									WHEN p.receivedStatus = 'R' THEN 'Received'        \n" +
                "									ELSE NULL        \n" +
                "								END        \n" +
                "							) receivedStatusValue,        \n" +
                "							p.remark,                                                          \n" +
                "							fun_getUserNameByID(p.createdBy) createdByName,              \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,              \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,                \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					              \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					              \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt                                                                \n" +
                "					FROM		packing_slip_material_receive_det p                                                  \n" +
                "					LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL                          \n" +
                "					LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                              \n" +
                "					WHERE   	p.refPackingSlipMaterialRecID IN (                  \n" +
                "								SELECT 	id                   \n" +
                "								FROM 	packing_slip_material_receive                   \n" +
                "								WHERE 	(CASE WHEN pCreditMemoType = 'RC' THEN poNumber = pPackingSlipNumber ELSE packingSlipNumber = pPackingSlipNumber END)                  \n" +
                "										AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)                  \n" +
                "										AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)                 \n" +
                "										AND isDeleted = 0                 \n" +
                "							)                                                           \n" +
                "					AND 		p.isDeleted = 0;                  \n" +
                "				END IF;                  \n" +
                "			ELSE                  \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 3, v_StringOfMFGCode);                  \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                  \n" +
                "			END IF;                  \n" +
                "		END IF;          \n" +
                "	ELSEIF (v_CountOfPSRecord > 1) THEN                  \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 2, NULL);                  \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-12-20 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveInvoiceAndInvoiceLineDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(                                                                                                  \n" +
                "	IN pInvoiceDetail JSON,                                                        \n" +
                "	IN pPackingSlipId INT,                  \n" +
                "	IN pUserId VARCHAR(50),              \n" +
                "	IN pUserRoleId VARCHAR(50)                          \n" +
                ")  \n" +
                "BEGIN                             \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;                          \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;                          \n" +
                "	DECLARE v_IdOfInvoice INT;                          \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                                                                                          \n" +
                "	BEGIN                                                                                                                          \n" +
                "		ROLLBACK;                                                                                                                          \n" +
                "		RESIGNAL;                                                                                                                          \n" +
                "	END;                                                                          \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                                                                                          \n" +
                "	BEGIN                                                                                                                          \n" +
                "		ROLLBACK;                                                                                                                          \n" +
                "		RESIGNAL;                                                                                                                          \n" +
                "	END;                                                                          \n" +
                "  \n" +
                "	START TRANSACTION;  */                                                                       \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;                                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS                                              \n" +
                "		SELECT 	*                                               \n" +
                "		FROM 	JSON_TABLE(                                              \n" +
                "			pInvoiceDetail,                                              \n" +
                "			\"$[*]\" COLUMNS(                                              \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",             \n" +
                "				poDate DATE PATH \"$.poDate\",                                       \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",                                              \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",                                              \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",                                              \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",                                              \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",                                              \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",                                              \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",                                              \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",                                              \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",                                              \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",                                              \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",                                              \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",                                              \n" +
                "				applyDate DATE PATH \"$.applyDate\",                                \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",                                \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",                          \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",            \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",            \n" +
                "				termsDays INT PATH \"$.termsDays\",      \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\"             \n" +
                "			)                                              \n" +
                "		) AS Invoice_Detail_JT;                       \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;                                                                                         \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail                                  \n" +
                "		(                                                                                        \n" +
                "			packingSlipSerialNumber VARCHAR(50),                                \n" +
                "			refChargesTypeId INT,                      \n" +
                "			nickname VARCHAR(50),                  \n" +
                "			partID INT,                  \n" +
                "			refSupplierPartId INT,                  \n" +
                "			scanLabel VARCHAR(1000),                                \n" +
                "			receivedQty DECIMAL(18,8),                  \n" +
                "			packingSlipQty DECIMAL(18,8),                  \n" +
                "			binID INT,                  \n" +
                "			warehouseID INT,                  \n" +
                "			parentWarehouseID INT,                  \n" +
                "			invoicePrice DECIMAL(18,8),                  \n" +
                "			purchasePrice DECIMAL(18,8),                  \n" +
                "			disputedPrice DECIMAL(18,8),                  \n" +
                "			approveNote VARCHAR(1000),                  \n" +
                "			otherCharges INT,                  \n" +
                "			`status` VARCHAR(1),                  \n" +
                "			extendedPrice DECIMAL(18,8),                  \n" +
                "			refCreditDebitInvoiceNo INT,                  \n" +
                "			difference DECIMAL(18,8),                  \n" +
                "			umidCreated TINYINT,                  \n" +
                "			poReleaseNumber VARCHAR(1000),                  \n" +
                "			packagingID INT,                \n" +
                "			receivedStatus VARCHAR(2),                \n" +
                "			remark LONGTEXT          \n" +
                "		);                       \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (                  \n" +
                "			packingSlipSerialNumber,                                \n" +
                "			refChargesTypeId,                      \n" +
                "			nickname,                  \n" +
                "			partID,                  \n" +
                "			refSupplierPartId,                  \n" +
                "			scanLabel,                  \n" +
                "			receivedQty,                  \n" +
                "			packingSlipQty,                  \n" +
                "			binID,                  \n" +
                "			warehouseID,                  \n" +
                "			parentWarehouseID,               \n" +
                "			invoicePrice,         \n" +
                "			disputedPrice,                  \n" +
                "			approveNote,                  \n" +
                "			otherCharges,                  \n" +
                "			`status`,     \n" +
                "			extendedPrice,               \n" +
                "			refCreditDebitInvoiceNo,                  \n" +
                "			difference,                  \n" +
                "			umidCreated,                  \n" +
                "			poReleaseNumber,                  \n" +
                "			packagingID,                \n" +
                "			receivedStatus,                \n" +
                "			remark                  \n" +
                "		)                  \n" +
                "		SELECT  packingSlipSerialNumber,                                \n" +
                "			refChargesTypeId,                      \n" +
                "			nickname,                  \n" +
                "			partID,                  \n" +
                "			refSupplierPartId,                  \n" +
                "			scanLabel,                  \n" +
                "			receivedQty,                  \n" +
                "			packingSlipQty,                  \n" +
                "			binID,                  \n" +
                "			warehouseID,                  \n" +
                "			parentWarehouseID,        \n" +
                "			invoicePrice,                 \n" +
                "			disputedPrice,                  \n" +
                "			approveNote,                  \n" +
                "			otherCharges,                  \n" +
                "			`status`,   \n" +
                "			(  \n" +
                "				CASE   \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN   \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE   \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),                 \n" +
                "			refCreditDebitInvoiceNo,                  \n" +
                "			difference,                  \n" +
                "			umidCreated,                  \n" +
                "			poReleaseNumber,                  \n" +
                "			packagingID,                \n" +
                "			receivedStatus,                \n" +
                "			remark                    \n" +
                "		FROM 	packing_slip_material_receive_det                   \n" +
                "		WHERE 	isDeleted = 0                   \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;                  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;                          \n" +
                "  \n" +
                "		IF (v_CountOfInvoiceDetail > 0) THEN                          \n" +
                "			INSERT INTO packing_slip_material_receive (poNumber, poDate, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate, creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice, creditMemoType, createdBy, updatedBy,paymentTermsID,termsDays)                          \n" +
                "			SELECT 	(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),       \n" +
                "				(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),      \n" +
                "				mfgCodeID,       \n" +
                "				(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),       \n" +
                "				packingSlipNumber, packingSlipDate,       \n" +
                "				(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),       \n" +
                "				(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),      \n" +
                "				(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),       \n" +
                "				(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),  \n" +
                "				(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),       \n" +
                "				(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),       \n" +
                "				receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,       \n" +
                "				(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),      \n" +
                "				pUserId, pUserId, paymentTermsID, termsDays            \n" +
                "			FROM 	temp_Invoice_Detail;	                          \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;                          \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive                          \n" +
                "			SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,           \n" +
                "				`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)           \n" +
                "			WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)                          \n" +
                "					AND isDeleted = 0;                          \n" +
                "		END IF;                          \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;                          \n" +
                "		IF (v_CountOfInvoiceLineDetail > 0) THEN                          \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)                          \n" +
                "			SELECT 	v_IdOfInvoice, packingSlipSerialNumber,                    \n" +
                "				(CASE WHEN (refChargesTypeId > 0) THEN refChargesTypeId ELSE NULL END),                  \n" +
                "				nickname,                    \n" +
                "				(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),                      \n" +
                "				(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),                      \n" +
                "				scanLabel,                                    \n" +
                "				receivedQty,                    \n" +
                "				packingSlipQty,                    \n" +
                "				(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),                      \n" +
                "				(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),                      \n" +
                "				(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),                      \n" +
                "				invoicePrice,                    \n" +
                "				purchasePrice,                    \n" +
                "				disputedPrice,                    \n" +
                "				otherCharges,                   \n" +
                "				`status`,                    \n" +
                "				extendedPrice,                    \n" +
                "				(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),                      \n" +
                "				difference,                    \n" +
                "				umidCreated,                    \n" +
                "				poReleaseNumber,                    \n" +
                "				(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),                      \n" +
                "				receivedStatus,                 \n" +
                "				remark,                \n" +
                "				pUserId,                    \n" +
                "				pUserId,              \n" +
                "				pUserRoleId,              \n" +
                "				pUserRoleId                          \n" +
                "			FROM 	temp_Invoice_Line_Detail;	                          \n" +
                "		END IF;                          \n" +
                "  \n" +
                "	-- COMMIT;                          \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;                          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-12-20 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                            \n" +
                "	IN pPageIndex INT,                                                                                                  \n" +
                "	IN pRecordPerPage INT,                                                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                        \n" +
                "	IN pPackingSlipID INT                                                                                     \n" +
                ")  \n" +
                "BEGIN                                                                                        \n" +
                "	DECLARE pOffset INT;                                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                    \n" +
                "	DECLARE v_ParentPackingSlipId INT;                                  \n" +
                "	DECLARE v_InvoiceSlipId INT;                                 \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                            \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                      \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                                    \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                                             \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                         \n" +
                "	SELECT 	*,                  \n" +
                "		(                                    \n" +
                "			CASE                                     \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'                                    \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'                                    \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'                                    \n" +
                "				ELSE NULL                                    \n" +
                "			END                                    \n" +
                "		) AS receivedStatusValue                  \n" +
                "	FROM 	(                                                                                           \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                                            \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(8,1)) packingSlipSerialNumber,                                                                       \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel, 	                                                                        \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                                        \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                                        \n" +
                "				p.invoicePrice, 				p.disputedPrice,					                                \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,                                                                         \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName, 	                                \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,     	                             \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					                                \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					                                \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                                                \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                                         \n" +
                "				p.status, 					p.extendedPrice, 					p.extendedReceivedPrice,        \n" +
                "				(IFNULL(p.extendedPrice, 0) - IFNULL(p.extendedReceivedPrice, 0)) lineVariance, 			    \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance, 			    \n" +
                "				p.refCreditDebitInvoiceNo,                                                                         \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated, 						      \n" +
                "				p.poReleaseNumber,                              p.isMemoForPrice,					p.isMemoForQty,                                          \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                                   \n" +
                "				c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                                   \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                                            \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                                          \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                                          \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                                    \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                                        \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                                  \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,                        \n" +
                "				c.partType,                                         \n" +
                "				(                                    \n" +
                "					CASE                                    \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                    \n" +
                "							p.receivedStatus                                    \n" +
                "						ELSE                                     \n" +
                "							(SELECT receivedStatus                                     \n" +
                "							FROM 	packing_slip_material_receive_det                                     \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                                     \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                      \n" +
                "									AND isDeleted = 0 LIMIT 1)                                    \n" +
                "					END                                    \n" +
                "				) receivedStatus,			                                    \n" +
                "				p.remark,                                   \n" +
                "				p.comment,                      \n" +
                "				p.internalRef,                      \n" +
                "				p.purchaseInspectionComment,                                 \n" +
                "				(                                    \n" +
                "					CASE                                    \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                    \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                            \n" +
                "						ELSE                                     \n" +
                "							(SELECT COUNT(1)                                     \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp                            \n" +
                "							WHERE EXISTS (                            \n" +
                "									SELECT 	1                                     \n" +
                "									FROM 	packing_slip_material_receive_det pslip                            \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                                     \n" +
                "											AND 	pslip.id = psmp.lineId                            \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                                     \n" +
                "											AND	pslip.isDeleted = 0)                            \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                                    \n" +
                "					END                                    \n" +
                "				) AS purchaseRequirementCount,                                    \n" +
                "				(                                    \n" +
                "					CASE                                    \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                    \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                                    \n" +
                "						ELSE                                    \n" +
                "							(SELECT COUNT(1)                                     \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm                                    \n" +
                "							WHERE 	EXISTS (                            \n" +
                "									SELECT 	1                            \n" +
                "									FROM 	packing_slip_material_receive_det psmr                            \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId                            \n" +
                "										AND	psmr.id = psm.lineId                            \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber                            \n" +
                "										AND 	psmr.isDeleted = 0                            \n" +
                "									)                            \n" +
                "								AND psm.inspectionStatus = 'R'                                     \n" +
                "								AND psm.isDeleted = 0                            \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')                            \n" +
                "					END                                    \n" +
                "				) AS rejectedPurchaseRequirementCount,                                      \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,                                                                                        \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                                  \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                                            \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                                            \n" +
                "				(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                                              \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                                              \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                                   \n" +
                "				ps.refInvoiceIdForMemo,    \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,    \n" +
                "				ps.refInvoiceNumberForMemo,     \n" +
                "				(                                  \n" +
                "					CASE                                  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                                  \n" +
                "						ELSE                                   \n" +
                "							(SELECT `status`                                   \n" +
                "							FROM 	packing_slip_material_receive_det                                   \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                                   \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                   \n" +
                "									AND isDeleted = 0)                            \n" +
                "					END                                  \n" +
                "				) invoiceStatus,                   \n" +
                "				(                                  \n" +
                "					CASE                                  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                                  \n" +
                "						ELSE                                   \n" +
                "							(SELECT refCreditDebitInvoiceNo                                   \n" +
                "							FROM 	packing_slip_material_receive_det                                   \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                                   \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                   \n" +
                "									AND isDeleted = 0)                            \n" +
                "					END                                  \n" +
                "				) invoiceLineHasMemo,                                              \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                                           \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd                             \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'                            \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id                            \n" +
                "					AND pd.partId = p.partID) commentCount,                       \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0) psInspectionStatus,            \n" +
                "				p.refPackingSlipIdForRma,            \n" +
                "				p.refInvoiceIdForRma,            \n" +
                "				p.refPackingSlipForRma,            \n" +
                "				p.refInvoiceForRma,            \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,            \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber            \n" +
                "		FROM		packing_slip_material_receive_det p                                                                                \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                                        \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL      \n" +
                "		LEFT JOIN	(    \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo     \n" +
                "					FROM 	packing_slip_material_receive_det ps     \n" +
                "					WHERE 	ps.isDeleted = 0    \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId                                                           \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                                         \n" +
                "		AND 		p.isDeleted = 0                  \n" +
                "	) a;                                                                                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                                          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                                  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                                          \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                                        \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID                             \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)                            \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)                            \n" +
                "	AND			ps.receiptType = 'P'                                                                              \n" +
                "	AND			psm.isDeleted = 0                            \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                                      \n" +
                "  \n" +
                "	-- Set received qty detail                                                                                              \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                                  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,                   \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalReceivedQty,0))                  \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                                                                  \n" +
                "	END IF;	                                                                                          \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                                   \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                  \n" +
                "	ELSE	                                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                                  \n" +
                "	END IF;	                                                                                                  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                  \n" +
                "	EXECUTE query1;                                                                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                  \n" +
                "	EXECUTE query2;                                                                                                  \n" +
                "	DEALLOCATE PREPARE query2;                 \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceTotalDue As invoiceTotalDue FROM packing_slip_material_receive WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");                                \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                \n" +
                "	EXECUTE query3;                                \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-12-20 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                                                  \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                                                  \n" +
                "    IN puserID VARCHAR(50),                                                                                                                            \n" +
                "    IN pnickName VARCHAR(20),                                                                                                                                            \n" +
                "    IN pprefix VARCHAR(20),                                                                                                                                            \n" +
                "    IN puid VARCHAR(20),                                                                                                                                        \n" +
                "    IN pComponentID INT,                                                                                                                                    \n" +
                "    IN pCustomerID INT,                                                                                                                                    \n" +
                "    IN pCPN BOOL,                                                                                                                                    \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                                                    \n" +
                "    IN pRefCpnMfgID INT,                                                                                                                                \n" +
                "    IN pAssyID INT,                                                                                                                                \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                                                \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                                                      \n" +
                "    IN pkitAssemblyID INT,                                                                                                                \n" +
                "    IN pBarcodeID INT,                                                                \n" +
                "    IN pBOMLineID INT,                      \n" +
                "    IN pSupplierID INT, 	                                                                                                                               \n" +
                "    IN pCategory VARCHAR(2),                                                                                                                               \n" +
                "    IN pInventoryType VARCHAR(2),      \n" +
                "    IN pCallFrom VARCHAR(50)                                                                                                                               \n" +
                ")  \n" +
                "BEGIN                                                                                                                                                  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                                                  \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                                                  \n" +
                "	DECLARE v_length INT;                                                                                                                                                   \n" +
                "	DECLARE v_fieldType INT;                                                                                                                                                       \n" +
                "	DECLARE v_entityId INT;                                                                                                                                                  \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                                                  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                                                  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                                                  \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                                                  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                                                  \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                                                            \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                                                            \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                                                  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                                                  \n" +
                "	DECLARE plen,slen INT;                                                                                                                                                  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                                                  \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                                                              \n" +
                "	DECLARE barcode_type_id INT;                                                                                                                                        \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                                                    \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                                                     \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                                                    \n" +
                "	DECLARE v_SupplierID INT;                                                                                                                \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                                                  \n" +
                "	DECLARE v_barcode_id INT;                                                                                                                \n" +
                "	DECLARE v_barcode_count INT;                                                                                                                \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                                                 \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                                                           \n" +
                "	DECLARE v_componentCount INT;                                                                                        \n" +
                "	DECLARE v_componentId INT;                                                                                              \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                                                        \n" +
                "	DECLARE v_partMFG INT;                                                                                            \n" +
                "	DECLARE v_isGoodPart TINYINT;                                                                                        \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;                                                                                        \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;                                                                                        \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;                                                                                  \n" +
                "	DECLARE v_isInstall TINYINT;                                                                                   \n" +
                "	DECLARE v_isBOMLineClean TINYINT;                                                                                \n" +
                "	DECLARE v_BOMLineId INT;                                                                              \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;                                                                              \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;                                                                              \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                                                              \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                                                           \n" +
                "	DECLARE v_isPurchase TINYINT;                                                                        \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                                                   \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                                                \n" +
                "	DECLARE v_BOMLineCount INT;                                                                 \n" +
                "	DECLARE v_AlternateLineId INT;                                                               \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                                                              \n" +
                "	DECLARE v_BOMAssyId INT;                                                              \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                                                              \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;                                                      \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;                                                      \n" +
                "	DECLARE v_isCPNFlag TINYINT;                                         \n" +
                "	DECLARE v_dateCodeFormatID INT;                                           \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);                                              \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);                       \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;                      \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;                      \n" +
                "	DECLARE v_MFRList VARCHAR(10000);                    \n" +
                "	DECLARE v_barcode_status INT;                    \n" +
                "	DECLARE v_category INT;                    \n" +
                "	DECLARE v_partType INT;        \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;	                      \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                                                   \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                                                  \n" +
                "	(                                                                                                                                                  \n" +
                "		errorText LONGTEXT,                                                                                                                                                  \n" +
                "		IsSuccess VARCHAR (2),                                                                                                                                        \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                                                       \n" +
                "	);                  \n" +
                "  \n" +
                "	IF (pCategory = 'P') THEN                  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;                                                                                                                                                   \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive                  \n" +
                "		(                           \n" +
                "			scanlabel VARCHAR(1000),                  \n" +
                "			poNumber VARCHAR(50),                                                                                                                                                  \n" +
                "			supplierSONumber VARCHAR(50),            \n" +
                "			packingSlipNumber VARCHAR(50),            \n" +
                "			invoiceNumber VARCHAR(50)            \n" +
                "		);                  \n" +
                "	ELSE                   \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                                                   \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                                                  \n" +
                "		(                                                                                                                                                  \n" +
                "			refcompid INT,                                                                                                                                                  \n" +
                "			pkgQty DECIMAL(18,6),                                                                                                              \n" +
                "			dateCode VARCHAR(10),                                                                                                              \n" +
                "			lotCode VARCHAR(255),                                                                                                              \n" +
                "			scanlabel VARCHAR(1000),                                                                                                              \n" +
                "			createdBy VARCHAR(255),                                                                                                              \n" +
                "			uid VARCHAR(14),                                                                                                              \n" +
                "			prefix VARCHAR(20),                                                                                                              \n" +
                "			nickName VARCHAR(50),                                                                                                              \n" +
                "			cpn TINYINT,                                                                                                              \n" +
                "			mfgAvailabel TINYINT,                                                                                                              \n" +
                "			refCPNMFGPNID INT,                                                                                                              \n" +
                "			customerID INT,                                                                                                              \n" +
                "			assyID INT,                                                                                                              \n" +
                "			salesOrderDetailID INT,                                                                                                              \n" +
                "			receiveMaterialType VARCHAR(255),                                                                                                              \n" +
                "			refSupplierPartId INT,                                      \n" +
                "			mfrDateCode VARCHAR(50),            \n" +
                "			poNumber VARCHAR(50),                                                                                                                                                  \n" +
                "			supplierSONumber VARCHAR(50),            \n" +
                "			packingSlipNumber VARCHAR(50),            \n" +
                "			invoiceNumber VARCHAR(50),        \n" +
                "			binName VARCHAR(100),        \n" +
                "			packaging VARCHAR(100),        \n" +
                "			packingSlipDetailNickname VARCHAR(50)        \n" +
                "		);                                                                                                                \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                                                   \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                                                  \n" +
                "		(                                                                                                                                                  \n" +
                "			entityid INT,                                                                                                              \n" +
                "			dataelementid INT,                                                                                                              \n" +
                "			`value` LONGTEXT,                                                                                                              \n" +
                "			createdBy VARCHAR(255)                                                                                                              \n" +
                "		);                                                                                                                                 \n" +
                "    END IF;                      \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator                                                                                                 \n" +
                "	# return error code                                                                                              \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                                                              \n" +
                "	# 0: Barcode template does not exist, Please add template                                                                                              \n" +
                "	# 1: Validation Clear                                                                                              \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                                                              \n" +
                "	# 3: Mfgcode is not found                                                                                              \n" +
                "	# 4: MFG PN does not exist                                                                                              \n" +
                "	# 5: Multiple MFG PN found                                                                                              \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                                                              \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                                                              \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                                                              \n" +
                "	# 9:  Multiple barcode template found.                                                                                              \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                                                              \n" +
                "	# 11: MFG PN is incorrect part                                                                                            \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                                                          \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                                                     \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                                                    \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                                                \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                                                              \n" +
                "	# 17: PID is contain more than 1 BOM line.                                                         \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                                                      \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                            \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.                                         \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.                                                                                  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.          \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other            \n" +
                "  \n" +
                "	block1: BEGIN             \n" +
                "		-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter          \n" +
                "		-- SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");          \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");          \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                                                \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status                   \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                               \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                                                   \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN                    \n" +
                "				IF (v_barcode_count > 1) THEN                                                                                                                \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                                                                                                                                    \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                               \n" +
                "					-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                                                  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                                                   \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                                                  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                     \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                       \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                \n" +
                "				ELSE                                                                                                   \n" +
                "					/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE isDeleted = 0 AND `status`=1 AND                                                                                                                                                  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                                                \n" +
                "					(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                                                \n" +
                "					SET pBarcodeID = v_barcode_id;                                                                                                                \n" +
                "				END IF;                     \n" +
                "			END IF;                                                                                                               \n" +
                "		ELSE                                                                                                                 \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;                                                                                                                \n" +
                "		END IF;                                                                                       \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN                   \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                                                           \n" +
                "			(                                                                                                                          \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.isDeleted = 0                                                                                                                         \n" +
                "				UNION                                                                                                                          \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                                                           \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.isDeleted = 0 AND c.isDeleted = 0                                                                                                                         \n" +
                "			) a;                                                  \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                                                            \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);             \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name                   \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                                                                                                  \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                                                \n" +
                "				SET pBarcodeID = v_barcode_id;                                                        \n" +
                "			/*END IF;  */                                            \n" +
                "		END IF;                                                                                                                 \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                                                          \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                                                  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                                                \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;                                                                                                                \n" +
                "			SET v_BarcodeType = '2D';                                                                                                                                        \n" +
                "		ELSE /* barcode 1D */                                                 \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                                                 \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;                                               \n" +
                "			SET v_BarcodeType = '1D';                                                                                                                                     \n" +
                "		END IF;                                                                                                 \n" +
                "	END block1;                                                    \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                \n" +
                "		block2: BEGIN                                \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                                                  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                                                  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                                                               \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;                                                                                                                                           \n" +
                "			-- declare exit loop if data not found                                                                                                                                                  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                                                  \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                                                             \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                                                  \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                                                  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                                                  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                                                  \n" +
                "					pentityId INT,                                                                                                                                                  \n" +
                "					pdataElementId INT,                                                                                                                                                  \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                                                  \n" +
                "				);                                                                                                                                             \n" +
                "				-- create temporary table for separator string values                                                                                                                                                  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                                                  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                                                        \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                                                  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength                   \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;                                                                                                                                       \n" +
                "				-- open cursor                                                                                                                                                  \n" +
                "				OPEN barcodeMatch_cursor;         \n" +
                "				-- set str label as whereclause                                                                                                                                                \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter          \n" +
                "				-- SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                                                                                                                                                 \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");            \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                                                  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                                                  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                                                          \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                                                  \n" +
                "				 END IF;                                                                                                                                                 \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                                                   \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                                                  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                                                  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                                                  \n" +
                "				 END IF;	                                                                          \n" +
                "				-- insert all values after seprator split                                                                                                                        \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                                    				          \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                                                  \n" +
                "				EXECUTE stmt1;                             \n" +
                "				DEALLOCATE PREPARE stmt1;            \n" +
                "				IF (pCategory = 'P') THEN                  \n" +
                "					-- create dynamic query to insert in packing slip                                                                                                                                                  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';                                  \n" +
                "				ELSE                   \n" +
                "					-- create dynamic query to insert in recieving material                                                                                                                                                  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                  \n" +
                "				END IF;                  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                                                  \n" +
                "				barcodeMatch_loop:LOOP                                                                                                                               \n" +
                "					-- get all five selected values                                                                                                                                                  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                                                          \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                                                  \n" +
                "					IF exit_loop THEN                                                                                \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                                                  \n" +
                "					END IF;                                                                                                                                             \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                                                  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                                                  \n" +
                "					EXECUTE stmtdelimiter;                                  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;                   \n" +
                "  \n" +
                "					-- get delimiter values from string                                                                                                                                                  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                                                          \n" +
                "					-- check for field type is static or dynamic                                                                                                                                                  \n" +
                "					-- if static field than check for mfg code and mfg part number                        										                \n" +
                "					IF v_fieldType = 0  THEN                  \n" +
                "						-- component_sid_stock                                                                                                                                                   \n" +
                "						-- get static field name from barcode table delimiter data element id                              \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);                                                                                                     \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                                                  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                      \n" +
                "							SET MFG_Part_No = delimiter_value_data;                    \n" +
                "							IF(pComponentID = 0)THEN                                                                                       \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                                                       \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                              \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM                                                                                                                           \n" +
                "								(                                                                                                                          \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                         \n" +
                "									FROM 	component c                                                                                         \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0                                                                                                                          \n" +
                "									UNION                                                                                                                          \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                         \n" +
                "									FROM 		component_otherpn co                                                                                         \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0                                                                                                                       \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND c.isGoodPart = 1 AND co.isDeleted = 0	                        \n" +
                "								) a                        \n" +
                "								UNION                        \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM                                                                                                                           \n" +
                "								(                                                                                                                          \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                      \n" +
                "									FROM 	component c                                                                                         \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.isDeleted = 0                                                                                                                       \n" +
                "									UNION                                                                                                                          \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                      \n" +
                "									FROM 		component_otherpn co                                                                                         \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                                           \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.isDeleted = 0 AND c.isDeleted = 0	                        \n" +
                "								) a                        \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;                        \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN																	                      \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID                       \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;                      \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail; 				                      \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  		                      \n" +
                "								   ELSE								                         \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;   								                          \n" +
                "								END IF;					                      \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN                                                                                      \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                                                       \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                                                      \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;                                                                                      \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                                                      \n" +
                "									IF (v_componentCount < 2) THEN                                                                                      \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                                               \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                                                        \n" +
                "										FROM 	temp_component_supplier_detail;                                                                                      \n" +
                "									END IF;                                                                                      \n" +
                "								ELSE                                                                                       \n" +
                "									IF (pSupplierID IS NULL) THEN	                      \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType                                                                               \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType                                                                                       \n" +
                "										FROM 	temp_component_detail;                      \n" +
                "									ELSE 	                      \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN                      \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;                      \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN                      \n" +
                "											SET v_componentCount=0;                      \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;                      \n" +
                "										ELSE                      \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission              \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission              \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);                      \n" +
                "										END IF;                      \n" +
                "									END IF;                                                                           \n" +
                "								END IF;                                                                                                                                                            \n" +
                "							ELSE                                                                                                                              \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType              \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType              \n" +
                "								FROM 	component                                                                                         \n" +
                "								WHERE 	id = pComponentID AND isDeleted = 0;                                                                                                                                        \n" +
                "							END IF;                                                                                                \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                                \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                                        \n" +
                "							END IF;                                                                                      \n" +
                "  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN               \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                                        \n" +
                "							END IF;              \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                      \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                 \n" +
                "							END IF;                                                                                              \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                         \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                            \n" +
                "							END IF;                                                                              \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                       \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                            \n" +
                "							END IF;                                                                                            \n" +
                "  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                                                    \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                       \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                      \n" +
                "							END IF;                                                                                                                    \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                                                                                                    \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                                                    \n" +
                "								SET v_SupplierID = v_componentId;                                                                                                                    \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                                                    \n" +
                "							END IF;                                                               \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                                                  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;			                                                              \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId                                                                                \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId          \n" +
                "								FROM 	(                                                  \n" +
                "										SELECT 	*                                                  \n" +
                "										FROM                                                                    \n" +
                "											(                                                                                                                \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,         \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                                                      \n" +
                "												FROM 		component_packagingalias cp                                                                                                                  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                                                  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                                                   \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                                                 \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0                                                                                       \n" +
                "												UNION                                                                                                                  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                                                \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                                                     \n" +
                "												FROM 		rfq_lineitems_alternatepart rla                                                                                  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                                                 \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0                                                                                                     \n" +
                "												UNION                                                                 \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                                                                  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                                                      \n" +
                "												FROM 		rfq_lineitems_alternatepart rla                                                                                  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                                                 \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL                                                                 \n" +
                "												GROUP BY 	custPNID, rla.partID                                                      \n" +
                "											) b         \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                                                  \n" +
                "										GROUP BY b.lineID, b.assyId                                                  \n" +
                "									) a;                                                  \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                     \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "									LEAVE barcodeMatch_loop;                                                                                    \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                      \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "									LEAVE barcodeMatch_loop;                                                                                 \n" +
                "								ELSE                                                              \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                                                      \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "										LEAVE barcodeMatch_loop;                                                                                                                      \n" +
                "									END IF;                                                           \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                                                              \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                                                \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "										LEAVE barcodeMatch_loop;                                                                                 \n" +
                "									END IF;                                                              \n" +
                "								END IF;                                                                                    \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                                  \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                                                  \n" +
                "									LEAVE barcodeMatch_loop;                                                                                  \n" +
                "								END IF;                                                                                   \n" +
                "							END IF;         \n" +
                "  \n" +
                "							IF  v_componentCount = 1 THEN                       \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                                                  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                            \n" +
                "								ELSE                    \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                                                  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"'); 	    				                                                                                                                                                  \n" +
                "								END IF;                    \n" +
                "							END IF;          \n" +
                "						END IF;                                                                                                                                                  \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                                                  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                                                          \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;                                                                                                                                                                  \n" +
                "						END IF;                                                                                                                                    \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN                       \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN															                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                 \n" +
                "							END IF;                    \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;                                                                                                                                                                                                                              \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                      \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                                      \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                                      \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                                      \n" +
                "							ELSE                    \n" +
                "								SET exit_loop = FALSE;                    \n" +
                "							END IF;                     \n" +
                "						END IF;          \n" +
                "  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;            \n" +
                "  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;          \n" +
                "  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                                            \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							ELSE                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                                                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                                                  \n" +
                "							END IF;                    \n" +
                "						END IF;          \n" +
                "					ELSE                                                                                                                              \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                                                   \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;                                                                                                                                               \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                                                   \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                                                           \n" +
                "					END IF;                                             \n" +
                "				END LOOP barcodeMatch_loop;                                                                                           \n" +
                "				-- check if mfg and component both found than                                                                    				                      \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN                                                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);          \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                                                  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);                                                                                                                            	                      \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MFR PN whose MFR is already mapped and the part is custom part, and the scanned MFR PN is not a custom part.',21,MFG_Part_No);				                      \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MFR PN whose MFR is already mapped and the part is custom part, and the scanned MFR PN is not a custom part.',21,MFG_Part_No);                                                                                                                            								                      \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);               \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND puid IS NOT NULL) THEN                                                                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);               \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                           \n" +
                "					IF (v_isGoodPart = 2) THEN                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                                            \n" +
                "					ELSE                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                                            \n" +
                "					END IF;                                                                      \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                                                            \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                                           \n" +
                "					IF (v_isCPNFlag = 1) THEN                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                                            \n" +
                "					ELSE                                                       \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                                            \n" +
                "					END IF;                                                      \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                                                  \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                                                \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                                                      \n" +
                "					-- else                                                                                                                \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                                                      \n" +
                "					-- end if;                                                                                                                \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN           \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN                                                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                                                  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                                                     \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                                                  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                                                     \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                                                  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                                                     \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN                                                                                                                                                 \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);              \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                                                  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                                                  \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                                                  \n" +
                "					END IF;									                                                                                                                                                  \n" +
                "				ELSE 		                                                                                                                                        \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                                                  \n" +
                "					END IF;	                                                                                                                                                  \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                                                  \n" +
                "					END IF;*/	                                                                                                                                                  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                                                    \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                                                  \n" +
                "					END IF;						                                                                                                                                                  \n" +
                "				END IF;	                                                                                              \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                                                 \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                                                    \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                                                    \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                                                  \n" +
                "					END IF;                                                                                                       \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                                                  \n" +
                "					END IF;                                                                                                                                 \n" +
                "				END IF;                                                                                                                                \n" +
                "				IF (puid IS NOT NULL) THEN                                                                                 \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                                                  \n" +
                "						/*IF (pprefix = '') THEN	                                                                                                                   \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                                                    \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                                                    \n" +
                "						END IF;*/                                                                                                                                 \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                                                        \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						                  						                    \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                                                  \n" +
                "						EXECUTE stmt1;                                                                                                                                               \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                                                    \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                                                    \n" +
                "						END IF;                                                                                                                      \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                                                \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                                                    \n" +
                "						END IF;                                                                                                                       \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                                                    \n" +
                "						END IF;                                                                                                                   \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                                                    \n" +
                "						END IF;                                                                                                                     \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                                                    \n" +
                "						END IF;                                                                                                                      \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                                                 \n" +
                "						END IF;                                                                                                                   \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                                                    \n" +
                "						END IF;                                                                                                                   \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                                               \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                                                   \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                                                  \n" +
                "						EXECUTE stmt2;	                                                                                                                \n" +
                "						DEALLOCATE PREPARE stmt2;                     \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                                              \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                                                  \n" +
                "						ELSE                                                               \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                                                  \n" +
                "						END IF;                                                              \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                                                        \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                                                   \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                                                  \n" +
                "						END IF;                                                                                                                                                  \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                                                  \n" +
                "  \n" +
                "						SELECT 	c.*,                                            \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                            \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                             \n" +
                "							csup.packageQty AS supplierPkgQty,                                             \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                             \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                             \n" +
                "							mcm.mfgName AS supplierMFGName,                                             \n" +
                "							csup.mfgPN AS supplierMFGPN,                                             \n" +
                "							csup.packagingID AS supplierPackagingId,                                             \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                                             \n" +
                "							csup.minimum AS supplierMinimum,                                             \n" +
                "							ccpn.id AS cpnID,                                             \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                             \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                             \n" +
                "							rfqroh.name AS rohsName,                                             \n" +
                "							rfqmou.name AS mountingTypeName,                                             \n" +
                "							um.unitName AS uomName,                                            \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                            \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                            \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                          \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                             \n" +
                "						FROM component AS c                                                                                                               \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                                              \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                                              \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                            \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                                              \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                                          \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                                              \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                                                \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                                             \n" +
                "						WHERE c.id = v_componentId;                                                                                                              \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                                                              \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                                                               \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                                                              \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;                                                                                                     \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                                                     \n" +
                "						FROM 	component_cust_alias_rev_pn                                                                     \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;                                                      \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                                                        \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0                                                                                         \n" +
                "						) AND isDeleted = 0;                                                              \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                                                       \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                                                     \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                                                    \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                                                        \n" +
                "						WHERE 		rla.isDeleted = 0                                                                    \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                                                     \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                                                     \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                                                              \n" +
                "  \n" +
                "					ELSE                                                                                                                                                 \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                                                  \n" +
                "					END IF;                                                                                                  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                                                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                \n" +
                "				ELSE             \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');                                                                																		        						                  						                    \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                                                  \n" +
                "						EXECUTE stmt1;                                                             \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "					END IF;        \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                         \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                     \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                             \n" +
                "  \n" +
                "					IF (pCategory = 'M') THEN        \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                     \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                        \n" +
                "						SELECT 	c.*,                                             \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                             \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                             \n" +
                "							csup.packageQty AS supplierPkgQty,                                             \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                             \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                             \n" +
                "							mcm.mfgName AS supplierMFGName,                                             \n" +
                "							csup.packagingID AS supplierPackagingId,                                             \n" +
                "							csup.mfgPN AS supplierMFGPN,                                             \n" +
                "							csup.id AS supplierMFGPNID,                                             \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                                             \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                                       \n" +
                "							ccpn.id AS cpnID,                                             \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                             \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                             \n" +
                "							rfqroh.name AS rohsName,                                             \n" +
                "							rfqmou.name AS mountingTypeName,                                             \n" +
                "							um.unitName AS uomName,                                            \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                            \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                            \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                          \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                                               \n" +
                "						FROM component AS c                                                                                                               \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                                              \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                                              \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                            \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                                              \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                                           \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                                         \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                                                  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                                \n" +
                "						WHERE c.id = v_componentId;           \n" +
                "					END IF;                      \n" +
                "				END IF;                                                                                                            \n" +
                "			ELSE                                               \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                                                   \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                                                  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;	                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                    \n" +
                "				SELECT 1;                     \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                    \n" +
                "				SELECT 1; 		                  \n" +
                "			END IF;                                                                                                                                                  \n" +
                "  \n" +
                "		END block2;                                      \n" +
                "	ELSE                                    \n" +
                "		IF (puid IS NOT NULL) THEN                                    \n" +
                "			SELECT * FROM tempUIDSuccessDetail;                                    \n" +
                "		ELSE                                     \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                     \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                    \n" +
                "			SELECT 1;                                    \n" +
                "		END IF;                                    \n" +
                "	END IF;                                                                                                                                                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-12-20 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (650,'1.00','V1','Changes of credit and debit memo flow - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 650:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-20  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CalculateAndCreateKitAllocationAssyDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_CalculateAndCreateKitAllocationAssyDetail`(                                                                        \n" +
                "	IN pSalesOrderID INT,                      \n" +
                "	IN pUserID VARCHAR(50),                \n" +
                "	IN pRoleID INT	                \n" +
                ")  \n" +
                "BEGIN       \n" +
                "  \n" +
                "IF(SELECT COUNT(1) FROM salesorderdet WHERE refSalesOrderID = pSalesOrderID AND partCategory=3 AND isdeleted=0)>0 THEN                       \n" +
                "	block1: BEGIN                      \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;                      \n" +
                "		DECLARE v_Id INT;                      \n" +
                "		DECLARE v_salesOrderId INT;                      \n" +
                "		DECLARE v_poQty INT;                      \n" +
                "		DECLARE v_price DECIMAL(18,6);                      \n" +
                "		DECLARE v_mrpQty INT;                      \n" +
                "		DECLARE v_kitQty INT;                    \n" +
                "		DECLARE v_partId INT;      \n" +
                "		DECLARE v_isSkipKitCreation TINYINT;   \n" +
                "		DECLARE v_defaultCounter INT DEFAULT 0;      \n" +
                "  \n" +
                "		DECLARE  SalesOrderDetail_Cursor CURSOR FOR                          \n" +
                "		SELECT 	id, refSalesOrderID, qty, price, mrpQty, kitQty, partID, isSkipKitCreation FROM salesorderdet                                                                       \n" +
                "		WHERE 	refSalesOrderID = pSalesOrderID AND partCategory=3;                       \n" +
                "  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                      \n" +
                "		OPEN SalesOrderDetail_Cursor;                      \n" +
                "  \n" +
                "		SalesOrderDetail_Loop:LOOP                      \n" +
                "			-- Need to add kit qty when development is done                      \n" +
                "			FETCH SalesOrderDetail_Cursor INTO v_Id, v_salesOrderId, v_poQty, v_price, v_mrpQty, v_kitQty, v_partId, v_isSkipKitCreation;                        \n" +
                "			IF exit_loop THEN                                                                     \n" +
                "				LEAVE SalesOrderDetail_Loop;                                                                          \n" +
                "			END IF;    \n" +
                "            IF v_isSkipKitCreation = 0 THEN    \n" +
                "                    SET v_defaultCounter=v_defaultCounter+1;  \n" +
                "				CALL Sproc_CreateKitAllocationConsolidateLine (v_Id, v_partId, pUserID, pRoleID);            \n" +
                "				CALL Sproc_CreateKitAllocationAssyDetail(v_partId, v_Id, v_kitQty, v_mrpQty, pUserID, 'CREATE', pRoleID);            \n" +
                "			END IF;    \n" +
                "		END LOOP SalesOrderDetail_Loop;                      \n" +
                "		CLOSE SalesOrderDetail_Cursor;    \n" +
                "		 IF(v_defaultCounter=0)THEN  \n" +
                "	           SELECT 1 AS IsSuccess, NULL AS ErrorCode;       \n" +
                "	        END IF;                     \n" +
                "	END block1;   \n" +
                "  \n" +
                "  ELSE      \n" +
                "	SELECT 1 AS IsSuccess, NULL AS ErrorCode;       \n" +
                "END IF;                     \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-12-20  *********************************** */
                /* **************************** New Script -> 29-12-20  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (651,'1.00','V1',' Alter procedure Sproc_CalculateAndCreateKitAllocationAssyDetail-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 651:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-20  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerPackingslipReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                  \n" +
                "	IN cpid INT                  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	SELECT               \n" +
                "    cp.id,          \n" +
                "    cp.status,        \n" +
                "    cp.packingSlipNumber AS PackingSlip,              \n" +
                "    cp.packingSlipDate AS PackingSlipDate,              \n" +
                "    cp.poDate AS PODate,              \n" +
                "    cp.soNumber AS SalesOrderNumber,              \n" +
                "    cp.poNumber AS PONumber,              \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,              \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,              \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,          \n" +
                "    cp.soDate AS SODate,              \n" +
                "    cp.sorevision AS SORevision,              \n" +
                "	cp.billingAddress AS SoldToAddress,        \n" +
                "	cp.shippingAddress AS ShippingAddress,        \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),              \n" +
                "            '-') AS SalesOrderPersonName,        \n" +
                "	CONCAT(us.firstName,' ',us.lastName) AS  preparedBy, us.emailAddress, emp.phExtension          \n" +
                "FROM              \n" +
                "    customer_packingslip cp     \n" +
                "        LEFT JOIN              \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID              \n" +
                "        AND sm.isDeleted = 0              \n" +
                "        LEFT JOIN              \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId              \n" +
                "        AND gc.isDeleted = 0              \n" +
                "        AND gc.categoryType = 'Shipping Methods'              \n" +
                "        LEFT JOIN              \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID              \n" +
                "        AND gcc.isDeleted = 0              \n" +
                "        AND gcc.categoryType = 'Payment Terms'            \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                  \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID           \n" +
                "WHERE              \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid              \n" +
                "LIMIT 1;              \n" +
                "  \n" +
                "SELECT               \n" +
                "	cpd.lineID AS PSLine,        \n" +
                "    cpd.id AS cpDetID,        \n" +
                "    cpd.refCustPackingSlipID AS cpID,         \n" +
                "    cpd.partId,        \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,          \n" +
                "    IFNULL(cpd.remainingQty,0) AS RemainingQty,          \n" +
                "    cpd.custPOLineID AS POLine,  \n" +
                "    cpd.shippingNotes AS ShippingComment,  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN        \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)        \n" +
                "		WHEN (c.partType = 3) THEN        \n" +
                "		c.custAssyPN        \n" +
                "		WHEN (c.partType = 2 OR c.partType = 4) THEN        \n" +
                "		c.mfgPN        \n" +
                "		ELSE        \n" +
                "		''        \n" +
                "	END) AS PartNumber,           \n" +
                "    FUN_GETUOMABBREVIATIONBYID(c.uom) AS UOM,              \n" +
                "    IFNULL(c.rev, '') AS Revision,         \n" +
                "    c.partType,        \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',           \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),              \n" +
                "            IFNULL(CONCAT(', ',              \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),              \n" +
                "                    ''),              \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),              \n" +
                "            IFNULL(CONCAT(', HTS Code : ', c.htsCode), ''),              \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton              \n" +
                "FROM              \n" +
                "    customer_packingslip_det cpd        \n" +
                "        LEFT JOIN              \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id              \n" +
                "        AND cp.isDeleted = 0              \n" +
                "        LEFT JOIN              \n" +
                "    component c ON c.id = cpd.partid              \n" +
                "        LEFT JOIN              \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID              \n" +
                "        AND sd.isDeleted = 0             \n" +
                "        LEFT JOIN             \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID              \n" +
                "        LEFT JOIN              \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID      	        \n" +
                "        LEFT JOIN              \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id              \n" +
                "        AND ra.partID = cpd.partId              \n" +
                "        LEFT JOIN              \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id         \n" +
                "WHERE      \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-12-20  *********************************** */
                "DROP function IF EXISTS `fun_getCertificationByPartID`;  \n" +
                "CREATE FUNCTION `fun_getCertificationByPartID`(                      \n" +
                "	pPartID INT                    \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                      \n" +
                "	DECLARE compCertificationList LONGTEXT;			    \n" +
                "	/* SELECT     \n" +
                "    GROUP_CONCAT(DISTINCT IFNULL(cs.fullName, ''),    \n" +
                "        '',    \n" +
                "        CASE    \n" +
                "            WHEN wc.classIDs IS NULL THEN ''    \n" +
                "            ELSE (SELECT     \n" +
                "                    GROUP_CONCAT(IFNULL(className, ''))    \n" +
                "                FROM    \n" +
                "                    standard_class    \n" +
                "                WHERE    \n" +
                "                    classID = wc.classIDs and isDeleted = 0)    \n" +
                "        END    \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC    \n" +
                "        SEPARATOR ', ')    \n" +
                "FROM    \n" +
                "    `workorder_certification` wc    \n" +
                "        JOIN    \n" +
                "    certificate_standards cs ON wc.certificateStandardID = cs.certificateStandardID    \n" +
                "WHERE    \n" +
                "    wc.isDeleted = 0    \n" +
                "        AND wc.woID IN (SELECT     \n" +
                "            woID    \n" +
                "        FROM    \n" +
                "            assemblystock    \n" +
                "        WHERE    \n" +
                "            partID = pPartID AND isDeleted = 0) INTO compCertificationList;            \n" +
                "	IF compCertificationList IS NULL    \n" +
                "    THEN */    \n" +
                "		SELECT         \n" +
                "    GROUP_CONCAT(   \n" +
                "        CASE        \n" +
                "            WHEN csd.classID IS NULL THEN cs.fullName     \n" +
                "            ELSE (SELECT         \n" +
                "                    GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))       \n" +
                "                FROM        \n" +
                "                    standard_class        \n" +
                "                WHERE        \n" +
                "                    classID = csd.classID and isDeleted = 0)        \n" +
                "        END        \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC        \n" +
                "        SEPARATOR ', ')        \n" +
                "FROM           \n" +
                "    `component_standard_details` csd        \n" +
                "        JOIN        \n" +
                "    certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID        \n" +
                "WHERE        \n" +
                "    csd.isDeleted = 0        \n" +
                "        AND csd.componentID = pPartID INTO compCertificationList;            \n" +
                "	#  END IF;        \n" +
                "    RETURN compCertificationList;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-12-20  *********************************** */
                "DROP function IF EXISTS `fun_getCertificationByWoNumber`;  \n" +
                "CREATE FUNCTION `fun_getCertificationByWoNumber`(                      \n" +
                "	pWoNumber VARCHAR(250)                    \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                      \n" +
                "	DECLARE compCertificationList LONGTEXT;            \n" +
                "	DECLARE pPartID int;    \n" +
                "	SELECT DISTINCT    \n" +
                "    partID    \n" +
                "INTO pPartID FROM    \n" +
                "    assemblyStock    \n" +
                "WHERE    \n" +
                "    woNumber = pWoNumber AND isDeleted = 0;		    \n" +
                "    IF (SELECT COUNT(1) FROM assemblyStock WHERE woNumber = pWoNumber and isDeleted = 0 and woID IS NULL) > 0   \n" +
                "    THEN	      \n" +
                "	SELECT     \n" +
                "    GROUP_CONCAT(  \n" +
                "        CASE    \n" +
                "            WHEN csd.classID IS NULL THEN cs.fullName  \n" +
                "            ELSE (SELECT     \n" +
                "                    GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))    \n" +
                "                FROM    \n" +
                "                    standard_class    \n" +
                "                WHERE    \n" +
                "                    classID = csd.classID and isDeleted = 0)    \n" +
                "        END    \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC    \n" +
                "        SEPARATOR ', ')    \n" +
                "FROM    \n" +
                "    `component_standard_details` csd    \n" +
                "        JOIN    \n" +
                "    certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID    \n" +
                "WHERE    \n" +
                "    csd.isDeleted = 0    \n" +
                "        AND csd.componentID = pPartID INTO compCertificationList;      \n" +
                "ELSE     \n" +
                "		SELECT     \n" +
                "    GROUP_CONCAT(DISTINCT IFNULL(cs.fullName, ''),    \n" +
                "        '',    \n" +
                "        CASE    \n" +
                "            WHEN wc.classIDs IS NULL THEN ''    \n" +
                "            ELSE (SELECT     \n" +
                "                    GROUP_CONCAT(IFNULL(className, ''))    \n" +
                "                FROM    \n" +
                "                    standard_class    \n" +
                "                WHERE    \n" +
                "                    classID = wc.classIDs)    \n" +
                "        END    \n" +
                "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC    \n" +
                "        SEPARATOR ', ')    \n" +
                "FROM    \n" +
                "    `workorder_certification` wc    \n" +
                "        JOIN    \n" +
                "    certificate_standards cs ON wc.certificateStandardID = cs.certificateStandardID    \n" +
                "WHERE    \n" +
                "    wc.isDeleted = 0    \n" +
                "        AND wc.woID IN (SELECT     \n" +
                "            woID    \n" +
                "        FROM    \n" +
                "            assemblystock    \n" +
                "        WHERE    \n" +
                "            partID = pPartID AND isDeleted = 0) INTO compCertificationList;	    \n" +
                "        END IF;    \n" +
                "	RETURN compCertificationList;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-12-20  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (652,'1.00','V1',' Bug #29242 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 652:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2020  *********************************** */
                "ALTER TABLE assemblystock  \n" +
                "MODIFY COLUMN serialNo TEXT;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (653,'1.00','V1',' Resolved max lenght issue for assembly stock - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 653:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CheckAndReGetPackingSlipLineDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_CheckAndReGetPackingSlipLineDetail`(                                                                                              \n" +
                "	IN pInvoiceId INT,                      \n" +
                "	IN pPackingSlipId INT,                                          \n" +
                "	IN pAction VARCHAR(50),                      \n" +
                "	IN pUserId VARCHAR(50),          \n" +
                "	IN pUserRoleId VARCHAR(50)                        \n" +
                ")  \n" +
                "BEGIN                         \n" +
                "	DECLARE v_InsertCount INT;                    \n" +
                "	DECLARE v_DeleteCount INT;           \n" +
                "	DECLARE v_UpdateCount INT;               \n" +
                "	DECLARE v_TotalDetailCount INT;              \n" +
                "	DECLARE v_PendingCount INT;              \n" +
                "	DECLARE v_DisapproveCount INT;                \n" +
                "	DECLARE v_ApproveCount INT;                \n" +
                "	DECLARE v_DetailLineStatus VARCHAR(5);                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_ReGet_Validation_Error;                                                                                             \n" +
                "	CREATE TEMPORARY TABLE temp_ReGet_Validation_Error                                      \n" +
                "	(                                                                                            \n" +
                "		IsSuccess BOOLEAN,                                    \n" +
                "		NoOfLineInsert INT,                    \n" +
                "		NoOfLineDelete INT,        \n" +
                "		NoOfLineUpdate INT                    \n" +
                "	);                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Insert_Packing_Slip_Record;                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Insert_Packing_Slip_Record AS                      \n" +
                "	SELECT 	*                     \n" +
                "	FROM 	packing_slip_material_receive_det                     \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pPackingSlipId                     \n" +
                "			AND deletedAt IS NULL                    \n" +
                "			AND packingSlipSerialNumber < 1000                  \n" +
                "			AND refChargesTypeId IS NULL                  \n" +
                "			AND packingSlipSerialNumber NOT IN (                    \n" +
                "				SELECT 	packingSlipSerialNumber                     \n" +
                "				FROM 	packing_slip_material_receive_det                     \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pInvoiceId                    \n" +
                "						AND packingSlipSerialNumber < 1000                    \n" +
                "						AND deletedAt IS NULL                    \n" +
                "			);                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Delete_Packing_Slip_Record;                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Delete_Packing_Slip_Record AS                    \n" +
                "	SELECT 	*                     \n" +
                "	FROM 	packing_slip_material_receive_det                     \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pInvoiceId                     \n" +
                "			AND deletedAt IS NULL                    \n" +
                "			AND packingSlipSerialNumber < 1000                    \n" +
                "			AND refChargesTypeId IS NULL                  \n" +
                "			AND packingSlipSerialNumber NOT IN (                    \n" +
                "				SELECT 	packingSlipSerialNumber                     \n" +
                "				FROM 	packing_slip_material_receive_det                     \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pPackingSlipId                    \n" +
                "						AND packingSlipSerialNumber < 1000                    \n" +
                "						AND deletedAt IS NULL                    \n" +
                "			);         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Update_Packing_Slip_Record;                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Update_Packing_Slip_Record AS        \n" +
                "	SELECT 		ps.id packingSlipId,         \n" +
                "			si.id invoiceId,         \n" +
                "			ps.packingSlipSerialNumber,         \n" +
                "			si.packingSlipSerialNumber invoicePackingSlipSerialNumber,         \n" +
                "			si.orderedQty,         \n" +
                "			si.orderedQty invoiceOrderedQty,         \n" +
                "			ps.receivedQty,        \n" +
                "			si.receivedQty invoiceReceivedQty,         \n" +
                "			ps.packingSlipQty,        \n" +
                "			si.packingSlipQty invoicePackingSlipQty,        \n" +
                "			si.invoicePrice,     \n" +
                "			ps.packagingID,          \n" +
                "			si.packagingID invoicePackagingID,        \n" +
                "			ps.nickname,         \n" +
                "			si.nickname invoiceNickname,         \n" +
                "			ps.receivedStatus,         \n" +
                "			si.receivedStatus invoiceReceivedStatus,         \n" +
                "			ps.remark,        \n" +
                "			si.remark invoiceRemark,         \n" +
                "			(CASE WHEN ps.packingSlipSerialNumber != si.packingSlipSerialNumber THEN 1 ELSE 0 END) isSerialNumberUpdate,        \n" +
                "			(CASE WHEN ps.orderedQty != si.orderedQty THEN 1 ELSE 0 END) isOrderedQtyUpdate,        \n" +
                "			(CASE WHEN ps.receivedQty != si.receivedQty THEN 1 ELSE 0 END) isReceivedQtyUpdate,        \n" +
                "			(CASE WHEN ps.packingSlipQty != si.packingSlipQty THEN 1 ELSE 0 END) isPackingSlipQtyUpdate,        \n" +
                "			(CASE WHEN ps.packagingID != si.packagingID THEN 1 ELSE 0 END) isPackagingIDUpdate,        \n" +
                "			(CASE WHEN ps.nickname != si.nickname THEN 1 ELSE 0 END) isNicknameUpdate,        \n" +
                "			(CASE WHEN ps.receivedStatus != si.receivedStatus THEN 1 ELSE 0 END) isReceivedStatusUpdate,        \n" +
                "			(CASE WHEN ps.remark != si.remark THEN 1 ELSE 0 END) isRemarkUpdate        \n" +
                "	FROM 		packing_slip_material_receive_det ps         \n" +
                "	INNER JOIN 	packing_slip_material_receive_det si ON si.packingSlipSerialNumber = ps.packingSlipSerialNumber AND si.deletedAt IS NULL AND si.packingSlipSerialNumber < 1000        \n" +
                "	WHERE 		ps.refPackingSlipMaterialRecID = pPackingSlipId AND si.refPackingSlipMaterialRecID = pInvoiceId         \n" +
                "				AND ps.deletedAt IS NULL;		        \n" +
                "  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_InsertCount FROM temp_Insert_Packing_Slip_Record;                    \n" +
                "	SELECT 	COUNT(1) INTO v_DeleteCount FROM temp_Delete_Packing_Slip_Record;           \n" +
                "  \n" +
                "	IF ((SELECT receiptType FROM packing_slip_material_receive WHERE id = pPackingSlipId AND isDeleted = 0) = 'R') THEN  \n" +
                "		SET v_UpdateCount = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	COUNT(1) INTO v_UpdateCount         \n" +
                "		FROM 	temp_Update_Packing_Slip_Record         \n" +
                "		WHERE 	(        \n" +
                "				isSerialNumberUpdate = 1 OR         \n" +
                "				isOrderedQtyUpdate = 1 OR         \n" +
                "				isReceivedQtyUpdate = 1 OR         \n" +
                "				isPackingSlipQtyUpdate = 1 OR         \n" +
                "				isPackagingIDUpdate = 1 OR        \n" +
                "				isNicknameUpdate = 1 OR        \n" +
                "				isReceivedStatusUpdate = 1 OR        \n" +
                "				isRemarkUpdate = 1         \n" +
                "			);                 \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) = 0 AND IFNULL(v_DeleteCount, 0) = 0 AND IFNULL(v_UpdateCount, 0) = 0) THEN                    \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);                    \n" +
                "	ELSE                    \n" +
                "		IF (pAction = 'GetNotification') THEN                    \n" +
                "			INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(FALSE, v_InsertCount, v_DeleteCount, v_UpdateCount);                    \n" +
                "		END IF;                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) > 0) THEN                    \n" +
                "		IF (pAction = 'ReGet') THEN                    \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges, extendedPrice, `status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)                      \n" +
                "			SELECT 	pInvoiceId, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges,   \n" +
                "				(  \n" +
                "					CASE   \n" +
                "						WHEN invoicePrice IS NOT NULL AND packingSlipQty IS NOT NULL THEN   \n" +
                "							invoicePrice * packingSlipQty  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				),  \n" +
                "				`status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, pUserId, pUserId, pUserRoleId, pUserRoleId                      \n" +
                "			FROM 	temp_Insert_Packing_Slip_Record;                \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;		              \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';              \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';		              \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';		              \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN              \n" +
                "				SET v_DetailLineStatus = 'I';              \n" +
                "			ELSEIF (v_PendingCount > 0) THEN              \n" +
                "				SET v_DetailLineStatus = 'W';              \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN              \n" +
                "				SET v_DetailLineStatus = 'A';              \n" +
                "			ELSE              \n" +
                "				SET v_DetailLineStatus = 'W';              \n" +
                "			END IF;              \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive               \n" +
                "			SET 	`status` = v_DetailLineStatus               \n" +
                "			WHERE 	receiptType = 'I'               \n" +
                "					AND deletedAt IS NULL               \n" +
                "					AND id = pInvoiceId;      \n" +
                "  \n" +
                "			/*UPDATE 	packing_slip_material_receive               \n" +
                "			SET 	`status` = 'W'               \n" +
                "			WHERE 	receiptType = 'I'               \n" +
                "					AND deletedAt IS NULL               \n" +
                "					AND id = pInvoiceId; */                 \n" +
                "		END IF;                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF (IFNULL(v_DeleteCount, 0) > 0) THEN                    \n" +
                "		IF (pAction = 'ReGet') THEN                    \n" +
                "			UPDATE 	packing_slip_material_receive_det                    \n" +
                "			SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1                    \n" +
                "			WHERE 	refPackingSlipMaterialRecID = pInvoiceId                     \n" +
                "					AND deletedAt IS NULL                    \n" +
                "					AND packingSlipSerialNumber IN (                    \n" +
                "						SELECT packingSlipSerialNumber FROM temp_Delete_Packing_Slip_Record	                    \n" +
                "					);                 \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;		              \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';              \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';		              \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';		              \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN              \n" +
                "				SET v_DetailLineStatus = 'I';              \n" +
                "			ELSEIF (v_PendingCount > 0) THEN              \n" +
                "				SET v_DetailLineStatus = 'W';              \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN              \n" +
                "				SET v_DetailLineStatus = 'A';              \n" +
                "			ELSE              \n" +
                "				SET v_DetailLineStatus = 'W';              \n" +
                "			END IF;              \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive               \n" +
                "			SET 	`status` = v_DetailLineStatus               \n" +
                "			WHERE 	receiptType = 'I'               \n" +
                "					AND deletedAt IS NULL               \n" +
                "					AND id = pInvoiceId;                \n" +
                "  \n" +
                "		END IF;                    \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF (IFNULL(v_UpdateCount, 0) > 0) THEN        \n" +
                "		IF (pAction = 'ReGet') THEN          \n" +
                "			UPDATE 	packing_slip_material_receive_det ps, packing_slip_material_receive_det si        \n" +
                "			SET 	si.packingSlipSerialNumber = ps.packingSlipSerialNumber,        \n" +
                "				si.refChargesTypeId = ps.refChargesTypeId,                  \n" +
                "				si.nickname = ps.nickname,              \n" +
                "				si.partID = ps.partID,              \n" +
                "				si.refSupplierPartId = ps.refSupplierPartId,              \n" +
                "				si.scanLabel = ps.scanLabel,              \n" +
                "				si.orderedQty = ps.orderedQty,              \n" +
                "				si.receivedQty = ps.receivedQty,              \n" +
                "				si.packingSlipQty = ps.packingSlipQty,              \n" +
                "				si.binID = ps.binID,              \n" +
                "				si.warehouseID = ps.warehouseID,              \n" +
                "				si.parentWarehouseID = ps.parentWarehouseID,        \n" +
                "				si.invoicePrice = ps.invoicePrice,           \n" +
                "				si.umidCreated = ps.umidCreated,              \n" +
                "				si.poReleaseNumber = ps.poReleaseNumber,              \n" +
                "				si.packagingID = ps.packagingID,            \n" +
                "				si.receivedStatus = ps.receivedStatus,            \n" +
                "				si.remark = ps.remark        \n" +
                "			WHERE 	ps.refPackingSlipMaterialRecID = pPackingSlipId         \n" +
                "					AND si.refPackingSlipMaterialRecID = pInvoiceId         \n" +
                "					AND si.packingSlipSerialNumber = ps.packingSlipSerialNumber        \n" +
                "					AND ps.deletedAt IS NULL        \n" +
                "					AND si.deletedAt IS NULL;        \n" +
                "		END IF;        \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF (pAction = 'GetNotification') THEN                    \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate FROM temp_ReGet_Validation_Error;                    \n" +
                "	ELSEIF (pAction = 'ReGet') THEN                    \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);                    \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete FROM temp_ReGet_Validation_Error;                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                              \n" +
                "	IN pPageIndex INT,                                                                                                    \n" +
                "	IN pRecordPerPage INT,                                                                                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                          \n" +
                "	IN pPackingSlipID INT                                                                                       \n" +
                ")  \n" +
                "BEGIN                                                                                          \n" +
                "	DECLARE pOffset INT;                                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                      \n" +
                "	DECLARE v_ParentPackingSlipId INT;                                    \n" +
                "	DECLARE v_InvoiceSlipId INT;                                   \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                              \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                        \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;                                      \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;                                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                                                               \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                           \n" +
                "	SELECT 	*,                    \n" +
                "		(                                      \n" +
                "			CASE                                       \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'                                      \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'                                      \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'                                      \n" +
                "				ELSE NULL                                      \n" +
                "			END                                      \n" +
                "		) AS receivedStatusValue                    \n" +
                "	FROM 	(                                                                                             \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                                                              \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(8,1)) packingSlipSerialNumber,                                                                         \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel, 	                                                                          \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                                                          \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                                                          \n" +
                "				p.invoicePrice, 				p.disputedPrice,					                                  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,                                                                           \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName, 	                                  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,     	                               \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  					                                  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt, 					                                  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,                                                                                                                  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                                                           \n" +
                "				p.status, 					p.extendedPrice, 					p.extendedReceivedPrice,          \n" +
                "				(IFNULL(p.extendedPrice, 0) - IFNULL(p.extendedReceivedPrice, 0)) lineVariance, 			      \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance, 			      \n" +
                "				p.refCreditDebitInvoiceNo,                                                                           \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated, 						        \n" +
                "				p.poReleaseNumber,                              p.isMemoForPrice,					p.isMemoForQty,                                            \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                                                     \n" +
                "				c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                                                     \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                                                              \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                                                            \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                                                            \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                                                      \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                                                          \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                                                    \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,                          \n" +
                "				c.partType,                                           \n" +
                "				(                                      \n" +
                "					CASE                                      \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                      \n" +
                "							p.receivedStatus                                      \n" +
                "						ELSE                                       \n" +
                "							(SELECT receivedStatus                                       \n" +
                "							FROM 	packing_slip_material_receive_det                                       \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId                                       \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                        \n" +
                "									AND isDeleted = 0 LIMIT 1)                                      \n" +
                "					END                                      \n" +
                "				) receivedStatus,			                                      \n" +
                "				p.remark,                                     \n" +
                "				p.comment,                        \n" +
                "				p.internalRef,                        \n" +
                "				p.purchaseInspectionComment,                                   \n" +
                "				(                                      \n" +
                "					CASE                                      \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                      \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                              \n" +
                "						ELSE                                       \n" +
                "							(SELECT COUNT(1)                                       \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp                              \n" +
                "							WHERE EXISTS (                              \n" +
                "									SELECT 	1                                       \n" +
                "									FROM 	packing_slip_material_receive_det pslip                              \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId                                       \n" +
                "											AND 	pslip.id = psmp.lineId                              \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber                                       \n" +
                "											AND	pslip.isDeleted = 0)                              \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')                                      \n" +
                "					END                                      \n" +
                "				) AS purchaseRequirementCount,                                      \n" +
                "				(                                      \n" +
                "					CASE                                      \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN                                      \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')                                      \n" +
                "						ELSE                                      \n" +
                "							(SELECT COUNT(1)                                       \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm                                      \n" +
                "							WHERE 	EXISTS (                              \n" +
                "									SELECT 	1                              \n" +
                "									FROM 	packing_slip_material_receive_det psmr                              \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId                              \n" +
                "										AND	psmr.id = psm.lineId                              \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber                              \n" +
                "										AND 	psmr.isDeleted = 0                              \n" +
                "									)                              \n" +
                "								AND psm.inspectionStatus = 'R'                                       \n" +
                "								AND psm.isDeleted = 0                              \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')                              \n" +
                "					END                                      \n" +
                "				) AS rejectedPurchaseRequirementCount,                                        \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,    \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,                                                                                          \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                                                    \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0                                              \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	                                              \n" +
                "				(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,                                                \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,                                                \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,                                     \n" +
                "				ps.refInvoiceIdForMemo,      \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,      \n" +
                "				ps.refInvoiceNumberForMemo,       \n" +
                "				(                                    \n" +
                "					CASE                                    \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                                    \n" +
                "						ELSE                                     \n" +
                "							(SELECT `status`                                     \n" +
                "							FROM 	packing_slip_material_receive_det                                     \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                                     \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                     \n" +
                "									AND isDeleted = 0)                              \n" +
                "					END                                    \n" +
                "				) invoiceStatus,                     \n" +
                "				(                                    \n" +
                "					CASE                                    \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL                                    \n" +
                "						ELSE                                     \n" +
                "							(SELECT refCreditDebitInvoiceNo                                     \n" +
                "							FROM 	packing_slip_material_receive_det                                     \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId                                     \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber                                     \n" +
                "									AND isDeleted = 0)                              \n" +
                "					END                                    \n" +
                "				) invoiceLineHasMemo,                                                \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,                                                                                             \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd                               \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'                              \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id                              \n" +
                "					AND pd.partId = p.partID) commentCount,                         \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,              \n" +
                "				p.refPackingSlipIdForRma,              \n" +
                "				p.refInvoiceIdForRma,              \n" +
                "				p.refPackingSlipForRma,              \n" +
                "				p.refInvoiceForRma,              \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,              \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber              \n" +
                "		FROM		packing_slip_material_receive_det p                                                                                  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0                                                          \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL        \n" +
                "		LEFT JOIN	(      \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo       \n" +
                "					FROM 	packing_slip_material_receive_det ps       \n" +
                "					WHERE 	ps.isDeleted = 0      \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId                                                             \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                                                           \n" +
                "		AND 		p.isDeleted = 0                    \n" +
                "	) a;                                                                                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                                                            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                                                    \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                                                            \n" +
                "	FROM		packing_slip_material_receive_det psm                                                                                          \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID                               \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)                              \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)                              \n" +
                "	AND			ps.receiptType = 'P'                                                                                \n" +
                "	AND			psm.isDeleted = 0                              \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                                                        \n" +
                "  \n" +
                "	-- Set received qty detail                                                                                                \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                                                    \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,                     \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalReceivedQty,0))                    \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                    \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                                                                    \n" +
                "	END IF;	                                                                                            \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                                     \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                    \n" +
                "	ELSE	                                                                                                    \n" +
                "		SET rowNumWhere = '';                                                                                                    \n" +
                "	END IF;	                                                                                                    \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                    \n" +
                "	EXECUTE query1;                                                                                                    \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                    \n" +
                "	EXECUTE query2;                                                                                                    \n" +
                "	DEALLOCATE PREPARE query2;                   \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceTotalDue As invoiceTotalDue FROM packing_slip_material_receive WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");                                  \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "	EXECUTE query3;                                  \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (654,'1.00','V1','Changes of Packing slip flow - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 654:
            allDbChangesArray.push(
                /* **************************** New Script 30-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseOrderReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(      \n" +
                "	IN pid INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "    # Purchase Order Master details      \n" +
                "    SELECT  po.id,       \n" +
                "		po.status,      \n" +
                "		po.poNumber,      \n" +
                "        po.poRevision,      \n" +
                "        po.poDate,      \n" +
                "        po.supplierAddress,      \n" +
                "		po.shippingAddress,      \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                        \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,      \n" +
                "        po.shippingInsurance,      \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,      \n" +
                "        po.poComment,      \n" +
                "        po.serialNumber,     \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,      \n" +
                "		us.emailAddress,      \n" +
                "		emp.phExtension      \n" +
                "	FROM purchase_order_mst po      \n" +
                "         INNER JOIN            \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID            \n" +
                "        AND gcs.isDeleted = 0            \n" +
                "        INNER JOIN            \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID            \n" +
                "        AND gcp.isDeleted = 0      \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy              \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID        \n" +
                "        where po.isDeleted = 0 and po.id = pid;      \n" +
                "  \n" +
                "	# Purchase Order Line details      \n" +
                "    SELECT  pod.lineID,      \n" +
                "		pod.id AS pODetID,      \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,      \n" +
                "        fun_getMFGPNByID(pod.mfgPartID) mfgPN,      \n" +
                "        IFNULL(c.rev, '') AS revision,      \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,      \n" +
                "		pod.supplierQuoteNumber,      \n" +
                "        pod.internalRef,      \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,      \n" +
                "        pod.qty,      \n" +
                "        fun_getUOMAbbreviationByID(c.uom) uom,      \n" +
                "        pod.price,      \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,        \n" +
                "        pod.partDescription AS description,      \n" +
                "        pod.lineComment      \n" +
                "	 FROM purchase_order_det pod      \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)       \n" +
                "	 WHERE pod.isDeleted = 0 and pod.refPurchaseOrderID = pid       \n" +
                "	 ORDER BY pod.lineID ASC;	      \n" +
                "  \n" +
                "	# Get purchase order Total Price table details  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                 \n" +
                "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud     \n" +
                "				INNER JOIN component cm ON cm.id = pud.mfgPartID      \n" +
                "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 and cm.partType <> 4) totalLinePrice ,          \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,              \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd       \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID      \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 and c.partType = 4) totalPOMiscPrice              \n" +
                "		FROM purchase_order_det pd         \n" +
                "		WHERE pd.refPurchaseOrderID= pid      \n" +
                "		AND pd.isdeleted=0;               \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,      \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,      \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,              \n" +
                "				IFNULL((totalLinePrice+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0)),0) totalPOPrice FROM tempTotalPrice LIMIT 1;               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (655,'1.00','V1',' Bug #29204 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 655:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(                    \n" +
                "	IN tableName VARCHAR(255),                    \n" +
                "	IN IDs LONGTEXT,                    \n" +
                "	IN deletedBy INT,                    \n" +
                "	IN entityID VARCHAR(255),                    \n" +
                "	IN refrenceIDs LONGTEXT,                    \n" +
                "	IN pRoleID INT                    \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "		DECLARE v_StartIndex INT;                        \n" +
                "		DECLARE v_EndIndex INT;                    \n" +
                "		DECLARE v_Id VARCHAR(10);                    \n" +
                "		DECLARE v_InvoiceId INT;                \n" +
                "		DECLARE v_InvoiceDetailId INT;                \n" +
                "		DECLARE v_MainInvoiceId INT;                \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);                \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);            \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);              \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);          \n" +
                "		DECLARE v_CountOfMemo INT;         \n" +
                "		DECLARE v_MemoType VARCHAR(10);           \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;        \n" +
                "		DECLARE v_IsMemoForQty TINYINT;        \n" +
                "  \n" +
                "		SET v_StartIndex = 0;                        \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');    	                  \n" +
                "		PREPARE stmt2 FROM @SQL2;                      \n" +
                "		EXECUTE stmt2;                  \n" +
                "		DEALLOCATE PREPARE stmt2;                \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;                \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));                 \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");                                                        				                                    				                    \n" +
                "		PREPARE stmt3 FROM @SQL3;                                                                                                                                                            \n" +
                "		EXECUTE stmt3;                                       \n" +
                "		DEALLOCATE PREPARE stmt3;                \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table; 	                  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO                       \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;                  \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;                \n" +
                "			SELECT COUNT(1), receiptType INTO v_CountOfMemo, v_MemoType FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  			      \n" +
                "  \n" +
                "			IF (v_CountOfMemo > 0) THEN                \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;	            				    \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN            \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;                \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));                 \n" +
                "					SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");                                                        				                                    				                    \n" +
                "					PREPARE stmt4 FROM @SQL4;                                                                                                                                                            \n" +
                "					EXECUTE stmt4;                                       \n" +
                "					DEALLOCATE PREPARE stmt4;                \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive                \n" +
                "					SET 	`status` = 'I'                \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;             \n" +
                "  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;          \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;          \n" +
                "					UPDATE 	packing_slip_material_receive                \n" +
                "					SET 	`status` = 'A',          \n" +
                "						invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)           \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;                   \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive ps                \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)                \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;             \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det         \n" +
                "					SET 	isDeleted = 1,         \n" +
                "						deletedBy = deletedBy,         \n" +
                "						deleteByRoleId = pRoleID,        \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;        \n" +
                "  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN        \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;        	        \n" +
                "					END IF;        \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;                \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det                \n" +
                "					SET 	`status` = 'D',                \n" +
                "						refCreditDebitInvoiceNo = v_UpdatedMemoIds,        \n" +
                "						isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),        \n" +
                "						isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END),        \n" +
                "						difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END),        \n" +
                "						differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)        \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;         \n" +
                "				ELSE    \n" +
                "					IF ((SELECT receiptType FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0) = 'R') THEN  \n" +
                "						UPDATE 	packing_slip_material_receive  \n" +
                "						SET 	`status` = 'WC',  \n" +
                "							packingSlipModeStatus = 'S'  \n" +
                "						WHERE  	refPackingSlipNumberForInvoice = v_InvoiceId   \n" +
                "								AND isDeleted = 0;  \n" +
                "					END IF;			  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det         \n" +
                "					SET 	isDeleted = 1,         \n" +
                "						deletedBy = deletedBy,         \n" +
                "						deleteByRoleId = pRoleID,        \n" +
                "						deletedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;      \n" +
                "				END IF;            \n" +
                "			ELSE      \n" +
                "				UPDATE 	packing_slip_material_receive_det         \n" +
                "				SET 	isDeleted = 1,         \n" +
                "					deletedBy = deletedBy,         \n" +
                "					deleteByRoleId = pRoleID,        \n" +
                "					deletedAt = fun_DatetimetoUTCDateTime()        \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;        \n" +
                "			END IF;                \n" +
                "			SET v_StartIndex = v_StartIndex + 1;                        \n" +
                "		END WHILE;                                       \n" +
                "  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');                      \n" +
                "		PREPARE stmt1 FROM @SQL1;                      \n" +
                "		EXECUTE stmt1;                    \n" +
                "		DEALLOCATE PREPARE stmt1;   */             \n" +
                "  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_packing_slip_material_receive` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive`(      \n" +
                "	IN tableName VARCHAR(255),      \n" +
                "	IN IDs LONGTEXT,      \n" +
                "	IN deletedBy INT,      \n" +
                "	IN entityID VARCHAR(255),      \n" +
                "	IN refrenceIDs LONGTEXT,      \n" +
                "	IN countList INT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN                   \n" +
                "	SET @SQL = CONCAT('    \n" +
                "			CREATE TEMPORARY TABLE if not exists tempPackingSlipMst as                                                                                                                                    \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"Material_Receive_Detail\" else \"\" end as msg FROM packing_slip_material_receive_det WHERE isDeleted = 0 AND refPackingSlipMaterialRecID IN(',IDs,') LIMIT 1)                                                                        \n" +
                "	');            \n" +
                "	PREPARE stmt FROM @SQL;                    \n" +
                "	EXECUTE stmt;                \n" +
                "  \n" +
                "	IF(countList = FALSE) THEN                                                                   \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempPackingSlipMst t)=0 THEN                                                                     \n" +
                "			SET @SQl1 = CONCAT('update packing_slip_material_receive set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where ID in(',IDs,') and deletedAt is NULL');		                                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                                        \n" +
                "			EXECUTE stmt1;        \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update packing_slip_material_receive set `status` = \"W\" where refPackingSlipNumberForInvoice in(',IDs,') and isDeleted = 0');		                                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                                        \n" +
                "			EXECUTE stmt2;                                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempPackingSlipMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                                                      \n" +
                "	    	ELSE                                                                    \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempPackingSlipMst t;              \n" +
                "		END IF;            \n" +
                "	ELSE          \n" +
                "		SELECT 		t1.cnt,	t2.display_page_name AS msg          \n" +
                "		FROM 		tempPackingSlipMst t1          \n" +
                "		INNER JOIN 	table_mapping_details t2 ON t1.msg=t2.tabel_name          \n" +
                "		WHERE 		IFNULL(cnt,0) > 0     \n" +
                "					AND msg IS NOT NULL     \n" +
                "					AND msg != \"\"          \n" +
                "		ORDER BY 	t2.display_page_name;                        \n" +
                "	END IF;                    \n" +
                "	DROP TABLE tempPackingSlipMst;                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(        \n" +
                "	IN pPageIndex INT,        \n" +
                "	IN pRecordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pReceiptType VARCHAR(10),        \n" +
                "    IN pMfgCodeIds LONGTEXT,        \n" +
                "    IN pPaymentMethodTypeIds LONGTEXT,        \n" +
                "    IN pDueDate DATE,        \n" +
                "    IN pAdditionalDays INT,        \n" +
                "    IN pTermsAndAboveDays INT,        \n" +
                "    IN pInvoiceNumber VARCHAR(50),        \n" +
                "    IN pIsExactSearch TINYINT        \n" +
                ")  \n" +
                "BEGIN                                                            \n" +
                "	DECLARE pOffset INT;                                                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                         \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                  \n" +
                "			SELECT 		p.id,                              \n" +
                "					p.poNumber,                              \n" +
                "					p.mfgCodeID,                              \n" +
                "					p.supplierSONumber,                    \n" +
                "					(  \n" +
                "						CASE 	WHEN p.receiptType = 'I' AND p.isTariffInvoice = 0 THEN psm.packingSlipNumber   \n" +
                "							WHEN p.receiptType = 'I' AND p.isTariffInvoice = 1 THEN p.packingSlipNumber  \n" +
                "							ELSE p.packingSlipNumber   \n" +
                "						END  \n" +
                "					) packingSlipNumber,                              \n" +
                "					p.packingSlipDate,                              \n" +
                "					p.invoiceNumber,                              \n" +
                "					p.invoiceDate,                              \n" +
                "					p.creditMemoNumber,                              \n" +
                "					p.creditMemoDate,                              \n" +
                "					p.debitMemoNumber,                              \n" +
                "					p.debitMemoDate,                              \n" +
                "					p.receiptDate,                              \n" +
                "					p.description,                              \n" +
                "					p.billToAddress,                              \n" +
                "					p.shipToAddress,                              \n" +
                "					p.poVersion,                              \n" +
                "					p.isDeleted,                              \n" +
                "					p.receiptType,                              \n" +
                "					p.`status`,                              \n" +
                "					pinv.paymentNumber chequeNumber,                              \n" +
                "					pinv.paymentDate chequeDate,                              \n" +
                "					pinv.paymentAmount chequeAmount,                           \n" +
                "					pinv.bankAccountNo,                        \n" +
                "					pinv.bankAccountMasID,                        \n" +
                "					pinv.accountReference,                        \n" +
                "					gp.gencCategoryName paymentTypeName,            \n" +
                "					gp.systemGenerated paymentTypeSystemGenerated,            \n" +
                "					pinv.paymentType,                      \n" +
                "					p.applyDate,                              \n" +
                "					p.refParentCreditDebitInvoiceno,                              \n" +
                "					p.refPackingSlipNumberForInvoice,                              \n" +
                "					p.invoiceTotalDue,                              \n" +
                "					p.isTariffInvoice,                              \n" +
                "					pinv.bankName,              									                                                 \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                           \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                                \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                                \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                         \n" +
                "					m.mfgCode supplierCode,              \n" +
                "					(                                  \n" +
                "						SELECT COUNT(1)                                   \n" +
                "						  FROM genericfiles g                                   \n" +
                "						 WHERE g.refTransID = p.id                                   \n" +
                "						   and g.entityID = -13                          \n" +
                "						   AND g.gencFileOwnerType = 'supplier_invoice'                                   \n" +
                "						   AND g.isDeleted =0                          \n" +
                "					) invoiceDocCount,                                  \n" +
                "					(                                  \n" +
                "						SELECT COUNT(1)                                   \n" +
                "						 FROM genericfiles g                                   \n" +
                "						WHERE g.refTransID = psm.id                                   \n" +
                "						  and g.entityID = -14                          \n" +
                "						  AND g.gencFileOwnerType = 'packing_slip'                                   \n" +
                "						  AND g.isDeleted =0                          \n" +
                "					) packingSlipDocCount,                \n" +
                "					pd.itemReceived,                  \n" +
                "					pd.otherChargesItemReceived,                        \n" +
                "					pd.itemDisapproved,                          \n" +
                "					(                                  \n" +
                "						CASE 	WHEN p.`receiptType` = 'I' THEN                                   \n" +
                "								'Invoice'                                   \n" +
                "							WHEN p.`receiptType` = 'C' THEN                                   \n" +
                "								'Credit Memo'                                   \n" +
                "							ELSE                                   \n" +
                "								'Debit Memo'                                   \n" +
                "						END                                  \n" +
                "					) receiptMemoType,      									                                            \n" +
                "					(                                  \n" +
                "						CASE 	WHEN p.`status` = 'PE' THEN                                   \n" +
                "								'Pending'                                   \n" +
                "							WHEN p.`status` = 'I' THEN                                   \n" +
                "								'Investigate'                                   \n" +
                "							WHEN p.`status` = 'A' THEN                                   \n" +
                "								'Approved to Pay'                                   \n" +
                "							ELSE                                   \n" +
                "								'Paid'                                   \n" +
                "						END                                  \n" +
                "					) invoiceVerificationStatus,           \n" +
                "					ps.status parentInvoiceStatus,                                                  \n" +
                "					ps.invoiceNumber refInvoiceNumber,                                      \n" +
                "					pd.totalExtendedAmount,                          \n" +
                "					pe.totalCreditAmount,                          \n" +
                "					pe.totalDebitAmount,                          \n" +
                "					(                          \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                          \n" +
                "					) amountToPay,      \n" +
                "					pd.packingDetailNote,              \n" +
                "					pd.approveLineCount,              \n" +
                "					DATE_ADD((max(p.invoiceDate) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),              \n" +
                "					INTERVAL IFNULL((max(case when p.termsDays != 0 then        \n" +
                "													p.termsDays-1        \n" +
                "											else p.termsDays end) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id))),0) DAY) paymentDueDate,              \n" +
                "					p.refPayementid,              \n" +
                "					max(g.gencCategoryName) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermName,              \n" +
                "					max(p.paymentTermsID) over(partition by ifnull(p.refParentCreditDebitInvoiceno,p.id)) paymentTermsID,              \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,              \n" +
                "					psm.packingSlipModeStatus              \n" +
                "			FROM		packing_slip_material_receive p              \n" +
                "			inner join mfgcodemst m ON m.id = p.mfgCodeID              \n" +
                "			LEFT JOIN 	packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                          \n" +
                "			LEFT JOIN 	packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id                \n" +
                "		\");                        \n" +
                "  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\"                          \n" +
                "				left join packingslip_invoice_payment pinv on pinv.id = p.refPayementid and p.isDeleted = 0                          \n" +
                "				left join genericcategory g on g.gencCategoryID = p.paymentTermsID and g.categoryType = 'Payment Terms'                       \n" +
                "				left join genericcategory gp on gp.gencCategoryID = pinv.paymentType and gp.categoryType = 'Payment Method'                      \n" +
                "				left join (                \n" +
                "							select 	a.refPackingSlipMaterialRecID,                          \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                          \n" +
                "								sum(a.itemReceived) itemReceived,                \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                          \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                          \n" +
                "								sum(a.approveLineCount) approveLineCount,                          \n" +
                "								sum(a.extendedPrice) totalExtendedAmount                          \n" +
                "							from 	(                \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                 \n" +
                "										psm.packingSlipSerialNumber,                 \n" +
                "										psm.approveNote,                          \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,                \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,                \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                          \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                          \n" +
                "										extendedPrice                          \n" +
                "									FROM 	packing_slip_material_receive_det psm                          \n" +
                "									WHERE 	psm.isDeleted = 0                \n" +
                "								) a                          \n" +
                "							group by a.refPackingSlipMaterialRecID                \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                          \n" +
                "				left join (                \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                           \n" +
                "									sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                          \n" +
                "									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount                          \n" +
                "							from 		packing_slip_material_receive ps                          \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                          \n" +
                "										and ps.isDeleted = 0                          \n" +
                "										and pd.isDeleted = 0                          \n" +
                "										and ps.receiptType in ('C','D')                          \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno                \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                          \n" +
                "				WHERE 	p.isDeleted =0 AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')                          \n" +
                "	\");                          \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                          \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                          \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                          \n" +
                "	ELSE                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                            \n" +
                "		SET pWhereClause = '1=1' ;                                                            \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                          \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN        \n" +
                "		IF pIsExactSearch = 1 THEN        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"        \n" +
                "									AND (        \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'        \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'\"        \n" +
                "									  \" ) \"        \n" +
                "						);        \n" +
                "		ELSE        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"        \n" +
                "									AND (        \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'        \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'        \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'        \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'        \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'\"        \n" +
                "									  \" ) \"        \n" +
                "						);        \n" +
                "		END IF;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                             \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                            \n" +
                "	ELSE	                                                            \n" +
                "		SET rowNumWhere = '';                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "	/* to get total count of rows */                                                            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                            \n" +
                "	EXECUTE query1;                                                            \n" +
                "	DEALLOCATE PREPARE query1;                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                 \n" +
                "			SELECT 	c.*,                 \n" +
                "				case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed                          \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                 \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                            \n" +
                "	EXECUTE query2;                                                            \n" +
                "	DEALLOCATE PREPARE query2;                                                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_packing_slip_material_receive` ;  \n" +
                "CREATE TRIGGER `Trg_BI_packing_slip_material_receive` BEFORE INSERT ON `packing_slip_material_receive`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	IF (    \n" +
                "		(    \n" +
                "			SELECT 	COUNT(1)     \n" +
                "			FROM 	packing_slip_material_receive     \n" +
                "			WHERE 	`packingSlipNumber`= NEW.packingSlipNumber     \n" +
                "				AND mfgCodeID = New.mfgCodeID     \n" +
                "				AND receiptType = new.receiptType    \n" +
                "				AND creditMemoType != 'MC'   \n" +
                "				AND creditMemoType != 'MD'   \n" +
                "				AND isdeleted = 0     \n" +
                "				AND deletedAt IS NULL    \n" +
                "		) > 0    \n" +
                "	)    \n" +
                "	THEN             \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';           \n" +
                "	END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_packing_slip_material_receive` ;  \n" +
                "CREATE TRIGGER `Trg_BU_packing_slip_material_receive` BEFORE UPDATE ON `packing_slip_material_receive`   \n" +
                "    FOR EACH ROW BEGIN         \n" +
                "	IF (    \n" +
                "		NEW.isDeleted = 0 	AND     \n" +
                "		NEW.deletedAt IS NULL 	AND       \n" +
                "		(    \n" +
                "			SELECT 	COUNT(1)     \n" +
                "			FROM 	packing_slip_material_receive       \n" +
                "			WHERE 	`packingSlipNumber`= NEW.packingSlipNumber       \n" +
                "				AND mfgCodeID = New.mfgCodeID      \n" +
                "				AND receiptType = New.receiptType    \n" +
                "				AND creditMemoType != 'MC'   \n" +
                "				AND creditMemoType != 'MD'   \n" +
                "				AND deletedAt IS NULL       \n" +
                "				AND isdeleted = 0    \n" +
                "				AND id != NEW.id    \n" +
                "		) > 0    \n" +
                "	) THEN         \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';             \n" +
                "	END IF;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (656,'1.00','V1','Chnages of receiving flow - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 656:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2020  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipAssemblyDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(      \n" +
                "	IN partID INT ,          \n" +
                "	IN cpID INT           \n" +
                ")  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	# COFC Report Header details  \n" +
                "	SELECT               \n" +
                "    cp.id,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,            \n" +
                "    cp.packingSlipDate AS PackingSlipDate,            \n" +
                "    cp.soNumber AS SalesOrderNumber,            \n" +
                "    cp.poNumber AS PONumber,           \n" +
                "	 cp.soDate AS SODate,              \n" +
                "    cp.sorevision AS SORevision,          \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,            \n" +
                "    'BAS' AS DepartmentName,            \n" +
                "    'Jay Vora' AS ManagerName            \n" +
                "FROM            \n" +
                "    customer_packingslip cp        \n" +
                "        LEFT JOIN            \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID            \n" +
                "        AND mfg.isDeleted = 0            \n" +
                "WHERE            \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID    \n" +
                "LIMIT 1;            \n" +
                "  \n" +
                "  # COFC Report Table details          \n" +
                "	SELECT         \n" +
                "    cpd.id AS cpDetID,      \n" +
                "	cpd.custPOLineID AS POLine,            \n" +
                "	cpd.lineID AS PSLine,          \n" +
                "    sa.shippedqty AS ShippedQty,            \n" +
                "    cpd.poQty AS OrderQty,            \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN      \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)      \n" +
                "		WHEN (c.partType = 3) THEN      \n" +
                "		c.custAssyPN      \n" +
                "		WHEN (c.partType = 2 OR c.partType = 4) THEN      \n" +
                "		c.mfgPN      \n" +
                "		ELSE      \n" +
                "		''      \n" +
                "	END) AS PartNumber,          \n" +
                "    IFNULL(c.rev, '') AS Revision,            \n" +
                "    sa.woNumber AS WorkOrderNumber,            \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,            \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,            \n" +
                "    GROUP_CONCAT(ast.datecode) AS DateCode 	    \n" +
                "FROM  		    	      \n" +
                "    customer_packingslip_det cpd            \n" +
                "		INNER JOIN  component c ON c.id = cpd.partid AND c.isDeleted = 0     \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0    \n" +
                "        LEFT JOIN  assemblyStock ast ON ast.partID = cpd.partid AND ast.isDeleted = 0     \n" +
                "WHERE            \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID     \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 31-12-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (657,'1.00','V1',' Bug 29323 - CHARMI'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 657:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(                                      \n" +
                "	IN ppageIndex INT,                                      \n" +
                "	IN precordPerPage INT,                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                    \n" +
                "	IN pfilterStatus VARCHAR(50)                                      \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"                                  \n" +
                "		SELECT cd.packingSlipNumber,cd.packingslipDate,cd.poNumber,cd.soNumber,cd.soDate,cd.poDate,                          \n" +
                "	fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "	cd.systemID,                       \n" +
                "   fun_getFOBById(cd.freeOnBoardId) freeOnBoard,                       \n" +
                "    cd.packingslipcomment,cd.refCustInvoiceID,                          \n" +
                "(SELECT gen.gencCategoryCode  FROM genericcategory gen WHERE gen.gencCategoryID = cd.shippingmethodid) shippingMethod,cd.status,cd.sorevision,            \n" +
                "cpd.partId,fun_getRoHSNameByPartID(cpd.partId) rohsName,`cpd`.assyDescription,                           \n" +
                "fun_getRoHSIconByPartID(cpd.partId) rohsIcon,fun_getComponentNameByID(cpd.partId) assyName ,fun_getAssyPIDCodeByID(cpd.partid) assyId,                          \n" +
                "case when cd.status=0 then 'Draft' when cd.status=1 then 'Published'        \n" +
                "	when cd.status=2 then 'Shipped' else '' end statusConvertedValue,cd.refSalesOrderID,                          \n" +
                "cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,                          \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO' end as packingTypeText,cd.packingSlipType,                     \n" +
                "case when cd.packingSlipStatus='W' then 'Ready to Invoice' when cd.packingSlipStatus='A' then 'Waiting For Payment' else 'Payment Received' end as packingSlipStatusValue,cd.packingSlipStatus ,                        \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(billToId) billTo,              \n" +
                "   concat(ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,            \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,          \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,                              \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,                              \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,                           \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,                           \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,                           \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt                          \n" +
                "  \n" +
                "		FROM customer_packingslip cd                 \n" +
                "		LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0                            \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid               \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0                                \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'                                    \n" +
                "	\");                                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                      \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                            \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN                    \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and FIND_IN_SET(cd.packingSlipStatus,''', pfilterStatus ,''')');                    \n" +
                "  END IF;                    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                         \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 31-12-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_packingslip` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip`(                \n" +
                "	IN tableName VARCHAR(255),                \n" +
                "	IN IDs LONGTEXT,                \n" +
                "	IN deletedBy INT,                \n" +
                "	IN entityID VARCHAR(255),                \n" +
                "	IN refrenceIDs LONGTEXT,                \n" +
                "	IN countList INT,          \n" +
                "    IN pRoleID INT          \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;           \n" +
                "	IF(IDs <> '') THEN            \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslip as              \n" +
                "			(SELECT  0 as  cnt ,\"\" as msg)      \n" +
                "		');                                                                           \n" +
                "		PREPARE stmt FROM @SQL;                                                                            \n" +
                "		EXECUTE stmt;                                                                            \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN                                                                           \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslip t)=0 THEN                                                                          \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			        SET @SQl5 = CONCAT('update shippedassembly set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',IDs,') and deletedAt is NULL');		                                                                            \n" +
                "				PREPARE stmt5 FROM @SQL5;                                                                            \n" +
                "				EXECUTE stmt5;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                            \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                                            \n" +
                "				EXECUTE stmt1;               \n" +
                "  \n" +
                "				SET @SQl3 =CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS temppackingslip AS       \n" +
                "				   SELECT cp.id,(SELECT COUNT(1) FROM customer_packingslip_det cd WHERE cd.refCustPackingSlipID=cp.id AND cd.deletedat IS NULL) cnt                \n" +
                "					FROM customer_packingslip cp  WHERE cp.deletedAt IS NULL AND              \n" +
                "					cp.id IN (SELECT refCustPackingSlipID FROM customer_packingslip_det WHERE id IN (',IDs,'))');		                                                                            \n" +
                "				PREPARE stmt3 FROM @SQL3;                                                                            \n" +
                "				EXECUTE stmt3;               \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(select id from temppackingslip where cnt=0) and deletedAt is NULL');		                                                                            \n" +
                "				PREPARE stmt4 FROM @SQL4;                                                                            \n" +
                "				EXECUTE stmt4;               \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT * FROM tempcustomerPackingslip WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                    \n" +
                "			COMMIT;                                                                             \n" +
                "			ELSE                                                                            \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslip t;                                                                           \n" +
                "			END IF;                  \n" +
                "		ELSE          \n" +
                "  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg                  \n" +
                "				FROM tempcustomerPackingslip t1                  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name                  \n" +
                "				WHERE IFNULL(t1.cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                  \n" +
                "				ORDER BY t2.display_page_name;                                \n" +
                "		END IF;             \n" +
                "		DROP TABLE tempcustomerPackingslip;                                                                               \n" +
                "	ELSE            \n" +
                "  \n" +
                "		-- Added for sales order master record delete            \n" +
                "		SET @SQl5 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');		                                                                            \n" +
                "		PREPARE stmt5 FROM @SQl5;                                                                            \n" +
                "		EXECUTE stmt5;             \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM customer_packingslip WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;                                                                                                          \n" +
                "	END IF;                 \n" +
                "END;  \n" +
                /* **************************** New Script -> 31-12-2020  *********************************** */
                "UPDATE page_detail SET iconClass='icons-customer-ps' WHERE menuRoute='Materialmanagement.customerpacking';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (658,'1.00','V1',' Alter procedure and task for packing slip-champak'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 658:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2020  *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(              \n" +
                "	IN pPaymentID text(11)              \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,               \n" +
                "				pip.paymentAmount,             \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,              \n" +
                "				pip.payToAddress,            \n" +
                "				ca.companyName supplierName,              \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) supplierAddress,              \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,          \n" +
                "                pip.bankAccountNo,          \n" +
                "                g.gencCategoryName paymentType          \n" +
                "		  from packingslip_invoice_payment pip              \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1                \n" +
                "          join genericcategory g ON g.categoryType = 'Payment Method' and g.gencCategoryID = pip.paymentType          \n" +
                "		 where pip.isDeleted = 0              \n" +
                "		   and pip.id = pPaymentID;              \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,              \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN              \n" +
                "							p.invoiceNumber              \n" +
                "						WHEN p.`receiptType` = 'C' THEN              \n" +
                "							p.creditMemoNumber              \n" +
                "						ELSE              \n" +
                "							p.debitMemoNumber              \n" +
                "					END) invoiceNumber,              \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN              \n" +
                "							p.invoiceNumber              \n" +
                "				else              \n" +
                "					(SELECT 	ps.invoiceNumber                         \n" +
                "					FROM 	packing_slip_material_receive ps                         \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno                        \n" +
                "							AND ps.isDeleted = 0  )              \n" +
                "				end              \n" +
                "				) refInvoiceNumber,              \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN              \n" +
                "							p.invoiceDate              \n" +
                "						WHEN p.`receiptType` = 'C' THEN              \n" +
                "							p.creditMemoDate              \n" +
                "						ELSE              \n" +
                "							p.debitMemoDate              \n" +
                "					END) invoiceDate,              \n" +
                "  \n" +
                "				null `description`,              \n" +
                "				(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,              \n" +
                "				0 discount,              \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN              \n" +
                "							'Invoice'              \n" +
                "						WHEN p.`receiptType` = 'C' THEN              \n" +
                "							'Credit Memo'              \n" +
                "						ELSE              \n" +
                "							'Debit Memo'              \n" +
                "					END) receiptMemoType              \n" +
                "			FROM packing_slip_material_receive p              \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id          \n" +
                "			WHERE p.isDeleted =0              \n" +
                "			and p.receiptType in ('I','C','D')          \n" +
                "			/*and p.`status` = 'P'*/          \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;              \n" +
                "		SELECT concat(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,        \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,        \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, cu.mfgName companyName              \n" +
                "		FROM customer_addresses cua                                        \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                                        \n" +
                "        join countrymst c ON c.countryID = cua.countryID            \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;                    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (659,'1.00','V1','Checn and remitt report ordering - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 659:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerPackingslipReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                    \n" +
                "	IN cpid INT                    \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	SELECT                 \n" +
                "    cp.id,            \n" +
                "    cp.status,   \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,                \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                \n" +
                "    cp.poDate AS PODate,                \n" +
                "    cp.soNumber AS SalesOrderNumber,                \n" +
                "    cp.poNumber AS PONumber,                \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,            \n" +
                "    cp.soDate AS SODate,                \n" +
                "    cp.sorevision AS SORevision,                \n" +
                "	cp.billingAddress AS SoldToAddress,          \n" +
                "	cp.shippingAddress AS ShippingAddress,          \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),                \n" +
                "            '-') AS SalesOrderPersonName,          \n" +
                "	CONCAT(us.firstName,' ',us.lastName) AS  preparedBy, us.emailAddress, emp.phExtension            \n" +
                "FROM                \n" +
                "    customer_packingslip cp       \n" +
                "        LEFT JOIN                \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                \n" +
                "        AND sm.isDeleted = 0                \n" +
                "        LEFT JOIN                \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                \n" +
                "        AND gc.isDeleted = 0                \n" +
                "        AND gc.categoryType = 'Shipping Methods'                \n" +
                "        LEFT JOIN                \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                \n" +
                "        AND gcc.isDeleted = 0                \n" +
                "        AND gcc.categoryType = 'Payment Terms'              \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                    \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID             \n" +
                "WHERE                \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                \n" +
                "LIMIT 1;                \n" +
                "  \n" +
                "SELECT                 \n" +
                "	cpd.lineID AS PSLine,          \n" +
                "    cpd.id AS cpDetID,          \n" +
                "    cpd.refCustPackingSlipID AS cpID,           \n" +
                "    cpd.partId,          \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,            \n" +
                "    IFNULL(cpd.remainingQty,0) AS RemainingQty,            \n" +
                "    cpd.custPOLineID AS POLine,    \n" +
                "    cpd.shippingNotes AS ShippingComment,    \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN          \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)          \n" +
                "		WHEN (c.partType = 3) THEN          \n" +
                "		c.custAssyPN          \n" +
                "		WHEN (c.partType = 2 OR c.partType = 4) THEN          \n" +
                "		c.mfgPN          \n" +
                "		ELSE          \n" +
                "		''          \n" +
                "	END) AS PartNumber,             \n" +
                "    FUN_GETUOMABBREVIATIONBYID(c.uom) AS UOM,                \n" +
                "    IFNULL(c.rev, '') AS Revision,           \n" +
                "    c.partType,          \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',             \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                \n" +
                "            IFNULL(CONCAT(', ',                \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                \n" +
                "                    ''),                \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                \n" +
                "            IFNULL(CONCAT(', HTS Code : ', c.htsCode), ''),                \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                \n" +
                "FROM                \n" +
                "    customer_packingslip_det cpd          \n" +
                "        LEFT JOIN                \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                \n" +
                "        AND cp.isDeleted = 0                \n" +
                "        LEFT JOIN                \n" +
                "    component c ON c.id = cpd.partid                \n" +
                "        LEFT JOIN                \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                \n" +
                "        AND sd.isDeleted = 0               \n" +
                "        LEFT JOIN               \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                \n" +
                "        LEFT JOIN                \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID      	          \n" +
                "        LEFT JOIN                \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                \n" +
                "        AND ra.partID = cpd.partId                \n" +
                "        LEFT JOIN                \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id           \n" +
                "WHERE        \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (660,'1.00','V1',' PS Report packingSlipType changes - CHARMI	'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 660:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(                                        \n" +
                "	IN ppageIndex INT,                                        \n" +
                "	IN precordPerPage INT,                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                      \n" +
                "	IN pfilterStatus VARCHAR(50)                                        \n" +
                ")  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"                                    \n" +
                "		SELECT cd.packingSlipNumber,cd.packingslipDate,cd.poNumber,cd.soNumber,cd.soDate,cd.poDate,                            \n" +
                "	fun_getMfgCodeAndNameByID(cd.customerID) customerName,    \n" +
                "	cd.systemID,                         \n" +
                "   fun_getFOBById(cd.freeOnBoardId) freeOnBoard,                         \n" +
                "    cd.packingslipcomment,cd.refCustInvoiceID,                            \n" +
                "(SELECT gen.gencCategoryCode  FROM genericcategory gen WHERE gen.gencCategoryID = cd.shippingmethodid) shippingMethod,cd.status,cd.sorevision,              \n" +
                "cpd.partId,fun_getRoHSNameByPartID(cpd.partId) rohsName,`cpd`.assyDescription,                             \n" +
                "fun_getRoHSIconByPartID(cpd.partId) rohsIcon,fun_getComponentNameByID(cpd.partId) assyName ,fun_getAssyPIDCodeByID(cpd.partid) assyId,                            \n" +
                "case when cd.status=0 then 'Draft' when cd.status=1 then 'Published'          \n" +
                "	when cd.status=2 then 'Shipped' else '' end statusConvertedValue,cd.refSalesOrderID,                            \n" +
                "cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,    \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,                            \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,                       \n" +
                "case when cd.packingSlipStatus='W' then 'Ready to Invoice' when cd.packingSlipStatus='A' then 'Waiting For Payment' else 'Payment Received' end as packingSlipStatusValue,cd.packingSlipStatus ,                          \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(billToId) billTo,                \n" +
                "   concat(ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,              \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,            \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,                                \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,                                \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt                            \n" +
                "  \n" +
                "		FROM customer_packingslip cd                   \n" +
                "		LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0                              \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid                 \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0                                  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'                                      \n" +
                "	\");                                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                        \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                              \n" +
                "	ELSE                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                        \n" +
                "		SET pWhereClause = '1=1' ;                                        \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN                      \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and FIND_IN_SET(cd.packingSlipStatus,''', pfilterStatus ,''')');                      \n" +
                "  END IF;                      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "	ELSE	                                        \n" +
                "		SET rowNumWhere = '';                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                           \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "	EXECUTE query2;                                          \n" +
                "	DEALLOCATE PREPARE query2;                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                          \n" +
                "	EXECUTE query1;                                          \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "END;  \n" +
                /* **************************** 04-01-2021->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (661,'1.00','V1','Alter procedure Sproc_RetrieveCustomerPackingSlipDeatils-champak'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 661:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2020  *********************************** */
                "ALTER TABLE customer_packingslip_det  \n" +
                "MODIFY COLUMN shippingNotes TEXT;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (662,'1.00','V1','Column Issue for Packing Slip Page - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 662:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(        \n" +
                "	IN partID INT ,            \n" +
                "	IN cpID INT             \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	# COFC Report Header details    \n" +
                "	SELECT                 \n" +
                "    cp.id,    \n" +
                "    cp.packingSlipNumber AS PackingSlip,              \n" +
                "    cp.packingSlipDate AS PackingSlipDate,              \n" +
                "    cp.soNumber AS SalesOrderNumber,              \n" +
                "    cp.poNumber AS PONumber,             \n" +
                "	 cp.soDate AS SODate,                \n" +
                "    cp.sorevision AS SORevision,            \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,              \n" +
                "    'BAS' AS DepartmentName,              \n" +
                "    'Jay Vora' AS ManagerName              \n" +
                "FROM              \n" +
                "    customer_packingslip cp          \n" +
                "        LEFT JOIN              \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID              \n" +
                "        AND mfg.isDeleted = 0              \n" +
                "WHERE              \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID      \n" +
                "LIMIT 1;              \n" +
                "  \n" +
                "  # COFC Report Table details            \n" +
                "	SELECT           \n" +
                "    cpd.id AS cpDetID,        \n" +
                "	cpd.custPOLineID AS POLine,              \n" +
                "	cpd.lineID AS PSLine,            \n" +
                "    sa.shippedqty AS ShippedQty,              \n" +
                "    cpd.poQty AS OrderQty,              \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN        \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)        \n" +
                "		WHEN (c.partType = 3) THEN        \n" +
                "		c.custAssyPN        \n" +
                "		WHEN (c.partType = 2 OR c.partType = 4) THEN        \n" +
                "		c.mfgPN        \n" +
                "		ELSE        \n" +
                "		''        \n" +
                "	END) AS PartNumber,            \n" +
                "    IFNULL(c.rev, '') AS Revision,              \n" +
                "    sa.woNumber AS WorkOrderNumber,              \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,  \n" +
                "    c.mfgPNDescription AS Descripton,              \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,              \n" +
                "    GROUP_CONCAT(ast.datecode) AS DateCode 	      \n" +
                "FROM  		    	        \n" +
                "    customer_packingslip_det cpd              \n" +
                "		INNER JOIN  component c ON c.id = cpd.partid AND c.isDeleted = 0       \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0      \n" +
                "        LEFT JOIN  assemblyStock ast ON ast.partID = cpd.partid AND ast.isDeleted = 0       \n" +
                "WHERE              \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID       \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-01-2021  *********************************** */
                "UPDATE systemconfigrations SET `values`='All orders made by Flextron Circuit Assembly are subject to Terms and Conditions posted at <a href=\"https://www.flextronassembly.com/terms-conditions\"       \n" +
                "target=\"_blank\"> https://www.flextronassembly.com/terms-conditions</a>'  \n" +
                "WHERE `key`='Terms & Condition';  \n" +
                /* **************************** New Script -> 06-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCompanyReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN    \n" +
                "	# Company detail                          \n" +
                "	SELECT CONCAT(cua.street1,'<br/>',cua.city,', ',cua.state,' ',cua.postcode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',cua.email,'<br/>','Phone: ',cua.contact,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(cua.faxNumber,''))AS address,      \n" +
                "		cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo, cu.mfgName,'S & M Group, Inc. d/b/a,' AS headerName,'accounting@flextronassembly.com' AS billingEmail,    \n" +
                "		ci.ein, ci.remittanceAddress     \n" +
                "	FROM customer_addresses cua                          \n" +
                "	JOIN mfgcodemst cu ON cu.id = cua.customerId    \n" +
                "    JOIN company_info ci ON ci.mfgCodeId = cu.id         \n" +
                "	LEFT JOIN countrymst c ON cua.countryID=c.countryID                         \n" +
                "	WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDeleted = 0 AND cua.isDefault = 1;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-01-2021  *********************************** */
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (663,'1.00','V1',' Report Changes-Champak'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 663:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(          \n" +
                "	IN partID INT ,              \n" +
                "	IN cpID INT               \n" +
                ")  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	# COFC Report Header details      \n" +
                "	SELECT                   \n" +
                "    cp.id,      \n" +
                "    cp.packingSlipNumber AS PackingSlip,                \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                \n" +
                "    cp.soNumber AS SalesOrderNumber,                \n" +
                "    cp.poNumber AS PONumber,               \n" +
                "	 cp.soDate AS SODate,                  \n" +
                "    cp.sorevision AS SORevision,              \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                \n" +
                "    'BAS' AS DepartmentName,                \n" +
                "    'Jay Vora' AS ManagerName                \n" +
                "FROM                \n" +
                "    customer_packingslip cp            \n" +
                "        LEFT JOIN                \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                \n" +
                "        AND mfg.isDeleted = 0                \n" +
                "WHERE                \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID        \n" +
                "LIMIT 1;                \n" +
                "  \n" +
                "  # COFC Report Table details              \n" +
                "	SELECT             \n" +
                "    cpd.id AS cpDetID,          \n" +
                "	cpd.custPOLineID AS POLine,                \n" +
                "	cpd.lineID AS PSLine,              \n" +
                "    sa.shippedqty AS ShippedQty,                \n" +
                "    cpd.poQty AS OrderQty,                \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN          \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)          \n" +
                "		WHEN (c.partType = 3) THEN          \n" +
                "		c.custAssyPN          \n" +
                "		WHEN (c.partType = 2 OR c.partType = 4) THEN          \n" +
                "		c.mfgPN          \n" +
                "		ELSE          \n" +
                "		''          \n" +
                "	END) AS PartNumber,              \n" +
                "    IFNULL(c.rev, '') AS Revision,                \n" +
                "    sa.woNumber AS WorkOrderNumber,                \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,    \n" +
                "    cpd.assyDescription AS Descripton,                \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,                \n" +
                "    GROUP_CONCAT(ast.datecode) AS DateCode 	        \n" +
                "FROM  		    	          \n" +
                "    customer_packingslip_det cpd                \n" +
                "		INNER JOIN  component c ON c.id = cpd.partid AND c.isDeleted = 0         \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0        \n" +
                "        LEFT JOIN  assemblyStock ast ON ast.partID = cpd.partid AND ast.isDeleted = 0         \n" +
                "WHERE                \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID         \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (664,'1.00','V1','alter procedure Sproc_GetPackingSlipAssemblyDetails-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 664:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(            \n" +
                "	IN partID INT ,                \n" +
                "	IN cpID INT                 \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	# COFC Report Header details        \n" +
                "	SELECT                     \n" +
                "    cp.id,        \n" +
                "    cp.packingSlipNumber AS PackingSlip,                  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                  \n" +
                "    cp.soNumber AS SalesOrderNumber,                  \n" +
                "    cp.poNumber AS PONumber,                 \n" +
                "	 cp.soDate AS SODate,                    \n" +
                "    cp.sorevision AS SORevision,                \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                  \n" +
                "    'BAS' AS DepartmentName,                  \n" +
                "    'Jay Vora' AS ManagerName                  \n" +
                "FROM                  \n" +
                "    customer_packingslip cp              \n" +
                "        LEFT JOIN                  \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                  \n" +
                "        AND mfg.isDeleted = 0                  \n" +
                "WHERE                  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID          \n" +
                "LIMIT 1;                  \n" +
                "  \n" +
                "  # COFC Report Table details                \n" +
                "	SELECT               \n" +
                "    cpd.id AS cpDetID,            \n" +
                "	cpd.custPOLineID AS POLine,                  \n" +
                "	cpd.lineID AS PSLine,                \n" +
                "    sa.shippedqty AS ShippedQty,                  \n" +
                "    cpd.poQty AS OrderQty,                  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN            \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)            \n" +
                "		WHEN (c.partType = 3) THEN            \n" +
                "		c.custAssyPN            \n" +
                "		WHEN (c.partType = 2 OR c.partType = 4) THEN            \n" +
                "		c.mfgPN            \n" +
                "		ELSE            \n" +
                "		''            \n" +
                "	END) AS PartNumber,                \n" +
                "    IFNULL(c.rev, '') AS Revision,                  \n" +
                "    sa.woNumber AS WorkOrderNumber,                  \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,      \n" +
                "    cpd.assyDescription AS Descripton,                  \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,                  \n" +
                "    (SELECT CONCAT(adCode.datecode) FROM (SELECT DISTINCT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0) adCode) AS DateCode 	          \n" +
                "FROM  		    	            \n" +
                "    customer_packingslip_det cpd                  \n" +
                "		INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0           \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0    \n" +
                "WHERE                  \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID           \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID, sa.woNumber;               \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (665,'1.00','V1','alter procedure Sproc_GetPackingSlipAssemblyDetails-vaibhav '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 665:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2020  *********************************** */
                "drop procedure if exists `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                        \n" +
                "	IN pFromPartID INT,            \n" +
                "    IN pNewEpicorType varchar(50),            \n" +
                "    IN pNewAssemblyType INT,            \n" +
                "    IN pNewMfgcodeID INT,            \n" +
                "    IN pNewCustAssyPN varchar(500),            \n" +
                "    IN pNewPartRev varchar(50),            \n" +
                "    IN pNewMfgPN varchar(100),            \n" +
                "    IN pNewAssyCode varchar(50),            \n" +
                "    IN pNewNickName varchar(50),            \n" +
                "    IN pNewPIDCode varchar(109),            \n" +
                "    IN pUserID Int,                        \n" +
                "    IN pUserRoleId Int,                        \n" +
                "    IN pIsAttribute tinyint,                        \n" +
                "    IN pIsSettings tinyint,                        \n" +
                "    IN pIsAdditionalAttibute tinyint,                        \n" +
                "    IN pIsPackagingDetail tinyint,                        \n" +
                "    IN pIsStandards tinyint,                        \n" +
                "    IN pIsRequiredFunctionalType tinyint,                        \n" +
                "    IN pIsRequiredMountingType tinyint,                        \n" +
                "    IN pIsPackagingAliasPart tinyint,                        \n" +
                "    IN pIsOtherPartName tinyint,                        \n" +
                "    IN pIsAlternatePart tinyint,                        \n" +
                "    IN pIsRoHSReplacementPart tinyint,                        \n" +
                "    IN pIsDriveTool tinyint,                        \n" +
                "    IN pIsProcessMaterial tinyint,                        \n" +
                "    IN pIsRequiredMattingParts tinyint,                        \n" +
                "    IN pIsPickupPad tinyint,                        \n" +
                "    IN pIsFunctionalTesingTool tinyint,                        \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                        \n" +
                "    IN pIsBOM tinyint                        \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "DECLARE vValidationPassed tinyint;            \n" +
                "DECLARE vFromPartCategory tinyint;            \n" +
                "DECLARE vFromMfgType varchar(5);        \n" +
                "DECLARE vCount INT;                      \n" +
                "DECLARE vToPartID INT;                      \n" +
                "DECLARE vUserRoleId INT;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                        \n" +
                "BEGIN                        \n" +
                "	ROLLBACK;                        \n" +
                "	RESIGNAL;                        \n" +
                "END;                        \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                        \n" +
                "  BEGIN                        \n" +
                "	ROLLBACK;                        \n" +
                "	RESIGNAL;                        \n" +
                "END;                        \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed            \n" +
                "  \n" +
                "    select co.category, m.mfgType        \n" +
                "      into vFromPartCategory, vFromMfgType        \n" +
                "	  from component co        \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID        \n" +
                "	 where co.id = pFromPartID;        \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/        \n" +
                "		set pIsAttribute = 1;        \n" +
                "        set pIsAdditionalAttibute = 1;        \n" +
                "    end if;        \n" +
                "  \n" +
                "	set vCount = 0;            \n" +
                "    if (vFromPartCategory = 3) then # check category            \n" +
                "	   select count(1) into vCount                      \n" +
                "		 from component co                      \n" +
                "		where co.mfgcodeID = pNewMfgcodeID            \n" +
                "          and co.category = 3            \n" +
                "		  and co.custAssyPN = pNewCustAssyPN          \n" +
                "		  and co.rev = pNewPartRev                      \n" +
                "          and co.isDeleted = 0                      \n" +
                "		  and co.deletedAt is null;                     \n" +
                "		if vCount > 0 then            \n" +
                "			set vValidationPassed = 0;            \n" +
                "            select 'DUPLICATE_REV' as message;            \n" +
                "        end if;            \n" +
                "  \n" +
                "         set vCount = 0;            \n" +
                "		 select count(1) into vCount            \n" +
                "			 from component co            \n" +
                "			where co.nickName != pNewNickName            \n" +
                "              and co.category = 3            \n" +
                "              and co.custAssyPN = pNewCustAssyPN            \n" +
                "              and co.mfgcodeID = pNewMfgcodeID            \n" +
                "			  and co.isDeleted = 0            \n" +
                "			  and co.deletedAt is null;             \n" +
                "		  if vCount > 0 then            \n" +
                "			set vValidationPassed = 0;            \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,            \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName            \n" +
                "				 from component co            \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID            \n" +
                "				where co.nickName != pNewNickName            \n" +
                "				  and co.category = 3            \n" +
                "				  and co.custAssyPN = pNewCustAssyPN            \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID            \n" +
                "				  and co.isDeleted = 0            \n" +
                "				  and co.deletedAt is null            \n" +
                "				  limit 1;            \n" +
                "		  end if;            \n" +
                "  \n" +
                "		set vCount = 0;            \n" +
                "		 select count(1) into vCount            \n" +
                "			 from component co            \n" +
                "			where co.nickName = pNewNickName            \n" +
                "              and co.category = 3            \n" +
                "              and co.custAssyPN != pNewCustAssyPN            \n" +
                "              and co.mfgcodeID = pNewMfgcodeID            \n" +
                "			  and co.isDeleted = 0          \n" +
                "			  and co.deletedAt is null;            \n" +
                "		 if vCount > 0 then            \n" +
                "			set vValidationPassed = 0;            \n" +
                "				select 'DUPLICATE_NICKNAME' as message,            \n" +
                "                        custAssyPN            \n" +
                "				 from component co            \n" +
                "				where co.nickName = pNewNickName            \n" +
                "				  and co.category = 3            \n" +
                "				  and co.custAssyPN != pNewCustAssyPN            \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID            \n" +
                "				  and co.isDeleted = 0          \n" +
                "				  and co.deletedAt is null            \n" +
                "				  limit 1;            \n" +
                "		  end if;            \n" +
                "	end if;            \n" +
                "  \n" +
                "    set vCount = 0;            \n" +
                "		select count(1) into vCount                      \n" +
                "		 from component co                      \n" +
                "		where co.mfgcodeID = pNewMfgcodeID            \n" +
                "		  and co.mfgPN = pNewMfgPN                      \n" +
                "          and co.isDeleted = 0          \n" +
                "		  and co.deletedAt is null;                     \n" +
                "	 if vCount > 0 then            \n" +
                "		set vValidationPassed = 0;            \n" +
                "        select 'DUPLICATE_MFGPN' as message;            \n" +
                "     end if;            \n" +
                "  \n" +
                "    set vCount = 0;            \n" +
                "		select count(1) into vCount                      \n" +
                "		 from component co                      \n" +
                "		where co.PIDCode = pNewPIDCode                      \n" +
                "		  and co.isDeleted = 0          \n" +
                "		  and co.deletedAt is null;                 \n" +
                "    if vCount > 0 then            \n" +
                "		set vValidationPassed = 0;            \n" +
                "        select 'DUPLICATE_PID' as message;            \n" +
                "     end if;            \n" +
                "  \n" +
                "		if vValidationPassed = 1 then  #1 passed, 0 failed                 \n" +
                "				insert into component(                      \n" +
                "						isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                      \n" +
                "						custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                      \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                      \n" +
                "						partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                      \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                      \n" +
                "                        countryOfOrigin, htsCode, createdBy, createByRoleId,                      \n" +
                "                        updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,        \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean)            \n" +
                "                select isCustom, isCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                      \n" +
                "						pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                      \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                      \n" +
                "						partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                      \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                      \n" +
                "                        countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                      \n" +
                "                        pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,        \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID,isFluxNotApplicable,isWaterSoluble,isNoClean    \n" +
                "				 from component                      \n" +
                "				where id = pFromPartID;                      \n" +
                "  \n" +
                "				set vToPartID = LAST_INSERT_ID();                      \n" +
                "  \n" +
                "                insert into component_images                      \n" +
                "						(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                      \n" +
                "                select imageURL, vToPartID/*refComponentID*/,pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                      \n" +
                "						pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/,isDeleted                      \n" +
                "				 from component_images                      \n" +
                "				where refComponentID = pFromPartID                      \n" +
                "                  and isDeleted = false;                      \n" +
                "  \n" +
                "                insert into component_datasheets                      \n" +
                "						(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                      \n" +
                "                select datasheetURL, vToPartID/*refComponentID*/,pUserID /*createdBy*/,pUserID/*updatedBy*/,isDeleted,                      \n" +
                "						pUserRoleId/*createByRoleId*/, pUserRoleId/*updateByRoleId*/                      \n" +
                "				 from component_datasheets                      \n" +
                "				where refComponentID = pFromPartID                      \n" +
                "                  and isDeleted = false;                      \n" +
                "  \n" +
                "				IF pIsAttribute  then                          \n" +
                "					UPDATE `component` toPart,                         \n" +
                "					(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                        \n" +
                "					`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                        \n" +
                "					`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                        \n" +
                "					`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                        \n" +
                "					SET                        \n" +
                "					toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                        \n" +
                "					toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                        \n" +
                "					toPart.`mountingTypeID` = fromPart.mountingTypeID,                        \n" +
                "					toPart.`mountingTypeText` = fromPart.mountingTypeText,                        \n" +
                "					toPart.`operatingTemp` = fromPart.operatingTemp,                        \n" +
                "					toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                        \n" +
                "					toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                        \n" +
                "					toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                        \n" +
                "					toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                        \n" +
                "					toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                        \n" +
                "					toPart.`connecterTypeID` = fromPart.connecterTypeID,                        \n" +
                "					toPart.`connectorTypeText` = fromPart.connectorTypeText,                        \n" +
                "					toPart.`noOfPositionText` = fromPart.noOfPositionText,                        \n" +
                "					toPart.`noOfPosition` = fromPart.noOfPosition,                        \n" +
                "					toPart.`noOfRowsText` = fromPart.noOfRowsText,                        \n" +
                "					toPart.`noOfRows` = fromPart.noOfRows,                        \n" +
                "					toPart.`pitch` = fromPart.pitch,                        \n" +
                "					toPart.`pitchMating` = fromPart.pitchMating,                        \n" +
                "					toPart.`sizeDimension` = fromPart.sizeDimension,                        \n" +
                "					toPart.`length` = fromPart.length,                        \n" +
                "					toPart.`width` = fromPart.width,                        \n" +
                "					toPart.`heightText` = fromPart.heightText,                        \n" +
                "					toPart.`height` = fromPart.height,                        \n" +
                "					toPart.`updatedBy` = pUserID,                        \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "					toPart.`updatedAt` = current_timestamp()                        \n" +
                "					WHERE toPart.`id` = vToPartID;                        \n" +
                "				end if;                        \n" +
                "  \n" +
                "				IF pIsSettings then                        \n" +
                "					UPDATE `component` toPart,                         \n" +
                "					(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                        \n" +
                "					`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                        \n" +
                "					`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                        \n" +
                "					`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                        \n" +
                "					SET                        \n" +
                "					toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                        \n" +
                "					toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                        \n" +
                "					toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                        \n" +
                "					toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                        \n" +
                "					toPart.`selfLifeDays` = fromPart.selfLifeDays,                        \n" +
                "					toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                        \n" +
                "					toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                        \n" +
                "					toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                        \n" +
                "					toPart.`saftyStock` = fromPart.saftyStock,                        \n" +
                "					toPart.`eau` = fromPart.eau,                        \n" +
                "					toPart.`businessRisk` = fromPart.businessRisk,                        \n" +
                "					toPart.`driverToolRequired` = fromPart.driverToolRequired,                        \n" +
                "					toPart.`matingPartRquired` = fromPart.matingPartRquired,                        \n" +
                "					toPart.`pickupPadRequired` = fromPart.pickupPadRequired,                        \n" +
                "					toPart.`programingRequired` = fromPart.programingRequired,                        \n" +
                "					toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,                        \n" +
                "					toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,                        \n" +
                "					toPart.`bomLock` = fromPart.bomLock,                        \n" +
                "					toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,                        \n" +
                "					toPart.`updatedBy` = pUserID,                      \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "					toPart.`updatedAt` = current_timestamp()                        \n" +
                "					WHERE toPart.`id` = vToPartID;                      \n" +
                "  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`                        \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                        \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                        \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                        \n" +
                "  \n" +
                "				end if;                        \n" +
                "  \n" +
                "				IF pIsAdditionalAttibute then                        \n" +
                "					UPDATE `component` toPart,                         \n" +
                "					(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                         \n" +
                "					from component where id = pFromPartID) fromPart                        \n" +
                "					SET                        \n" +
                "					toPart.`tolerance` = fromPart.tolerance,                        \n" +
                "					toPart.`voltage` = fromPart.voltage,                        \n" +
                "					toPart.`value` = fromPart.value,                        \n" +
                "					toPart.`partPackage` = fromPart.partPackage,                        \n" +
                "					toPart.`powerRating` = fromPart.powerRating,                        \n" +
                "					toPart.`weight` = fromPart.weight,                        \n" +
                "					toPart.`feature` = fromPart.feature,                        \n" +
                "					toPart.`color` = fromPart.color,                        \n" +
                "					toPart.`updatedBy` = pUserID,                        \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "					toPart.`updatedAt` = current_timestamp()                        \n" +
                "					WHERE toPart.`id` = vToPartID;                        \n" +
                "				end if;                        \n" +
                "  \n" +
                "				IF pIsPackagingDetail then                        \n" +
                "					UPDATE `component` toPart,                         \n" +
                "					(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                        \n" +
                "					`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                        \n" +
                "					SET                        \n" +
                "					toPart.`deviceMarking` = fromPart.deviceMarking,                        \n" +
                "					toPart.`packagingID` = fromPart.packagingID,                        \n" +
                "					toPart.`minimum` = fromPart.minimum,                        \n" +
                "					toPart.`mult` = fromPart.mult,                        \n" +
                "					toPart.`packageQty` = fromPart.packageQty,                        \n" +
                "					toPart.`uomClassID` = fromPart.uomClassID,                        \n" +
                "					toPart.`uom` = fromPart.uom,                        \n" +
                "					toPart.`uomText` = fromPart.uomText,                        \n" +
                "					toPart.`unit` = fromPart.unit,                        \n" +
                "					toPart.`pcbPerArray` = fromPart.pcbPerArray,                        \n" +
                "					toPart.`grossWeight` = fromPart.grossWeight,                        \n" +
                "					toPart.`grossWeightUom` = fromPart.grossWeightUom,                        \n" +
                "					toPart.`packagingWeight` = fromPart.packagingWeight,                        \n" +
                "					toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                        \n" +
                "					toPart.`updatedBy` = pUserID,                        \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "					toPart.`updatedAt` = current_timestamp()                        \n" +
                "					WHERE toPart.`id` = vToPartID;                        \n" +
                "				end if;                        \n" +
                "  \n" +
                "				if pIsStandards then                        \n" +
                "					UPDATE `component` toPart,                         \n" +
                "					(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                        \n" +
                "					SET                        \n" +
                "					toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                        \n" +
                "					toPart.`htsCode` = fromPart.htsCode,                        \n" +
                "					toPart.`updatedBy` = pUserID,                        \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "					toPart.`updatedAt` = current_timestamp()                        \n" +
                "					WHERE toPart.`id` = vToPartID;                        \n" +
                "  \n" +
                "					INSERT INTO `component_standard_details`                        \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                        \n" +
                "					select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                        \n" +
                "					from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                        \n" +
                "					and not exists (select 1 from component_standard_details csd                        \n" +
                "					where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                        \n" +
                "				end if;                        \n" +
                "				if pIsRequiredMountingType then                        \n" +
                "					INSERT INTO `component_requiremountingtype`                        \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                        \n" +
                "					SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                        \n" +
                "					FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                         \n" +
                "					and not exists (select 1 from component_requiremountingtype                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                        \n" +
                "  \n" +
                "					set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                        \n" +
                "					if @requiredMountingTypecount>0 then                        \n" +
                "						UPDATE `component` toPart                        \n" +
                "						SET                        \n" +
                "						toPart.`mountingTypePartRequired` = true,                        \n" +
                "						toPart.`updatedBy` = pUserID,                        \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "						toPart.`updatedAt` = current_timestamp()                        \n" +
                "						WHERE toPart.`id` = vToPartID;                        \n" +
                "					end if;                        \n" +
                "				end if;                        \n" +
                "				if pIsRequiredFunctionalType then                        \n" +
                "					INSERT INTO `component_requirefunctionaltype`                        \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                        \n" +
                "					SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                        \n" +
                "					FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                        \n" +
                "					and not exists (select 1 from component_requirefunctionaltype                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                        \n" +
                "  \n" +
                "  \n" +
                "					set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                        \n" +
                "					if @requiredFunctionalTypecount>0 then                        \n" +
                "						UPDATE `component` toPart                        \n" +
                "						SET                        \n" +
                "						toPart.`functionalTypePartRequired` = true,                        \n" +
                "						toPart.`updatedBy` = pUserID,                        \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "						toPart.`updatedAt` = current_timestamp()                        \n" +
                "						WHERE toPart.`id` = vToPartID;                        \n" +
                "					end if;                        \n" +
                "  \n" +
                "				end if;                        \n" +
                "				if pIsPackagingAliasPart then                        \n" +
                "  \n" +
                "					set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                        \n" +
                "					set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                        \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                        \n" +
                "						# generate new packaging alias group id                        \n" +
                "						set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                        \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                        \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                        \n" +
                "						# update packaging alias group id as new packaging alias group id in component table                        \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                        \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                        \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                        \n" +
                "						INSERT INTO `component_packagingalias`                        \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                        \n" +
                "						values                        \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                        \n" +
                "					# Update data for packaging alias group id for  ToPartID	                        \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                        \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                        \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                        \n" +
                "						INSERT INTO `component_packagingalias`                        \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                        \n" +
                "						values                        \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                        \n" +
                "					# Update data for packaging alias group id for  FromPartID		                        \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                        \n" +
                "  \n" +
                "					end if;                        \n" +
                "				end if;                        \n" +
                "				if pIsOtherPartName then                        \n" +
                "					INSERT INTO `component_otherpn`                        \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                        \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                        \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                        \n" +
                "					and not exists (select 1 from component_otherpn                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                        \n" +
                "				end if;                        \n" +
                "				If pIsAlternatePart then                        \n" +
                "					INSERT INTO `component_alternatepn`                        \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                        \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                        \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                        \n" +
                "					and not exists (select 1 from component_alternatepn                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                        \n" +
                "				end if;                        \n" +
                "				if pIsRoHSReplacementPart then                        \n" +
                "  \n" +
                "					set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                        \n" +
                "					set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                        \n" +
                "					if @FromrohsgroupID is not null and @TorohsgroupID is not null then                        \n" +
                "						# generate new packaging alias group id                        \n" +
                "						set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                        \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                        \n" +
                "						  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                            \n" +
                "					   # update packaging alias group id as new packaging alias group id in component table                        \n" +
                "						 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                        \n" +
                "					elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                        \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                        \n" +
                "						INSERT INTO `component_rohsalternatepn`                        \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                        \n" +
                "						values                        \n" +
                "						(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                        \n" +
                "					# Update data for packaging alias group id for  ToPartID	                        \n" +
                "						update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                        \n" +
                "  \n" +
                "					elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                        \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                        \n" +
                "						INSERT INTO `component_rohsalternatepn`                        \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                        \n" +
                "						values                        \n" +
                "						(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                        \n" +
                "					# Update data for packaging alias group id for  FromPartID		                        \n" +
                "						update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                        \n" +
                "  \n" +
                "					end if;                        \n" +
                "				end if;                        \n" +
                "				if pIsDriveTool then                        \n" +
                "					INSERT INTO `component_drivetools`                        \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                        \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                        \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                        \n" +
                "					and not exists (select 1 from component_drivetools                         \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                        \n" +
                "  \n" +
                "					set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                        \n" +
                "					if @DriveToolcount>0 then                        \n" +
                "						UPDATE `component` toPart                        \n" +
                "						SET                        \n" +
                "						toPart.`driverToolRequired` = true,                        \n" +
                "						toPart.`updatedBy` = pUserID,                        \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "						toPart.`updatedAt` = current_timestamp()                        \n" +
                "						WHERE toPart.`id` = vToPartID;                        \n" +
                "					end if;                        \n" +
                "				end if;                        \n" +
                "				if pIsProcessMaterial then                        \n" +
                "					INSERT INTO `component_processmaterial`                        \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                        \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                        \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                        \n" +
                "					and not exists (select 1 from component_processmaterial                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                         \n" +
                "				end if;                        \n" +
                "				if pIsRequiredMattingParts then                        \n" +
                "					INSERT INTO `component_alternatepn`                        \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                        \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                        \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                        \n" +
                "					and not exists (select 1 from component_alternatepn                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                        \n" +
                "  \n" +
                "					set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                        \n" +
                "					if @mattingpartcount>0 then                        \n" +
                "						UPDATE `component` toPart                        \n" +
                "						SET                        \n" +
                "						toPart.`matingPartRquired` = true,                        \n" +
                "						toPart.`updatedBy` = pUserID,                        \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "						toPart.`updatedAt` = current_timestamp()                        \n" +
                "						WHERE toPart.`id` = vToPartID;                        \n" +
                "					end if;                        \n" +
                "  \n" +
                "				end if;                        \n" +
                "				if pIsPickupPad then                        \n" +
                "				INSERT INTO `component_alternatepn`                        \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                        \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                        \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                        \n" +
                "					and not exists (select 1 from component_alternatepn                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                        \n" +
                "  \n" +
                "					set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                        \n" +
                "					if @PickupPadcount>0 then                        \n" +
                "						UPDATE `component` toPart                        \n" +
                "						SET                        \n" +
                "						toPart.`pickupPadRequired` = true,                        \n" +
                "						toPart.`updatedBy` = pUserID,                        \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "						toPart.`updatedAt` = current_timestamp()                        \n" +
                "						WHERE toPart.`id` = vToPartID;                        \n" +
                "					end if;                        \n" +
                "				end if;            \n" +
                "  \n" +
                "				if pIsFunctionalTesingTool then                        \n" +
                "					INSERT INTO `component_alternatepn`                        \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                        \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                        \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                        \n" +
                "					and not exists (select 1 from component_alternatepn                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                        \n" +
                "  \n" +
                "					set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                        \n" +
                "					if @FunctionalTesingToolcount>0 then                        \n" +
                "						UPDATE `component` toPart                        \n" +
                "						SET                        \n" +
                "						toPart.`functionalTestingRequired` = true,                        \n" +
                "						toPart.`updatedBy` = pUserID,                        \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                \n" +
                "						toPart.`updatedAt` = current_timestamp()                        \n" +
                "						WHERE toPart.`id` = vToPartID;                        \n" +
                "					end if;                        \n" +
                "				end if;                        \n" +
                "				if pIsFinctionalRestingEquipment then                        \n" +
                "					INSERT INTO `component_functionaltestingequipment`                        \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                        \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                        \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                        \n" +
                "					and not exists (select 1 from component_functionaltestingequipment                         \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                        \n" +
                "				end if;                        \n" +
                "  \n" +
                "                if (vFromPartCategory = 3) then            \n" +
                "					if pIsBOM then                      \n" +
                "						call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                \n" +
                "					end if;                      \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                  \n" +
                "                end if;            \n" +
                "				commit;            \n" +
                "			select * from component where id = vToPartID;            \n" +
                "        end if;                      \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(        \n" +
                "IN pGoodPart VARCHAR(100),              \n" +
                "IN pSearch VARCHAR(500),              \n" +
                "IN pId INT,              \n" +
                "IN pMfgType VARCHAR(50),              \n" +
                "IN pRoHSStatusID VARCHAR(100),              \n" +
                "IN pMfgCodeId INT,              \n" +
                "IN pMountingType VARCHAR(50),              \n" +
                "IN pMountingTypeId INT,              \n" +
                "IN pCategoryID INT,              \n" +
                "IN pIsContainCPN TINYINT,              \n" +
                "IN pRohsMainCategoryID INT,              \n" +
                "IN pIsRohsMainCategoryInvertMatch TINYINT,      \n" +
                "IN prefSupplierMfgpnComponentID INT ,      \n" +
                "IN ppackagingID INT,      \n" +
                "IN pstrictCustomPart TINYINT,      \n" +
                "IN psupplierID INT      \n" +
                ")  \n" +
                "BEGIN              \n" +
                "   DECLARE vRohsMainCategoryID INT;              \n" +
                "   SET vRohsMainCategoryID = pRohsMainCategoryID;              \n" +
                "   /*===>this logic is added to compare invert rohs category*/              \n" +
                "   IF pIsRohsMainCategoryInvertMatch = FALSE  THEN              \n" +
                "		IF pRohsMainCategoryID = -1 THEN              \n" +
                "			SET vRohsMainCategoryID = -2;                  \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN                  \n" +
                "			SET vRohsMainCategoryID = -1;                  \n" +
                "        END IF;                  \n" +
                "   END IF;                  \n" +
                "   /*<===this logic is added to compare invert rohs category*/      \n" +
                "   /* this logic used in purchase order when supplier is strictly custom part */    \n" +
                "   IF(pstrictCustomPart=1)THEN      \n" +
                "          SELECT * FROM                          \n" +
                " (                          \n" +
                "	 SELECT `com`.`id`,                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                          \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,              \n" +
                "        `com`.`PIDCode`,            \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "        `com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                     \n" +
                "        `com`.`category`,      \n" +
                "        com.imageURL,      \n" +
                "        com.documentPath,      \n" +
                "        `com`.`mfgPNDescription`,            \n" +
                "        `com`.`minOperatingTemp`,              \n" +
                "        `com`.`maxOperatingTemp`,              \n" +
                "        `com`.`value`,              \n" +
                "        `com`.`partPackage`,              \n" +
                "        `com`.`powerRating`,              \n" +
                "        `com`.`functionalCategoryID`,              \n" +
                "        `com`.`mountingTypeID`,              \n" +
                "        `com`.`connecterTypeID`,              \n" +
                "        `com`.`noOfPosition`,              \n" +
                "        `com`.`noOfRows`,              \n" +
                "        `com`.`pitch`,              \n" +
                "        `com`.`pitchMating`,              \n" +
                "        `com`.`length`,              \n" +
                "        `com`.`width`,              \n" +
                "        `com`.`height`,              \n" +
                "        `com`.`voltage`,              \n" +
                "        `com`.`weight`,              \n" +
                "        `com`.`feature`,              \n" +
                "        `com`.`color`,              \n" +
                "        `com`.`partStatus`,              \n" +
                "        `com`.`uom`,              \n" +
                "        `com`.`uomClassID`,              \n" +
                "        `com`.`unit`,              \n" +
                "        `com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,    \n" +
                "		u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,       \n" +
                "                r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,              \n" +
                "               `com`.`partPackageID`,              \n" +
                "                `com`.`bomLock`,              \n" +
                "		`com`.`businessRisk`,              \n" +
                "		`com`.`costCategoryID`,              \n" +
                "		`com`.`deviceMarking`,              \n" +
                "		`com`.`driverToolRequired`,              \n" +
                "		`com`.`eau`,              \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                    \n" +
                "		`com`.`plannedValuePerBuild`,                    \n" +
                "		`com`.`programingRequired`,                    \n" +
                "		`com`.`rfqOnly`,                    \n" +
                "		`com`.`saftyStock`,                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                    \n" +
                "		`com`.`scrapValuePerBuild`,                    \n" +
                "		`com`.`selfLifeDays`,                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                    \n" +
                "		`com`.`temperatureCoefficient`,                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                    \n" +
                "		`com`.`temperatureCoefficientValue`,                    \n" +
                "		`com`.`trackSerialNumber`,                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,          \n" +
                "                com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,          \n" +
                "                fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                    \n" +
                "	FROM `component` AS `com`            \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID     \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0     \n" +
                "	WHERE (`com`.isdeleted=0 AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)        \n" +
                "        AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)        \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)        \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "        AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)      \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)       \n" +
                "        AND (com.mfgcodeid IN (SELECT smm.refMfgCodeMstID FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=IFNULL(psupplierID,smm.supplierID)) OR       \n" +
                "         com.mfgcodeid IN (SELECT mc.id FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0) OR      \n" +
                "         com.mfgcodeid IN (SELECT mc.id FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0)      \n" +
                "         )      \n" +
                "    AND `com`.`category` != 3      \n" +
                "    AND com.iscustom=1       \n" +
                "    ) AS a                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                      \n" +
                "	)                    \n" +
                "	ORDER BY mfgPN;        \n" +
                "  \n" +
                "ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart=0) THEN        \n" +
                "/* this logic used in purchase order     \n" +
                "  packing slip    \n" +
                "  UMID management    \n" +
                "  Component Master    \n" +
                "  Reserve Stock    \n" +
                "  Component Assy DFM    \n" +
                "  Reports    \n" +
                "  Price Break Update    \n" +
                "  Customer Part    \n" +
                "  Good-Bad Mapping Part    \n" +
                "  Supplier Quote    \n" +
                "  Supplier RMA    \n" +
                "   */                       \n" +
                " SELECT * FROM                          \n" +
                " (                          \n" +
                "	 SELECT `com`.`id`,                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                          \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,              \n" +
                "        `com`.`PIDCode`,            \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "        `com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                     \n" +
                "        `com`.`category`,      \n" +
                "        com.imageURL,      \n" +
                "        com.documentPath,      \n" +
                "        `com`.`mfgPNDescription`,            \n" +
                "        `com`.`minOperatingTemp`,              \n" +
                "        `com`.`maxOperatingTemp`,              \n" +
                "        `com`.`value`,              \n" +
                "        `com`.`partPackage`,              \n" +
                "        `com`.`powerRating`,              \n" +
                "        `com`.`functionalCategoryID`,              \n" +
                "        `com`.`mountingTypeID`,              \n" +
                "        `com`.`connecterTypeID`,              \n" +
                "        `com`.`noOfPosition`,              \n" +
                "        `com`.`noOfRows`,              \n" +
                "        `com`.`pitch`,              \n" +
                "        `com`.`pitchMating`,              \n" +
                "        `com`.`length`,              \n" +
                "        `com`.`width`,              \n" +
                "        `com`.`height`,              \n" +
                "        `com`.`voltage`,              \n" +
                "        `com`.`weight`,              \n" +
                "        `com`.`feature`,              \n" +
                "        `com`.`color`,              \n" +
                "        `com`.`partStatus`,              \n" +
                "        `com`.`uom`,              \n" +
                "        `com`.`uomClassID`,              \n" +
                "        `com`.`unit`,              \n" +
                "        `com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                              \n" +
                "              u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,               \n" +
                "        r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,              \n" +
                "        `com`.`partPackageID`,              \n" +
                "        `com`.`bomLock`,              \n" +
                "		`com`.`businessRisk`,              \n" +
                "		`com`.`costCategoryID`,              \n" +
                "		`com`.`deviceMarking`,              \n" +
                "		`com`.`driverToolRequired`,              \n" +
                "		`com`.`eau`,              \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                    \n" +
                "		`com`.`plannedValuePerBuild`,                    \n" +
                "		`com`.`programingRequired`,                    \n" +
                "		`com`.`rfqOnly`,                    \n" +
                "		`com`.`saftyStock`,                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                    \n" +
                "		`com`.`scrapValuePerBuild`,                    \n" +
                "		`com`.`selfLifeDays`,                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                    \n" +
                "		`com`.`temperatureCoefficient`,                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                    \n" +
                "		`com`.`temperatureCoefficientValue`,                    \n" +
                "		`com`.`trackSerialNumber`,                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,          \n" +
                "        com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,          \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                    \n" +
                "	FROM `component` AS `com`            \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))     \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType            \n" +
                "    JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID     \n" +
                "    JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0        \n" +
                "    WHERE `com`.`isdeleted` =0     \n" +
                "    AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`)        \n" +
                "    AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)        \n" +
                "    AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)        \n" +
                "    AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)        \n" +
                "    AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "    AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)       \n" +
                "    AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)        \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)      \n" +
                "    AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)        \n" +
                "    ) AS a                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                      \n" +
                "	)                    \n" +
                "	ORDER BY mfgPN;                    \n" +
                "  \n" +
                "  ELSE       \n" +
                "  /* this logic used in purchase order     \n" +
                "  packing slip    \n" +
                "  UMID management    \n" +
                "  Component Master    \n" +
                "  Reserve Stock    \n" +
                "  Component Assy DFM    \n" +
                "  Reports    \n" +
                "  Price Break Update    \n" +
                "  Customer Part    \n" +
                "  Good-Bad Mapping Part    \n" +
                "  Supplier Quote    \n" +
                "  Supplier RMA    \n" +
                "   */                 \n" +
                "   SELECT * FROM                    \n" +
                " (                    \n" +
                "	 SELECT `com`.`id`,                    \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/              \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,              \n" +
                "		`com`.`mfgPN` orgMfgPN,              \n" +
                "		`com`.`packaginggroupID`,                              \n" +
                "		`com`.`PIDCode`,                              \n" +
                "		`com`.`isGoodPart`,              \n" +
                "		`com`.`RoHSStatusID`,              \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "		`com`.`mfgcodeID`,              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,      \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                   \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,              \n" +
                "		`com`.`tolerance`,        \n" +
                "		`com`.`category`,      \n" +
                "                 com.imageURL,      \n" +
                "                 com.documentPath,      \n" +
                "                `com`.`mfgPNDescription`,               \n" +
                "		`com`.`minOperatingTemp`,              \n" +
                "		`com`.`maxOperatingTemp`,              \n" +
                "		`com`.`value`,              \n" +
                "		`com`.`partPackage`,              \n" +
                "		`com`.`powerRating`,              \n" +
                "		`com`.`functionalCategoryID`,              \n" +
                "		`com`.`mountingTypeID`,              \n" +
                "		`com`.`connecterTypeID`,              \n" +
                "		`com`.`noOfPosition`,              \n" +
                "		`com`.`noOfRows`,              \n" +
                "		`com`.`pitch`,              \n" +
                "		`com`.`pitchMating`,              \n" +
                "		`com`.`length`,              \n" +
                "		`com`.`width`,              \n" +
                "		`com`.`height`,              \n" +
                "		`com`.`voltage`,              \n" +
                "		`com`.`weight`,              \n" +
                "		`com`.`feature`,              \n" +
                "		`com`.`color`,                                          \n" +
                "		`com`.`partStatus`,                                          \n" +
                "		`com`.`uom`,                                        \n" +
                "                `com`.`uomClassID`,                          \n" +
                "		`com`.`unit`,                                \n" +
                "		`com`.`restrictUsePermanently`,                                \n" +
                "		`com`.`restrictUSEwithpermission`,                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                              \n" +
                "		`com`.`packagingID`,                            \n" +
                "		`com`.`packaging`,                            \n" +
                "		u.abbreviation AS uomName,    \n" +
                "		u.unitName AS  unitName,                                    \n" +
                "		r.rohsIcon,        \n" +
                "		r.name AS `rohsName`,        \n" +
                "               `com`.`partPackageID`,                    \n" +
                "               `com`.`bomLock`,                    \n" +
                "		`com`.`businessRisk`,                    \n" +
                "		`com`.`costCategoryID`,                    \n" +
                "		`com`.`deviceMarking`,                    \n" +
                "		`com`.`driverToolRequired`,                    \n" +
                "		`com`.`eau`,                    \n" +
                "		`com`.`epicorType`,                    \n" +
                "		`com`.`functionalTestingRequired`,                    \n" +
                "		`com`.`heightText`,                    \n" +
                "		`com`.`isCPN`,                    \n" +
                "		`com`.`isCustom`,                    \n" +
                "		`com`.`isLeadFree`,                    \n" +
                "		`com`.`leadTime`,                    \n" +
                "		`com`.`matingPartRquired`,                    \n" +
                "		`com`.`maxPriceLimit`,                    \n" +
                "		`com`.`maxQtyonHand`,                    \n" +
                "		`com`.`minimum`,                    \n" +
                "		`com`.`mult`,                    \n" +
                "		`com`.`packageQty`,                    \n" +
                "		`com`.`partType`,                    \n" +
                "		`com`.`pcbPerArray`,                    \n" +
                "		`com`.`pickupPadRequired`,                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,        \n" +
                "		`com`.`plannedValuePerBuild`,        \n" +
                "		`com`.`programingRequired`,        \n" +
                "		`com`.`rfqOnly`,        \n" +
                "		`com`.`saftyStock`,        \n" +
                "		`com`.`scrapRatePercentagePerBuild`,        \n" +
                "		`com`.`scrapValuePerBuild`,        \n" +
                "		`com`.`selfLifeDays`,        \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,        \n" +
                "		`com`.`temperatureCoefficient`,        \n" +
                "		`com`.`temperatureCoefficientUnit`,        \n" +
                "		`com`.`temperatureCoefficientValue`,        \n" +
                "		`com`.`trackSerialNumber`,        \n" +
                "		`com`.`refSupplierMfgpnComponentID`,        \n" +
                "                 com.refMfgPNMfgCodeId,        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,        \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,        \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`        \n" +
                "	FROM `component` AS `com`        \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))       \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID       \n" +
                "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0        \n" +
                "        WHERE `com`.`isdeleted` =0     \n" +
                "        AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`)        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)        \n" +
                "        AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)        \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)       \n" +
                "	AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)       \n" +
                "	AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)       \n" +
                "        AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)        \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)      \n" +
                "        AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)        \n" +
                "    ) AS a        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR        \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')        \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))              \n" +
                ")        \n" +
                "ORDER BY mfgPN;              \n" +
                "END IF;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (666,'1.00','V1','Bug 29368: Part Master: Character limit for PART# has to increase to 100 Character - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 666:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2020  *********************************** */
                "ALTER TABLE `component`   \n" +
                "CHANGE COLUMN `custAssyPN` `custAssyPN` VARCHAR(100) NULL DEFAULT NULL;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (667,'1.00','V1','Bug 29368: Part Master: Character limit for PART# has to increase to 100 Character - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 667:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkoutEmployeeFromOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkoutEmployeeFromOperation`(                      \n" +
                "	IN pWOTransID INT,                      \n" +
                "	IN pWOTransinoutID INT,                      \n" +
                "	IN pCheckoutEmployeeID INT,                      \n" +
                "	IN pCheckoutSetupTime INT,                      \n" +
                "	IN pRemark LONGTEXT,                  \n" +
                "	IN pTotalQty INT,            \n" +
                "    IN pPassQty INT,                  \n" +
                "	IN pObservedQty INT,                  \n" +
                "    IN pReworkQty INT,                  \n" +
                "    IN pScrapQty INT,        \n" +
                "    IN pReprocessQty INT(11),          \n" +
                "	IN pQtyControl TINYINT(1),                     \n" +
                "    IN pIsFirstArticle TINYINT,            \n" +
                "    IN pRoleID INT(11)  ,      \n" +
                "    IN pBoardWithMissingPartsQty INT,      \n" +
                "    IN pBypassQty INT          \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "	DECLARE lvwoNumber VARCHAR(255);                      \n" +
                "	DECLARE lvopName VARCHAR(255);                      \n" +
                "	DECLARE lvempName VARCHAR(255);                      \n" +
                "	DECLARE lvwoOPID INT(11);                         \n" +
                "	DECLARE lvwoID INT(11);                      \n" +
                "	DECLARE lvuserID INT(11);                      \n" +
                "	DECLARE lvopNumber DECIMAL(7,3);              \n" +
                "	DECLARE lProductionId INT(11);                 \n" +
                "	DECLARE last_woopid INT(11);                 \n" +
                "	DECLARE lvassybinID INT(11);                  \n" +
                "	DECLARE lvpartID INT(11);          \n" +
                "  \n" +
                "	/*      \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "	BEGIN                      \n" +
                "		ROLLBACK;                  \n" +
                "		RESIGNAL;                  \n" +
                "	END;                  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                \n" +
                "	BEGIN                                \n" +
                "		ROLLBACK;                                \n" +
                "		RESIGNAL;                                \n" +
                "	END;	                  \n" +
                "	START TRANSACTION;                  \n" +
                "	*/      \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCheckoutTime;                      \n" +
                "  \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),                      \n" +
                "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,                      \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID), wteio.woOPID, wteio.woID                      \n" +
                "		INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID, lvwoID                        \n" +
                "	FROM workorder_trans_empinout  wteio                      \n" +
                "	WHERE wteio.woTransinoutID = pWOTransinoutID ;        \n" +
                "  \n" +
                "	/*Update pending pasue record */                      \n" +
                "	UPDATE workorder_trans_emp_pausedet a                      \n" +
                "	SET resumetime = @pCheckoutTime,                      \n" +
                "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),                      \n" +
                "	    updatedBy = pCheckoutEmployeeID                      \n" +
                "	WHERE a.woTransinoutID = pWOTransinoutID                      \n" +
                "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;                      \n" +
                "  \n" +
                "	/*Calculate employee production */                      \n" +
                "	UPDATE workorder_trans_empinout  a                      \n" +
                "	SET isPaused = 0,                      \n" +
                "		checkoutTime = @pCheckoutTime,                      \n" +
                "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),                      \n" +
                "		checkoutSetupTime = pCheckoutSetupTime,                      \n" +
                "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -                       \n" +
                "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime                       \n" +
                "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )                      \n" +
                "		  ),                      \n" +
                "		updatedBy = pCheckoutEmployeeID,                      \n" +
                "		remark = pRemark                      \n" +
                "	WHERE woTransId = pWOTransID  AND woTransinoutID = pWOTransinoutID AND checkoutTime IS NULL ;                      \n" +
                "  \n" +
                "  \n" +
                "	/*calculate operation Transaction production */                      \n" +
                "	SELECT COUNT(1) INTO  @cnt  FROM workorder_trans_empinout WHERE  woTransId = pWOTransID  AND checkoutTime IS NULL;                      \n" +
                "	IF (@cnt = 0 ) THEN                       \n" +
                "  \n" +
                "	UPDATE workorder_trans a                      \n" +
                "	SET checkouttime = @pCheckoutTime,                      \n" +
                "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout                       \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,                      \n" +
                "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout                       \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),                      \n" +
                "		updatedBy = pCheckoutEmployeeID,                      \n" +
                "		checkoutEmployeeID = pCheckoutEmployeeID                      \n" +
                "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;	                      \n" +
                "  \n" +
                "	END IF;                    \n" +
                "	/* add production quantity details */          \n" +
                "	IF(pQtyControl = 1)            \n" +
                "	THEN         \n" +
                "		INSERT INTO workorder_trans_production (`woTransID`,`employeeID`,`totalQty`,`passQty`,`reprocessQty`,        \n" +
                "				`observedQty`,`reworkQty`,`scrapQty`,`isFirstArticle`,`createdAt`,`createdBy`,`remark`,`createByRoleId`,      \n" +
                "				 `boardWithMissingPartsQty` , `bypassQty`)                  \n" +
                "		VALUES (pWOTransID,pCheckoutEmployeeID,pTotalQty,pPassQty,pReprocessQty,pObservedQty,pReworkQty,pScrapQty                  \n" +
                "				,pIsFirstArticle,fun_DatetimetoUTCDateTime(),pCheckoutEmployeeID,pRemark, pRoleID      \n" +
                "				, pBoardWithMissingPartsQty , pBypassQty) ;         \n" +
                "  \n" +
                "		SET lProductionId = (SELECT LAST_INSERT_ID());            \n" +
                "  \n" +
                "			UPDATE workorder_trans_serialNo SET woTransprodID = lProductionId, updateByRoleId = pRoleId             \n" +
                "				,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pCheckoutEmployeeID            \n" +
                "			WHERE woTransID = pWOTransID  AND woTransprodID IS NULL          \n" +
                "				AND isDeleted = 0 AND deletedAt IS NULL;            \n" +
                "  \n" +
                "		/*Get Last Operation for Work Order*/    \n" +
                "  \n" +
                "		SELECT woOPID INTO last_woopid FROM workorder_operation woop     \n" +
                "			WHERE woop.woid = lvwoID AND opNumber = (SELECT MAX(opnumber) FROM workorder_operation wo                                           \n" +
                "			WHERE wo.woid = lvwoID     \n" +
                "			AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0)     \n" +
                "			AND woop.deletedat IS NULL AND IFNULL(woop.isDeleted,0)=0;     \n" +
                "  \n" +
                "		IF (last_woopid = lvwoOPID AND pPassQty > 0) THEN    \n" +
                "			SELECT wo.partid INTO lvpartID FROM workorder wo     \n" +
                "						WHERE wo.woID=lvwoID;    \n" +
                "  \n" +
                "			SELECT b.id INTO lvassybinID FROM binmst b     \n" +
                "				WHERE `Name` = (SELECT c.pidcode FROM component c     \n" +
                "					WHERE c.id = lvpartID AND c.deletedAt IS NULL);    \n" +
                "			INSERT  INTO `assemblystock`(`openingStock`,`openingdate`,`createdAt`,`createdBy`,    \n" +
                "			`updatedAt`,`updatedBy`,    \n" +
                "			`partID`,`createByRoleId`,`updateByRoleId`,    \n" +
                "			`woNumber`,`serialNo`,`refUMID`,`type`,`whID`,`binID`,`woID`,datecode)     \n" +
                "			VALUES (pPassQty,UTC_DATE(),fun_DatetimetoUTCDateTime(),pCheckoutEmployeeID,    \n" +
                "			fun_DatetimetoUTCDateTime(),pCheckoutEmployeeID,    \n" +
                "			lvpartID,pRoleID,pRoleID,    \n" +
                "			lvwoNumber,\"Auto Entry from WO\",NULL,\"WS\",(SELECT WarehouseID FROM binmst WHERE id=lvassybinID),lvassybinID,lvwoID,(SELECT datecode FROM workorder WHERE woid=lvwoID));    \n" +
                "		END IF;    \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	/* [S] - Add Time line log for check-out from team work order operation */               	                  \n" +
                "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	                      \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Employee stoppped activity from team operation\");                      \n" +
                "	SET @pEventDescription = CONCAT('\"',lvempName,'\" stopped activity from team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');                      \n" +
                "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.04,CONCAT('task/tasklist/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);                        \n" +
                "	/* [E] - Add Time line log for check-out from team work order operation */	                      \n" +
                "  \n" +
                "	/* COMMIT; */      \n" +
                "    END;  \n" +
                /* **************************** New Script -> 07-01-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_workorder_operationfullcheckout` ;  \n" +
                "CREATE PROCEDURE `Sproc_workorder_operationfullcheckout`(                    \n" +
                "	IN pWOTransID INT,                    \n" +
                "	IN pCheckoutEmployeeID INT,                    \n" +
                "	IN pCheckoutSetupTime INT,                    \n" +
                "	IN pRemark LONGTEXT,          \n" +
                "    IN pQtyControl TINYINT(1),          \n" +
                "    IN pEmployeeID INT,          \n" +
                "    IN pTotalQty INT,          \n" +
                "    IN pPassQty INT,          \n" +
                "    IN pReprocessQty INT,          \n" +
                "    IN pObservedQty INT,          \n" +
                "    IN pReworkQty INT,          \n" +
                "    IN pScrapQty INT,          \n" +
                "    IN pIsFirstArticle INT,          \n" +
                "    IN pUserId INT,          \n" +
                "    IN pRoleID INT ,      \n" +
                "    IN pBoardWithMissingPartsQty INT,      \n" +
                "    IN pBypassQty INT         \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "	DECLARE lvwoNumber VARCHAR(255);                    \n" +
                "	DECLARE lvopName VARCHAR(255);                    \n" +
                "	DECLARE lvempName VARCHAR(255);                    \n" +
                "	DECLARE lvwoOPID INT;                    \n" +
                "	DECLARE lvuserID INT;                  \n" +
                "	DECLARE lvwoID INT;                   \n" +
                "	DECLARE lvopNumber DECIMAL(7,3);                \n" +
                "	DECLARE lProductionId INT;                    \n" +
                "	DECLARE last_woopid INT;                 \n" +
                "	DECLARE lvassybinID INT;                  \n" +
                "	DECLARE lvpartID INT;             \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCheckoutTime;                    \n" +
                "  \n" +
                "	/*Update pending pasue record */                    \n" +
                "	UPDATE workorder_trans_emp_pausedet a                    \n" +
                "	SET resumetime = @pCheckoutTime,                    \n" +
                "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),                    \n" +
                "	    updatedBy = pCheckoutEmployeeID                    \n" +
                "	WHERE a.woTransinoutID IN (SELECT woTransinoutID FROM workorder_trans_empinout WHERE woTransID  = pWOTransID )                    \n" +
                "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;                    \n" +
                "  \n" +
                "	/*Calculate employee production */                    \n" +
                "	UPDATE workorder_trans_empinout  a                    \n" +
                "	SET isPaused = 0,                    \n" +
                "		checkoutTime = @pCheckoutTime,                    \n" +
                "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),                    \n" +
                "		checkoutSetupTime = pCheckoutSetupTime,                    \n" +
                "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -                     \n" +
                "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime                     \n" +
                "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )                    \n" +
                "		  ),                    \n" +
                "		updatedBy = pCheckoutEmployeeID,                    \n" +
                "		remark = pRemark                    \n" +
                "	WHERE woTransId = pWOTransID  AND checkoutTime IS NULL ;                    \n" +
                "  \n" +
                "	/*calculate operation Transaction production */                    \n" +
                "	UPDATE workorder_trans a                    \n" +
                "	SET checkouttime = @pCheckoutTime,                    \n" +
                "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout                     \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,                    \n" +
                "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout                     \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),                    \n" +
                "		updatedBy = pCheckoutEmployeeID,                    \n" +
                "		checkoutEmployeeID = pCheckoutEmployeeID                    \n" +
                "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;                    \n" +
                "  \n" +
                "	/* [S] - Add Time line log for check-out work order operation */                    \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),                    \n" +
                "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = pCheckoutEmployeeID) , wt.woOPID,                    \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID), wt.woID                     \n" +
                "		INTO lvwoNumber,lvopName,lvempName,lvwoOPID,lvopNumber,lvwoID                    \n" +
                "	FROM workorder_trans  wt                    \n" +
                "	WHERE wt.woTransID = pWOTransID ;		                    \n" +
                "  \n" +
                "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	               \n" +
                "  \n" +
                "    IF(pQtyControl = 1)  THEN           \n" +
                "		INSERT INTO workorder_trans_production          \n" +
                "			(`woTransID`,`employeeID`,`totalQty`,`passQty`,`reprocessQty`,`observedQty`,`reworkQty`,`scrapQty`,`isFirstArticle`,          \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`remark`,`createByRoleId` , `boardWithMissingPartsQty` , `bypassQty`)          \n" +
                "		VALUES          \n" +
                "			(pWOTransID, pEmployeeID, pTotalQty, pPassQty, pReprocessQty, pObservedQty, pReworkQty, pScrapQty, pIsFirstArticle,           \n" +
                "			0, fun_DatetimetoUTCDateTime(), pUserId, pRemark, pRoleID, pBoardWithMissingPartsQty , pBypassQty);          \n" +
                "  \n" +
                "		SET lProductionId = (SELECT LAST_INSERT_ID());          \n" +
                "		UPDATE workorder_trans_serialNo SET woTransprodID = lProductionId, updateByRoleId = pRoleId           \n" +
                "        		,updatedAt = fun_DatetimetoUTCDateTime(), updatedBy=pUserId          \n" +
                "			WHERE woTransID = pWOTransID  AND woTransprodID IS NULL        \n" +
                "			AND isDeleted = 0 AND deletedAt IS NULL;          \n" +
                "  \n" +
                "		SELECT woOPID INTO last_woopid FROM workorder_operation woop     \n" +
                "			WHERE woop.woid = lvwoID AND opNumber = (SELECT MAX(opnumber) FROM workorder_operation wo                                           \n" +
                "			WHERE wo.woid = lvwoID     \n" +
                "			AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0)     \n" +
                "			AND woop.deletedat IS NULL AND IFNULL(woop.isDeleted,0)=0;     \n" +
                "  \n" +
                "		IF (last_woopid = lvwoOPID AND pPassQty > 0) THEN    \n" +
                "			SELECT wo.partid INTO lvpartID FROM workorder wo     \n" +
                "						WHERE wo.woID=lvwoID;    \n" +
                "  \n" +
                "			SELECT b.id INTO lvassybinID FROM binmst b     \n" +
                "				WHERE `Name` = (SELECT c.pidcode FROM component c     \n" +
                "					WHERE c.id = lvpartID AND c.deletedAt IS NULL);    \n" +
                "			INSERT  INTO `assemblystock`(`openingStock`,`openingdate`,`createdAt`,`createdBy`,    \n" +
                "			`updatedAt`,`updatedBy`,    \n" +
                "			`partID`,`createByRoleId`,`updateByRoleId`,    \n" +
                "			`woNumber`,`serialNo`,`refUMID`,`type`,`whID`,`binID`,`woID`,datecode)     \n" +
                "			VALUES ((pPassQty),UTC_DATE(),fun_DatetimetoUTCDateTime(),pCheckoutEmployeeID,    \n" +
                "			fun_DatetimetoUTCDateTime(),pCheckoutEmployeeID,    \n" +
                "			lvpartID,pRoleID,pRoleID,    \n" +
                "			lvwoNumber,\"Auto Entry from WO\",NULL,\"WS\",(SELECT WarehouseID FROM binmst WHERE id=lvassybinID),lvassybinID,lvwoID,(SELECT datecode FROM workorder WHERE woid=lvwoID));    \n" +
                "		END IF;    \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Employee check-out from work order operation\");                    \n" +
                "	SET @pEventDescription = CONCAT('\"',lvempName,'\" check-out from operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');                    \n" +
                "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans',pWOTransID,5.04,CONCAT('task/tasklist/travel/',lvwoOPID,'/', pCheckoutEmployeeID,'/', lvwoOPID),lvuserID,2);  			                    \n" +
                "	/* [E] - Add Time line log for check-out work order operation */			                    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 07-01-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPackingslipReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                      \n" +
                "	IN cpid INT                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "	SELECT                   \n" +
                "    cp.id,              \n" +
                "    cp.status,     \n" +
                "    cp.packingSlipType,    \n" +
                "    cp.packingSlipNumber AS PackingSlip,                  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                  \n" +
                "    cp.poDate AS PODate,                  \n" +
                "    cp.soNumber AS SalesOrderNumber,                  \n" +
                "    cp.poNumber AS PONumber,                  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,              \n" +
                "    cp.soDate AS SODate,                  \n" +
                "    cp.sorevision AS SORevision,                  \n" +
                "	cp.billingAddress AS SoldToAddress,            \n" +
                "	cp.shippingAddress AS ShippingAddress,   \n" +
                "	cp.intermediateAddress AS IntermediateAddress,           \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),                  \n" +
                "            '-') AS SalesOrderPersonName,            \n" +
                "	CONCAT(us.firstName,' ',us.lastName) AS  preparedBy, us.emailAddress, emp.phExtension              \n" +
                "FROM                  \n" +
                "    customer_packingslip cp         \n" +
                "        LEFT JOIN                  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                  \n" +
                "        AND sm.isDeleted = 0                  \n" +
                "        LEFT JOIN                  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                  \n" +
                "        AND gc.isDeleted = 0                  \n" +
                "        AND gc.categoryType = 'Shipping Methods'                  \n" +
                "        LEFT JOIN                  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                  \n" +
                "        AND gcc.isDeleted = 0                  \n" +
                "        AND gcc.categoryType = 'Payment Terms'                \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                      \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID               \n" +
                "WHERE                  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                  \n" +
                "LIMIT 1;                  \n" +
                "  \n" +
                "SELECT                   \n" +
                "	cpd.lineID AS PSLine,            \n" +
                "    cpd.id AS cpDetID,            \n" +
                "    cpd.refCustPackingSlipID AS cpID,             \n" +
                "    cpd.partId,            \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,              \n" +
                "    IFNULL(cpd.remainingQty,0) AS RemainingQty,              \n" +
                "    cpd.custPOLineID AS POLine,      \n" +
                "    cpd.shippingNotes AS ShippingComment,      \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN            \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)            \n" +
                "		WHEN (c.iscustom = 1) THEN            \n" +
                "		c.custAssyPN            \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN            \n" +
                "		c.mfgPN            \n" +
                "		ELSE            \n" +
                "		''            \n" +
                "	END) AS PartNumber,               \n" +
                "    FUN_GETUOMABBREVIATIONBYID(c.uom) AS UOM,                  \n" +
                "    IFNULL(c.rev, '') AS Revision,             \n" +
                "    c.partType,            \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',               \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                  \n" +
                "            IFNULL(CONCAT(', ',                  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                  \n" +
                "                    ''),                  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                  \n" +
                "            IFNULL(CONCAT(', HTS Code : ', c.htsCode), ''),                  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                  \n" +
                "FROM                  \n" +
                "    customer_packingslip_det cpd            \n" +
                "        LEFT JOIN                  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                  \n" +
                "        AND cp.isDeleted = 0                  \n" +
                "        LEFT JOIN                  \n" +
                "    component c ON c.id = cpd.partid                  \n" +
                "        LEFT JOIN                  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                  \n" +
                "        AND sd.isDeleted = 0                 \n" +
                "        LEFT JOIN                 \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                  \n" +
                "        LEFT JOIN                  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID      	            \n" +
                "        LEFT JOIN                  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                  \n" +
                "        AND ra.partID = cpd.partId                  \n" +
                "        LEFT JOIN                  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id             \n" +
                "WHERE          \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                    \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-01-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(            \n" +
                "	IN partID INT ,                \n" +
                "	IN cpID INT                 \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	# COFC Report Header details        \n" +
                "	SELECT                     \n" +
                "    cp.id,        \n" +
                "    cp.packingSlipNumber AS PackingSlip,                  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                  \n" +
                "    cp.soNumber AS SalesOrderNumber,                  \n" +
                "    cp.poNumber AS PONumber,                 \n" +
                "	 cp.soDate AS SODate,                    \n" +
                "    cp.sorevision AS SORevision,                \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                  \n" +
                "    'BAS' AS DepartmentName,                  \n" +
                "    'Jay Vora' AS ManagerName                  \n" +
                "FROM                  \n" +
                "    customer_packingslip cp              \n" +
                "        LEFT JOIN                  \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                  \n" +
                "        AND mfg.isDeleted = 0                  \n" +
                "WHERE                  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID          \n" +
                "LIMIT 1;                  \n" +
                "  \n" +
                "  # COFC Report Table details                \n" +
                "	SELECT               \n" +
                "    cpd.id AS cpDetID,            \n" +
                "	cpd.custPOLineID AS POLine,                  \n" +
                "	cpd.lineID AS PSLine,                \n" +
                "    CASE WHEN (c.partType = 3) THEN sa.shippedqty ELSE cpd.shipQty END AS ShippedQty,                  \n" +
                "    cpd.poQty AS OrderQty,                  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN            \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)            \n" +
                "		WHEN (c.iscustom = 1) THEN            \n" +
                "		c.custAssyPN            \n" +
                "		WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN            \n" +
                "		c.mfgPN            \n" +
                "		ELSE            \n" +
                "		''            \n" +
                "	END) AS PartNumber,                \n" +
                "    IFNULL(c.rev, '') AS Revision,                  \n" +
                "    sa.woNumber AS WorkOrderNumber,                  \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,      \n" +
                "    cpd.assyDescription AS Descripton,                  \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,    \n" +
                "    c.partType,                \n" +
                "    (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1) AS DateCode 		          \n" +
                "FROM  		    	            \n" +
                "    customer_packingslip_det cpd                  \n" +
                "		INNER JOIN  component c ON c.id = cpd.partid AND c.isDeleted = 0           \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0   \n" +
                "WHERE                  \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID           \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;               \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-01-2020  *********************************** */
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (668,'1.00','V1','Bug 29368: Part Master: Character limit for PART# has to increase to 100 Character - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 668:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetMappedManufacturerList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMappedManufacturerList`(        \n" +
                "IN mfgCodeAliasID INT     \n" +
                ")  \n" +
                "BEGIN        \n" +
                "  DECLARE vDateTimeDisplayFormat VARCHAR(100);                   \n" +
                "  DECLARE vTimeZone VARCHAR(50);                   \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;     \n" +
                "  SELECT im.id  \n" +
                "		,im.refmfgCodeID  \n" +
                "        ,im.refmfgAliasID  \n" +
                "        ,fun_ApplyCommonDateTimeFormatByParaValue(im.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt  \n" +
                "        ,fun_getUserNameByID(im.createdBy) employeeName  \n" +
                "        ,fun_getMfgCodeAndNameByID(im.refmfgCodeID) mfgCode  \n" +
                "        ,(SELECT ma.alias FROM mfgcodealias ma WHERE id=im.refmfgAliasID LIMIT 1) refmfgAliasName  \n" +
                "	FROM invalid_mfgmappingmst im    \n" +
                "  WHERE im.deletedAt IS NULL AND im.refmfgAliasID=mfgCodeAliasID;        \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_BU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_BU_mfgcodemst` BEFORE UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN         \n" +
                "		IF ((NEW.isDeleted = 0 and (old.mfgName != NEW.mfgName or old.mfgCode != NEW.mfgCode)) AND (SELECT  COUNT(1)                    \n" +
                "			FROM `mfgCodeAlias` AS mca                \n" +
                "				/* INNER JOIN `mfgCodemst` AS mcm                     \n" +
                "				ON mca.`mfgcodeId` = mcm.`id` AND mcm.`deletedAt` IS NULL                     \n" +
                "				AND mcm.`mfgType` = NEW.mfgType AND mcm.id != NEW.id  */  \n" +
                "  \n" +
                "			WHERE mfgcodeId IN (select id from mfgcodemst where mfgType = new.mfgType) and  \n" +
                "            mca.`isDeleted` = 0 and mfgCodeId != new.id               \n" +
                "			AND (mca.`alias` = NEW.mfgName OR mca.`alias` = NEW.mfgCode)))>0 THEN                           \n" +
                "  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry2';      \n" +
                "		END IF;  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 05-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (669,'1.00','V1',' Update SP for Trg_BU_mfgcodemst and Sproc_GetMappedManufacturerList - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 669:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "UPDATE company_info  \n" +
                "SET remittanceAddress='FLEXTRON CIRCUIT ASSEMBLY  \n" +
                "300 BAUMAN CT.   \n" +
                "WOOD DALE, IL 60191, USA';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (670,'1.00','V1','Update script for remittance address - Vaibhav '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 670:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "ALTER TABLE mfgcodemst ADD COLUMN systemID VARCHAR(30);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN customerSystemID VARCHAR(30);  \n" +

                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (671,'1.00','V1','Manufacturer page changes-Champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 671:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "INSERT INTO identity(`type`,`maxvalue`,remark,isdeleted,createdby)VALUES  \n" +
                "('MFRSystemID',1,'Manufacturer systemid next generate from this id',0,1);  \n" +
                "INSERT INTO identity(`type`,`maxvalue`,remark,isdeleted,createdby)VALUES  \n" +
                "('SupplierSystemID',1,'Supplier systemid next generate from this id',0,1);  \n" +
                "INSERT INTO identity(`type`,`maxvalue`,remark,isdeleted,createdby)VALUES  \n" +
                "('CustSystemID',1,'Customer systemid next generate from this id',0,1);  \n" +
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(            \n" +
                "	IN cpID INT            \n" +
                ")  \n" +
                "BEGIN	            \n" +
                "  \n" +
                "    # Customer Invoice Master table details             \n" +
                "    SELECT  cp.id,            \n" +
                "		cp.invoiceNumber,            \n" +
                "        cp.invoiceDate,            \n" +
                "		cp.packingSlipNumber,                  \n" +
                "		cp.packingSlipDate,                  \n" +
                "		cp.poDate,                  \n" +
                "		cp.poNumber,  \n" +
                "		mg.customerSystemID,  \n" +
                "		mg.accountRef,            \n" +
                "        cp.status,            \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '\r') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,          \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,            \n" +
                "        cp.billingAddress,            \n" +
                "        cp.shippingAddress,  \n" +
                "        cp.intermediateAddress,            \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,            \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                              \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,             \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,            \n" +
                "        cp.systemID AS legalnumber,            \n" +
                "        CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,            \n" +
                "		us.emailAddress,            \n" +
                "		emp.phExtension            \n" +
                "		FROM customer_packingslip cp   \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID            \n" +
                "                LEFT JOIN                  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId             \n" +
                "        AND gcs.isDeleted = 0                 \n" +
                "           LEFT JOIN                  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID             \n" +
                "        AND gcp.isDeleted = 0               \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                    \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID             \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;             \n" +
                "  \n" +
                "	# Customer Invoice line level details             \n" +
                "	SELECT              \n" +
                "		cpd.id,                  \n" +
                "		cpd.partId,        \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,         \n" +
                "		cpd.lineID,            \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN               \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)            \n" +
                "		  WHEN (c.iscustom=1) THEN             \n" +
                "			c.custAssyPN            \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN             \n" +
                "			c.mfgPN             \n" +
                "        ELSE                                                     \n" +
                "			  ''                                    \n" +
                "			END) AS mfgPN ,            \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                 \n" +
                "			'Other Charges'                  \n" +
                "		ELSE                                                     \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                    \n" +
                "			END) AS  mfgName,            \n" +
                "		IFNULL(c.rev, '') AS revision,            \n" +
                "		fun_getUOMAbbreviationByID(c.uom) uom,            \n" +
                "		cpd.shippedQty AS qty,             \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,            \n" +
                "		(IFNULL(cpd.shippedQty,0)*IFNULL(cpd.unitPrice,0)) extPrice,              \n" +
                "		cpd.assyDescription AS DESCRIPTION,  \n" +
                "		fun_getCertificationByPartID(cpd.partId) standards,  \n" +
                "		fun_getRoHSNameByPartID(cpd.partId) rohsName           \n" +
                "	FROM                  \n" +
                "		customer_packingslip_det cpd                  \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                   \n" +
                "	WHERE                  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;             \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS             \n" +
                "    SELECT                          \n" +
                "			(SELECT SUM(cp.shippedQty * cp.unitPrice) FROM customer_packingslip_det cp             \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId             \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                  \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                      \n" +
                "			(SELECT SUM(cpp.shippedQty * cpp.unitPrice) FROM customer_packingslip_det cpp             \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId             \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,            \n" +
                "			(SELECT SUM(csp.shippedQty * csp.unitPrice) FROM customer_packingslip_det csp             \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice            \n" +
                "		FROM customer_packingslip_det cpd                 \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID              \n" +
                "		AND cpd.isdeleted=0;                  \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,              \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,              \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,                 \n" +
                "                IFNULL((totalLinePrice+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice FROM tempTotalPrice LIMIT 1;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCompanyReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN      \n" +
                "	# Company detail                            \n" +
                "	SELECT CONCAT('S & M Group, Inc. d/b/a,','<br/>',cu.mfgName,'<br/>',cua.street1,'<br/>',cua.city,', ',cua.state,' ',cua.postcode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',cua.email,'<br/>','Phone: ',  \n" +
                "	cua.contact,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(cua.faxNumber,''))AS address,        \n" +
                "		cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,'' AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,      \n" +
                "		ci.ein, ci.remittanceAddress       \n" +
                "	FROM customer_addresses cua                            \n" +
                "	JOIN mfgcodemst cu ON cu.id = cua.customerId      \n" +
                "    JOIN company_info ci ON ci.mfgCodeId = cu.id           \n" +
                "	LEFT JOIN countrymst c ON cua.countryID=c.countryID                           \n" +
                "	WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDeleted = 0 AND cua.isDefault = 1;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Uti_UpdateManufacturerSerialNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_UpdateManufacturerSerialNumber`()  \n" +
                "BEGIN    \n" +
                "	DECLARE v_finished INTEGER DEFAULT 0;    \n" +
                "    DECLARE v_mfrID INT(11);    \n" +
                "    DECLARE v_mfgType VARCHAR(5);    \n" +
                "    DECLARE v_serialNumber VARCHAR(20);  \n" +
                "    DECLARE v_cnt INT(2);    \n" +
                "	DECLARE cur_manufacturer CURSOR FOR SELECT * FROM temp_manufacturer ORDER BY mfgType,id;    \n" +
                "    DECLARE CONTINUE HANDLER     \n" +
                "        FOR NOT FOUND SET v_finished = 1;    \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_manufacturer;    \n" +
                "    CREATE TEMPORARY TABLE temp_manufacturer AS    \n" +
                "	SELECT mf.id,mf.mfgType    \n" +
                "	  FROM mfgcodemst mf     \n" +
                "       WHERE mf.systemid IS NULL AND mf.isdeleted=0;    \n" +
                "  \n" +
                "    OPEN cur_manufacturer;    \n" +
                "    get_mfr: LOOP    \n" +
                "  \n" +
                "    FETCH cur_manufacturer INTO v_mfrID,v_mfgType;    \n" +
                "     IF v_finished = 1 THEN    \n" +
                "		LEAVE get_mfr;    \n" +
                "	 END IF;    \n" +
                "  \n" +
                "     IF(v_mfgType='DIST')THEN  \n" +
                "        SELECT CONCAT('SUP',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber    \n" +
                "         FROM identity WHERE `type`='SupplierSystemID';  \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='SupplierSystemID';  \n" +
                "     ELSE  \n" +
                "  \n" +
                "     SELECT CONCAT('MFR',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber    \n" +
                "         FROM identity WHERE `type`='MFRSystemID';  \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='MFRSystemID';  \n" +
                "     END IF;   \n" +
                "  \n" +
                "        UPDATE mfgcodemst    \n" +
                "        SET systemID = v_serialNumber    \n" +
                "	  WHERE id = v_mfrID;    \n" +
                "  \n" +
                "    END LOOP get_mfr;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Uti_UpdateCustomerSerialNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_UpdateCustomerSerialNumber`()  \n" +
                "BEGIN    \n" +
                "	DECLARE v_finished INTEGER DEFAULT 0;    \n" +
                "    DECLARE v_mfrID INT(11);   \n" +
                "    DECLARE v_serialNumber VARCHAR(20);  \n" +
                "    DECLARE v_cnt INT(2);   \n" +
                "    DECLARE v_mfgcode VARCHAR(8);  \n" +
                "    DECLARE cur_manufacturer CURSOR FOR SELECT * FROM temp_manufacturer ORDER BY id;    \n" +
                "    DECLARE CONTINUE HANDLER     \n" +
                "        FOR NOT FOUND SET v_finished = 1;    \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_manufacturer;    \n" +
                "    CREATE TEMPORARY TABLE temp_manufacturer AS    \n" +
                "	SELECT mf.id   \n" +
                "	  FROM mfgcodemst mf     \n" +
                "       WHERE mf.customerSystemID IS NULL AND mf.isdeleted=0 AND iscustordisty=1 AND mfgtype<>'DIST';    \n" +
                "  SELECT mfgcode INTO v_mfgcode FROM mfgcodemst WHERE iscompany=1 ;  \n" +
                "    OPEN cur_manufacturer;    \n" +
                "    get_mfr: LOOP    \n" +
                "  \n" +
                "    FETCH cur_manufacturer INTO v_mfrID;    \n" +
                "     IF v_finished = 1 THEN    \n" +
                "		LEAVE get_mfr;    \n" +
                "	 END IF;    \n" +
                "  \n" +
                "  \n" +
                "        SELECT CONCAT(v_mfgcode,'C',LPAD(`maxvalue`,5,'0'))  INTO v_serialNumber    \n" +
                "         FROM identity WHERE `type`='CustSystemID';  \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustSystemID';  \n" +
                "  \n" +
                "  \n" +
                "        UPDATE mfgcodemst    \n" +
                "        SET customerSystemID = v_serialNumber    \n" +
                "	  WHERE id = v_mfrID;    \n" +
                "  \n" +
                "    END LOOP get_mfr;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_mfgcodealias` ;  \n" +
                "CREATE TRIGGER `Trg_AI_mfgcodealias` AFTER INSERT ON `mfgcodealias`   \n" +
                "    FOR EACH ROW BEGIN   \n" +
                "    DECLARE v_serialNumber   VARCHAR(20);  \n" +
                "    DECLARE v_custSerialNumber VARCHAR(20) DEFAULT NULL;  \n" +
                "    SELECT mfgtype,iscustordisty,systemID,customerSystemID INTO @mfgtype,@iscustordisty,@systemID,@customerSystemID FROM mfgcodemst WHERE id=new.mfgcodeid;  \n" +
                "    IF(@systemID IS NULL)THEN  \n" +
                "    IF(@mfgtype='DIST')THEN  \n" +
                "    SELECT CONCAT('SUP',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber    \n" +
                "         FROM identity WHERE `type`='SupplierSystemID';  \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='SupplierSystemID';  \n" +
                "    ELSE  \n" +
                "    SELECT CONCAT('MFR',LPAD(`maxvalue`,11,'0'))  INTO v_serialNumber  \n" +
                "         FROM identity WHERE `type`='MFRSystemID';  \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='MFRSystemID';  \n" +
                "    END IF;  \n" +
                "    UPDATE mfgcodemst    \n" +
                "        SET systemID=  v_serialNumber  \n" +
                "	  WHERE id = new.mfgcodeid;   \n" +
                "    END IF;  \n" +
                "    IF(@mfgtype<>'DIST' AND @iscustordisty=1 AND @customerSystemID IS NULL)THEN  \n" +
                "    SELECT mfgcode INTO @v_mfgcode FROM mfgcodemst WHERE iscompany=1 ;  \n" +
                "    SELECT CONCAT(@v_mfgcode,'C',LPAD(`maxvalue`,5,'0'))  INTO v_custSerialNumber    \n" +
                "         FROM identity WHERE `type`='CustSystemID';  \n" +
                "  \n" +
                "         UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustSystemID';  \n" +
                "  \n" +
                "         UPDATE mfgcodemst    \n" +
                "        SET customerSystemID = v_custSerialNumber  \n" +
                "	  WHERE id = new.mfgcodeid;    \n" +
                "    END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerSystemID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerSystemID`(  \n" +
                "IN pcustomerID INT,  \n" +
                "IN piscustordist TINYINT,  \n" +
                "IN pmfgtype VARCHAR(8)  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "    DECLARE v_serialNumber VARCHAR(20);  \n" +
                "    DECLARE v_mfgcode VARCHAR(20);  \n" +
                "     IF(pmfgtype<>'DIST' AND piscustordist=1)THEN  \n" +
                "        SELECT mfgcode INTO v_mfgcode FROM mfgcodemst WHERE iscompany=1 ;  \n" +
                "        SELECT customerSystemID INTO @customerSystemID FROM mfgcodemst WHERE id=pcustomerID ;  \n" +
                "        IF(@customerSystemID IS NULL)THEN  \n" +
                "		SELECT CONCAT(v_mfgcode,'C',LPAD(`maxvalue`,5,'0'))  INTO v_serialNumber    \n" +
                "		FROM identity WHERE `type`='CustSystemID';  \n" +
                "  \n" +
                "		UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustSystemID';  \n" +
                "  \n" +
                "  \n" +
                "		UPDATE mfgcodemst    \n" +
                "		SET customerSystemID = v_serialNumber    \n" +
                "		WHERE id = pcustomerID;    \n" +
                "	END IF;  \n" +
                "     END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-01-2021  *********************************** */

                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (672,'1.00','V1','Manufacturer Report page changes-Champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 672:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(              \n" +
                "	IN partID INT ,                  \n" +
                "	IN cpID INT                   \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	# COFC Report Header details          \n" +
                "	SELECT                       \n" +
                "    cp.id,          \n" +
                "    cp.packingSlipNumber AS PackingSlip,                    \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                    \n" +
                "    cp.soNumber AS SalesOrderNumber,                    \n" +
                "    cp.poNumber AS PONumber,                   \n" +
                "	 cp.soDate AS SODate,                      \n" +
                "    cp.sorevision AS SORevision,                  \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                    \n" +
                "    'BAS' AS DepartmentName,                    \n" +
                "    'Paul Khunt' AS ManagerName                    \n" +
                "FROM                    \n" +
                "    customer_packingslip cp                \n" +
                "        LEFT JOIN                    \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                    \n" +
                "        AND mfg.isDeleted = 0                    \n" +
                "WHERE                    \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID            \n" +
                "LIMIT 1;                    \n" +
                "  \n" +
                "  # COFC Report Table details                  \n" +
                "	SELECT                 \n" +
                "    cpd.id AS cpDetID,              \n" +
                "	cpd.custPOLineID AS POLine,                    \n" +
                "	cpd.lineID AS PSLine,                  \n" +
                "    CASE WHEN (c.partType = 3) THEN sa.shippedqty ELSE cpd.shipQty END AS ShippedQty,                    \n" +
                "    cpd.poQty AS OrderQty,                    \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN              \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)              \n" +
                "		WHEN (c.iscustom = 1) THEN              \n" +
                "		c.custAssyPN              \n" +
                "		WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN              \n" +
                "		c.mfgPN              \n" +
                "		ELSE              \n" +
                "		''              \n" +
                "	END) AS PartNumber,                  \n" +
                "    IFNULL(c.rev, '') AS Revision,                    \n" +
                "    sa.woNumber AS WorkOrderNumber,                    \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,        \n" +
                "    cpd.assyDescription AS Descripton,                    \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,      \n" +
                "    c.partType,                  \n" +
                "    (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1) AS DateCode 		            \n" +
                "FROM  		    	              \n" +
                "    customer_packingslip_det cpd                    \n" +
                "		INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0             \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0     \n" +
                "WHERE                    \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID             \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;                 \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (673,'1.00','V1','Resolved manager name issue in packing slip report - Vaibhav '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 673:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(           \n" +
                "IN pSearch VARCHAR(100),                  \n" +
                "IN pId INT,                  \n" +
                "IN pMfgType VARCHAR(50),                  \n" +
                "IN pRoHSStatusID VARCHAR(100),                  \n" +
                "IN pMfgCodeId INT,                  \n" +
                "IN pCategoryID INT,                  \n" +
                "IN pIsContainCPN TINYINT,       \n" +
                "IN prefSupplierMfgpnComponentID INT ,          \n" +
                "IN ppackagingID INT,          \n" +
                "IN pstrictCustomPart TINYINT,          \n" +
                "IN psupplierID INT,      \n" +
                "IN pofftheself TINYINT          \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "   /*<===this logic is added to compare invert rohs category*/          \n" +
                "   /* this logic used in purchase order when supplier is strictly custom part */        \n" +
                "   IF(pstrictCustomPart=1)THEN       \n" +
                "   DROP TEMPORARY TABLE IF EXISTS tempcomponent;      \n" +
                "   IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN      \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent      \n" +
                "	SELECT smm.refMfgCodeMstID       \n" +
                "	FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID      \n" +
                "   UNION      \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0      \n" +
                "   UNION      \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4) AND c.isdeleted=0  \n" +
                "	UNION  \n" +
                "	SELECT psupplierID AS refMfgCodeMstID;    \n" +
                "   ELSE      \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "   SELECT psupplierID AS refMfgCodeMstID  \n" +
                "   UNION      \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0      \n" +
                "   UNION      \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0      \n" +
                "   UNION      \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;      \n" +
                "   END IF;        \n" +
                "          SELECT * FROM                              \n" +
                " (                              \n" +
                "	 SELECT `com`.`id`,                              \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                              \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                              \n" +
                "		`com`.`mfgPN` orgMfgPN,                  \n" +
                "		`com`.`packaginggroupID`,      \n" +
                "		com.packagingID,                  \n" +
                "        `com`.`PIDCode`,                \n" +
                "		`com`.`isGoodPart`,                  \n" +
                "		`com`.`RoHSStatusID`,                  \n" +
                "		`com`.`rohsgroupID`,                  \n" +
                "        `com`.`mfgcodeID`,                  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                  \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,           \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                         \n" +
                "        `com`.`category`,          \n" +
                "        com.imageURL,          \n" +
                "        com.documentPath,          \n" +
                "        `com`.`mfgPNDescription`,                \n" +
                "        `com`.`minOperatingTemp`,                  \n" +
                "        `com`.`maxOperatingTemp`,                  \n" +
                "        `com`.`value`,                  \n" +
                "        `com`.`partPackage`,                  \n" +
                "        `com`.`powerRating`,                  \n" +
                "        `com`.`functionalCategoryID`,                  \n" +
                "        `com`.`mountingTypeID`,                  \n" +
                "        `com`.`connecterTypeID`,                  \n" +
                "        `com`.`noOfPosition`,                  \n" +
                "        `com`.`noOfRows`,                  \n" +
                "        `com`.`pitch`,                  \n" +
                "        `com`.`pitchMating`,                  \n" +
                "        `com`.`length`,                  \n" +
                "        `com`.`width`,                  \n" +
                "        `com`.`height`,                  \n" +
                "        `com`.`voltage`,                  \n" +
                "        `com`.`weight`,                  \n" +
                "        `com`.`feature`,                  \n" +
                "        `com`.`color`,                  \n" +
                "        `com`.`partStatus`,                  \n" +
                "        `com`.`uom`,                  \n" +
                "        `com`.`uomClassID`,                  \n" +
                "        `com`.`unit`,                  \n" +
                "        `com`.`restrictUsePermanently`,                                    \n" +
                "		`com`.`restrictUSEwithpermission`,                                  \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                  \n" +
                "		`com`.`restrictPackagingUseWithpermission`,        \n" +
                "		u.abbreviation AS uomName,        \n" +
                "		u.unitName AS  unitName,           \n" +
                "                r.rohsIcon,            \n" +
                "		r.name AS `rohsName`,                  \n" +
                "               `com`.`partPackageID`,                  \n" +
                "                `com`.`bomLock`,                  \n" +
                "		`com`.`businessRisk`,                  \n" +
                "		`com`.`costCategoryID`,                  \n" +
                "		`com`.`deviceMarking`,                  \n" +
                "		`com`.`driverToolRequired`,                  \n" +
                "		`com`.`eau`,                  \n" +
                "		`com`.`epicorType`,                        \n" +
                "		`com`.`functionalTestingRequired`,                        \n" +
                "		`com`.`heightText`,                        \n" +
                "		`com`.`isCPN`,                        \n" +
                "		`com`.`isCustom`,                        \n" +
                "		`com`.`isLeadFree`,                        \n" +
                "		`com`.`leadTime`,                        \n" +
                "		`com`.`matingPartRquired`,                        \n" +
                "		`com`.`maxPriceLimit`,                        \n" +
                "		`com`.`maxQtyonHand`,                        \n" +
                "		`com`.`minimum`,                        \n" +
                "		`com`.`mult`,                        \n" +
                "		`com`.`packageQty`,                        \n" +
                "		`com`.`partType`,                        \n" +
                "		`com`.`pcbPerArray`,                        \n" +
                "		`com`.`pickupPadRequired`,                        \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                        \n" +
                "		`com`.`plannedValuePerBuild`,                        \n" +
                "		`com`.`programingRequired`,                        \n" +
                "		`com`.`rfqOnly`,                        \n" +
                "		`com`.`saftyStock`,                        \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                        \n" +
                "		`com`.`scrapValuePerBuild`,                        \n" +
                "		`com`.`selfLifeDays`,                        \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                        \n" +
                "		`com`.`temperatureCoefficient`,                        \n" +
                "		`com`.`temperatureCoefficientUnit`,                        \n" +
                "		`com`.`temperatureCoefficientValue`,                        \n" +
                "		`com`.`trackSerialNumber`,                      \n" +
                "		`com`.`refSupplierMfgpnComponentID`,              \n" +
                "                com.refMfgPNMfgCodeId,            \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,              \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,              \n" +
                "                fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                        \n" +
                "	FROM `component` AS `com`                \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))        \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID         \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0         \n" +
                "	WHERE `com`.isdeleted=0            \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)       \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`)       \n" +
                "        AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)            \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)           \n" +
                "        AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)      \n" +
                "        AND com.mfgcodeid IN (SELECT refMfgCodeMstID FROM tempcomponent)      \n" +
                "        AND (com.iscustom=1 OR com.parttype=4 OR com.isCPN=1)          \n" +
                "    ) AS a                                          \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                          \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                          \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                          \n" +
                "	)                        \n" +
                "	ORDER BY mfgPN;            \n" +
                "  \n" +
                "ELSEIF(pofftheself=1 AND pstrictCustomPart=0) THEN            \n" +
                "/* this logic used in purchase order         \n" +
                "  packing slip        \n" +
                "  UMID management        \n" +
                "  Component Master        \n" +
                "  Reserve Stock        \n" +
                "  Component Assy DFM        \n" +
                "  Reports        \n" +
                "  Price Break Update        \n" +
                "  Customer Part        \n" +
                "  Good-Bad Mapping Part        \n" +
                "  Supplier Quote        \n" +
                "  Supplier RMA        \n" +
                "   */                           \n" +
                " SELECT * FROM                              \n" +
                " (                              \n" +
                "	 SELECT `com`.`id`,                              \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                              \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                              \n" +
                "		`com`.`mfgPN` orgMfgPN,                  \n" +
                "		`com`.`packaginggroupID`,      \n" +
                "		com.packagingID,                  \n" +
                "        `com`.`PIDCode`,                \n" +
                "		`com`.`isGoodPart`,                  \n" +
                "		`com`.`RoHSStatusID`,                  \n" +
                "		`com`.`rohsgroupID`,                  \n" +
                "        `com`.`mfgcodeID`,                  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                  \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,           \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                         \n" +
                "        `com`.`category`,          \n" +
                "        com.imageURL,          \n" +
                "        com.documentPath,          \n" +
                "        `com`.`mfgPNDescription`,                \n" +
                "        `com`.`minOperatingTemp`,                  \n" +
                "        `com`.`maxOperatingTemp`,                  \n" +
                "        `com`.`value`,                  \n" +
                "        `com`.`partPackage`,                  \n" +
                "        `com`.`powerRating`,                  \n" +
                "        `com`.`functionalCategoryID`,                  \n" +
                "        `com`.`mountingTypeID`,                  \n" +
                "        `com`.`connecterTypeID`,                  \n" +
                "        `com`.`noOfPosition`,                  \n" +
                "        `com`.`noOfRows`,                  \n" +
                "        `com`.`pitch`,                  \n" +
                "        `com`.`pitchMating`,                  \n" +
                "        `com`.`length`,                  \n" +
                "        `com`.`width`,                  \n" +
                "        `com`.`height`,                  \n" +
                "        `com`.`voltage`,                  \n" +
                "        `com`.`weight`,                  \n" +
                "        `com`.`feature`,                  \n" +
                "        `com`.`color`,                  \n" +
                "        `com`.`partStatus`,                  \n" +
                "        `com`.`uom`,                  \n" +
                "        `com`.`uomClassID`,                  \n" +
                "        `com`.`unit`,                  \n" +
                "        `com`.`restrictUsePermanently`,                                    \n" +
                "		`com`.`restrictUSEwithpermission`,                                  \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                  \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                                  \n" +
                "              u.abbreviation AS uomName,        \n" +
                "		u.unitName AS  unitName,                   \n" +
                "        r.rohsIcon,            \n" +
                "		r.name AS `rohsName`,                  \n" +
                "        `com`.`partPackageID`,                  \n" +
                "        `com`.`bomLock`,                  \n" +
                "		`com`.`businessRisk`,                  \n" +
                "		`com`.`costCategoryID`,                  \n" +
                "		`com`.`deviceMarking`,                  \n" +
                "		`com`.`driverToolRequired`,                  \n" +
                "		`com`.`eau`,                  \n" +
                "		`com`.`epicorType`,                        \n" +
                "		`com`.`functionalTestingRequired`,                        \n" +
                "		`com`.`heightText`,                        \n" +
                "		`com`.`isCPN`,                        \n" +
                "		`com`.`isCustom`,                        \n" +
                "		`com`.`isLeadFree`,                        \n" +
                "		`com`.`leadTime`,                        \n" +
                "		`com`.`matingPartRquired`,                        \n" +
                "		`com`.`maxPriceLimit`,                        \n" +
                "		`com`.`maxQtyonHand`,                        \n" +
                "		`com`.`minimum`,                        \n" +
                "		`com`.`mult`,                        \n" +
                "		`com`.`packageQty`,                        \n" +
                "		`com`.`partType`,                        \n" +
                "		`com`.`pcbPerArray`,                        \n" +
                "		`com`.`pickupPadRequired`,                        \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                        \n" +
                "		`com`.`plannedValuePerBuild`,                        \n" +
                "		`com`.`programingRequired`,                        \n" +
                "		`com`.`rfqOnly`,                        \n" +
                "		`com`.`saftyStock`,                        \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                        \n" +
                "		`com`.`scrapValuePerBuild`,                        \n" +
                "		`com`.`selfLifeDays`,                        \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                        \n" +
                "		`com`.`temperatureCoefficient`,                        \n" +
                "		`com`.`temperatureCoefficientUnit`,                        \n" +
                "		`com`.`temperatureCoefficientValue`,                        \n" +
                "		`com`.`trackSerialNumber`,                      \n" +
                "		`com`.`refSupplierMfgpnComponentID`,              \n" +
                "                 com.refMfgPNMfgCodeId,            \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,              \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,              \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                        \n" +
                "	FROM `component` AS `com`                \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))        \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID         \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0         \n" +
                "	 WHERE (`com`.isdeleted=0)            \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)       \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)            \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)           \n" +
                "         AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)       \n" +
                "         AND com.iscustom=0 AND com.category=2 AND com.iscpn=FALSE      \n" +
                "    ) AS a                                          \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                          \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                                          \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                          \n" +
                "	)                        \n" +
                "	ORDER BY mfgPN;                        \n" +
                "  \n" +
                "  ELSE           \n" +
                "  /* this logic used in purchase order         \n" +
                "  packing slip        \n" +
                "  UMID management        \n" +
                "  Component Master        \n" +
                "  Reserve Stock        \n" +
                "  Component Assy DFM        \n" +
                "  Reports        \n" +
                "  Price Break Update        \n" +
                "  Customer Part        \n" +
                "  Good-Bad Mapping Part        \n" +
                "  Supplier Quote        \n" +
                "  Supplier RMA        \n" +
                "   */                     \n" +
                "   SELECT * FROM                        \n" +
                " (                        \n" +
                "	 SELECT `com`.`id`,                        \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                  \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                  \n" +
                "		`com`.`mfgPN` orgMfgPN,                  \n" +
                "		`com`.`packaginggroupID`,      \n" +
                "		com.packagingID,                                  \n" +
                "		`com`.`PIDCode`,                                  \n" +
                "		`com`.`isGoodPart`,                  \n" +
                "		`com`.`RoHSStatusID`,                  \n" +
                "		`com`.`rohsgroupID`,                  \n" +
                "		`com`.`mfgcodeID`,                  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,          \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                       \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                  \n" +
                "		`com`.`tolerance`,            \n" +
                "		`com`.`category`,          \n" +
                "                 com.imageURL,          \n" +
                "                 com.documentPath,          \n" +
                "                `com`.`mfgPNDescription`,                   \n" +
                "		`com`.`minOperatingTemp`,                  \n" +
                "		`com`.`maxOperatingTemp`,                  \n" +
                "		`com`.`value`,                  \n" +
                "		`com`.`partPackage`,                  \n" +
                "		`com`.`powerRating`,                  \n" +
                "		`com`.`functionalCategoryID`,                  \n" +
                "		`com`.`mountingTypeID`,                  \n" +
                "		`com`.`connecterTypeID`,                  \n" +
                "		`com`.`noOfPosition`,                  \n" +
                "		`com`.`noOfRows`,                  \n" +
                "		`com`.`pitch`,                  \n" +
                "		`com`.`pitchMating`,                  \n" +
                "		`com`.`length`,                  \n" +
                "		`com`.`width`,                  \n" +
                "		`com`.`height`,                  \n" +
                "		`com`.`voltage`,                  \n" +
                "		`com`.`weight`,                  \n" +
                "		`com`.`feature`,                  \n" +
                "		`com`.`color`,                                              \n" +
                "		`com`.`partStatus`,                                              \n" +
                "		`com`.`uom`,                                            \n" +
                "                `com`.`uomClassID`,                              \n" +
                "		`com`.`unit`,                                    \n" +
                "		`com`.`restrictUsePermanently`,                                    \n" +
                "		`com`.`restrictUSEwithpermission`,                                  \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                  \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                               \n" +
                "		`com`.`packaging`,                                \n" +
                "		u.abbreviation AS uomName,        \n" +
                "		u.unitName AS  unitName,                                        \n" +
                "		r.rohsIcon,            \n" +
                "		r.name AS `rohsName`,            \n" +
                "               `com`.`partPackageID`,                        \n" +
                "               `com`.`bomLock`,                        \n" +
                "		`com`.`businessRisk`,                        \n" +
                "		`com`.`costCategoryID`,                        \n" +
                "		`com`.`deviceMarking`,                        \n" +
                "		`com`.`driverToolRequired`,                        \n" +
                "		`com`.`eau`,                        \n" +
                "		`com`.`epicorType`,                        \n" +
                "		`com`.`functionalTestingRequired`,                        \n" +
                "		`com`.`heightText`,                        \n" +
                "		`com`.`isCPN`,                        \n" +
                "		`com`.`isCustom`,                        \n" +
                "		`com`.`isLeadFree`,                        \n" +
                "		`com`.`leadTime`,                        \n" +
                "		`com`.`matingPartRquired`,                        \n" +
                "		`com`.`maxPriceLimit`,                        \n" +
                "		`com`.`maxQtyonHand`,                        \n" +
                "		`com`.`minimum`,                        \n" +
                "		`com`.`mult`,                        \n" +
                "		`com`.`packageQty`,                        \n" +
                "		`com`.`partType`,                        \n" +
                "		`com`.`pcbPerArray`,                        \n" +
                "		`com`.`pickupPadRequired`,                        \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,            \n" +
                "		`com`.`plannedValuePerBuild`,            \n" +
                "		`com`.`programingRequired`,            \n" +
                "		`com`.`rfqOnly`,            \n" +
                "		`com`.`saftyStock`,            \n" +
                "		`com`.`scrapRatePercentagePerBuild`,            \n" +
                "		`com`.`scrapValuePerBuild`,            \n" +
                "		`com`.`selfLifeDays`,            \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,            \n" +
                "		`com`.`temperatureCoefficient`,            \n" +
                "		`com`.`temperatureCoefficientUnit`,            \n" +
                "		`com`.`temperatureCoefficientValue`,            \n" +
                "		`com`.`trackSerialNumber`,            \n" +
                "		`com`.`refSupplierMfgpnComponentID`,            \n" +
                "                 com.refMfgPNMfgCodeId,            \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,            \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,            \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`            \n" +
                "	FROM `component` AS `com`            \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))           \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID           \n" +
                "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0            \n" +
                "        WHERE `com`.`isdeleted` =0       \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)      \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)           \n" +
                "	AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)           \n" +
                "	AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)           \n" +
                "        AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)            \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)    \n" +
                "    ) AS a            \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR            \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')            \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                  \n" +
                ")            \n" +
                "ORDER BY mfgPN;                  \n" +
                "END IF;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_purchase_order_mst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_purchase_order_mst`(        \n" +
                "	IN tableName VARCHAR(255),        \n" +
                "	IN IDs LONGTEXT,        \n" +
                "	IN deletedBy INT,        \n" +
                "	IN entityID VARCHAR(255),        \n" +
                "	IN refrenceIDs LONGTEXT,        \n" +
                "	IN countList INT,        \n" +
                "    IN pRoleID INT        \n" +
                "    )  \n" +
                "BEGIN           \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temppurchaseordermst as    \n" +
                "			SELECT 0 cnt,\"\" as msg ');                                                                       \n" +
                "	  	   PREPARE stmt FROM @SQL;                                                                        \n" +
                "		   EXECUTE stmt;                                                                  \n" +
                "	      IF (countList=FALSE) THEN                                                                       \n" +
                "				IF (SELECT SUM(t.cnt) FROM temppurchaseordermst t)=0 THEN    \n" +
                "  \n" +
                "				SET @SQlStament1 = CONCAT('SELECT GROUP_CONCAT(id) into @purchaseOrderDetIds FROM purchase_order_det where  refPurchaseOrderID IN(',IDs,')');      \n" +
                "					PREPARE stmt1 FROM @SQlStament1;      \n" +
                "					EXECUTE stmt1;      \n" +
                "	 			SET @SQlStament2 = CONCAT('update purchase_order_line_requirement_det set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',                                                                \n" +
                "										  deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refpurchaseOrderDetID IN(@purchaseOrderDetIds)');		                                                                        \n" +
                "					PREPARE stmt2 FROM @SQlStament2;                                                                        \n" +
                "					EXECUTE stmt2; 	   	  \n" +
                "				SET @SQlStament3 = CONCAT('update purchase_order_line_release_det set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',                                                                \n" +
                "										  deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refpurchaseOrderDetID IN(@purchaseOrderDetIds)');		                                                                        \n" +
                "					PREPARE stmt3 FROM @SQlStament3;                                                                        \n" +
                "					EXECUTE stmt3;  \n" +
                "				SET @SQlStament4 = CONCAT('update purchase_order_line_othercharges set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',                                                                \n" +
                "										  deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refpurchaseOrderDetID IN(@purchaseOrderDetIds)');		                                                                        \n" +
                "					PREPARE stmt4 FROM @SQlStament4;                                                                        \n" +
                "					EXECUTE stmt4;  \n" +
                "				SET @SQlStament5 = CONCAT('update purchase_order_det set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',                                                                \n" +
                "										  deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refPurchaseOrderID IN(',IDs,')');		                                                                        \n" +
                "					PREPARE stmt5 FROM @SQlStament5;                                                                        \n" +
                "					EXECUTE stmt5;   \n" +
                "				SET @SQlStament6 = CONCAT('update purchase_order_mst set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',                                                                \n" +
                "										  deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,')');		                                                                        \n" +
                "					PREPARE stmt6 FROM @SQlStament6;                                                                        \n" +
                "					EXECUTE stmt6;   \n" +
                "					SET @SQlStament7= CONCAT('update genericfiles set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',                                                                \n" +
                "										  deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where entityid=-20 and refTransID IN(',IDs,')');		                                                                        \n" +
                "					PREPARE stmt7 FROM @SQlStament7;                                                                        \n" +
                "					EXECUTE stmt7;    \n" +
                "  \n" +
                "								SELECT * FROM temppurchaseordermst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                                                        \n" +
                "							ELSE                                                                        \n" +
                "						 SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temppurchaseordermst t;                                                                          \n" +
                "  \n" +
                "					END IF;              \n" +
                "				ELSE              \n" +
                "                  SELECT t1.cnt,t2.display_page_name AS msg              \n" +
                "                                   FROM temppurchaseordermst t1              \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name              \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"              \n" +
                "                                    ORDER BY t2.display_page_name;                            \n" +
                "				END IF;                                                                         \n" +
                "DROP TABLE temppurchaseordermst;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(                            \n" +
                "	IN ppageIndex INT,                            \n" +
                "	IN precordPerPage INT,                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN psupplierID VARCHAR(16000),      \n" +
                "	IN pshippingMethodId VARCHAR(16000),      \n" +
                "	IN psearchposotype VARCHAR(10),      \n" +
                "	IN psearchposotext VARCHAR(1000),      \n" +
                "	IN ppartIds VARCHAR(1000)                 \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "	DECLARE pOffset INT;                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE vTimeZone VARCHAR(50);                           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;           \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"                        \n" +
                "		SELECT pom.id,      \n" +
                "       pom.poNumber,      \n" +
                "       pom.supplierID,      \n" +
                "       pom.poDate,      \n" +
                "       pom.soNumber,      \n" +
                "       pom.soDate,      \n" +
                "       pom.termsID,      \n" +
                "       pom.shippingMethodID,      \n" +
                "       CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,      \n" +
                "       pom.status,      \n" +
                "       pom.poComment,      \n" +
                "       pom.shippingComment,      \n" +
                "       pom.serialNumber,      \n" +
                "       pom.poRevision,      \n" +
                "       pom.carrierAccountNumber,      \n" +
                "       CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,      \n" +
                "       pom.shippingInsurance,      \n" +
                "       pom.supplierAddress,      \n" +
                "       pom.shippingAddress,      \n" +
                "       pom.intermediateAddress,      \n" +
                "       CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,      \n" +
                "       pom.isBlanketPO,      \n" +
                "       m.mfgcode,     \n" +
                "       pom.poWorkingStatus,    \n" +
                "       case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,     \n" +
                "       (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-20 AND gc.refTransID=pom.id AND gc.isdeleted=0) poDocumentCount,      \n" +
                "       (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID      \n" +
                "        WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,      \n" +
                "        (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID      \n" +
                "        WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,      \n" +
                "       fun_getFOBById(pom.freeOnBoardId) freeOnBoard,      \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,      \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,       \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,      \n" +
                "       (select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,      \n" +
                "       fun_getUserNameByID(pom.updatedBy)updatedby,       \n" +
                "       fun_getUserNameByID(pom.createdBy) createdby,      \n" +
                "       fun_getRoleByID(pom.createByRoleId) createdbyRole,       \n" +
                "       fun_getRoleByID(pom.updateByRoleId) updatedbyRole,      \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,        \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt            \n" +
                "FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID      \n" +
                "LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0       \n" +
                "WHERE pom.isdeleted=0        \n" +
                "	\");       \n" +
                "  \n" +
                "  IF(psupplierID IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');      \n" +
                "  END IF;      \n" +
                "  IF(pshippingMethodId IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');      \n" +
                "  END IF;      \n" +
                "  IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN      \n" +
                "	IF(psearchposotype='C')THEN      \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');      \n" +
                "         ELSE      \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');      \n" +
                "         END IF;      \n" +
                "  END IF;     \n" +
                "  \n" +
                "  IF(ppartIds IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and       \n" +
                "   (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                  \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "		SET pWhereClause = '1=1' ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                               \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query1 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-01-2021  *********************************** */

                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (674,'1.00','V1',' Alter procedure Sproc_GetComponentMFGAliasSearchPurchaseOrder-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 674:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(                            \n" +
                "	IN ppageIndex INT,                            \n" +
                "	IN precordPerPage INT,                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN psupplierID VARCHAR(16000),      \n" +
                "	IN pshippingMethodId VARCHAR(16000),      \n" +
                "	IN psearchposotype VARCHAR(10),      \n" +
                "	IN psearchposotext VARCHAR(1000),      \n" +
                "	IN ppartIds VARCHAR(1000)                       \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "	DECLARE pOffset INT;                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE vTimeZone VARCHAR(50);                           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;           \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"                        \n" +
                "		SELECT pod.id,      \n" +
                "       pod.refPurchaseOrderID,      \n" +
                "       CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,      \n" +
                "       pod.mfgPartID,      \n" +
                "       pod.packagingID,      \n" +
                "       pod.supplierPartID,      \n" +
                "       pod.partDescription,      \n" +
                "       pod.pcbPerArray,      \n" +
                "       pod.rohsStatusID,      \n" +
                "       pod.internalRef,      \n" +
                "       pod.qty,      \n" +
                "       pod.price,      \n" +
                "       pom.shippingMethodID,      \n" +
                "       (pod.qty * pod.price) extPrice,      \n" +
                "       pod.totalRelease,      \n" +
                "       pod.lineComment,      \n" +
                "       pod.lineID,      \n" +
                "       pod.supplierQuoteNumber,      \n" +
                "       pom.poDate,      \n" +
                "       pom.poRevision,      \n" +
                "       pom.soNumber,      \n" +
                "       pom.soDate,      \n" +
                "       c.mfgPN,      \n" +
                "       c.pidCode,      \n" +
                "       c.unit,      \n" +
                "       c.iscustom,    \n" +
                "       c.partType,      \n" +
                "       rr.name AS rohsName,      \n" +
                "       rr.rohsIcon,      \n" +
                "       cp.name AS packagingName,      \n" +
                "       mc.mfgCode,      \n" +
                "       mc.mfgName,      \n" +
                "       mc.id As mfgcodeID,      \n" +
                "       pom.poNumber,      \n" +
                "       pom.status,    \n" +
                "       pom.poWorkingStatus,      \n" +
                "       fun_getUnitNameByID(c.uom) uomName,      \n" +
                "       sc.mfgPN supplierPN,      \n" +
                "       pom.supplierID,    \n" +
                "        fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,      \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,       \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,       \n" +
                "        pom.carrierAccountNumber,      \n" +
                "        pom.poComment,      \n" +
                "       pom.shippingComment,      \n" +
                "        m.mfgcode as supplierMfgName,      \n" +
                "       fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,      \n" +
                "       (SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,      \n" +
                "       (ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,      \n" +
                "       CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,      \n" +
                "       fun_getUserNameByID(pod.updatedBy)updatedby,       \n" +
                "       fun_getUserNameByID(pod.createdBy) createdby,      \n" +
                "       fun_getRoleByID(pod.createByRoleId) createdbyRole,       \n" +
                "       fun_getRoleByID(pod.updateByRoleId) updatedbyRole,      \n" +
                "       (select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,      \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,        \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt            \n" +
                "FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID      \n" +
                "JOIN mfgcodemst m ON m.id=pom.supplierID      \n" +
                "JOIN component c ON c.id=pod.mfgPartID      \n" +
                "left join component sc on sc.id=pod.supplierPartID      \n" +
                "JOIN mfgcodemst mc ON mc.id=c.mfgcodeID      \n" +
                "LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID      \n" +
                "LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID      \n" +
                "WHERE pod.isdeleted=0      \n" +
                "	\");                            \n" +
                "  IF(psupplierID IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');      \n" +
                "  END IF;      \n" +
                "  IF(pshippingMethodId IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');      \n" +
                "  END IF;      \n" +
                "  IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN      \n" +
                "	IF(psearchposotype='C')THEN      \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');      \n" +
                "         ELSE      \n" +
                "         SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');      \n" +
                "         END IF;      \n" +
                "  END IF;      \n" +
                "  IF(ppartIds IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');      \n" +
                "  END IF;      \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                  \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "		SET pWhereClause = '1=1' ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                               \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query1 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (675,'1.00','V1',' Alter procedure Sproc_RetrievePurchaseOrderPerLineDeatils-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 675:
            allDbChangesArray.push(
                /* **************************** New Script ->  11-01-2021 *********************************** */
                "UPDATE page_detail  \n" +
                "SET isActive=0  \n" +
                "WHERE pageName=\"Input Fields\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET isActive=0  \n" +
                "WHERE pageName=\"Manage Input Fields\";  \n" +
                /* **************************** Add Script Version ->  11-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (676,'1.00','V1','Hide unwanted page from UI - Vaibhav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 676:
            allDbChangesArray.push(
                /* **************************** New Script ->  12-01-2021 *********************************** */

                "DROP PROCEDURE IF EXISTS Sproc_RetrieveWhereUsedMFGCodeList;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWhereUsedMFGCodeList`(                          \n" +
                "	IN ppageIndex INT,                          \n" +
                "	IN precordPerPage INT,                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN pMFGCode VARCHAR(500),        \n" +
                "    IN pIsManufacture TINYINT      \n" +
                ")  \n" +
                "BEGIN         \n" +
                "	DECLARE pOffset INT(11);                           \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "    DECLARE SQLMFGStatement varchar(100);      \n" +
                "    DECLARE SQLComponentStatement varchar(100);          \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                     \n" +
                "    DECLARE vTimeZone VARCHAR(50);                  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;       \n" +
                "  \n" +
                "    SET @SQLMFGWhereClause =\"  \";         \n" +
                "    SET @SQLComponentWhereClause =\"  \";   \n" +
                "  \n" +
                "	if pIsManufacture = 1 then              \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_mfgCode = '\", pMFGCode, \"' or rla.mfgCode = '\", pMFGCode, \"') \");      \n" +
                "        SET @SQLComponentWhereClause=  concat(\" and mfgType = 'MFG' \");     \n" +
                "	else     \n" +
                "		SET @SQLComponentWhereClause=  concat(\" and mfgType = 'DIST' \");     \n" +
                "		SET @SQLMFGWhereClause=  concat(\" and (rla.org_distributor = '\", pMFGCode, \"' or rla.distributor = '\", pMFGCode, \"') \");        \n" +
                "	end if;      \n" +
                "  \n" +
                "    set @tempQuery =  concat(\"select (CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPN ELSE rla.distPN END) as MFGPN      \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgCode ELSE rla.distributor END) as MFGCode      \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgCode ELSE rla.org_distributor END) as orgMFGCode              \n" +
                "							,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.org_mfgPN ELSE rla.org_distPN END) as orgMFGPN      \n" +
                "							,rla.rfqLineItemsID as lineItemID      \n" +
                "							,rl.lineID as lineID      \n" +
                "                            ,assyDet.PIDCode assyCode           \n" +
                "							,assyDet.mfgPN assyMfgPN        \n" +
                "                            ,assyDet.id partId     \n" +
                "                            ,(CASE WHEN (\", pIsManufacture ,\" = 1 ) THEN  rla.mfgPNID ELSE rla.distMfgPNID END) as mfgPNID    \n" +
                "							,assyDet.isCustom      \n" +
                "							,assyDet.restrictUsePermanently      \n" +
                "							,assyDet.restrictUSEwithpermission      \n" +
                "							,assyDet.restrictPackagingUsePermanently      \n" +
                "							,assyDet.restrictPackagingUseWithpermission       \n" +
                "                            ,fun_getUserNameByID(rla.createdBy) createdbyvalue       \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(rla.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                  \n" +
                "                            ,1 Type      \n" +
                "						from rfq_lineitems_alternatepart as rla      \n" +
                "						left join rfq_lineitems as rl on rla.rfqLineItemsID = rl.id and rl.isDeleted = 0       \n" +
                "						left join component assyDet on rla.partId = assyDet.id and assyDet.isDeleted = 0      \n" +
                "						where rla.isDeleted = 0  \", @SQLMFGWhereClause  \n" +
                "                        ,\" union all      \n" +
                "                        select c.mfgPN as MFGPN, mfg.mfgCode as MFGCode      \n" +
                "							,c.mfrNameText as orgMFGCode      \n" +
                "							,c.mfrNameText as orgMFGPN      \n" +
                "							,null as lineItemID, null as lineID      \n" +
                "                            ,c.PIDCode assyCode           \n" +
                "							,c.mfgPN assyMfgPN          \n" +
                "                            ,c.id partId      \n" +
                "                            ,c.id mfgPNID    \n" +
                "                            ,c.isCustom      \n" +
                "							,c.restrictUsePermanently      \n" +
                "							,c.restrictUSEwithpermission      \n" +
                "							,c.restrictPackagingUsePermanently      \n" +
                "							,c.restrictPackagingUseWithpermission      \n" +
                "                            ,fun_getUserNameByID(c.createdBy) createdbyvalue       \n" +
                "                            ,fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt                                  \n" +
                "							,2 Type      \n" +
                "						from component as c      \n" +
                "							left join mfgcodemst mfg on c.mfgcodeID = mfg.id and mfg.isDeleted = 0 where c.isDeleted = 0  \n" +
                "                            and (c.mfrNameText = '\", pMFGCode, \"' or mfg.mfgCode = '\", pMFGCode, \"')\", @SQLComponentWhereClause);      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "		SET pOrderBy = \"ORDER BY MFGCode ASC\";                        \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	END IF;	                          \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "		SET pWhereClause = '1=1' ;                          \n" +
                "	END IF;	                          \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "	ELSE	                          \n" +
                "		SET rowNumWhere = '';                          \n" +
                "	END IF;	                       \n" +
                "  \n" +
                "	/* to get total count of rows */                     \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query2;                    \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                    \n" +
                "		where \", pWhereClause , \" \" , pOrderBy, rowNumWhere);           \n" +
                "	PREPARE query1 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query1;                    \n" +
                "	DEALLOCATE PREPARE query1;       \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_BI_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_BI_mfgcodemst` BEFORE INSERT ON `mfgcodemst` FOR EACH ROW BEGIN     \n" +
                "  \n" +
                "		IF (((SELECT  COUNT(1)                      \n" +
                "			FROM `mfgCodeAlias` AS mca                  \n" +
                "			WHERE mfgcodeId IN (select id from mfgcodemst where mfgType = new.mfgType) and    \n" +
                "            mca.`isDeleted` = 0    \n" +
                "			AND (mca.`alias` = NEW.mfgName OR mca.`alias` = NEW.mfgCode)))>0) THEN                             \n" +
                "  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry2';        \n" +
                "		END IF;         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  12-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (677,'1.00','V1',' Update SP Sproc_RetrieveWhereUsedMFGCodeList and Trigger Trg_BI_mfgcodemst - SHUBHAM'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 677:
            allDbChangesArray.push(
                /* **************************** New Script ->  13-01-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseOrderReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(        \n" +
                "	IN pid INT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "  \n" +
                "    # Purchase Order Master details        \n" +
                "    SELECT  po.id,         \n" +
                "		po.status,        \n" +
                "		po.poNumber,        \n" +
                "        po.poRevision,        \n" +
                "        po.poDate,        \n" +
                "        po.supplierAddress,        \n" +
                "		po.shippingAddress,        \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                          \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,        \n" +
                "        po.shippingInsurance,        \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,        \n" +
                "        po.poComment,        \n" +
                "        po.serialNumber,       \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,        \n" +
                "		us.emailAddress,        \n" +
                "		emp.phExtension        \n" +
                "	FROM purchase_order_mst po        \n" +
                "         INNER JOIN              \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID              \n" +
                "        AND gcs.isDeleted = 0              \n" +
                "        INNER JOIN              \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID              \n" +
                "        AND gcp.isDeleted = 0        \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy                \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID          \n" +
                "        where po.isDeleted = 0 and po.id = pid;        \n" +
                "  \n" +
                "	# Purchase Order Line details        \n" +
                "    SELECT  pod.lineID,        \n" +
                "		pod.id AS pODetID,        \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,        \n" +
                "        fun_getMFGPNByID(pod.mfgPartID) mfgPN,        \n" +
                "        IFNULL(c.rev, '') AS revision,        \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,        \n" +
                "		pod.supplierQuoteNumber,        \n" +
                "        pod.internalRef,        \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,        \n" +
                "        pod.qty,        \n" +
                "        fun_getUOMAbbreviationByID(c.uom) uom,        \n" +
                "        pod.price,        \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,          \n" +
                "        pod.partDescription AS description,        \n" +
                "        pod.lineComment        \n" +
                "	 FROM purchase_order_det pod        \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)         \n" +
                "	 WHERE pod.isDeleted = 0 and pod.refPurchaseOrderID = pid         \n" +
                "	 ORDER BY pod.lineID ASC;	        \n" +
                "  \n" +
                "	# Get purchase order Total Price table details    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                   \n" +
                "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud       \n" +
                "				INNER JOIN component cm ON cm.id = pud.mfgPartID        \n" +
                "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 and cm.partType <> 4) totalLinePrice ,            \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,                \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd         \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID        \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 and c.partType = 4) totalPOMiscPrice                \n" +
                "		FROM purchase_order_det pd           \n" +
                "		WHERE pd.refPurchaseOrderID= pid        \n" +
                "		AND pd.isdeleted=0;                 \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,        \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,        \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,   \n" +
                "				IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0),0) totalPOPrice FROM tempTotalPrice LIMIT 1;                 \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  13-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (678,'1.00','V1',' Bug #29604 - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 678:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPackingslipReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                        \n" +
                "	IN cpid INT                        \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "  \n" +
                "	SELECT                     \n" +
                "    cp.id,                \n" +
                "    cp.status,       \n" +
                "    cp.packingSlipType,      \n" +
                "    cp.packingSlipNumber AS PackingSlip,                    \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                    \n" +
                "    cp.poDate AS PODate,                    \n" +
                "    cp.soNumber AS SalesOrderNumber,                    \n" +
                "    cp.poNumber AS PONumber,                    \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                    \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                    \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                \n" +
                "    cp.soDate AS SODate,                    \n" +
                "    cp.sorevision AS SORevision,                    \n" +
                "	cp.billingAddress AS SoldToAddress,              \n" +
                "	cp.shippingAddress AS ShippingAddress,     \n" +
                "	cp.intermediateAddress AS IntermediateAddress,             \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),                    \n" +
                "            '-') AS SalesOrderPersonName,              \n" +
                "	CONCAT(us.firstName,' ',us.lastName) AS  preparedBy, us.emailAddress, emp.phExtension                \n" +
                "FROM                    \n" +
                "    customer_packingslip cp           \n" +
                "        LEFT JOIN                    \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                    \n" +
                "        AND sm.isDeleted = 0                    \n" +
                "        LEFT JOIN                    \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                    \n" +
                "        AND gc.isDeleted = 0                    \n" +
                "        AND gc.categoryType = 'Shipping Methods'                    \n" +
                "        LEFT JOIN                    \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                    \n" +
                "        AND gcc.isDeleted = 0                    \n" +
                "        AND gcc.categoryType = 'Payment Terms'                  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                        \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                 \n" +
                "WHERE                    \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                    \n" +
                "LIMIT 1;                    \n" +
                "  \n" +
                "SELECT                     \n" +
                "	cpd.lineID AS PSLine,              \n" +
                "    cpd.id AS cpDetID,              \n" +
                "    cpd.refCustPackingSlipID AS cpID,               \n" +
                "    cpd.partId,              \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                \n" +
                "    IFNULL(cpd.remainingQty,0) AS RemainingQty,                \n" +
                "    cpd.custPOLineID AS POLine,        \n" +
                "    cpd.shippingNotes AS ShippingComment,        \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN              \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)              \n" +
                "		WHEN (c.iscustom = 1) THEN              \n" +
                "		c.custAssyPN              \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN              \n" +
                "		c.mfgPN              \n" +
                "		ELSE              \n" +
                "		''              \n" +
                "	END) AS PartNumber,                 \n" +
                "    FUN_GETUOMABBREVIATIONBYID(c.uom) AS UOM,                    \n" +
                "    IFNULL(c.rev, '') AS Revision,               \n" +
                "    c.partType,              \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',                 \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                    \n" +
                "            IFNULL(CONCAT(', ',                    \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                    \n" +
                "                    ''),                    \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                    \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                    \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                    \n" +
                "FROM                    \n" +
                "    customer_packingslip_det cpd              \n" +
                "        LEFT JOIN                    \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                    \n" +
                "        AND cp.isDeleted = 0                    \n" +
                "        LEFT JOIN                    \n" +
                "    component c ON c.id = cpd.partid                    \n" +
                "        LEFT JOIN                    \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                    \n" +
                "        AND sd.isDeleted = 0                   \n" +
                "        LEFT JOIN                   \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID      	              \n" +
                "        LEFT JOIN                    \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                    \n" +
                "        AND ra.partID = cpd.partId                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id               \n" +
                "WHERE            \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                      \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(            \n" +
                "	IN cpID INT            \n" +
                ")  \n" +
                "BEGIN	            \n" +
                "  \n" +
                "    # Customer Invoice Master table details             \n" +
                "    SELECT  cp.id,            \n" +
                "		cp.invoiceNumber,            \n" +
                "        cp.invoiceDate,            \n" +
                "		cp.packingSlipNumber,                  \n" +
                "		cp.packingSlipDate,                  \n" +
                "		cp.poDate,                  \n" +
                "		cp.poNumber,  \n" +
                "		mg.customerSystemID,  \n" +
                "		mg.accountRef,            \n" +
                "        cp.status,            \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '\r') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,          \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,            \n" +
                "        cp.billingAddress,            \n" +
                "        cp.shippingAddress,  \n" +
                "        cp.intermediateAddress,            \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,            \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                              \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,             \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,            \n" +
                "        cp.systemID AS legalnumber,            \n" +
                "        CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,            \n" +
                "		us.emailAddress,            \n" +
                "		emp.phExtension            \n" +
                "		FROM customer_packingslip cp   \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID            \n" +
                "                LEFT JOIN                  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId             \n" +
                "        AND gcs.isDeleted = 0                 \n" +
                "           LEFT JOIN                  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID             \n" +
                "        AND gcp.isDeleted = 0               \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                    \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID             \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;             \n" +
                "  \n" +
                "	# Customer Invoice line level details             \n" +
                "	SELECT              \n" +
                "		cpd.id,                  \n" +
                "		cpd.partId,        \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,         \n" +
                "		cpd.lineID,            \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN               \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)            \n" +
                "		  WHEN (c.iscustom=1) THEN             \n" +
                "			c.custAssyPN            \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN             \n" +
                "			c.mfgPN             \n" +
                "        ELSE                                                     \n" +
                "			  ''                                    \n" +
                "			END) AS mfgPN ,            \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                 \n" +
                "			'Other Charges'                  \n" +
                "		ELSE                                                     \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                    \n" +
                "			END) AS  mfgName,            \n" +
                "		IFNULL(c.rev, '') AS revision,            \n" +
                "		fun_getUOMAbbreviationByID(c.uom) uom,            \n" +
                "		cpd.shippedQty AS qty,             \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,            \n" +
                "		(IFNULL(cpd.shippedQty,0)*IFNULL(cpd.unitPrice,0)) extPrice,  \n" +
                "		CONCAT(IFNULL(cpd.assyDescription, ''),'<br/>',                 \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                    \n" +
                "            IFNULL(CONCAT(', ',                    \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                    \n" +
                "                    ''),    \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                    \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS DESCRIPTION   \n" +
                "  \n" +
                "	FROM                  \n" +
                "		customer_packingslip_det cpd                  \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                   \n" +
                "	WHERE                  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;             \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS             \n" +
                "    SELECT                          \n" +
                "			(SELECT SUM(cp.shippedQty * cp.unitPrice) FROM customer_packingslip_det cp             \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId             \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                  \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                      \n" +
                "			(SELECT SUM(cpp.shippedQty * cpp.unitPrice) FROM customer_packingslip_det cpp             \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId             \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,            \n" +
                "			(SELECT SUM(csp.shippedQty * csp.unitPrice) FROM customer_packingslip_det csp             \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice            \n" +
                "		FROM customer_packingslip_det cpd                 \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID              \n" +
                "		AND cpd.isdeleted=0;                  \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,              \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,              \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,                 \n" +
                "                IFNULL((totalLinePrice+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice FROM tempTotalPrice LIMIT 1;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-01-2021  *********************************** */
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (679,'1.00','V1',' Alter procedure Sproc_GetCustomerPackingslipReportDetails-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 679:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-01-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(                                \n" +
                "	IN ppageIndex INT,                                \n" +
                "	IN precordPerPage INT,                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN pIsMFG TINYINT,                                \n" +
                "    IN pMfgCodeIDs LONGTEXT,                                \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,                                \n" +
                "    IN pPackagingIDs LONGTEXT,                                \n" +
                "    IN pPartStatusIDs LONGTEXT,                                \n" +
                "    IN pMountingTypeIDs LONGTEXT,                                \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,                                \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,                                 \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,                                \n" +
                "    IN pAttributesSearchHeader LONGTEXT,                                \n" +
                "    IN pAttributesSearch LONGTEXT,                                \n" +
                "    IN pPackagingAlias TEXT,                                \n" +
                "    IN pAlternatePart TEXT,                                \n" +
                "    IN pRoHSAlternatePart TEXT,                                \n" +
                "    IN pPartUsedInAssembly TEXT,                                \n" +
                "    IN pMultiplePartNumbers LONGTEXT,                                \n" +
                "    IN pStockQuantity TEXT,                                \n" +
                "    IN pPartTypeIDs LONGTEXT,                                \n" +
                "    IN pCertificateStandardsIds LONGTEXT,                                \n" +
                "    IN pStandardsClassIds LONGTEXT,                                \n" +
                "    IN pAssemblyIds LONGTEXT,                                \n" +
                "    IN pAssemblyTypeIds LONGTEXT,                                \n" +
                "    IN pRohsIds LONGTEXT,                                \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,                                \n" +
                "    IN pOperationalAttributeIds LONGTEXT,                                \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,                                \n" +
                "    IN pComponentOrdering TEXT,                                \n" +
                "    IN pComponentUsageCriteria TEXT,                                \n" +
                "    IN pIsRefreshMasterFilters TINYINT,                                \n" +
                "    IN pFromDate DATE,                                \n" +
                "    IN pToDate DATE,                                \n" +
                "    IN pIsReversal TINYINT,                                \n" +
                "    IN pIsBOMActivityStarted TINYINT,                                \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,                                \n" +
                "    IN pIsSearchFromHeader TINYINT,                                \n" +
                "    IN pIsExportControl TINYINT,                                \n" +
                "    IN pObsoleteDate DATE,                      \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,              \n" +
                "    IN pFromCreatedOnDate DATE,              \n" +
                "    IN pToCreatedOnDate DATE,              \n" +
                "    IN pIsIdenticalMfrPN TINYINT,              \n" +
                "    IN pIsProductionPNEmpty TINYINT,            \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT            \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "	DECLARE pOffset INT;                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                            \n" +
                "    DECLARE attributeSearchString LONGTEXT;                                            \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;                                            \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                            \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                                            \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);                                            \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);                                            \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                               \n" +
                "    DECLARE vTimeZone VARCHAR(50);                               \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                      \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                      \n" +
                "  \n" +
                "  SET @SQLStatement1=\"                                                    \n" +
                "	SELECT co.*, mf.mfgCode, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,                                 \n" +
                "		(case when isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,                                                    \n" +
                "		gc.name AS partStatusValue,                                \n" +
                "        gc.displayOrder parStatusDisplayOrder,                                \n" +
                "		mf.mfgType \";                                    \n" +
                "	IF pIsMFG = TRUE THEN                                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                    \n" +
                "			null AliasMFGPN,                                    \n" +
                "			null AliasMFGCode,                                \n" +
                "			null AliasMFGCodeID,                                \n" +
                "			null AliascompID,                                \n" +
                "			null AliasMFGName,                                \n" +
                "            null AliasMFGDisplayOrder\");                                 \n" +
                "    ELSE                                \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                    \n" +
                "		(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,                                    \n" +
                "         mfc.mfgCode AliasMFGCode,                                \n" +
                "        mfc.id AliasMFGCodeID,                                \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,                                \n" +
                "        mfc.mfgName as AliasMFGName,                                \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");                                 \n" +
                "	END IF;                                    \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                    \n" +
                "		ro.name AS `rohsComplientConvertedValue`,                                  \n" +
                "        ro.displayOrder rohsDisplayOrder,                                \n" +
                "		ro.rohsIcon AS `rohsIcon`,                                    \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'                                    \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'                                    \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'                                    \n" +
                "					ELSE '' END) AS `isGoodPartValue`,                                    \n" +
                "		case when co.isCustom = 1 then                                \n" +
                "				'Yes'                                \n" +
                "			else 'No' end as isCustomValue,                                \n" +
                "		case when co.isLeadFree = 1 then                                \n" +
                "				'Yes'                                \n" +
                "			else 'No' end as isLeadFreeValue,                                \n" +
                "		case when co.isCPN = 1 then                                \n" +
                "				'Yes'                                \n" +
                "			else 'No' end as isCPNValue,                                \n" +
                "		pt.partTypeName functionalCategoryName,                                    \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,                                \n" +
                "		mt.name mountingTypeName,                                    \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,                                \n" +
                "		pc.categoryName,                                    \n" +
                "		rct.name connecterTypeName,                                    \n" +
                "		u.unitName,                                    \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,                                    \n" +
                "		pck.name packagingName,                                    \n" +
                "        pck.displayOrder packagingDisplayOrder,                                \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'                                    \n" +
                "					ELSE 'No' END) AS `reversalPart`,                                    \n" +
                "		fun_getExportControlDetailFromPartID(co.id) as isExportControl,                                    \n" +
                "		fun_getUserNameByID(co.updatedBy) updatedbyValue,                                    \n" +
                "		fun_getUserNameByID(co.createdBy) createdbyValue,                                    \n" +
                "		fun_getRoleByID(co.createByRoleId) createdbyRoleValue,                                    \n" +
                "		fun_getRoleByID(co.updateByRoleId) updatedbyRoleValue,                                    \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,                              \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(co.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,                              \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(co.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue,                              \n" +
                "		/*fun_ConvertUTCDatetimeToDataKeyTimeZone(co.createdAt) createdAtValue,                                    \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(co.UpdatedAt) updatedAtValue,                                    \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(co.updatedAtApi) updatedAtApiValue,*/                              \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'                                    \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,                                    \n" +
                "        pct.name packageCaseTypeValue,                                    \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,                                    \n" +
                "		case when co.category = 3 then                                    \n" +
                "			fun_getSamplePicturesUploadCount(co.id)                                    \n" +
                "		end uploadedSamplePicturesCount,                                    \n" +
                "		case when co.category = 3 then                                    \n" +
                "			fun_getRFQAssemblyListByPartID(co.id)                                    \n" +
                "		end assemblyCount,                                    \n" +
                "		case when co.category = 3 then                                    \n" +
                "			fun_getBOMLineCountByPartID(co.id)                                    \n" +
                "		end bomLineCount,                                    \n" +
                "		case when co.category = 3 then                                    \n" +
                "			fun_getRFQStatusByPartID(co.id)                                    \n" +
                "		end quoteProgress,                              \n" +
                "		CASE when co.category = 3 then                                    \n" +
                "		 	fun_getRFQIDByPartID(co.id)                                   \n" +
                "		END rfqAssyID,                                     \n" +
                "		/*case when co.category = 3 then                                    \n" +
                "			(select id from rfq_assemblies WHERE partId = co.id AND isDeleted = 0 LIMIT 1)                                    \n" +
                "		end rfqAssyID,*/                              \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,                                    \n" +
                "		case when co.isActivityStart=true then                                    \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,fun_DatetimetoUTCDateTime())                                    \n" +
                "			else null end activityStartTime,                                    \n" +
                "		rat.name assemblyTypeName,          \n" +
                "		CASE when co.frequency = 1 then                                    \n" +
                "		 	'Every' when    co.frequency = 2 then             \n" +
                "		 	'First' when  co.frequency = 3 then           \n" +
                "		 	'Last' else ''                                   \n" +
                "		END frequencyName,                \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,        \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue\");                                    \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");                                    \n" +
                "	ELSE              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");                                    \n" +
                "	END IF;                                    \n" +
                "    IF pComponentOrdering = 'USAGE' THEN                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");              \n" +
                "	ELSE              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");              \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)                                    \n" +
                "													  from eco_request ec                                    \n" +
                "													 where ec.isdeleted = 0                                    \n" +
                "													   and ec.finalstatus = 'P'                                    \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");              \n" +
                "	ELSE              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");              \n" +
                "	END IF;                               \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"                                    \n" +
                "	FROM component co                                    \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType                                    \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id                                        \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus                                        \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id                                        \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                                        \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                                        \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID                \n" +
                " 		JOIN uoms u ON u.id = co.uom                                    \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID                                    \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID                                    \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy                                    \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType                                    \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID \");                                \n" +
                "    IF pIsMFG = FALSE THEN                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                              \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId \");                              \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                              \n" +
                "    WHERE co.isdeleted = 0 \");                              \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN                              \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');                              \n" +
                "    ELSE                              \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');                              \n" +
                "    END IF;                              \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		IF pComponentOrdering = 'MFG' THEN                              \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                              \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);                              \n" +
                "            END IF;                              \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN                              \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                              \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);                              \n" +
                "			END IF;                              \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN                              \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);                              \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN                              \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);                              \n" +
                "		END IF;                              \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;                              \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                    \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;                                \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN                                \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN                                \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND packagingID in (', pPackagingIDs, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partStatus in (', pPartStatusIDs, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeText in (', pExternalMountingTypeValues, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN                                                    \n" +
                "		IF pIsMFG = TRUE THEN                                                    \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                  \n" +
                "																OR exists (select 1 from component_otherpn cp                                                  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                  \n" +
                "																)');                                                    \n" +
                "		ELSE                                                    \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                    \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID                                  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))                                                  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp                                                  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                  \n" +
                "                                                                )');                                                    \n" +
                "        END IF;                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partType in (', pPartTypeIDs, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND                                                    \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                    \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');                                                    \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                    \n" +
                "    END IF;                                                    \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                        \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                        \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');                                        \n" +
                "    END IF;                                        \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');                                        \n" +
                "    END IF;                                        \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');                                                    \n" +
                "    END IF;                      \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');                                                    \n" +
                "    END IF;                      \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');                                          \n" +
                "    END IF;                      \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');                                          \n" +
                "    END IF;                      \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');                      \n" +
                "    END IF;                      \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");                                            \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');                                          \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                      \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');                \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');              \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd                                                   \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false                                                   \n" +
                "														 and cd.deletedat is null                                                   \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');                                                  \n" +
                "    END IF;            \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd            \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false            \n" +
                "														 and cd.deletedat is null            \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');            \n" +
                "    END IF;            \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca                                                  \n" +
                "														  where ca.isdeleted = false                                                  \n" +
                "															and ca.deletedat is null                                                  \n" +
                "															and ca.refComponentID = co.id                                                  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');                                                  \n" +
                "    END IF;                                                    \n" +
                "  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                              \n" +
                "																		AND isdeleted = 0                                             \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                              \n" +
                "																		AND isdeleted = 0                                            \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfPosition like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfRows like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR length like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR width like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR height like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription like ''%', pAttributesSearchHeader, '%'' ');                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                                                  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN like ''%', pAttributesSearchHeader, '%'' ');                                                  \n" +
                "          IF pIsMFG = FALSE THEN                                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc                                                   \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID                                   \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                   \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )                                                  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))                                                  \n" +
                "																		');                                                    \n" +
                "          END IF;     \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');                                                  \n" +
                "    END IF;                                            \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                                            \n" +
                "		SET attributeSearchString = pAttributesSearch;                                            \n" +
                "       do_this:                                            \n" +
                "	  LOOP                                            \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);      \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);      \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);      \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);      \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                              \n" +
                "																		AND isdeleted = 0      \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');      \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                             \n" +
                "																		AND  isdeleted = 0      \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp      \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');      \n" +
                "          /*IF pIsMFG = FALSE THEN      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');      \n" +
                "          END IF;  */      \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN      \n" +
                "		  LEAVE do_this;      \n" +
                "		END IF;      \n" +
                "	  END LOOP do_this;      \n" +
                "    END IF;      \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN      \n" +
                "		IF (pPackagingAlias = '1') THEN      \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');      \n" +
                "		ELSE      \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN      \n" +
                "			IF (pAlternatePart = '1') THEN      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');      \n" +
                "			ELSE                                                    \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');      \n" +
                "			END IF;      \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');      \n" +
                "		END IF;      \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN      \n" +
                "			IF (pRoHSAlternatePart = '1') THEN      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');      \n" +
                "			ELSE      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');      \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN      \n" +
                "			SET vPartUsedInAssemblyExists = \" \";      \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";      \n" +
                "			IF (pPartUsedInAssembly = '1') THEN      \n" +
                "				SET vPartUsedInAssemblyExists = \" \";      \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";      \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN      \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";      \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";      \n" +
                "            END IF;      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2      \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))      \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))      \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');      \n" +
                "  \n" +
                "		END IF;              \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);              \n" +
                "	END IF;              \n" +
                "   IF pIsExportControl = 1 THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');              \n" +
                "   END IF;              \n" +
                "  \n" +
                "  /* to get total count of rows */              \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;              \n" +
                "  \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "  SET @SQLStatement2 = CONCAT(\"select c.*,              \n" +
                "								( select GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN csd.classID IS NULL THEN ''              \n" +
                "													ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))              \n" +
                "														FROM standard_class WHERE classID = csd.classID) END              \n" +
                "														ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@') certificatelist              \n" +
                "										  from component_standard_details csd              \n" +
                "										  join certificate_standards cs on cs.certificateStandardID = csd.certificateStandardID and cs.isdeleted=0              \n" +
                "										 where csd.componentID = c.id              \n" +
                "										 and csd.isdeleted = 0) certificatelist              \n" +
                "									from ( \", @SQLStatement1,\" ) c              \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);              \n" +
                "    /*main query create temp table*/              \n" +
                "	PREPARE query1 FROM @SQLStatement2;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN              \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,              \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,              \n" +
                "											packagingID,packagingName, packagingDisplayOrder,              \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,              \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,              \n" +
                "											partType,categoryName,              \n" +
                "											functionalCategoryText,              \n" +
                "											mountingTypeText,              \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,              \n" +
                "											  rohsText,              \n" +
                "                                            AliasMFGCodeID,              \n" +
                "                                            AliasMFGCode,              \n" +
                "                                            AliasMFGName,              \n" +
                "                                            AliasMFGDisplayOrder              \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"              \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,              \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,              \n" +
                "											packagingID,packagingName, packagingDisplayOrder,              \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,              \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,              \n" +
                "											partType,categoryName,              \n" +
                "											functionalCategoryText,              \n" +
                "											mountingTypeText,              \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,              \n" +
                "											  rohsText,                                \n" +
                "                                            AliasMFGCodeID,                                \n" +
                "                                            AliasMFGCode,                                \n" +
                "                                            AliasMFGName,                                \n" +
                "                                            AliasMFGDisplayOrder \");                                    \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                    \n" +
                "		EXECUTE query3;                                    \n" +
                "		DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )                                    \n" +
                "									select * from                                    \n" +
                "										(select case when stdc.classID is not null then                                    \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)                                    \n" +
                "													else cs.certificateStandardID end certificateStandardID,                                    \n" +
                "												case when stdc.classID is not null then                                    \n" +
                "													concat(cs.fullName,' ',stdc.classname)                                    \n" +
                "													else cs.fullName end fullName,                                    \n" +
                "												cs.displayOrder                                    \n" +
                "										  from certificate_standards cs                                    \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID                                    \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID                                    \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)                                    \n" +
                "										) a group by certificateStandardID, fullName, displayOrder                                    \n" +
                "										order by displayOrder,fullName\");                                    \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                    \n" +
                "		EXECUTE query3;                                    \n" +
                "		DEALLOCATE PREPARE query3;  */                                  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName                                    \n" +
                "					  from component_acceptable_shipping_countries casc                                    \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid                                    \n" +
                "					 where casc.isdeleted = false                                    \n" +
                "					   and casc.deletedat is null                                    \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                    \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )                                    \n" +
                "                                    order by cm.countryName\");                                    \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                    \n" +
                "		EXECUTE query3;                                    \n" +
                "		DEALLOCATE PREPARE query3;  */                                  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName                                    \n" +
                "					  from component_dynamic_attribute_mapping_part cdam                                    \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID                                    \n" +
                "					 where cdam.isdeleted = false                                    \n" +
                "					   and cdam.deletedat is null                                    \n" +
                "					   and cda.isdeleted = false                                    \n" +
                "					   and cda.deletedat is null                                    \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                    \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )                                    \n" +
                "                                     order by cda.attributeName\");                                    \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                    \n" +
                "		EXECUTE query3;                                    \n" +
                "		DEALLOCATE PREPARE query3;  */                                  \n" +
                "    END IF;                                    \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN                                    \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/                                    \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,                                    \n" +
                "											null groupNameText,                                    \n" +
                "											functionalCategoryID, mountingTypeID,                                    \n" +
                "											count(1) recCount                                    \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,                                    \n" +
                "										' group by functionalCategoryName,mountingTypeName,                \n" +
                "													functionalCategoryID, mountingTypeID                                    \n" +
                "											order by groupName, groupNameText, recCount desc');                                    \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "        END IF;         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (680,'1.00','V1',' Update SP of Sproc_GetComponentList  - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 680:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2021  *********************************** */
                "ALTER TABLE `component`  \n" +
                "CHANGE COLUMN `mfgPNDescription` `mfgPNDescription` VARCHAR(2000) NOT NULL DEFAULT '-' ;  \n" +
                "ALTER TABLE `customer_packingslip_det`  \n" +
                "CHANGE COLUMN `assyDescription` `assyDescription` VARCHAR(2000) NOT NULL ;  \n" +
                "ALTER TABLE `salesorderdet`  \n" +
                "CHANGE COLUMN `partDescription` `partDescription` VARCHAR(2000) NULL DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version ->  18-01-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (681,'1.00','V1',' Increase Description Length SaleOrder/Component/Customer Packaging Slip - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 681:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_CreateAssemblyRevision;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                          \n" +
                "	IN pFromPartID INT,              \n" +
                "    IN pNewEpicorType varchar(50),              \n" +
                "    IN pNewAssemblyType INT,              \n" +
                "    IN pNewMfgcodeID INT,              \n" +
                "    IN pNewCustAssyPN varchar(500),              \n" +
                "    IN pNewPartRev varchar(50),              \n" +
                "    IN pNewMfgPN varchar(100),              \n" +
                "    IN pNewAssyCode varchar(50),              \n" +
                "    IN pNewNickName varchar(50),              \n" +
                "    IN pNewPIDCode varchar(109),       \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,                          \n" +
                "    IN pUserRoleId Int,                          \n" +
                "    IN pIsAttribute tinyint,                          \n" +
                "    IN pIsSettings tinyint,                          \n" +
                "    IN pIsAdditionalAttibute tinyint,                          \n" +
                "    IN pIsPackagingDetail tinyint,                          \n" +
                "    IN pIsStandards tinyint,                          \n" +
                "    IN pIsRequiredFunctionalType tinyint,                          \n" +
                "    IN pIsRequiredMountingType tinyint,                          \n" +
                "    IN pIsPackagingAliasPart tinyint,                          \n" +
                "    IN pIsOtherPartName tinyint,                          \n" +
                "    IN pIsAlternatePart tinyint,                          \n" +
                "    IN pIsRoHSReplacementPart tinyint,                          \n" +
                "    IN pIsDriveTool tinyint,                          \n" +
                "    IN pIsProcessMaterial tinyint,                          \n" +
                "    IN pIsRequiredMattingParts tinyint,                          \n" +
                "    IN pIsPickupPad tinyint,                          \n" +
                "    IN pIsFunctionalTesingTool tinyint,                          \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                          \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt  \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "DECLARE vValidationPassed tinyint;              \n" +
                "DECLARE vFromPartCategory tinyint;              \n" +
                "DECLARE vFromMfgType varchar(5);          \n" +
                "DECLARE vCount INT;                        \n" +
                "DECLARE vToPartID INT;                        \n" +
                "DECLARE vUserRoleId INT;                        \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                          \n" +
                "  BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed              \n" +
                "  \n" +
                "    select co.category, m.mfgType          \n" +
                "      into vFromPartCategory, vFromMfgType          \n" +
                "	  from component co          \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID          \n" +
                "	 where co.id = pFromPartID;          \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/          \n" +
                "		set pIsAttribute = 1;          \n" +
                "        set pIsAdditionalAttibute = 1;          \n" +
                "    end if;          \n" +
                "  \n" +
                "	set vCount = 0;              \n" +
                "    if (vFromPartCategory = 3) then # check category              \n" +
                "	   select count(1) into vCount                        \n" +
                "		 from component co                        \n" +
                "		where co.mfgcodeID = pNewMfgcodeID              \n" +
                "          and co.category = 3              \n" +
                "		  and co.custAssyPN = pNewCustAssyPN            \n" +
                "		  and co.rev = pNewPartRev                        \n" +
                "          and co.isDeleted = 0                        \n" +
                "		  and co.deletedAt is null;                       \n" +
                "		if vCount > 0 then              \n" +
                "			set vValidationPassed = 0;              \n" +
                "            select 'DUPLICATE_REV' as message;              \n" +
                "        end if;              \n" +
                "  \n" +
                "         set vCount = 0;              \n" +
                "		 select count(1) into vCount              \n" +
                "			 from component co              \n" +
                "			where co.nickName != pNewNickName              \n" +
                "              and co.category = 3              \n" +
                "              and co.custAssyPN = pNewCustAssyPN              \n" +
                "              and co.mfgcodeID = pNewMfgcodeID              \n" +
                "			  and co.isDeleted = 0              \n" +
                "			  and co.deletedAt is null;               \n" +
                "		  if vCount > 0 then              \n" +
                "			set vValidationPassed = 0;              \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,              \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName              \n" +
                "				 from component co              \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID              \n" +
                "				where co.nickName != pNewNickName              \n" +
                "				  and co.category = 3              \n" +
                "				  and co.custAssyPN = pNewCustAssyPN              \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID              \n" +
                "				  and co.isDeleted = 0              \n" +
                "				  and co.deletedAt is null              \n" +
                "				  limit 1;              \n" +
                "		  end if;              \n" +
                "  \n" +
                "		set vCount = 0;              \n" +
                "		 select count(1) into vCount              \n" +
                "			 from component co              \n" +
                "			where co.nickName = pNewNickName              \n" +
                "              and co.category = 3              \n" +
                "              and co.custAssyPN != pNewCustAssyPN              \n" +
                "              and co.mfgcodeID = pNewMfgcodeID              \n" +
                "			  and co.isDeleted = 0            \n" +
                "			  and co.deletedAt is null;              \n" +
                "		 if vCount > 0 then              \n" +
                "			set vValidationPassed = 0;              \n" +
                "				select 'DUPLICATE_NICKNAME' as message,              \n" +
                "                        custAssyPN              \n" +
                "				 from component co              \n" +
                "				where co.nickName = pNewNickName              \n" +
                "				  and co.category = 3              \n" +
                "				  and co.custAssyPN != pNewCustAssyPN              \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID              \n" +
                "				  and co.isDeleted = 0            \n" +
                "				  and co.deletedAt is null              \n" +
                "				  limit 1;              \n" +
                "		  end if;              \n" +
                "	end if;              \n" +
                "  \n" +
                "    set vCount = 0;              \n" +
                "		select count(1) into vCount                        \n" +
                "		 from component co                        \n" +
                "		where co.mfgcodeID = pNewMfgcodeID              \n" +
                "		  and co.mfgPN = pNewMfgPN                        \n" +
                "          and co.isDeleted = 0            \n" +
                "		  and co.deletedAt is null;                       \n" +
                "	 if vCount > 0 then              \n" +
                "		set vValidationPassed = 0;              \n" +
                "        select 'DUPLICATE_MFGPN' as message;              \n" +
                "     end if;              \n" +
                "  \n" +
                "    set vCount = 0;              \n" +
                "		select count(1) into vCount                        \n" +
                "		 from component co                        \n" +
                "		where co.PIDCode = pNewPIDCode                        \n" +
                "		  and co.isDeleted = 0            \n" +
                "		  and co.deletedAt is null;                   \n" +
                "    if vCount > 0 then              \n" +
                "		set vValidationPassed = 0;              \n" +
                "        select 'DUPLICATE_PID' as message;              \n" +
                "     end if;              \n" +
                "  \n" +
                "		if vValidationPassed = 1 then  #1 passed, 0 failed                   \n" +
                "				insert into component(                        \n" +
                "						isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                        \n" +
                "						custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                        \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                        \n" +
                "						partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                        \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                        \n" +
                "                        countryOfOrigin, htsCode, createdBy, createByRoleId,                        \n" +
                "                        updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,          \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute)              \n" +
                "                select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                        \n" +
                "						pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                        \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                        \n" +
                "						partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                        \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                        \n" +
                "                        countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                        \n" +
                "                        pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,          \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "                        (CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END)                          \n" +
                "				 from component                        \n" +
                "				where id = pFromPartID;                        \n" +
                "  \n" +
                "				set vToPartID = LAST_INSERT_ID();                        \n" +
                "  \n" +
                "                insert into component_images                        \n" +
                "						(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                        \n" +
                "                select imageURL, vToPartID/*refComponentID*/,pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                        \n" +
                "						pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/,isDeleted                        \n" +
                "				 from component_images                        \n" +
                "				where refComponentID = pFromPartID                        \n" +
                "                  and isDeleted = false;                        \n" +
                "  \n" +
                "                insert into component_datasheets                        \n" +
                "						(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                        \n" +
                "                select datasheetURL, vToPartID/*refComponentID*/,pUserID /*createdBy*/,pUserID/*updatedBy*/,isDeleted,                        \n" +
                "						pUserRoleId/*createByRoleId*/, pUserRoleId/*updateByRoleId*/                        \n" +
                "				 from component_datasheets                        \n" +
                "				where refComponentID = pFromPartID                        \n" +
                "                  and isDeleted = false;                        \n" +
                "  \n" +
                "				IF pIsAttribute  then                            \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                          \n" +
                "					`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                          \n" +
                "					`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                          \n" +
                "					`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                          \n" +
                "					toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                          \n" +
                "					toPart.`mountingTypeID` = fromPart.mountingTypeID,                          \n" +
                "					toPart.`mountingTypeText` = fromPart.mountingTypeText,                          \n" +
                "					toPart.`operatingTemp` = fromPart.operatingTemp,                          \n" +
                "					toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                          \n" +
                "					toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                          \n" +
                "					toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                          \n" +
                "					toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                          \n" +
                "					toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                          \n" +
                "					toPart.`connecterTypeID` = fromPart.connecterTypeID,                          \n" +
                "					toPart.`connectorTypeText` = fromPart.connectorTypeText,                          \n" +
                "					toPart.`noOfPositionText` = fromPart.noOfPositionText,                          \n" +
                "					toPart.`noOfPosition` = fromPart.noOfPosition,                          \n" +
                "					toPart.`noOfRowsText` = fromPart.noOfRowsText,                          \n" +
                "					toPart.`noOfRows` = fromPart.noOfRows,                          \n" +
                "					toPart.`pitch` = fromPart.pitch,                          \n" +
                "					toPart.`pitchMating` = fromPart.pitchMating,                          \n" +
                "					toPart.`sizeDimension` = fromPart.sizeDimension,                          \n" +
                "					toPart.`length` = fromPart.length,                          \n" +
                "					toPart.`width` = fromPart.width,                          \n" +
                "					toPart.`heightText` = fromPart.heightText,                          \n" +
                "					toPart.`height` = fromPart.height,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "				IF pIsSettings then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                          \n" +
                "					`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                          \n" +
                "					`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                          \n" +
                "					`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                          \n" +
                "					toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                          \n" +
                "					toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                          \n" +
                "					toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                          \n" +
                "					toPart.`selfLifeDays` = fromPart.selfLifeDays,                          \n" +
                "					toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                          \n" +
                "					toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                          \n" +
                "					toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                          \n" +
                "					toPart.`saftyStock` = fromPart.saftyStock,                          \n" +
                "					toPart.`eau` = fromPart.eau,                          \n" +
                "					toPart.`businessRisk` = fromPart.businessRisk,                          \n" +
                "					toPart.`driverToolRequired` = fromPart.driverToolRequired,                          \n" +
                "					toPart.`matingPartRquired` = fromPart.matingPartRquired,                          \n" +
                "					toPart.`pickupPadRequired` = fromPart.pickupPadRequired,                          \n" +
                "					toPart.`programingRequired` = fromPart.programingRequired,                          \n" +
                "					toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,                          \n" +
                "					toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,                          \n" +
                "					toPart.`bomLock` = fromPart.bomLock,                          \n" +
                "					toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,                          \n" +
                "					toPart.`updatedBy` = pUserID,                        \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                        \n" +
                "  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`                          \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                          \n" +
                "  \n" +
                "				end if;                          \n" +
                "  \n" +
                "				IF pIsAdditionalAttibute then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                           \n" +
                "					from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`tolerance` = fromPart.tolerance,                          \n" +
                "					toPart.`voltage` = fromPart.voltage,                          \n" +
                "					toPart.`value` = fromPart.value,                          \n" +
                "					toPart.`partPackage` = fromPart.partPackage,                          \n" +
                "					toPart.`powerRating` = fromPart.powerRating,                          \n" +
                "					toPart.`weight` = fromPart.weight,                          \n" +
                "					toPart.`feature` = fromPart.feature,                          \n" +
                "					toPart.`color` = fromPart.color,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "				IF pIsPackagingDetail then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                          \n" +
                "					`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`deviceMarking` = fromPart.deviceMarking,                          \n" +
                "					toPart.`packagingID` = fromPart.packagingID,                          \n" +
                "					toPart.`minimum` = fromPart.minimum,                          \n" +
                "					toPart.`mult` = fromPart.mult,                          \n" +
                "					toPart.`packageQty` = fromPart.packageQty,                          \n" +
                "					toPart.`uomClassID` = fromPart.uomClassID,                          \n" +
                "					toPart.`uom` = fromPart.uom,                          \n" +
                "					toPart.`uomText` = fromPart.uomText,                          \n" +
                "					toPart.`unit` = fromPart.unit,                          \n" +
                "					toPart.`pcbPerArray` = fromPart.pcbPerArray,                          \n" +
                "					toPart.`grossWeight` = fromPart.grossWeight,                          \n" +
                "					toPart.`grossWeightUom` = fromPart.grossWeightUom,                          \n" +
                "					toPart.`packagingWeight` = fromPart.packagingWeight,                          \n" +
                "					toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "				if pIsStandards then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                          \n" +
                "					toPart.`htsCode` = fromPart.htsCode,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "  \n" +
                "					INSERT INTO `component_standard_details`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                          \n" +
                "					select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                          \n" +
                "					from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                          \n" +
                "					and not exists (select 1 from component_standard_details csd                          \n" +
                "					where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                          \n" +
                "				end if;                          \n" +
                "				if pIsRequiredMountingType then                          \n" +
                "					INSERT INTO `component_requiremountingtype`                          \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                           \n" +
                "					and not exists (select 1 from component_requiremountingtype                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                          \n" +
                "  \n" +
                "					set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @requiredMountingTypecount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`mountingTypePartRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsRequiredFunctionalType then                          \n" +
                "					INSERT INTO `component_requirefunctionaltype`                          \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                          \n" +
                "					and not exists (select 1 from component_requirefunctionaltype                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                          \n" +
                "  \n" +
                "  \n" +
                "					set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @requiredFunctionalTypecount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`functionalTypePartRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "  \n" +
                "				end if;                          \n" +
                "				if pIsPackagingAliasPart then                          \n" +
                "  \n" +
                "					set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                          \n" +
                "					set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                          \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                          \n" +
                "						# generate new packaging alias group id                          \n" +
                "						set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                          \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                          \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                          \n" +
                "						# update packaging alias group id as new packaging alias group id in component table                          \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                          \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_packagingalias`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  ToPartID	                          \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                          \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_packagingalias`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  FromPartID		                          \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                          \n" +
                "  \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsOtherPartName then                          \n" +
                "					INSERT INTO `component_otherpn`                          \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                          \n" +
                "					and not exists (select 1 from component_otherpn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                          \n" +
                "				end if;                          \n" +
                "				If pIsAlternatePart then                          \n" +
                "					INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                          \n" +
                "				end if;                          \n" +
                "				if pIsRoHSReplacementPart then                          \n" +
                "  \n" +
                "					set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                          \n" +
                "					set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                          \n" +
                "					if @FromrohsgroupID is not null and @TorohsgroupID is not null then                          \n" +
                "						# generate new packaging alias group id                          \n" +
                "						set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                          \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                          \n" +
                "						  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                              \n" +
                "					   # update packaging alias group id as new packaging alias group id in component table                          \n" +
                "						 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                          \n" +
                "					elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_rohsalternatepn`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  ToPartID	                          \n" +
                "						update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                          \n" +
                "  \n" +
                "					elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_rohsalternatepn`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  FromPartID		                          \n" +
                "						update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                          \n" +
                "  \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsDriveTool then                          \n" +
                "					INSERT INTO `component_drivetools`                          \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                          \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                          \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_drivetools                           \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                          \n" +
                "  \n" +
                "					set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @DriveToolcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`driverToolRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsProcessMaterial then                          \n" +
                "					INSERT INTO `component_processmaterial`                          \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                          \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                          \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_processmaterial                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                           \n" +
                "				end if;                          \n" +
                "				if pIsRequiredMattingParts then                          \n" +
                "					INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                          \n" +
                "  \n" +
                "					set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @mattingpartcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`matingPartRquired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "  \n" +
                "				end if;                          \n" +
                "				if pIsPickupPad then                          \n" +
                "				INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                          \n" +
                "  \n" +
                "					set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @PickupPadcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`pickupPadRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;              \n" +
                "  \n" +
                "				if pIsFunctionalTesingTool then                          \n" +
                "					INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                          \n" +
                "  \n" +
                "					set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @FunctionalTesingToolcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`functionalTestingRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsFinctionalRestingEquipment then                          \n" +
                "					INSERT INTO `component_functionaltestingequipment`                          \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                          \n" +
                "					and not exists (select 1 from component_functionaltestingequipment                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "                if (vFromPartCategory = 3) then              \n" +
                "					if pIsBOM then                        \n" +
                "						call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                  \n" +
                "					end if;                        \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                    \n" +
                "                end if;    \n" +
                "  \n" +
                "                if(pIsComments = 1) THEN  \n" +
                "					INSERT INTO componenet_inspection_requirement_det  \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "                    pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "  \n" +
                "                    INSERT INTO assembly_revision_comments  \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				  \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where   \n" +
                "						partID = pFromPartID;  \n" +
                "                END IF;  \n" +
                "  \n" +
                "				commit;              \n" +
                "			select * from component where id = vToPartID;              \n" +
                "        end if;                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  18-01-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (682,'1.00','V1',' Increase Description Length SaleOrder/Component/Customer Packaging Slip - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 682:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                            \n" +
                "	IN pFromPartID INT,                \n" +
                "    IN pNewEpicorType varchar(50),                \n" +
                "    IN pNewAssemblyType INT,                \n" +
                "    IN pNewMfgcodeID INT,                \n" +
                "    IN pNewCustAssyPN varchar(500),                \n" +
                "    IN pNewPartRev varchar(50),                \n" +
                "    IN pNewMfgPN varchar(100),                \n" +
                "    IN pNewAssyCode varchar(50),                \n" +
                "    IN pNewNickName varchar(50),                \n" +
                "    IN pNewPIDCode varchar(109),         \n" +
                "    IN pIsCPN tinyint,    \n" +
                "    IN pIsCustom tinyInt,    \n" +
                "    IN pUserID Int,                            \n" +
                "    IN pUserRoleId Int,                            \n" +
                "    IN pIsAttribute tinyint,                            \n" +
                "    IN pIsSettings tinyint,                            \n" +
                "    IN pIsAdditionalAttibute tinyint,                            \n" +
                "    IN pIsPackagingDetail tinyint,                            \n" +
                "    IN pIsStandards tinyint,                            \n" +
                "    IN pIsRequiredFunctionalType tinyint,                            \n" +
                "    IN pIsRequiredMountingType tinyint,                            \n" +
                "    IN pIsPackagingAliasPart tinyint,                            \n" +
                "    IN pIsOtherPartName tinyint,                            \n" +
                "    IN pIsAlternatePart tinyint,                            \n" +
                "    IN pIsRoHSReplacementPart tinyint,                            \n" +
                "    IN pIsDriveTool tinyint,                            \n" +
                "    IN pIsProcessMaterial tinyint,                            \n" +
                "    IN pIsRequiredMattingParts tinyint,                            \n" +
                "    IN pIsPickupPad tinyint,                            \n" +
                "    IN pIsFunctionalTesingTool tinyint,                            \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                            \n" +
                "    IN pIsBOM tinyint,    \n" +
                "    IN pIsFluxType tinyInt,    \n" +
                "    IN pIsComments tinyInt    \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "DECLARE vValidationPassed tinyint;                \n" +
                "DECLARE vFromPartCategory tinyint;                \n" +
                "DECLARE vFromMfgType varchar(5);            \n" +
                "DECLARE vCount INT;                          \n" +
                "DECLARE vToPartID INT;                          \n" +
                "DECLARE vUserRoleId INT;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                            \n" +
                "BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                            \n" +
                "  BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                \n" +
                "  \n" +
                "    select co.category, m.mfgType            \n" +
                "      into vFromPartCategory, vFromMfgType            \n" +
                "	  from component co            \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID            \n" +
                "	 where co.id = pFromPartID;            \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/            \n" +
                "		set pIsAttribute = 1;            \n" +
                "        set pIsAdditionalAttibute = 1;            \n" +
                "    end if;            \n" +
                "  \n" +
                "	set vCount = 0;                \n" +
                "    if (vFromPartCategory = 3) then # check category                \n" +
                "	   select count(1) into vCount                          \n" +
                "		 from component co                          \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                \n" +
                "          and co.category = 3                \n" +
                "		  and co.custAssyPN = pNewCustAssyPN              \n" +
                "		  and co.rev = pNewPartRev                          \n" +
                "          and co.isDeleted = 0                          \n" +
                "		  and co.deletedAt is null;                         \n" +
                "		if vCount > 0 then                \n" +
                "			set vValidationPassed = 0;                \n" +
                "            select 'DUPLICATE_REV' as message;                \n" +
                "        end if;                \n" +
                "  \n" +
                "         set vCount = 0;                \n" +
                "		 select count(1) into vCount                \n" +
                "			 from component co                \n" +
                "			where co.nickName != pNewNickName                \n" +
                "              and co.category = 3                \n" +
                "              and co.custAssyPN = pNewCustAssyPN                \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                \n" +
                "			  and co.isDeleted = 0                \n" +
                "			  and co.deletedAt is null;                 \n" +
                "		  if vCount > 0 then                \n" +
                "			set vValidationPassed = 0;                \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,                \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName                \n" +
                "				 from component co                \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID                \n" +
                "				where co.nickName != pNewNickName                \n" +
                "				  and co.category = 3                \n" +
                "				  and co.custAssyPN = pNewCustAssyPN                \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                \n" +
                "				  and co.isDeleted = 0                \n" +
                "				  and co.deletedAt is null                \n" +
                "				  limit 1;                \n" +
                "		  end if;                \n" +
                "  \n" +
                "		set vCount = 0;                \n" +
                "		 select count(1) into vCount                \n" +
                "			 from component co                \n" +
                "			where co.nickName = pNewNickName                \n" +
                "              and co.category = 3                \n" +
                "              and co.custAssyPN != pNewCustAssyPN                \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                \n" +
                "			  and co.isDeleted = 0              \n" +
                "			  and co.deletedAt is null;                \n" +
                "		 if vCount > 0 then                \n" +
                "			set vValidationPassed = 0;                \n" +
                "				select 'DUPLICATE_NICKNAME' as message,                \n" +
                "                        custAssyPN                \n" +
                "				 from component co                \n" +
                "				where co.nickName = pNewNickName                \n" +
                "				  and co.category = 3                \n" +
                "				  and co.custAssyPN != pNewCustAssyPN                \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                \n" +
                "				  and co.isDeleted = 0              \n" +
                "				  and co.deletedAt is null                \n" +
                "				  limit 1;                \n" +
                "		  end if;                \n" +
                "	end if;                \n" +
                "  \n" +
                "    set vCount = 0;                \n" +
                "		select count(1) into vCount                          \n" +
                "		 from component co                          \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                \n" +
                "		  and co.mfgPN = pNewMfgPN                          \n" +
                "          and co.isDeleted = 0              \n" +
                "		  and co.deletedAt is null;                         \n" +
                "	 if vCount > 0 then                \n" +
                "		set vValidationPassed = 0;                \n" +
                "        select 'DUPLICATE_MFGPN' as message;                \n" +
                "     end if;                \n" +
                "  \n" +
                "    set vCount = 0;                \n" +
                "		select count(1) into vCount                          \n" +
                "		 from component co                          \n" +
                "		where co.PIDCode = pNewPIDCode                          \n" +
                "		  and co.isDeleted = 0              \n" +
                "		  and co.deletedAt is null;                     \n" +
                "    if vCount > 0 then                \n" +
                "		set vValidationPassed = 0;                \n" +
                "        select 'DUPLICATE_PID' as message;                \n" +
                "     end if;                \n" +
                "  \n" +
                "		if vValidationPassed = 1 then  #1 passed, 0 failed                     \n" +
                "				insert into component(                          \n" +
                "						isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                          \n" +
                "						custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                          \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                          \n" +
                "						partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                          \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                          \n" +
                "                        countryOfOrigin, htsCode, createdBy, createByRoleId,                          \n" +
                "                        updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,            \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute)                \n" +
                "                select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                          \n" +
                "						pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                          \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                          \n" +
                "						partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                          \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                          \n" +
                "                        countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                          \n" +
                "                        pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,            \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID,    \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),    \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),    \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),    \n" +
                "                        (CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END)                            \n" +
                "				 from component                          \n" +
                "				where id = pFromPartID;                          \n" +
                "  \n" +
                "				set vToPartID = LAST_INSERT_ID();                          \n" +
                "  \n" +
                "                insert into component_images                          \n" +
                "						(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                          \n" +
                "                select imageURL, vToPartID/*refComponentID*/,pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                          \n" +
                "						pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/,isDeleted                          \n" +
                "				 from component_images                          \n" +
                "				where refComponentID = pFromPartID                          \n" +
                "                  and isDeleted = false;                          \n" +
                "  \n" +
                "                insert into component_datasheets                          \n" +
                "						(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                          \n" +
                "                select datasheetURL, vToPartID/*refComponentID*/,pUserID /*createdBy*/,pUserID/*updatedBy*/,isDeleted,                          \n" +
                "						pUserRoleId/*createByRoleId*/, pUserRoleId/*updateByRoleId*/                          \n" +
                "				 from component_datasheets                          \n" +
                "				where refComponentID = pFromPartID                          \n" +
                "                  and isDeleted = false;                          \n" +
                "  \n" +
                "				IF pIsAttribute  then                              \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                            \n" +
                "					`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                            \n" +
                "					`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                            \n" +
                "					`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                            \n" +
                "					toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                            \n" +
                "					toPart.`mountingTypeID` = fromPart.mountingTypeID,                            \n" +
                "					toPart.`mountingTypeText` = fromPart.mountingTypeText,                            \n" +
                "					toPart.`operatingTemp` = fromPart.operatingTemp,                            \n" +
                "					toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                            \n" +
                "					toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                            \n" +
                "					toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                            \n" +
                "					toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                            \n" +
                "					toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                            \n" +
                "					toPart.`connecterTypeID` = fromPart.connecterTypeID,                            \n" +
                "					toPart.`connectorTypeText` = fromPart.connectorTypeText,                            \n" +
                "					toPart.`noOfPositionText` = fromPart.noOfPositionText,                            \n" +
                "					toPart.`noOfPosition` = fromPart.noOfPosition,                            \n" +
                "					toPart.`noOfRowsText` = fromPart.noOfRowsText,                            \n" +
                "					toPart.`noOfRows` = fromPart.noOfRows,                            \n" +
                "					toPart.`pitch` = fromPart.pitch,                            \n" +
                "					toPart.`pitchMating` = fromPart.pitchMating,                            \n" +
                "					toPart.`sizeDimension` = fromPart.sizeDimension,                            \n" +
                "					toPart.`length` = fromPart.length,                            \n" +
                "					toPart.`width` = fromPart.width,                            \n" +
                "					toPart.`heightText` = fromPart.heightText,                            \n" +
                "					toPart.`height` = fromPart.height,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "				IF pIsSettings then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                            \n" +
                "					`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                            \n" +
                "					`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                            \n" +
                "					`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                            \n" +
                "					toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                            \n" +
                "					toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                            \n" +
                "					toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                            \n" +
                "					toPart.`selfLifeDays` = fromPart.selfLifeDays,                            \n" +
                "					toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                            \n" +
                "					toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                            \n" +
                "					toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                            \n" +
                "					toPart.`saftyStock` = fromPart.saftyStock,                            \n" +
                "					toPart.`eau` = fromPart.eau,                            \n" +
                "					toPart.`businessRisk` = fromPart.businessRisk,                            \n" +
                "					toPart.`driverToolRequired` = fromPart.driverToolRequired,                            \n" +
                "					toPart.`matingPartRquired` = fromPart.matingPartRquired,                            \n" +
                "					toPart.`pickupPadRequired` = fromPart.pickupPadRequired,                            \n" +
                "					toPart.`programingRequired` = fromPart.programingRequired,                            \n" +
                "					toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,                            \n" +
                "					toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,                            \n" +
                "					toPart.`bomLock` = fromPart.bomLock,                            \n" +
                "					toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,                            \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`                            \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                            \n" +
                "  \n" +
                "				end if;                            \n" +
                "  \n" +
                "				IF pIsAdditionalAttibute then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                             \n" +
                "					from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`tolerance` = fromPart.tolerance,                            \n" +
                "					toPart.`voltage` = fromPart.voltage,                            \n" +
                "					toPart.`value` = fromPart.value,                            \n" +
                "					toPart.`partPackage` = fromPart.partPackage,                            \n" +
                "					toPart.`powerRating` = fromPart.powerRating,                            \n" +
                "					toPart.`weight` = fromPart.weight,                            \n" +
                "					toPart.`feature` = fromPart.feature,                            \n" +
                "					toPart.`color` = fromPart.color,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "				IF pIsPackagingDetail then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                            \n" +
                "					`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`deviceMarking` = fromPart.deviceMarking,                            \n" +
                "					toPart.`packagingID` = fromPart.packagingID,                            \n" +
                "					toPart.`minimum` = fromPart.minimum,                            \n" +
                "					toPart.`mult` = fromPart.mult,                            \n" +
                "					toPart.`packageQty` = fromPart.packageQty,                            \n" +
                "					toPart.`uomClassID` = fromPart.uomClassID,                            \n" +
                "					toPart.`uom` = fromPart.uom,                            \n" +
                "					toPart.`uomText` = fromPart.uomText,                            \n" +
                "					toPart.`unit` = fromPart.unit,                            \n" +
                "					toPart.`pcbPerArray` = fromPart.pcbPerArray,                            \n" +
                "					toPart.`grossWeight` = fromPart.grossWeight,                            \n" +
                "					toPart.`grossWeightUom` = fromPart.grossWeightUom,                            \n" +
                "					toPart.`packagingWeight` = fromPart.packagingWeight,                            \n" +
                "					toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "				if pIsStandards then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                            \n" +
                "					toPart.`htsCode` = fromPart.htsCode,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "  \n" +
                "					INSERT INTO `component_standard_details`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                            \n" +
                "					select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                            \n" +
                "					from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                            \n" +
                "					and not exists (select 1 from component_standard_details csd                            \n" +
                "					where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                            \n" +
                "				end if;                            \n" +
                "				if pIsRequiredMountingType then                            \n" +
                "					INSERT INTO `component_requiremountingtype`                            \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                             \n" +
                "					and not exists (select 1 from component_requiremountingtype                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                            \n" +
                "  \n" +
                "					set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @requiredMountingTypecount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`mountingTypePartRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsRequiredFunctionalType then                            \n" +
                "					INSERT INTO `component_requirefunctionaltype`                            \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                            \n" +
                "					and not exists (select 1 from component_requirefunctionaltype                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                            \n" +
                "  \n" +
                "  \n" +
                "					set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @requiredFunctionalTypecount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`functionalTypePartRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "  \n" +
                "				end if;                            \n" +
                "				if pIsPackagingAliasPart then                            \n" +
                "  \n" +
                "					set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                            \n" +
                "					set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                            \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                            \n" +
                "						# generate new packaging alias group id                            \n" +
                "						set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                            \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                            \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                            \n" +
                "						# update packaging alias group id as new packaging alias group id in component table                            \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                            \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_packagingalias`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  ToPartID	                            \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                            \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_packagingalias`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  FromPartID		                            \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                            \n" +
                "  \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsOtherPartName then                            \n" +
                "					INSERT INTO `component_otherpn`                            \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                            \n" +
                "					and not exists (select 1 from component_otherpn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                            \n" +
                "				end if;                            \n" +
                "				If pIsAlternatePart then                            \n" +
                "					INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                            \n" +
                "				end if;                            \n" +
                "				if pIsRoHSReplacementPart then                            \n" +
                "  \n" +
                "					set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                            \n" +
                "					set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                            \n" +
                "					if @FromrohsgroupID is not null and @TorohsgroupID is not null then                            \n" +
                "						# generate new packaging alias group id                            \n" +
                "						set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                            \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                            \n" +
                "						  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                                \n" +
                "					   # update packaging alias group id as new packaging alias group id in component table                            \n" +
                "						 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                            \n" +
                "					elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_rohsalternatepn`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  ToPartID	                            \n" +
                "						update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                            \n" +
                "  \n" +
                "					elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_rohsalternatepn`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  FromPartID		                            \n" +
                "						update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                            \n" +
                "  \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsDriveTool then                            \n" +
                "					INSERT INTO `component_drivetools`                            \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                            \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                            \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_drivetools                             \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                            \n" +
                "  \n" +
                "					set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @DriveToolcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`driverToolRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsProcessMaterial then                            \n" +
                "					INSERT INTO `component_processmaterial`                            \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                            \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                            \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_processmaterial                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                             \n" +
                "				end if;                            \n" +
                "				if pIsRequiredMattingParts then                            \n" +
                "					INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                            \n" +
                "  \n" +
                "					set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @mattingpartcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`matingPartRquired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "  \n" +
                "				end if;                            \n" +
                "				if pIsPickupPad then                            \n" +
                "				INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                            \n" +
                "  \n" +
                "					set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @PickupPadcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`pickupPadRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                \n" +
                "  \n" +
                "				if pIsFunctionalTesingTool then                            \n" +
                "					INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                            \n" +
                "  \n" +
                "					set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @FunctionalTesingToolcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`functionalTestingRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsFinctionalRestingEquipment then                            \n" +
                "					INSERT INTO `component_functionaltestingequipment`                            \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                            \n" +
                "					and not exists (select 1 from component_functionaltestingequipment                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "                if (vFromPartCategory = 3) then                \n" +
                "					if pIsBOM then                          \n" +
                "						call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                    \n" +
                "					end if;                          \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                      \n" +
                "                end if;      \n" +
                "  \n" +
                "                if(pIsComments = 1) THEN    \n" +
                "					INSERT INTO componenet_inspection_requirement_det    \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)    \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),    \n" +
                "                    pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID  and isDeleted = 0 ;    \n" +
                "  \n" +
                "                    INSERT INTO assembly_revision_comments    \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				    \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where     \n" +
                "						partID = pFromPartID and isDeleted = 0;    \n" +
                "                END IF;    \n" +
                "  \n" +
                "				commit;                \n" +
                "			select * from component where id = vToPartID;                \n" +
                "        end if;                          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (683,'1.00','V1',' Update SP for Sproc_CreateAssemblyRevision - SHUBHANM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 683:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2021  *********************************** */
                "ALTER TABLE equipment MODIFY COLUMN serialNumber VARCHAR(100) NULL; \n" +
                /* **************************** Add  Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (684,'1.00','V1','Equipment serialNumber max length changes - Vaibhav '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 684:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "ALTER TABLE `salesorderdet`   \n" +
                "ADD COLUMN `quoteFrom` INT NULL DEFAULT '1',  \n" +
                "ADD COLUMN `refAssyQtyTurnTimeID` INT NULL,  \n" +
                "ADD COLUMN `assyQtyTurnTimeText` VARCHAR(100) NULL,  \n" +
                "ADD INDEX `FK_salesorderdet_refAssyQtyTurnTimeID_idx` (`refAssyQtyTurnTimeID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `salesorderdet`  \n" +
                "ADD CONSTRAINT `FK_salesorderdet_refAssyQtyTurnTimeID`  \n" +
                "  FOREIGN KEY (`refAssyQtyTurnTimeID`)  \n" +
                "  REFERENCES `component_price_break_details` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                "ALTER TABLE `salesorderdet_commission_attribute`   \n" +
                "DROP FOREIGN KEY `FK_salesorderdet_commission_attribute_refQuoteAttributeId`;  \n" +
                "ALTER TABLE `salesorderdet_commission_attribute`   \n" +
                "ADD COLUMN `refComponentSalesPriceBreakID` INT NULL,  \n" +
                "CHANGE COLUMN `refQuoteAttributeId` `refQuoteAttributeId` INT NULL ,  \n" +
                "ADD INDEX `FK_salesorderdet_commission_attribute_refComponentSalesPric_idx` (`refComponentSalesPriceBreakID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `salesorderdet_commission_attribute`   \n" +
                "ADD CONSTRAINT `FK_salesorderdet_commission_attribute_refQuoteAttributeId`  \n" +
                "  FOREIGN KEY (`refQuoteAttributeId`)  \n" +
                "  REFERENCES `quotecharges_dynamic_fields_mst` (`id`),  \n" +
                "ADD CONSTRAINT `FK_salesorderdet_commission_attribute_refCompSalesPriceBreakID`  \n" +
                "  FOREIGN KEY (`refComponentSalesPriceBreakID`)  \n" +
                "  REFERENCES `component_price_break_details` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (685,'1.00','V1','User Story 28123: Sales Order add provision to select price - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 685:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "drop procedure if exists `Sproc_getSalesCommissionDetailsFromRfq`;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesCommissionDetailsFromRfq`(  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRfqQuoteNumber varchar(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	select x.requestQty priceBreak, x.turnTime, x.unitOfTime, x.assemblyTotalRfqPrice unitPrice, x.salesCommissionAmount,    \n" +
                "			case when ifnull(x.assemblyTotalRfqPrice,0) != 0 then    \n" +
                "					round(((x.salesCommissionAmount * 100) / x.assemblyTotalRfqPrice),2)    \n" +
                "				end salesCommissionPercentage    \n" +
                "	  from (select a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime,    \n" +
                "					sum(case when qdfm.isCommission = 1 then raqac.amount else 0 end) salesCommissionAmount,  \n" +
                "					fun_getAssemblyRfqTotalPrice(a.id) assemblyTotalRfqPrice    \n" +
                "			  from rfq_assy_quotations a    \n" +
                "			  join rfq_assy_quotations_additionalcost raqac ON raqac.rfqAssyQuoteID = a.id and raqac.isDeleted = 0    \n" +
                "			  left join quotecharges_dynamic_fields_mst qdfm ON qdfm.id = raqac.quoteChargeDynamicFieldID and qdfm.isCommission = 1 and qdfm.isDeleted = 0 and qdfm.quoteAttributeType='R'    \n" +
                "			  join rfq_assy_quantity raq ON raq.id = a.rfqAssyQtyID    \n" +
                "			  join rfq_assy_quantity_turn_time raqt ON raqt.id = a.rfqAssyQtyTurnTimeID    \n" +
                "			 where exists (select 1 from rfq_assemblies ra where ra.id = a.rfqAssyID and a.isDeleted = 0 and ra.partID = pPartId )    \n" +
                "			   and exists (select 1 from rfq_assemblies_quotation_submitted b where b.id = a.refSubmittedQuoteID and b.quoteNumber = pRfqQuoteNumber)    \n" +
                "			   and a.isDeleted = 0    \n" +
                "			 group by a.id, raq.requestQty, raqt.turnTime, raqt.unitOfTime) x;    \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_saveSalesCommissionDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSalesCommissionDetails`(  \n" +
                "	IN prfqGroupID INT,     \n" +
                "	IN ppartid INT,    \n" +
                "	IN pqty INT,    \n" +
                "	IN pprice DECIMAL(16,6) ,    \n" +
                "	IN puserID INT,    \n" +
                "    IN pRoleId INT,    \n" +
                "	IN psalesDetailID INT,    \n" +
                "	IN prefQtyTurnTimeID INT    \n" +
                "    )  \n" +
                "BEGIN      \n" +
                " DECLARE pstatus INT;    \n" +
                " DECLARE pAssyID INT;    \n" +
                " DECLARE pmaterialUnitPrice DECIMAL(16,6);    \n" +
                " DECLARE plaborUnitPrce DECIMAL(16,6);    \n" +
                " DECLARE prefQuoteID INT;    \n" +
                " DECLARE ptotalmaterialcost DECIMAL(16,6);    \n" +
                " DECLARE ptotalcustompartcost DECIMAL(16,6);    \n" +
                "IF(prfqGroupID IS NOT NULL)THEN                                                            \n" +
                "  \n" +
                "        SELECT ra.status,ra.id INTO pstatus,pAssyID FROM rfq_assemblies ra WHERE ra.partID=ppartID AND ra.rfqrefID=prfqGroupID AND ra.isDeleted=0;    \n" +
                "	IF(pstatus=2 OR pstatus=3)THEN    \n" +
                "		UPDATE rfq_assemblies SET `status`=3, winprice=pprice,winquantity=pqty,reason='Auto',quoteclosedDate=CURRENT_TIMESTAMP ,quoteclosedby=puserID,quoteFinalStatus=4,    \n" +
                "		updatedBy=puserID,  \n" +
                "		updateByRoleId=pRoleId  \n" +
                "		WHERE partID=ppartID AND rfqrefID=prfqGroupID AND isDeleted=0;    \n" +
                "	END IF;    \n" +
                "	IF(SELECT COUNT(1) FROM salesorderdet_commission_attribute WHERE partid=ppartid AND refSalesorderdetID=psalesDetailID and refComponentSalesPriceBreakID is null)=0 THEN    \n" +
                "		IF(pAssyID IS NOT NULL)THEN    \n" +
                "			update salesorderdet_commission_attribute  \n" +
                "				set isDeleted = 1,  \n" +
                "					deletedBy = puserID,  \n" +
                "					deleteByRoleId = pRoleId,  \n" +
                "					deletedBy = fun_DatetimetoUTCDateTime()  \n" +
                "			 WHERE partid=ppartid AND refSalesorderdetID=psalesDetailID;  \n" +
                "			SELECT unitprice,laborunitPrice,id INTO pmaterialUnitPrice,plaborUnitPrce,prefQuoteID FROM rfq_assy_quotations WHERE rfqAssyID=pAssyID AND rfqAssyQtyTurnTimeID=prefQtyTurnTimeID AND isDeleted=0  ORDER BY id DESC LIMIT 1;    \n" +
                "			-- material detail insert    \n" +
                "			IF(prefQuoteID IS NOT NULL) THEN    \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN    \n" +
                "  \n" +
                "					IF(pmaterialUnitPrice IS NOT NULL AND pmaterialUnitPrice>0)THEN    \n" +
                "  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,    \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)    \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,1),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad     \n" +
                "					INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;    \n" +
                "  \n" +
                "					END IF;    \n" +
                "				END IF;    \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID    \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1     \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN    \n" +
                "  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,    \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)    \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,2),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,    \n" +
                "					puserID,ppartID,fun_getAssyPIDCodeByID(rac.mfgPNID)     \n" +
                "					FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID    \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1     \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;    \n" +
                "  \n" +
                "  \n" +
                "				END IF;    \n" +
                "				-- IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "				-- 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' and rad.isdeleted=0)>0 THEN    \n" +
                "				-- 	if(prefQuoteID is not null)then    \n" +
                "				-- 		SELECT ifnull(materialCost,0) INTO ptotalmaterialcost FROM rfq_assy_quotations WHERE rfqAssyID=pAssyID AND rfqAssyQtyTurnTimeID=prefQtyTurnTimeID AND isDeleted=0  ORDER BY id DESC LIMIT 1;					    \n" +
                "				-- 	SELECT IFNULL(SUM(totalprice),0) into ptotalcustompartcost FROM rfq_assy_quotations_customparts where rfqAssyQuoteId=prefQuoteID and isdeleted=0;    \n" +
                "				-- 	set @totalPrice=ptotalmaterialcost+ptotalcustompartcost;    \n" +
                "				-- 	if(@totalPrice>0)then    \n" +
                "				-- 	INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,    \n" +
                "				-- 	org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)    \n" +
                "  \n" +
                "				-- 	SELECT psalesDetailID,@totalPrice,rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "				-- 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' and rad.isdeleted=0;    \n" +
                "				-- 	end if;    \n" +
                "				-- 	end if;    \n" +
                "				-- END IF;    \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN    \n" +
                "					IF(plaborUnitPrce IS NOT NULL AND plaborUnitPrce>0)THEN    \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,    \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)    \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,3),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad     \n" +
                "					INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;    \n" +
                "  \n" +
                "					END IF;    \n" +
                "				END IF;    \n" +
                "                IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN    \n" +
                "  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,    \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)    \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,5),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType   \n" +
                "                    FROM rfq_assy_quotations_additionalcost rad     \n" +
                "					INNER JOIN quotecharges_dynamic_fields_mst qdf     \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;    \n" +
                "  \n" +
                "				END IF;    \n" +
                "			END IF;    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "END IF;    \n" +
                "    END;  \n" +
                "drop function if exists `fun_getTotalSalesCommission`;  \n" +
                "CREATE FUNCTION `fun_getTotalSalesCommission`(  	        \n" +
                "	pattributeID INT,        \n" +
                "	prfqAssyQuoteID INT ,      \n" +
                "	pcustomPartId INT,      \n" +
                "	ptype INT      \n" +
                "  \n" +
                ") RETURNS decimal(16,6)  \n" +
                "BEGIN                          \n" +
                "	DECLARE pPrice DECIMAL (16,6);      \n" +
                "	DECLARE actualPrice DECIMAL (16,6);      \n" +
                "	DECLARE pmaterialPrice DECIMAL(16,6);      \n" +
                "	DECLARE plaborPrce DECIMAL(16,6);     \n" +
                "	DECLARE poverheadPrce DECIMAL(16,6);      \n" +
                "	DECLARE ptotalcustomcost DECIMAL(16,6);      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPricetable;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS  tempPricetable AS      \n" +
                "  \n" +
                "	SELECT * FROM ( WITH RECURSIVE cte AS                  \n" +
                "	(                  \n" +
                "	  SELECT id,refAttributeID FROM quotecharges_dynamic_fields_mst WHERE id=pattributeID AND deletedAt IS NULL            \n" +
                "  \n" +
                "	  UNION ALL                  \n" +
                "  \n" +
                "	  SELECT ra.id,ra.refAttributeID FROM quotecharges_dynamic_fields_mst ra               \n" +
                "	  LEFT JOIN cte ON cte.refAttributeID=ra.id              \n" +
                "	   WHERE ra.id=cte.refAttributeID AND ra.deletedAt IS NULL          \n" +
                "  \n" +
                "	)                  \n" +
                "	SELECT DISTINCT c.id            \n" +
                "	         FROM cte c) a WHERE a.id!=pattributeID;      \n" +
                "  \n" +
                "  \n" +
                "  IF(ptype=1)THEN      \n" +
                "	SELECT IFNULL(unitprice,0) INTO actualPrice FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid      \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Material' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND ra.rfqassyquoteid=prfqAssyQuoteID       \n" +
                "	 AND ra.refCustomPartQuoteID IS NULL AND ra.isdeleted=0;      \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;      \n" +
                "  END IF;      \n" +
                "  IF(ptype=2)THEN      \n" +
                "	SELECT IFNULL(unitprice,0) INTO actualPrice FROM rfq_assy_quotations_customparts WHERE rfqAssyQuoteId=prfqAssyQuoteID AND id=pcustomPartId;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid      \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Material' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND  ra.rfqassyquoteid=prfqAssyQuoteID       \n" +
                "	 AND ra.refCustomPartQuoteID=pcustomPartId AND ra.isdeleted=0;      \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;      \n" +
                "  END IF;      \n" +
                "  IF(ptype=3)THEN      \n" +
                "	SELECT IFNULL(laborunitPrice,0) INTO actualPrice FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid      \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Labor' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND  ra.rfqassyquoteid=prfqAssyQuoteID       \n" +
                "  \n" +
                "	AND ra.isdeleted=0;      \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;      \n" +
                "  END IF;      \n" +
                "  IF(ptype=4)THEN      \n" +
                "	SELECT IFNULL(overheadUnitPrice,0) INTO actualPrice FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid      \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Overhead' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND ra.rfqassyquoteid=prfqAssyQuoteID       \n" +
                "	 AND ra.refCustomPartQuoteID IS NULL AND ra.isdeleted=0;      \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;      \n" +
                "  END IF;      \n" +
                "  IF(ptype=5)THEN      \n" +
                "	SELECT IFNULL(unitprice,0), IFNULL(laborunitPrice,0), IFNULL(overheadUnitPrice,0) INTO pmaterialPrice, plaborPrce, poverheadPrce FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;    \n" +
                "	SET ptotalcustomcost = 0;    \n" +
                "	/*IF pcustomPartId IS NOT NULL THEN     \n" +
                "		SELECT IFNULL(unitprice,0) INTO ptotalcustomcost FROM rfq_assy_quotations_customparts WHERE rfqAssyQuoteId=prfqAssyQuoteID AND id=pcustomPartId;      \n" +
                "	END IF;   */  \n" +
                "		SELECT IFNULL(unitprice,0) INTO ptotalcustomcost FROM rfq_assy_quotations_customparts   \n" +
                "         WHERE rfqAssyQuoteId=prfqAssyQuoteID   \n" +
                "		   /*AND id=pcustomPartId*/ /*not required custom part condition as calculating ALL case, so commented condition as discussed with champak*/  \n" +
                "           and isDeleted = 0;      \n" +
                "  \n" +
                "	SET actualPrice = (pmaterialPrice + ptotalcustomcost + plaborPrce + poverheadPrce);    \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid      \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='All' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND ra.rfqassyquoteid=prfqAssyQuoteID       \n" +
                "	AND ra.refCustomPartQuoteID IS NULL AND ra.isdeleted=0;      \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;     \n" +
                "  END IF;      \n" +
                "	 RETURN    pPrice;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (686,'1.00','V1','User Story 28123: Sales Order add provision to select price - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 686:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "drop procedure if exists `Sproc_saveSalesCommissionDetailsBasedOnPartSalesPrice`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSalesCommissionDetailsBasedOnPartSalesPrice`(  \n" +
                "	IN prfqGroupID INT,  \n" +
                "	IN ppartid INT,  \n" +
                "	IN pqty INT,  \n" +
                "	IN pprice DECIMAL(16,6),  \n" +
                "	IN puserID INT,  \n" +
                "    IN pRoleId INT,  \n" +
                "	IN psalesDetailID INT,  \n" +
                "	IN prefQtyTurnTimeID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                " IF (ppartid IS NOT NULL and prefQtyTurnTimeID is not null) THEN  \n" +
                "	IF (SELECT COUNT(1) FROM salesorderdet_commission_attribute  \n" +
                "		 WHERE partid = ppartid AND refSalesorderdetID = psalesDetailID and refComponentSalesPriceBreakID = prefQtyTurnTimeID) = 0 THEN  \n" +
                "  \n" +
                "        update salesorderdet_commission_attribute  \n" +
                "			set isDeleted = 1,  \n" +
                "				deletedBy = puserID,  \n" +
                "                deleteByRoleId = pRoleId,  \n" +
                "                deletedBy = fun_DatetimetoUTCDateTime()  \n" +
                "		 WHERE partid = ppartid AND refSalesorderdetID = psalesDetailID;  \n" +
                "  \n" +
                "         INSERT INTO salesorderdet_commission_attribute  \n" +
                "				(refSalesorderdetID, unitPrice, refComponentSalesPriceBreakID, commissionPercentage, commissionValue,  \n" +
                "				org_commissionPercentage, org_commissionValue, createdBy, updatedBy, partid, category,  \n" +
                "                createByRoleId, updateByRoleId, isDeleted)  \n" +
                "		  SELECT psalesDetailID, unitPrice, id, salesCommissionPercentage, salesCommissionAmount,  \n" +
                "				salesCommissionPercentage, salesCommissionAmount, puserID, puserID, mfgPNID, 'All' category,  \n" +
                "                pRoleId, updateByRoleId, 0 isDeleted  \n" +
                "			  FROM component_price_break_details  \n" +
                "			 WHERE `type` = 2  \n" +
                "			   AND isDeleted = 0  \n" +
                "			   AND mfgPNID = ppartid  \n" +
                "               and id = prefQtyTurnTimeID;  \n" +
                "	END IF;  \n" +
                " END IF;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetAssyQtyTurntimeByAssyID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyQtyTurntimeByAssyID`(  \n" +
                "	IN ppartid INT,  \n" +
                "    IN plineId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  declare vIsDeleted tinyint;  \n" +
                "  \n" +
                "	if (plineId > 0) then  \n" +
                "		select a.isDeleted into vIsDeleted  \n" +
                "		  from component_price_break_details  a  \n" +
                "		 where `type` = 2  \n" +
                "		   and (select 1 from salesorderdet d where a.id = d.refAssyQtyTurnTimeID and d.id = plineId)/*added to get delete data in case of edit*/  \n" +
                "		   and mfgPNID = ppartid;  \n" +
                "     end if;  \n" +
                "  \n" +
                "     if (vIsDeleted = 1) then  \n" +
                "		select id, CONCAT(\"(\",priceBreak,\") \",turnTime,\" \",fun_getRFQUnitOfTime(unitoftime)) qtyTurnTime, rfqNumber, a.priceBreak, a.unitPrice  \n" +
                "		  from component_price_break_details  a  \n" +
                "		 where `type` = 2  \n" +
                "		   and (select 1 from salesorderdet d where a.id = d.refAssyQtyTurnTimeID and d.id = plineId)/*added to get delete data in case of edit*/  \n" +
                "		   and mfgPNID = ppartid  \n" +
                "		 order by qtyTurnTime;  \n" +
                "     else  \n" +
                "		select id, CONCAT(\"(\",priceBreak,\") \",turnTime,\" \",fun_getRFQUnitOfTime(unitoftime)) qtyTurnTime, rfqNumber, a.priceBreak, a.unitPrice  \n" +
                "		  from component_price_break_details  a  \n" +
                "		 where `type` = 2  \n" +
                "		   and isDeleted = 0  \n" +
                "		   and mfgPNID = ppartid  \n" +
                "		 order by qtyTurnTime;  \n" +
                "    end if;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetSalesCommissionDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetails`(  \n" +
                "	IN psalesDetId INT,  \n" +
                "	IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "   SELECT sc.id,sc.unitPrice,sc.commissionPercentage,sc.commissionValue,  \n" +
                "			sc.org_commissionPercentage, sc.org_commissionValue,   \n" +
                "            ifnull(qd.fieldName,'Assembly Sales Price Matrix') fieldName,  \n" +
                "            sc.category  \n" +
                "    FROM salesorderdet_commission_attribute sc  \n" +
                "    left JOIN quotecharges_dynamic_fields_mst qd ON sc.refQuoteAttributeId = qd.id  \n" +
                "   WHERE sc.isDeleted = 0  \n" +
                "	 AND sc.refSalesorderdetID = psalesDetId  \n" +
                "     AND sc.partid = ppartID;  \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetAssyQtyTurntimeByRfqGroup`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyQtyTurntimeByRfqGroup`(  \n" +
                "	IN prfqGroupID INT,  \n" +
                "	IN ppartid INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE prfqassyID INT;  \n" +
                "  \n" +
                "    SELECT ra.id INTO prfqassyID FROM rfq_assemblies ra WHERE ra.rfqrefID=prfqGroupID AND ra.partID= ppartid;  \n" +
                "	SELECT raqt.id,CONCAT(\"(\",raq.requestQty,\")\",\" \",raqt.turnTime,\" \",fun_getRFQUnitOfTime(raqt.unitoftime)) qtyTurnTime,  \n" +
                "			raq.requestQty as priceBreak  \n" +
                "	  FROM rfq_assy_quantity_turn_time raqt INNER JOIN rfq_assy_quantity raq ON raq.id=raqt.rfqAssyQtyID    \n" +
                "	 WHERE raqt.isDeleted=0 AND raq.rfqAssyID=prfqassyID ORDER BY raq.id;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (687,'1.00','V1','User Story 28123: Sales Order add provision to select price - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 687:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_CreateAssemblyRevision;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                          \n" +
                "	IN pFromPartID INT,              \n" +
                "    IN pNewEpicorType varchar(50),              \n" +
                "    IN pNewAssemblyType INT,              \n" +
                "    IN pNewMfgcodeID INT,              \n" +
                "    IN pNewCustAssyPN varchar(500),              \n" +
                "    IN pNewPartRev varchar(50),              \n" +
                "    IN pNewMfgPN varchar(100),              \n" +
                "    IN pNewAssyCode varchar(50),              \n" +
                "    IN pNewNickName varchar(50),              \n" +
                "    IN pNewPIDCode varchar(109),       \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,                          \n" +
                "    IN pUserRoleId Int,                          \n" +
                "    IN pIsAttribute tinyint,                          \n" +
                "    IN pIsSettings tinyint,                          \n" +
                "    IN pIsAdditionalAttibute tinyint,                          \n" +
                "    IN pIsPackagingDetail tinyint,                          \n" +
                "    IN pIsStandards tinyint,                          \n" +
                "    IN pIsRequiredFunctionalType tinyint,                          \n" +
                "    IN pIsRequiredMountingType tinyint,                          \n" +
                "    IN pIsPackagingAliasPart tinyint,                          \n" +
                "    IN pIsOtherPartName tinyint,                          \n" +
                "    IN pIsAlternatePart tinyint,                          \n" +
                "    IN pIsRoHSReplacementPart tinyint,                          \n" +
                "    IN pIsDriveTool tinyint,                          \n" +
                "    IN pIsProcessMaterial tinyint,                          \n" +
                "    IN pIsRequiredMattingParts tinyint,                          \n" +
                "    IN pIsPickupPad tinyint,                          \n" +
                "    IN pIsFunctionalTesingTool tinyint,                          \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                          \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt  \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "DECLARE vValidationPassed tinyint;              \n" +
                "DECLARE vFromPartCategory tinyint;              \n" +
                "DECLARE vFromMfgType varchar(5);          \n" +
                "DECLARE vCount INT;                        \n" +
                "DECLARE vToPartID INT;                        \n" +
                "DECLARE vUserRoleId INT;                        \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                          \n" +
                "  BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed              \n" +
                "  \n" +
                "    select co.category, m.mfgType          \n" +
                "      into vFromPartCategory, vFromMfgType          \n" +
                "	  from component co          \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID          \n" +
                "	 where co.id = pFromPartID;          \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/          \n" +
                "		set pIsAttribute = 1;          \n" +
                "        set pIsAdditionalAttibute = 1;          \n" +
                "    end if;          \n" +
                "  \n" +
                "	set vCount = 0;              \n" +
                "    if (vFromPartCategory = 3) then # check category              \n" +
                "	   select count(1) into vCount                        \n" +
                "		 from component co                        \n" +
                "		where co.mfgcodeID = pNewMfgcodeID              \n" +
                "          and co.category = 3              \n" +
                "		  and co.custAssyPN = pNewCustAssyPN            \n" +
                "		  and co.rev = pNewPartRev                        \n" +
                "          and co.isDeleted = 0                        \n" +
                "		  and co.deletedAt is null;                       \n" +
                "		if vCount > 0 then              \n" +
                "			set vValidationPassed = 0;              \n" +
                "            select 'DUPLICATE_REV' as message;              \n" +
                "        end if;              \n" +
                "  \n" +
                "         set vCount = 0;              \n" +
                "		 select count(1) into vCount              \n" +
                "			 from component co              \n" +
                "			where co.nickName != pNewNickName              \n" +
                "              and co.category = 3              \n" +
                "              and co.custAssyPN = pNewCustAssyPN              \n" +
                "              and co.mfgcodeID = pNewMfgcodeID              \n" +
                "			  and co.isDeleted = 0              \n" +
                "			  and co.deletedAt is null;               \n" +
                "		  if vCount > 0 then              \n" +
                "			set vValidationPassed = 0;              \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,              \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName              \n" +
                "				 from component co              \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID              \n" +
                "				where co.nickName != pNewNickName              \n" +
                "				  and co.category = 3              \n" +
                "				  and co.custAssyPN = pNewCustAssyPN              \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID              \n" +
                "				  and co.isDeleted = 0              \n" +
                "				  and co.deletedAt is null              \n" +
                "				  limit 1;              \n" +
                "		  end if;              \n" +
                "  \n" +
                "		set vCount = 0;              \n" +
                "		 select count(1) into vCount              \n" +
                "			 from component co              \n" +
                "			where co.nickName = pNewNickName              \n" +
                "              and co.category = 3              \n" +
                "              and co.custAssyPN != pNewCustAssyPN              \n" +
                "              and co.mfgcodeID = pNewMfgcodeID              \n" +
                "			  and co.isDeleted = 0            \n" +
                "			  and co.deletedAt is null;              \n" +
                "		 if vCount > 0 then              \n" +
                "			set vValidationPassed = 0;              \n" +
                "				select 'DUPLICATE_NICKNAME' as message,              \n" +
                "                        custAssyPN              \n" +
                "				 from component co              \n" +
                "				where co.nickName = pNewNickName              \n" +
                "				  and co.category = 3              \n" +
                "				  and co.custAssyPN != pNewCustAssyPN              \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID              \n" +
                "				  and co.isDeleted = 0            \n" +
                "				  and co.deletedAt is null              \n" +
                "				  limit 1;              \n" +
                "		  end if;              \n" +
                "	end if;              \n" +
                "  \n" +
                "    set vCount = 0;              \n" +
                "		select count(1) into vCount                        \n" +
                "		 from component co                        \n" +
                "		where co.mfgcodeID = pNewMfgcodeID              \n" +
                "		  and co.mfgPN = pNewMfgPN                        \n" +
                "          and co.isDeleted = 0            \n" +
                "		  and co.deletedAt is null;                       \n" +
                "	 if vCount > 0 then              \n" +
                "		set vValidationPassed = 0;              \n" +
                "        select 'DUPLICATE_MFGPN' as message;              \n" +
                "     end if;              \n" +
                "  \n" +
                "    set vCount = 0;              \n" +
                "		select count(1) into vCount                        \n" +
                "		 from component co                        \n" +
                "		where co.PIDCode = pNewPIDCode                        \n" +
                "		  and co.isDeleted = 0            \n" +
                "		  and co.deletedAt is null;                   \n" +
                "    if vCount > 0 then              \n" +
                "		set vValidationPassed = 0;              \n" +
                "        select 'DUPLICATE_PID' as message;              \n" +
                "     end if;              \n" +
                "  \n" +
                "		if vValidationPassed = 1 then  #1 passed, 0 failed                   \n" +
                "				insert into component(                        \n" +
                "						isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                        \n" +
                "						custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                        \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                        \n" +
                "						partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                        \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                        \n" +
                "                        countryOfOrigin, htsCode, createdBy, createByRoleId,                        \n" +
                "                        updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,          \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute)              \n" +
                "                select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                        \n" +
                "						pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                        \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                        \n" +
                "						partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                        \n" +
                "                        rohsText, rohsDeviation, (CASE WHEN (pIsCPN = 1) THEN 0 ELSE rohsgroupID END) , isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                        \n" +
                "                        countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                        \n" +
                "                        pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,          \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "                        (CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END)                          \n" +
                "				 from component                        \n" +
                "				where id = pFromPartID;                        \n" +
                "  \n" +
                "				set vToPartID = LAST_INSERT_ID();                        \n" +
                "  \n" +
                "				/* As of now Comment this Entry Due to have to cover in next sprint  \n" +
                "                insert into component_images                        \n" +
                "						(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                        \n" +
                "                select imageURL, vToPartID,pUserID, pUserRoleId,                        \n" +
                "						pUserID,pUserRoleId,isDeleted                        \n" +
                "				 from component_images                        \n" +
                "				where refComponentID = pFromPartID                        \n" +
                "                  and isDeleted = false;                        \n" +
                "  \n" +
                "                insert into component_datasheets                        \n" +
                "						(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                        \n" +
                "                select datasheetURL, vToPartID,pUserID ,pUserID,isDeleted,                        \n" +
                "						pUserRoleId, pUserRoleId                       \n" +
                "				 from component_datasheets                        \n" +
                "				where refComponentID = pFromPartID                        \n" +
                "                  and isDeleted = false;                        \n" +
                "				*/  \n" +
                "  \n" +
                "				IF pIsAttribute  then                            \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                          \n" +
                "					`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                          \n" +
                "					`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                          \n" +
                "					`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                          \n" +
                "					toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                          \n" +
                "					toPart.`mountingTypeID` = fromPart.mountingTypeID,                          \n" +
                "					toPart.`mountingTypeText` = fromPart.mountingTypeText,                          \n" +
                "					toPart.`operatingTemp` = fromPart.operatingTemp,                          \n" +
                "					toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                          \n" +
                "					toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                          \n" +
                "					toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                          \n" +
                "					toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                          \n" +
                "					toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                          \n" +
                "					toPart.`connecterTypeID` = fromPart.connecterTypeID,                          \n" +
                "					toPart.`connectorTypeText` = fromPart.connectorTypeText,                          \n" +
                "					toPart.`noOfPositionText` = fromPart.noOfPositionText,                          \n" +
                "					toPart.`noOfPosition` = fromPart.noOfPosition,                          \n" +
                "					toPart.`noOfRowsText` = fromPart.noOfRowsText,                          \n" +
                "					toPart.`noOfRows` = fromPart.noOfRows,                          \n" +
                "					toPart.`pitch` = fromPart.pitch,                          \n" +
                "					toPart.`pitchMating` = fromPart.pitchMating,                          \n" +
                "					toPart.`sizeDimension` = fromPart.sizeDimension,                          \n" +
                "					toPart.`length` = fromPart.length,                          \n" +
                "					toPart.`width` = fromPart.width,                          \n" +
                "					toPart.`heightText` = fromPart.heightText,                          \n" +
                "					toPart.`height` = fromPart.height,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "				IF pIsSettings then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                          \n" +
                "					`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                          \n" +
                "					`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                          \n" +
                "					`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                          \n" +
                "					toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                          \n" +
                "					toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                          \n" +
                "					toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                          \n" +
                "					toPart.`selfLifeDays` = fromPart.selfLifeDays,                          \n" +
                "					toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                          \n" +
                "					toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                          \n" +
                "					toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                          \n" +
                "					toPart.`saftyStock` = fromPart.saftyStock,                          \n" +
                "					toPart.`eau` = fromPart.eau,                          \n" +
                "					toPart.`businessRisk` = fromPart.businessRisk,                          \n" +
                "					toPart.`driverToolRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.driverToolRequired  END),                          \n" +
                "					toPart.`matingPartRquired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.matingPartRquired  END),                          \n" +
                "					toPart.`pickupPadRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.pickupPadRequired  END),                          \n" +
                "					toPart.`programingRequired` = fromPart.programingRequired,                          \n" +
                "					toPart.`functionalTestingRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.functionalTestingRequired END),                          \n" +
                "					toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),                          \n" +
                "					toPart.`bomLock` = fromPart.bomLock,                          \n" +
                "					toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),                          \n" +
                "					toPart.`updatedBy` = pUserID,                        \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                        \n" +
                "  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`                          \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                          \n" +
                "  \n" +
                "				end if;                          \n" +
                "  \n" +
                "				IF pIsAdditionalAttibute then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                           \n" +
                "					from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`tolerance` = fromPart.tolerance,                          \n" +
                "					toPart.`voltage` = fromPart.voltage,                          \n" +
                "					toPart.`value` = fromPart.value,                          \n" +
                "					toPart.`partPackage` = fromPart.partPackage,                          \n" +
                "					toPart.`powerRating` = fromPart.powerRating,                          \n" +
                "					toPart.`weight` = fromPart.weight,                          \n" +
                "					toPart.`feature` = fromPart.feature,                          \n" +
                "					toPart.`color` = fromPart.color,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "				IF pIsPackagingDetail then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                          \n" +
                "					`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`deviceMarking` = fromPart.deviceMarking,                          \n" +
                "					toPart.`packagingID` = fromPart.packagingID,                          \n" +
                "					toPart.`minimum` = fromPart.minimum,                          \n" +
                "					toPart.`mult` = fromPart.mult,                          \n" +
                "					toPart.`packageQty` = fromPart.packageQty,                          \n" +
                "					toPart.`uomClassID` = fromPart.uomClassID,                          \n" +
                "					toPart.`uom` = fromPart.uom,                          \n" +
                "					toPart.`uomText` = fromPart.uomText,                          \n" +
                "					toPart.`unit` = fromPart.unit,                          \n" +
                "					toPart.`pcbPerArray` = fromPart.pcbPerArray,                          \n" +
                "					toPart.`grossWeight` = fromPart.grossWeight,                          \n" +
                "					toPart.`grossWeightUom` = fromPart.grossWeightUom,                          \n" +
                "					toPart.`packagingWeight` = fromPart.packagingWeight,                          \n" +
                "					toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "				if pIsStandards then                          \n" +
                "					UPDATE `component` toPart,                           \n" +
                "					(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                          \n" +
                "					SET                          \n" +
                "					toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                          \n" +
                "					toPart.`htsCode` = fromPart.htsCode,                          \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "					toPart.`updatedAt` = current_timestamp()                          \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "  \n" +
                "					INSERT INTO `component_standard_details`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                          \n" +
                "					select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                          \n" +
                "					from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                          \n" +
                "					and not exists (select 1 from component_standard_details csd                          \n" +
                "					where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                          \n" +
                "				end if;                          \n" +
                "				if pIsRequiredMountingType then                          \n" +
                "					INSERT INTO `component_requiremountingtype`                          \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                           \n" +
                "					and not exists (select 1 from component_requiremountingtype                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                          \n" +
                "  \n" +
                "					set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @requiredMountingTypecount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`mountingTypePartRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsRequiredFunctionalType then                          \n" +
                "					INSERT INTO `component_requirefunctionaltype`                          \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                          \n" +
                "					and not exists (select 1 from component_requirefunctionaltype                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                          \n" +
                "  \n" +
                "  \n" +
                "					set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @requiredFunctionalTypecount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`functionalTypePartRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "  \n" +
                "				end if;                          \n" +
                "				if pIsPackagingAliasPart then                          \n" +
                "  \n" +
                "					set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                          \n" +
                "					set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                          \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                          \n" +
                "						# generate new packaging alias group id                          \n" +
                "						set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                          \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                          \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                          \n" +
                "						# update packaging alias group id as new packaging alias group id in component table                          \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                          \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_packagingalias`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  ToPartID	                          \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                          \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_packagingalias`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  FromPartID		                          \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                          \n" +
                "  \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsOtherPartName then                          \n" +
                "					INSERT INTO `component_otherpn`                          \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                          \n" +
                "					and not exists (select 1 from component_otherpn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                          \n" +
                "				end if;                          \n" +
                "				If pIsAlternatePart then                          \n" +
                "					INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                          \n" +
                "				end if;              \n" +
                "				if pIsRoHSReplacementPart then        \n" +
                "					set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                          \n" +
                "					set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                          \n" +
                "					if @FromrohsgroupID is not null and @TorohsgroupID is not null then                          \n" +
                "						# generate new packaging alias group id                          \n" +
                "						set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                          \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                          \n" +
                "						  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                              \n" +
                "					   # update packaging alias group id as new packaging alias group id in component table                          \n" +
                "						 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                          \n" +
                "					elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_rohsalternatepn`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  ToPartID	                          \n" +
                "						update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                          \n" +
                "  \n" +
                "					elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                          \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                          \n" +
                "						INSERT INTO `component_rohsalternatepn`                          \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                          \n" +
                "						values                          \n" +
                "						(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                          \n" +
                "					# Update data for packaging alias group id for  FromPartID		                          \n" +
                "						update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                          \n" +
                "  \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsDriveTool then                          \n" +
                "					INSERT INTO `component_drivetools`                          \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                          \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                          \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_drivetools                           \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                          \n" +
                "  \n" +
                "					set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @DriveToolcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`driverToolRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsProcessMaterial then                          \n" +
                "					INSERT INTO `component_processmaterial`                          \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                          \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                          \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_processmaterial                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                           \n" +
                "				end if;                          \n" +
                "				if pIsRequiredMattingParts then                          \n" +
                "					INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                          \n" +
                "  \n" +
                "					set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @mattingpartcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`matingPartRquired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "  \n" +
                "				end if;                          \n" +
                "				if pIsPickupPad then                          \n" +
                "				INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                          \n" +
                "  \n" +
                "					set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @PickupPadcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`pickupPadRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;              \n" +
                "  \n" +
                "				if pIsFunctionalTesingTool then                          \n" +
                "					INSERT INTO `component_alternatepn`                          \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                          \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                          \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                          \n" +
                "					and not exists (select 1 from component_alternatepn                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                          \n" +
                "  \n" +
                "					set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                          \n" +
                "					if @FunctionalTesingToolcount>0 then                          \n" +
                "						UPDATE `component` toPart                          \n" +
                "						SET                          \n" +
                "						toPart.`functionalTestingRequired` = true,                          \n" +
                "						toPart.`updatedBy` = pUserID,                          \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                  \n" +
                "						toPart.`updatedAt` = current_timestamp()                          \n" +
                "						WHERE toPart.`id` = vToPartID;                          \n" +
                "					end if;                          \n" +
                "				end if;                          \n" +
                "				if pIsFinctionalRestingEquipment then                          \n" +
                "					INSERT INTO `component_functionaltestingequipment`                          \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                          \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                          \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                          \n" +
                "					and not exists (select 1 from component_functionaltestingequipment                           \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                          \n" +
                "				end if;                          \n" +
                "  \n" +
                "                if (vFromPartCategory = 3) then              \n" +
                "					if pIsBOM then                        \n" +
                "						call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                  \n" +
                "					end if;                        \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                    \n" +
                "                end if;    \n" +
                "  \n" +
                "                if(pIsComments = 1) THEN  \n" +
                "					INSERT INTO componenet_inspection_requirement_det  \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "                    pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "  \n" +
                "                    INSERT INTO assembly_revision_comments  \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				  \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where   \n" +
                "						partID = pFromPartID;  \n" +
                "                END IF;  \n" +
                "  \n" +
                "				commit;              \n" +
                "			select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;              \n" +
                "        end if;                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  20-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (688,'1.00','V1',' Update SP of Sproc_CreateAssemblyRevision - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 688:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyStockDetailByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyStockDetailByID`(            \n" +
                "	IN passyStockID INT    \n" +
                "	)  \n" +
                "BEGIN            \n" +
                "		SELECT s.id,s.openingStock,s.openingdate,s.woNumber,s.serialNo,s.partID,s.`type`,s.whID,s.binID,  s.dateCode,    \n" +
                "		(SELECT SUM(sh.shippedqty)  FROM shippedassembly sh WHERE sh.partID=s.partID AND sh.woNumber=s.woNumber AND sh.isDeleted=0) shipQty            \n" +
                "		FROM assemblystock s WHERE s.id=passyStockID AND s.isDeleted=0;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (689,'1.00','V1','alter procedure Sproc_GetAssyStockDetailByID - Vaibhav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 689:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_CreateAssemblyRevision;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                            \n" +
                "	IN pFromPartID INT,                \n" +
                "    IN pNewEpicorType varchar(50),                \n" +
                "    IN pNewAssemblyType INT,                \n" +
                "    IN pNewMfgcodeID INT,                \n" +
                "    IN pNewCustAssyPN varchar(500),                \n" +
                "    IN pNewPartRev varchar(50),                \n" +
                "    IN pNewMfgPN varchar(100),                \n" +
                "    IN pNewAssyCode varchar(50),                \n" +
                "    IN pNewNickName varchar(50),                \n" +
                "    IN pNewPIDCode varchar(109),         \n" +
                "    IN pIsCPN tinyint,    \n" +
                "    IN pIsCustom tinyInt,    \n" +
                "    IN pUserID Int,                            \n" +
                "    IN pUserRoleId Int,                            \n" +
                "    IN pIsAttribute tinyint,                            \n" +
                "    IN pIsSettings tinyint,                            \n" +
                "    IN pIsAdditionalAttibute tinyint,                            \n" +
                "    IN pIsPackagingDetail tinyint,                            \n" +
                "    IN pIsStandards tinyint,                            \n" +
                "    IN pIsRequiredFunctionalType tinyint,                            \n" +
                "    IN pIsRequiredMountingType tinyint,                            \n" +
                "    IN pIsPackagingAliasPart tinyint,                            \n" +
                "    IN pIsOtherPartName tinyint,                            \n" +
                "    IN pIsAlternatePart tinyint,                            \n" +
                "    IN pIsRoHSReplacementPart tinyint,                            \n" +
                "    IN pIsDriveTool tinyint,                            \n" +
                "    IN pIsProcessMaterial tinyint,                            \n" +
                "    IN pIsRequiredMattingParts tinyint,                            \n" +
                "    IN pIsPickupPad tinyint,                            \n" +
                "    IN pIsFunctionalTesingTool tinyint,                            \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                            \n" +
                "    IN pIsBOM tinyint,    \n" +
                "    IN pIsFluxType tinyInt,    \n" +
                "    IN pIsComments tinyInt    \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "DECLARE vValidationPassed tinyint;                \n" +
                "DECLARE vFromPartCategory tinyint;                \n" +
                "DECLARE vFromMfgType varchar(5);            \n" +
                "DECLARE vCount INT;                          \n" +
                "DECLARE vToPartID INT;                          \n" +
                "DECLARE vUserRoleId INT;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                            \n" +
                "BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                            \n" +
                "  BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                \n" +
                "  \n" +
                "    select co.category, m.mfgType            \n" +
                "      into vFromPartCategory, vFromMfgType            \n" +
                "	  from component co            \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID            \n" +
                "	 where co.id = pFromPartID;            \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/            \n" +
                "		set pIsAttribute = 1;            \n" +
                "        set pIsAdditionalAttibute = 1;            \n" +
                "    end if;            \n" +
                "  \n" +
                "	set vCount = 0;                \n" +
                "    if (vFromPartCategory = 3) then # check category                \n" +
                "	   select count(1) into vCount                          \n" +
                "		 from component co                          \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                \n" +
                "          and co.category = 3                \n" +
                "		  and co.custAssyPN = pNewCustAssyPN              \n" +
                "		  and co.rev = pNewPartRev                          \n" +
                "          and co.isDeleted = 0                          \n" +
                "		  and co.deletedAt is null;                         \n" +
                "		if vCount > 0 then                \n" +
                "			set vValidationPassed = 0;                \n" +
                "            select 'DUPLICATE_REV' as message;                \n" +
                "        end if;                \n" +
                "  \n" +
                "         set vCount = 0;                \n" +
                "		 select count(1) into vCount                \n" +
                "			 from component co                \n" +
                "			where co.nickName != pNewNickName                \n" +
                "              and co.category = 3                \n" +
                "              and co.custAssyPN = pNewCustAssyPN                \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                \n" +
                "			  and co.isDeleted = 0                \n" +
                "			  and co.deletedAt is null;                 \n" +
                "		  if vCount > 0 then                \n" +
                "			set vValidationPassed = 0;                \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,                \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName                \n" +
                "				 from component co                \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID                \n" +
                "				where co.nickName != pNewNickName                \n" +
                "				  and co.category = 3                \n" +
                "				  and co.custAssyPN = pNewCustAssyPN                \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                \n" +
                "				  and co.isDeleted = 0                \n" +
                "				  and co.deletedAt is null                \n" +
                "				  limit 1;                \n" +
                "		  end if;                \n" +
                "  \n" +
                "		set vCount = 0;                \n" +
                "		 select count(1) into vCount                \n" +
                "			 from component co                \n" +
                "			where co.nickName = pNewNickName                \n" +
                "              and co.category = 3                \n" +
                "              and co.custAssyPN != pNewCustAssyPN                \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                \n" +
                "			  and co.isDeleted = 0              \n" +
                "			  and co.deletedAt is null;                \n" +
                "		 if vCount > 0 then                \n" +
                "			set vValidationPassed = 0;                \n" +
                "				select 'DUPLICATE_NICKNAME' as message,                \n" +
                "                        custAssyPN                \n" +
                "				 from component co                \n" +
                "				where co.nickName = pNewNickName                \n" +
                "				  and co.category = 3                \n" +
                "				  and co.custAssyPN != pNewCustAssyPN                \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                \n" +
                "				  and co.isDeleted = 0              \n" +
                "				  and co.deletedAt is null                \n" +
                "				  limit 1;                \n" +
                "		  end if;                \n" +
                "	end if;                \n" +
                "  \n" +
                "    set vCount = 0;                \n" +
                "		select count(1) into vCount                          \n" +
                "		 from component co                          \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                \n" +
                "		  and co.mfgPN = pNewMfgPN                          \n" +
                "          and co.isDeleted = 0              \n" +
                "		  and co.deletedAt is null;                         \n" +
                "	 if vCount > 0 then                \n" +
                "		set vValidationPassed = 0;                \n" +
                "        select 'DUPLICATE_MFGPN' as message;                \n" +
                "     end if;                \n" +
                "  \n" +
                "    set vCount = 0;                \n" +
                "		select count(1) into vCount                          \n" +
                "		 from component co                          \n" +
                "		where co.PIDCode = pNewPIDCode                          \n" +
                "		  and co.isDeleted = 0              \n" +
                "		  and co.deletedAt is null;                     \n" +
                "    if vCount > 0 then                \n" +
                "		set vValidationPassed = 0;                \n" +
                "        select 'DUPLICATE_PID' as message;                \n" +
                "     end if;                \n" +
                "  \n" +
                "		if vValidationPassed = 1 then  #1 passed, 0 failed                     \n" +
                "				insert into component(                          \n" +
                "						isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                          \n" +
                "						custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                          \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                          \n" +
                "						partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                          \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                          \n" +
                "                        countryOfOrigin, htsCode, createdBy, createByRoleId,                          \n" +
                "                        updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,            \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "						restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts)                \n" +
                "                select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                          \n" +
                "						pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                          \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                          \n" +
                "						partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                          \n" +
                "                        rohsText, rohsDeviation, (CASE WHEN (pIsCPN = 1) THEN 0 ELSE rohsgroupID END) , isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                          \n" +
                "                        countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                          \n" +
                "                        pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,            \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID,    \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),    \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),    \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),    \n" +
                "                        (CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "						restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts                        \n" +
                "				 from component                          \n" +
                "				where id = pFromPartID;                          \n" +
                "  \n" +
                "				set vToPartID = LAST_INSERT_ID();                          \n" +
                "  \n" +
                "				/* As of now Comment this Entry Due to have to cover in next sprint    \n" +
                "                insert into component_images                          \n" +
                "						(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                          \n" +
                "                select imageURL, vToPartID,pUserID, pUserRoleId,                          \n" +
                "						pUserID,pUserRoleId,isDeleted                          \n" +
                "				 from component_images                          \n" +
                "				where refComponentID = pFromPartID                          \n" +
                "                  and isDeleted = false;                          \n" +
                "  \n" +
                "                insert into component_datasheets                          \n" +
                "						(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                          \n" +
                "                select datasheetURL, vToPartID,pUserID ,pUserID,isDeleted,                          \n" +
                "						pUserRoleId, pUserRoleId                         \n" +
                "				 from component_datasheets                          \n" +
                "				where refComponentID = pFromPartID                          \n" +
                "                  and isDeleted = false;                          \n" +
                "				*/    \n" +
                "  \n" +
                "				IF pIsAttribute  then                              \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                            \n" +
                "					`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                            \n" +
                "					`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                            \n" +
                "					`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                            \n" +
                "					toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                            \n" +
                "					toPart.`mountingTypeID` = fromPart.mountingTypeID,                            \n" +
                "					toPart.`mountingTypeText` = fromPart.mountingTypeText,                            \n" +
                "					toPart.`operatingTemp` = fromPart.operatingTemp,                            \n" +
                "					toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                            \n" +
                "					toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                            \n" +
                "					toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                            \n" +
                "					toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                            \n" +
                "					toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                            \n" +
                "					toPart.`connecterTypeID` = fromPart.connecterTypeID,                            \n" +
                "					toPart.`connectorTypeText` = fromPart.connectorTypeText,                            \n" +
                "					toPart.`noOfPositionText` = fromPart.noOfPositionText,                            \n" +
                "					toPart.`noOfPosition` = fromPart.noOfPosition,                            \n" +
                "					toPart.`noOfRowsText` = fromPart.noOfRowsText,                            \n" +
                "					toPart.`noOfRows` = fromPart.noOfRows,                            \n" +
                "					toPart.`pitch` = fromPart.pitch,                            \n" +
                "					toPart.`pitchMating` = fromPart.pitchMating,                            \n" +
                "					toPart.`sizeDimension` = fromPart.sizeDimension,                            \n" +
                "					toPart.`length` = fromPart.length,                            \n" +
                "					toPart.`width` = fromPart.width,                            \n" +
                "					toPart.`heightText` = fromPart.heightText,                            \n" +
                "					toPart.`height` = fromPart.height,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "				IF pIsSettings then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                            \n" +
                "					`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                            \n" +
                "					`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                            \n" +
                "					`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                            \n" +
                "					toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                            \n" +
                "					toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                            \n" +
                "					toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                            \n" +
                "					toPart.`selfLifeDays` = fromPart.selfLifeDays,                            \n" +
                "					toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                            \n" +
                "					toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                            \n" +
                "					toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                            \n" +
                "					toPart.`saftyStock` = fromPart.saftyStock,                            \n" +
                "					toPart.`eau` = fromPart.eau,                            \n" +
                "					toPart.`businessRisk` = fromPart.businessRisk,                            \n" +
                "					toPart.`driverToolRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.driverToolRequired  END),                            \n" +
                "					toPart.`matingPartRquired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.matingPartRquired  END),                            \n" +
                "					toPart.`pickupPadRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.pickupPadRequired  END),                            \n" +
                "					toPart.`programingRequired` = fromPart.programingRequired,                            \n" +
                "					toPart.`functionalTestingRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.functionalTestingRequired END),                            \n" +
                "					toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),                            \n" +
                "					toPart.`bomLock` = fromPart.bomLock,                            \n" +
                "					toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),                            \n" +
                "					toPart.`updatedBy` = pUserID,                          \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                          \n" +
                "  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`                            \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                            \n" +
                "  \n" +
                "				end if;                            \n" +
                "  \n" +
                "				IF pIsAdditionalAttibute then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                             \n" +
                "					from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`tolerance` = fromPart.tolerance,                            \n" +
                "					toPart.`voltage` = fromPart.voltage,                            \n" +
                "					toPart.`value` = fromPart.value,                            \n" +
                "					toPart.`partPackage` = fromPart.partPackage,                            \n" +
                "					toPart.`powerRating` = fromPart.powerRating,                            \n" +
                "					toPart.`weight` = fromPart.weight,                            \n" +
                "					toPart.`feature` = fromPart.feature,                            \n" +
                "					toPart.`color` = fromPart.color,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "				IF pIsPackagingDetail then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                            \n" +
                "					`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`deviceMarking` = fromPart.deviceMarking,                            \n" +
                "					toPart.`packagingID` = fromPart.packagingID,                            \n" +
                "					toPart.`minimum` = fromPart.minimum,                            \n" +
                "					toPart.`mult` = fromPart.mult,                            \n" +
                "					toPart.`packageQty` = fromPart.packageQty,                            \n" +
                "					toPart.`uomClassID` = fromPart.uomClassID,                            \n" +
                "					toPart.`uom` = fromPart.uom,                            \n" +
                "					toPart.`uomText` = fromPart.uomText,                            \n" +
                "					toPart.`unit` = fromPart.unit,                            \n" +
                "					toPart.`pcbPerArray` = fromPart.pcbPerArray,                            \n" +
                "					toPart.`grossWeight` = fromPart.grossWeight,                            \n" +
                "					toPart.`grossWeightUom` = fromPart.grossWeightUom,                            \n" +
                "					toPart.`packagingWeight` = fromPart.packagingWeight,                            \n" +
                "					toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "				if pIsStandards then                            \n" +
                "					UPDATE `component` toPart,                             \n" +
                "					(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                            \n" +
                "					SET                            \n" +
                "					toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                            \n" +
                "					toPart.`htsCode` = fromPart.htsCode,                            \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "					toPart.`updatedAt` = current_timestamp()                            \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "  \n" +
                "					INSERT INTO `component_standard_details`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                            \n" +
                "					select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                            \n" +
                "					from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                            \n" +
                "					and not exists (select 1 from component_standard_details csd                            \n" +
                "					where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                            \n" +
                "				end if;                            \n" +
                "				if pIsRequiredMountingType then                            \n" +
                "					INSERT INTO `component_requiremountingtype`                            \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                             \n" +
                "					and not exists (select 1 from component_requiremountingtype                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                            \n" +
                "  \n" +
                "					set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @requiredMountingTypecount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`mountingTypePartRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsRequiredFunctionalType then                            \n" +
                "					INSERT INTO `component_requirefunctionaltype`                            \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                            \n" +
                "					and not exists (select 1 from component_requirefunctionaltype                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                            \n" +
                "  \n" +
                "  \n" +
                "					set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @requiredFunctionalTypecount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`functionalTypePartRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "  \n" +
                "				end if;                            \n" +
                "				if pIsPackagingAliasPart then                            \n" +
                "  \n" +
                "					set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                            \n" +
                "					set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                            \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                            \n" +
                "						# generate new packaging alias group id                            \n" +
                "						set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                            \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                            \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                            \n" +
                "						# update packaging alias group id as new packaging alias group id in component table                            \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                            \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_packagingalias`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  ToPartID	                            \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                            \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_packagingalias`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  FromPartID		                            \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                            \n" +
                "  \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsOtherPartName then                            \n" +
                "					INSERT INTO `component_otherpn`                            \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                            \n" +
                "					and not exists (select 1 from component_otherpn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                            \n" +
                "				end if;                            \n" +
                "				If pIsAlternatePart then                            \n" +
                "					INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                            \n" +
                "				end if;                \n" +
                "				if pIsRoHSReplacementPart then          \n" +
                "					set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                            \n" +
                "					set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                            \n" +
                "					if @FromrohsgroupID is not null and @TorohsgroupID is not null then                            \n" +
                "						# generate new packaging alias group id                            \n" +
                "						set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                            \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                            \n" +
                "						  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                                \n" +
                "					   # update packaging alias group id as new packaging alias group id in component table                            \n" +
                "						 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                            \n" +
                "					elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_rohsalternatepn`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  ToPartID	                            \n" +
                "						update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                            \n" +
                "  \n" +
                "					elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                            \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                            \n" +
                "						INSERT INTO `component_rohsalternatepn`                            \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                            \n" +
                "						values                            \n" +
                "						(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                            \n" +
                "					# Update data for packaging alias group id for  FromPartID		                            \n" +
                "						update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                            \n" +
                "  \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsDriveTool then                            \n" +
                "					INSERT INTO `component_drivetools`                            \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                            \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                            \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_drivetools                             \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                            \n" +
                "  \n" +
                "					set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @DriveToolcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`driverToolRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsProcessMaterial then                            \n" +
                "					INSERT INTO `component_processmaterial`                            \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                            \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                            \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_processmaterial                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                             \n" +
                "				end if;                            \n" +
                "				if pIsRequiredMattingParts then                            \n" +
                "					INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                            \n" +
                "  \n" +
                "					set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @mattingpartcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`matingPartRquired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "  \n" +
                "				end if;                            \n" +
                "				if pIsPickupPad then                            \n" +
                "				INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                            \n" +
                "  \n" +
                "					set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @PickupPadcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`pickupPadRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                \n" +
                "  \n" +
                "				if pIsFunctionalTesingTool then                            \n" +
                "					INSERT INTO `component_alternatepn`                            \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                            \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                            \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                            \n" +
                "					and not exists (select 1 from component_alternatepn                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                            \n" +
                "  \n" +
                "					set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                            \n" +
                "					if @FunctionalTesingToolcount>0 then                            \n" +
                "						UPDATE `component` toPart                            \n" +
                "						SET                            \n" +
                "						toPart.`functionalTestingRequired` = true,                            \n" +
                "						toPart.`updatedBy` = pUserID,                            \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                    \n" +
                "						toPart.`updatedAt` = current_timestamp()                            \n" +
                "						WHERE toPart.`id` = vToPartID;                            \n" +
                "					end if;                            \n" +
                "				end if;                            \n" +
                "				if pIsFinctionalRestingEquipment then                            \n" +
                "					INSERT INTO `component_functionaltestingequipment`                            \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                            \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                            \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                            \n" +
                "					and not exists (select 1 from component_functionaltestingequipment                             \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                            \n" +
                "				end if;                            \n" +
                "  \n" +
                "                if (vFromPartCategory = 3) then                \n" +
                "					if pIsBOM then                          \n" +
                "						call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                    \n" +
                "					end if;                          \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                      \n" +
                "                end if;      \n" +
                "  \n" +
                "                if(pIsComments = 1) THEN    \n" +
                "					INSERT INTO componenet_inspection_requirement_det    \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)    \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),    \n" +
                "                    pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;    \n" +
                "  \n" +
                "                    INSERT INTO assembly_revision_comments    \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				    \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where     \n" +
                "						partID = pFromPartID;    \n" +
                "                END IF;    \n" +
                "  \n" +
                "				commit;                \n" +
                "			select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;                \n" +
                "        end if;                          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (690,'1.00','V1',' uPDATE sp OF Sproc_CreateAssemblyRevision - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 690:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-01-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveNonUMIDStockList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(                              \n" +
                "	IN ppageIndex INT,                              \n" +
                "	IN precordPerPage INT,                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pWHId INT,                                                                 \n" +
                "	IN pBinId INT           	              \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "	DECLARE pOffset INT;                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);              \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';              \n" +
                "	IF(pWHId IS NOT NULL)THEN              \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');              \n" +
                "	END IF;              \n" +
                "	IF(pBinId IS NOT NULL )THEN              \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY BinID ASC\") ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "		SET pWhereClause = ' 1=1' ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"            \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      	warehouseName,      	departmentId,      	departmentName,            \n" +
                "			PartId,  	packingSlipID, 		packingSlipName,      	packagingType,        	packingSlipDate,        mfgPN,      	      \n" +
                "			pidCode,      	RoHSStatusID,      	rohsIcon,      		rohsName,      		InQty,      		UMIDCreatedQty,       		      \n" +
                "			BalanceQty,    	isCustom,           	receivedStatus,     	receivedStatusValue           \n" +
                "		FROM 	(                  \n" +
                "				SELECT		vucp.BinID,      	w.ID WarehouseID,      		w.parentWHID departmentId,      	b.Name binName,            \n" +
                "						vucp.packingSlipID,	w.Name warehouseName,      	fun_getWarehouseNameByID(w.parentWHID) departmentName,                  \n" +
                "						vucp.PartId,      	c.mfgPN As mfgPN,      		c.PIDCode As pidCode,      		c.RoHSStatusID,                 \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,                \n" +
                "						fun_getPackagingNameByID(vucp.packagingID) packagingType,                \n" +
                "						ps.packingSlipDate packingSlipDate,            \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                  \n" +
                "						vucp.InQty,		vucp.UMIDCreatedQty,      	vucp.BalanceQty,          \n" +
                "						c.isCustom,		c.partType,   \n" +
                "						vucp.receivedStatus, 	fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue			                  \n" +
                "				FROM 		vu_umid_creation_pending vucp                  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.deletedAt IS NULL                  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.deletedAt IS NULL                  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = b.WarehouseID AND w.deletedAt IS NULL             \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.deletedAt IS NULL            \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"                 \n" +
                "			) As tempNonUMID                  \n" +
                "		WHERE \", pWhereClause            \n" +
                "	);                         \n" +
                "  \n" +
                "	/* to get total count of rows */                       \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query1 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (691,'1.00','V1','Sproc_RetrieveNonUMIDStockList - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 691:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2021  *********************************** */
                "UPDATE quotecharges_dynamic_fields_mst SET isDeleted=0 WHERE isDeleted IS NULL;  \n" +
                "ALTER TABLE quotecharges_dynamic_fields_mst MODIFY isDeleted TINYINT DEFAULT 0 NOT NULL;  \n" +
                "  \n" +
                "UPDATE report_parameter_setting_mapping SET isDeleted=0 WHERE isDeleted IS NULL;  \n" +
                "ALTER TABLE report_parameter_setting_mapping MODIFY isDeleted TINYINT DEFAULT 0 NOT NULL;  \n" +
                "  \n" +
                "UPDATE home_menu_cateogory SET isDeleted=0 WHERE isDeleted IS NULL;  \n" +
                "ALTER TABLE home_menu_cateogory MODIFY isDeleted TINYINT DEFAULT 0 NOT NULL;  \n" +
                "  \n" +
                "UPDATE license_info SET isDeleted=0 WHERE isDeleted IS NULL;  \n" +
                "ALTER TABLE license_info MODIFY isDeleted TINYINT DEFAULT 0 NOT NULL;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (692,'1.00','V1','Update deleted column - Vaibhav '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 692:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(                                                                                                    \n" +
                "	IN invoiceID INT                            \n" +
                ")  \n" +
                "BEGIN                                   \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                             \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                             \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;                                    \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                          \n" +
                "	                 SELECT id,   transType,           \n" +
                "						packingSlipNumber,packingSlipDate,                  \n" +
                "                        (select packing.id from customer_packingSlip packing where packing.refCustInvoiceID = inv.id and packing.isDeleted = 0) packingSlipID,              \n" +
                "						refSalesOrderId  ,    systemID,                \n" +
                "						fun_getMfgCodeAndNameByID(customerID) customerName,customerID,poNumber,poDate,                            \n" +
                "						soNumber,soDate,                        \n" +
                "                        packingSlipType,`status`,                        \n" +
                "                        fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,shippingMethodId,                        \n" +
                "						shipToId,contactPersonId,intermediateShipmentId, billToId,                           \n" +
                "						invoiceNumber,invoiceDate,                \n" +
                "                        headerComment  ,   packingSlipComment,                     \n" +
                "						freeOnBoardId,salesCommissionTo,                                                \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),')',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  						                      \n" +
                "						fun_getFOBById(freeOnBoardId) FOBName,                        \n" +
                "						fun_getGenericCategoryNameByID(termsId) terms, termsId,                        \n" +
                "                        intermediateShipmentId ,                        \n" +
                "						billingAddress,                        \n" +
                "						shippingAddress,                        \n" +
                "						intermediateAddress,                \n" +
                "                        isLocked,                \n" +
                "                        subStatus,                \n" +
                "                        paymentStatus,                \n" +
                "                        packingSlipType,                \n" +
                "                        fun_getUserNameByID(lockedBy) lockedBy ,                \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,                                            \n" +
                "                        creditMemoNumber, creditMemoDate,          \n" +
                "						refDebitMemoNumber, refDebitMemoDate,   rmaNumber,      \n" +
                "                        (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText                \n" +
                "				 FROM customer_packingslip inv WHERE id = invoiceID;                            \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,                \n" +
                "					cpd.id,                \n" +
                "                    cpd.refCustPackingSlipID,            \n" +
                "					cpd.custPOLineID,                \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,            \n" +
                "                    cpd.lineID,        \n" +
                "                    co.PIDCode,      \n" +
                "                    co.mfgcodeID,      \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,      \n" +
                "					co.mfgpn,                \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,                \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,                \n" +
                "                    cpd.partId,                \n" +
                "                    cpd.refChargesTypeID,                           \n" +
                "					(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,                          \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,                \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,                \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,                 \n" +
                "                    CASE WHEN cpd.refChargesTypeID IS NULL THEN TRUE ELSE FALSE END materialType,othercharges AS lineOtherCharges,                 \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,                \n" +
                "					cpd.shippingNotes,                \n" +
                "                    cpd.internalComment,                \n" +
                "                    cpd.assyDescription,                \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,                                \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,                                \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,                                \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,                \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,                                            \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,        \n" +
                "                    (select sod.quoteNumber from  salesorderdet sod where sod.id = refSalesorderDetid and sod.isDeleted = 0) quoteNumber                \n" +
                "				 FROM customer_packingslip_det cpd      \n" +
                "                 LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0      \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0;                          \n" +
                "  \n" +
                "                 SELECT cpOther.id,            \n" +
                "						cpOther.refCustomerPackingSlipDetID,                  \n" +
                "						cpOther.partID,                               \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,                  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,                  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,                   \n" +
                "                        cpOther.qty,                   \n" +
                "                        cpOther.price,                  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,                \n" +
                "                        cpOther.frequency ,            \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'                                                                                                     \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'                           \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'                           \n" +
                "								ELSE ''                                                                 \n" +
                "						END) AS frequencyName                           \n" +
                "                 from customer_packingslip_otherexpense_details cpOther                   \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId and cpd.isDeleted = 0                  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID                  \n" +
                "                 AND cpOther.isdeleted=0;                            \n" +
                "  \n" +
                "                  --  Tracking Number                        \n" +
                "                Select id,trackNumber                         \n" +
                "                From customer_packing_slip_track_number                        \n" +
                "                Where refCustPackingSlipID = invoiceID                        \n" +
                "                AND isDeleted = 0;                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (693,'1.00','V1','Sproc_GetCustomerInvoiceDetail - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 693:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                    \n" +
                "	IN pTransType VARCHAR(5),            \n" +
                "	IN pInvoiceType VARCHAR(1),                \n" +
                "	IN pInvoiceID INT,              	                \n" +
                "    IN pInvData JSON,                \n" +
                "    IN pPackingSlipID INT,                \n" +
                "	IN puserID INT,                          \n" +
                "	IN puserRoleID INT ,                      \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50)                            \n" +
                ")  \n" +
                "BEGIN                                 \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(8) ;                      \n" +
                "	DECLARE vTermsDays INT ;                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                            \n" +
                "	SELECT 	*                                                             \n" +
                "	FROM 	JSON_TABLE(                     \n" +
                "			pInvData,                                                            \n" +
                "			\"$[*]\" COLUMNS(    			               \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                 \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                            \n" +
                "				`status` INT PATH \"$.status\",                \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                            \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                            \n" +
                "				`poDate` DATE PATH \"$.poDate\",                 \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                            \n" +
                "				`soDate` DATE PATH \"$.soDate\",                    \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,            \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,             \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",             \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\"       \n" +
                "			)                  \n" +
                "		) AS CustInv_JT;                 \n" +
                "  \n" +
                "	  IF(pInvoiceID IS NULL)THEN                          \n" +
                "			SELECT  termsDays INTO 	vTermsDays                \n" +
                "			FROM genericCategory gc                 \n" +
                "			WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                \n" +
                "			AND categoryType = 'Payment Terms';                \n" +
                "  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                      \n" +
                "			SELECT `maxValue` INTO v_maxCurrSystemIDForInv                      \n" +
                "			FROM `identity`                      \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                      \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                      \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                      \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                      \n" +
                "				packingSlipComment,headerComment,sorevision,                      \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                      \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                    \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                 \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,    \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId )                           \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                      \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                      \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                 \n" +
                "					packingSlipComment,headerComment,sorevision,                      \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                     \n" +
                "					puserRoleID,'W' , (SELECT LPAD(v_maxCurrSystemIDForInv+1,8,0)), termsID ,salesCommissionTo,                    \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                \n" +
                "					totalAmount,vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,    \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId   \n" +
                "			FROM temp_customerInvoice ;			                \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                        \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                       \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                       \n" +
                "		 WHERE id= pPackingSlipID;                          \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN                \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                      \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                    \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                      \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                      \n" +
                "					assyDescription,lineID, internalComment)                          \n" +
                "			  SELECT LAST_INSERT_ID(),refSalesorderDetid,partId,custPOLineID,                      \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  (shipQty * unitPrice),                   \n" +
                "					shippingNotes,whID,binID,puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                    \n" +
                "					puserRoleID,puserRoleID,shippingId,reflineID,otherCharges,                      \n" +
                "					assyDescription, lineID, internalComment                      \n" +
                "			FROM customer_packingslip_det                       \n" +
                "			WHERE refCustPackingSlipID= pPackingSlipID                       \n" +
                "			AND isDeleted = 0;                       \n" +
                "		END IF;                \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                       \n" +
                "		UPDATE `identity`                      \n" +
                "		SET `maxValue` = v_maxCurrSystemIDForInv + 1                      \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                        \n" +
                "  \n" +
                "	  ELSE                      \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                \n" +
                "			UPDATE customer_packingslip cp                \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                \n" +
                "				cp.`status`= tci.status,  			                      \n" +
                "				cp.subStatus = tci.subStatus,                \n" +
                "                cp.headerComment= tci.headerComment,                \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                \n" +
                "				cp.totalAmount = tci.totalAmount ,      \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),      \n" +
                "                cp.updatedBy = puserID,      \n" +
                "                cp.updateByRoleId = puserRoleID      \n" +
                "			WHERE id=pInvoiceID;                   \n" +
                "        ELSE                  \n" +
                "        # in case of tariff invoice & credit memo update all other field                \n" +
                "			UPDATE customer_packingslip  cp                  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                \n" +
                "			SET	cp.status= tci.status,                \n" +
                "				cp.subStatus= tci.subStatus,                \n" +
                "				cp.poNumber= tci.poNumber,                \n" +
                "				cp.poDate= tci.poDate,                \n" +
                "				cp.soNumber= tci.soNumber,                \n" +
                "				cp.soDate= tci.soDate,                \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                \n" +
                "				cp.invoiceDate= tci.invoiceDate,                \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                \n" +
                "				cp.headerComment= tci.headerComment,                \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                \n" +
                "				cp.billingAddress= tci.billingAddress,                \n" +
                "				cp.shippingAddress= tci.shippingAddress,                \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                \n" +
                "				cp.totalAmount= tci.totalAmount,                \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                \n" +
                "				cp.termsId= tci.termsId,                \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,            \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,            \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,      \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),      \n" +
                "                cp.updatedBy = puserID,      \n" +
                "                cp.updateByRoleId = puserRoleID,    \n" +
                "                cp.rmaNumber= tci.rmaNumber,  \n" +
                "                cp.billToId = tci.billToId,  \n" +
                "                cp.shipToId  = tci.shipToId,  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId  \n" +
                "			 WHERE cp.id = pInvoiceID;                   \n" +
                "  \n" +
                "            END IF;                \n" +
                "  \n" +
                "  \n" +
                "	  END IF;                         \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                          \n" +
                "       -- detail Id                  \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                  \n" +
                "      FROM customer_packingslip_det                   \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                   \n" +
                "      AND isDeleted = 0;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (694,'1.00','V1','Sproc_SaveCustomerInvoiceDetail- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 694:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(                                                  \n" +
                "	IN ppageIndex INT,                                                  \n" +
                "	IN precordPerPage INT,                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN pfilterStatus VARCHAR(1000),        \n" +
                "	IN pmfgCodelist VARCHAR(16000),        \n" +
                "	IN pmfgPartID  INT ,        \n" +
                "	IN ppsSearchType VARCHAR(5),        \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),        \n" +
                "	IN pstatusIds VARCHAR(50),        \n" +
                "	IN pfromDate DATE,        \n" +
                "	IN ptoDate DATE                                               \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"                                              \n" +
                "		SELECT cd.packingSlipNumber,        \n" +
                "		       cd.packingslipDate,        \n" +
                "		       cd.poNumber,        \n" +
                "		       cd.soNumber,        \n" +
                "		       cd.soDate,        \n" +
                "		       cd.poDate,        \n" +
                "		       cd.customerID,                                      \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,              \n" +
                "			cd.systemID,                                   \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,                                   \n" +
                "			cd.packingslipcomment,        \n" +
                "			cd.refCustInvoiceID,          \n" +
                "			cpd.internalComment,          \n" +
                "			cd.headerComment,         \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,        \n" +
                "		cd.subStatus,        \n" +
                "		cd.sorevision,                        \n" +
                "              cpd.partId,        \n" +
                "              fun_getRoHSNameByPartID(cpd.partId) rohsName,        \n" +
                "              `cpd`.assyDescription,                                       \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,        \n" +
                "            c.mfgPN as assyName ,        \n" +
                "            c.PIDCode as assyId,        \n" +
                "            c.mfgCodeID,        \n" +
                "            cd.termsID,        \n" +
                "            cd.shippingmethodid,    \n" +
                "            invoice.invoiceNumber,    \n" +
                "            invoice.id as invoiceID,          \n" +
                "            invoice.subStatus as invoiceSubstatus,        \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,        \n" +
                "                invoice.paymentStatus,        \n" +
                "             case when invoice.paymentStatus='PE' then 'Waiting For Payment' when    invoice.paymentStatus='PR' then 'Partial Payment Received' when invoice.paymentStatus='RE' then 'Payment Received' else '' end as paymentStatusValue,                              \n" +
                "         case when cd.subStatus=1 then 'Draft' when cd.subStatus=2 then 'Ready to Ship'                    \n" +
                "	when cd.subStatus=3 then 'Waiting For Shipping Label' when  cd.subStatus=4 then 'Waiting For Pickup' else 'Shipped' end statusConvertedValue,cd.refSalesOrderID,                                      \n" +
                "cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,              \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,                                      \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,                                 \n" +
                "case when invoice.subStatus=1 then 'Shipped - Not Invoiced' when invoice.subStatus=2 then 'Invoiced' when invoice.subStatus=3 then 'Corrected & Invoiced' else 'Pending' end as packingSlipStatusValue,                              \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,                          \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,                        \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,                      \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,                                          \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,                                          \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,                                       \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,                                       \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,                                       \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt                                      \n" +
                "  \n" +
                "		FROM customer_packingslip cd                             \n" +
                "		LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0                                        \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid                           \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0          \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID                                         \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'                                                \n" +
                "	\");                                                  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";                                        \n" +
                "	ELSE                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                  \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN                                \n" +
                "	SET pWhereClause=CONCAT(pWhereClause, ' and FIND_IN_SET(packingSlipStatusValue,''', pfilterStatus ,''')');                                \n" +
                "  END IF;        \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN                                \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');                                \n" +
                "  END IF;            \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN                                \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');                                \n" +
                "  END IF;          \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN                                \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId= ',pmfgPartID);                                \n" +
                "  END IF;         \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN        \n" +
                "    IF(ppsSearchType='E')THEN        \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',        \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');         \n" +
                "   ELSE        \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',        \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');         \n" +
                "  END IF;                              \n" +
                "  END IF;         \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN        \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');                   \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN        \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');          \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN        \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');                         \n" +
                "  END IF;           \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "	ELSE	                                                  \n" +
                "		SET rowNumWhere = '';                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                     \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                    \n" +
                "	EXECUTE query2;                                                    \n" +
                "	DEALLOCATE PREPARE query2;                                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                    \n" +
                "	PREPARE query1 FROM @SQLStatement2;    \n" +
                "	-- select @SQLStatement2;                                                  \n" +
                "	EXECUTE query1;                                                    \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (695,'1.00','V1',' Alter procedure Sproc_RetrieveCustomerPackingSlipDeatils-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 695:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(                                                        \n" +
                "	IN ppageIndex INT,                                                        \n" +
                "	IN precordPerPage INT,                                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                                        \n" +
                "	IN pWhereClause VARCHAR(16383),              	                        \n" +
                "    IN pFilterStatus LONGTEXT,                        \n" +
                "    IN pDueDate DATE,                        \n" +
                "    IN pAdditionalDays INT,                        \n" +
                "    IN pTermsAndAboveDays INT,                        \n" +
                "    IN pPoNumber VARCHAR(50),                        \n" +
                "    IN pIsExactSearchPO TINYINT,                        \n" +
                "    IN pMfgCodeIds LONGTEXT ,                      \n" +
                "    IN pPaymentTermsIds LONGTEXT ,                    \n" +
                "    IN pPartId INT,                  \n" +
                "    IN pTransType VARCHAR(5)                  \n" +
                "    -- IN pChequeNumber  VARCHAR(50)                        \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                        \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                       \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                                       \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                              \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                       \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"                                           \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate,                     \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,                  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,                        \n" +
                "        cp.invoiceNumber,cp.invoiceDate,                      \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,                  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,                  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'                     \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,                    \n" +
                "        cp.soNumber,cp.soDate,                                      \n" +
                "		cp.sorevision,                        \n" +
                "        cp.refSalesOrderID,                        \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,                         \n" +
                "        cp.refCustInvoiceID,                                      \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,                      \n" +
                "		 cp.status,                   \n" +
                "         cp.subStatus,                                    \n" +
                "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then ''                         \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'                         \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'                      \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'                   \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusValue,                        \n" +
                "		  cp.paymentStatus,                     \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,              \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,                      \n" +
                "		 cp.totalAmount,                                \n" +
                "		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-18 AND gc.refTransID=cp.id AND gc.isdeleted=0) invoiceDocumentCount,                                      \n" +
                "		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-17 AND gc.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id) AND gc.isdeleted=0) packingslipDocumentCount,                                      \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,                              \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,                           \n" +
                "         cp.customerID,                      \n" +
                "         cp.createdBy as createdById,                      \n" +
                "		 get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,              \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,                                      \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,                                      \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,                                      \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,                                        \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                    \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,                        \n" +
                "		 DATE_ADD((cp.invoiceDate ),INTERVAL IFNULL((case when cp.termsId is Not NULL then cp.termsDays-1                              \n" +
                "													else 0 end),0) DAY) paymentDueDate,                           \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,                        \n" +
                "         cp.termsDays termDays,                        \n" +
                "         cp.freeOnBoardName,                      \n" +
                "         cp.isLocked,                      \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,                      \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,                      \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,                      \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,                      \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,                        \n" +
                "         packingSlip.id packingSlipId,              \n" +
                "         (select group_concat(paymentNumber)              \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd               \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0               \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,          \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,      \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,    \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms    \n" +
                "		 FROM customer_packingslip cp                         \n" +
                "         join  mfgcodemst m on m.id = cp.customerID                                \n" +
                "         LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0        \n" +
                "		WHERE  cp.isDeleted=0                                      \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");                                                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN         \n" +
                "		IF pTransType = 'I' THEN        \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";                                              \n" +
                "        ELSE        \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";                                              \n" +
                "        END IF;            \n" +
                "	ELSE                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                        \n" +
                "	END IF;	                                                        \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                        \n" +
                "		SET pWhereClause = '1=1' ;                                                        \n" +
                "	END IF;	                        \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');                                                \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                                                \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');                                                \n" +
                "	END IF;                       \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN                    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');                     \n" +
                "    END IF;                    \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN                                      \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');                                      \n" +
                "	# END IF;                          \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN                                      \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');                                      \n" +
                "	END IF;                           \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                                \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                                \n" +
                "	END IF;                              \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN                              \n" +
                "		IF pIsExactSearchPO = 1 THEN                              \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'                              \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'                              \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'                              \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'                              \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"                              \n" +
                "						);                              \n" +
                "		ELSE                              \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'                              \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'                              \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'                              \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'                              \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"                              \n" +
                "						);                              \n" +
                "		END IF;                              \n" +
                "	END IF;                              \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;                        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                        \n" +
                "	ELSE	                                                        \n" +
                "		SET rowNumWhere = '';                                                        \n" +
                "	END IF;	                                                        \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                           \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);                                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                          \n" +
                "	EXECUTE query2;                                                          \n" +
                "	DEALLOCATE PREPARE query2;                                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,            \n" +
                "		 round((c.totalAmount),2) totalAmount,                            \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,                            \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) pendingAmount  from ( \",                         \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                          \n" +
                "	EXECUTE query1;                                                          \n" +
                "	DEALLOCATE PREPARE query1;                                                      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (696,'1.00','V1','Sproc_RetrieveCustomerInvoiceDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 696:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`   \n" +
                "ADD INDEX `IDX_packing_slip_material_receive_receiptType` (`receiptType` ASC, `status` ASC, `isDeleted` ASC) VISIBLE;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (697,'1.00','V1','created index on packing_slip_material_receive - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 697:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                    \n" +
                "	IN pPageIndex INT,                    \n" +
                "	IN pRecordPerPage INT,                    \n" +
                "	IN pOrderBy VARCHAR(255),                    \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pReceiptType VARCHAR(10),                    \n" +
                "	IN pMfgCodeIds LONGTEXT,                    \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,                    \n" +
                "	IN pDueDate DATE,                    \n" +
                "	IN pAdditionalDays INT,                    \n" +
                "	IN pTermsAndAboveDays INT,                    \n" +
                "	IN pInvoiceNumber VARCHAR(50),                    \n" +
                "	IN pIsExactSearch TINYINT,                  \n" +
                "	IN pMfrPnId INT,      \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "	DECLARE pOffset INT;                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);              \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;              \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;             \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.poNumber,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "					p.invoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,                    \n" +
                "					p.creditMemoType,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,               \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,    \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,    \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		             \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,  \n" +
                "					(      \n" +
                "						SELECT 	COUNT(1)       \n" +
                "						FROM 	genericfiles g       \n" +
                "						WHERE 	g.refTransID = p.id       \n" +
                "								AND     \n" +
                "								(    \n" +
                "									CASE     \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15    \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16      \n" +
                "										ELSE g.entityID = -13    \n" +
                "									END    \n" +
                "								)  \n" +
                "								AND g.isDeleted = 0  \n" +
                "					) invoiceDocCount,      \n" +
                "					(      \n" +
                "						SELECT 	COUNT(1)       \n" +
                "						FROM 	genericfiles g       \n" +
                "						WHERE 	g.refTransID = psm.id       \n" +
                "								AND g.entityID = -14  \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'       \n" +
                "								AND g.isDeleted =0  \n" +
                "					) packingSlipDocCount,                            \n" +
                "					pd.itemReceived,                              \n" +
                "					pd.otherChargesItemReceived,                                    \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					DATE_ADD((case 	WHEN p.receiptType = 'D' THEN          \n" +
                " 									p.debitMemoDate          \n" +
                " 								WHEN p.receiptType = 'C' THEN          \n" +
                " 									p.creditMemoDate          \n" +
                " 								ELSE p.invoiceDate                  \n" +
                " 							end),  \n" +
                "     					INTERVAL IFNULL((case when p.termsDays != 0 then  \n" +
                "     													p.termsDays-1  \n" +
                "     											else p.termsDays end),0) DAY) paymentDueDate,  \n" +
                "    					p.refPayementid,                  \n" +
                "					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,  \n" +
                " 					p.paymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                          \n" +
                "					psm.packingSlipModeStatus,                  \n" +
                "					ifnull(get_totalSupplierInvoicePaidAmountById(p.id),0) paidAmount,                  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,              \n" +
                "					p.invoiceRequireManagementApproval,              \n" +
                "					(              \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN              \n" +
                "								'Yes'              \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN              \n" +
                "								'No'              \n" +
                "						END              \n" +
                "					) invoiceRequireManagementApprovalValue,               \n" +
                "					p.invoiceApprovalStatus,              \n" +
                "					(              \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN              \n" +
                "								'Approved'              \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN              \n" +
                "								'Pending'              \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN              \n" +
                "								'N/A'              \n" +
                "						END              \n" +
                "					) invoiceApprovalStatusValue,              \n" +
                "					p.invoiceApprovedBy,              \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,              \n" +
                "					p.invoiceApprovalDate,              \n" +
                "					p.invoiceApprovalComment,              \n" +
                "					p.internalRemark              \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,                            \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount  \n" +
                "							from 	(                            \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                             \n" +
                "										psm.packingSlipSerialNumber,                             \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,                            \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,                            \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a                                      \n" +
                "							group by a.refPackingSlipMaterialRecID                            \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                      \n" +
                "				left join (                            \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                       \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                  \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                  \n" +
                "							from 		packing_slip_material_receive ps                                      \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                      \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),      \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                       \n" +
                "	);                                  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                                      \n" +
                "	END IF;                                      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');                                      \n" +
                "	END IF;                                      \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL and pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isDeleted = 0  \n" +
                "							   and pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               case when pExactPaymentNumberSearch = true then CONCAT(\" = \", pPaymentNumber ,\" \") else CONCAT(\" like '%\", pPaymentNumber, \"%' \") end  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                                      \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                      \n" +
                "	END IF;                                      \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                    \n" +
                "		IF pIsExactSearch = 1 THEN                    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                    \n" +
                "									AND (                    \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                    \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                    \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                    \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                    \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                    \n" +
                "									  \" ) \"                    \n" +
                "						);                    \n" +
                "		ELSE                    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                    \n" +
                "									AND (                    \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                    \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                    \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                    \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                    \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                    \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                    \n" +
                "									  \" ) \"                    \n" +
                "						);                    \n" +
                "		END IF;                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	/* to get total count of rows */                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                             \n" +
                "			SELECT 	c.*,                             \n" +
                "					case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                  \n" +
                "                    round(c.paidAmount,2) totalPaidAmount,                  \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                  \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                  \n" +
                "                    round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                 \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                             \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                               \n" +
                "  select @SQLStatement2;  \n" +
                "END;  \n" +
                "drop function if exists `fun_getReceiptTypeName`;  \n" +
                "CREATE FUNCTION `fun_getReceiptTypeName`(pReceiptType varchar(1)) RETURNS varchar(25)  \n" +
                "BEGIN      \n" +
                "	DECLARE vName varchar(25);  \n" +
                "		if pReceiptType = 'I' THEN  \n" +
                "			set vName = 'Invoice';  \n" +
                "		elseif pReceiptType = 'C' THEN  \n" +
                "			set vName = 'Credit Memo';  \n" +
                "		ELSE  \n" +
                "			set vName = 'Debit Memo';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "    return vName;  \n" +
                "  \n" +
                "end;  \n" +
                "drop function if exists `fun_getInvoiceStatusName`;  \n" +
                "CREATE FUNCTION `fun_getInvoiceStatusName`(pStatus varchar(2)) RETURNS varchar(25)  \n" +
                "BEGIN      \n" +
                "	DECLARE vName varchar(25);  \n" +
                "		if pStatus = 'PE' THEN  \n" +
                "			set vName = 'Pending';  \n" +
                "		elseif pStatus = 'I' THEN  \n" +
                "			set vName = 'Investigate';  \n" +
                "		elseif pStatus = 'A' THEN  \n" +
                "			set vName = 'Approved to Pay';  \n" +
                "		ELSE  \n" +
                "			set vName = 'Paid';  \n" +
                "		END IF;  \n" +
                "    return vName;  \n" +
                "end;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (698,'1.00','V1','Task 30175: Performance Tuning for Invoice list SP - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 698:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_packingslip_invoice_payment_det`;  \n" +
                "CREATE TRIGGER `Trg_BI_packingslip_invoice_payment_det` BEFORE INSERT ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN        \n" +
                "	DECLARE v_receiptType VARCHAR(1);        \n" +
                "	DECLARE v_invoiceTotal DECIMAL(18,8);        \n" +
                "	DECLARE v_totalPayment DECIMAL(18,8);        \n" +
                "	DECLARE v_isTariffInvoice TINYINT;        \n" +
                "	DECLARE v_refPaymentMode VARCHAR(1);        \n" +
                "	DECLARE vMessage VARCHAR(500);        \n" +
                "  \n" +
                "	SELECT 	a.refPaymentMode     \n" +
                "	INTO 	v_refPaymentMode      \n" +
                "	FROM 	packingslip_invoice_payment a        \n" +
                "	WHERE 	a.isDeleted = 0        \n" +
                "		   AND a.isPaymentVoided = 0        \n" +
                "		   AND a.id = NEW.refPayementid LIMIT 1;      \n" +
                "  \n" +
                "	IF v_refPaymentMode = 'P' THEN      \n" +
                "		SELECT 		a.receiptType, IFNULL(SUM(b.extendedPrice),0), a.isTariffInvoice      \n" +
                "		INTO 		v_receiptType, v_invoiceTotal, v_isTariffInvoice      \n" +
                "		FROM 		packing_slip_material_receive a        \n" +
                "		JOIN 		packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id        \n" +
                "		WHERE 		b.isDeleted = 0        \n" +
                "					AND a.isDeleted = 0        \n" +
                "					AND a.id = NEW.refPackingslipInvoiceID        \n" +
                "		GROUP BY 	a.receiptType, a.isTariffInvoice;        \n" +
                "  \n" +
                "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))        \n" +
                "		INTO 	v_totalPayment        \n" +
                "		FROM 	packingslip_invoice_payment a        \n" +
                "		JOIN 	packingslip_invoice_payment_det b        \n" +
                "		WHERE 	a.id = b.refPayementid        \n" +
                "				AND a.isDeleted = 0        \n" +
                "				AND b.isDeleted = 0        \n" +
                "				AND a.isPaymentVoided = 0        \n" +
                "				AND b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID;        \n" +
                "  \n" +
                "		IF v_receiptType IN ('D', 'C') THEN        \n" +
                "			IF IFNULL(NEW.paymentAmount,0) >= 0 THEN       \n" +
                "				SET vMessage = CONCAT('Debit or Credit Memo payment must be less than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));        \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;        \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) > 0 THEN        \n" +
                "				SET vMessage = CONCAT('Total payment amount for Debit or Credit Memo must be less or equal to zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));        \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;        \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN       \n" +
                "				UPDATE 	packing_slip_material_receive        \n" +
                "				SET 	`status` = 'P',        \n" +
                "					updatedBy = NEW.updatedBy,        \n" +
                "					updatedAt = NEW.updatedAt,        \n" +
                "					updateByRoleId = NEW.updateByRoleId        \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;    \n" +
                "			END IF;        \n" +
                "		ELSEIF v_receiptType = 'I' THEN        \n" +
                "			IF IFNULL(NEW.paymentAmount,0) <= 0 and ifnull(v_invoiceTotal,0) != 0 THEN        \n" +
                "				SET vMessage = CONCAT('Invoice Payment amount must be greater than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));        \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;        \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) < 0 THEN        \n" +
                "				SET vMessage = CONCAT('Total payment amount for an Invoice can not less than zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));        \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;        \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN        \n" +
                "				UPDATE 	packing_slip_material_receive        \n" +
                "				SET 	`status` = 'P',        \n" +
                "					updatedBy = NEW.updatedBy,        \n" +
                "					updatedAt = NEW.updatedAt,        \n" +
                "					updateByRoleId = NEW.updateByRoleId        \n" +
                "				 WHERE 	id = NEW.refPackingslipInvoiceID;        \n" +
                "  \n" +
                "				 IF v_isTariffInvoice = FALSE THEN        \n" +
                "					UPDATE 	packing_slip_material_receive        \n" +
                "					SET 	`status` = 'P',        \n" +
                "						updatedBy = NEW.updatedBy,        \n" +
                "						updatedAt = NEW.updatedAt,        \n" +
                "						updateByRoleId = NEW.updateByRoleId        \n" +
                "					WHERE 	refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;      \n" +
                "				 END IF;      \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (699,'1.00','V1','Task 30219: allow zero amount payment in case of the invoice amount is zero - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 699:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveInvoiceAndInvoiceLineDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(                                                                                                      \n" +
                "	IN pInvoiceDetail JSON,                                                            \n" +
                "	IN pPackingSlipId INT,                      \n" +
                "	IN pUserId VARCHAR(50),                  \n" +
                "	IN pUserRoleId VARCHAR(50)                              \n" +
                ")  \n" +
                "BEGIN                                 \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;                              \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;                              \n" +
                "	DECLARE v_IdOfInvoice INT;                              \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                                                                                              \n" +
                "	BEGIN                                                                                                                              \n" +
                "		ROLLBACK;                                                                                                                              \n" +
                "		RESIGNAL;                                                                                                                              \n" +
                "	END;                                                                              \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                                                                                              \n" +
                "	BEGIN                                                                                                                              \n" +
                "		ROLLBACK;                                                                                                                              \n" +
                "		RESIGNAL;                                                                                                                              \n" +
                "	END;                                                                              \n" +
                "  \n" +
                "	START TRANSACTION;  */                                                                           \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS                                                  \n" +
                "		SELECT 	*                                                   \n" +
                "		FROM 	JSON_TABLE(                                                  \n" +
                "			pInvoiceDetail,                                                  \n" +
                "			\"$[*]\" COLUMNS(                                                  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",                 \n" +
                "				poDate DATE PATH \"$.poDate\",                                           \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",                                                  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",                                                  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",                                                  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",                                                  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",                                                  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",                                                  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",                                                  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",      \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",                                                  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",                                                  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",                                                  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",                                                  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",                                                  \n" +
                "				applyDate DATE PATH \"$.applyDate\",                                    \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",                                    \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",                              \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",                \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",                \n" +
                "				termsDays INT PATH \"$.termsDays\",          \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",    \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",    \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\"    \n" +
                "			)                                                  \n" +
                "		) AS Invoice_Detail_JT;                           \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;                                                                                             \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail                                      \n" +
                "		(                                                                                            \n" +
                "			packingSlipSerialNumber VARCHAR(50),                                    \n" +
                "			refChargesTypeId INT,                          \n" +
                "			nickname VARCHAR(50),                      \n" +
                "			partID INT,                      \n" +
                "			refSupplierPartId INT,                      \n" +
                "			scanLabel VARCHAR(1000),                                    \n" +
                "			receivedQty DECIMAL(18,8),                      \n" +
                "			packingSlipQty DECIMAL(18,8),                      \n" +
                "			binID INT,                      \n" +
                "			warehouseID INT,                      \n" +
                "			parentWarehouseID INT,                      \n" +
                "			invoicePrice DECIMAL(18,8),                      \n" +
                "			purchasePrice DECIMAL(18,8),                      \n" +
                "			disputedPrice DECIMAL(18,8),                      \n" +
                "			approveNote VARCHAR(1000),                      \n" +
                "			otherCharges INT,                      \n" +
                "			`status` VARCHAR(1),                      \n" +
                "			extendedPrice DECIMAL(18,8),                      \n" +
                "			refCreditDebitInvoiceNo INT,                      \n" +
                "			difference DECIMAL(18,8),                      \n" +
                "			umidCreated TINYINT,                      \n" +
                "			poReleaseNumber VARCHAR(1000),                      \n" +
                "			packagingID INT,                    \n" +
                "			receivedStatus VARCHAR(2),                    \n" +
                "			remark LONGTEXT              \n" +
                "		);                           \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (                      \n" +
                "			packingSlipSerialNumber,                                    \n" +
                "			refChargesTypeId,                          \n" +
                "			nickname,                      \n" +
                "			partID,                      \n" +
                "			refSupplierPartId,                      \n" +
                "			scanLabel,                      \n" +
                "			receivedQty,                      \n" +
                "			packingSlipQty,                      \n" +
                "			binID,                      \n" +
                "			warehouseID,                      \n" +
                "			parentWarehouseID,                   \n" +
                "			invoicePrice,             \n" +
                "			disputedPrice,                      \n" +
                "			approveNote,                      \n" +
                "			otherCharges,                      \n" +
                "			`status`,         \n" +
                "			extendedPrice,                   \n" +
                "			refCreditDebitInvoiceNo,                      \n" +
                "			difference,                      \n" +
                "			umidCreated,                      \n" +
                "			poReleaseNumber,                      \n" +
                "			packagingID,                    \n" +
                "			receivedStatus,                    \n" +
                "			remark                      \n" +
                "		)                      \n" +
                "		SELECT  packingSlipSerialNumber,                                    \n" +
                "			refChargesTypeId,                          \n" +
                "			nickname,                      \n" +
                "			partID,                      \n" +
                "			refSupplierPartId,                      \n" +
                "			scanLabel,                      \n" +
                "			receivedQty,                      \n" +
                "			packingSlipQty,                      \n" +
                "			binID,                      \n" +
                "			warehouseID,                      \n" +
                "			parentWarehouseID,            \n" +
                "			invoicePrice,                     \n" +
                "			disputedPrice,                      \n" +
                "			approveNote,                      \n" +
                "			otherCharges,                      \n" +
                "			`status`,       \n" +
                "			(      \n" +
                "				CASE       \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN       \n" +
                "						(packingSlipQty * invoicePrice)      \n" +
                "					ELSE       \n" +
                "						NULL      \n" +
                "				END      \n" +
                "			),                     \n" +
                "			refCreditDebitInvoiceNo,                      \n" +
                "			difference,                      \n" +
                "			umidCreated,                      \n" +
                "			poReleaseNumber,                      \n" +
                "			packagingID,                    \n" +
                "			receivedStatus,                    \n" +
                "			remark                        \n" +
                "		FROM 	packing_slip_material_receive_det                       \n" +
                "		WHERE 	isDeleted = 0                       \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;                      \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;                              \n" +
                "  \n" +
                "		IF (v_CountOfInvoiceDetail > 0) THEN                              \n" +
                "			INSERT INTO packing_slip_material_receive (poNumber, poDate, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,     \n" +
                "						creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,     \n" +
                "                        creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval, internalRemark, invoiceApprovalStatus)    \n" +
                "			SELECT 	(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),           \n" +
                "				(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),          \n" +
                "				mfgCodeID,           \n" +
                "				(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),           \n" +
                "				packingSlipNumber, packingSlipDate,           \n" +
                "				(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),           \n" +
                "				(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),          \n" +
                "				(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),           \n" +
                "				(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),      \n" +
                "				(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),           \n" +
                "				(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),           \n" +
                "				receiptDate, receiptType,     \n" +
                "				`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/    \n" +
                "				applyDate, invoiceTotalDue, isTariffInvoice,           \n" +
                "				(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),          \n" +
                "				pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval, internalRemark,    \n" +
                "				(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/    \n" +
                "			FROM 	temp_Invoice_Detail;	                              \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;                              \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive                              \n" +
                "			SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,               \n" +
                "				`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)               \n" +
                "			WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)                              \n" +
                "					AND isDeleted = 0;                              \n" +
                "		END IF;                              \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;                              \n" +
                "		IF (v_CountOfInvoiceLineDetail > 0) THEN                              \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)                              \n" +
                "			SELECT 	v_IdOfInvoice, packingSlipSerialNumber,                        \n" +
                "				(CASE WHEN (refChargesTypeId > 0) THEN refChargesTypeId ELSE NULL END),                      \n" +
                "				nickname,                        \n" +
                "				(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),                          \n" +
                "				(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),                          \n" +
                "				scanLabel,                                        \n" +
                "				receivedQty,                        \n" +
                "				packingSlipQty,                        \n" +
                "				(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),                          \n" +
                "				(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),                          \n" +
                "				(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),                          \n" +
                "				invoicePrice,                        \n" +
                "				purchasePrice,                        \n" +
                "				disputedPrice,                        \n" +
                "				otherCharges,                       \n" +
                "				`status`,                        \n" +
                "				extendedPrice,                        \n" +
                "				(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),                          \n" +
                "				difference,                        \n" +
                "				umidCreated,                        \n" +
                "				poReleaseNumber,                        \n" +
                "				(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),                          \n" +
                "				receivedStatus,                     \n" +
                "				remark,                    \n" +
                "				pUserId,                        \n" +
                "				pUserId,                  \n" +
                "				pUserRoleId,                  \n" +
                "				pUserRoleId                              \n" +
                "			FROM 	temp_Invoice_Line_Detail;	                              \n" +
                "		END IF;                              \n" +
                "  \n" +
                "	-- COMMIT;                              \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (700,'1.00','V1','Sproc_SaveInvoiceAndInvoiceLineDetail - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 700:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                      \n" +
                "	IN pTransType VARCHAR(5),              \n" +
                "	IN pInvoiceType VARCHAR(1),                  \n" +
                "	IN pInvoiceID INT,              	                  \n" +
                "    IN pInvData JSON,                  \n" +
                "    IN pPackingSlipID INT,                  \n" +
                "	IN puserID INT,                            \n" +
                "	IN puserRoleID INT ,                        \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50)                              \n" +
                ")  \n" +
                "BEGIN                                   \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(8) ;                        \n" +
                "	DECLARE vTermsDays INT ;                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                              \n" +
                "	SELECT 	*                                                               \n" +
                "	FROM 	JSON_TABLE(                       \n" +
                "			pInvData,                                                              \n" +
                "			\"$[*]\" COLUMNS(    			                 \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                   \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                              \n" +
                "				`status` INT PATH \"$.status\",                  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                              \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                              \n" +
                "				`poDate` DATE PATH \"$.poDate\",                   \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                              \n" +
                "				`soDate` DATE PATH \"$.soDate\",                      \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                    \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                    \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                    \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                    \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                    \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                  \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,              \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                    \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,               \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                    \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",               \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\"         \n" +
                "			)                    \n" +
                "		) AS CustInv_JT;                   \n" +
                "  \n" +
                "	  IF(pInvoiceID IS NULL)THEN                            \n" +
                "			SELECT  termsDays INTO 	vTermsDays                  \n" +
                "			FROM genericCategory gc                   \n" +
                "			WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                  \n" +
                "			AND categoryType = 'Payment Terms';                  \n" +
                "  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                        \n" +
                "			SELECT `maxValue` INTO v_maxCurrSystemIDForInv                        \n" +
                "			FROM `identity`                        \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                        \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                        \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                        \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                        \n" +
                "				packingSlipComment,headerComment,sorevision,                        \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                        \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                      \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                   \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,      \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId )                             \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                        \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                        \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                   \n" +
                "					packingSlipComment,headerComment,sorevision,                        \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                       \n" +
                "					puserRoleID,'W' , (SELECT LPAD(v_maxCurrSystemIDForInv+1,8,0)), termsID ,salesCommissionTo,                      \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                  \n" +
                "					totalAmount,vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,      \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId     \n" +
                "			FROM temp_customerInvoice ;			                  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                          \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                         \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                         \n" +
                "		 WHERE id= pPackingSlipID;                            \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN                  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                        \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                      \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                        \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                        \n" +
                "					assyDescription,lineID, internalComment)                            \n" +
                "			  SELECT LAST_INSERT_ID(),refSalesorderDetid,partId,custPOLineID,                        \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  (shipQty * unitPrice),                     \n" +
                "					shippingNotes,whID,binID,puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                      \n" +
                "					puserRoleID,puserRoleID,shippingId,reflineID,otherCharges,                        \n" +
                "					assyDescription, lineID, internalComment                        \n" +
                "			FROM customer_packingslip_det                         \n" +
                "			WHERE refCustPackingSlipID= pPackingSlipID                         \n" +
                "			AND isDeleted = 0;                         \n" +
                "		END IF;                  \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                         \n" +
                "		UPDATE `identity`                        \n" +
                "		SET `maxValue` = v_maxCurrSystemIDForInv + 1                        \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;                          \n" +
                "  \n" +
                "	  ELSE                        \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                  \n" +
                "			UPDATE customer_packingslip cp                  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                  \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                  \n" +
                "				cp.`status`= tci.status,  			                        \n" +
                "				cp.subStatus = tci.subStatus,                  \n" +
                "                cp.headerComment= tci.headerComment,                  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                  \n" +
                "				cp.totalAmount = tci.totalAmount ,        \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),        \n" +
                "                cp.updatedBy = puserID,        \n" +
                "                cp.updateByRoleId = puserRoleID        \n" +
                "			WHERE id=pInvoiceID;                     \n" +
                "        ELSE                    \n" +
                "        # in case of tariff invoice & credit memo update all other field                  \n" +
                "			UPDATE customer_packingslip  cp                    \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                  \n" +
                "			SET	cp.status= tci.status,                  \n" +
                "				cp.subStatus= tci.subStatus,                  \n" +
                "				cp.poNumber= tci.poNumber,                  \n" +
                "				cp.poDate= tci.poDate,                  \n" +
                "				cp.soNumber= tci.soNumber,                  \n" +
                "				cp.soDate= tci.soDate,                  \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                  \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                  \n" +
                "				cp.invoiceDate= tci.invoiceDate,                  \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                  \n" +
                "				cp.headerComment= tci.headerComment,                  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                  \n" +
                "				cp.billingAddress= tci.billingAddress,                  \n" +
                "				cp.shippingAddress= tci.shippingAddress,                  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                  \n" +
                "				cp.totalAmount= tci.totalAmount,                  \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                  \n" +
                "				cp.termsId= tci.termsId,                  \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,              \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,              \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,        \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),        \n" +
                "                cp.updatedBy = puserID,        \n" +
                "                cp.updateByRoleId = puserRoleID,      \n" +
                "                cp.rmaNumber= tci.rmaNumber,    \n" +
                "                cp.billToId = tci.billToId,    \n" +
                "                cp.shipToId  = tci.shipToId,    \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,  \n" +
                "                cp.invoiceNumber = tci.invoiceNumber  \n" +
                "			 WHERE cp.id = pInvoiceID;                     \n" +
                "  \n" +
                "            END IF;                  \n" +
                "  \n" +
                "  \n" +
                "	  END IF;                           \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                            \n" +
                "       -- detail Id                    \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                    \n" +
                "      FROM customer_packingslip_det                     \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                     \n" +
                "      AND isDeleted = 0;                    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (701,'1.00','V1','Sproc_SaveCustomerInvoiceDetail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 701:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CopyAssyBOMQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(                \n" +
                "	IN poldAssyID INT,                \n" +
                "	IN pnewAssyID INT,                  \n" +
                "	IN UserID INT,                  \n" +
                "	IN pIsBOM TINYINT,                \n" +
                "	IN pIsExistingRFQ TINYINT,                \n" +
                "	IN pFromCustomerID INT,                \n" +
                "	IN pCustomerID INT,                \n" +
                "	IN pRfqFormID INT,                \n" +
                "	IN pCustomerApprovalComment TEXT,                \n" +
                "	IN pIsCopyPricing TINYINT,                \n" +
                "	IN pfromRFQAssyID INT,                \n" +
                "	IN pEmployeeID INT,                \n" +
                "    IN pRoleID INT                \n" +
                ")  \n" +
                "BEGIN                \n" +
                "DECLARE pCount INT;                \n" +
                "DECLARE pToRFQAssyID INT;                 \n" +
                "DECLARE pRFQTypeID INT;                 \n" +
                "DECLARE pRFQInDate DATETIME;                 \n" +
                "DECLARE pRFQDueDate DATETIME;                 \n" +
                "DECLARE pQuoteDateDiff INT;                \n" +
                "DECLARE pToAssemblyLineCount INT;                \n" +
                "DECLARE pisBOMVarified TINYINT;                \n" +
                "DECLARE pisReadyForPricing TINYINT;                \n" +
                "DECLARE vRFQID INT;                \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "  \n" +
                "  \n" +
                "    START TRANSACTION;                \n" +
                "	SELECT COUNT(1) INTO pToAssemblyLineCount FROM  rfq_lineitems WHERE partID = pnewAssyID AND IFNULL(isDeleted,0) = 0;        \n" +
                "    IF pIsBOM OR pToAssemblyLineCount = 0 THEN                 \n" +
                "	INSERT INTO `rfq_lineitems` (`rfqAssyBomID`, `rfqAssyID`, 	`lineID`,	`qpa`,	`refDesig`,	`custPN`,                \n" +
                "					`custPNID`,	`uomID`,	`description`,	`level`,`isInstall`,	`isPurchase`, `isNotRequiredKitAllocation`,               \n" +
                "					`isNoBidsPN`,	`isDraft`,	`isActive`,	`partTypeID`,		`partclassID`,                \n" +
                "					`leadQty`,	`attritionRate`,`totalQty`,	`manualAdj`,                \n" +
                "					`createdBy`,	`createdAt`,	                 \n" +
                "					`customerRev`,	`flextronRev`,	`customerDescription`,	`numOfPosition`,                \n" +
                "					`valueAddedCost`,	`refRFQLineItemID`,	`dnpQty`,		`dnpDesig`,                \n" +
                "					`org_lineID`,	`org_qpa`,	`org_refDesig`,	`org_custPN`,		`org_uomName`,                \n" +
                "					`org_level`,	`org_isInstall`,`org_isPurchase`,			`org_customerRev`,                \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,			`org_refLineID`,                \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,                \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,	`qpaDesignatorColorPriority`,                \n" +
                "					`miscStep`,	`partID`,	`duplicateCPNStep`,			`requireMountingTypeStep`,                \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus`,`substitutesAllow`,`org_substitutesAllow`,                \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,                \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,                \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`,  \n" +
                "                    `dnpQPARefDesStep`, `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`, `dnpInvalidREFDESStep`,   \n" +
                "                    `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,  \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`)                \n" +
                "				SELECT 	`rfqAssyBomID`,	`rfqAssyID`, 	`lineID`, 	`qpa`, 	`refDesig`, 	`custPN`,                 \n" +
                "					`custPNID`, 	`uomID`, 	`description`, 	`level`,`isInstall`, 	`isPurchase`,	`isNotRequiredKitAllocation`,             \n" +
                "					`isNoBidsPN`,  	`isDraft`, 	`isActive`, 	`partTypeID`, 		`partclassID`,                \n" +
                "					`leadQty`, 	`attritionRate`, `totalQty`,	`manualAdj`, 		                \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,                 \n" +
                "					`customerRev`, 	`flextronRev`, 	`customerDescription`, 	`numOfPosition`,                   \n" +
                "					`valueAddedCost`, 	`refRFQLineItemID`, 	`dnpQty`, 		`dnpDesig`,                \n" +
                "					`org_lineID`, 	`org_qpa`, 	`org_refDesig`, `org_custPN`, 		`org_uomName`,                 \n" +
                "					`org_level`, 	`org_isInstall`, `org_isPurchase`, 			`org_customerRev`,                \n" +
                "					`org_customerDescription`,	`org_numOfPosition`, 			`org_refLineID`,                 \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,	                \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,	`qpaDesignatorColorPriority`,                \n" +
                "					`miscStep`,	pnewAssyID `partID`,	`duplicateCPNStep`,			`requireMountingTypeStep`,                \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus` ,`substitutesAllow`,`org_substitutesAllow`,         \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,         \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,                        \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`, `dnpQPARefDesStep`,  \n" +
                "                    `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`, `dnpInvalidREFDESStep`, `createByRoleId`,   \n" +
                "                    `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,  \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`                        \n" +
                "			 FROM rfq_lineitems WHERE partID = poldAssyID AND IFNULL(isDeleted,0) = 0;                    \n" +
                "  \n" +
                "  \n" +
                "    INSERT INTO `rfq_lineitems_alternatepart` (	`rfqLineItemsID`,	`distributor`,	`distMfgCodeID`,	`distPN`,                \n" +
                "							`distMfgPNID`,		`mfgCode`,	`mfgCodeID`,		`mfgPN`,                \n" +
                "							`mfgPNID`,		`description`,	`isActive`,		`isApproved`,                \n" +
                "							`isNoBidsPN`,		`isDraft`,	`RoHSStatusID`,		`copyAlternetPartID`,                \n" +
                "							`createdBy`,		`createdAt`,	`mfgVerificationStep`,                \n" +
                "							`mfgDistMappingStep`,	`mfgCodeStep`,	`distVerificationStep`,	`distCodeStep`,                \n" +
                "							`getMFGPNStep`,		`obsoletePartStep`,			`mfgGoodPartMappingStep`,                \n" +
                "							`mfgPNStep`,		`distPNStep`,	`org_mfgCode`,                \n" +
                "							`org_mfgPN`,		`org_distributor`,`org_distPN`,		`badMfgPN`,                \n" +
                "							`distGoodPartMappingStep`,		`nonRohsStep`,		`epoxyStep`,                \n" +
                "							`invalidConnectorTypeStep`,`duplicateMPNInSameLineStep`,                \n" +
                "							`parttypeID`,		`mountingtypeID`,`partcategoryID`,	`partID`,                \n" +
                "							`userData1`,            `userData2`,	`userData3`,		`userData4`,                \n" +
                "							`userData5`,		`userData6`,	`userData7`,		`userData8`,                \n" +
                "							`userData9`,		`userData10`,	`mismatchMountingTypeStep`,                \n" +
                "							`mismatchFunctionalCategoryStep`,	`restrictUseWithPermissionStep`,                \n" +
                "							`restrictUsePermanentlyStep`,		`pickupPadRequiredStep`,                \n" +
                "							`matingPartRquiredStep`,		`driverToolsRequiredStep`,                \n" +
                "							`functionalTestingRequiredStep`,	`mismatchValueStep`,                \n" +
                "							`mismatchPackageStep`,			`mismatchToleranceStep`,                \n" +
                "							`mismatchTempratureStep`,		`mismatchPowerStep`,                \n" +
                "							`uomMismatchedStep`,                \n" +
                "							`programingRequiredStep`,	        `mismatchColorStep`, 	`customerApproval`,        \n" +
                "							`customerApprovalBy`, `customerApprovalDate`,`isCustomerUnAppoval`,`customerUnAppovalBy`,`customerUnAppovalDate`,         \n" +
                "							`restrictUseInBOMStep`,`mismatchNumberOfRowsStep`,`partPinIsLessthenBOMPinStep`,`tbdPartStep`,`exportControlledStep`,`restrictUseInBOMWithPermissionStep`,         \n" +
                "							`isUnlockApprovedPart`,`unknownPartStep`, `defaultInvalidMFRStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,     \n" +
                "                            `restrictUseExcludingAliasStep`, `restrictUseExcludingAliasWithPermissionStep`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `approvedMountingType`,    \n" +
                "                            `mismatchRequiredProgrammingStep`,`mappingPartProgramStep`, `suggestedByApplicationMsg`,`suggestedByApplicationStep`,  \n" +
                "                            `suggestedGoodPartStep`,`suggestedGoodDistPartStep`, `mismatchCustomPartStep`)    	                \n" +
                "				SELECT 			rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, 	ra.`distPN`,                 \n" +
                "							ra.`distMfgPNID`, 	ra.`mfgCode`, 	ra.`mfgCodeID`, 	ra.`mfgPN`,                 \n" +
                "							ra.`mfgPNID`,		ra.`description`, ra.`isActive`, 	ra.`isApproved`,                 \n" +
                "							ra.`isNoBidsPN`, 	ra.`isDraft`, 	ra.`RoHSStatusID`, 	ra.`copyAlternetPartID`,                \n" +
                "							UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`,	ra.`mfgVerificationStep`,                 \n" +
                "							ra.`mfgDistMappingStep`,ra.`mfgCodeStep`,ra.`distVerificationStep`,ra.`distCodeStep`,                  \n" +
                "							ra.`getMFGPNStep`, 	ra.`obsoletePartStep`, 			ra.`mfgGoodPartMappingStep`,                \n" +
                "							ra.`mfgPNStep`, 	ra.`distPNStep`, ra.`org_mfgCode`,	                \n" +
                "							ra.`org_mfgPN`,		ra.`org_distributor`,ra.`org_distPN`,	ra.`badMfgPN`,                \n" +
                "							ra.`distGoodPartMappingStep`,		ra.`nonRohsStep`,		ra.`epoxyStep`,                \n" +
                "							ra.`invalidConnectorTypeStep`,ra.`duplicateMPNInSameLineStep`,                \n" +
                "							ra.`parttypeID`,		ra.`mountingtypeID`,ra.`partcategoryID`,	pnewAssyID `partID`,                \n" +
                "							ra.`userData1`,         ra.`userData2`,	ra.`userData3`,		ra.`userData4`,                \n" +
                "							ra.`userData5`,		ra.`userData6`,	ra.`userData7`,		ra.`userData8`,                \n" +
                "							ra.`userData9`,		ra.`userData10`,	ra.`mismatchMountingTypeStep`,                \n" +
                "							ra.`mismatchFunctionalCategoryStep`,	ra.`restrictUseWithPermissionStep`,                \n" +
                "							ra.`restrictUsePermanentlyStep`,	ra.`pickupPadRequiredStep`,                \n" +
                "							ra.`matingPartRquiredStep`,		ra.`driverToolsRequiredStep`,                \n" +
                "							ra.`functionalTestingRequiredStep`,	ra.`mismatchValueStep`,                \n" +
                "							ra.`mismatchPackageStep`,		ra.`mismatchToleranceStep`,                \n" +
                "							ra.`mismatchTempratureStep`,		ra.`mismatchPowerStep`,                \n" +
                "							ra.`uomMismatchedStep`,                \n" +
                "							ra.`programingRequiredStep`,	        ra.`mismatchColorStep`,	ra.`customerApproval`,        \n" +
                "							ra.`customerApprovalBy`, 		ra.`customerApprovalDate`,ra.`isCustomerUnAppoval`,ra.`customerUnAppovalBy`,ra.`customerUnAppovalDate`,         \n" +
                "							ra.`restrictUseInBOMStep`,ra.`mismatchNumberOfRowsStep`,ra.`partPinIsLessthenBOMPinStep`,ra.`tbdPartStep`,ra.`exportControlledStep`,ra.`restrictUseInBOMWithPermissionStep`,         \n" +
                "							ra.`isUnlockApprovedPart`,ra.`unknownPartStep`, ra.`defaultInvalidMFRStep`, ra.`restrictUseInBOMExcludingAliasStep`, ra.`restrictUseInBOMExcludingAliasWithPermissionStep`,       \n" +
                "                            ra.`restrictUseExcludingAliasStep`, ra.`restrictUseExcludingAliasWithPermissionStep`, ra.`createByRoleId`, ra.`updateByRoleId`, ra.`deleteByRoleId`, ra.`approvedMountingType`,    \n" +
                "                            ra.`mismatchRequiredProgrammingStep`, ra.`mappingPartProgramStep`, ra.`suggestedByApplicationMsg`, ra.`suggestedByApplicationStep`,  \n" +
                "                            ra.`suggestedGoodPartStep`,ra.`suggestedGoodDistPartStep`,ra.`mismatchCustomPartStep`  \n" +
                "				FROM rfq_lineitems_alternatepart ra                  \n" +
                "				JOIN rfq_lineitems ral ON ral.id = ra.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0                  \n" +
                "				JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0                  \n" +
                "				WHERE ra.partID = poldAssyID AND IFNULL(ra.isDeleted, 0) = 0;                \n" +
                "  \n" +
                "	 /* Copy Additional comment form Old BOM to New generated Assembly*/  \n" +
                "		INSERT INTO rfq_lineitems_additional_comment   \n" +
                "        (`lineID`,`description`,`rfqLineItemID`,`createdBy`,`createdAt`,`partID`)    \n" +
                "			SELECT rlc.lineID, rlc.description, rl.id `rfqLineItemID`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pnewAssyID `partID`   \n" +
                "            FROM rfq_lineitems_additional_comment rlc        \n" +
                "			JOIN rfq_lineitems ral ON ral.id = rlc.rfqLineItemID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0                  \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0                  \n" +
                "			WHERE rlc.partID = poldAssyID AND IFNULL(rlc.isDeleted, 0) = 0;         \n" +
                "  \n" +
                "     /* Copy Approval comment for line level errors */  \n" +
                "		INSERT INTO rfq_lineitems_approval_comment   \n" +
                "        (`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`, `createdBy`,`createdAt`, `errorCode`,  \n" +
                "        `rfqLineItemsID`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)  \n" +
                "        SELECT rac.comment,rac.`approvalBy`,rac.`approvalDate`, rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,  \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode, rl.id `rfqLineItemsID`,                        \n" +
                "				rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`        \n" +
                "		FROM rfq_lineitems_approval_comment rac        \n" +
                "		JOIN rfq_lineitems ral ON ral.id = rac.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0                  \n" +
                "		JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0                  \n" +
                "		WHERE IFNULL(rac.isDeleted, 0) = 0;     \n" +
                "  \n" +
                "   /* Copy Approval comment for Alternete part level errors */  \n" +
                "		INSERT INTO `rfq_lineitems_approval_comment`        \n" +
                "		(`rfqLineItemsAlternatePartID`,`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`,  `createdBy`,`createdAt`,  \n" +
                "        `errorCode`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)  \n" +
                "        SELECT  rl.id `rfqLineItemsAlternatePartID`, rac.comment,rac.`approvalBy`,rac.`approvalDate`,  \n" +
                "				rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,         \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode,                        \n" +
                "				rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`                \n" +
                "		FROM rfq_lineitems_approval_comment rac        \n" +
                "		JOIN rfq_lineitems_alternatepart ral ON ral.id = rac.rfqLineItemsAlternatePartID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0                  \n" +
                "		JOIN rfq_lineitems_alternatepart rl ON rl.partID = pnewAssyID AND rl.mfgPNID = ral.mfgPNID AND IFNULL(rl.isDeleted,0) = 0                  \n" +
                "		WHERE IFNULL(rac.isDeleted, 0) = 0;         \n" +
                "	   -- Have to add Part assembly relation entry manage                \n" +
                "	   CALL Sproc_CreatePartAssyBomRelationshipForAllParent (pnewAssyID, UserID);                \n" +
                "   END IF;        \n" +
                "  \n" +
                "	   IF IFNULL(pIsBOM,FALSE) != TRUE THEN        \n" +
                "	   	IF IFNULL(pIsExistingRFQ ,0) = 0 THEN                \n" +
                "        SELECT salesCommissionTo INTO @salesCommissionTo FROM rfqforms WHERE id = (SELECT rfqrefID FROM rfq_assemblies WHERE id = pfromRFQAssyID);            \n" +
                "			INSERT INTO `rfqforms`(	`customerId`,`employeeID`,`isActive`,`quoteNote`,`createdBy`,`createdAt`,`updatedBy`,`salesCommissionTo`)                \n" +
                "					VALUES (pCustomerID, pEmployeeID, TRUE, \"\", UserID, fun_DatetimetoUTCDateTime(),UserID,@salesCommissionTo);                \n" +
                "			SELECT LAST_INSERT_ID() INTO pRfqFormID;                  \n" +
                "		END IF;                \n" +
                "		IF (SELECT COUNT(1) FROM rfqType WHERE `name` = 'Repeat') = 0 THEN                \n" +
                "			INSERT INTO rfqType (`name`, `description`, `isActive`,`createdBy`,`createdAt`,`updatedBy`)                        \n" +
                "				VALUES ('Repeat', 'Repeat Assembly', TRUE, UserID, fun_DatetimetoUTCDateTime(),UserID);         \n" +
                "			SELECT LAST_INSERT_ID() INTO pRFQTypeID;                  \n" +
                "		ELSE                        \n" +
                "		       SELECT id INTO pRFQTypeID FROM rfqType WHERE `name` = 'Repeat';                        \n" +
                "		END IF;                         \n" +
                "		SELECT quoteInDate , quoteDueDate INTO pRFQInDate, pRFQDueDate FROM rfq_assemblies WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;                \n" +
                "  \n" +
                "		SELECT DATEDIFF(pRFQDueDate, pRFQInDate) INTO pQuoteDateDiff;                \n" +
                "  \n" +
                "    /* Copy RFQ Assembly detail */  \n" +
                "		INSERT INTO `rfq_assemblies`  \n" +
                "        (`rfqrefID`,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,                \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,`createdBy`,`createdAt`,`updatedBy`,        \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`,`status`,`isBOMVerified`,`isReadyForPricing`,                \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`,`isSummaryComplete`,                \n" +
                "				`repeatExpectedQty`,`repeatFrequency`,`quoteFinalStatus`,`bomStatus`,`jobTypeID`,                \n" +
                "				`RFQTypeID`,`partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,                \n" +
                "				`additionalRequirement`,`quoteInDate`, `quoteDueDate`,                \n" +
                "				`copyRefRfqId`,`copyConfirmationDescription`,`quotePriority`)                \n" +
                "		SELECT pRfqFormID `rfqrefID` ,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,                \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`, UserID `updatedBy`,         \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`, 1 ,`isBOMVerified`,`isReadyForPricing`,                \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`, 0 ,                \n" +
                "				`repeatExpectedQty`,`repeatFrequency`, 1 ,`bomStatus`,`jobTypeID`,                \n" +
                "				pRFQTypeID `RFQTypeID`,pnewAssyID `partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,                \n" +
                "				`additionalRequirement`,fun_DatetimetoUTCDateTime() `quoteInDate`,DATE_ADD(fun_DatetimetoUTCDateTime(), INTERVAL pQuoteDateDiff DAY) `quoteDueDate`,        \n" +
                "				pfromRFQAssyID `copyRefRfqId`, pCustomerApprovalComment `copyConfirmationDescription`, `quotePriority`                \n" +
                "		FROM rfq_assemblies WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;                \n" +
                "  \n" +
                "		SELECT LAST_INSERT_ID() INTO pToRFQAssyID;                  \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity detail */  \n" +
                "		INSERT INTO `rfq_assy_quantity`(`rfqAssyID`, `requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,                \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,                \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,                \n" +
                "				`createdBy`,`createdAt`,`quantityType`)                \n" +
                "		SELECT pToRFQAssyID `rfqAssyID`,`requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,                \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,                \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,                \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,`quantityType`                \n" +
                "		FROM rfq_assy_quantity WHERE rfqAssyID = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0                \n" +
                "        AND rfqPriceGroupId IS NULL AND rfqPriceGroupDetailId IS NULL;                \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity turn time detail */  \n" +
                "        INSERT INTO `rfq_assy_quantity_turn_time`(`rfqAssyQtyID`,`turnTime`,`unitOfTime`,`createdBy`,`createdAt`)                \n" +
                "		SELECT rq.`Id`, rqt.`turnTime`, rqt.`unitOfTime`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`                \n" +
                "		FROM rfq_assy_quantity_turn_time rqt                  \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0 AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL                \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0                  \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;                 \n" +
                "	/* Copy RFQ Assembly Quantity Price selection setting from part costing */	  \n" +
                "        INSERT INTO rfq_assy_quantity_price_selection_setting  \n" +
                "        (`qtyID`,	`stock`,	`price`, `isCheckRequiredQty`,	`isLeadTime`, `createdBy`,	`createdAt`,	`remark`,               \n" +
                "			`stockPercentage`,	`packagingID`,`settingType`,`leadTime`)               \n" +
                "		SELECT rq.`Id` `qtyID`, rqt.`stock`, rqt.`price`,               \n" +
                "				rqt.`isCheckRequiredQty`,	rqt.`isLeadTime`,                \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rqt.`remark`,               \n" +
                "				rqt.`stockPercentage`,	rqt.`packagingID`, rqt.`settingType`,rqt.`leadTime`            \n" +
                "		FROM rfq_assy_quantity_price_selection_setting rqt                  \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.qtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0                  \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID =  pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0                  \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;        \n" +
                "	# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy                \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`                  \n" +
                "		(`lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,                  \n" +
                "		`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,                   \n" +
                "		`numOfPosition`,`consolidatedLineItemIDs`, `refDesig`,`numOfRows`,`consolidatedpartlineID`,`isqpaMismatch`,`restrictCPNUseInBOMStep`,`restrictCPNUsePermanentlyStep`,`restrictCPNUseWithPermissionStep`,`custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)                  \n" +
                "		SELECT  rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, pToRFQAssyID `rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,                  \n" +
                "					rcl.`isActive`, rcl.`rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,                   \n" +
                "					rcl.`qpa`,fun_DatetimetoUTCDateTime() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,                  \n" +
                "					fun_getconsolidatedlineitems(rcl.id,pfromRFQAssyID,pnewAssyID, poldAssyID) `consolidatedLineItemIDs` ,        \n" +
                "					rcl.`refDesig`,rcl.`numOfRows`,rcl.`consolidatedpartlineID`,rcl.`isqpaMismatch`,rcl.`restrictCPNUseInBOMStep`,rcl.`restrictCPNUsePermanentlyStep`,rcl.`restrictCPNUseWithPermissionStep`,rcl.`custPNID`,  \n" +
                "                    rcl.`consolidateRestrictPartDetail`,rcl.`consolidatedPartWithFlagDetail`  \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rcl                  \n" +
                "		WHERE rcl.rfqAssyID = pfromRFQAssyID AND rcl.deletedAt IS NULL;                \n" +
                "  \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy                  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                  \n" +
                "					(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`, `customerApproval`,isdeleted,deletedAt,deletedBy,  \n" +
                "                    `restrictUseInBOMStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,`restrictUseInBOMWithPermissionStep`,  \n" +
                "                    `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`,  \n" +
                "					`restrictUseInBOMExcludingAliasStep`,`restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`,`mismatchMountingTypeStep`)                  \n" +
                "		SELECT rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`, UserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, rap.`mfgCodeID`,              \n" +
                "				com.PIDCode `PIDCode` , rap.`customerApproval`, rcl.isdeleted, rcl.deletedAt, rcl.deletedBy,rap.`restrictUseInBOMStep`,  \n" +
                "                rap.`restrictUseWithPermissionStep`,rap.`restrictUsePermanentlyStep`,rap.`restrictUseInBOMWithPermissionStep`,  \n" +
                "                rap.`restrictUseExcludingAliasStep`,rap.`restrictUseExcludingAliasWithPermissionStep`,  \n" +
                "				rap.`restrictUseInBOMExcludingAliasStep`,rap.`restrictUseInBOMExcludingAliasWithPermissionStep`,rap.`approvedMountingType`,rap.`mismatchMountingTypeStep`  \n" +
                "		FROM rfq_lineitems_alternatepart rap                  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.rfqLineItemID = rap.rfqLineItemsID                 \n" +
                "		JOIN component com ON com.id = rap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                  \n" +
                "		WHERE rcl.rfqAssyId = pToRFQAssyID                    \n" +
                "		GROUP BY rap.mfgPNID, rap.rfqLineItemsID;                \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS result;                  \n" +
                "			CREATE TEMPORARY TABLE result                   \n" +
                "			SELECT rcl.lineID, raq.requestQty, rcl.qpa, rcl.rfqLineItemID, rlq.*         \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rlq                   \n" +
                "			LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rlq.consolidateID AND rcl.rfqAssyID = pfromRFQAssyID                  \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON raq.id = rlq.qtyID                \n" +
                "			WHERE rlq.isDeleted = 0 AND rcl.isDeleted = 0 AND raq.isDeleted = 0 AND raq.rfqAssyID = pfromRFQAssyID;                  \n" +
                "  \n" +
                "				# create temporary table for mapping quantity between old assembly and new assembly                  \n" +
                "  					DROP TEMPORARY TABLE IF EXISTS mapping;                  \n" +
                "					CREATE TEMPORARY TABLE mapping                  \n" +
                "					SELECT a.requestQty, IFNULL((SELECT MAX(b.requestqty)  FROM rfq_assy_quantity b                   \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty <= a.requestQty AND b.isDeleted = 0),                  \n" +
                "					(SELECT MIN(b.requestqty)  FROM rfq_assy_quantity b                   \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty > a.requestQty AND b.isDeleted = 0))mappingQty                  \n" +
                "					FROM rfq_assy_quantity a                   \n" +
                "					WHERE a.rfqAssyID = pToRFQAssyID;                  \n" +
                "  \n" +
                "    # copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy                  \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                  \n" +
                "					(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,                  \n" +
                "					`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`,        \n" +
                "					`pricingSuppliers`, `apiLead`,`componentID`,`packaging`,`rfqQtySupplierID`,        \n" +
                "					`quoteQty`,`pricenotselectreason`,`availableInternalStock`,`availableInternalStockTimeStamp`,        \n" +
                "					`isBomUpdate`,`LOAprice`,`quoteQtyEach`, `unitEachPrice`,`supplierEachStcok`)                  \n" +
                "					SELECT rq.id `qtyID`, R.finalPrice `finalPrice`, cl.id `consolidateID`,                   \n" +
                "					fun_DatetimetoUTCDateTime() `createdAt`, UserID `createdBy`, R.unitPrice `unitPrice`, R.`supplier`, R.`selectedMpn`,                  \n" +
                "					R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`,        \n" +
                "					R.`pricingSuppliers`,R.`apiLead`,R.`componentID`,R.`packaging`,R.`rfqQtySupplierID`,        \n" +
                "					R.`quoteQty`,R.`pricenotselectreason`,R.`availableInternalStock`,R.`availableInternalStockTimeStamp`,        \n" +
                "					R.`isBomUpdate`,R.`LOAprice` ,R.`quoteQtyEach`, R.`unitEachPrice`,R.`supplierEachStcok`                   \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem cl                  \n" +
                "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id AND clq.isDeleted = 0                 \n" +
                "					LEFT JOIN result R ON R.rfqLineItemID = cl.rfqLineItemID                \n" +
                "					LEFT JOIN mapping m ON  rq.requestQty = m.requestQty                   \n" +
                "					WHERE cl.rfqAssyID = pToRFQAssyID AND cl.isDeleted = 0 AND m.mappingQty = R.requestQty;                       \n" +
                "  \n" +
                "		# Start Labor details	copy                      \n" +
                "		INSERT INTO `rfq_labor_assy_qpa_detail`                      \n" +
                "				    (`rfqAssyID`, `partID`, `subAssyID`, `perBuildQty`, `bomInternalVersion`,                      \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,                       \n" +
                "				     `originalQPA`, `isMismatchQPA`, `parPartID`, `level`, `isInstall`,                      \n" +
                "				     `createByRoleId`, `updateByRoleId`)                        \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`, rl.`partID`, rl.`subAssyID`, rl.`perBuildQty`, rl.`bomInternalVersion`,                      \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,                      \n" +
                "					rl.`originalQPA`, rl.`isMismatchQPA`, rl.`parPartID`, rl.`level`, rl.`isInstall`,                      \n" +
                "					rl.`createByRoleId`, rl.`updateByRoleId` FROM rfq_labor_assy_qpa_detail rl                      \n" +
                "				WHERE rl.rfqAssyID = pfromRFQAssyID AND rl.isDeleted = 0;     \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`                      \n" +
                "				    (`rfqAssyID`, `partID`, `mountingTypeID`, `lineCount`,                      \n" +
                "				     `totalQPA`, `isDeleted`, `createdBy`,                      \n" +
                "				     `createdAt`, `subAssyID`,                      \n" +
                "				     `isInstall`, `createByRoleId`, `updateByRoleId`)                      \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`,rlm.`partID`, rlm.`mountingTypeID`, rlm.`lineCount`,                      \n" +
                "				     rlm.`totalQPA`, 0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rlm.`subAssyID`,                      \n" +
                "				     rlm.`isInstall`, rlm.`createByRoleId`, rlm.`updateByRoleId`                      \n" +
                "				FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlm                      \n" +
                "				WHERE rlm.rfqAssyID = pfromRFQAssyID AND rlm.isDeleted = 0;                        \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`                      \n" +
                "				    (`rfqAssyQtyID`, `rfqAssyBOMMountingID`, `price`, `perAssyPrice`,                      \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,                      \n" +
                "				     `isPricePending`, `overHeadPrice`, `overHeadAssyPrice`)                      \n" +
                "			SELECT rq.id `rfqAssyQtyID`, lmc.id `rfqAssyBOMMountingID`,  rlc.`price`, rlc.`perAssyPrice`,                      \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,                      \n" +
                "					rlc.`isPricePending`, rlc.`overHeadPrice`, rlc.`overHeadAssyPrice`                      \n" +
                "					FROM rfq_assy_qtywise_bom_laborcosting_detail rlc                  \n" +
                "					JOIN rfq_assy_quantity raq ON raq.id = rlc.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0  AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL                \n" +
                "					LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0                        \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lm ON lm.id = rlc.rfqAssyBOMMountingID AND lm.rfqAssyID = pfromRFQAssyID AND IFNULL(lm.isDeleted,0) = 0  AND lm.mountingTypeID IS NOT NULL                   \n" +
                "					LEFT JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lmc ON lmc.mountingTypeID = lm.mountingTypeID AND lmc.rfqAssyID = pToRFQAssyID AND IFNULL(lmc.isDeleted,0) = 0 AND lmc.mountingTypeID IS NOT NULL                   \n" +
                "					WHERE IFNULL(rlc.isDeleted, 0) = 0;                       \n" +
                "		# End Labor details copy		                      \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS mapping;                  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS result;                \n" +
                "  \n" +
                "					SELECT liveVersion INTO @internalVerion FROM component WHERE id = pnewAssyID;        \n" +
                "					UPDATE rfq_assemblies SET partCostingBOMInternalVersion = @internalVerion WHERE id = pToRFQAssyID AND IFNULL(isDeleted, 0) = 0;                \n" +
                "  \n" +
                "    END IF;                \n" +
                "    COMMIT;        \n" +
                "	SELECT pToRFQAssyID;                   \n" +
                "    IF IFNULL(pIsBOM,FALSE) != TRUE THEN        \n" +
                "		SELECT rfqrefID INTO vRFQID FROM rfq_assemblies WHERE id = pToRFQAssyID;                \n" +
                "		CALL Sproc_CopyRFQAssyDocFolderToNewRFQAssy(pfromRFQAssyID,pToRFQAssyID,UserID);                  \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pfromRFQAssyID);                  \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pToRFQAssyID);                  \n" +
                "        CALL Sproc_CreateCostSummaryEntry (vRFQID,UserID,pRoleID);                  \n" +
                "    END IF;                  \n" +
                "	-- SELECT * FROM rfq_lineitems WHERE partID = pnewAssyID AND isDeleted = 0;                  \n" +
                "END;  \n" +


                /* **************************** New Script -> 02-02-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                              \n" +
                "	IN pFromPartID INT,                  \n" +
                "    IN pNewEpicorType varchar(50),                  \n" +
                "    IN pNewAssemblyType INT,                  \n" +
                "    IN pNewMfgcodeID INT,                  \n" +
                "    IN pNewCustAssyPN varchar(500),                  \n" +
                "    IN pNewPartRev varchar(50),                  \n" +
                "    IN pNewMfgPN varchar(100),                  \n" +
                "    IN pNewAssyCode varchar(50),                  \n" +
                "    IN pNewNickName varchar(50),                  \n" +
                "    IN pNewPIDCode varchar(109),           \n" +
                "    IN pIsCPN tinyint,      \n" +
                "    IN pIsCustom tinyInt,      \n" +
                "    IN pUserID Int,                              \n" +
                "    IN pUserRoleId Int,                              \n" +
                "    IN pIsAttribute tinyint,                              \n" +
                "    IN pIsSettings tinyint,                              \n" +
                "    IN pIsAdditionalAttibute tinyint,                              \n" +
                "    IN pIsPackagingDetail tinyint,                              \n" +
                "    IN pIsStandards tinyint,                              \n" +
                "    IN pIsRequiredFunctionalType tinyint,                              \n" +
                "    IN pIsRequiredMountingType tinyint,                              \n" +
                "    IN pIsPackagingAliasPart tinyint,                              \n" +
                "    IN pIsOtherPartName tinyint,                              \n" +
                "    IN pIsAlternatePart tinyint,                              \n" +
                "    IN pIsRoHSReplacementPart tinyint,                              \n" +
                "    IN pIsDriveTool tinyint,                              \n" +
                "    IN pIsProcessMaterial tinyint,                              \n" +
                "    IN pIsRequiredMattingParts tinyint,                              \n" +
                "    IN pIsPickupPad tinyint,                              \n" +
                "    IN pIsFunctionalTesingTool tinyint,                              \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                              \n" +
                "    IN pIsBOM tinyint,      \n" +
                "    IN pIsFluxType tinyInt,      \n" +
                "    IN pIsComments tinyInt      \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "DECLARE vValidationPassed tinyint;                  \n" +
                "DECLARE vFromPartCategory tinyint;                  \n" +
                "DECLARE vFromMfgType varchar(5);              \n" +
                "DECLARE vCount INT;                            \n" +
                "DECLARE vToPartID INT;                            \n" +
                "DECLARE vUserRoleId INT;                            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                              \n" +
                "BEGIN                              \n" +
                "	ROLLBACK;                              \n" +
                "	RESIGNAL;                              \n" +
                "END;                              \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                              \n" +
                "  BEGIN                              \n" +
                "	ROLLBACK;                              \n" +
                "	RESIGNAL;                              \n" +
                "END;                              \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                  \n" +
                "  \n" +
                "    select co.category, m.mfgType              \n" +
                "      into vFromPartCategory, vFromMfgType              \n" +
                "	  from component co               \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID              \n" +
                "	 where co.id = pFromPartID;              \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/              \n" +
                "		set pIsAttribute = 1;              \n" +
                "        set pIsAdditionalAttibute = 1;              \n" +
                "    end if;              \n" +
                "  \n" +
                "	set vCount = 0;                  \n" +
                "    if (vFromPartCategory = 3) then # check category                  \n" +
                "	   select count(1) into vCount                            \n" +
                "		 from component co                            \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                  \n" +
                "          and co.category = 3                  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN                \n" +
                "		  and co.rev = pNewPartRev                            \n" +
                "          and co.isDeleted = 0                            \n" +
                "		  and co.deletedAt is null;                           \n" +
                "		if vCount > 0 then                  \n" +
                "			set vValidationPassed = 0;                  \n" +
                "            select 'DUPLICATE_REV' as message;                  \n" +
                "        end if;                  \n" +
                "  \n" +
                "         set vCount = 0;                  \n" +
                "		 select count(1) into vCount                  \n" +
                "			 from component co                  \n" +
                "			where co.nickName != pNewNickName                  \n" +
                "              and co.category = 3                  \n" +
                "              and co.custAssyPN = pNewCustAssyPN                  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                  \n" +
                "			  and co.isDeleted = 0                  \n" +
                "			  and co.deletedAt is null;                   \n" +
                "		  if vCount > 0 then                  \n" +
                "			set vValidationPassed = 0;                  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,                  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName                  \n" +
                "				 from component co                  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID                  \n" +
                "				where co.nickName != pNewNickName                  \n" +
                "				  and co.category = 3                  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN                  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                  \n" +
                "				  and co.isDeleted = 0                  \n" +
                "				  and co.deletedAt is null                  \n" +
                "				  limit 1;                  \n" +
                "		  end if;                  \n" +
                "  \n" +
                "		set vCount = 0;                  \n" +
                "		 select count(1) into vCount                  \n" +
                "			 from component co                  \n" +
                "			where co.nickName = pNewNickName                  \n" +
                "              and co.category = 3                  \n" +
                "              and co.custAssyPN != pNewCustAssyPN                  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                  \n" +
                "			  and co.isDeleted = 0                \n" +
                "			  and co.deletedAt is null;                  \n" +
                "		 if vCount > 0 then                  \n" +
                "			set vValidationPassed = 0;                  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,                  \n" +
                "                        custAssyPN                  \n" +
                "				 from component co                  \n" +
                "				where co.nickName = pNewNickName                  \n" +
                "				  and co.category = 3                  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN                  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                  \n" +
                "				  and co.isDeleted = 0                \n" +
                "				  and co.deletedAt is null                  \n" +
                "				  limit 1;                  \n" +
                "		  end if;                  \n" +
                "	end if;                  \n" +
                "  \n" +
                "    set vCount = 0;                  \n" +
                "		select count(1) into vCount                            \n" +
                "		 from component co                            \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                  \n" +
                "		  and co.mfgPN = pNewMfgPN                            \n" +
                "          and co.isDeleted = 0                \n" +
                "		  and co.deletedAt is null;                           \n" +
                "	 if vCount > 0 then                  \n" +
                "		set vValidationPassed = 0;                  \n" +
                "        select 'DUPLICATE_MFGPN' as message;                  \n" +
                "     end if;                  \n" +
                "  \n" +
                "    set vCount = 0;                  \n" +
                "		select count(1) into vCount                            \n" +
                "		 from component co                            \n" +
                "		where co.PIDCode = pNewPIDCode                            \n" +
                "		  and co.isDeleted = 0                \n" +
                "		  and co.deletedAt is null;                       \n" +
                "    if vCount > 0 then                  \n" +
                "		set vValidationPassed = 0;                  \n" +
                "        select 'DUPLICATE_PID' as message;                  \n" +
                "     end if;                  \n" +
                "  \n" +
                "		if vValidationPassed = 1 then  #1 passed, 0 failed        \n" +
                "				START TRANSACTION;  \n" +
                "				insert into component(                            \n" +
                "						isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                            \n" +
                "						custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                            \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                            \n" +
                "						partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                            \n" +
                "                        rohsText, rohsDeviation, rohsgroupID, isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                            \n" +
                "                        countryOfOrigin, htsCode, createdBy, createByRoleId,                            \n" +
                "                        updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,              \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,    \n" +
                "						restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts)                  \n" +
                "                select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                            \n" +
                "						pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                            \n" +
                "                        mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                            \n" +
                "						partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                            \n" +
                "                        rohsText, rohsDeviation, (CASE WHEN (pIsCPN = 1) THEN 0 ELSE rohsgroupID END) , isLeadFree, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                            \n" +
                "                        countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                            \n" +
                "                        pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,              \n" +
                "                        refMfgPNMfgCodeId, refSupplierMfgpnComponentID,      \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),      \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),      \n" +
                "                        (CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),      \n" +
                "                        (CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,    \n" +
                "						restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts                          \n" +
                "				 from component                            \n" +
                "				where id = pFromPartID;                            \n" +
                "  \n" +
                "				set vToPartID = LAST_INSERT_ID();                            \n" +
                "  \n" +
                "				/* As of now Comment this Entry Due to have to cover in next sprint      \n" +
                "                insert into component_images                            \n" +
                "						(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                            \n" +
                "                select imageURL, vToPartID,pUserID, pUserRoleId,                            \n" +
                "						pUserID,pUserRoleId,isDeleted                            \n" +
                "				 from component_images                            \n" +
                "				where refComponentID = pFromPartID                            \n" +
                "                  and isDeleted = false;                            \n" +
                "  \n" +
                "                insert into component_datasheets                            \n" +
                "						(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                            \n" +
                "                select datasheetURL, vToPartID,pUserID ,pUserID,isDeleted,                            \n" +
                "						pUserRoleId, pUserRoleId                           \n" +
                "				 from component_datasheets                            \n" +
                "				where refComponentID = pFromPartID                            \n" +
                "                  and isDeleted = false;                            \n" +
                "				*/      \n" +
                "  \n" +
                "				IF pIsAttribute  then                                \n" +
                "					UPDATE `component` toPart,                               \n" +
                "					(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                              \n" +
                "					`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                              \n" +
                "					`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                              \n" +
                "					`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                              \n" +
                "					SET                              \n" +
                "					toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                              \n" +
                "					toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                              \n" +
                "					toPart.`mountingTypeID` = fromPart.mountingTypeID,                              \n" +
                "					toPart.`mountingTypeText` = fromPart.mountingTypeText,                              \n" +
                "					toPart.`operatingTemp` = fromPart.operatingTemp,                              \n" +
                "					toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                              \n" +
                "					toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                              \n" +
                "					toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                              \n" +
                "					toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                              \n" +
                "					toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                              \n" +
                "					toPart.`connecterTypeID` = fromPart.connecterTypeID,                              \n" +
                "					toPart.`connectorTypeText` = fromPart.connectorTypeText,                              \n" +
                "					toPart.`noOfPositionText` = fromPart.noOfPositionText,                              \n" +
                "					toPart.`noOfPosition` = fromPart.noOfPosition,                              \n" +
                "					toPart.`noOfRowsText` = fromPart.noOfRowsText,                              \n" +
                "					toPart.`noOfRows` = fromPart.noOfRows,                              \n" +
                "					toPart.`pitch` = fromPart.pitch,                              \n" +
                "					toPart.`pitchMating` = fromPart.pitchMating,                              \n" +
                "					toPart.`sizeDimension` = fromPart.sizeDimension,                              \n" +
                "					toPart.`length` = fromPart.length,                              \n" +
                "					toPart.`width` = fromPart.width,                              \n" +
                "					toPart.`heightText` = fromPart.heightText,                              \n" +
                "					toPart.`height` = fromPart.height,                              \n" +
                "					toPart.`updatedBy` = pUserID,                              \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "					toPart.`updatedAt` = current_timestamp()                              \n" +
                "					WHERE toPart.`id` = vToPartID;                              \n" +
                "				end if;                              \n" +
                "  \n" +
                "				IF pIsSettings then                              \n" +
                "					UPDATE `component` toPart,                               \n" +
                "					(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                              \n" +
                "					`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                              \n" +
                "					`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                              \n" +
                "					`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                              \n" +
                "					SET                              \n" +
                "					toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                              \n" +
                "					toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                              \n" +
                "					toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                              \n" +
                "					toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                              \n" +
                "					toPart.`selfLifeDays` = fromPart.selfLifeDays,                              \n" +
                "					toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                              \n" +
                "					toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                              \n" +
                "					toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                              \n" +
                "					toPart.`saftyStock` = fromPart.saftyStock,                              \n" +
                "					toPart.`eau` = fromPart.eau,                              \n" +
                "					toPart.`businessRisk` = fromPart.businessRisk,                              \n" +
                "					toPart.`driverToolRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.driverToolRequired  END),                              \n" +
                "					toPart.`matingPartRquired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.matingPartRquired  END),                              \n" +
                "					toPart.`pickupPadRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.pickupPadRequired  END),                              \n" +
                "					toPart.`programingRequired` = fromPart.programingRequired,                              \n" +
                "					toPart.`functionalTestingRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.functionalTestingRequired END),                              \n" +
                "					toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),                              \n" +
                "					toPart.`bomLock` = fromPart.bomLock,                              \n" +
                "					toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),                              \n" +
                "					toPart.`updatedBy` = pUserID,                            \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "					toPart.`updatedAt` = current_timestamp()                              \n" +
                "					WHERE toPart.`id` = vToPartID;                            \n" +
                "  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`                              \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                              \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                              \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                              \n" +
                "  \n" +
                "				end if;                              \n" +
                "  \n" +
                "				IF pIsAdditionalAttibute then                              \n" +
                "					UPDATE `component` toPart,                               \n" +
                "					(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                               \n" +
                "					from component where id = pFromPartID) fromPart                              \n" +
                "					SET                              \n" +
                "					toPart.`tolerance` = fromPart.tolerance,                              \n" +
                "					toPart.`voltage` = fromPart.voltage,                              \n" +
                "					toPart.`value` = fromPart.value,                              \n" +
                "					toPart.`partPackage` = fromPart.partPackage,                              \n" +
                "					toPart.`powerRating` = fromPart.powerRating,                              \n" +
                "					toPart.`weight` = fromPart.weight,                              \n" +
                "					toPart.`feature` = fromPart.feature,                              \n" +
                "					toPart.`color` = fromPart.color,                              \n" +
                "					toPart.`updatedBy` = pUserID,                              \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "					toPart.`updatedAt` = current_timestamp()                              \n" +
                "					WHERE toPart.`id` = vToPartID;                              \n" +
                "				end if;                              \n" +
                "  \n" +
                "				IF pIsPackagingDetail then                              \n" +
                "					UPDATE `component` toPart,                               \n" +
                "					(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                              \n" +
                "					`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                              \n" +
                "					SET                              \n" +
                "					toPart.`deviceMarking` = fromPart.deviceMarking,                              \n" +
                "					toPart.`packagingID` = fromPart.packagingID,                              \n" +
                "					toPart.`minimum` = fromPart.minimum,                              \n" +
                "					toPart.`mult` = fromPart.mult,                              \n" +
                "					toPart.`packageQty` = fromPart.packageQty,                              \n" +
                "					toPart.`uomClassID` = fromPart.uomClassID,                              \n" +
                "					toPart.`uom` = fromPart.uom,                              \n" +
                "					toPart.`uomText` = fromPart.uomText,                              \n" +
                "					toPart.`unit` = fromPart.unit,                              \n" +
                "					toPart.`pcbPerArray` = fromPart.pcbPerArray,                              \n" +
                "					toPart.`grossWeight` = fromPart.grossWeight,                              \n" +
                "					toPart.`grossWeightUom` = fromPart.grossWeightUom,                              \n" +
                "					toPart.`packagingWeight` = fromPart.packagingWeight,                              \n" +
                "					toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                              \n" +
                "					toPart.`updatedBy` = pUserID,                              \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "					toPart.`updatedAt` = current_timestamp()                              \n" +
                "					WHERE toPart.`id` = vToPartID;                              \n" +
                "				end if;                              \n" +
                "  \n" +
                "				if pIsStandards then                              \n" +
                "					UPDATE `component` toPart,                               \n" +
                "					(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                              \n" +
                "					SET                              \n" +
                "					toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                              \n" +
                "					toPart.`htsCode` = fromPart.htsCode,                              \n" +
                "					toPart.`updatedBy` = pUserID,                              \n" +
                "                    toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "					toPart.`updatedAt` = current_timestamp()                              \n" +
                "					WHERE toPart.`id` = vToPartID;                              \n" +
                "  \n" +
                "					INSERT INTO `component_standard_details`                              \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                              \n" +
                "					select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                              \n" +
                "					from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                              \n" +
                "					and not exists (select 1 from component_standard_details csd                              \n" +
                "					where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                              \n" +
                "				end if;                              \n" +
                "				if pIsRequiredMountingType then                              \n" +
                "					INSERT INTO `component_requiremountingtype`                              \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                              \n" +
                "					SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                              \n" +
                "					FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                               \n" +
                "					and not exists (select 1 from component_requiremountingtype                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                              \n" +
                "  \n" +
                "					set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                              \n" +
                "					if @requiredMountingTypecount>0 then                              \n" +
                "						UPDATE `component` toPart                              \n" +
                "						SET                              \n" +
                "						toPart.`mountingTypePartRequired` = true,                              \n" +
                "						toPart.`updatedBy` = pUserID,                              \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "						toPart.`updatedAt` = current_timestamp()                              \n" +
                "						WHERE toPart.`id` = vToPartID;                              \n" +
                "					end if;                              \n" +
                "				end if;                              \n" +
                "				if pIsRequiredFunctionalType then                              \n" +
                "					INSERT INTO `component_requirefunctionaltype`                              \n" +
                "					(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                              \n" +
                "					SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                              \n" +
                "					FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                              \n" +
                "					and not exists (select 1 from component_requirefunctionaltype                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                              \n" +
                "  \n" +
                "  \n" +
                "					set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                              \n" +
                "					if @requiredFunctionalTypecount>0 then                              \n" +
                "						UPDATE `component` toPart                              \n" +
                "						SET                              \n" +
                "						toPart.`functionalTypePartRequired` = true,                              \n" +
                "						toPart.`updatedBy` = pUserID,                              \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "						toPart.`updatedAt` = current_timestamp()                              \n" +
                "						WHERE toPart.`id` = vToPartID;                              \n" +
                "					end if;                              \n" +
                "  \n" +
                "				end if;                              \n" +
                "				if pIsPackagingAliasPart then                              \n" +
                "  \n" +
                "					set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                              \n" +
                "					set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                              \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                              \n" +
                "						# generate new packaging alias group id                              \n" +
                "						set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                              \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                              \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                              \n" +
                "						# update packaging alias group id as new packaging alias group id in component table                              \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                              \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                              \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                              \n" +
                "						INSERT INTO `component_packagingalias`                              \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                              \n" +
                "						values                              \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                              \n" +
                "					# Update data for packaging alias group id for  ToPartID	                              \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                              \n" +
                "  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                              \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                              \n" +
                "						INSERT INTO `component_packagingalias`                              \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                              \n" +
                "						values                              \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                              \n" +
                "					# Update data for packaging alias group id for  FromPartID		                              \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                              \n" +
                "  \n" +
                "					end if;                              \n" +
                "				end if;                              \n" +
                "				if pIsOtherPartName then                              \n" +
                "					INSERT INTO `component_otherpn`                              \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                              \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                              \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                              \n" +
                "					and not exists (select 1 from component_otherpn                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                              \n" +
                "				end if;                              \n" +
                "				If pIsAlternatePart then                              \n" +
                "					INSERT INTO `component_alternatepn`                              \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                              \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                              \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                              \n" +
                "					and not exists (select 1 from component_alternatepn                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                              \n" +
                "				end if;                  \n" +
                "				if pIsRoHSReplacementPart then            \n" +
                "					set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                              \n" +
                "					set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                              \n" +
                "					if @FromrohsgroupID is not null and @TorohsgroupID is not null then                              \n" +
                "						# generate new packaging alias group id                              \n" +
                "						set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                              \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table                              \n" +
                "						  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                                  \n" +
                "					   # update packaging alias group id as new packaging alias group id in component table                              \n" +
                "						 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                              \n" +
                "					elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                              \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                              \n" +
                "						INSERT INTO `component_rohsalternatepn`                              \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                              \n" +
                "						values                              \n" +
                "						(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                              \n" +
                "					# Update data for packaging alias group id for  ToPartID	                              \n" +
                "						update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                              \n" +
                "  \n" +
                "					elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                              \n" +
                "  \n" +
                "					# Insert data in packaging alias table for ToPartID                              \n" +
                "						INSERT INTO `component_rohsalternatepn`                              \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                              \n" +
                "						values                              \n" +
                "						(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                              \n" +
                "					# Update data for packaging alias group id for  FromPartID		                              \n" +
                "						update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                              \n" +
                "  \n" +
                "					end if;                              \n" +
                "				end if;                              \n" +
                "				if pIsDriveTool then                              \n" +
                "					INSERT INTO `component_drivetools`                              \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                              \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                              \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                              \n" +
                "					and not exists (select 1 from component_drivetools                               \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                              \n" +
                "  \n" +
                "					set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                              \n" +
                "					if @DriveToolcount>0 then                              \n" +
                "						UPDATE `component` toPart                              \n" +
                "						SET                              \n" +
                "						toPart.`driverToolRequired` = true,                              \n" +
                "						toPart.`updatedBy` = pUserID,                              \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "						toPart.`updatedAt` = current_timestamp()                              \n" +
                "						WHERE toPart.`id` = vToPartID;                              \n" +
                "					end if;                              \n" +
                "				end if;                              \n" +
                "				if pIsProcessMaterial then                              \n" +
                "					INSERT INTO `component_processmaterial`                              \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                              \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                              \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                              \n" +
                "					and not exists (select 1 from component_processmaterial                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                               \n" +
                "				end if;                              \n" +
                "				if pIsRequiredMattingParts then                              \n" +
                "					INSERT INTO `component_alternatepn`                              \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                              \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                              \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                              \n" +
                "					and not exists (select 1 from component_alternatepn                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                              \n" +
                "  \n" +
                "					set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                              \n" +
                "					if @mattingpartcount>0 then                              \n" +
                "						UPDATE `component` toPart                              \n" +
                "						SET                              \n" +
                "						toPart.`matingPartRquired` = true,                              \n" +
                "						toPart.`updatedBy` = pUserID,                              \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "						toPart.`updatedAt` = current_timestamp()                              \n" +
                "						WHERE toPart.`id` = vToPartID;                              \n" +
                "					end if;                              \n" +
                "  \n" +
                "				end if;                              \n" +
                "				if pIsPickupPad then                              \n" +
                "				INSERT INTO `component_alternatepn`                              \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                              \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                              \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                              \n" +
                "					and not exists (select 1 from component_alternatepn                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                              \n" +
                "  \n" +
                "					set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                              \n" +
                "					if @PickupPadcount>0 then                              \n" +
                "						UPDATE `component` toPart                              \n" +
                "						SET                              \n" +
                "						toPart.`pickupPadRequired` = true,                              \n" +
                "						toPart.`updatedBy` = pUserID,                              \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "						toPart.`updatedAt` = current_timestamp()                              \n" +
                "						WHERE toPart.`id` = vToPartID;                              \n" +
                "					end if;                              \n" +
                "				end if;                  \n" +
                "  \n" +
                "				if pIsFunctionalTesingTool then                              \n" +
                "					INSERT INTO `component_alternatepn`                              \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                              \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                              \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                              \n" +
                "					and not exists (select 1 from component_alternatepn                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                              \n" +
                "  \n" +
                "					set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                              \n" +
                "					if @FunctionalTesingToolcount>0 then                              \n" +
                "						UPDATE `component` toPart                              \n" +
                "						SET                              \n" +
                "						toPart.`functionalTestingRequired` = true,                              \n" +
                "						toPart.`updatedBy` = pUserID,                              \n" +
                "                        toPart.`updateByRoleId` = pUserRoleId,                      \n" +
                "						toPart.`updatedAt` = current_timestamp()                              \n" +
                "						WHERE toPart.`id` = vToPartID;                              \n" +
                "					end if;                              \n" +
                "				end if;                              \n" +
                "				if pIsFinctionalRestingEquipment then                              \n" +
                "					INSERT INTO `component_functionaltestingequipment`                              \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                              \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                              \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                              \n" +
                "					and not exists (select 1 from component_functionaltestingequipment                               \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                              \n" +
                "				end if;                              \n" +
                "  \n" +
                "                if (vFromPartCategory = 3) then                  \n" +
                "					if pIsBOM then                            \n" +
                "						call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                      \n" +
                "					end if;                            \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                        \n" +
                "                end if;        \n" +
                "  \n" +
                "                if(pIsComments = 1) THEN      \n" +
                "					INSERT INTO componenet_inspection_requirement_det      \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)      \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),      \n" +
                "                    pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;      \n" +
                "  \n" +
                "                    INSERT INTO assembly_revision_comments      \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				      \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where       \n" +
                "						partID = pFromPartID;      \n" +
                "                END IF;      \n" +
                "  \n" +
                "				commit;                  \n" +
                "			select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;                  \n" +
                "        end if;                            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (702,'1.00','V1','Update SP of Sproc_CreateAssemblyRevision - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 702:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2021  *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                      \n" +
                "	IN pPageIndex INT,                      \n" +
                "	IN pRecordPerPage INT,                      \n" +
                "	IN pOrderBy VARCHAR(255),                      \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pReceiptType VARCHAR(10),                      \n" +
                "	IN pMfgCodeIds LONGTEXT,                      \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,                      \n" +
                "	IN pDueDate DATE,                      \n" +
                "	IN pAdditionalDays INT,                      \n" +
                "	IN pTermsAndAboveDays INT,                      \n" +
                "	IN pInvoiceNumber VARCHAR(50),                      \n" +
                "	IN pIsExactSearch TINYINT,                    \n" +
                "	IN pMfrPnId INT,        \n" +
                "    IN pInvoiceIds LONGTEXT,    \n" +
                "    IN pExactPaymentNumberSearch TINYINT,    \n" +
                "    IN pPaymentNumber VARCHAR(50)    \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "	DECLARE pOffset INT;                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;               \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"    \n" +
                "			SELECT 		p.id,    \n" +
                "					p.poNumber,    \n" +
                "					p.mfgCodeID,    \n" +
                "					p.supplierSONumber,    \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,    \n" +
                "					p.packingSlipDate,    \n" +
                "					p.invoiceNumber,    \n" +
                "					p.invoiceDate,    \n" +
                "					p.creditMemoNumber,    \n" +
                "					p.creditMemoDate,    \n" +
                "					p.debitMemoNumber,    \n" +
                "					p.debitMemoDate,    \n" +
                "					p.receiptDate,    \n" +
                "					p.description,    \n" +
                "					p.billToAddress,    \n" +
                "					p.shipToAddress,    \n" +
                "					p.poVersion,    \n" +
                "					p.isDeleted,    \n" +
                "					p.receiptType,    \n" +
                "					p.`status`,    \n" +
                "					p.applyDate,    \n" +
                "					p.refParentCreditDebitInvoiceno,    \n" +
                "					p.refPackingSlipNumberForInvoice,    \n" +
                "					p.invoiceTotalDue,    \n" +
                "					p.isTariffInvoice,                      \n" +
                "					p.creditMemoType,    \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                 \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,      \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,      \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		               \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,    \n" +
                "					(        \n" +
                "						SELECT 	COUNT(1)         \n" +
                "						FROM 	genericfiles g         \n" +
                "						WHERE 	g.refTransID = p.id         \n" +
                "								AND       \n" +
                "								(      \n" +
                "									CASE       \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15      \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16        \n" +
                "										ELSE g.entityID = -13      \n" +
                "									END      \n" +
                "								)    \n" +
                "								AND g.isDeleted = 0    \n" +
                "					) invoiceDocCount,        \n" +
                "					(        \n" +
                "						SELECT 	COUNT(1)         \n" +
                "						FROM 	genericfiles g         \n" +
                "						WHERE 	g.refTransID = psm.id         \n" +
                "								AND g.entityID = -14    \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'         \n" +
                "								AND g.isDeleted =0    \n" +
                "					) packingSlipDocCount,                              \n" +
                "					pd.itemReceived,                                \n" +
                "					pd.otherChargesItemReceived,                                      \n" +
                "					pd.itemDisapproved,    \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,    \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,    \n" +
                "					ps.status parentInvoiceStatus,    \n" +
                "					ps.invoiceNumber refInvoiceNumber,    \n" +
                "					ps.creditMemoType parentCreditMemoType,    \n" +
                "					pd.totalExtendedAmount,    \n" +
                "					pe.totalCreditAmount,    \n" +
                "					pe.totalDebitAmount,    \n" +
                "					(    \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)    \n" +
                "					) amountToPay,    \n" +
                "					pd.packingDetailNote,    \n" +
                "					pd.approveLineCount,    \n" +
                "					DATE_ADD((case 	WHEN p.receiptType = 'D' THEN            \n" +
                " 									p.debitMemoDate            \n" +
                " 								WHEN p.receiptType = 'C' THEN            \n" +
                " 									p.creditMemoDate            \n" +
                " 								ELSE p.invoiceDate                    \n" +
                " 							end),    \n" +
                "     					INTERVAL IFNULL((case when p.termsDays != 0 then    \n" +
                "     													p.termsDays-1    \n" +
                "     											else p.termsDays end),0) DAY) paymentDueDate,    \n" +
                "    					p.refPayementid,                    \n" +
                "					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,    \n" +
                " 					p.paymentTermsID,    \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                            \n" +
                "					psm.packingSlipModeStatus,                    \n" +
                "					ifnull(get_totalSupplierInvoicePaidAmountById(p.id),0) paidAmount,                    \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                \n" +
                "					p.invoiceRequireManagementApproval,                \n" +
                "					(                \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                \n" +
                "								'Yes'                \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN                \n" +
                "								'No'                \n" +
                "						END                \n" +
                "					) invoiceRequireManagementApprovalValue,                 \n" +
                "					p.invoiceApprovalStatus,                \n" +
                "					(                \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                \n" +
                "								'Approved'                \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN                \n" +
                "								'Pending'                \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN                \n" +
                "								'N/A'                \n" +
                "						END                \n" +
                "					) invoiceApprovalStatusValue,                \n" +
                "					p.invoiceApprovedBy,                \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                \n" +
                "					p.invoiceApprovalDate,                \n" +
                "					p.invoiceApprovalComment,                \n" +
                "					p.internalRemark                \n" +
                "			FROM packing_slip_material_receive p    \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0    \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0    \n" +
                "			left join (    \n" +
                "							select 	a.refPackingSlipMaterialRecID,    \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,    \n" +
                "								sum(a.itemReceived) itemReceived,                              \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,    \n" +
                "								sum(a.itemDisapproved) itemDisapproved,    \n" +
                "								sum(a.approveLineCount) approveLineCount,    \n" +
                "								sum(a.extendedPrice) totalExtendedAmount    \n" +
                "							from 	(                              \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                               \n" +
                "										psm.packingSlipSerialNumber,                               \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                  \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,                              \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,                              \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,    \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,    \n" +
                "										extendedPrice    \n" +
                "									FROM 	packing_slip_material_receive_det psm    \n" +
                "									WHERE 	psm.isDeleted = 0    \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)    \n" +
                "								) a                                        \n" +
                "							group by a.refPackingSlipMaterialRecID                              \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                        \n" +
                "				left join (                              \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                         \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                    \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                    \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                    \n" +
                "							from 		packing_slip_material_receive ps                                        \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                        \n" +
                "								  where ps.receiptType in ('C','D')    \n" +
                "									and ps.isDeleted = 0    \n" +
                "									and pd.isDeleted = 0    \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno    \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id    \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",    \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),        \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                         \n" +
                "	);                                    \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                                        \n" +
                "	END IF;                                        \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' )');                                        \n" +
                "	END IF;                                        \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL and pPaymentNumber != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"    \n" +
                "				and exists (select 1    \n" +
                "							  from packingslip_invoice_payment pm    \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id    \n" +
                "							 where pm.isDeleted = 0    \n" +
                "							   and pm.isPaymentVoided = 0    \n" +
                "							   and pm.refPaymentMode = 'P'    \n" +
                "							   and pd.refPackingslipInvoiceID = p.id    \n" +
                "							   and pm.paymentNumber \",    \n" +
                "                               case when pExactPaymentNumberSearch = true then CONCAT(\" = \", pPaymentNumber ,\" \") else CONCAT(\" like '%\", pPaymentNumber, \"%' \") end    \n" +
                "                               ,\") \");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                                        \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                  \n" +
                "		SET pWhereClause = '1=1' ;                                  \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                        \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                        \n" +
                "	END IF;                                        \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                      \n" +
                "		IF pIsExactSearch = 1 THEN                      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                      \n" +
                "									AND (                      \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                    \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                    \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                      \n" +
                "									  \" ) \"                      \n" +
                "						);                      \n" +
                "		ELSE                      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                      \n" +
                "									AND (                      \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                    \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                      \n" +
                "									  \" ) \"                      \n" +
                "						);                      \n" +
                "		END IF;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN    \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (    \n" +
                "				SELECT 1    \n" +
                "				  FROM packing_slip_material_receive_det x    \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0    \n" +
                "			)    \n" +
                "		\");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	/* to get total count of rows */                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                  \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                               \n" +
                "			SELECT 	c.*,                               \n" +
                "					case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                    \n" +
                "                    round(c.paidAmount,2) totalPaidAmount,                    \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                    \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                    \n" +
                "                    round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                   \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                               \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                                 \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (703,'1.00','V1','Resolved SP issue to remove select statement - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 703:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2021  *********************************** */
                "drop procedure if exists `Sproc_GetAssyQtyTurntimeByRfqGroup`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyQtyTurntimeByRfqGroup`(      \n" +
                "	IN prfqGroupID INT,      \n" +
                "	IN ppartid INT      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE prfqassyID INT;      \n" +
                "    DECLARE vRefSubmittedQuoteID INT;  \n" +
                "  \n" +
                "    SELECT ra.id INTO prfqassyID FROM rfq_assemblies ra WHERE ra.rfqrefID=prfqGroupID AND ra.partID= ppartid;      \n" +
                "  \n" +
                "    select max(id) into vRefSubmittedQuoteID  \n" +
                "	  from rfq_assemblies_quotation_submitted  \n" +
                "     where rfqAssyID = prfqassyID  \n" +
                "       and quoteNumber is not null;  \n" +
                "  \n" +
                "    SELECT raqt.id,CONCAT(\"(\",raq.requestQty,\")\",\" \",raqt.turnTime,\" \",fun_getRFQUnitOfTime(raqt.unitoftime)) qtyTurnTime,      \n" +
                "			raq.requestQty as priceBreak,rsa.unitPrice  , raq.rfqAssyID   ,raqo.refSubmittedQuoteID  \n" +
                "	  FROM rfq_assy_quantity_turn_time raqt    \n" +
                "      INNER JOIN rfq_assy_quantity raq ON raq.id=raqt.rfqAssyQtyID        \n" +
                "      INNER JOIn rfq_assy_quotations raqo on raqo.rfqAssyQtyTurnTimeID = raqt.id    \n" +
                "      inner JOIN rfq_assy_quote_submitted_assydetail rsa on rsa.rfqAssyID = raq.rfqAssyID and raqo.refSubmittedQuoteID = rsa.refSubmittedQuoteID and rsa.turnTime = raqo.turnTime and rsa.qty = raqo.requestedQty and rsa.turnType = raqo.timeType          \n" +
                "	 WHERE raq.rfqAssyID=prfqassyID   \n" +
                "	   and raqo.refSubmittedQuoteID = vRefSubmittedQuoteID  \n" +
                "       and raqt.isDeleted = 0  \n" +
                "     ORDER BY raq.id;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (704,'1.00','V1','Bug 30020: [Dev Server] Assembly Sales Price Matrix page issues at part master. - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 704:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-03-2021  *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                        \n" +
                "	IN pPageIndex INT,                        \n" +
                "	IN pRecordPerPage INT,                        \n" +
                "	IN pOrderBy VARCHAR(255),                        \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pReceiptType VARCHAR(10),                        \n" +
                "	IN pMfgCodeIds LONGTEXT,                        \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,                        \n" +
                "	IN pDueDate DATE,                        \n" +
                "	IN pAdditionalDays INT,                        \n" +
                "	IN pTermsAndAboveDays INT,                        \n" +
                "	IN pInvoiceNumber VARCHAR(50),                        \n" +
                "	IN pIsExactSearch TINYINT,                      \n" +
                "	IN pMfrPnId INT,          \n" +
                "    IN pInvoiceIds LONGTEXT,      \n" +
                "    IN pExactPaymentNumberSearch TINYINT,      \n" +
                "    IN pPaymentNumber VARCHAR(50)      \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "	DECLARE pOffset INT;                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                 \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"      \n" +
                "			SELECT 		p.id,      \n" +
                "					p.poNumber,      \n" +
                "					p.mfgCodeID,      \n" +
                "					p.supplierSONumber,      \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,      \n" +
                "					p.packingSlipDate,      \n" +
                "					p.invoiceNumber,      \n" +
                "					p.invoiceDate,      \n" +
                "					p.creditMemoNumber,      \n" +
                "					p.creditMemoDate,      \n" +
                "					p.debitMemoNumber,      \n" +
                "					p.debitMemoDate,      \n" +
                "					p.receiptDate,      \n" +
                "					p.description,      \n" +
                "					p.billToAddress,      \n" +
                "					p.shipToAddress,      \n" +
                "					p.poVersion,      \n" +
                "					p.isDeleted,      \n" +
                "					p.receiptType,      \n" +
                "					p.`status`,      \n" +
                "					p.applyDate,      \n" +
                "					p.refParentCreditDebitInvoiceno,      \n" +
                "					p.refPackingSlipNumberForInvoice,      \n" +
                "					p.invoiceTotalDue,      \n" +
                "					p.isTariffInvoice,                        \n" +
                "					p.creditMemoType,      \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                   \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,        \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                 \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,      \n" +
                "					(          \n" +
                "						SELECT 	COUNT(1)           \n" +
                "						FROM 	genericfiles g           \n" +
                "						WHERE 	g.refTransID = p.id           \n" +
                "								AND         \n" +
                "								(        \n" +
                "									CASE         \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15        \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16          \n" +
                "										ELSE g.entityID = -13        \n" +
                "									END        \n" +
                "								)      \n" +
                "								AND g.isDeleted = 0      \n" +
                "					) invoiceDocCount,          \n" +
                "					(          \n" +
                "						SELECT 	COUNT(1)           \n" +
                "						FROM 	genericfiles g           \n" +
                "						WHERE 	g.refTransID = psm.id           \n" +
                "								AND g.entityID = -14      \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'           \n" +
                "								AND g.isDeleted =0      \n" +
                "					) packingSlipDocCount,                                \n" +
                "					pd.itemReceived,                                  \n" +
                "					pd.otherChargesItemReceived,                                        \n" +
                "					pd.itemDisapproved,      \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,      \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,      \n" +
                "					ps.status parentInvoiceStatus,      \n" +
                "					ps.invoiceNumber refInvoiceNumber,      \n" +
                "					ps.creditMemoType parentCreditMemoType,      \n" +
                "					pd.totalExtendedAmount,      \n" +
                "					pe.totalCreditAmount,      \n" +
                "					pe.totalDebitAmount,      \n" +
                "					(      \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)      \n" +
                "					) amountToPay,      \n" +
                "					pd.packingDetailNote,      \n" +
                "					pd.approveLineCount,      \n" +
                "					DATE_ADD((case 	WHEN p.receiptType = 'D' THEN              \n" +
                " 									p.debitMemoDate              \n" +
                " 								WHEN p.receiptType = 'C' THEN              \n" +
                " 									p.creditMemoDate              \n" +
                " 								ELSE p.invoiceDate                      \n" +
                " 							end),      \n" +
                "     					INTERVAL IFNULL((case when p.termsDays != 0 then      \n" +
                "     													p.termsDays-1      \n" +
                "     											else p.termsDays end),0) DAY) paymentDueDate,      \n" +
                "    					p.refPayementid,                      \n" +
                "					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,      \n" +
                " 					p.paymentTermsID,      \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                              \n" +
                "					psm.packingSlipModeStatus,                      \n" +
                "					ifnull(get_totalSupplierInvoicePaidAmountById(p.id),0) paidAmount,                      \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                  \n" +
                "					p.invoiceRequireManagementApproval,                  \n" +
                "					(                  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                  \n" +
                "								'Yes'                  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN                  \n" +
                "								'No'                  \n" +
                "						END                  \n" +
                "					) invoiceRequireManagementApprovalValue,                   \n" +
                "					p.invoiceApprovalStatus,                  \n" +
                "					(                  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                  \n" +
                "								'Approved'                  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN                  \n" +
                "								'Pending'                  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN                  \n" +
                "								'N/A'                  \n" +
                "						END                  \n" +
                "					) invoiceApprovalStatusValue,                  \n" +
                "					p.invoiceApprovedBy,                  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                  \n" +
                "					p.invoiceApprovalDate,                  \n" +
                "					p.invoiceApprovalComment,                  \n" +
                "					p.internalRemark                  \n" +
                "			FROM packing_slip_material_receive p      \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0      \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0      \n" +
                "			left join (      \n" +
                "							select 	a.refPackingSlipMaterialRecID,      \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,      \n" +
                "								sum(a.itemReceived) itemReceived,                                \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,      \n" +
                "								sum(a.itemDisapproved) itemDisapproved,      \n" +
                "								sum(a.approveLineCount) approveLineCount,      \n" +
                "								sum(a.extendedPrice) totalExtendedAmount      \n" +
                "							from 	(                                \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                                 \n" +
                "										psm.packingSlipSerialNumber,                                 \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                    \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,                                \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,                                \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,      \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,      \n" +
                "										extendedPrice      \n" +
                "									FROM 	packing_slip_material_receive_det psm      \n" +
                "									WHERE 	psm.isDeleted = 0      \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)      \n" +
                "								) a                                          \n" +
                "							group by a.refPackingSlipMaterialRecID                                \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                          \n" +
                "				left join (                                \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                           \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                      \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                      \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                      \n" +
                "							from 		packing_slip_material_receive ps                                          \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                          \n" +
                "								  where ps.receiptType in ('C','D')      \n" +
                "									and ps.isDeleted = 0      \n" +
                "									and pd.isDeleted = 0      \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno      \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id      \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",      \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),          \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                           \n" +
                "	);                                      \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                          \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                                          \n" +
                "	END IF;                                          \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL and pPaymentNumber != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"      \n" +
                "				and exists (select 1      \n" +
                "							  from packingslip_invoice_payment pm      \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id      \n" +
                "							 where pm.isDeleted = 0      \n" +
                "							   and pm.isPaymentVoided = 0      \n" +
                "							   and pm.refPaymentMode = 'P'      \n" +
                "							   and pd.refPackingslipInvoiceID = p.id      \n" +
                "							   and pm.paymentNumber \",      \n" +
                "                               case when pExactPaymentNumberSearch = true then CONCAT(\" = \", pPaymentNumber ,\" \") else CONCAT(\" like '%\", pPaymentNumber, \"%' \") end      \n" +
                "                               ,\") \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                                          \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
                "		SET pWhereClause = '1=1' ;                                    \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                          \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                          \n" +
                "	END IF;                                          \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                        \n" +
                "		IF pIsExactSearch = 1 THEN                        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                        \n" +
                "									AND (                        \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                        \n" +
                "									  \" ) \"                        \n" +
                "						);                        \n" +
                "		ELSE                        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                        \n" +
                "									AND (                        \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                        \n" +
                "									  \" ) \"                        \n" +
                "						);                        \n" +
                "		END IF;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (      \n" +
                "				SELECT 1      \n" +
                "				  FROM packing_slip_material_receive_det x      \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0      \n" +
                "			)      \n" +
                "		\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	/* to get total count of rows */                                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                    \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                                 \n" +
                "			SELECT 	c.*,                                 \n" +
                "					case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                      \n" +
                "                    round(c.paidAmount,2) totalPaidAmount,                      \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                      \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                      \n" +
                "                    round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                     \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                                 \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;                                   \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (705,'1.00','V1','Resolved Filter issue - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 705:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(        \n" +
                "	IN partID INT ,            \n" +
                "	IN cpID INT             \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	# COFC Report Header details    \n" +
                "	SELECT                 \n" +
                "    cp.id,    \n" +
                "    cp.packingSlipNumber AS PackingSlip,              \n" +
                "    cp.packingSlipDate AS PackingSlipDate,              \n" +
                "    cp.soNumber AS SalesOrderNumber,              \n" +
                "    cp.poNumber AS PONumber,             \n" +
                "	 cp.soDate AS SODate,                \n" +
                "    cp.sorevision AS SORevision,            \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,              \n" +
                "    'BAS' AS DepartmentName,              \n" +
                "    'Paul Khunt' AS ManagerName              \n" +
                "FROM              \n" +
                "    customer_packingslip cp          \n" +
                "        LEFT JOIN              \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID              \n" +
                "        AND mfg.isDeleted = 0              \n" +
                "WHERE              \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID      \n" +
                "LIMIT 1;              \n" +
                "  \n" +
                "  # COFC Report Table details            \n" +
                "	SELECT           \n" +
                "    cpd.id AS cpDetID,        \n" +
                "	cpd.custPOLineID AS POLine,              \n" +
                "	cpd.lineID AS PSLine,            \n" +
                "    CASE WHEN (c.partType = 3) THEN sa.shippedqty ELSE cpd.shipQty END AS ShippedQty,               \n" +
                "    cpd.poQty AS OrderQty,              \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "	fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                \n" +
                "	WHEN (c.iscustom = 1) THEN                \n" +
                "	c.custAssyPN                \n" +
                "	WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                \n" +
                "	c.mfgPN                \n" +
                "	ELSE                \n" +
                "	''                \n" +
                "	END) AS PartNumber,            \n" +
                "    IFNULL(c.rev, '') AS Revision,              \n" +
                "    sa.woNumber AS WorkOrderNumber,              \n" +
                "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,              \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,   \n" +
                "     c.partType,                   \n" +
                "    (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1) AS DateCode 	      \n" +
                "FROM  		    	        \n" +
                "    customer_packingslip_det cpd              \n" +
                "		INNER JOIN  component c ON c.id = cpd.partid AND c.isDeleted = 0       \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0      \n" +
                "WHERE              \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID       \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (706,'1.00','V1','Packing Slip changes, Hot fix changes merged again - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 706:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-02-2020  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBOMLineCleanStatusErrorCategoryWise` ;  \n" +
                "CREATE FUNCTION `fun_getBOMLineCleanStatusErrorCategoryWise`(                          \n" +
                "	pLineItemAlternatePartId INT,       \n" +
                "	pLineItemId INT,       \n" +
                "	pRefUMID INT,      \n" +
                "	pAssyId INT,      \n" +
                "	pErrorCategoryId INT            \n" +
                ") RETURNS TINYINT  \n" +
                "BEGIN                   \n" +
                "	DECLARE v_LineCleanStatus TINYINT;         \n" +
                "	DECLARE v_CategoryIds VARCHAR(10000);         \n" +
                "	DECLARE v_LineItemAlternatePartId VARCHAR(10000);         \n" +
                "	DECLARE v_MfrPnId INT;         \n" +
                "	DECLARE v_MfrPkgAliesIds VARCHAR(1000);      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise;                                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise AS         \n" +
                "	SELECT 		err.id, err.logicID, err.errorCode         \n" +
                "	FROM 		rfq_error_code_category_mapping map        \n" +
                "	INNER JOIN 	rfq_lineitems_errorcode err ON err.id = map.errorCodeId AND err.isDeleted = 0        \n" +
                "	WHERE 		map.isDeleted = 0 AND map.categoryID = pErrorCategoryId;        \n" +
                "  \n" +
                "	IF (pErrorCategoryId = 2) THEN    \n" +
                "		IF ((SELECT COUNT(1) FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise WHERE logicID = 12 AND errorCode = 'CA') = 0) THEN    \n" +
                "			INSERT INTO temp_fun_getBOMLineCleanStatusErrorCategoryWise (id, logicID, errorCode)    \n" +
                "			SELECT 		err.id, err.logicID, err.errorCode         \n" +
                "			FROM 		rfq_lineitems_errorcode err      \n" +
                "			WHERE 		err.isDeleted = 0     \n" +
                "						AND err.logicID = 12     \n" +
                "						AND err.errorCode = 'CA';    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(logicID) INTO v_CategoryIds FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise;      \n" +
                "  \n" +
                "	IF (pLineItemAlternatePartId IS NULL AND (pLineItemId IS NOT NULL AND pRefUMID IS NOT NULL AND pAssyId IS NOT NULL)) THEN      \n" +
                "		SELECT 	refcompid INTO v_MfrPnId      \n" +
                "		FROM 	component_sid_stock      \n" +
                "		WHERE 	id = pRefUMID AND isDeleted = 0;      \n" +
                "  \n" +
                "		SELECT 		GROUP_CONCAT(IFNULL(cp.id, c.id)) INTO v_MfrPkgAliesIds        \n" +
                "		FROM 		component c         \n" +
                "		LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0        \n" +
                "		WHERE 		c.id = v_MfrPnId     \n" +
                "					AND c.isDeleted = 0;    \n" +
                "  \n" +
                "		SELECT 	GROUP_CONCAT(id) INTO v_LineItemAlternatePartId       \n" +
                "		FROM 	rfq_lineitems_alternatepart      \n" +
                "		WHERE 	isDeleted = 0      \n" +
                "				AND rfqLineItemsID = pLineItemId      \n" +
                "				AND partID = pAssyId      \n" +
                "				AND FIND_IN_SET(mfgPNID, IFNULL(v_MfrPkgAliesIds, v_MfrPnId));      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SELECT 		MAX(a.ProgressCount) INTO v_LineCleanStatus FROM (                  \n" +
                "				SELECT  	l.id AS lineID, p.id,                                                                     \n" +
                "						CASE          \n" +
                "							WHEN            \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('1', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('2', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mfgCodeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('3', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mfgVerificationStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('4', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.distVerificationStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('5', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mfgDistMappingStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								/*CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('6', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mismatchMountingTypeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND*/        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('7', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mfgGoodPartMappingStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('8', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.obsoletePartStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('9', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mfgPNStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('10', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.distCodeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('11', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.distPNStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('12', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.customerApproval, 'A') != 'P'        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('13', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.distGoodPartMappingStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								/*CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('14', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.distCodeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND*/        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('15', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.nonRohsStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('16', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.epoxyStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('17', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('18', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('20', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('21', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.duplicateMPNInSameLineStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('22', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.matingPartRquiredStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('23', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.driverToolsRequiredStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('24', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.pickupPadRequiredStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('25', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.restrictUseWithPermissionStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('26', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.restrictUsePermanentlyStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('27', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mismatchMountingTypeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('28', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mismatchFunctionalCategoryStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								/*CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('32', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND*/        \n" +
                "								/*CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('33', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND*/        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('34', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.duplicateCPNStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('35', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.functionalTestingRequiredStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('36', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.requireMountingTypeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('37', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.requireMountingTypeStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('39', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.uomMismatchedStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('40', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.programingRequiredStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('50', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.restrictUseInBOMStep, 0) = 0        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('51', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('52', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.customerApprovalForBuyStep,1) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('53', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.customerApprovalForPopulateStep,1) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('54', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.mismatchNumberOfRowsStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('55', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('56', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.tbdPartStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('57', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('58', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('59', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('60', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.exportControlledStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('61', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.restrictUseInBOMWithPermissionStep, 0) = 0        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('62', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(p.unknownPartStep,0) = 1        \n" +
                "									ELSE 1         \n" +
                "								END        \n" +
                "								/*AND        \n" +
                "								CASE         \n" +
                "									WHEN (SELECT FIND_IN_SET('63', v_CategoryIds)) > 0         \n" +
                "										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0        \n" +
                "									ELSE 1         \n" +
                "								END*/        \n" +
                "							THEN 1                                                                    \n" +
                "							ELSE 0                                                                    \n" +
                "						END AS ProgressCount                                                                    \n" +
                "				FROM 		rfq_lineitems_alternatepart p                                                                     \n" +
                "				LEFT OUTER JOIN rfq_lineitems l ON p.rfqLineItemsID = l.id                                                                    \n" +
                "				WHERE 		l.isDeleted = 0 AND p.isDeleted = 0             \n" +
                "								AND p.mfgCodeID IS NOT NULL              \n" +
                "								AND p.mfgPNID IS NOT NULL                                \n" +
                "								AND l.lineID IS NOT NULL             \n" +
                "								AND FIND_IN_SET(p.id, IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId))     \n" +
                "								-- AND p.id = IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId)        \n" +
                "			) AS a        \n" +
                "	GROUP BY 	a.lineID;        \n" +
                "  \n" +
                "	RETURN v_LineCleanStatus;                           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-02-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetStockAllocateList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(	                                                                                                                          \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),                                                                                                                          \n" +
                "	IN pAssyId INT,                                                                                                                          \n" +
                "	IN pPartId VARCHAR(255),                                                                                                                          \n" +
                "	IN pToUOM INT,                                                                                      \n" +
                "	IN pRfqLineItemIds VARCHAR(255),                \n" +
                "	IN pCustomerId INT,                                                                                                             \n" +
                "	IN pType VARCHAR(255),                \n" +
                "	IN pStockType VARCHAR(20)                                                    \n" +
                ")  \n" +
                "BEGIN                                                                                                                                 \n" +
                "	DECLARE v_WhareClause VARCHAR(255);                                                                                                                          \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);                                                                                                \n" +
                "	DECLARE v_AssyId INT;                  \n" +
                "	DECLARE v_IsPurchase TINYINT;                \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);                  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;                \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);                 \n" +
                "	SET SESSION group_concat_max_len = 500000;           \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')                \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN                 \n" +
                "	FROM 	kit_allocation_lineitems                \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID                 \n" +
                "			AND partID = pAssyId                 \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)                 \n" +
                "			AND isDeleted = 0                \n" +
                "	LIMIT 	1;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS                \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId                    \n" +
                "	FROM 		component c                     \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0                    \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartId)                  \n" +
                "				AND c.isDeleted = 0  \n" +
                "	GROUP BY 	mfrPNId;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN                     \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS                \n" +
                "		SELECT 	*                                                                                  \n" +
                "		FROM 	(                                                                                  \n" +
                "				SELECT  	*                                                                                                                            \n" +
                "				FROM 		(                                                                                                                            \n" +
                "							SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                        \n" +
                "									fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                            \n" +
                "									IFNULL(cst.customerID, 0) customerID,		cst.binID,			IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID, 	            \n" +
                "									IFNULL(cst.assyID, 0) assyID,			cst.receiveMaterialType,	cst.customerConsign,	cst.uom,	cst.packaging,			                \n" +
                "									cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                                                                  \n" +
                "									cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,                                                                                                                     \n" +
                "									cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                                                                                            \n" +
                "									cst.pkgUnit,		c.PIDCode,		IFNULL(cst.nickName, '-') nickName,			IFNULL(fun_getMfgCodeAndNameByID(cst.customerID), '-') customer,	                            \n" +
                "									IFNULL(ca.PIDCode, '-') assembly,		c.RoHSStatusID	rohsID,                \n" +
                "									fun_getRoHSNameByID(c.RoHSStatusID) rohsName,				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                                                                                                                    \n" +
                "									IFNULL(fun_getRoHSNameByID(ca.RoHSStatusID), '-') assyRohsName,		IFNULL(fun_getRoHSIconByID(ca.RoHSStatusID), '-') assyRohsIcon,                                                                                          \n" +
                "									fun_getBinNameByID(cst.binID) binName,			      		fun_getWarehouseNameByBinID(cst.binID) warehouseName,                                    \n" +
                "									fun_getWareHouseTypeByBinID(cst.binID) warehouseType,			fun_getDepartmentNameByBinID(cst.binID) departmentName,	                                                                                                                            \n" +
                "									fun_getUnitNameByID(cst.uom) unitName,			                            \n" +
                "									c.mfgPN,		0 pendingUMIDQty,                                                                                                                          \n" +
                "									fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                          \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,                                                                                                                          \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,                                  \n" +
                "									(                          \n" +
                "										CASE                           \n" +
                "											WHEN c.connecterTypeID = -2 THEN                          \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))                          \n" +
                "											ELSE 0                          \n" +
                "										END                          \n" +
                "									) allocatedPins,                                                                                    \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,                            \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,                                                                                                              \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,                                                                    \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,             	c.isGoodPart,                                                                                                   \n" +
                "									c.restrictUsePermanently,		c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                                                                 \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,					d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                                                                          \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,                                                      \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,					cst.isUMIDRestrict,	                            \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                                                                    \n" +
                "									d.customerApproval customerApproveStatus,                                       v_CustomerApprovalCPN customerApproveStatusCPN,                                                        \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,						fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                \n" +
                "									v_IsPurchase isPurchase,    \n" +
                "									fun_getBOMLineCleanStatusErrorCategoryWise(NULL, d.refRfqLineitem, cst.id, pAssyId, 2) lineCleanStatus    \n" +
                "									-- concat(d.refRfqLineitem, '###', cst.id, '###', pAssyId) lineCleanStatus                                                                        \n" +
                "							FROM 		component_sid_stock cst                                                                                                              \n" +
                "							LEFT JOIN 	component c ON c.id = cst.refcompid                                                                                             \n" +
                "							LEFT JOIN	component ca ON ca.id = cst.assyID                                                                                                                         \n" +
                "							LEFT JOIN 	(                                                                                                                              \n" +
                "										SELECT 		ka.refUIDId,                             \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                                                                         \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                \n" +
                "										FROM 		kit_allocation ka                                                                                                                \n" +
                "										WHERE 		ka.status = 'A'                                                                                                                         \n" +
                "										GROUP BY 	ka.refUIDId                                                                                                                            \n" +
                "									) AS ka ON ka.refUIDId = cst.id                \n" +
                "							LEFT JOIN	(                \n" +
                "										SELECT 		a.id, a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(a.mfgPNID, c.id) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                   \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                 \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                         \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                          \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                 \n" +
                "													AND a.partID = pAssyId                    \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)               \n" +
                "													AND a.isDeleted = 0   \n" +
                "										GROUP BY 	id, refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                              \n" +
                "									) d ON d.mfgPNID = cst.refcompid                \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                \n" +
                "										AND (                \n" +
                "											CASE                \n" +
                "												WHEN pStockType = 'IS' THEN                \n" +
                "													cst.customerConsign = 0                \n" +
                "												WHEN pStockType = 'CS' THEN                \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                \n" +
                "												ELSE                \n" +
                "													1 = 1                \n" +
                "											END                \n" +
                "											)                \n" +
                "										AND cst.isDeleted = 0                \n" +
                "						) a                                                                                                                            \n" +
                "						WHERE 		FreeToShare > 0                 \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                                                                  \n" +
                "			) b;                                                                                  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                \n" +
                "		SELECT 		0 AS id,			'-' AS uid,				refcompid,			0 AS pkgQty, 		                            \n" +
                "				'-' AS dateCode,   		'-' AS internalDateCodeInDate,		0 AS customerID,		0 AS binID, 	                                                                                  \n" +
                "				0 AS salesOrderDetailID,	0 AS assyID,				'-' AS receiveMaterialType, 	0 AS customerConsign,	                            \n" +
                "				c.uom,				c.packagingID packaging,		fromBin,			b.Name fromBinName,                                                                                  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		                \n" +
                "				w.parentWHID fromDepartment,	fun_getWarehouseNameByID(w.parentWHID) fromDepartmentName,                                                                                  \n" +
                "				0 AS pkgUnit,			c.PIDCode,				'-' nickName,			'-' AS customer,		                            \n" +
                "				'-' AS assembly,		c.RoHSStatusID	rohsID,                \n" +
                "				'-' AS assyRohsName,		'-' AS assyRohsIcon,			                \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		                            \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                            			                                                                                                                            \n" +
                "				'-' AS binName,			'-' AS warehouseName, 			'-' AS warehouseType,		'-' AS departmentName,	                                                                                                                            \n" +
                "				fun_getUnitNameByID(c.uom) unitName,					c.mfgPN,			pendingUMIDQty,                                                                                                                          \n" +
                "				0 AS convertedUnit,		0 currentPin,				'-' AS allocatedToKit,		                \n" +
                "				0 AS allocatedQty,		0 AS allocatedUnit,			0 AS allocatedPins,		0 AS scrapedPins,                            \n" +
                "				0 AS FreeToShare,		0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		'-' costCategory, 			                            \n" +
                "				c.isGoodPart,			c.restrictUsePermanently,		c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently, 	                            \n" +
                "				c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		0 AS restrictUseInBOMWithPermission,	                                                      \n" +
                "				1 AS restrictUseInBOMExcluding,	0 AS restrictUseInBOMExcludingAliasWithPermission,			v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,                                                      \n" +
                "				0 AS isUMIDRestrict,		fun_convertUOM(c.uom,pToUOM,c.unit) unit,				'-' customerApproveStatus,		                            \n" +
                "				v_CustomerApprovalCPN customerApproveStatusCPN,				0 UMIDRohsStatusID,			'-' UMIDRohsStatus, 		    \n" +
                "				v_IsPurchase isPurchase, 	0 AS lineCleanStatus                                                         \n" +
                "		FROM 		(                \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                \n" +
                "					FROM 		vu_umid_creation_pending vu                \n" +
                "					GROUP BY 	vu.PartId, vu.BinID                \n" +
                "				) vu                                                                                  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid                                                                                  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0                 \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0                                                                                \n" +
                "		WHERE 		c.id IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart) AND pendingUMIDQty > 0;	                                                                              \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                \n" +
                "		ELSE                \n" +
                "			SELECT 	*		                        \n" +
                "			FROM 	(                        \n" +
                "					SELECT  id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		          \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                        \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		            \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			          \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                        \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				          \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		          \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		          \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                        \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                  \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                  \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			          \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus          \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                \n" +
                "					UNION ALL            \n" +
                "					SELECT 	id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		          \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                        \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		            \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			          \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                        \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				          \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		          \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		          \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                        \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                  \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                  \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			          \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus           \n" +
                "					FROM 	temp_nonUmidAvailableStock                                                                                  \n" +
                "				) d;                        \n" +
                "				-- ORDER BY internalDateCodeInDate IS NULL, internalDateCodeInDate, costCategory, uid;                  \n" +
                "		END IF;                                                                                                                  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN                                                                                                                        \n" +
                "		SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                        \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                            \n" +
                "				cst.customerID,		cst.binID,		cst.salesOrderDetailID, 	cst.assyID,		cst.receiveMaterialType,                \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,					                \n" +
                "				cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                                                                  \n" +
                "				cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,                                                                                                                     \n" +
                "				cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                            \n" +
                "				fun_getBinNameByID(cst.binID) binName,		cst.pkgUnit,		cst.nickName,			                            \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,	fun_getWareHouseTypeByBinID(cst.binID) warehouseType,                                    \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	fun_getDepartmentTypeByBinID(cst.binID) departmentType,                                                                                                                           \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			                                                                                            \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	fun_getAssyPIDCodeByID(cst.assyID) assembly,	                            \n" +
                "				c.PIDCode,		c.mfgPN, 			c.RoHSStatusID rohsID,				                                   \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                 \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                            \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                               \n" +
                "				v_NumOfPosition bomPin,                \n" +
                "				c.noOfPosition,                                                                                                                  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                                                                                                                                   \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                        \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,                                                                                                              \n" +
                "				c.isCustom,                  \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                                                  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                                            \n" +
                "				c.isCustom,	cst.rohsStatusID UMIDRohsStatusID,                                            \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                                      \n" +
                "				ka.roHSApprovalReason,                                      \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                      \n" +
                "		FROM 		component_sid_stock cst                                                                                                                              \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid                                                                                              \n" +
                "		LEFT JOIN 	(                \n" +
                "					SELECT 		b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                 \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                   \n" +
                "					FROM 		(                \n" +
                "								SELECT 		refUIDId, partID, allocatedUOM, consumeUOM,                 \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                 \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                \n" +
                "								FROM 		kit_allocation                 \n" +
                "								WHERE 		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                \n" +
                "								GROUP BY 	refUIDId, partID, allocatedUOM, consumeUOM                \n" +
                "							) a                \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId AND (CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                \n" +
                " 				) ka ON ka.refUIDId = cst.id                                                                                                                               \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                         \n" +
                "					AND ka.assyID = IFNULL(pAssyId,ka.assyID)                      \n" +
                "					AND ka.partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                                                                                \n" +
                "					AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)                                                                                                               \n" +
                "					AND (                \n" +
                "						CASE                 \n" +
                "							WHEN pType = 'AllocatedStock' THEN                 \n" +
                "								ka.`status` = 'A'                 \n" +
                "							ELSE                 \n" +
                "								ka.`status` = 'R'                 \n" +
                "						END                \n" +
                "					)                \n" +
                "					AND cst.isDeleted = 0                \n" +
                "		ORDER BY 	internalDateCodeInDate, costCategory, cst.uid;                     \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;                                                                                                                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-02-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(                            \n" +
                "	IN pPageIndex INT,                            \n" +
                "	IN pRecordPerPage INT,                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),                            \n" +
                "	IN pPartId INT,                            \n" +
                "	IN pRefSalesOrderDetailId INT,                            \n" +
                "	IN pLineId INT,                            \n" +
                "	IN pPackagingAlias BOOLEAN,                            \n" +
                "	IN pFunctionalType VARCHAR(1000),                            \n" +
                "	IN pMountingType VARCHAR(1000),                            \n" +
                "	IN pCartType VARCHAR(1000),                            \n" +
                "	IN pWarehouse VARCHAR(1000),                            \n" +
                "	IN pFeasibilityQty INT,                            \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,                            \n" +
                "	IN pCustomerId INT                                            \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE pOffset INT;                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                            \n" +
                "	DECLARE pAllocatedSharedCount INT;                            \n" +
                "	DECLARE pKitQty INT DEFAULT 0;                            \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                            \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                            \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                            \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                            \n" +
                "	SET SESSION group_concat_max_len = 500000;                            \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                            \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                            \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);                            \n" +
                "	ELSE                            \n" +
                "		SET pWhereLineId = ' AND 1 = 1';                            \n" +
                "	END IF;                            \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                            \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                            \n" +
                "	END IF;                            \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                            \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN                            \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId                            \n" +
                "		FROM 		kit_allocation ka                            \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId                            \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id                            \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID                            \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId                            \n" +
                "		AND 		ka.assyID = pPartId                            \n" +
                "		AND 		ka.`status` = 'A'                            \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')                             \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)                             \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)                             \n" +
                "					END)                            \n" +
                "		AND 		css.isDeleted = 0 ;                            \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                            \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');                             \n" +
                "		END IF;                            \n" +
                "	END IF;                            \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                            \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;                            \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN                            \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);                            \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');                            \n" +
                "	ELSE                            \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)                            \n" +
                "		INTO 	pKitQty                            \n" +
                "		FROM 	kit_allocation_assy_detail                            \n" +
                "		WHERE 	partId = pPartId                            \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId                            \n" +
                "				AND isDeleted = 0;                            \n" +
                "	END IF;                \n" +
                "	SET @vFromSQLQuery = CONCAT('                            \n" +
                "		SELECT	*                            \n" +
                "		FROM	(                            \n" +
                "				SELECT 		c.id, 			refSalesOrderDetID, 		partID, 			qpa, 			dnpQty, 				                  \n" +
                "						lineID,     		uomID,				unitName,			parttypeID,		partTypeName, 	                  \n" +
                "						c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,    		requirePinsBuild,	mfgPN,    		                  \n" +
                "						mfgPNIdsWithPackaging,	allocatedQty,			c.allocatedUnit,		allocatedPins,		scrapedPins,                            \n" +
                "						allocated_shared,	freeToShareAmongOtherKits,	allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	                  \n" +
                "						isInstall,		isBuyDNPQty,			description,			custPNID,                   \n" +
                "						custPN,  		custPIDCode, 			custIsCustom,          		restrictCPNUseWithPermissionStep, 			                  \n" +
                "						restrictCPNUsePermanentlyStep, 				restrictCPNUseInBOMStep,        restrictPackagingUsePermanently, 		                  \n" +
                "						restrictPackagingUseWithpermission,          		cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                            \n" +
                "						isNotRequiredKitAllocation, 				isNotRequiredKitAllocationValue, 			notRequiredKitAllocationReason,                            \n" +
                "						refRfqLineitem, 	rfqLineItemsId, 		c.numOfPosition,		mfgPart, 		c.connecterTypeID,              \n" +
                "						(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,            \n" +
                "						(                            \n" +
                "							CASE                            \n" +
                "								WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0                            \n" +
                "								ELSE                             \n" +
                "									CASE                            \n" +
                "										WHEN c.connecterTypeID = - 2 THEN                            \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins) < 0) THEN 0                   \n" +
                "												ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins) END                          \n" +
                "										ELSE                            \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit) < 0) THEN 0                   \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit) END                          \n" +
                "									END                            \n" +
                "							END                            \n" +
                "						) shortagePerBuild,                  \n" +
                "						(                            \n" +
                "							CASE                            \n" +
                "								WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0                            \n" +
                "								ELSE                            \n" +
                "									CASE                            \n" +
                "										WHEN c.connecterTypeID = -2 THEN                            \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0                   \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END                          \n" +
                "										ELSE                            \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0                   \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END                          \n" +
                "									END                        \n" +
                "							END                            \n" +
                "						) shortagePerBuildWithAvailable,                  \n" +
                "						SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,                  \n" +
                "						SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,            \n" +
                "						SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,            \n" +
                "						SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins            \n" +
                "				FROM	(                   \n" +
                "						SELECT 		id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty, 				                  \n" +
                "								lineID,     		uomID,					unitName,			parttypeID,		partTypeName, 	                  \n" +
                "								mountingtypeID,		mountingTypeName,                            \n" +
                "								(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,                            \n" +
                "								(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)                            \n" +
                "										THEN 0                            \n" +
                "										ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))                            \n" +
                "								END) requirePinsBuild,                       \n" +
                "								',fun_getKitConsolidateLineMFGPNWithPackaging(pPackagingAlias, pRefSalesOrderDetailId, pCustomerId),',                  \n" +
                "								',fun_getKitMFRPNIdsWithPackaging(pRefSalesOrderDetailId),',                      \n" +
                "								IFNULL(allocatedQty, 0) allocatedQty,		IFNULL(allocatedUnit, 0) allocatedUnit,		IFNULL(allocatedPins, 0) allocatedPins,			                  \n" +
                "								IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,                            \n" +
                "								(CASE WHEN uomMismatchedStep = 0                            \n" +
                "										THEN 0                            \n" +
                "										ELSE (CASE WHEN ((qpa * IFNULL(', pKitQty, ', 0)) - allocatedUnit) < 0                            \n" +
                "													THEN ABS((qpa * IFNULL(', pKitQty, ', 0)) - allocatedUnit)                            \n" +
                "													ELSE 0                            \n" +
                "											END)                            \n" +
                "								END) freeToShareAmongOtherKits,                            \n" +
                "								allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	isInstall,		                  \n" +
                "								isBuyDNPQty,			description,		custPNID,                   \n" +
                "								custPN,  			custPIDCode, 		custIsCustom,                            \n" +
                "								restrictCPNUseWithPermissionStep, 			restrictCPNUsePermanentlyStep,                   \n" +
                "								restrictCPNUseInBOMStep,          			restrictPackagingUsePermanently, 		                  \n" +
                "								restrictPackagingUseWithpermission,                            \n" +
                "								cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                            \n" +
                "								isNotRequiredKitAllocation, 	isNotRequiredKitAllocationValue, 		notRequiredKitAllocationReason,                            \n" +
                "								refRfqLineitem, 		rfqLineItemsId, 	numOfPosition,		mfgPart, 	connecterTypeID                            \n" +
                "						FROM                            \n" +
                "						(                            \n" +
                "								SELECT 	k.id,	k.refSalesOrderDetID, 	k.partID,                            \n" +
                "									(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1                            \n" +
                "											THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))                            \n" +
                "											ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))                            \n" +
                "									END) AS qpa,                            \n" +
                "									IFNULL(k.dnpQty, 0) dnpQty,                            \n" +
                "									k.lineID,                            \n" +
                "									k.uomID,		FUN_GETUNITNAMEBYID(k.uomID) unitName,                            \n" +
                "									kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,                            \n" +
                "									kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,                            \n" +
                "									k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,                            \n" +
                "									k.numOfPosition,                            \n" +
                "									IFNULL(ka.allocatedQty,0) allocatedQty,			IFNULL(ka.allocatedUnit,0) allocatedUnit,                            \n" +
                "									IFNULL(ka.allocatedPins,0) allocatedPins,		IFNULL(ka.scrapedPins,0) scrapedPins,                            \n" +
                "									IFNULL(ka.allocated_shared, 0) allocated_shared,        IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,                            \n" +
                "									IFNULL(ka.consumeUnits, 0) consumeUnits, 		IFNULL(ka.consumeQty, 0) consumeQty,                            \n" +
                "									k.isInstall,		k.isBuyDNPQty,          	CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,                            \n" +
                "									k.restrictCPNUseWithPermissionStep,	                  \n" +
                "									k.restrictCPNUsePermanentlyStep,          		k.restrictCPNUseInBOMStep,				                  \n" +
                "									k.isNotRequiredKitAllocation,          			(CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,                            \n" +
                "									k.notRequiredKitAllocationReason,			k.custPNID, 					k.custPN,                            \n" +
                "									FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,		cpnCom.isCustom custIsCustom,			cpnCom.restrictPackagingUsePermanently,                            \n" +
                "									cpnCom.restrictPackagingUseWithpermission,		FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,                            \n" +
                "									FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,	kl.uomMismatchedStep,			kl.connecterTypeID,                            \n" +
                "									(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart                            \n" +
                "								FROM 	(                            \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,                            \n" +
                "												max(c.connecterTypeID) connecterTypeID,                            \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */                            \n" +
                "														then min(c.functionalCategoryID)                            \n" +
                "														else -1 /* MisMatched */                            \n" +
                "												end) parttypeID,                            \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */                            \n" +
                "															then  min(c.mountingTypeID)                              \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */                              \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))                             \n" +
                "														else  -1                             \n" +
                "												end) mountingTypeID,                            \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */                            \n" +
                "												group_concat(kal.description) AS description                           \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal                            \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1                            \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '                            \n" +
                "												AND 	kal.partID =  ', pPartId, '                            \n" +
                "												AND 	kal.isDeleted = 0                            \n" +
                "												AND		c.isDeleted = 0                            \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem                            \n" +
                "									) AS kl                            \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'                            \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0                            \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID                            \n" +
                "												AND kl.partID = ka.assyID                            \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID          \n" +
                "							where 		 k.isDeleted = 0                           \n" +
                "						) AS a                  \n" +
                "					) AS c                  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))                 \n" +
                "					GROUP BY 	c.id, 			refSalesOrderDetID, 		partID, 			qpa, 			dnpQty, 				                  \n" +
                "							lineID,     		uomID,				unitName,			parttypeID,		partTypeName, 	                  \n" +
                "							c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,    		requirePinsBuild,	mfgPN,    		                  \n" +
                "							mfgPNIdsWithPackaging,	allocatedQty,			allocatedUnit,			allocatedPins,		scrapedPins,                            \n" +
                "							allocated_shared,	freeToShareAmongOtherKits,	allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	                  \n" +
                "							isInstall,		isBuyDNPQty,			description,			custPNID,                   \n" +
                "							custPN,  		custPIDCode, 			custIsCustom,          		restrictCPNUseWithPermissionStep, 			                  \n" +
                "							restrictCPNUsePermanentlyStep, 				restrictCPNUseInBOMStep,        restrictPackagingUsePermanently, 		                  \n" +
                "							restrictPackagingUseWithpermission,          		cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                            \n" +
                "							isNotRequiredKitAllocation, 				isNotRequiredKitAllocationValue, 			notRequiredKitAllocationReason,                            \n" +
                "							refRfqLineitem, 	rfqLineItemsId, 		c.numOfPosition,		mfgPart, 		c.connecterTypeID                  \n" +
                "  \n" +
                "		) As mainData                                                                                                                            \n" +
                "		WHERE', pWhereClause,' ', vFilterWhereClause                            \n" +
                "	);                            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;                            \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);                            \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                            \n" +
                "	EXECUTE mainQuery;                            \n" +
                "	DEALLOCATE PREPARE mainQuery;                            \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");                                             \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;             \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");                            \n" +
                "	PREPARE query3 FROM @SQLStatement3;                            \n" +
                "	EXECUTE query3;                            \n" +
                "	DEALLOCATE PREPARE query3;         \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");                            \n" +
                "	PREPARE query4 FROM @SQLStatement4;                            \n" +
                "	EXECUTE query4;                            \n" +
                "	DEALLOCATE PREPARE query4;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;                            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-02-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(                                                                                                                          \n" +
                "	IN pPageIndex INT,                                                                                                                                    \n" +
                "	IN pRecordPerPage INT,                                                                                                                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                           \n" +
                "	IN pRefSalesOrderDetID INT,                                                            \n" +
                "	IN pLineId LONGTEXT,                                                                                                                        \n" +
                "	IN pPartId INT,                                                                                                              \n" +
                "	IN pKitQty INT,                                                                                                \n" +
                "	IN pPackagingAlias BOOLEAN,                                                                                          \n" +
                "	IN pFunctionalType VARCHAR(1000),                                                                                          \n" +
                "	IN pMountingType VARCHAR(1000),                                                                                                                            \n" +
                "	IN pCartType VARCHAR(1000),                                                                                                                            \n" +
                "	IN pWarehouse VARCHAR(1000),                                    \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,                  \n" +
                "	IN pCustomerId INT                                                                                          \n" +
                ")  \n" +
                "BEGIN                                                                                                              \n" +
                "	DECLARE pOffset INT;                                                                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                                                                                                        \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                                                                                          \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                                                                                          \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                                                    \n" +
                "	SET SESSION group_concat_max_len = 500000;                                                                                                              \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                                                                                          \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN                                                                                                          \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");                                                                                                          \n" +
                "	ELSE                                                                                                           \n" +
                "		SET pWhereLineId = ' AND 1=1';                                                                                                          \n" +
                "	END IF;                                                                                 \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                                                                  \n" +
                "	ELSE                                                                                                                  \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";                                                                                                                  \n" +
                "	END IF;                                                                                                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN                                                                                                                                                        \n" +
                "		SET pWhereClause = ' 1=1';                                                                                                           \n" +
                "	END IF;	                                                                                           \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                                                                                                 \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                                                                                                \n" +
                "	END IF;                                                                                          \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                                                                                                 \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                                                                                                \n" +
                "	END IF;                                                                                           \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN                    \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId                   \n" +
                "		FROM kit_allocation ka                              \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId                      \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id                   \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID                    \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND                   \n" +
                "				ka.status = 'A' AND                   \n" +
                "                css.isdeleted = 0 AND                   \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE                          \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );                      \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                                                                                          \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');                                                                                                \n" +
                "		END IF;                                                                                          \n" +
                "	END IF;                                                                                                                       \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                                                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                                                          \n" +
                "	ELSE	                                                                                                                                                          \n" +
                "		SET rowNumWhere = '';                                                                                                                                                          \n" +
                "	END IF;                                                                                                         \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN                                    \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');                                    \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;                                                            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS                                                            \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;                                                   \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('                 \n" +
                "		SELECT	*              \n" +
                "		FROM	(              \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,		                  \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,                  \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,       	              \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,                  \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,                  \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,                  \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,                              \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,                  \n" +
                "					uomID, 			unitName,    			isInstall,				c.connecterTypeID, 		                  \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,                  \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 			numOfPosition, 			requireQty,    				requirePins,                   \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			              \n" +
                "					allocatedPins,		scrapedPins,         \n" +
                "					/*SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IFNULL(d.availableStock, 0)),0)) availableStock,        \n" +
                "					SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IFNULL(d.availableStock, 0)) availableStockInPin,*/             \n" +
                "					(                  \n" +
                "						CASE                  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0                  \n" +
                "							ELSE                   \n" +
                "								CASE                  \n" +
                "									WHEN c.connecterTypeID = -2 THEN                  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins) END                \n" +
                "									ELSE                  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit) END                \n" +
                "								END                  \n" +
                "						END                  \n" +
                "					) shortagePerBuild,                  \n" +
                "					(                  \n" +
                "						CASE                  \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0                  \n" +
                "							ELSE                  \n" +
                "								CASE                  \n" +
                "									WHEN c.connecterTypeID = - 2 THEN                  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0         \n" +
                "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - c.allocatedPins - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END                \n" +
                "									ELSE                  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0         \n" +
                "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - c.allocatedUnit - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END                \n" +
                "								END              \n" +
                "						END                  \n" +
                "					) shortagePerBuildWithAvailable                \n" +
                "				FROM	(                  \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,		                  \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,                  \n" +
                "							a.custPNID,		                  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,                  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,                  \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,                  \n" +
                "							a.restrictCPNUseInBOMStep,                   \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,                  \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,                  \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,                  \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,                              \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,                  \n" +
                "							a.uomID, 			fun_getUnitNameByID(a.uomID) unitName,                  \n" +
                "							a.isInstall,			a.connecterTypeID, 		                  \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,                       \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,                  \n" +
                "							',fun_getKitConsolidateLineMFGPNWithPackaging(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',        \n" +
                "							',fun_getKitMFRPNIdsWithPackaging(pRefSalesOrderDetID),',                  \n" +
                "							a.numOfPosition,               \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,                  \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,                   \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,                  \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.scrapedPins, 0) scrapedPins        \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a                  \n" +
                "					INNER JOIN 	(                   \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,                  \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.ConsumeQty) consumeQty,                  \n" +
                "										SUM(b.ConsumeUnits) consumeUnits,	SUM(b.AllocatedPins) allocatedPins, 	SUM(b.scrapedPins) scrapedPins                  \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a                   \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)                  \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs                  \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs                  \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'                  \n" +
                "				) AS  c             \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)        \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,		                  \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,                  \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,       	              \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,                  \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,                  \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,                  \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,                              \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,                  \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID, 		                  \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,                  \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,    				        \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,    			        \n" +
                "						consumeQty,		allocatedPins,			scrapedPins          \n" +
                "		)                \n" +
                "		AS  mainQuery        \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause          \n" +
                "	);                                                                                               \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;                                                                                                        \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);                                                                             	                                  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                        \n" +
                "	EXECUTE mainQuery;                                                                                                                                                        \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");                       \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                        \n" +
                "	EXECUTE query1;                                                                                                                                                        \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");                                                                                                                                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                        \n" +
                "	EXECUTE query2;                                                                                                                                                        \n" +
                "	DEALLOCATE PREPARE query2;                                                                                                                   \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");                                     \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                                                        \n" +
                "	EXECUTE query3;                                                                                                                                                        \n" +
                "	DEALLOCATE PREPARE query3;       \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");                          \n" +
                "	PREPARE query4 FROM @SQLStatement4;                          \n" +
                "	EXECUTE query4;                          \n" +
                "	DEALLOCATE PREPARE query4;                                                                                                                                          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-02-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (707,'1.00','V1','Kit Allocation Changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 707:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetStockAllocateList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(	                                                                                                                            \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),                                                                                                                            \n" +
                "	IN pAssyId INT,                                                                                                                            \n" +
                "	IN pPartId VARCHAR(255),                                                                                                                            \n" +
                "	IN pToUOM INT,                                                                                        \n" +
                "	IN pRfqLineItemIds VARCHAR(255),                  \n" +
                "	IN pCustomerId INT,                                                                                                               \n" +
                "	IN pType VARCHAR(255),                  \n" +
                "	IN pStockType VARCHAR(20)                                                      \n" +
                ")  \n" +
                "BEGIN                                                                                                                                   \n" +
                "	DECLARE v_WhareClause VARCHAR(255);                                                                                                                            \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);                                                                                                  \n" +
                "	DECLARE v_AssyId INT;                    \n" +
                "	DECLARE v_IsPurchase TINYINT;                  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);                    \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;                  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);                   \n" +
                "	SET SESSION group_concat_max_len = 500000;             \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')                  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN                   \n" +
                "	FROM 	kit_allocation_lineitems                  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID                   \n" +
                "			AND partID = pAssyId                   \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)                   \n" +
                "			AND isDeleted = 0                  \n" +
                "	LIMIT 	1;                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;                                          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS                  \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId                      \n" +
                "	FROM 		component c                       \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0                      \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartId)                    \n" +
                "				AND c.isDeleted = 0    \n" +
                "	GROUP BY 	mfrPNId;    \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN                       \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS                  \n" +
                "		SELECT 	*                                                                                    \n" +
                "		FROM 	(                                                                                    \n" +
                "				SELECT  	*                                                                                                                              \n" +
                "				FROM 		(                                                                                                                              \n" +
                "							SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                          \n" +
                "									fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                              \n" +
                "									IFNULL(cst.customerID, 0) customerID,		cst.binID,			IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID, 	              \n" +
                "									IFNULL(cst.assyID, 0) assyID,			cst.receiveMaterialType,	cst.customerConsign,	cst.uom,	cst.packaging,			                  \n" +
                "									cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                                                                    \n" +
                "									cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,                                                                                                                       \n" +
                "									cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                                                                                              \n" +
                "									cst.pkgUnit,		c.PIDCode,		IFNULL(cst.nickName, '-') nickName,			IFNULL(fun_getMfgCodeAndNameByID(cst.customerID), '-') customer,	                              \n" +
                "									IFNULL(ca.PIDCode, '-') assembly,		c.RoHSStatusID	rohsID,                  \n" +
                "									fun_getRoHSNameByID(c.RoHSStatusID) rohsName,				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                                                                                                                      \n" +
                "									IFNULL(fun_getRoHSNameByID(ca.RoHSStatusID), '-') assyRohsName,		IFNULL(fun_getRoHSIconByID(ca.RoHSStatusID), '-') assyRohsIcon,                                                                                            \n" +
                "									fun_getBinNameByID(cst.binID) binName,			      		fun_getWarehouseNameByBinID(cst.binID) warehouseName,                                      \n" +
                "									fun_getWareHouseTypeByBinID(cst.binID) warehouseType,			fun_getDepartmentNameByBinID(cst.binID) departmentName,	                                                                                                                              \n" +
                "									fun_getUnitNameByID(cst.uom) unitName,			                              \n" +
                "									c.mfgPN,		0 pendingUMIDQty,                                                                                                                            \n" +
                "									fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                            \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,                                                                                                                            \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,                                    \n" +
                "									(                            \n" +
                "										CASE                             \n" +
                "											WHEN c.connecterTypeID = -2 THEN                            \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))                            \n" +
                "											ELSE 0                            \n" +
                "										END                            \n" +
                "									) allocatedPins,                                                                                      \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,                              \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,                                                                                                                \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,                                                                      \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,             	c.isGoodPart,                                                                                                     \n" +
                "									c.restrictUsePermanently,		c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                                                                   \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,					d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                                                                            \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,                                                        \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,					cst.isUMIDRestrict,	                              \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                                                                      \n" +
                "									d.customerApproval customerApproveStatus,                                       v_CustomerApprovalCPN customerApproveStatusCPN,                                                          \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,						fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                  \n" +
                "									v_IsPurchase isPurchase,      \n" +
                "									fun_getBOMLineCleanStatusErrorCategoryWise(NULL, d.refRfqLineitem, cst.id, pAssyId, 2) lineCleanStatus      \n" +
                "									-- concat(d.refRfqLineitem, '###', cst.id, '###', pAssyId) lineCleanStatus                                                                          \n" +
                "									-- cst.id lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst                                                                                                                \n" +
                "							LEFT JOIN 	component c ON c.id = cst.refcompid                                                                                               \n" +
                "							LEFT JOIN	component ca ON ca.id = cst.assyID                                                                                                                           \n" +
                "							LEFT JOIN 	(                                                                                                                                \n" +
                "										SELECT 		ka.refUIDId,                               \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                                                                           \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                  \n" +
                "										FROM 		kit_allocation ka                                                                                                                  \n" +
                "										WHERE 		ka.status = 'A'                                                                                                                           \n" +
                "										GROUP BY 	ka.refUIDId                                                                                                                              \n" +
                "									) AS ka ON ka.refUIDId = cst.id                  \n" +
                "							LEFT JOIN	(         \n" +
                "										SELECT 		a.id, a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(a.mfgPNID, c.id) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                     \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                   \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                           \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                            \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                   \n" +
                "													AND a.partID = pAssyId                      \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                 \n" +
                "													AND a.isDeleted = 0     \n" +
                "										GROUP BY 	id, refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                \n" +
                "										UNION  \n" +
                "										SELECT 		a.id, a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  		                     \n" +
                "										FROM 		kit_allocation_lineitems a                                   \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                   \n" +
                "													AND a.partID = pAssyId                      \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                 \n" +
                "													AND a.isDeleted = 0     \n" +
                "										GROUP BY 	id, refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                        \n" +
                "									) d ON d.mfgPNID = cst.refcompid                  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                  \n" +
                "										AND (                  \n" +
                "											CASE                  \n" +
                "												WHEN pStockType = 'IS' THEN                  \n" +
                "													cst.customerConsign = 0                  \n" +
                "												WHEN pStockType = 'CS' THEN                  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                  \n" +
                "												ELSE                  \n" +
                "													1 = 1                  \n" +
                "											END                  \n" +
                "											)                  \n" +
                "										AND cst.isDeleted = 0                  \n" +
                "						) a                                                                                                                              \n" +
                "						WHERE 		FreeToShare > 0                   \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                                                                    \n" +
                "			) b;                                                                                    \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                  \n" +
                "		SELECT 		0 AS id,			'-' AS uid,				refcompid,			0 AS pkgQty, 		                              \n" +
                "				'-' AS dateCode,   		'-' AS internalDateCodeInDate,		0 AS customerID,		0 AS binID, 	                                                                                    \n" +
                "				0 AS salesOrderDetailID,	0 AS assyID,				'-' AS receiveMaterialType, 	0 AS customerConsign,	                              \n" +
                "				c.uom,				c.packagingID packaging,		fromBin,			b.Name fromBinName,                                                                                    \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		                  \n" +
                "				w.parentWHID fromDepartment,	fun_getWarehouseNameByID(w.parentWHID) fromDepartmentName,                                                                                    \n" +
                "				0 AS pkgUnit,			c.PIDCode,				'-' nickName,			'-' AS customer,		                              \n" +
                "				'-' AS assembly,		c.RoHSStatusID	rohsID,                  \n" +
                "				'-' AS assyRohsName,		'-' AS assyRohsIcon,			                  \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		                              \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                            			                                                                                                                              \n" +
                "				'-' AS binName,			'-' AS warehouseName, 			'-' AS warehouseType,		'-' AS departmentName,	                                                                                                                              \n" +
                "				fun_getUnitNameByID(c.uom) unitName,					c.mfgPN,			pendingUMIDQty,                                                                                                                            \n" +
                "				0 AS convertedUnit,		0 currentPin,				'-' AS allocatedToKit,		                  \n" +
                "				0 AS allocatedQty,		0 AS allocatedUnit,			0 AS allocatedPins,		0 AS scrapedPins,                              \n" +
                "				0 AS FreeToShare,		0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		'-' costCategory, 			                              \n" +
                "				c.isGoodPart,			c.restrictUsePermanently,		c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently, 	                              \n" +
                "				c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		0 AS restrictUseInBOMWithPermission,	                                                        \n" +
                "				1 AS restrictUseInBOMExcluding,	0 AS restrictUseInBOMExcludingAliasWithPermission,			v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,                                                        \n" +
                "				0 AS isUMIDRestrict,		fun_convertUOM(c.uom,pToUOM,c.unit) unit,				'-' customerApproveStatus,		                              \n" +
                "				v_CustomerApprovalCPN customerApproveStatusCPN,				0 UMIDRohsStatusID,			'-' UMIDRohsStatus, 		      \n" +
                "				v_IsPurchase isPurchase, 	0 AS lineCleanStatus                                                           \n" +
                "		FROM 		(                  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                  \n" +
                "					FROM 		vu_umid_creation_pending vu                  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID                  \n" +
                "				) vu                                                                                    \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid                                                                                    \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0                   \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0                                                                                  \n" +
                "		WHERE 		c.id IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart) AND pendingUMIDQty > 0;	                                                                                \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                  \n" +
                "		ELSE                  \n" +
                "			SELECT 	*		                          \n" +
                "			FROM 	(                          \n" +
                "					SELECT  id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		            \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                          \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		              \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			            \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                          \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				            \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		            \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		            \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                          \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                    \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                    \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			            \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus            \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                  \n" +
                "					UNION ALL              \n" +
                "					SELECT 	id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		            \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                          \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		              \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			            \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                          \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				            \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		            \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		            \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                          \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                    \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                    \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			            \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus             \n" +
                "					FROM 	temp_nonUmidAvailableStock                                                                                    \n" +
                "				) d;                          \n" +
                "				-- ORDER BY internalDateCodeInDate IS NULL, internalDateCodeInDate, costCategory, uid;                    \n" +
                "		END IF;                                                                                                                    \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN                                                                                                                          \n" +
                "		SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                          \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                              \n" +
                "				cst.customerID,		cst.binID,		cst.salesOrderDetailID, 	cst.assyID,		cst.receiveMaterialType,                  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,					                  \n" +
                "				cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                                                                    \n" +
                "				cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,                                                                                                                       \n" +
                "				cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                              \n" +
                "				fun_getBinNameByID(cst.binID) binName,		cst.pkgUnit,		cst.nickName,			                              \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,	fun_getWareHouseTypeByBinID(cst.binID) warehouseType,                                      \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	fun_getDepartmentTypeByBinID(cst.binID) departmentType,                                                                                                                             \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			                                                                                              \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	fun_getAssyPIDCodeByID(cst.assyID) assembly,	                              \n" +
                "				c.PIDCode,		c.mfgPN, 			c.RoHSStatusID rohsID,				                                     \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                   \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                              \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                                 \n" +
                "				v_NumOfPosition bomPin,                  \n" +
                "				c.noOfPosition,                                                                                                                    \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                                                                                                                                     \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                          \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,                                                                                                                \n" +
                "				c.isCustom,                    \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                                                    \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                                              \n" +
                "				c.isCustom,	cst.rohsStatusID UMIDRohsStatusID,                                              \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                                        \n" +
                "				ka.roHSApprovalReason,                                        \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                        \n" +
                "		FROM 		component_sid_stock cst                                                                                                                                \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid                                                                                                \n" +
                "		LEFT JOIN 	(                  \n" +
                "					SELECT 		b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                   \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                     \n" +
                "					FROM 		(                  \n" +
                "								SELECT 		refUIDId, partID, allocatedUOM, consumeUOM,                   \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                   \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                    \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                  \n" +
                "								FROM 		kit_allocation                   \n" +
                "								WHERE 		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                  \n" +
                "								GROUP BY 	refUIDId, partID, allocatedUOM, consumeUOM                  \n" +
                "							) a                  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId AND (CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                  \n" +
                " 				) ka ON ka.refUIDId = cst.id                                                                                                                                 \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                           \n" +
                "					AND ka.assyID = IFNULL(pAssyId,ka.assyID)                        \n" +
                "					AND ka.partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                                                                                  \n" +
                "					AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)                                                                                                                 \n" +
                "					AND (                  \n" +
                "						CASE                   \n" +
                "							WHEN pType = 'AllocatedStock' THEN                   \n" +
                "								ka.`status` = 'A'                   \n" +
                "							ELSE                   \n" +
                "								ka.`status` = 'R'                   \n" +
                "						END                  \n" +
                "					)                  \n" +
                "					AND cst.isDeleted = 0                  \n" +
                "		ORDER BY 	internalDateCodeInDate, costCategory, cst.uid;                       \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;                                                                                                                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(                                                                                                     \n" +
                "	IN ppageIndex INT,            \n" +
                "	IN precordPerPage INT,            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pIsKitList TINYINT,            \n" +
                "	IN pPlannedStatus VARCHAR(10),            \n" +
                "	IN pSalesOrderDetailId INT,            \n" +
                "	IN pIsPendingWOCreationList TINYINT,            \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),            \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE pOffset INT;            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);            \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);            \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);            \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);            \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);            \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);            \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';            \n" +
                "	SET v_PendingWOWhereClause='';            \n" +
                "	IF(pIsKitList=1) THEN            \n" +
                "		SET v_DynamicColumns = CONCAT(\",            \n" +
                "			hu.refType as refTypeKR,            \n" +
                "			hu.status as haltStatusKR,            \n" +
                "			(            \n" +
                "				CASE            \n" +
                "					WHEN hu.status = 'H' THEN            \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))                                                                        \n" +
                "					ELSE ''            \n" +
                "				END            \n" +
                "			) AS reasonKR,            \n" +
                "			hutt.refType as refTypePO,            \n" +
                "			hutt.status as haltStatusPO,            \n" +
                "			(            \n" +
                "				CASE            \n" +
                "					WHEN hutt.status = 'H' THEN            \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))                                                                        \n" +
                "					ELSE ''            \n" +
                "				END            \n" +
                "			) AS reasonPO,            \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion            \n" +
                "		\");                                                      \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"                                                        \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refSalesOrderDetID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refSalesOrderDetID = htt.refSalesOrderDetID and htt.refType='KR' and htt.isDeleted=0)                                                     \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refSalesOrderDetID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refSalesOrderDetID = httt.refSalesOrderDetID and httt.refType='PO' and httt.isDeleted=0)                  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;                                                      \n" +
                "	ELSE                                                      \n" +
                "		SET v_DynamicColumns=CONCAT(\",                                  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,                                                      \n" +
                "			(                                  \n" +
                "				CASE                                                                \n" +
                "					WHEN hut.status = 'H' THEN                                                     \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))                                                                        \n" +
                "					ELSE ''                                                             \n" +
                "				END                                  \n" +
                "			) AS reasonPO                                  \n" +
                "		\");                                                      \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"                                  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refSalesOrderDetID and hut.id = (                                  \n" +
                "				SELECT 	MAX(ht.id)                                   \n" +
                "				FROM 	holdunholdtrans ht                                   \n" +
                "				WHERE 	hut.refSalesOrderDetID = ht.refSalesOrderDetID                                   \n" +
                "						AND ht.refType='PO'                                   \n" +
                "						AND ht.isdeleted=0                                  \n" +
                "					)                                  \n" +
                "				\") ;                                                      \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN                                           \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');                                         \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");                                                      \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (                                                    \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,                                   \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,                                   \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,                                   \n" +
                "						vusalesorderdet.poNumber,                                   \n" +
                "						vusalesorderdet.salesOrderNumber                                            \n" +
                "				FROM 		workorder wo                                                                                                        \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3                                              \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID                                            \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode                                   \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)                                  \n" +
                "		\");                                                      \n" +
                "	END IF;                            \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN                        \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd                         \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');                        \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,                        \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');                                               \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';                        \n" +
                "        IF pOrderBy IS NULL THEN                        \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';                        \n" +
                "        END IF;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"                                                                                  \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,                                                                                                  \n" +
                "			(                                                                \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN                                                                 \n" +
                "						'No'                                                                                                    \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN                                                                 \n" +
                "						'Yes'                                                                 \n" +
                "					ELSE                                                                 \n" +
                "						''                                                                 \n" +
                "				END                                                                \n" +
                "			) AS `isHotJobValue`,                                                                                                    \n" +
                "			`vuss`.`Sales Order ID` AS id,                                                                                                  \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,                                                                                                \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,                                                                                                    \n" +
                "			`vuss`.`Po Number` AS poNumber,                                                                                                    \n" +
                "			`vuss`.`Po Date` AS poDate,                                                                                                    \n" +
                "			`vuss`.`Customer ID` AS customerID,                                                                                                    \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,                                                                                                    \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,                                                                                                    \n" +
                "			`vuss`.`Sales Order Status` AS `status`,                                                                                                    \n" +
                "			`vuss`.`Revision` AS revision,                                                                                                    \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,                                                                                                    \n" +
                "			`vuss`.`Terms ID` AS termsID,                                                                                                    \n" +
                "			`vuss`.`So Date` AS soDate,                                                                                                    \n" +
                "			`vuss`.`Company Name` AS companyName,                   \n" +
                "            `vuss`.`internalPO` AS internalPO,                   \n" +
                "			`vuss`.`mfgCode` AS mfgCode,                                            \n" +
                "			`vuss`.`Full Name` AS fullName,                                                                                                    \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,                                                                                                \n" +
                "			`vuss`.`PO Qty` AS qty,                                                                                                \n" +
                "			`vuss`.`mrpQty` AS mrpQty,                                      \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,                                               \n" +
                "			`vuss`.`kitQty` AS kitQty, \",                                                                                         \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),                                                                                                \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,                                                                                                \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,                                                                                                \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,                                                                                                \n" +
                "			`vuss`.`shippingQty` AS shippingQty,                                                                                                \n" +
                "			`vuss`.`remark` AS remark,                                                                                                \n" +
                "			`vuss`.`Assy ID` AS PIDCode,                                                                                          \n" +
                "			`vuss`.`Assy Name` AS mfgPN,                                                                                              \n" +
                "			`vuss`.`NickName` AS nickName,                                                                                               \n" +
                "			`vuss`.`liveVersion` AS liveVersion,                                                                                               \n" +
                "			`vuss`.`partDescription` AS partDescription,                                                                                                \n" +
                "			`vuss`.`cancleReason` AS cancleReason,                                                                                                \n" +
                "			`vuss`.`Status` AS completedStatus,                                                                                                    \n" +
                "			`vuss`.`modifyDate` AS modifyDate,                                                                                                      \n" +
                "			`vuss`.`createdDate` AS createdDate,                                                                                                  \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,                                                                                                 \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,                                                                                                    \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,                                                                                                 \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,                                                                                                 \n" +
                "			`vuss`.`PartID` AS partID,                                                     \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,                                              \n" +
                "			`vuss`.`kitNumber` AS kitNumber,      \n" +
                "			vuss.internalCommentSo,      \n" +
                "			vuss.internalComment,                            \n" +
                "             ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,                      \n" +
                "			fun_getStatusNameByColumnAndID('SOSTATUS',ifnull(vuss.salesOrderDetStatus,1)) as salesOrderDetStatusConvertedValues,                   \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,                            \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,                                                                          \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId) as isBuildWiseHotJob,                                                                              \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,                     \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,                       \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,                                 \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,                                                                                                \n" +
                "			(                                                                \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN                                                                 \n" +
                "						'Draft'                                                                                                     \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN                                                                 \n" +
                "						'Published'                                                                                                    \n" +
                "					ELSE                                                                 \n" +
                "						''                                                                 \n" +
                "				END                                                                \n" +
                "			) AS `statusConvertedValue`,                                            \n" +
                "			hutkit.refType as refTypeKA,                                          \n" +
                "			hutkit.status as haltStatusKA,                                                       \n" +
                "			(                                  \n" +
                "				CASE                                                                \n" +
                "					WHEN 	hutkit.status = 'H' THEN                                                     \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))                                                                        \n" +
                "					ELSE 	''                                                              \n" +
                "				END                                  \n" +
                "			) AS reasonKA,                                            \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,                                                                                      \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,                                                \n" +
                "			(                                  \n" +
                "				CASE 	                                  \n" +
                "					WHEN 	ka.kitReturnStatus is null then                                   \n" +
                "						'N/A'                                   \n" +
                "					ELSE 	                                  \n" +
                "						ka.kitReturnStatus                                   \n" +
                "				END                                  \n" +
                "			) as kitReturnStatus,                                              \n" +
                "			(                                  \n" +
                "				CASE 	                                  \n" +
                "					WHEN ka.kitReleaseStatus is null then                                   \n" +
                "						'Not Released'                                   \n" +
                "					else                                   \n" +
                "						ka.kitReleaseStatus                                   \n" +
                "				END                                  \n" +
                "			) as kitReleaseStatus,                                                                  \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,                    \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100                 \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage, 			                               \n" +
                "			p.nextReleaseDate,                                                                \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,                                              \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,                                              \n" +
                "			p.releasedPlanCount totalkitRelease,                                                                        \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,                                                              \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,                                   \n" +
                "			vuss.releasedWorkorder,    \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"                                                      \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"                                              \n" +
                "	LEFT JOIN  	(                                              \n" +
                "				SELECT  salesOrderDetID,                                   \n" +
                "					refAssyId,                                               \n" +
                "					count(1) totalPlan,                                               \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,                                              \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate                                              \n" +
                "				FROM 	salesorder_plan_detailsmst                                               \n" +
                "				WHERE 	isDeleted=0                                \n" +
                "						AND subAssyID is null                                               \n" +
                "				GROUP BY salesOrderDetID, refAssyId                                              \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`                                                 \n" +
                "	LEFT JOIN 	(                                              \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                \n" +
                "					`k`.`assyID` AS `assyID`,                                    \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,                                              \n" +
                "					`k`.`shortageLine` AS `shortageLine`,                            \n" +
                "                     allocPermainAssy allocPerComponent,                            \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,                                              \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,                                               \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,                                              \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`                                              \n" +
                "					FROM (                                              \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                   \n" +
                "							mainAssy AS `assyID`,                                     \n" +
                "							COUNT(1) AS `totalLine`,                                   \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,                                  \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,                                    \n" +
                "							sum( k.shortageline) shortageline,                              \n" +
                "							ROUND(SUM(CASE WHEN (k.allocationPer > 100 OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(case when k.qpaWithDnp != 0 then 1 else 0 end), 2) AS `allocPerWithSubAssy`,  \n" +
                "							ROUND(SUM(CASE WHEN (k.allocatedPercePerLine > 100 OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocatedPercePerLine, 0), 2) END) / SUM(case when k.qpaWithDnp != 0 then MainAssyLine else 0 end), 2) AS `allocPermainAssy`                                           \n" +
                "					      FROM (  \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,                                              \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,         \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,                             \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,                              \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,   \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,   \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`                                               \n" +
                "								FROM  	`vu_kit_allocation_detail` vk                                \n" +
                "                                 Inner join    salesorderdet sd on vk.refSalesorderdetid  =sd.id               \n" +
                "                                 WHERE    vk.`isNotRequiredKitAllocation` != 1                       \n" +
                "							) `k`                               \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy                              \n" +
                "					) `k`                                         \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`                                                 \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0                                                    \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refSalesOrderDetID and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refSalesOrderDetID = htk.refSalesOrderDetID and htk.refType='KA' and htk.isDeleted=0)                                                                 \n" +
                "	\");                                                                                         \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                    \n" +
                "	ELSE                                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;                                                                                                    \n" +
                "	END IF;                                                                                                     \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                                                                    \n" +
                "	END IF;                                             \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);                                            \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);                        \n" +
                "    END IF;                            \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN                              \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) \");                       \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN                                                                                                    \n" +
                "		IF (pPlannedStatus = 'P') THEN                                                                \n" +
                "			SET v_PlannedWhere = \" AND kitReleasePlanCount > 0\";                                                                \n" +
                "		ELSEIF (pPlannedStatus = 'R') THEN                                                                \n" +
                "			SET v_PlannedWhere = \" AND kitReleasePlanCount <= 0\";                                                                \n" +
                "		END IF;                                                                                                    \n" +
                "	END IF;                                                                  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN                                                                \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);                                                                \n" +
                "	END IF;                                          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                                                                       \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                    \n" +
                "	ELSE                                                                                                     \n" +
                "		SET rowNumWhere = '';                                                                                                    \n" +
                "	END IF;                                                                                 \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                       \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));                                                                                      \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                     \n" +
                "	EXECUTE query1;                                                                                      \n" +
                "	DEALLOCATE PREPARE query1;                                                                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                                                                                      \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                                                                      \n" +
                "	EXECUTE query2;                                                                                      \n" +
                "	DEALLOCATE PREPARE query2;                                                                                                     \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount <= 0 AND \", pWhereClause, v_PendingWOWhereClause);                                                                                          \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                      \n" +
                "	EXECUTE query3;                                                                                      \n" +
                "	DEALLOCATE PREPARE query3;                                                                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetKitReleasePlanDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(                     \n" +
                "	IN pRefSalesOrderDetID INT,                             \n" +
                "	IN pAssyID INT,                                \n" +
                "	IN pSubAssyID INT                                \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);                \n" +
                "	DECLARE vMismatchItem DECIMAL(18,8);                                  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);                                   \n" +
                "	DECLARE vCurrentDateTime DATETIME;                                \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');                                \n" +
                "	SET vMismatchItem = func_MismatchItemForKit(pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), 'M', NULL, NULL);                                \n" +
                "  \n" +
                "	SELECT  (  \n" +
                "			CASE  \n" +
                "				WHEN connecterTypeID = -2 THEN  \n" +
                "					IFNULL(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)),0)  \n" +
                "				ELSE  \n" +
                "					IFNULL(MIN(allocatedunit/qpaWithDnp),0)  \n" +
                "			END  \n" +
                "		)  \n" +
                "	INTO 	vFeasibilityWithAllocatedQty                                \n" +
                "	FROM 	vu_kit_allocation_detail                                 \n" +
                "	WHERE 	refSalesorderdetid = pRefSalesOrderDetID             \n" +
                "			AND assyID = IFNULL(pSubAssyID, pAssyID);                                 \n" +
                "  \n" +
                "	SELECT 		id, 	            \n" +
                "			plannKitNumber, 	            \n" +
                "			poQty, 		            \n" +
                "			poDueDate,		            \n" +
                "			materialDockDate, 	            \n" +
                "			kitReleaseQty,             \n" +
                "			kitReleaseDate,                                 \n" +
                "			vFeasibilityWithAllocatedQty AS currentBuildFeasibility,                                \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,                                 \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (kitReleaseQty - buildFeasibility) ELSE kitReleaseQty END) AS Shortage,                                \n" +
                "			func_getTotalShortageLineForKit(pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), FALSE, calculatedKitQty) shortageLines,                        \n" +
                "			calculatedKitQty,                         \n" +
                "			actualKitReleaseDate, 		                            \n" +
                "			releaseTimeFeasibility, 	            \n" +
                "			releasedByName,                               \n" +
                "			mfrLeadTime,              \n" +
                "			kitStatus, 	            \n" +
                "			RushJob,	             \n" +
                "			mismatchItem, 	                        \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,             \n" +
                "			releasedNote,                          \n" +
                "			releaseKitNumber,	            \n" +
                "			subAssyReleaseCount,		            \n" +
                "			subAssyReleasedCount,                \n" +
                "			woID,	            \n" +
                "			kitReturnDate,                  \n" +
                "			kitReturnStatus,            \n" +
                "			woStatusID,    \n" +
                "            woSubStatusID    \n" +
                "	FROM	                                 \n" +
                "			(                                \n" +
                "				SELECT *,             \n" +
                "					(            \n" +
                "						CASE             \n" +
                "							WHEN (calculatedKitQty >  vFeasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - vFeasibilityWithAllocatedQty))             \n" +
                "							ELSE kitReleaseQty             \n" +
                "						END            \n" +
                "					) buildFeasibility                                \n" +
                "				FROM	(                                \n" +
                "						SELECT 	r.*,             \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty                                \n" +
                "						FROM 	vu_release_plan_detail r                        \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID                         \n" +
                "								AND r.refAssyId = pAssyID                        \n" +
                "								AND (            \n" +
                "									CASE             \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID             \n" +
                "										ELSE r.subAssyID IS NULL             \n" +
                "									END            \n" +
                "								)                        \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id                             \n" +
                "					)                                \n" +
                "				AS a                                \n" +
                "	 		)                                \n" +
                "	AS b                                \n" +
                "	ORDER BY poDueDate;                   \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE deletedAt IS NULL AND sDetID = pRefSalesOrderDetID;                              \n" +
                "  \n" +
                "	SELECT 	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty         \n" +
                "	FROM 	salesorder_plan_detailsmst         \n" +
                "	WHERE 	deletedAt IS NULL         \n" +
                "			AND salesOrderDetID = pRefSalesOrderDetID         \n" +
                "			AND refAssyId = pAssyID AND subAssyID IS NULL;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(                          \n" +
                "	IN pRefSalesOrderDetID INT,                    \n" +
                "	IN pAssyID INT,       \n" +
                "	IN pMainAssyID INT,            \n" +
                "	IN pIsConsolidated TINYINT                \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "		DECLARE vReleaseCount INT;                               \n" +
                "		DECLARE vTotalReleased DECIMAL(18,8);                    \n" +
                "		DECLARE vToBeRelease DECIMAL(18,8);                     \n" +
                "		DECLARE vKitQty DECIMAL(18,8);                  \n" +
                "		DECLARE vTotalReleaseQty INT;              \n" +
                "		DECLARE vTotalBuildFesibility DECIMAL(18,8);              \n" +
                "		DECLARE vShortageQty DECIMAL(18,8);              \n" +
                "		DECLARE vSubAssyQPA INT;              \n" +
                "		DECLARE vKitReleaseStatus VARCHAR(50);        \n" +
                "		DECLARE vSalesOrderStatus VARCHAR(15);      \n" +
                "		SELECT 	SUM(CASE WHEN  kitStatus = 'R' THEN 1 ELSE 0 END),       \n" +
                "				SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END),       \n" +
                "				SUM(kitReleaseQty)           \n" +
                "		INTO 	vReleaseCount, vTotalReleased, vTotalReleaseQty      \n" +
                "		FROM 	salesorder_plan_detailsmst                \n" +
                "		WHERE 	salesOrderDetID = pRefSalesOrderDetID      \n" +
                "		AND 	refAssyId = pMainAssyID              \n" +
                "		AND 	(CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)      \n" +
                "		AND		isDeleted = 0;      \n" +
                "  \n" +
                "		IF (pIsConsolidated = 0 AND pAssyID != pMainAssyID) THEN              \n" +
                "				SELECT 	perAssyBuildQty INTO vSubAssyQPA       \n" +
                "				FROM 	kit_allocation_assy_detail       \n" +
                "				WHERE 	refSalesOrderDetID = pRefSalesOrderDetID       \n" +
                "				AND 	partID = pAssyID      \n" +
                "				AND		isDeleted = 0;      \n" +
                "  \n" +
                "				SET 	vTotalReleaseQty = vTotalReleaseQty * vSubAssyQPA;      \n" +
                "		END IF;                     \n" +
                "  \n" +
                "		SELECT 	(  \n" +
                "				CASE  \n" +
                "					WHEN connecterTypeID = -2 THEN  \n" +
                "						IFNULL(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)),0)  \n" +
                "					ELSE  \n" +
                "						IFNULL(MIN(allocatedunit/qpaWithDnp),0)  \n" +
                "				END  \n" +
                "			)  \n" +
                "		INTO 	vTotalBuildFesibility              \n" +
                "		FROM 	vu_kit_allocation_detail                     \n" +
                "		WHERE 	refSalesorderdetid = pRefSalesOrderDetID     \n" +
                "		AND 	assyID = pAssyID;               \n" +
                "  \n" +
                "		SET vToBeRelease = IFNULL(vTotalReleaseQty, 0) - IFNULL(vTotalReleased, 0);              \n" +
                "		SET vShortageQty = IFNULL(vTotalReleaseQty, 0) - IFNULL(vTotalBuildFesibility, 0);                \n" +
                "		IF (pIsConsolidated) THEN         \n" +
                "			SELECT kitReleaseStatus INTO vKitReleaseStatus FROM vu_perjob_shortage WHERE refSalesOrderDetID = pRefSalesOrderDetID;        \n" +
                "		ELSE        \n" +
                "			SELECT kitReleaseStatus INTO vKitReleaseStatus FROM vu_perjob_shortage_with_sub_assembly WHERE refSalesOrderDetID = pRefSalesOrderDetID AND subAssyID = pAssyID;        \n" +
                "		END IF;        \n" +
                "		SELECT `Status` INTO vSalesOrderStatus FROM vu_salesorder_updatedlist_report WHERE SalesOrderDetailId = pRefSalesOrderDetID;    \n" +
                "		SELECT 	vReleaseCount releaseCount,		              \n" +
                "				IFNULL(vKitReleaseStatus, 'Not Released') releaseStatus,           \n" +
                "				fun_getKitReturnStatus(pRefSalesOrderDetID, pAssyID, pMainAssyID, pIsConsolidated) kitReturnStatus,                           \n" +
                "				vTotalReleased totalReleased,	       \n" +
                "				vToBeRelease toBeRelease,              \n" +
                "				vShortageQty shortageQty,    \n" +
                "				vSalesOrderStatus salesOrderCompletedStatus;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_KitRelease` ;  \n" +
                "CREATE PROCEDURE `Sproc_KitRelease`(                                \n" +
                "	IN pRefSalesOrderDetID INT,                       \n" +
                "	IN pAssyID INT,                                       \n" +
                "	IN pSubAssyID INT,                           \n" +
                "	IN pPlanDetID INT,                                 \n" +
                "	IN pWOID INT,                \n" +
                "	IN pToDeptId INT,                \n" +
                "	IN pDescription VARCHAR(1000),                  \n" +
                "	IN pCreatedBy VARCHAR(255),                          \n" +
                "	IN pCreateByRoleId INT,              \n" +
                "	IN pIsReRelease TINYINT                     \n" +
                ")  \n" +
                "BEGIN                         \n" +
                "	/* Return list of error code if any validation not passed                        \n" +
                "	1: If kit qty and plan kit qty mismatch                        \n" +
                "	*/                        \n" +
                "  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);                          \n" +
                "	-- DECLARE vFromParentWarehouse INT(11);                          \n" +
                "	-- DECLARE vToParentWarehouse INT(11);                          \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);                          \n" +
                "	DECLARE vNickname VARCHAR(50);                        \n" +
                "	DECLARE vReleaseKitNumber VARCHAR(60);                        \n" +
                "	DECLARE vTotalPlan INT;                        \n" +
                "	DECLARE vReleasedPlan INT;                            \n" +
                "	DECLARE vKitQty INT;                        \n" +
                "	DECLARE vIsReleaseKit TINYINT;                      \n" +
                "	DECLARE vPlanExists INT;       \n" +
                "    DECLARE vActualKitReleaseDate DATETIME;    \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                                \n" +
                "	BEGIN                                \n" +
                "		ROLLBACK;                                \n" +
                "		RESIGNAL;                                \n" +
                "	END;                                \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                \n" +
                "	BEGIN                                \n" +
                "		ROLLBACK;                                \n" +
                "		RESIGNAL;          \n" +
                "	END;                                \n" +
                "	START TRANSACTION;                                \n" +
                "  \n" +
                "    SET vActualKitReleaseDate = fun_DatetimetoUTCDateTime();    \n" +
                "	SELECT 	COUNT(1) INTO vPlanExists               \n" +
                "        FROM 	salesorder_plan_detailsmst                     \n" +
                "        WHERE 	id = pPlanDetID                 \n" +
                "			AND kitStatus = 'R'                 \n" +
                "			AND salesOrderDetID = pRefSalesOrderDetID                     \n" +
                "			AND refAssyId = pAssyID                 \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);                    \n" +
                "  \n" +
                "        IF(vPlanExists = 1 AND pIsReRelease = 0) THEN                    \n" +
                "		UPDATE 	salesorder_plan_detailsmst                          \n" +
                "		SET 	woID = pWOID,                           \n" +
                "			releasedNote = pDescription,                        \n" +
                "			updatedBy = pCreatedBy,                                \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime(),                          \n" +
                "			updateByRoleId = pCreateByRoleId                     \n" +
                "		WHERE 	id = pPlanDetID;                          \n" +
                "  \n" +
                "		SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isUpdateRelease;                  \n" +
                "	ELSE                     \n" +
                "		SET vIsReleaseKit = 1;                        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail                        \n" +
                "		( errorCode INT );                        \n" +
                "  \n" +
                "		-- get total plan count of main assembly                        \n" +
                "		SELECT COUNT(1) INTO vTotalPlan FROM salesorder_plan_detailsmst                         \n" +
                "		WHERE refAssyId = pAssyID AND subAssyID IS NULL AND isDeleted = 0;                        \n" +
                "  \n" +
                "		-- get released plan count based on selected assembly                        \n" +
                "		SELECT 	COUNT(1) INTO vReleasedPlan FROM salesorder_plan_detailsmst                         \n" +
                "		WHERE 	refAssyId = pAssyID                         \n" +
                "				AND 	(CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)                        \n" +
                "				AND 	kitStatus = 'R'                        \n" +
                "				AND 	isDeleted = 0;                        \n" +
                "  \n" +
                "		-- if release for last plan and if plan kit release qty and sales order kit qty is not match then restrict to release kit                         \n" +
                "		IF((vTotalPlan - vReleasedPlan) = 1) THEN                        \n" +
                "			SELECT 		(                \n" +
                "						CASE                 \n" +
                "							WHEN (SUM(IFNULL(s.kitReleaseQty, 0)) != sd.kitQty OR SUM(IFNULL(s.poQty, 0)) != sd.qty) THEN                 \n" +
                "								0                 \n" +
                "							ELSE                 \n" +
                "								1                 \n" +
                "						END                \n" +
                "					)                         \n" +
                "			INTO 		vIsReleaseKit                        \n" +
                "			FROM 		salesorder_plan_detailsmst s                        \n" +
                "			INNER JOIN 	salesorderdet sd ON s.salesOrderDetID = sd.id AND sd.partCategory=3                        \n" +
                "			WHERE  		s.salesOrderDetID  = pRefSalesOrderDetID AND s.refAssyId = pAssyID AND s.subAssyID IS NULL AND s.isdeleted = 0;                    \n" +
                "  \n" +
                "			-- ErrorCode 1: If kit qty and plan kit qty mismatch                        \n" +
                "			IF(vIsReleaseKit = 0) THEN                        \n" +
                "				INSERT INTO tempValidationDetail (errorCode) VALUES (1);                        \n" +
                "			END IF;                        \n" +
                "		END IF;                        \n" +
                "  \n" +
                "		IF(vIsReleaseKit = 0) THEN                         \n" +
                "			SELECT * FROM tempValidationDetail;                        \n" +
                "		ELSE                        \n" +
                "			-- set id for parent warehouse i.e. -1 for Main Material Warehouse and -2 for Main Production Warehouse                        \n" +
                "			-- SET vFromParentWarehouse = -1;                          \n" +
                "			-- SET vToParentWarehouse = -2;                          \n" +
                "			-- get feasibility of sub assembly at the time of release kit             \n" +
                "  \n" +
                "			SELECT 	(  \n" +
                "					CASE  \n" +
                "						WHEN connecterTypeID = -2 THEN  \n" +
                "							ROUND(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)), 8)                          \n" +
                "						ELSE  \n" +
                "							ROUND(MIN(allocatedunit/qpaWithDnp), 8)  \n" +
                "					END  \n" +
                "				)  \n" +
                "			INTO 	vFeasibilityWithAllocatedQty                          \n" +
                "			FROM 	vu_kit_allocation_detail                           \n" +
                "			WHERE 	refSalesorderdetid = pRefSalesOrderDetID                 \n" +
                "					AND assyID = IFNULL(pSubAssyID, pAssyID);                          \n" +
                "			-- get nickname of assembly selected for release kit which is used further to generate kit release number                        \n" +
                "			SELECT nickname INTO vNickname FROM component WHERE id = IFNULL(pSubAssyID, pAssyID);                          \n" +
                "  \n" +
                "			-- generate release kit number based on nickname i.e., <nickname>-<auto increment number which is left padded with 0 upto 5 digit>                        \n" +
                "			-- e.g., CA277-00001                        \n" +
                "			SELECT 		CONCAT(vNickname, '-', LPAD((COUNT(DISTINCT s.id) + 1), 5, \"0\"))  INTO vReleaseKitNumber                         \n" +
                "			FROM 		salesorder_plan_detailsmst s                        \n" +
                "			INNER JOIN 	component c ON s.subassyid = c.id OR s.refAssyId = c.id                        \n" +
                "			WHERE  		c.nickname = vNickname -- subAssyID = pSubAssyID                         \n" +
                "						AND s.kitStatus = 'R'                        \n" +
                "						AND s.isDeleted = 0;                        \n" +
                "  \n" +
                "			-- Release for sub assembly                        \n" +
                "			IF(pSubAssyID IS NOT NULL) THEN                          \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSubAssyPlanDet;                          \n" +
                "  \n" +
                "				-- get qpa for sub assembly to calculate kit qty and PO qty                        \n" +
                "				SELECT  perAssyBuildQty                          \n" +
                "				INTO 	vSubAssyQPA                          \n" +
                "				FROM 	kit_allocation_assy_detail                          \n" +
                "				WHERE 	refSalesorderdetid = pRefSalesOrderDetID                          \n" +
                "						AND partId = pSubAssyID                          \n" +
                "						AND isDeleted = 0;                          \n" +
                "  \n" +
                "				-- For sub-assembly we will make entry for release plan based on main assembly plan                        \n" +
                "				INSERT INTO salesorder_plan_detailsmst                          \n" +
                "				(	salesOrderDetID, 				refAssyId, 			subAssyID, 		poQty, 						poDueDate, 				                          \n" +
                "					materialDockDate,				kitReleaseQty, 						mfrLeadTime, 				kitReleaseDate,                           \n" +
                "					plannKitNumber,                           \n" +
                "					actualKitReleaseDate, 			releasedBy, 		releaseTimeFeasibility, 					kitStatus, 		                          \n" +
                "					woID, 							refPlanId, 			releasedNote,	 releaseKitNumber,			isDeleted, 				                        \n" +
                "					createdAt,   					createdBy, 			updatedAt, 									updatedBy, 		                          \n" +
                "					createByRoleId, 				updateByRoleId                          \n" +
                "				)                          \n" +
                "				SELECT                           \n" +
                "					pRefSalesOrderDetID, 			pAssyID, 			pSubAssyID, 		(vSubAssyQPA * poQty), 	poDueDate, 				                          \n" +
                "					materialDockDate,				(vSubAssyQPA * kitReleaseQty), 			mfrLeadTime, 			kitReleaseDate,                           \n" +
                "					plannKitNumber,                           \n" +
                "					vActualKitReleaseDate, 	pCreatedBy, 		vFeasibilityWithAllocatedQty, 				'R', 		                          \n" +
                "					pWOID, 							pPlanDetID, 		pDescription,	vReleaseKitNumber,			0, 						                        \n" +
                "					fun_DatetimetoUTCDateTime(),   	pCreatedBy, 		fun_DatetimetoUTCDateTime(), 				pCreatedBy, 		                          \n" +
                "					pCreateByRoleId, 				pCreateByRoleId                          \n" +
                "				FROM 	salesorder_plan_detailsmst                          \n" +
                "				WHERE 	id = pPlanDetID;                         \n" +
                "  \n" +
                "                 # Update SalesOrderDet kitReleaseDate    \n" +
                "                IF(pPlanDetID = (SELECT MIN(id) FROM salesorder_plan_detailsmst WHERE salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID AND subAssyID = pSubAssyID AND isDeleted = 0)) THEN    \n" +
                "					UPDATE salesorderdet SET kitReleaseDate = vActualKitReleaseDate WHERE id = pRefSalesOrderDetID AND isDeleted = 0;    \n" +
                "                END IF;    \n" +
                "  \n" +
                "			-- Release for sub assembly                        \n" +
                "			ELSE                          \n" +
                "				-- Update release detail for main assembly plan                        \n" +
                "				UPDATE salesorder_plan_detailsmst                          \n" +
                "				SET actualKitReleaseDate = vActualKitReleaseDate,                          \n" +
                "					releasedBy = pCreatedBy,                          \n" +
                "					releaseTimeFeasibility = vFeasibilityWithAllocatedQty,                          \n" +
                "					kitStatus = 'R',                          \n" +
                "					woID = pWOID,                           \n" +
                "					releasedNote = pDescription,                   \n" +
                "					kitReturnStatus = NULL,                \n" +
                "					kitReturnDate = NULL,                \n" +
                "					kitReturnBy = NULL,                \n" +
                "					initiateReturnBy = NULL,                \n" +
                "					initiateReturnAt = NULL,                     \n" +
                "					updatedBy = pCreatedBy,                                \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime(),                          \n" +
                "					updateByRoleId = pCreateByRoleId,                        \n" +
                "					releaseKitNumber = vReleaseKitNumber                        \n" +
                "				WHERE 	id = pPlanDetID;       \n" +
                "                # Update SalesOrderDet kitReleaseDate    \n" +
                "                IF(pPlanDetID = (SELECT MIN(id) FROM salesorder_plan_detailsmst WHERE salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID AND subAssyID IS NULL AND isDeleted = 0) ) THEN    \n" +
                "					UPDATE salesorderdet SET kitReleaseDate = vActualKitReleaseDate WHERE id = pRefSalesOrderDetID AND isDeleted = 0;    \n" +
                "                END IF;    \n" +
                "            END IF;                          \n" +
                "  \n" +
                "			-- Transfer inventory from Main Material Warehouse to Main Production Warehouse                        \n" +
                "			CALL Sproc_transfer_stock('Department Transfer', NULL, NULL, NULL ,NULL, NULL, pCreatedBy, pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), NULL, pToDeptId, 'M', NULL, NULL, NULL, NULL, NULL, NULL, 'Kit Transfer', 'Release Kit (Kit Allocation)', NULL, TRUE, pDescription, NULL, NULL);                          \n" +
                "		END IF;                    \n" +
                "        END IF;                        \n" +
                "	COMMIT;                                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_retrive_kit_to_transfer` ;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(                             \n" +
                "	pPageIndex INT,                                                  \n" +
                "	pRecordPerPage INT,                         \n" +
                "	pDeptID INT,                                        \n" +
                "	pSearchString VARCHAR(100),                                             \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,	                                            \n" +
                "	pGlobalSearchKitAssyID INT,                                            \n" +
                "	pSearchKitSalesOrderDetID INT,                                      \n" +
                "	pSearchKitAssyID INT,                                 \n" +
                "	pGlobalSearchBinString VARCHAR(1000),                                    \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),          \n" +
                "	pIsCheckMRP TINYINT,          \n" +
                "	pIsCheckMWS TINYINT,                              \n" +
                "	pIsCheckMRE TINYINT,          \n" +
                "	pIsCheckPRE TINYINT,          \n" +
                "	pIsCheckPPR TINYINT,          \n" +
                "	pIsCheckPNR TINYINT          \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE pOffset INT;                                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                                       \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);               \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);             \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);              \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);             \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);            \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);                \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);             \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;                      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                             \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 	            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                \n" +
                "	ELSE	                                                                                \n" +
                "		SET rowNumWhere = '';                                                                                \n" +
                "	END IF;                          \n" +
                "	IF (v_ParentWHType = 'M') THEN            \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"            \n" +
                "					SELECT 		DISTINCT c.id,             \n" +
                "							c.salesOrderDetID,                            \n" +
                "							c.refAssyId,                            \n" +
                "							c.subAssyID,                            \n" +
                "							c.plannKitNumber,                            \n" +
                "							c.poQty,                            \n" +
                "							c.poDueDate,                            \n" +
                "							c.mfrLeadTime,                            \n" +
                "							c.materialDockDate,                            \n" +
                "							c.kitReleaseQty,                            \n" +
                "							c.kitReleaseDate,                            \n" +
                "							c.feasibilityWithAllocatedQty,                 \n" +
                "							c.actualKitReleaseDate,                       \n" +
                "							c.releasedBy,                            \n" +
                "							c.releaseTimeFeasibility,                            \n" +
                "							c.kitStatus,                            \n" +
                "							c.rushJob,                            \n" +
                "							c.mismatchItem,                            \n" +
                "							c.woStatusID,                            \n" +
                "							c.refPlanId,                            \n" +
                "							c.releasedNote,                            \n" +
                "							c.releaseKitNumber,                            \n" +
                "							c.kitReturnStatus,            \n" +
                "							c.woID,            \n" +
                "							c.workorderNumber            \n" +
                "					FROM 		(                            \n" +
                "								SELECT 		id,                            \n" +
                "										salesOrderDetID,                            \n" +
                "										refAssyId,                            \n" +
                "										subAssyID,                            \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate                            \n" +
                "								FROM 		vu_release_plan_detail                             \n" +
                "								WHERE 		kitStatus = 'P'                            \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID                            \n" +
                "							) AS b                             \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id	                            \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID                             \n" +
                "								AND c.refAssyId = b.refAssyId                             \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)                            \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate            \n" +
                "			\");            \n" +
                "	ELSE            \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"            \n" +
                "					SELECT 		DISTINCT c.id,             \n" +
                "							c.salesOrderDetID,                            \n" +
                "							c.refAssyId,                            \n" +
                "							c.subAssyID,                            \n" +
                "							c.plannKitNumber,                            \n" +
                "							c.poQty,                            \n" +
                "							c.poDueDate,                            \n" +
                "							c.mfrLeadTime,                            \n" +
                "							c.materialDockDate,                            \n" +
                "							c.kitReleaseQty,                            \n" +
                "							c.kitReleaseDate,                            \n" +
                "							c.feasibilityWithAllocatedQty,                 \n" +
                "							c.actualKitReleaseDate,                       \n" +
                "							c.releasedBy,                            \n" +
                "							c.releaseTimeFeasibility,                            \n" +
                "							c.kitStatus,                            \n" +
                "							c.rushJob,                            \n" +
                "							c.mismatchItem,                            \n" +
                "							c.woStatusID,                            \n" +
                "							c.refPlanId,                            \n" +
                "							c.releasedNote,                            \n" +
                "							c.releaseKitNumber,                            \n" +
                "							c.kitReturnStatus,            \n" +
                "							c.woID,            \n" +
                "							c.workorderNumber            \n" +
                "					FROM 		(                            \n" +
                "								SELECT 		MAX(id) AS id,                            \n" +
                "										salesOrderDetID,                            \n" +
                "										refAssyId,                            \n" +
                "										subAssyID,                            \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate                            \n" +
                "								FROM 		vu_release_plan_detail                             \n" +
                "								WHERE 		kitStatus = 'R'                            \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID                            \n" +
                "							) AS b                             \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id	                            \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID                             \n" +
                "								AND c.refAssyId = b.refAssyId                             \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)                            \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate            \n" +
                "			\");            \n" +
                "	END IF;            \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN            \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN            \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");            \n" +
                "		ELSE            \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"            \n" +
                "				csd.binId IN (                        \n" +
                "						SELECT 	id                        \n" +
                "						FROM 	binmst                        \n" +
                "						WHERE 	deletedAt IS NULL                        \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'                        \n" +
                "					)            \n" +
                "			\");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN            \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");            \n" +
                "		ELSE            \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"             \n" +
                "				ka.refUIDId IN (                        \n" +
                "					SELECT 	id                         \n" +
                "					FROM 	component_sid_stock                         \n" +
                "					WHERE 	deletedAt IS NULL                         \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'                        \n" +
                "				)            \n" +
                "			\");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"             \n" +
                "			EXISTS (                                \n" +
                "				SELECT 		1                         \n" +
                "				FROM 		kit_allocation ka                                \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId                                      \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id                         \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)                          \n" +
                "							AND ka.status = 'A'                        \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")                        \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")                        \n" +
                "			)            \n" +
                "		\");            \n" +
                "	ELSE            \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");            \n" +
                "	END IF;            \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");            \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN            \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN            \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN            \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"             \n" +
                "					AND	            \n" +
                "						(            \n" +
                "							CASE            \n" +
                "								WHEN kad.partId IS NULL THEN             \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"            \n" +
                "								ELSE             \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"            \n" +
                "							END            \n" +
                "						)            \n" +
                "					 \");            \n" +
                "	ELSE             \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"             \n" +
                "					AND	            \n" +
                "						(            \n" +
                "							CASE            \n" +
                "								WHEN kad.partId IS NULL THEN             \n" +
                "									sd.partID = sd.partID            \n" +
                "								ELSE             \n" +
                "									kad.partId = kad.partId            \n" +
                "							END            \n" +
                "						)            \n" +
                "					 \");            \n" +
                "	END IF;            \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN            \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"             \n" +
                "					AND	(            \n" +
                "							CASE            \n" +
                "								WHEN kad.partId IS NULL THEN             \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"            \n" +
                "								ELSE 	            \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"            \n" +
                "							END            \n" +
                "						)            \n" +
                "					\");            \n" +
                "	ELSE            \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"             \n" +
                "					AND	(            \n" +
                "							CASE            \n" +
                "								WHEN kad.partId IS NULL THEN             \n" +
                "									sd.partID = sd.partID            \n" +
                "								ELSE 	            \n" +
                "									kad.partId = kad.partId            \n" +
                "							END            \n" +
                "						)            \n" +
                "					\");            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN          \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");          \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN          \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN          \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");          \n" +
                "		END IF;          \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN          \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN          \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");          \n" +
                "		END IF;          \n" +
                "	ELSE          \n" +
                "		IF (pIsCheckPRE = 1) THEN          \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN          \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN          \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN          \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";          \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"             \n" +
                "		SELECT	a.*,            \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore            \n" +
                "		FROM	(            \n" +
                "			SELECT 		sd.id refSalesOrderDetID, 	            \n" +
                "					sd.kitNumber, 	            \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,             \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,            \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,            \n" +
                "					sd.partID assyMainId,	            \n" +
                "					c.mfgPN assyMainName,		            \n" +
                "					c.PIDCode assyMainPIDCode,            \n" +
                "					kad.partId assySubId,               \n" +
                "					cs.mfgPN assySubName,		            \n" +
                "					cs.PIDCode assySubPIDCode,             \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,                 \n" +
                "					sd.kitNumber kitName,            \n" +
                "					s.id soId,  			            \n" +
                "					s.poNumber, 					            \n" +
                "					s.salesOrderNumber, 	            \n" +
                "					s.poDate, 					            \n" +
                "					sd.qty, 			            \n" +
                "					sd.kitQty,				            \n" +
                "					kad.totalAssyBuildQty,			            \n" +
                "					\", pDeptID ,\" AS deptID,	            \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,            \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,					            \n" +
                "					IFNULL(b.uidCount, 0) uidCount,				            \n" +
                "					IFNULL(b.binCount, 0) binCount,					            \n" +
                "					ka.kitReleaseStatus,            \n" +
                "					ka.totalLines,			            \n" +
                "					ka.shortageLines,				            \n" +
                "					sd.isHotJob,  			            \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  		            \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,			            \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,            \n" +
                "					ka.kitPercentage,	               \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,		            \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,          \n" +
                "					(                            \n" +
                "						SELECT 	COUNT(1)                             \n" +
                "						FROM 	vu_release_plan_detail                             \n" +
                "						WHERE 	salesOrderDetID = sd.id            \n" +
                "								AND refAssyId = sd.partID             \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)                             \n" +
                "					) totalKitPlan,                            \n" +
                "					(                            \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)                             \n" +
                "						FROM 	vu_release_plan_detail                             \n" +
                "						WHERE 	salesOrderDetID = sd.id                            \n" +
                "								AND refAssyId = sd.partID                             \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN subAssyID IS NULL ELSE subAssyID = sd.partID END)                             \n" +
                "								AND kitStatus = 'R'                            \n" +
                "					) totalKitReleasePlan,                   \n" +
                "					(                            \n" +
                "						SELECT 	CONCAT(IFNULL(reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt                            \n" +
                "						FROM 	holdunholdtrans                             \n" +
                "						WHERE 	refSalesOrderDetID = sd.id                             \n" +
                "								AND refType = 'PO'                             \n" +
                "								AND `status` = 'H'                             \n" +
                "						ORDER BY id DESC                             \n" +
                "						LIMIT 1                            \n" +
                "					) poHalt,                            \n" +
                "					(                            \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt                            \n" +
                "						FROM 	(                            \n" +
                "								SELECT 	haltTooltip                            \n" +
                "								FROM 	(                            \n" +
                "										SELECT 	CONCAT(IFNULL(reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip                             \n" +
                "										FROM 	holdunholdtrans                             \n" +
                "										WHERE 	refSalesOrderDetID = sd.id            \n" +
                "												AND refType = 'KR'                             \n" +
                "												AND `status` = 'H'                             \n" +
                "										ORDER BY id DESC                            \n" +
                "										LIMIT 1                            \n" +
                "								) a                            \n" +
                "								UNION                             \n" +
                "								SELECT 	haltTooltip                             \n" +
                "								FROM 	(                            \n" +
                "										SELECT 	CONCAT(IFNULL(reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip                             \n" +
                "										FROM 	holdunholdtrans                             \n" +
                "										WHERE 	refSalesOrderDetID = sd.id            \n" +
                "												AND refType = 'KA'                            \n" +
                "												AND `status` = 'H'                             \n" +
                "										ORDER BY id DESC                            \n" +
                "										LIMIT 1                            \n" +
                "								) b                            \n" +
                "						) c                            \n" +
                "					) kitHalt,            \n" +
                "					p.woID,						            \n" +
                "					p.workorderNumber,            \n" +
                "					p.id AS id,			            \n" +
                "					p.salesOrderDetID,				            \n" +
                "					p.refAssyId,			            \n" +
                "					p.subAssyID,				            \n" +
                "					p.plannKitNumber,            \n" +
                "					p.poQty,				            \n" +
                "					p.poDueDate,					            \n" +
                "					p.mfrLeadTime,			            \n" +
                "					p.materialDockDate,			            \n" +
                "					p.kitReleaseQty,            \n" +
                "					p.kitReleaseDate,            \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,            \n" +
                "					p.feasibilityWithAllocatedQty,	            \n" +
                "					p.actualKitReleaseDate,	            \n" +
                "					p.releasedBy,				            \n" +
                "					p.releaseTimeFeasibility,            \n" +
                "					p.kitStatus,			            \n" +
                "					p.rushJob,						            \n" +
                "					p.mismatchItem,			            \n" +
                "					p.woStatusID,			            \n" +
                "					p.refPlanId,					            \n" +
                "					p.releasedNote,			            \n" +
                "					p.releaseKitNumber,			            \n" +
                "					p.kitReturnStatus,            \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,            \n" +
                "					fun_getKitReleaseIndication(p.kitReleaseDate, IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0)) kitReleaseIndicator,	            \n" +
                "					ka.allocationUMIDCount allocationUMIDCount            \n" +
                "			FROM 		salesorderdet sd                           \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                         \n" +
                "			INNER JOIN	component c ON sd.partID = c.id                    \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id                \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id              \n" +
                "			LEFT JOIN	(            \n" +
                "						SELECT 	a.refSalesOrderDetID, 	                            \n" +
                "							a.assyID, 	                            \n" +
                "							a.binID, 	                            \n" +
                "							COUNT(1) binCount, 	                            \n" +
                "							SUM(a.uidCount) uidCount,                            \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin                            \n" +
                "						FROM 	(                                \n" +
                "								SELECT 		k.refSalesOrderDetID,                             \n" +
                "										k.assyID,                             \n" +
                "										csd.binID,                             \n" +
                "										COUNT(1) uidCount,                            \n" +
                "										(                            \n" +
                "											SELECT IF( EXISTS(                            \n" +
                "												SELECT 	binId                             \n" +
                "												FROM 	component_sid_stock                             \n" +
                "												WHERE 	binID = csd.binID                             \n" +
                "													AND deletedAt IS NULL                            \n" +
                "													AND id NOT IN (                            \n" +
                "														SELECT 	refUIDId                            \n" +
                "														FROM 	kit_allocation                            \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID                            \n" +
                "																AND assyID = k.assyID                            \n" +
                "																AND `status` = 'A'                            \n" +
                "													)                            \n" +
                "											), 1, 0)                            \n" +
                "										) mismatchUMIDBin                                  \n" +
                "									FROM 		kit_allocation k                                 \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId                                            \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID                                            \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID                                   \n" +
                "									WHERE		k.status = 'A'                                \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)                                \n" +
                "												AND	csd.isDeleted = 0                                            \n" +
                "												AND	b.isDeleted = 0                                            \n" +
                "												AND	w.isDeleted = 0                                  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID                                \n" +
                "							) AS a                                \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID            \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)             \n" +
                "			LEFT JOIN 	(            \n" +
                "						SELECT 	k.refSalesOrderDetID, 	            \n" +
                "							k.assyID, 	            \n" +
                "							k.totalLines,            \n" +
                "							k.shortageLines,			            \n" +
                "							k.kitAllocationPercentage kitPercentage,            \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,            \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount            \n" +
                "						FROM 	(            \n" +
                "								SELECT 	k.refSalesOrderDetID, 	            \n" +
                "									k.assyID,            \n" +
                "									COUNT(1) AS totalLines,	            \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,            \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage            \n" +
                "								FROM 	(            \n" +
                "										SELECT 	refSalesOrderDetID, 	            \n" +
                "											assyID,		            \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,            \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage            \n" +
                "										FROM 	vu_kit_allocation_detail            \n" +
                "									) k            \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID            \n" +
                "							) k            \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)             \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id             \n" +
                "							AND p.refAssyId = sd.partID             \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)            \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3             \n" +
                "						AND 	s.isDeleted = 0              \n" +
                "						AND 	sd.isCancle != 1            \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")             \n" +
                "						AND 	(\", v_WhereClause ,\")            \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId            \n" +
                "		) AS a            \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")          \n" +
                "	\");            \n" +
                "	IF (v_ParentWHType = 'M') THEN            \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"             \n" +
                "			ORDER BY isHotJob DESC,             \n" +
                "				 shortageIndicatore DESC,            \n" +
                "				 kitReleaseDate ASC            \n" +
                "			\");                \n" +
                "	ELSE            \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"             \n" +
                "			ORDER BY isHotJob DESC,             \n" +
                "				 shortageIndicatore DESC,            \n" +
                "				 actualKitReleaseDate ASC            \n" +
                "			\");                \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");                 \n" +
                "	PREPARE query2 FROM @SQLStatementCount;                                          \n" +
                "	EXECUTE query2;                                          \n" +
                "	DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;                   \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);                   \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                      \n" +
                "	EXECUTE mainQuery;                                                                                      \n" +
                "	DEALLOCATE PREPARE mainQuery;              \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (708,'1.00','V1','Kit allocation changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 708:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2021  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBOMLineCleanStatusErrorCategoryWise` ;  \n" +
                "CREATE FUNCTION `fun_getBOMLineCleanStatusErrorCategoryWise`(                            \n" +
                "	pLineItemAlternatePartId INT,         \n" +
                "	pLineItemId INT,         \n" +
                "	pRefUMID INT,        \n" +
                "	pAssyId INT,        \n" +
                "	pErrorCategoryId INT              \n" +
                ") RETURNS TINYINT  \n" +
                "BEGIN                     \n" +
                "	DECLARE v_LineCleanStatus TINYINT;           \n" +
                "	DECLARE v_CategoryIds VARCHAR(10000);           \n" +
                "	DECLARE v_LineItemAlternatePartId VARCHAR(10000);          \n" +
                "	DECLARE v_CPNLineItemAlternatePartId VARCHAR(10000);   \n" +
                "	DECLARE v_MfrPnId INT;           \n" +
                "	DECLARE v_MfrPkgAliesIds VARCHAR(1000);        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise;                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise AS           \n" +
                "	SELECT 		err.id, err.logicID, err.errorCode           \n" +
                "	FROM 		rfq_error_code_category_mapping map          \n" +
                "	INNER JOIN 	rfq_lineitems_errorcode err ON err.id = map.errorCodeId AND err.isDeleted = 0          \n" +
                "	WHERE 		map.isDeleted = 0 AND map.categoryID = pErrorCategoryId;          \n" +
                "  \n" +
                "	IF (pErrorCategoryId = 2) THEN      \n" +
                "		IF ((SELECT COUNT(1) FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise WHERE logicID = 12 AND errorCode = 'CA') = 0) THEN      \n" +
                "			INSERT INTO temp_fun_getBOMLineCleanStatusErrorCategoryWise (id, logicID, errorCode)      \n" +
                "			SELECT 		err.id, err.logicID, err.errorCode           \n" +
                "			FROM 		rfq_lineitems_errorcode err        \n" +
                "			WHERE 		err.isDeleted = 0       \n" +
                "						AND err.logicID = 12       \n" +
                "						AND err.errorCode = 'CA';      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(logicID) INTO v_CategoryIds FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise;        \n" +
                "  \n" +
                "	IF (pLineItemAlternatePartId IS NULL AND (pLineItemId IS NOT NULL AND pRefUMID IS NOT NULL AND pAssyId IS NOT NULL)) THEN        \n" +
                "		SELECT 	refcompid INTO v_MfrPnId        \n" +
                "		FROM 	component_sid_stock        \n" +
                "		WHERE 	id = pRefUMID AND isDeleted = 0;        \n" +
                "  \n" +
                "		SELECT 		GROUP_CONCAT(IFNULL(cp.id, c.id)) INTO v_MfrPkgAliesIds          \n" +
                "		FROM 		component c           \n" +
                "		LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0          \n" +
                "		WHERE 		c.id = v_MfrPnId       \n" +
                "					AND c.isDeleted = 0;      \n" +
                "  \n" +
                "		SELECT 	GROUP_CONCAT(id) INTO v_LineItemAlternatePartId    \n" +
                "		FROM 	(  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	rfq_lineitems_alternatepart        \n" +
                "				WHERE 	isDeleted = 0        \n" +
                "						AND rfqLineItemsID = pLineItemId        \n" +
                "						AND partID = pAssyId        \n" +
                "						AND FIND_IN_SET(mfgPNID, IFNULL(v_MfrPkgAliesIds, v_MfrPnId))  \n" +
                "				UNION  \n" +
                "				SELECT 	id  \n" +
                "				FROM  	rfq_lineitems_alternatepart a  \n" +
                "				WHERE 	a.isDeleted = 0  \n" +
                "						AND a.partID = pAssyId  \n" +
                "						AND EXISTS (  \n" +
                "							SELECT 	1  \n" +
                "							FROM 	rfq_lineitems b  \n" +
                "							WHERE 	b.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(custPNID, IFNULL(v_MfrPkgAliesIds, v_MfrPnId))  \n" +
                "									AND b.id = a.rfqLineItemsID  \n" +
                "						)  \n" +
                "		) a;        \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SELECT 		MAX(a.ProgressCount) INTO v_LineCleanStatus FROM (                    \n" +
                "				SELECT  	l.id AS lineID, p.id,                                                                       \n" +
                "						CASE            \n" +
                "							WHEN              \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('1', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('2', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mfgCodeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('3', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mfgVerificationStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('4', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.distVerificationStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('5', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mfgDistMappingStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								/*CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('6', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mismatchMountingTypeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND*/          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('7', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mfgGoodPartMappingStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('8', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.obsoletePartStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('9', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mfgPNStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('10', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.distCodeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('11', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.distPNStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('12', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.customerApproval, 'A') != 'P'          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('13', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.distGoodPartMappingStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								/*CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('14', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.distCodeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND*/          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('15', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.nonRohsStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('16', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.epoxyStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('17', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('18', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.qpaDesignatorStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('20', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('21', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.duplicateMPNInSameLineStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('22', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.matingPartRquiredStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('23', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.driverToolsRequiredStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('24', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.pickupPadRequiredStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('25', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.restrictUseWithPermissionStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('26', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.restrictUsePermanentlyStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('27', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mismatchMountingTypeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('28', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mismatchFunctionalCategoryStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								/*CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('32', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND*/          \n" +
                "								/*CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('33', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND*/          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('34', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.duplicateCPNStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('35', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.functionalTestingRequiredStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('36', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.requireMountingTypeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('37', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.requireMountingTypeStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('39', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.uomMismatchedStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('40', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.programingRequiredStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('50', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.restrictUseInBOMStep, 0) = 0          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('51', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('52', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.customerApprovalForBuyStep,1) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('53', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.customerApprovalForPopulateStep,1) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('54', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.mismatchNumberOfRowsStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('55', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('56', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.tbdPartStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('57', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('58', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('59', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('60', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.exportControlledStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('61', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.restrictUseInBOMWithPermissionStep, 0) = 0          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('62', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(p.unknownPartStep,0) = 1          \n" +
                "									ELSE 1           \n" +
                "								END          \n" +
                "								/*AND          \n" +
                "								CASE           \n" +
                "									WHEN (SELECT FIND_IN_SET('63', v_CategoryIds)) > 0           \n" +
                "										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0          \n" +
                "									ELSE 1           \n" +
                "								END*/          \n" +
                "							THEN 1                                                                      \n" +
                "							ELSE 0                                                                      \n" +
                "						END AS ProgressCount                                                                      \n" +
                "				FROM 		rfq_lineitems_alternatepart p                                                                       \n" +
                "				LEFT OUTER JOIN rfq_lineitems l ON p.rfqLineItemsID = l.id                                                                      \n" +
                "				WHERE 		l.isDeleted = 0 AND p.isDeleted = 0               \n" +
                "								AND p.mfgCodeID IS NOT NULL                \n" +
                "								AND p.mfgPNID IS NOT NULL                                  \n" +
                "								AND l.lineID IS NOT NULL               \n" +
                "								AND FIND_IN_SET(p.id, IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId))       \n" +
                "								-- AND p.id = IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId)          \n" +
                "			) AS a          \n" +
                "	GROUP BY 	a.lineID;          \n" +
                "  \n" +
                "	RETURN v_LineCleanStatus;                             \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getKitAllocationPercentageForReleasedPlan` ;  \n" +
                "CREATE FUNCTION `fun_getKitAllocationPercentageForReleasedPlan`(                                \n" +
                "	pRefSalesOrderdetId INT,                    \n" +
                "	pAssyId INT,    \n" +
                "	pSubAssyId INT    \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                      \n" +
                "	DECLARE vKitAllocationPercentage DECIMAL(18,8);      \n" +
                "	DECLARE vTotalReleasePlanQty INT;    \n" +
                "  \n" +
                "	SELECT 	SUM(IFNULL(kitReleaseQty, 0))    \n" +
                "	INTO 	vTotalReleasePlanQty     \n" +
                "	FROM 	vu_release_plan_detail    \n" +
                "	WHERE 	salesOrderDetID = pRefSalesOrderdetId     \n" +
                "			AND refAssyId = pAssyId     \n" +
                "			AND (    \n" +
                "				CASE     \n" +
                "					WHEN pSubAssyId IS NULL OR pSubAssyId = pAssyId THEN    \n" +
                "						subAssyID IS NULL    \n" +
                "					ELSE    \n" +
                "						subAssyID = pSubAssyId    \n" +
                "				END    \n" +
                "				)    \n" +
                "			AND kitStatus = 'R';    \n" +
                "  \n" +
                "	SELECT 	ROUND(IFNULL(AVG((CASE WHEN (allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(allocationPer,0),2) END)),0),2) AS kitAllocationPercentage      \n" +
                "	INTO 	vKitAllocationPercentage      \n" +
                "	FROM 	(      \n" +
                "			SELECT 	refSalesorderdetid,      \n" +
                "				assyID,    \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN connecterTypeID = -2 THEN  \n" +
                "							((100 * IFNULL(allocatedpin, 0)) / (vTotalReleasePlanQty * IFNULL(qpaWithDnp, 0) * bomNumOfPosition))  \n" +
                "						ELSE  \n" +
                "							((100 * IFNULL(allocatedunit, 0)) / (vTotalReleasePlanQty * IFNULL(qpaWithDnp, 0)))  \n" +
                "					END  \n" +
                "				) AS allocationPer      \n" +
                "			FROM 	vu_kit_allocation_detail      \n" +
                "			WHERE	refSalesorderdetid = pRefSalesOrderdetId      \n" +
                "					AND assyID = pAssyId      \n" +
                "		) a;      \n" +
                "	RETURN ROUND(vKitAllocationPercentage, 2);                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getKitBuildFeasibility` ;  \n" +
                "CREATE FUNCTION `fun_getKitBuildFeasibility`(                              \n" +
                "	pRefSalesOrderdetId INT,                  \n" +
                "	pAssyId INT    \n" +
                ") RETURNS INT  \n" +
                "BEGIN                    \n" +
                "	DECLARE v_BuildFeasibility INT;     \n" +
                "  \n" +
                "	SELECT 	MIN(minBuild) AS kitFeasibility    \n" +
                "	INTO 	v_BuildFeasibility    \n" +
                "	FROM 	(    \n" +
                "			SELECT 	refSalesorderdetid,    \n" +
                "				assyID,    \n" +
                "				qpaWithDnp,    \n" +
                "				allocatedunit,   \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN connecterTypeID = -2 THEN  \n" +
                "							(IFNULL(allocatedpin, 0) / (IFNULL(qpaWithDnp, 0) * bomNumOfPosition))  \n" +
                "						ELSE  \n" +
                "							(IFNULL(allocatedunit, 0) / IFNULL(qpaWithDnp, 0))  \n" +
                "  \n" +
                "					END  \n" +
                "				) AS minBuild    \n" +
                "			FROM 	vu_kit_allocation_detail    \n" +
                "			WHERE	refSalesorderdetid = pRefSalesOrderdetId    \n" +
                "					AND assyID = pAssyId    \n" +
                "		) a;    \n" +
                "  \n" +
                "	RETURN v_BuildFeasibility;               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalKitFeasibility` ;  \n" +
                "CREATE FUNCTION `fun_getTotalKitFeasibility`(          \n" +
                "	pRefSalesOrderDetID INT,       \n" +
                "	pAssyID INT          \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN          \n" +
                "	DECLARE v_KitFeasibility DECIMAL(18,8);    \n" +
                "  \n" +
                "	SELECT 	(  \n" +
                "			CASE  \n" +
                "				WHEN connecterTypeID = -2 THEN  \n" +
                "					IFNULL(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)),0)  \n" +
                "				ELSE  \n" +
                "					IFNULL(MIN(allocatedunit/qpaWithDnp),0)  \n" +
                "			END  \n" +
                "		)  \n" +
                "	INTO 	v_KitFeasibility    \n" +
                "	FROM 	vu_kit_allocation_detail     \n" +
                "	WHERE 	refSalesorderdetid = pRefSalesOrderDetID    \n" +
                "			AND assyID = pAssyID;    \n" +
                "  \n" +
                "	RETURN v_KitFeasibility;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (709,'1.00','V1','Kit allocation changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 709:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2021  *********************************** */
                "DROP VIEW IF EXISTS `vu_kit_allocation_detail` ;  \n" +
                "CREATE VIEW `vu_kit_allocation_detail` AS   \n" +
                "SELECT `k`.`refSalesorderdetid` AS `refSalesorderdetid`,`k`.`assyID` AS `assyID`,`k`.`lineID` AS `lineID`,`k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,`k`.`kitQty` AS `kitQty`,`k`.`mrpQty` AS `mrpQty`,`k`.`refRfqLineitem` AS `refRfqLineitem`,`k`.`qpa` AS `qpa`,`k`.`dnpQty` AS `dnpQty`,`k`.`qpaWithDnp` AS `qpaWithDnp`,`k`.`isPurchase` AS `isPurchase`,`k`.`isInstall` AS `isInstall`,`k`.`isBuyDNPQty` AS `isBuyDNPQty`,`k`.`numOfPosition` AS `numOfPosition`,`k`.`reqQty` AS `reqQty`,`k`.`reqUnits` AS `reqUnits`,`k`.`reqPins` AS `reqPins`,`k`.`uomid` AS `uomid`,`k`.`connecterTypeID` AS `connecterTypeID`,(CASE WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedQty` ELSE 0 END) AS `allocatedQty`,(CASE WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedunit` ELSE 0 END) AS `allocatedunit`,(CASE WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedpin` ELSE 0 END) AS `allocatedpin`,(CASE WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN (CASE WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`) ELSE 0 END) ELSE 0 END) AS `shortage`,(CASE WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN (CASE WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`) ELSE 0 END) ELSE 0 END) AS `shortagePins`,(CASE WHEN ((CASE WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN (CASE WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`) ELSE 0 END) ELSE 0 END) > 0) THEN 1 ELSE 0 END) AS `shortageLine`,(CASE WHEN ((CASE WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN (CASE WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`) ELSE 0 END) ELSE 0 END) > 0) THEN 1 ELSE 0 END) AS `shortagelinePins`,(CASE WHEN (`k`.`connecterTypeID` = -(2)) THEN ((`k`.`allocatedpin` / (CASE WHEN (IFNULL(`k`.`reqPins`,0) = 0) THEN 1 ELSE `k`.`reqPins` END)) * 100) ELSE ((`k`.`allocatedunit` / (CASE WHEN (IFNULL(`k`.`reqUnits`,0) = 0) THEN 1 ELSE `k`.`reqUnits` END)) * 100) END) AS `AllocationPercPerLine`,`k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,`k`.`bomNumOfPosition` AS `bomNumOfPosition` FROM (SELECT `k`.`refSalesorderdetid` AS `refSalesorderdetid`,`k`.`assyID` AS `assyID`,`k`.`lineID` AS `lineID`,`k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,`k`.`kitQty` AS `kitQty`,`k`.`mrpQty` AS `mrpQty`,`k`.`refRfqLineitem` AS `refRfqLineitem`,`k`.`qpa` AS `qpa`,`k`.`dnpQty` AS `dnpQty`,`k`.`qpaWithDnp` AS `qpaWithDnp`,`k`.`numOfPosition` AS `numOfPosition`,IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`,0)),0) AS `reqQty`,IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`,0)),0) AS `reqUnits`,IFNULL(((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`,0)) * IFNULL(`k`.`bomNumOfPosition`,0)),0) AS `reqPins`,`k`.`uomid` AS `uomid`,`k`.`connecterTypeID` AS `connecterTypeID`,`k`.`allocatedQty` AS `allocatedQty`,`k`.`allocatedunit` AS `allocatedunit`,`k`.`allocatedpin` AS `allocatedpin`,`k`.`isPurchase` AS `isPurchase`,`k`.`isInstall` AS `isInstall`,`k`.`isBuyDNPQty` AS `isBuyDNPQty`,`k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,`k`.`bomNumOfPosition` AS `bomNumOfPosition` FROM (SELECT `a`.`refSalesOrderDetID` AS `refSalesorderdetid`,`a`.`partId` AS `assyID`,`b`.`lineID` AS `lineID`,`a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,`a`.`kitQty` AS `kitQty`,`a`.`mrpQty` AS `mrpQty`,`b`.`refRfqLineitem` AS `refRfqLineitem`,`b`.`qpa` AS `qpa`,`b`.`dnpQty` AS `dnpQty`,(CASE WHEN ((`b`.`isPurchase` = 1) OR (`b`.`isInstall` = 1)) THEN (IFNULL(`b`.`qpa`,0) + IF(((`b`.`isBuyDNPQty` = 'Y') OR (`b`.`isBuyDNPQty` = 'C')),IFNULL(`b`.`dnpQty`,0),0)) ELSE IF(((`b`.`isBuyDNPQty` = 'Y') OR (`b`.`isBuyDNPQty` = 'C')),IFNULL(`b`.`dnpQty`,0),0) END) AS `qpaWithDnp`,`b`.`numOfPosition` AS `numOfPosition`,`b`.`uomID` AS `uomid`,`c`.`connecterTypeID` AS `connecterTypeID`,IFNULL(`c`.`allocatedQty`,0) AS `allocatedQty`,IFNULL(`c`.`allocatedunit`,0) AS `allocatedunit`,IFNULL(`c`.`allocatedpin`,0) AS `allocatedpin`,`b`.`isPurchase` AS `isPurchase`,`b`.`isInstall` AS `isInstall`,`b`.`isBuyDNPQty` AS `isBuyDNPQty`,`b`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,`b`.`numOfPosition` AS `bomNumOfPosition` FROM ((`kit_allocation_assy_detail` `a` JOIN `kit_allocation_lineitems` `b` ON(((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`) AND (`a`.`partId` = `b`.`partID`) AND (`b`.`isDeleted` = 0)))) LEFT JOIN (SELECT `ka`.`refSalesOrderDetID` AS `refSalesOrderDetID`,`ka`.`assyID` AS `assyid`,`ka`.`refBOMLineID` AS `refBOMLineID`,SUM((CASE WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeQty` WHEN (`ka`.`STATUS` = 'D') THEN 0 ELSE `ka`.`allocatedQty` END)) AS `allocatedQty`,SUM((CASE WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeUnit` WHEN (`ka`.`STATUS` = 'D') THEN 0 ELSE `ka`.`allocatedUnit` END)) AS `allocatedunit`,SUM((CASE WHEN (`ka`.`STATUS` = 'R') THEN (`ka`.`consumeUnit` * IFNULL(`c`.`noOfPosition`,0)) WHEN (`ka`.`STATUS` = 'D') THEN 0 ELSE (`ka`.`allocatedUnit` * IFNULL(`c`.`noOfPosition`,0)) END)) AS `allocatedpin`,`c`.`connecterTypeID` AS `connecterTypeID` FROM (`kit_allocation` `ka` JOIN `component` `c` ON((`c`.`id` = `ka`.`partId`))) WHERE (`c`.`isDeleted` = 0) GROUP BY `ka`.`refSalesOrderDetID`,`ka`.`assyID`,`ka`.`refBOMLineID`) `c` ON(((`a`.`refSalesOrderDetID` = `c`.`refSalesOrderDetID`) AND (`a`.`partId` = `c`.`assyid`) AND (`b`.`refRfqLineitem` = `c`.`refBOMLineID`)))) WHERE ((`a`.`isDeleted` = 0) AND EXISTS(SELECT 'Y' FROM `kit_allocation_lineitems_alternatepart` `d` WHERE (EXISTS(SELECT 'Y' FROM `component` `e` WHERE ((`e`.`id` = `d`.`mfgPNID`) AND (`e`.`category` <> 3))) AND (`b`.`refSalesOrderDetID` = `d`.`refSalesOrderDetID`) AND (`b`.`refRfqLineitem` = `d`.`refRfqLineitem`) AND (`b`.`partID` = `d`.`partID`))))) `k`) `k`;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_perjob_shortage` ;  \n" +
                "CREATE VIEW `vu_perjob_shortage` AS   \n" +
                "SELECT  \n" +
                "  `k`.`refSalesOrderDetID`      AS `refSalesOrderDetID`,  \n" +
                "  `k`.`soNumber`                AS `soNumber`,  \n" +
                "  `k`.`poNumber`                AS `poNumber`,  \n" +
                "  `k`.`assyID`                  AS `assyID`,  \n" +
                "  `k`.`assyNickname`            AS `assyNickname`,  \n" +
                "  `k`.`assyPIDCode`             AS `assyPIDCode`,  \n" +
                "  (`k`.`kitAllocationTotalLine` - `k`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
                "  `k`.`shortageLine`            AS `shortageLine`,  \n" +
                "  `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`,  \n" +
                "  `FUN_GETKITRELEASESTATUS`(  \n" +
                "`k`.`refSalesOrderDetID`,NULL,`k`.`assyID`,`k`.`kitAllocationPercentage`,FALSE)  AS `kitReleaseStatus`  \n" +
                "FROM (SELECT  \n" +
                "        `k`.`refSalesOrderDetID`       AS `refSalesOrderDetID`,  \n" +
                "        `s`.`salesOrderNumber`         AS `soNumber`,  \n" +
                "        `s`.`poNumber`                 AS `poNumber`,  \n" +
                "        `k`.`assyID`                   AS `assyID`,  \n" +
                "        `c`.`nickName`                 AS `assyNickname`,  \n" +
                "        `c`.`PIDCode`                  AS `assyPIDCode`,  \n" +
                "        COUNT(1)                       AS `kitAllocationTotalLine`,  \n" +
                "        SUM((CASE WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1 ELSE 0 END)) AS `notRequireKitAllocationTotalLine`,  \n" +
                "        SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine`,  \n" +
                "        ROUND(IFNULL(AVG((CASE WHEN (`k`.`allocationPer` > 100) THEN 100 ELSE ROUND(IFNULL(`k`.`allocationPer`,0),2) END)),0),2) AS `kitAllocationPercentage`  \n" +
                "      FROM ((((SELECT  \n" +
                "                 `vu_kit_allocation_detail`.`refSalesorderdetid`         AS `refSalesOrderDetID`,  \n" +
                "                 `vu_kit_allocation_detail`.`assyID`                     AS `assyID`,  \n" +
                "                 (CASE WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`,0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`,0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`)) ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`,0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`,0))) END) AS `allocationPer`,  \n" +
                "                 (CASE WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins` ELSE `vu_kit_allocation_detail`.`shortage` END) AS `shortage`,  \n" +
                "                 `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "               FROM `vu_kit_allocation_detail`) `k`  \n" +
                "           JOIN `salesorderdet` `sd`  \n" +
                "             ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
                "                  AND (`sd`.`partCategory` = 3))))  \n" +
                "          JOIN `salesordermst` `s`  \n" +
                "            ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "         JOIN `component` `c`  \n" +
                "           ON ((`k`.`assyID` = `c`.`id`)))  \n" +
                "      GROUP BY `k`.`refSalesOrderDetID`) `k`  \n" +
                "ORDER BY `k`.`soNumber`,`k`.`poNumber`,`k`.`assyPIDCode`;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_perjob_shortage_with_sub_assembly` ;  \n" +
                "CREATE VIEW `vu_perjob_shortage_with_sub_assembly` AS   \n" +
                "SELECT  \n" +
                "  `y`.`refSalesOrderDetID`      AS `refSalesOrderDetID`,  \n" +
                "  `y`.`soNumber`                AS `soNumber`,  \n" +
                "  `y`.`poNumber`                AS `poNumber`,  \n" +
                "  `y`.`assyID`                  AS `subAssyID`,  \n" +
                "  `y`.`assyNickname`            AS `subAssyNickname`,  \n" +
                "  `y`.`assyPIDCode`             AS `subAssyPIDCode`,  \n" +
                "  `y`.`mainAssyID`              AS `assyID`,  \n" +
                "  (`y`.`kitAllocationTotalLine` - `y`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
                "  `y`.`shortageLine`            AS `shortageLine`,  \n" +
                "  `y`.`kitAllocationPercentage` AS `kitAllocationPercentage`,  \n" +
                "  `FUN_GETASSYNICKNAMEBYID`(  \n" +
                "`y`.`mainAssyID`)  AS `assyNickname`,  \n" +
                "  `FUN_GETASSYPIDCODEBYID`(  \n" +
                "`y`.`mainAssyID`)  AS `assyPIDCode`,  \n" +
                "  `FUN_GETKITRELEASESTATUS`(  \n" +
                "`y`.`refSalesOrderDetID`,`y`.`assyID`,`y`.`mainAssyID`,`y`.`kitAllocationPercentage`,FALSE)  AS `kitReleaseStatus`  \n" +
                "FROM (SELECT  \n" +
                "        `k`.`refSalesOrderDetID`               AS `refSalesOrderDetID`,  \n" +
                "        `k`.`soNumber`                         AS `soNumber`,  \n" +
                "        `k`.`poNumber`                         AS `poNumber`,  \n" +
                "        `k`.`assyID`                           AS `assyID`,  \n" +
                "        `k`.`assyNickname`                     AS `assyNickname`,  \n" +
                "        `k`.`assyPIDCode`                      AS `assyPIDCode`,  \n" +
                "        (SELECT  \n" +
                "           `kit_allocation_assy_detail`.`partId`  \n" +
                "         FROM `kit_allocation_assy_detail`  \n" +
                "         WHERE ((`kit_allocation_assy_detail`.`refSalesOrderDetID` = `k`.`refSalesOrderDetID`)  \n" +
                "                AND (`kit_allocation_assy_detail`.`bomAssyLevel` = 0)  \n" +
                "                AND (`kit_allocation_assy_detail`.`deletedAt` IS NULL))  \n" +
                "         LIMIT 1) AS `mainAssyID`,  \n" +
                "        `k`.`kitAllocationTotalLine`           AS `kitAllocationTotalLine`,  \n" +
                "        `k`.`notRequireKitAllocationTotalLine` AS `notRequireKitAllocationTotalLine`,  \n" +
                "        `k`.`shortageLine`                     AS `shortageLine`,  \n" +
                "        `k`.`kitAllocationPercentage`          AS `kitAllocationPercentage`  \n" +
                "      FROM (SELECT  \n" +
                "              `k`.`refSalesOrderDetID`                AS `refSalesOrderDetID`,  \n" +
                "              `s`.`salesOrderNumber`                  AS `soNumber`,  \n" +
                "              `s`.`poNumber`                          AS `poNumber`,  \n" +
                "              `k`.`assyID`                            AS `assyID`,  \n" +
                "              `c`.`nickName`                          AS `assyNickname`,  \n" +
                "              `c`.`PIDCode`                           AS `assyPIDCode`,  \n" +
                "              COUNT(1)                                AS `kitAllocationTotalLine`,  \n" +
                "              SUM((CASE WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1 ELSE 0 END)) AS `notRequireKitAllocationTotalLine`,  \n" +
                "              SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine`,  \n" +
                "              ROUND(IFNULL(AVG((CASE WHEN (`k`.`allocationPer` > 100) THEN 100 ELSE ROUND(IFNULL(`k`.`allocationPer`,0),2) END)),0),2) AS `kitAllocationPercentage`  \n" +
                "            FROM ((((SELECT  \n" +
                "                       `vu_kit_allocation_detail`.`refSalesorderdetid`         AS `refSalesOrderDetID`,  \n" +
                "                       `vu_kit_allocation_detail`.`assyID`                     AS `assyID`,  \n" +
                "                       (CASE WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`,0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`,0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`)) ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`,0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`,0))) END) AS `allocationPer`,  \n" +
                "                       (CASE WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins` ELSE `vu_kit_allocation_detail`.`shortage` END) AS `shortage`,  \n" +
                "                       `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "                     FROM `vu_kit_allocation_detail`) `k`  \n" +
                "                 JOIN `salesorderdet` `sd`  \n" +
                "                   ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
                "                        AND (`sd`.`partCategory` = 3))))  \n" +
                "                JOIN `salesordermst` `s`  \n" +
                "                  ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "               JOIN `component` `c`  \n" +
                "                 ON ((`k`.`assyID` = `c`.`id`)))  \n" +
                "            GROUP BY `k`.`refSalesOrderDetID`,`k`.`assyID`,`s`.`salesOrderNumber`,`s`.`poNumber`,`c`.`nickName`,`c`.`PIDCode`) `k`  \n" +
                "      ORDER BY `k`.`soNumber`,`k`.`poNumber`,`k`.`assyPIDCode`) `y`;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_detail` ;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS   \n" +
                "SELECT  \n" +
                "  `a`.`id`                     AS `id`,  \n" +
                "  `a`.`salesOrderDetID`        AS `salesOrderDetID`,  \n" +
                "  `a`.`refAssyId`              AS `refAssyId`,  \n" +
                "  `a`.`subAssyID`              AS `subAssyID`,  \n" +
                "  `a`.`plannKitNumber`         AS `plannKitNumber`,  \n" +
                "  `a`.`poQty`                  AS `poQty`,  \n" +
                "  `a`.`poDueDate`              AS `poDueDate`,  \n" +
                "  `a`.`mfrLeadTime`            AS `mfrLeadTime`,  \n" +
                "  `a`.`materialDockDate`       AS `materialDockDate`,  \n" +
                "  `a`.`kitReleaseQty`          AS `kitReleaseQty`,  \n" +
                "  `a`.`kitReleaseDate`         AS `kitReleaseDate`,  \n" +
                "  (SELECT  \n" +
                "     (CASE WHEN (`k`.`connecterTypeID` = -(2)) THEN IFNULL(MIN((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`))),0) ELSE IFNULL(MIN((`k`.`allocatedunit` / `k`.`qpaWithDnp`)),0) END)  \n" +
                "   FROM `vu_kit_allocation_detail` `k`  \n" +
                "   WHERE ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "          AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`,`a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "  `FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(  \n" +
                "`a`.`actualKitReleaseDate`)  AS `actualKitReleaseDate`,  \n" +
                "  `a`.`releasedBy`             AS `releasedBy`,  \n" +
                "  `FUN_GETUSERNAMEBYID`(  \n" +
                "`a`.`releasedBy`)  AS `releasedByName`,  \n" +
                "  `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "  `a`.`kitStatus`              AS `kitStatus`,  \n" +
                "  (CASE WHEN ((`a`.`kitStatus` = 'P') AND (`a`.`kitReleaseDate` <= STR_TO_DATE(`FUN_CONVERTUTCDATETODATAKEYTIMEZONE`(`FUN_DATETIMETOUTCDATETIME`()),'%m/%d/%Y'))) THEN TRUE ELSE FALSE END) AS `rushJob`,  \n" +
                "  `FUNC_MISMATCHITEMFORKIT`(  \n" +
                "`a`.`salesOrderDetID`,IFNULL(`a`.`subAssyID`,`a`.`refAssyId`),'M',NULL,NULL)  AS `mismatchItem`,  \n" +
                "  `a`.`woID`                   AS `woID`,  \n" +
                "  `FUN_GETWORKORDERNUMBERBYID`(  \n" +
                "`a`.`woID`)  AS `workorderNumber`,  \n" +
                "  `FUN_GETWORKORDERSTATUSIDBYWOID`(  \n" +
                "`a`.`woID`)  AS `woStatusID`,  \n" +
                "  `FUN_GETWORKORDERSUBSTATUSIDBYWOID`(  \n" +
                "`a`.`woID`)  AS `woSubStatusID`,  \n" +
                "  `a`.`refPlanId`              AS `refPlanId`,  \n" +
                "  `a`.`releasedNote`           AS `releasedNote`,  \n" +
                "  `a`.`releaseKitNumber`       AS `releaseKitNumber`,  \n" +
                "  (CASE WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus` WHEN (`a`.`kitStatus` = 'R') THEN 'NR' ELSE 'NA' END) AS `kitReturnStatus`,  \n" +
                "  `FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(  \n" +
                "`a`.`kitReturnDate`)  AS `kitReturnDate`,  \n" +
                "  (CASE WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0 ELSE (SELECT COUNT(1) FROM `salesorder_plan_detailsmst` `sassy` WHERE ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`) AND (`sassy`.`refAssyId` = `a`.`refAssyId`) AND (`sassy`.`subAssyID` IS NOT NULL) AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`))) END) AS `subAssyReleaseCount`,  \n" +
                "  (CASE WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0 ELSE (SELECT COUNT(1) FROM `salesorder_plan_detailsmst` `sassy` WHERE ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`) AND (`sassy`.`refAssyId` = `a`.`refAssyId`) AND (`sassy`.`subAssyID` IS NOT NULL) AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`) AND (`sassy`.`kitStatus` = 'R'))) END) AS `subAssyReleasedCount`  \n" +
                "FROM (SELECT  \n" +
                "        `s`.`id`                      AS `id`,  \n" +
                "        `s`.`salesOrderDetID`         AS `salesOrderDetID`,  \n" +
                "        `s`.`refAssyId`               AS `refAssyId`,  \n" +
                "        `s`.`subAssyID`               AS `subAssyID`,  \n" +
                "        `s`.`plannKitNumber`          AS `plannKitNumber`,  \n" +
                "        `s`.`poQty`                   AS `poQty`,  \n" +
                "        `s`.`poDueDate`               AS `poDueDate`,  \n" +
                "        `s`.`mfrLeadTime`             AS `mfrLeadTime`,  \n" +
                "        `s`.`materialDockDate`        AS `materialDockDate`,  \n" +
                "        `s`.`kitReleaseQty`           AS `kitReleaseQty`,  \n" +
                "        `s`.`kitReleaseDate`          AS `kitReleaseDate`,  \n" +
                "        `s`.`actualKitReleaseDate`    AS `actualKitReleaseDate`,  \n" +
                "        `s`.`releasedBy`              AS `releasedBy`,  \n" +
                "        `s`.`releaseTimeFeasibility`  AS `releaseTimeFeasibility`,  \n" +
                "        `s`.`kitStatus`               AS `kitStatus`,  \n" +
                "        `s`.`woID`                    AS `woID`,  \n" +
                "        `s`.`refPlanId`               AS `refPlanId`,  \n" +
                "        `s`.`releasedNote`            AS `releasedNote`,  \n" +
                "        `s`.`releaseKitNumber`        AS `releaseKitNumber`,  \n" +
                "        `s`.`kitReturnStatus`         AS `kitReturnStatus`,  \n" +
                "        `s`.`kitReturnDate`           AS `kitReturnDate`  \n" +
                "      FROM `salesorder_plan_detailsmst` `s`  \n" +
                "      WHERE (`s`.`isDeleted` = 0)UNION ALL SELECT  \n" +
                "                                             `s`.`id`                       AS `id`,  \n" +
                "                                             `s`.`salesOrderDetID`          AS `salesOrderDetID`,  \n" +
                "                                             `s`.`refAssyId`                AS `refAssyId`,  \n" +
                "                                             `kassy`.`partId`               AS `subAssyID`,  \n" +
                "                                             `s`.`plannKitNumber`           AS `plannKitNumber`,  \n" +
                "                                             (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `poQty`,  \n" +
                "                                             `s`.`poDueDate`                AS `poDueDate`,  \n" +
                "                                             `s`.`mfrLeadTime`              AS `mfrLeadTime`,  \n" +
                "                                             `s`.`materialDockDate`         AS `materialDockDate`,  \n" +
                "                                             (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                                             `s`.`kitReleaseDate`           AS `kitReleaseDate`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate` ELSE NULL END) AS `actualKitReleaseDate`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy` ELSE NULL END) AS `releasedBy`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility` ELSE NULL END) AS `releaseTimeFeasibility`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus` ELSE 'P' END) AS `kitStatus`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID` ELSE NULL END) AS `woID`,  \n" +
                "                                             `s`.`refPlanId`                AS `refPlanId`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote` ELSE NULL END) AS `releasedNote`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber` ELSE NULL END) AS `releaseKitNumber`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus` ELSE NULL END) AS `kitReturnStatus`,  \n" +
                "                                             (CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate` ELSE NULL END) AS `kitReturnDate`  \n" +
                "                                           FROM (`kit_allocation_assy_detail` `kassy`  \n" +
                "                                              LEFT JOIN `salesorder_plan_detailsmst` `s`  \n" +
                "                                                ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "                                                     AND (`s`.`subAssyID` IS NULL))))  \n" +
                "                                           WHERE ((`kassy`.`isDeleted` = 0)  \n" +
                "                                                  AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                                                  AND EXISTS(SELECT  \n" +
                "                                                               'Y'  \n" +
                "                                                             FROM `salesorder_plan_detailsmst` `sp`  \n" +
                "                                                             WHERE ((`sp`.`isDeleted` = 0)  \n" +
                "                                                                    AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                                                                    AND (`kassy`.`partId` = `sp`.`subAssyID`)))IS FALSE)) `a`  \n" +
                "WHERE ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "       AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "ORDER BY `a`.`salesOrderDetID`,`a`.`refAssyId`,`a`.`subAssyID`;  \n" +
                /* **************************** Add Script Version -> 10-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (710,'1.00','V1','Kit allocation changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 710:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2021  *********************************** */
                "ALTER TABLE packingslip_invoice_payment   \n" +
                "ADD isLocked TINYINT NOT NULL DEFAULT 0 ;    \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment   \n" +
                "ADD lockedBy VARCHAR(255) ;    \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment   \n" +
                "ADD lockedByRoleId INT ;    \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment   \n" +
                "ADD lockedAt DATETIME ;  \n" +
                /* **************************** Add Script Version -> 10-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (711,'1.00','V1',' customer payment lock transaction new fields - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 711:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2021  *********************************** */
                "INSERT INTO systemconfigrations (`key`, `values`,`isActive`, `createdBy`,  \n" +
                "`displayName`,`isEditable`,`description`,`createByRoleId`,`updateByRoleId`)   \n" +
                "VALUES ('CustomerAllowPaymentDays', 30 ,1, 1,  \n" +
                "'Customer Allow Payment Days',1,  \n" +
                "'The number mentioned in the value field is in days [xx]. On the \"Customer Payment\" page, the user will be allowed to select the Payment date between the current date and the date which is coming after adding the days mentioned in the value field. e.g. Current date is 9th February 2021 and the value mention in the data key is 10, then the user will be able to select the payment date between 9th February 2021 and 19th February 2021.',1,1) ;  \n" +
                "  \n" +
                "  \n" +
                " INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`,   \n" +
                " `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)    \n" +
                " VALUES ('Allow to Lock Customer Payment', 1, 0, CURRENT_TIMESTAMP(),   \n" +
                " 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                /* **************************** New Script -> 10-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(                                                                                    \n" +
                "	IN ppageIndex INT,                                                                                    \n" +
                "	IN precordPerPage INT,                                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                        \n" +
                "	IN pCustomerIDs VARCHAR(16383),                        \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),                        \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),                        \n" +
                "	IN pPaymentNumber VARCHAR(10),                         \n" +
                "	IN pInvoiceNumber VARCHAR(50),                         \n" +
                "	IN pAmount DECIMAL(18,8),                             \n" +
                "	IN pFromDate DATE,                                      \n" +
                "	IN pToDate DATE,      \n" +
                "	IN pRefPaymentMode VARCHAR(1)                           \n" +
                ")  \n" +
                "BEGIN                                                                                    \n" +
                "	DECLARE pOffset INT;                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);                                  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                   \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';                        \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "  		SET pWhereClause = '1=1' ;                              \n" +
                "	END IF;                                 \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');                                                               \n" +
                "	END IF;	                         \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                               \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                               \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber = ',pPaymentNumber,' ');                                                               \n" +
                "	END IF;	                         \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                                          \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND              \n" +
                "             EXISTS(         \n" +
                "			SELECT  1       \n" +
                "			FROM packingslip_invoice_payment_det              \n" +
                "			WHERE refPayementid = psip.id       \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id       \n" +
                "								FROM customer_packingslip              \n" +
                "								WHERE transType = \"I\"   \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"      \n" +
                "								AND isDeleted=0)      \n" +
                "			 )');                                                                     \n" +
                "	END IF;	                         \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount = ',pAmount,' ');                                                               \n" +
                "	END IF;	                             \n" +
                "  \n" +
                "	IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                                    \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                              \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                              \n" +
                "	END IF;                             \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"              			                                            \n" +
                "            SELECT 						                                      \n" +
                "		psip.id,                                                  \n" +
                "                psip.mfgcodeID,                              \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                 \n" +
                "                psip.isPaymentVoided,            \n" +
                "                case when psip.isPaymentVoided = 0 then 'Received'            \n" +
                "                    else 'Voided' end isPaymentVoidedConvertedValue,            \n" +
                "		psip.voidPaymentReason,            \n" +
                "                psip.refVoidedPaymentNumber,            \n" +
                "                psip.paymentNumber,                              \n" +
                "                psip.bankName,                              \n" +
                "                psip.bankAccountNo,                              \n" +
                "                psip.paymentType,                              \n" +
                "                psip.bankAccountMasID,                              \n" +
                "                gc.gencCategoryName paymentMethod,                        \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                        \n" +
                "		psip.paymentDate,                        \n" +
                "                psip.paymentAmount,                        \n" +
                "		psip.payToAddress payToAddress,                                       \n" +
                "                psip.accountReference,                        \n" +
                "                psip.remark,   \n" +
                "                psip.isLocked, fun_getIntToText(psip.isLocked) isLockedConvertedValue,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,                                                   \n" +
                "                invPayDetTemp.invoiceNumberList,       \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,    \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,    \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,                                                    \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,                                    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                                  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                                    \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,                               \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole                               \n" +
                "	   FROM packingslip_invoice_payment psip                         \n" +
                "			INNER JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID        \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') invoiceNumberList ,    \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount    \n" +
                "				    FROM packingslip_invoice_payment_det psipd      \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id       \n" +
                "											AND cps.isDeleted = 0      \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL       \n" +
                "				     AND psipd.isDeleted = 0      \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp       \n" +
                "				ON psip.id = invPayDetTemp.refPayementid           \n" +
                "            WHERE refPaymentMode = '\",pRefPaymentMode,\"'       \n" +
                "            AND psip.isDeleted = 0       \n" +
                "            AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause);                                \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                    \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";                                                                                    \n" +
                "	ELSE                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                                                    \n" +
                "	END IF;	                                                            		                        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                    \n" +
                "	ELSE	                                                                                    \n" +
                "		SET rowNumWhere = '';                                                                                    \n" +
                "	END IF;	                                                                                     \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                 \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                							        \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                                \n" +
                "	EXECUTE query1;                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                           \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                \n" +
                "	EXECUTE query2;                                                                \n" +
                "	DEALLOCATE PREPARE query2;                                                             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (712,'1.00','V1',' feature entry for lock customer payment transaction and payment date - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 712:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_AddWorkorder;  \n" +
                "CREATE PROCEDURE `Sproc_AddWorkorder`(                                                          \n" +
                "	IN pcustomerID INT,                                                          \n" +
                "	IN ppartID INT,                                                          \n" +
                "	IN pRoHSStatusID INT,                                                           \n" +
                "	IN pwoNumber VARCHAR(1000),                                                          \n" +
                "	IN pbuildQty INT,                                                          \n" +
                "	IN pexcessQty INT,                                                     \n" +
                "	IN pisRevision INT,                                                          \n" +
                "	IN pwoType VARCHAR(100),                                                          \n" +
                "	IN pisCopyOPFrom VARCHAR(100),                                                          \n" +
                "	IN prefrenceWOID INT,                                \n" +
                "	IN pmasterTemplateID INT,                                \n" +
                "	IN puserID VARCHAR(500),                            \n" +
                "	IN pisRevisedWO INT,                            \n" +
                "	IN pterminateWOID INT ,                            \n" +
                "	IN pterminateWOOPID INT,                            \n" +
                "	IN pisHotJob INT,                            \n" +
                "	IN pinitialInternalVersion VARCHAR(50)  ,                            \n" +
                "	IN pParentWOID INT  ,  \n" +
                "	IN puserRoleId INT  \n" +
                ")  \n" +
                "BEGIN                                                          \n" +
                "DECLARE insertedWOID INT;                                                      \n" +
                "DECLARE strOPID VARCHAR(10000);             \n" +
                "DECLARE vPropUmidQty  INT DEFAULT 0;        \n" +
                "DECLARE vIsInternalBuild TINYINT DEFAULT 0;                                               \n" +
                "DECLARE vIsKitAllocationNotRequired TINYINT DEFAULT 0;      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                          \n" +
                "BEGIN                                                          \n" +
                "	ROLLBACK;                                                          \n" +
                "	RESIGNAL;                                                          \n" +
                "END;                                                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                                          \n" +
                "  BEGIN                                                          \n" +
                "	ROLLBACK;                                                          \n" +
                "	RESIGNAL;                                                          \n" +
                "END;                                  \n" +
                "	IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = pwoNumber))                                        \n" +
                "		THEN SELECT 'woNumber' errorCode;       \n" +
                "	ELSEIF (EXISTS (SELECT 1 FROM assemblystock WHERE deletedAt IS NULL AND woNumber = pwoNumber AND `type` = 'OS')) THEN      \n" +
                "		SELECT 'EC02' errorCode;      \n" +
                "		/* opening stock contain same work order number then not allowed */      \n" +
                "	ELSE             		        \n" +
                "		START TRANSACTION;                                  \n" +
                "  \n" +
                "			-- select w.woNumber into refwoNumber from workorder w where w.woID = prefrenceWOID and w.deletedAt IS NULL;                                \n" +
                "			IF(prefrenceWOID IS NOT NULL AND (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\")) THEN                                \n" +
                "				IF (pisRevisedWO = 1) THEN                            \n" +
                "					# Update from work order status to 'Under Termination'                                \n" +
                "					UPDATE Workorder                             \n" +
                "					SET woStatus = 6,             \n" +
                "                    woSubStatus = 6,                         \n" +
                "					updatedAt =  fun_DatetimetoUTCDateTime(),                             \n" +
                "					updatedBy = puserID                             \n" +
                "					WHERE woID = pterminateWOID                             \n" +
                "					AND IFNULL(isDeleted, 0) = 0;                                \n" +
                "				END IF;                            \n" +
                "				CALL Sproc_CopyWorkorder(prefrenceWOID, pwoNumber, ppartID, pexcessQty, pbuildQty, puserID, NULL, NULL, pisRevision, pwoType, NULL, pcustomerID, pisRevisedWO, pterminateWOID, pterminateWOOPID, pisHotJob, pinitialInternalVersion,pisCopyOPFrom, pParentWOID);                                \n" +
                "			ELSE                                 \n" +
                "				SET insertedWOID = NULL;                                \n" +
                "				SET strOPID = NULL;                               \n" +
                "  \n" +
                "				IF (pisRevisedWO = 1) THEN                            \n" +
                "					# Update from work order status to 'Under Termination'                                \n" +
                "					UPDATE Workorder                             \n" +
                "					SET woStatus = 6,           \n" +
                "                    woSubStatus = 6,          \n" +
                "					updatedAt =  fun_DatetimetoUTCDateTime(),                             \n" +
                "					updatedBy = puserID                             \n" +
                "					WHERE woID = pterminateWOID                             \n" +
                "					AND IFNULL(isDeleted, 0) = 0;            \n" +
                "  \n" +
                "                    SELECT  isInternalBuild , proposedUmidQty , isKitAllocationNotRequired     \n" +
                "						INTO  vIsInternalBuild,vPropUmidQty ,vIsKitAllocationNotRequired         \n" +
                "					FROM workorder wo WHERE woID = pterminateWOID;            \n" +
                "				END IF;                            \n" +
                "  \n" +
                "				# add workorder                                                           \n" +
                "  \n" +
                "				INSERT INTO workorder (                                \n" +
                "				`woNumber`,			`partID`,		`customerID`,		`buildQty`,                                \n" +
                "				`startTime`,			`endTime`,		`masterTemplateID`,                                \n" +
                "				`refrenceWOID`,			`createdAt`,		`createdBy`,		`woStatus`, `woSubStatus`,                                \n" +
                "				`excessQty`,			`isClusterApplied`,	`RoHSStatusID`,		`woVersion`,                                 \n" +
                "				`isDeleted`,			`ECORemark`,		`FCORemark`            \n" +
                "				,`isOperationTrackBySerialNo`,	`isNoClean`,		`isWatersoluble`,	`isRevisedWO`,                                \n" +
                "				`woType`,			`updatedAt`,		`updatedBy`,		`terminateWOID`,                          \n" +
                "				`terminateWOOPID`,		`isHotJob`,		`initialInternalVersion`,         \n" +
                "                `isInternalBuild` , `proposedUmidQty`,`isKitAllocationNotRequired`)    \n" +
                "				VALUES                                 \n" +
                "				(                                \n" +
                "				pwoNumber,			ppartID,		pcustomerID,		pbuildQty,                                \n" +
                "				NULL,				NULL,			pmasterTemplateID,	                                \n" +
                "				prefrenceWOID,			fun_DatetimetoUTCDateTime(),		puserID,		0,  0,                              \n" +
                "				pexcessQty,			0,			pRoHSStatusID,		'A',                                \n" +
                "				0,				NULL,			NULL,			                     \n" +
                "				0,				0,			0,			IFNULL(pisRevisedWO,0),                                \n" +
                "				pwoType,			fun_DatetimetoUTCDateTime(),		puserID,		pterminateWOID,                          \n" +
                "				pterminateWOOPID,		pisHotJob,		pinitialInternalVersion	,						                                \n" +
                "				 vIsInternalBuild,vPropUmidQty, vIsKitAllocationNotRequired );                                            \n" +
                "				-- get inseterted record from selected autocomplete                                \n" +
                "				-- SELECT LAST_INSERT_ID() into insertedWOID;                                   \n" +
                "				SET insertedWOID = LAST_INSERT_ID();                                              \n" +
                "				SELECT w.woID AS woID FROM workorder w WHERE w.woID = insertedWOID;                           \n" +
                "  \n" +
                "				# copy part_assembly_certification                        \n" +
                "				INSERT INTO workorder_certification                                                        \n" +
                "				(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                                          \n" +
                "				SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `createdBy`,                      \n" +
                "						`ClassID` `classIDs`, `isDeleted`                         \n" +
                "				FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;                                 \n" +
                "  \n" +
                "				IF(pParentWOID IS NOT NULL) THEN                \n" +
                "					#Insert parent woID details                \n" +
                "					INSERT INTO workorder_main_assembly_mapping_details                \n" +
                "					(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)                 \n" +
                "					SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;	                \n" +
                "				END IF;                \n" +
                "  \n" +
                "				# [S] - copy document_folder from selected part/assembly level to work order level                    \n" +
                "				INSERT INTO generic_folder                                                      \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                      \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                      \n" +
                "				SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,                                                      \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, a.gencFolderID copyGencFolderID ,                    \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                     \n" +
                "				FROM generic_folder a                     \n" +
                "				WHERE a.refTransID = ppartID                     \n" +
                "				AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "				UPDATE generic_folder gf1,                                                      \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID                                                      \n" +
                "					FROM generic_folder a WHERE a.refTransID = insertedWOID                 \n" +
                "					AND a.gencFileOwnerType = 'workorder' AND a.deletedAt IS NULL                \n" +
                "				) gf2                                                      \n" +
                "				SET gf1.refParentId = gf2.gencFolderID                                                      \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID                     \n" +
                "				AND gf1.refTransID = insertedWOID                 \n" +
                "				AND gf1.gencFileOwnerType = 'workorder' AND gf1.deletedAt IS NULL;                     \n" +
                "			# [E] - copy generic_folder from selected part/assembly level to work order level                    \n" +
                "  \n" +
                "				-- copy operation from operation master templates by pmasterTemplateID                                \n" +
                "				IF (insertedWOID > 0 AND pisCopyOPFrom = \"M\") THEN                                 \n" +
                "					-- copy operation from workorder operation by prefrenceWOID                                \n" +
                "					-- if(pisCopyOPFrom = \"W\") then                                \n" +
                "					-- 	select GROUP_concat(wo.opID) into strOPID from workorder_operation wo where wo.woID=prefrenceWOID and wo.deletedAt IS NULL and IFNULL(wo.isDeleted,0)=0;                                \n" +
                "					-- 	IF (strOPID IS NOT NULL) THEN                                \n" +
                "					-- 		CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID);                                \n" +
                "					-- 	END IF;                                \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(opmt.operationID) INTO strOPID FROM operation_master_templates opmt WHERE opmt.masterTemplateId=pmasterTemplateID AND opmt.deletedAt IS NULL AND IFNULL(opmt.isDeleted,0)=0;                                \n" +
                "					IF (strOPID IS NOT NULL) THEN                                \n" +
                "						CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID,puserRoleId);                                \n" +
                "					END IF;                                \n" +
                "				END IF;                                \n" +
                "			END IF;                                \n" +
                "		COMMIT;                                 \n" +
                "	END IF;                                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (713,'1.00','V1',' Sproc_AddWorkorder- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 713:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(                                                                                                       \n" +
                "	IN ppageIndex INT,              \n" +
                "	IN precordPerPage INT,              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pIsKitList TINYINT,              \n" +
                "	IN pPlannedStatus VARCHAR(10),              \n" +
                "	IN pSalesOrderDetailId INT,              \n" +
                "	IN pIsPendingWOCreationList TINYINT,              \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),              \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT;              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);              \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);              \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);              \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);              \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);              \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);              \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';              \n" +
                "	SET v_PendingWOWhereClause='';              \n" +
                "	IF(pIsKitList=1) THEN              \n" +
                "		SET v_DynamicColumns = CONCAT(\",              \n" +
                "			hu.refType as refTypeKR,              \n" +
                "			hu.status as haltStatusKR,              \n" +
                "			(              \n" +
                "				CASE              \n" +
                "					WHEN hu.status = 'H' THEN              \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))                                                                          \n" +
                "					ELSE ''              \n" +
                "				END              \n" +
                "			) AS reasonKR,              \n" +
                "			hutt.refType as refTypePO,              \n" +
                "			hutt.status as haltStatusPO,              \n" +
                "			(              \n" +
                "				CASE              \n" +
                "					WHEN hutt.status = 'H' THEN              \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))                                                                          \n" +
                "					ELSE ''              \n" +
                "				END              \n" +
                "			) AS reasonPO,              \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion              \n" +
                "		\");                                                        \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"                                                          \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refSalesOrderDetID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refSalesOrderDetID = htt.refSalesOrderDetID and htt.refType='KR' and htt.isDeleted=0)                                                       \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refSalesOrderDetID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refSalesOrderDetID = httt.refSalesOrderDetID and httt.refType='PO' and httt.isDeleted=0)                    \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;                                                        \n" +
                "	ELSE                                                        \n" +
                "		SET v_DynamicColumns=CONCAT(\",                                    \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,                                                        \n" +
                "			(                                    \n" +
                "				CASE                                                                  \n" +
                "					WHEN hut.status = 'H' THEN                                                       \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))                                                                          \n" +
                "					ELSE ''                                                               \n" +
                "				END                                    \n" +
                "			) AS reasonPO                                    \n" +
                "		\");                                                        \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"                                    \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refSalesOrderDetID and hut.id = (                                    \n" +
                "				SELECT 	MAX(ht.id)                                     \n" +
                "				FROM 	holdunholdtrans ht                                     \n" +
                "				WHERE 	hut.refSalesOrderDetID = ht.refSalesOrderDetID                                     \n" +
                "						AND ht.refType='PO'                                     \n" +
                "						AND ht.isdeleted=0                                    \n" +
                "					)                                    \n" +
                "				\") ;                                                        \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN                                             \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');                                           \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");                                                        \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (                                                      \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,                                     \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,                                     \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,                                     \n" +
                "						vusalesorderdet.poNumber,                                     \n" +
                "						vusalesorderdet.salesOrderNumber                                              \n" +
                "				FROM 		workorder wo                                                                                                          \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3                                                \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID                                              \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode                                     \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)                                    \n" +
                "		\");                                                        \n" +
                "	END IF;                              \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN                          \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd                           \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');                          \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,                          \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');                                                 \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';                          \n" +
                "        IF pOrderBy IS NULL THEN                          \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';                          \n" +
                "        END IF;                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"                                                                                    \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,                                                                                                    \n" +
                "			(                                                                  \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN                                                                   \n" +
                "						'No'                                                                                                      \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN                                                                   \n" +
                "						'Yes'                                                                   \n" +
                "					ELSE                                                                   \n" +
                "						''                                                                   \n" +
                "				END                                                                  \n" +
                "			) AS `isHotJobValue`,                                                                                                      \n" +
                "			`vuss`.`Sales Order ID` AS id,                                                                                                    \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,                                                                                                  \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,                                                                                                      \n" +
                "			`vuss`.`Po Number` AS poNumber,                                                                                                      \n" +
                "			`vuss`.`Po Date` AS poDate,                                                                                                      \n" +
                "			`vuss`.`Customer ID` AS customerID,                                                                                                      \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,                                                                                                      \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,                                                                                                      \n" +
                "			`vuss`.`Sales Order Status` AS `status`,                                                                                                      \n" +
                "			`vuss`.`Revision` AS revision,                                                                                                      \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,                                                                                                      \n" +
                "			`vuss`.`Terms ID` AS termsID,                                                                                                      \n" +
                "			`vuss`.`So Date` AS soDate,                                                                                                      \n" +
                "			`vuss`.`Company Name` AS companyName,                     \n" +
                "            `vuss`.`internalPO` AS internalPO,                     \n" +
                "			`vuss`.`mfgCode` AS mfgCode,                                              \n" +
                "			`vuss`.`Full Name` AS fullName,                                                                                                      \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,                                                                                                  \n" +
                "			`vuss`.`PO Qty` AS qty,                                                                                                  \n" +
                "			`vuss`.`mrpQty` AS mrpQty,                                        \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,                                                 \n" +
                "			`vuss`.`kitQty` AS kitQty, \",                                                                                           \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),                                                                                                  \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,                                                                                                  \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,                                                                                                  \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,                                                                                                  \n" +
                "			`vuss`.`shippingQty` AS shippingQty,                                                                                                  \n" +
                "			`vuss`.`remark` AS remark,                                                                                                  \n" +
                "			`vuss`.`Assy ID` AS PIDCode,                                                                                            \n" +
                "			`vuss`.`Assy Name` AS mfgPN,                                                                                                \n" +
                "			`vuss`.`NickName` AS nickName,                                                                                                 \n" +
                "			`vuss`.`liveVersion` AS liveVersion,                                                                                                 \n" +
                "			`vuss`.`partDescription` AS partDescription,                                                                                                  \n" +
                "			`vuss`.`cancleReason` AS cancleReason,                                                                                                  \n" +
                "			`vuss`.`Status` AS completedStatus,                                                                                                      \n" +
                "			`vuss`.`modifyDate` AS modifyDate,                                                                                                        \n" +
                "			`vuss`.`createdDate` AS createdDate,                                                                                                    \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,                                                                                                   \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,                                                                                                      \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,                                                                                                   \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,                                                                                                   \n" +
                "			`vuss`.`PartID` AS partID,                                                       \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,                                                \n" +
                "			`vuss`.`kitNumber` AS kitNumber,        \n" +
                "			vuss.internalCommentSo,        \n" +
                "			vuss.internalComment,                              \n" +
                "             ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,                        \n" +
                "			fun_getStatusNameByColumnAndID('SOSTATUS',ifnull(vuss.salesOrderDetStatus,1)) as salesOrderDetStatusConvertedValues,                     \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,                              \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,                                                                            \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId) as isBuildWiseHotJob,                                                                                \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,                       \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,                         \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,                                   \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,                                                                                                  \n" +
                "			(                                                                  \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN                                                                   \n" +
                "						'Draft'                                                                                                       \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN                                                                   \n" +
                "						'Published'                                                                                                      \n" +
                "					ELSE                                                                   \n" +
                "						''                                                                   \n" +
                "				END                                                                  \n" +
                "			) AS `statusConvertedValue`,                                              \n" +
                "			hutkit.refType as refTypeKA,                                            \n" +
                "			hutkit.status as haltStatusKA,                                                         \n" +
                "			(                                    \n" +
                "				CASE                                                                  \n" +
                "					WHEN 	hutkit.status = 'H' THEN                                                       \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))                                                                          \n" +
                "					ELSE 	''                                                                \n" +
                "				END                                    \n" +
                "			) AS reasonKA,                                              \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,                                                                                        \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,                                                  \n" +
                "			(                                    \n" +
                "				CASE 	                                    \n" +
                "					WHEN 	ka.kitReturnStatus is null then                                     \n" +
                "						'N/A'                                     \n" +
                "					ELSE 	                                    \n" +
                "						ka.kitReturnStatus                                     \n" +
                "				END                                    \n" +
                "			) as kitReturnStatus,                                                \n" +
                "			(                                    \n" +
                "				CASE 	                                    \n" +
                "					WHEN ka.kitReleaseStatus is null then                                     \n" +
                "						'Not Released'                                     \n" +
                "					else                                     \n" +
                "						ka.kitReleaseStatus                                     \n" +
                "				END                                    \n" +
                "			) as kitReleaseStatus,                                                                    \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,                      \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100                   \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage, 			                                 \n" +
                "			p.nextReleaseDate,                                                                  \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,                                                \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,                                                \n" +
                "			p.releasedPlanCount totalkitRelease,                                                                          \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,                                                                \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,                                     \n" +
                "			vuss.releasedWorkorder,      \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"                                                        \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"                                                \n" +
                "	LEFT JOIN  	(                                                \n" +
                "				SELECT  salesOrderDetID,                                     \n" +
                "					refAssyId,                                                 \n" +
                "					count(1) totalPlan,                                                 \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,                                                \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate                                                \n" +
                "				FROM 	salesorder_plan_detailsmst                                                 \n" +
                "				WHERE 	isDeleted=0                                  \n" +
                "						AND subAssyID is null                                                 \n" +
                "				GROUP BY salesOrderDetID, refAssyId                                                \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`                                                   \n" +
                "	LEFT JOIN 	(                                                \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                  \n" +
                "					`k`.`assyID` AS `assyID`,                                      \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,                                                \n" +
                "					`k`.`shortageLine` AS `shortageLine`,                              \n" +
                "					allocPermainAssy allocPerComponent,                              \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,                                                \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,                                                 \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,                                                \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`                                                \n" +
                "					FROM (                                                \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                     \n" +
                "							mainAssy AS `assyID`,                                       \n" +
                "							COUNT(1) AS `totalLine`,                                     \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,                                    \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,                                      \n" +
                "							sum( k.shortageline) shortageline,                                \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,    \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`    \n" +
                "					      FROM (    \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,                                                \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,           \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,    \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,                               \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,                                \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,     \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,     \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`                                                 \n" +
                "								FROM  	`vu_kit_allocation_detail` vk                                  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id                 \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1                         \n" +
                "							) `k`                                 \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy                                \n" +
                "					) `k`                                           \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`                                                   \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0                                                      \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refSalesOrderDetID and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refSalesOrderDetID = htk.refSalesOrderDetID and htk.refType='KA' and htk.isDeleted=0)                                                                   \n" +
                "	\");                                                                                           \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                      \n" +
                "	ELSE                                                                                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;                                                                                                      \n" +
                "	END IF;                                                                                                       \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                      \n" +
                "		SET pWhereClause = '1=1' ;                                                                                                      \n" +
                "	END IF;                                               \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);                                              \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);                          \n" +
                "    END IF;                              \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN                                \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) \");                         \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN                                                                                                      \n" +
                "		IF (pPlannedStatus = 'P') THEN                                                                  \n" +
                "			SET v_PlannedWhere = \" AND kitReleasePlanCount > 0\";                                                                  \n" +
                "		ELSEIF (pPlannedStatus = 'R') THEN                                                                  \n" +
                "			SET v_PlannedWhere = \" AND kitReleasePlanCount <= 0\";                                                                  \n" +
                "		END IF;                                                                                                      \n" +
                "	END IF;                                                                    \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN                                                                  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);                                                                  \n" +
                "	END IF;                                            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                                                                         \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                      \n" +
                "	ELSE                                                                                                       \n" +
                "		SET rowNumWhere = '';                                                                                                      \n" +
                "	END IF;                                                                                   \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                         \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));                                                                                        \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                       \n" +
                "	EXECUTE query1;                                                                                        \n" +
                "	DEALLOCATE PREPARE query1;                                                                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                                                                                        \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                                                                        \n" +
                "	EXECUTE query2;                                                                                        \n" +
                "	DEALLOCATE PREPARE query2;                                                                                                       \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount <= 0 AND \", pWhereClause, v_PendingWOWhereClause);                                                                                            \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                        \n" +
                "	EXECUTE query3;                                                                                        \n" +
                "	DEALLOCATE PREPARE query3;                                                                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-02-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (714,'1.00','V1','Sproc_GetSalesorderList - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 714:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                          \n" +
                "	IN pPageIndex INT,                          \n" +
                "	IN pRecordPerPage INT,                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pReceiptType VARCHAR(10),                          \n" +
                "	IN pMfgCodeIds LONGTEXT,                          \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,                          \n" +
                "	IN pDueDate DATE,                          \n" +
                "	IN pAdditionalDays INT,                          \n" +
                "	IN pTermsAndAboveDays INT,                          \n" +
                "	IN pInvoiceNumber VARCHAR(50),                          \n" +
                "	IN pIsExactSearch TINYINT,                        \n" +
                "	IN pMfrPnId INT,            \n" +
                "    IN pInvoiceIds LONGTEXT,        \n" +
                "    IN pExactPaymentNumberSearch TINYINT,        \n" +
                "    IN pPaymentNumber VARCHAR(50)        \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "	DECLARE pOffset INT;                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);          \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                    \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                    \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                   \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"        \n" +
                "			SELECT 		p.id,        \n" +
                "					p.poNumber,        \n" +
                "					p.mfgCodeID,        \n" +
                "					p.supplierSONumber,        \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,        \n" +
                "					p.packingSlipDate,        \n" +
                "					p.invoiceNumber,        \n" +
                "					p.invoiceDate,        \n" +
                "					p.creditMemoNumber,        \n" +
                "					p.creditMemoDate,        \n" +
                "					p.debitMemoNumber,        \n" +
                "					p.debitMemoDate,        \n" +
                "					p.receiptDate,        \n" +
                "					p.description,        \n" +
                "					p.billToAddress,        \n" +
                "					p.shipToAddress,        \n" +
                "					p.poVersion,        \n" +
                "					p.isDeleted,        \n" +
                "					p.receiptType,        \n" +
                "					p.`status`,        \n" +
                "					p.applyDate,        \n" +
                "					p.refParentCreditDebitInvoiceno,        \n" +
                "					p.refPackingSlipNumberForInvoice,        \n" +
                "					p.invoiceTotalDue,        \n" +
                "					p.isTariffInvoice,                          \n" +
                "					p.creditMemoType,        \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                     \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,          \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,          \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,          \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,          \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                   \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,        \n" +
                "					(            \n" +
                "						SELECT 	COUNT(1)             \n" +
                "						FROM 	genericfiles g             \n" +
                "						WHERE 	g.refTransID = p.id             \n" +
                "								AND           \n" +
                "								(          \n" +
                "									CASE           \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15          \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16            \n" +
                "										ELSE g.entityID = -13          \n" +
                "									END          \n" +
                "								)        \n" +
                "								AND g.isDeleted = 0        \n" +
                "					) invoiceDocCount,            \n" +
                "					(            \n" +
                "						SELECT 	COUNT(1)             \n" +
                "						FROM 	genericfiles g             \n" +
                "						WHERE 	g.refTransID = psm.id             \n" +
                "								AND g.entityID = -14        \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'             \n" +
                "								AND g.isDeleted =0        \n" +
                "					) packingSlipDocCount,                                  \n" +
                "					pd.itemReceived,                                    \n" +
                "					pd.otherChargesItemReceived,                                          \n" +
                "					pd.itemDisapproved,        \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,        \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,        \n" +
                "					ps.status parentInvoiceStatus,        \n" +
                "					ps.invoiceNumber refInvoiceNumber,        \n" +
                "					ps.creditMemoType parentCreditMemoType,        \n" +
                "					pd.totalExtendedAmount,        \n" +
                "					pe.totalCreditAmount,        \n" +
                "					pe.totalDebitAmount,        \n" +
                "					(        \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)        \n" +
                "					) amountToPay,        \n" +
                "					pd.packingDetailNote,        \n" +
                "					pd.approveLineCount,        \n" +
                "					DATE_ADD((case 	WHEN p.receiptType = 'D' THEN                \n" +
                " 									p.debitMemoDate                \n" +
                " 								WHEN p.receiptType = 'C' THEN                \n" +
                " 									p.creditMemoDate                \n" +
                " 								ELSE p.invoiceDate                        \n" +
                " 							end),        \n" +
                "     					INTERVAL IFNULL(p.termsDays,0) DAY) paymentDueDate,  \n" +
                "    					p.refPayementid,                        \n" +
                "					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,        \n" +
                " 					p.paymentTermsID,        \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                                \n" +
                "					psm.packingSlipModeStatus,                        \n" +
                "					ifnull(get_totalSupplierInvoicePaidAmountById(p.id),0) paidAmount,                        \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                    \n" +
                "					p.invoiceRequireManagementApproval,                    \n" +
                "					(                    \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                    \n" +
                "								'Yes'                    \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN                    \n" +
                "								'No'                    \n" +
                "						END                    \n" +
                "					) invoiceRequireManagementApprovalValue,                     \n" +
                "					p.invoiceApprovalStatus,                    \n" +
                "					(                    \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                    \n" +
                "								'Approved'                    \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN                    \n" +
                "								'Pending'                    \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN                    \n" +
                "								'N/A'                    \n" +
                "						END                    \n" +
                "					) invoiceApprovalStatusValue,                    \n" +
                "					p.invoiceApprovedBy,                    \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                    \n" +
                "					p.invoiceApprovalDate,                    \n" +
                "					p.invoiceApprovalComment,                    \n" +
                "					p.internalRemark                    \n" +
                "			FROM packing_slip_material_receive p        \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0        \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0        \n" +
                "			left join (        \n" +
                "							select 	a.refPackingSlipMaterialRecID,        \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,        \n" +
                "								sum(a.itemReceived) itemReceived,                                  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,        \n" +
                "								sum(a.itemDisapproved) itemDisapproved,        \n" +
                "								sum(a.approveLineCount) approveLineCount,        \n" +
                "								sum(a.extendedPrice) totalExtendedAmount        \n" +
                "							from 	(                                  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                                   \n" +
                "										psm.packingSlipSerialNumber,                                   \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                      \n" +
                "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,                                  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,                                  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,        \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,        \n" +
                "										extendedPrice        \n" +
                "									FROM 	packing_slip_material_receive_det psm        \n" +
                "									WHERE 	psm.isDeleted = 0        \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)        \n" +
                "								) a                                            \n" +
                "							group by a.refPackingSlipMaterialRecID                                  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                            \n" +
                "				left join (                                  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                             \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                        \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                        \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                        \n" +
                "							from 		packing_slip_material_receive ps                                            \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                            \n" +
                "								  where ps.receiptType in ('C','D')        \n" +
                "									and ps.isDeleted = 0        \n" +
                "									and pd.isDeleted = 0        \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno        \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id        \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",        \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),            \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                             \n" +
                "	);                                        \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                            \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                                            \n" +
                "	END IF;                                            \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL and pPaymentNumber != '') THEN        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"        \n" +
                "				and exists (select 1        \n" +
                "							  from packingslip_invoice_payment pm        \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id        \n" +
                "							 where pm.isDeleted = 0        \n" +
                "							   and pm.isPaymentVoided = 0        \n" +
                "							   and pm.refPaymentMode = 'P'        \n" +
                "							   and pd.refPackingslipInvoiceID = p.id        \n" +
                "							   and pm.paymentNumber \",        \n" +
                "                               case when pExactPaymentNumberSearch = true then CONCAT(\" = \", pPaymentNumber ,\" \") else CONCAT(\" like '%\", pPaymentNumber, \"%' \") end        \n" +
                "                               ,\") \");        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                                            \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                            \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                            \n" +
                "	END IF;                                            \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                          \n" +
                "		IF pIsExactSearch = 1 THEN                          \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                          \n" +
                "									AND (                          \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                          \n" +
                "									  \" ) \"                          \n" +
                "						);                          \n" +
                "		ELSE                          \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                          \n" +
                "									AND (                          \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                          \n" +
                "									  \" ) \"                          \n" +
                "						);                          \n" +
                "		END IF;                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN        \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (        \n" +
                "				SELECT 1        \n" +
                "				  FROM packing_slip_material_receive_det x        \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0        \n" +
                "			)        \n" +
                "		\");        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	/* to get total count of rows */                                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                      \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "	EXECUTE query1;                                      \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                                   \n" +
                "			SELECT 	c.*,                                   \n" +
                "					case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                        \n" +
                "                    round(c.paidAmount,2) totalPaidAmount,                        \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                        \n" +
                "    				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                        \n" +
                "                    round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                       \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                                   \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "	EXECUTE query2;                                      \n" +
                "	DEALLOCATE PREPARE query2;                                     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (715,'1.00','V1','Task 30593: Give Due date related changes in main branch - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 715:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPurchaseOrderReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(            \n" +
                "	IN pid INT            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "  \n" +
                "    # Purchase Order Master details            \n" +
                "    SELECT  po.id,             \n" +
                "		po.status,            \n" +
                "		po.poNumber,            \n" +
                "        po.poRevision,            \n" +
                "        po.poDate,            \n" +
                "        po.supplierAddress,            \n" +
                "		po.shippingAddress,     \n" +
                "        po.intermediateAddress,    \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                              \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,            \n" +
                "        po.shippingInsurance,            \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,            \n" +
                "        po.poComment,            \n" +
                "        po.serialNumber,           \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,            \n" +
                "		us.emailAddress,            \n" +
                "		emp.phExtension            \n" +
                "	FROM purchase_order_mst po            \n" +
                "         INNER JOIN                  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID                  \n" +
                "        AND gcs.isDeleted = 0                  \n" +
                "        INNER JOIN                  \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID                  \n" +
                "        AND gcp.isDeleted = 0            \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy                    \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID              \n" +
                "        WHERE po.isDeleted = 0 AND po.id = pid;            \n" +
                "  \n" +
                "	# Purchase Order Line details            \n" +
                "    SELECT  pod.lineID,            \n" +
                "		pod.id AS pODetID,            \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,    \n" +
                "		(CASE WHEN (c.iscustom=1) THEN                 \n" +
                "			c.custAssyPN                \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                 \n" +
                "			c.mfgPN                 \n" +
                "        ELSE ''  END) AS mfgPN ,          \n" +
                "        IFNULL(c.rev, '') AS revision,            \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,            \n" +
                "		pod.supplierQuoteNumber,            \n" +
                "        pod.internalRef,            \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,            \n" +
                "        pod.qty,            \n" +
                "        fun_getUOMAbbreviationByID(c.uom) uom,            \n" +
                "        pod.price,            \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,   \n" +
                "        CONCAT(IFNULL(pod.partDescription, ''),'<br/>',   \n" +
                "            IFNULL(CONCAT(                            \n" +
                "                            fun_getCertificationByPartID(pod.mfgPartID)),                            \n" +
                "                    ''),            \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                            \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,          \n" +
                "        pod.lineComment            \n" +
                "	 FROM purchase_order_det pod            \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)             \n" +
                "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid             \n" +
                "	 ORDER BY pod.lineID ASC;	            \n" +
                "  \n" +
                "	# Get purchase order Total Price table details        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                       \n" +
                "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud           \n" +
                "				INNER JOIN component cm ON cm.id = pud.mfgPartID            \n" +
                "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 AND cm.partType <> 4) totalLinePrice ,                \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,                    \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd             \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID            \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 AND c.partType = 4) totalPOMiscPrice                    \n" +
                "		FROM purchase_order_det pd               \n" +
                "		WHERE pd.refPurchaseOrderID= pid            \n" +
                "		AND pd.isdeleted=0;     \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,            \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,            \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,       \n" +
                "				IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0),0) totalPOPrice FROM tempTotalPrice LIMIT 1;                     \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	            \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                    \n" +
                "	IN cpID INT                    \n" +
                ")  \n" +
                "BEGIN	                    \n" +
                "   # Customer Invoice Master table details                     \n" +
                "   SELECT  cp.id,                     \n" +
                "			cp.invoiceNumber,                    \n" +
                "			cp.invoiceDate,        \n" +
                "            cp.creditMemoNumber,        \n" +
                "            cp.creditMemoDate,        \n" +
                "            cp.refDebitMemoNumber,        \n" +
                "            refDebitMemoDate,                        \n" +
                "			cp.poNumber,                           \n" +
                "			cp.poDate,          \n" +
                "			mg.customerSystemID,          \n" +
                "			mg.accountRef,        \n" +
                "			cp.status,                 \n" +
                "			cp.billingAddress,         \n" +
                "			cp.shippingAddress,          \n" +
                "            cp.packingSlipComment,          \n" +
                "            cp.rmaNumber,        \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                      \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                            \n" +
                "			cp.systemID AS legalnumber,            \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,              \n" +
                "			us.emailAddress,          \n" +
                "			emp.phExtension        \n" +
                "		FROM customer_packingslip cp           \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                    \n" +
                "                LEFT JOIN                          \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                     \n" +
                "        AND gcs.isDeleted = 0                         \n" +
                "           LEFT JOIN                          \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                     \n" +
                "        AND gcp.isDeleted = 0                       \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                            \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                     \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                     \n" +
                "  \n" +
                "	# Customer Invoice line level details                     \n" +
                "	SELECT                      \n" +
                "		cpd.id,                          \n" +
                "		cpd.partId,                \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                 \n" +
                "		cpd.lineID,         \n" +
                "        cpd.reflineID,      \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                       \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                    \n" +
                "		  WHEN (c.iscustom=1) THEN                     \n" +
                "			c.custAssyPN                    \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                     \n" +
                "			c.mfgPN                     \n" +
                "        ELSE                                                             \n" +
                "			  ''                                            \n" +
                "			END) AS mfgPN ,                    \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                         \n" +
                "			'Other Charges'                          \n" +
                "		ELSE                                                             \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                            \n" +
                "			END) AS  mfgName,                    \n" +
                "		IFNULL(c.rev, '') AS revision,                    \n" +
                "		(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                       \n" +
                "			'EA'                    \n" +
                "		ELSE     \n" +
                "			fun_getUOMAbbreviationByID(c.uom)    \n" +
                "        END) AS uom,                    \n" +
                "		cpd.shipQty AS qty,                     \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                    \n" +
                "		IFNULL(cpd.extendedPrice,0) AS extPrice,          \n" +
                "		CONCAT(IFNULL(cpd.assyDescription, ''),'<br/>',                         \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                           \n" +
                "            IFNULL(CONCAT(', ',                            \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                            \n" +
                "                    ''),            \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                            \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',  \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS description           \n" +
                "  \n" +
                "	FROM                          \n" +
                "		customer_packingslip_det cpd                         \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                          \n" +
                "	WHERE                          \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID ORDER BY reflineID ASC;                     \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                     \n" +
                "    SELECT                                  \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                     \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                 \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 AND cp.refChargesTypeID IS NULL) totalLinePrice,        \n" +
                "			(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                     \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice                    \n" +
                "		FROM customer_packingslip_det cpd                         \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                      \n" +
                "		AND cpd.isdeleted=0;       \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,            \n" +
                "                IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,   \n" +
                "                (SELECT IFNULL(cp.totalAmount,0) FROM customer_packingslip cp WHERE cp.id=cpID) totalCIPrice FROM tempTotalPrice LIMIT 1;                     \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                    \n" +
                "	IN cpID INT                    \n" +
                ")  \n" +
                "BEGIN	                    \n" +
                "  \n" +
                "    # Customer Invoice Master table details                     \n" +
                "    SELECT  cp.id,                    \n" +
                "		cp.invoiceNumber,                    \n" +
                "        cp.invoiceDate,                    \n" +
                "		cp.packingSlipNumber,                          \n" +
                "		cp.packingSlipDate,                          \n" +
                "		cp.poDate,                          \n" +
                "		cp.poNumber,          \n" +
                "		mg.customerSystemID,          \n" +
                "		mg.accountRef,         \n" +
                "		cp.packingSlipComment,                   \n" +
                "        cp.status,                    \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '        \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                  \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                    \n" +
                "        cp.billingAddress,                    \n" +
                "        cp.shippingAddress,          \n" +
                "        cp.intermediateAddress,                    \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                    \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                      \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                     \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                    \n" +
                "        cp.systemID AS legalnumber,                    \n" +
                "        CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                    \n" +
                "		us.emailAddress,                    \n" +
                "		emp.phExtension                    \n" +
                "		FROM customer_packingslip cp           \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                    \n" +
                "                LEFT JOIN                          \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                     \n" +
                "        AND gcs.isDeleted = 0                         \n" +
                "           LEFT JOIN                          \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                     \n" +
                "        AND gcp.isDeleted = 0                       \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                            \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                     \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                     \n" +
                "  \n" +
                "	# Customer Invoice line level details                     \n" +
                "	SELECT                      \n" +
                "		cpd.id,                          \n" +
                "		cpd.partId,                \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                 \n" +
                "		cpd.lineID,                    \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                       \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                    \n" +
                "		  WHEN (c.iscustom=1) THEN                     \n" +
                "			c.custAssyPN                    \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                     \n" +
                "			c.mfgPN                     \n" +
                "        ELSE                                                             \n" +
                "			  ''                                            \n" +
                "			END) AS mfgPN ,                    \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                         \n" +
                "			'Other Charges'                          \n" +
                "		ELSE                                                             \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                            \n" +
                "			END) AS  mfgName,                    \n" +
                "		IFNULL(c.rev, '') AS revision,                    \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                    \n" +
                "		cpd.shipQty AS qty,                     \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                    \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,          \n" +
                "		CONCAT(    \n" +
                "		IFNULL(cpd.assyDescription, ''),'<br/>',                         \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                            \n" +
                "                IFNULL(CONCAT(', ',                            \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                            \n" +
                "                    ''),            \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                            \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',        \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS DESCRIPTION           \n" +
                "  \n" +
                "	FROM                          \n" +
                "		customer_packingslip_det cpd                          \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                           \n" +
                "	WHERE                          \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                     \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                     \n" +
                "    SELECT                                  \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                     \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                     \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                          \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                              \n" +
                "			(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                     \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                     \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                    \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                     \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice                    \n" +
                "		FROM customer_packingslip_det cpd                         \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                      \n" +
                "		AND cpd.isdeleted=0;                          \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                      \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                      \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,  \n" +
                "                (SELECT IFNULL(cp.totalAmount,0) FROM customer_packingslip cp WHERE cp.id=cpID) totalCIPrice                         \n" +
                "                FROM tempTotalPrice LIMIT 1;                     \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(	                                    \n" +
                "	IN pid INT(11)                          \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate,sm.revision,                            \n" +
                "		sm.soDate,                                  \n" +
                "		sm.status,      \n" +
                "		sm.shippingComment,                                  \n" +
                "		mfg.mfgName AS customer,                                  \n" +
                "		gctsm.gencCategoryName AS shippingMethod,                                  \n" +
                "		gctpm.gencCategoryName AS paymentMethod,        \n" +
                "		-- get intermediate shipment address        \n" +
                "		CASE                                   \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN                                          \n" +
                "	(                                          \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                       \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                       \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                      \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                              \n" +
                "	FROM customer_addresses ca                                              \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                              \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0                                           \n" +
                "	) END AS intermediateShippingAddress,        \n" +
                "  \n" +
                "        -- get shipping detils of customer                                           \n" +
                "        CASE                                   \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN                                          \n" +
                "	(                                          \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                       \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                       \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                      \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                              \n" +
                "	FROM customer_addresses ca                                              \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                              \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                                           \n" +
                "	) END AS shippingAddress,                                  \n" +
                "	-- get billing Address                                  \n" +
                "	CASE                                   \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN                                          \n" +
                "	(                                          \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),                      \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                       \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                      \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                              \n" +
                "	FROM customer_addresses ca                                              \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID                                              \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'                                         \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson                      \n" +
                "  \n" +
                "  \n" +
                "	FROM salesordermst sm                                    \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)                                  \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)                                    \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0                      \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId                        \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo                                \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);                                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT           \n" +
                "    sd.lineID,          \n" +
                "    c.PIDCode,          \n" +
                "    sd.id AS sDetID,          \n" +
                "    (CONCAT(CASE          \n" +
                "        WHEN partType = 4 THEN c.mfgPN          \n" +
                "        ELSE c.custAssyPN          \n" +
                "    END)) mfgPN,          \n" +
                "    c.rev revision,   \n" +
                "    CONCAT(IFNULL(sd.partDescription, ''), '<br/>',                     \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),                        \n" +
                "            IFNULL(CONCAT(', ',                        \n" +
                "                            fun_getCertificationByPartID(sd.partID)),                        \n" +
                "                    ''),                        \n" +
                "            IFNULL(CONCAT(', Quote#', CASE          \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber          \n" +
                "        ELSE sd.quoteNumber          \n" +
                "    END), ''),                        \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                        \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,         \n" +
                "    sd.qty,          \n" +
                "    sd.price,          \n" +
                "    sd.qty * sd.price AS extPrice,          \n" +
                "    sd.materialTentitiveDocDate,      \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,         \n" +
                "    CASE          \n" +
                "        WHEN sd.partCategory = 2 THEN NULL          \n" +
                "        ELSE sd.shippingQty          \n" +
                "    END shippingQty,          \n" +
                "    ro.rohsIcon AS rohsIcon,          \n" +
                "    ro.name AS rohsStatus,          \n" +
                "    CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,          \n" +
                "    su.emailAddress,          \n" +
                "    sd.custPOLineNumber,          \n" +
                "    CASE          \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber          \n" +
                "        ELSE sd.quoteNumber          \n" +
                "    END quoteNumber,          \n" +
                "    sd.remark,          \n" +
                "    emp.phExtension,    \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser          \n" +
                "FROM          \n" +
                "    salesorderdet sd          \n" +
                "        JOIN          \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id          \n" +
                "        AND sm.deletedAt IS NULL)          \n" +
                "        JOIN          \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)          \n" +
                "        JOIN          \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id          \n" +
                "        AND ro.deletedAt IS NULL)          \n" +
                "        LEFT JOIN          \n" +
                "    users su ON su.id = sm.updatedBy          \n" +
                "        LEFT JOIN          \n" +
                "    employees emp ON emp.id = su.employeeID          \n" +
                "        LEFT JOIN          \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID          \n" +
                "        LEFT JOIN          \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id          \n" +
                "        AND ra.partID = sd.partID          \n" +
                "        LEFT JOIN          \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id          \n" +
                "WHERE          \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)          \n" +
                "        AND sm.id = pid          \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;	                      \n" +
                "  \n" +
                "        -- get salesorder level total details for                      \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                      \n" +
                "	SELECT SUM(sd.qty * sd.price) totalLinePrice,                      \n" +
                "	(SELECT SUM(sod.qty * sod.price) FROM salesorder_otherexpense_details sod WHERE sod.refSalesOrderDetID IN (SELECT s.id FROM salesorderdet s WHERE s.refsalesorderID=pid AND s.partCategory=3 AND s.isDeleted=0 ) AND sod.isdeleted=0) totalLineMiscPrice,                      \n" +
                "	(SELECT SUM(ssd.qty * ssd.price) FROM salesorderdet ssd WHERE ssd.refsalesorderID=pid AND ssd.partCategory=2 AND ssd.isdeleted=0) totalSOMiscPrice                      \n" +
                "	FROM salesorderdet sd                       \n" +
                "	WHERE sd.refsalesorderID=pid AND sd.partCategory=3 AND sd.isdeleted=0;          \n" +
                "  \n" +
                "	SELECT           \n" +
                "    totalLinePrice,          \n" +
                "    IFNULL(totalLineMiscPrice, 0) totalLineMiscPrice,          \n" +
                "    IFNULL(totalSOMiscPrice, 0) totalSOMiscPrice,          \n" +
                "    (totalLinePrice + IFNULL(totalLineMiscPrice, 0) + IFNULL(totalSOMiscPrice, 0)) totalSOPrice          \n" +
                "FROM          \n" +
                "    tempTotalPrice;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (716,'1.00','V1','Alter procedure Sproc_GetPurchaseOrderReportDetails-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 716:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                      \n" +
                "	IN cpID INT                      \n" +
                ")  \n" +
                "BEGIN	                      \n" +
                "   # Customer Invoice Master table details                       \n" +
                "   SELECT  cp.id,                       \n" +
                "			cp.invoiceNumber,                      \n" +
                "			cp.invoiceDate,          \n" +
                "            cp.creditMemoNumber,          \n" +
                "            cp.creditMemoDate,          \n" +
                "            cp.refDebitMemoNumber,          \n" +
                "            refDebitMemoDate,                          \n" +
                "			cp.poNumber,                             \n" +
                "			cp.poDate,            \n" +
                "			mg.customerSystemID,            \n" +
                "			mg.accountRef,          \n" +
                "			cp.status,                   \n" +
                "			cp.billingAddress,           \n" +
                "			cp.shippingAddress,            \n" +
                "            cp.packingSlipComment,            \n" +
                "            cp.rmaNumber,          \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                        \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                              \n" +
                "			cp.systemID AS legalnumber,              \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                \n" +
                "			us.emailAddress,            \n" +
                "			emp.phExtension          \n" +
                "		FROM customer_packingslip cp             \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                      \n" +
                "                LEFT JOIN                            \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                       \n" +
                "        AND gcs.isDeleted = 0                           \n" +
                "           LEFT JOIN                            \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                       \n" +
                "        AND gcp.isDeleted = 0                         \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                              \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                       \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                       \n" +
                "  \n" +
                "	# Customer Invoice line level details                       \n" +
                "	SELECT                        \n" +
                "		cpd.id,                            \n" +
                "		cpd.partId,                  \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                   \n" +
                "		cpd.lineID,           \n" +
                "        cpd.reflineID,        \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                         \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                      \n" +
                "		  WHEN (c.iscustom=1) THEN                       \n" +
                "			c.custAssyPN                      \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                       \n" +
                "			c.mfgPN                       \n" +
                "        ELSE                                                               \n" +
                "			  ''                                              \n" +
                "			END) AS mfgPN ,                      \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                           \n" +
                "			'Other Charges'                            \n" +
                "		ELSE                                                               \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                              \n" +
                "			END) AS  mfgName,                      \n" +
                "		IFNULL(c.rev, '') AS revision,                      \n" +
                "		(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                         \n" +
                "			'EA'                      \n" +
                "		ELSE       \n" +
                "			fun_getUOMAbbreviationByID(c.uom)      \n" +
                "        END) AS uom,                      \n" +
                "		cpd.shipQty AS qty,                       \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                      \n" +
                "		IFNULL(cpd.extendedPrice,0) AS extPrice,            \n" +
                "		CONCAT(IFNULL(cpd.assyDescription, ''),'<br/>',                           \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                             \n" +
                "            IFNULL(CONCAT(', ',                              \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                              \n" +
                "                    ''),              \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                              \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',    \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS description             \n" +
                "  \n" +
                "	FROM                            \n" +
                "		customer_packingslip_det cpd                           \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                            \n" +
                "	WHERE                            \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID ORDER BY reflineID ASC;                       \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                       \n" +
                "    SELECT                                    \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                       \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                   \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 AND cp.refChargesTypeID IS NULL) totalLinePrice,          \n" +
                "			(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                       \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice                      \n" +
                "		FROM customer_packingslip_det cpd                           \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                        \n" +
                "		AND cpd.isdeleted=0;         \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,              \n" +
                "                IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,    \n" +
                "                IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalCIOMiscPrice,0),0) totalCIPrice FROM tempTotalPrice LIMIT 1;         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;              \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                      \n" +
                "	IN cpID INT                      \n" +
                ")  \n" +
                "BEGIN	                      \n" +
                "  \n" +
                "    # Customer Invoice Master table details                       \n" +
                "    SELECT  cp.id,                      \n" +
                "		cp.invoiceNumber,                      \n" +
                "        cp.invoiceDate,                      \n" +
                "		cp.packingSlipNumber,                            \n" +
                "		cp.packingSlipDate,                            \n" +
                "		cp.poDate,                            \n" +
                "		cp.poNumber,            \n" +
                "		mg.customerSystemID,            \n" +
                "		mg.accountRef,           \n" +
                "		cp.packingSlipComment,                     \n" +
                "        cp.status,                      \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '          \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                    \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                      \n" +
                "        cp.billingAddress,                      \n" +
                "        cp.shippingAddress,            \n" +
                "        cp.intermediateAddress,                      \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                      \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                        \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                       \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                      \n" +
                "        cp.systemID AS legalnumber,                      \n" +
                "        CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                      \n" +
                "		us.emailAddress,                      \n" +
                "		emp.phExtension                      \n" +
                "		FROM customer_packingslip cp             \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                      \n" +
                "                LEFT JOIN                            \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                       \n" +
                "        AND gcs.isDeleted = 0                           \n" +
                "           LEFT JOIN                            \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                       \n" +
                "        AND gcp.isDeleted = 0                         \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                              \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                       \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                       \n" +
                "  \n" +
                "	# Customer Invoice line level details                       \n" +
                "	SELECT                        \n" +
                "		cpd.id,                            \n" +
                "		cpd.partId,                  \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                   \n" +
                "		cpd.lineID,                      \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                         \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                      \n" +
                "		  WHEN (c.iscustom=1) THEN                       \n" +
                "			c.custAssyPN                      \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                       \n" +
                "			c.mfgPN                       \n" +
                "        ELSE                                                               \n" +
                "			  ''                                              \n" +
                "			END) AS mfgPN ,                      \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                           \n" +
                "			'Other Charges'                            \n" +
                "		ELSE                                                               \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                              \n" +
                "			END) AS  mfgName,                      \n" +
                "		IFNULL(c.rev, '') AS revision,                      \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                      \n" +
                "		cpd.shipQty AS qty,                       \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                      \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,            \n" +
                "		CONCAT(      \n" +
                "		IFNULL(cpd.assyDescription, ''),'<br/>',                           \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                              \n" +
                "                IFNULL(CONCAT(', ',                              \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                              \n" +
                "                    ''),              \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                              \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',          \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS DESCRIPTION             \n" +
                "  \n" +
                "	FROM                            \n" +
                "		customer_packingslip_det cpd                            \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                             \n" +
                "	WHERE                            \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                       \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                       \n" +
                "    SELECT                                    \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                       \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                       \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                            \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                                \n" +
                "			(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                       \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                       \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                      \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                       \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice                      \n" +
                "		FROM customer_packingslip_det cpd                           \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                        \n" +
                "		AND cpd.isdeleted=0;                            \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                        \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                        \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,  \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice FROM tempTotalPrice LIMIT 1;       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(                                                          \n" +
                "	IN ppageIndex INT,                                                          \n" +
                "	IN precordPerPage INT,                                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                                          \n" +
                "	IN pWhereClause VARCHAR(16383),              	                          \n" +
                "    IN pFilterStatus LONGTEXT,                          \n" +
                "    IN pDueDate DATE,                          \n" +
                "    IN pAdditionalDays INT,                          \n" +
                "    IN pTermsAndAboveDays INT,                          \n" +
                "    IN pPoNumber VARCHAR(50),                          \n" +
                "    IN pIsExactSearchPO TINYINT,                          \n" +
                "    IN pMfgCodeIds LONGTEXT ,                        \n" +
                "    IN pPaymentTermsIds LONGTEXT ,                      \n" +
                "    IN pPartId INT,                    \n" +
                "    IN pTransType VARCHAR(5)                    \n" +
                "    -- IN pChequeNumber  VARCHAR(50)                          \n" +
                ")  \n" +
                "BEGIN                                                          \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                         \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                                         \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                                \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                         \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"                                             \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate,                       \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,                    \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,                          \n" +
                "        cp.invoiceNumber,cp.invoiceDate,                        \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,                    \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,                    \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'                       \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,                      \n" +
                "        cp.soNumber,cp.soDate,                                        \n" +
                "		cp.sorevision,                          \n" +
                "        cp.refSalesOrderID,                          \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,                           \n" +
                "        cp.refCustInvoiceID,                                        \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,                        \n" +
                "		 cp.status,                     \n" +
                "         cp.subStatus,                                      \n" +
                "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then ''                           \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'                           \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'                        \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'                     \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusValue,                          \n" +
                "		  cp.paymentStatus,                       \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,                \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,                        \n" +
                "		(case when cp.transType = 'C' then (-1 *(SELECT SUM(IFNULL(cpd.shipQty,0)*IFNULL(cpd.unitPrice,0)) + SUM(IFNULL(cpd.othercharges,0)) FROM customer_packingslip_det cpd WHERE cpd.refCustPackingSlipID=cp.id AND cpd.isdeleted=0))  \n" +
                "		when cp.transType='I' then (SELECT SUM(IFNULL(cpd.shipQty,0)*IFNULL(cpd.unitPrice,0)) + SUM(IFNULL(cpd.othercharges,0)) FROM customer_packingslip_det cpd WHERE cpd.refCustPackingSlipID=cp.id AND cpd.isdeleted=0)  \n" +
                "		End)  totalAmount,                                  \n" +
                "		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-18 AND gc.refTransID=cp.id AND gc.isdeleted=0) invoiceDocumentCount,                                        \n" +
                "		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-17 AND gc.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id) AND gc.isdeleted=0) packingslipDocumentCount,                                        \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,                                \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,                             \n" +
                "         cp.customerID,                        \n" +
                "         cp.createdBy as createdById,                        \n" +
                "		 get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,                \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,                                        \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,                                        \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,                                        \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,                                          \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                      \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,                          \n" +
                "		 DATE_ADD((cp.invoiceDate ),INTERVAL IFNULL((case when cp.termsId is Not NULL then cp.termsDays-1                                \n" +
                "													else 0 end),0) DAY) paymentDueDate,                             \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,                          \n" +
                "         cp.termsDays termDays,                          \n" +
                "         cp.freeOnBoardName,                        \n" +
                "         cp.isLocked,                        \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,                        \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,                        \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,                        \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,                        \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,                          \n" +
                "         packingSlip.id packingSlipId,                \n" +
                "         (select group_concat(paymentNumber)                \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd                 \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0                 \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,            \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,        \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,      \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms      \n" +
                "		 FROM customer_packingslip cp                           \n" +
                "         join  mfgcodemst m on m.id = cp.customerID                                  \n" +
                "         LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0          \n" +
                "		WHERE  cp.isDeleted=0                                        \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");                                                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN           \n" +
                "		IF pTransType = 'I' THEN          \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";                                                \n" +
                "        ELSE          \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";                                                \n" +
                "        END IF;              \n" +
                "	ELSE                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                          \n" +
                "	END IF;	                                                          \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                          \n" +
                "		SET pWhereClause = '1=1' ;                                                          \n" +
                "	END IF;	                          \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');                                                  \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                                                  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');                                                  \n" +
                "	END IF;                         \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN                      \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');                       \n" +
                "    END IF;                      \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN                                        \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');                                        \n" +
                "	# END IF;                            \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN                                        \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');                                        \n" +
                "	END IF;                             \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN                                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                                  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                                  \n" +
                "	END IF;                                \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN                                \n" +
                "		IF pIsExactSearchPO = 1 THEN                                \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'                                \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'                                \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'                                \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'                                \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"                                \n" +
                "						);                                \n" +
                "		ELSE                                \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'                                \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'                                \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'                                \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'                                \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"                                \n" +
                "						);                                \n" +
                "		END IF;                                \n" +
                "	END IF;                                \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;                          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                          \n" +
                "	ELSE	                                                          \n" +
                "		SET rowNumWhere = '';                                                          \n" +
                "	END IF;	                                                          \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                             \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);                                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                            \n" +
                "	EXECUTE query2;                                                            \n" +
                "	DEALLOCATE PREPARE query2;                                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,              \n" +
                "		 round((c.totalAmount),2) totalAmount,                              \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,                              \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) pendingAmount  from ( \",                           \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                            \n" +
                "	EXECUTE query1;                                                            \n" +
                "	DEALLOCATE PREPARE query1;                                                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (717,'1.00','V1',' Alter procedure Sproc_RetrieveCustomerInvoiceDetails-champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 717:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-02-2020  *********************************** */
                "DROP PROCEDURE IF  EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(                                                            \n" +
                "	IN ppageIndex INT,                                                            \n" +
                "	IN precordPerPage INT,                                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                                            \n" +
                "	IN pWhereClause VARCHAR(16383),              	                            \n" +
                "    IN pFilterStatus LONGTEXT,                            \n" +
                "    IN pDueDate DATE,                            \n" +
                "    IN pAdditionalDays INT,                            \n" +
                "    IN pTermsAndAboveDays INT,                            \n" +
                "    IN pPoNumber VARCHAR(50),                            \n" +
                "    IN pIsExactSearchPO TINYINT,                            \n" +
                "    IN pMfgCodeIds LONGTEXT ,                          \n" +
                "    IN pPaymentTermsIds LONGTEXT ,                        \n" +
                "    IN pPartId INT,                      \n" +
                "    IN pTransType VARCHAR(5)                      \n" +
                "    -- IN pChequeNumber  VARCHAR(50)                            \n" +
                ")  \n" +
                "BEGIN                                                            \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                            \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                           \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                                           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                           \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"                                               \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate,                         \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,                      \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,                            \n" +
                "        cp.invoiceNumber,cp.invoiceDate,                          \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,                      \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,                      \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'                         \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,                        \n" +
                "        cp.soNumber,cp.soDate,                                          \n" +
                "		cp.sorevision,                            \n" +
                "        cp.refSalesOrderID,                            \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,                             \n" +
                "        cp.refCustInvoiceID,                                          \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,                          \n" +
                "		 cp.status,                       \n" +
                "         cp.subStatus,                                        \n" +
                "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then ''                             \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'                             \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'                          \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'                       \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusValue,                            \n" +
                "		  cp.paymentStatus,                         \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,                  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,                          \n" +
                "		  cp.totalAmount,                                    \n" +
                "		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-18 AND gc.refTransID=cp.id AND gc.isdeleted=0) invoiceDocumentCount,                                          \n" +
                "		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-17 AND gc.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id) AND gc.isdeleted=0) packingslipDocumentCount,                                          \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,                                  \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,                               \n" +
                "         cp.customerID,                          \n" +
                "         cp.createdBy as createdById,                          \n" +
                "		 get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,                  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,                                          \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,                                          \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,                                          \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,                                            \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                        \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,                            \n" +
                "		 DATE_ADD((cp.invoiceDate ),INTERVAL IFNULL((case when cp.termsId is Not NULL then cp.termsDays-1                                  \n" +
                "													else 0 end),0) DAY) paymentDueDate,                               \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,                            \n" +
                "         cp.termsDays termDays,                            \n" +
                "         cp.freeOnBoardName,                          \n" +
                "         cp.isLocked,                          \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,                          \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,                          \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,                          \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,                          \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,                            \n" +
                "         packingSlip.id packingSlipId,                  \n" +
                "         (select group_concat(paymentNumber)                  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd                   \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0                   \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,              \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,          \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,        \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms        \n" +
                "		 FROM customer_packingslip cp                             \n" +
                "         join  mfgcodemst m on m.id = cp.customerID                                    \n" +
                "         LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0            \n" +
                "		WHERE  cp.isDeleted=0                                          \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");                                                            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN             \n" +
                "		IF pTransType = 'I' THEN            \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";                                                  \n" +
                "        ELSE            \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";                                                  \n" +
                "        END IF;                \n" +
                "	ELSE                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                            \n" +
                "	END IF;	                                                            \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                            \n" +
                "		SET pWhereClause = '1=1' ;                                                            \n" +
                "	END IF;	                            \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');                                                    \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');                                                    \n" +
                "	END IF;                           \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN                        \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');                         \n" +
                "    END IF;                        \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN                                          \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');                                          \n" +
                "	# END IF;                              \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN                                          \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');                                          \n" +
                "	END IF;                               \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN                                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                                    \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                                    \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN                                  \n" +
                "		IF pIsExactSearchPO = 1 THEN                                  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'                                  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'                                  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'                                  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'                                  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"                                  \n" +
                "						);                                  \n" +
                "		ELSE                                  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'                                  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'                                  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'                                  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'                                  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"                                  \n" +
                "						);                                  \n" +
                "		END IF;                                  \n" +
                "	END IF;                                  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;                            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                            \n" +
                "	ELSE	                                                            \n" +
                "		SET rowNumWhere = '';                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                               \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);                                                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                              \n" +
                "	EXECUTE query2;                                                              \n" +
                "	DEALLOCATE PREPARE query2;                                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                \n" +
                "		 round((c.totalAmount),2) totalAmount,                                \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,                                \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) pendingAmount  from ( \",                             \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                              \n" +
                "	EXECUTE query1;                                                              \n" +
                "	DEALLOCATE PREPARE query1;                                                          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-02-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (718,'1.00','V1','Sproc_RetrieveCustomerInvoiceDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 718:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-09-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_checkDelete_customer_packingslip_det;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip_det`(                    \n" +
                "	IN tableName VARCHAR(255),                    \n" +
                "	IN IDs LONGTEXT,                    \n" +
                "	IN deletedBy INT,                    \n" +
                "	IN entityID VARCHAR(255),                    \n" +
                "	IN refrenceIDs LONGTEXT,                    \n" +
                "	IN countList INT,              \n" +
                "    IN pRoleID INT              \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "DECLARE vRemoveAmt DECIMAL(16,8) default 0;    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslipdet;                   \n" +
                "	-- delete sales order master if reference ID is not null                \n" +
                "	-- refernece ID is equal to salesOrderDetID                \n" +
                "  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslipdet as                  \n" +
                "			(SELECT 0 cnt ,\"\" as msg)          \n" +
                "		');                                                                               \n" +
                "		PREPARE stmt FROM @SQL;                                                                                \n" +
                "		EXECUTE stmt;                                                                                \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN                                                                               \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslipdet t)=0 THEN                                                                              \n" +
                "			START TRANSACTION;        \n" +
                "				create temporary table temp_removeAmt     \n" +
                "				select cpd.refCustPackingSlipID as id , sum(extendedPrice) as removeAmt    \n" +
                "                from customer_packingslip_det cpd    \n" +
                "                where find_in_set(cpd.id,IDs)    \n" +
                "				and cpd.isDeleted = 0    \n" +
                "                group by cpd.refCustPackingSlipID;    \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update shippedassembly set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',IDs,') and isDeleted=0');		                                                                                \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                                                \n" +
                "				EXECUTE stmt1;             \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update customer_packingslip cp join temp_removeAmt tmp on tmp.id = cp.id set cp.totalAmount = cp.totalAmount - tmp.removeAmt where cp.id IN  ( select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.id in (',IDs,') ) and cp.isDeleted=0');		                                                                                \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                                                \n" +
                "				EXECUTE stmt1;       \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and isDeleted=0');		                                                                                \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                                                \n" +
                "				EXECUTE stmt1;           \n" +
                "  \n" +
                "				SET @SQL2 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in ( select refSalesorderDetid from customer_packingslip_det where  id in (',IDs,') ) and sd.isDeleted=0');      \n" +
                "                PREPARE stmt1 FROM @SQL2;                                                                                \n" +
                "				EXECUTE stmt1;           \n" +
                "  \n" +
                "				SELECT * FROM tempcustomerPackingslipdet WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                        \n" +
                "			COMMIT;                                                                                 \n" +
                "			ELSE                                                                                \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslipdet t;                                                                               \n" +
                "			END IF;                      \n" +
                "		ELSE              \n" +
                "  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg                      \n" +
                "				FROM tempcustomerPackingslipdet t1                      \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name                      \n" +
                "				WHERE IFNULL(t1.cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                      \n" +
                "				ORDER BY t2.display_page_name;                                    \n" +
                "		END IF;                 \n" +
                "		DROP TABLE tempcustomerPackingslipdet;                                                                                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (719,'1.00','V1','Sproc_checkDelete_customer_packingslip_det - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 719:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS` ;  \n" +
                "CREATE PROCEDURE `Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS`(    \n" +
                "	IN pCurrShipUMID VARCHAR(20),    \n" +
                "	IN pCurrRefsidid INT,    \n" +
                "	IN pCurrShippedQty INT,    \n" +
                "	IN pCurrDBAvaiShippedQty INT,    \n" +
                "	IN pToBinIDOfEmptyBin INT,    \n" +
                "	IN pTransTypeForUMID VARCHAR(100),    \n" +
                "	IN pActionPerformedForUMIDZeroOut VARCHAR(100),    \n" +
                "	IN pActionPerformedForUMIDConsumed VARCHAR(100),    \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100),    \n" +
                "	IN pCpsdRefSalesorderDetid INT,    \n" +
                "	IN pPartID INT,    \n" +
                "	IN pUomIDOfAssy INT,    \n" +
                "	IN pUserID VARCHAR(50),              \n" +
                "	IN pUserRoleID VARCHAR(50)         \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	-- declare lv_tot_stock_umid INT DEFAULT 0;    \n" +
                "	DECLARE lv_allocated_stock_umid INT DEFAULT 0;    \n" +
                "	DECLARE lv_actual_ship_qty INT DEFAULT 0;    \n" +
                "	DECLARE lv_actionPerformed VARCHAR(100);    \n" +
                "	DECLARE lv_currUMIDDBAvaiPkgQty INT;     \n" +
                "	DECLARE lv_currUMIDDBAvaiBinID INT;    \n" +
                "	DECLARE lv_currUMIDDBAvaiUOM INT;     \n" +
                "	DECLARE lv_userInputDetail TEXT;     \n" +
                "	DECLARE lv_currUMIDDBAvaiUOMUnitName VARCHAR(100);    \n" +
                "	DECLARE lv_actualShipQty_converted_consumeunit DECIMAL(18,8);    \n" +
                "	DECLARE lv_UMIDPkgQtyAfterProcess_converted_pkgunit DECIMAL(18,8);    \n" +
                "	DECLARE lv_adjustPkgQty INT ;    \n" +
                "	DECLARE lv_converted_adjustPkgUnit DECIMAL(18,8);    \n" +
                "  \n" +
                "	/* actual_ship_qty = curr ship from UI - db available ship qty */    \n" +
                "	SET lv_actual_ship_qty = IFNULL(pCurrShippedQty,0) - IFNULL(pCurrDBAvaiShippedQty,0);    \n" +
                "  \n" +
                "	/* tot_stock_umid */     \n" +
                "	SELECT pkgQty, binID, uom  INTO lv_currUMIDDBAvaiPkgQty, lv_currUMIDDBAvaiBinID, lv_currUMIDDBAvaiUOM    \n" +
                "        FROM temp_db_comp_sid_stock_list    \n" +
                "        WHERE id = pCurrRefsidid ;    \n" +
                "  \n" +
                "	/* allocated_stock_umid */    \n" +
                "	SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))) INTO lv_allocated_stock_umid    \n" +
                "	FROM kit_allocation     \n" +
                "	WHERE uid = pCurrShipUMID     \n" +
                "	AND STATUS IN ('A','R')            \n" +
                "	GROUP BY uid ;    \n" +
                "  \n" +
                "	/* get uom unit name */    \n" +
                "	SELECT unitName INTO lv_currUMIDDBAvaiUOMUnitName    \n" +
                "	FROM uoms     \n" +
                "	WHERE id = lv_currUMIDDBAvaiUOM     \n" +
                "	AND isDeleted = 0 ;    \n" +
                "  \n" +
                "  \n" +
                "	SET lv_actualShipQty_converted_consumeunit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , lv_actual_ship_qty);    \n" +
                "	SET lv_UMIDPkgQtyAfterProcess_converted_pkgunit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , (lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty));    \n" +
                "  \n" +
                "  \n" +
                "	/* zero out case >> if ship qty same as UMID pkg available qty */    \n" +
                "        IF(lv_actual_ship_qty = lv_currUMIDDBAvaiPkgQty) THEN    \n" +
                "  \n" +
                "		SET lv_actionPerformed = pActionPerformedForUMIDZeroOut ;    \n" +
                "		SET lv_userInputDetail = CONCAT('{\"remainingPkgQty\": 0,    \n" +
                "				\"remainingPkgUnit\": 0,    \n" +
                "				\"remainingAdjustPkgQty\": 0,    \n" +
                "				\"remainingAdjustPkgUnit\": 0,    \n" +
                "				\"remainingAdjustPkgQtyDiff\": 0,    \n" +
                "				\"remainingAdjustPkgUnitDiff\": 0,    \n" +
                "				\"unitName\": \"',lv_currUMIDDBAvaiUOMUnitName,'\",\"uom\": ',lv_currUMIDDBAvaiUOM,',\"refKitAllocationID\": null,    \n" +
                "				\"consumeQty\":',lv_actual_ship_qty,',\"consumeUnit\": ',lv_actualShipQty_converted_consumeunit,',    \n" +
                "				\"scrapExpiredQty\": 0,\"scrapExpiredUnit\": 0}') ;    \n" +
                "  \n" +
                "		UPDATE 	component_sid_stock                           \n" +
                "		SET 	binID = pToBinIDOfEmptyBin,    \n" +
                "			isinStk = 0,    \n" +
                "			updatedBy = pUserID,     \n" +
                "			updateByRoleId = pUserRoleID  ,    \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                           \n" +
                "		WHERE 	id = pCurrRefsidid AND isDeleted = 0;    \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF(lv_actual_ship_qty > 0) THEN    \n" +
                "		/* consume UMID stock case >> so we do minus UMID pkgqty in component_sid_stock table  */    \n" +
                "		SET lv_actionPerformed = pActionPerformedForUMIDConsumed ;    \n" +
                "		SET lv_userInputDetail = CONCAT('{\"remainingPkgQty\": ',(lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty),',    \n" +
                "				\"remainingPkgUnit\": ',lv_UMIDPkgQtyAfterProcess_converted_pkgunit,',\"remainingAdjustPkgQty\": null,    \n" +
                "				\"remainingAdjustPkgUnit\": null,\"remainingAdjustPkgQtyDiff\": 0,\"remainingAdjustPkgUnitDiff\": 0,    \n" +
                "				\"unitName\": \"',lv_currUMIDDBAvaiUOMUnitName,'\",\"uom\": ',lv_currUMIDDBAvaiUOM,',\"refKitAllocationID\": null,    \n" +
                "				\"consumeQty\": ',lv_actual_ship_qty,',\"consumeUnit\": ',lv_actualShipQty_converted_consumeunit,',    \n" +
                "				\"scrapExpiredQty\": 0,\"scrapExpiredUnit\": 0}') ;    \n" +
                "	ELSEIF(lv_actual_ship_qty < 0) THEN    \n" +
                "		/* UMID stock adjustment case >> so we do plus UMID pkgqty in component_sid_stock table  */    \n" +
                "  \n" +
                "		SET lv_adjustPkgQty = (0 - lv_actual_ship_qty);    \n" +
                "		SET lv_converted_adjustPkgUnit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , lv_adjustPkgQty);    \n" +
                "		SET lv_actionPerformed = pActionPerformedForUMIDAdjust;    \n" +
                "		SET lv_userInputDetail = CONCAT('{\"remainingPkgQty\": ',lv_currUMIDDBAvaiPkgQty,',    \n" +
                "				\"remainingPkgUnit\": ',fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , lv_currUMIDDBAvaiPkgQty),',    \n" +
                "				\"remainingAdjustPkgQty\": ',lv_adjustPkgQty,',    \n" +
                "				\"remainingAdjustPkgUnit\": ',lv_converted_adjustPkgUnit,',    \n" +
                "				\"remainingAdjustPkgQtyDiff\": ',lv_adjustPkgQty,',    \n" +
                "				\"remainingAdjustPkgUnitDiff\": ',lv_converted_adjustPkgUnit,',    \n" +
                "				\"unitName\": \"',lv_currUMIDDBAvaiUOMUnitName,'\",\"uom\": ',lv_currUMIDDBAvaiUOM,',\"refKitAllocationID\": null,    \n" +
                "				\"consumeQty\": ',lv_actual_ship_qty,',\"consumeUnit\": ',lv_actualShipQty_converted_consumeunit,',    \n" +
                "				\"scrapExpiredQty\": 0,\"scrapExpiredUnit\": 0}') ;    \n" +
                "	END IF;        \n" +
                "  \n" +
                "  \n" +
                "	IF(lv_actual_ship_qty > (lv_currUMIDDBAvaiPkgQty - lv_allocated_stock_umid)) THEN    \n" +
                "		/* (available from allocated UMID stock in kit) */    \n" +
                "  \n" +
                "		/* deallocate from other kit */    \n" +
                "		UPDATE kit_allocation               \n" +
                "		SET `status` = 'D',      \n" +
                "			remark = 'Auto deallocated from customer packing slip.',          \n" +
                "			updatedBy = pUserID,              \n" +
                "			updateByRoleId = pUserRoleID  ,            \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "		WHERE uid = pCurrShipUMID              \n" +
                "		AND STATUS = 'A';    \n" +
                "  \n" +
                "        END IF;    \n" +
                "  \n" +
                "  \n" +
                "        /* when UMID is with empty bin request come to increase umid stock then    \n" +
                "		update UMID bin > set fromBinID from empty bin */    \n" +
                "        /* if(lv_actionPerformed != pActionPerformedForUMIDZeroOut and lv_currUMIDDBAvaiPkgQty=0     \n" +
                "			and lv_currUMIDDBAvaiBinID=pToBinIDOfEmptyBin and ((lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty) > 0)) then    \n" +
                "  \n" +
                "		UPDATE 	component_sid_stock             \n" +
                "		SET 	binID = fromBin            \n" +
                "		WHERE  	id = pCurrRefsidid            \n" +
                "		AND 	isDeleted = 0;    \n" +
                "  \n" +
                "	end if; */    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* update UNID pkgqty and unit */    \n" +
                "        UPDATE component_sid_stock             \n" +
                "	SET pkgQty = pkgQty - lv_actual_ship_qty,	                  \n" +
                "		pkgUnit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , (pkgUnit - lv_actual_ship_qty)),    \n" +
                "		updatedBy = pUserID,              \n" +
                "		updateByRoleId = pUserRoleID  ,            \n" +
                "		updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "	WHERE  id = pCurrRefsidid            \n" +
                "	AND isDeleted = 0;    \n" +
                "  \n" +
                "  \n" +
                "        -- Insert log in UMID history page                                                      \n" +
                "	INSERT INTO component_sid_stock_history                     \n" +
                "		(                    \n" +
                "			transType, 			actionPerformed, 	refUIDId, 	uid, 			refcompid,                     \n" +
                "			binID, 				  \n" +
                "			warehouseID, 			deptWHID, 		orgQty, 	orgUnit,                     \n" +
                "			currentQty, 			currentUnit, 		uom, 		                    \n" +
                "			scrappedQty, 			scrappedUnit,                     \n" +
                "			consumedQty,			consumedUnit,		    \n" +
                "			adjustQty,			adjustUnit,                   \n" +
                "			refTrans, 			refTransID, 		reason, 	                    \n" +
                "			refSalesOrderDetID,		assyID,                    \n" +
                "			woTransID,			userInputDetail,	isDeleted, 	createdBy, 		createdAt, 		                    \n" +
                "			updatedBy, 			updatedAt ,		createByRoleId,	updateByRoleId  \n" +
                "		)                    \n" +
                "	SELECT                    \n" +
                "			pTransTypeForUMID,		lv_actionPerformed,	id,		uid,			refcompid,                    \n" +
                "			CASE WHEN (lv_actionPerformed = pActionPerformedForUMIDZeroOut) THEN pToBinIDOfEmptyBin ELSE binID END,				  \n" +
                "			warehouseID,			deptWHID,		orgQty,		orgPkgUnit,                    \n" +
                "			(lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty),	lv_UMIDPkgQtyAfterProcess_converted_pkgunit,		uom,		                    \n" +
                "			NULL,		                NULL,			    \n" +
                "			lv_actual_ship_qty,		lv_actualShipQty_converted_consumeunit,	    \n" +
                "			lv_adjustPkgQty,		lv_converted_adjustPkgUnit,    \n" +
                "			NULL,				NULL,			'Auto entry from customer packing slip',		                    \n" +
                "			pCpsdRefSalesorderDetid,        pPartID,			              \n" +
                "			NULL,   			lv_userInputDetail,	0,		pUserID,	fun_DatetimetoUTCDateTime(),                    \n" +
                "			pUserID,			fun_DatetimetoUTCDateTime(), pUserRoleID, pUserRoleID  \n" +
                "	FROM temp_db_comp_sid_stock_list     \n" +
                "	WHERE id = pCurrRefsidid ;       \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (720,'1.00','V1',' Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 720:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveAssemblyWorkorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveAssemblyWorkorderList`(        \n" +
                "	pWorkorderNumber VARCHAR(255)        \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	SELECT 		vusr.woID,  \n" +
                "			vusr.woNumber,  \n" +
                "			vusr.partID,       \n" +
                "			c.mfgcodeID mfgCodeId,  \n" +
                "			c.id mfgId,   \n" +
                "			c.mfgPN,  \n" +
                "			c.PIDCode,  \n" +
                "			c.isCPN,  \n" +
                "			vusr.availableQty,  \n" +
                "			vusr.binID,  \n" +
                "			vusr.totalUMIDCount,   \n" +
                "			vusr.totalUMIDCountAfterShipped,    \n" +
                "			vusr.binName,  \n" +
                "			wo.proposedUmidQty AS woUMIDProposedQty      \n" +
                "	FROM 		vu_customer_packing_slip_qty vusr      \n" +
                "	LEFT JOIN 	workorder wo ON wo.`woID` = vusr.`woID`  \n" +
                "	INNER JOIN	component c ON c.id = vusr.partID  \n" +
                "	WHERE 		(  \n" +
                "				CASE  \n" +
                "					WHEN pWorkorderNumber IS NOT NULL THEN  \n" +
                "						vusr.woNumber = pWorkorderNumber  \n" +
                "					ELSE  \n" +
                "						1 = 1  \n" +
                "				END  \n" +
                "			);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-02-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (721,'1.00','V1','Changes of UMID Management - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 721:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2020  *********************************** */
                "UPDATE page_detail  \n" +
                "SET orderBy=\"99.0000000\",  \n" +
                "menuRoute=\"tasklist\"  \n" +
                "WHERE pageRoute=\"app.task.tasklist\";  \n" +
                /* **************************** Add Script Version -> 15-02-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ValidateWorkorderAndPublish` ;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(                                                        \n" +
                "	IN pwoID INT,                                                        \n" +
                "	IN pwoStatus INT,                                                         \n" +
                "	IN pupdatedBy INT                                                        \n" +
                "    )  \n" +
                "BEGIN                                                        \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/                                                        \n" +
                "  \n" +
                "	-- create temporary table for error                                                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;                                                         \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error                                                        \n" +
                "	(                                                        \n" +
                "	     errorText VARCHAR(5000)                                                        \n" +
                "	);                                                        \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/                                                        \n" +
                "	block1: BEGIN                                                        \n" +
                "		DECLARE current_opnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "		DECLARE current_previousopnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;                                                        \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;                                                        \n" +
                "		DECLARE current_isTrackBySerialNo INT DEFAULT 0;                                                     \n" +
                "		DECLARE current_isLoopOperation INT DEFAULT 0;                                                       \n" +
                "		DECLARE current_refLoopWOOPNumber DECIMAL(7,3) DEFAULT 0;                                                       \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;                       \n" +
                "		DECLARE current_refLoopWOOPID INT DEFAULT 0;                                                       \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(7,3) DEFAULT 0;                                               \n" +
                "		DECLARE last_opnumber DECIMAL(7,3) DEFAULT 0;                                               \n" +
                "		DECLARE next_opnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;                                                        \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;                                                        \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;                                                    \n" +
                "		DECLARE IsInValidIsTrackBySerialNo INT DEFAULT 0;                                                    \n" +
                "		DECLARE IsInValidIsLoopOperation INT DEFAULT 0;                                                        \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;                                                        \n" +
                "  \n" +
                "		DECLARE current_opname VARCHAR(500) DEFAULT '';                                                        \n" +
                "		DECLARE current_woopid VARCHAR(500) DEFAULT '';                          \n" +
                "  \n" +
                "		DECLARE opName_Max_ForMissingPartQtyOP VARCHAR(500) DEFAULT '';                                                        \n" +
                "		DECLARE opNumber_Max_ForMissingPartQtyOP DECIMAL(7,3) DEFAULT 0;                                                  \n" +
                "		DECLARE opNumber_Max_ForReworkOP DECIMAL(7,3) DEFAULT 0;                     \n" +
                "  \n" +
                "		DECLARE anyPreProgPartInWOAssyBOM INT DEFAULT 0;                      \n" +
                "		DECLARE anyPartPreProgRequireWOOP INT DEFAULT 0;                                                            \n" +
                "  \n" +
                "		DECLARE assyCleanType VARCHAR(5) DEFAULT '';            \n" +
                "		DECLARE opCleanType VARCHAR(5)  DEFAULT 'NA';            \n" +
                "		DECLARE noCleanOp VARCHAR(10000) DEFAULT NULL;            \n" +
                "		DECLARE waterSolubleOp VARCHAR(10000) DEFAULT NULL;            \n" +
                "		DECLARE notApplicableOp VARCHAR(10000) DEFAULT NULL;            \n" +
                "		DECLARE bothOp VARCHAR(10000) DEFAULT NULL;            \n" +
                "  \n" +
                "		DECLARE err TINYINT  DEFAULT 0;            \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table                                                        \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                        \n" +
                "  \n" +
                "		-- 2 declare the cursor operation                                                        \n" +
                "		DECLARE operation_cursor CURSOR FOR                                                        \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;                                                        \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows                                                        \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                        \n" +
                "  \n" +
                "		-- get first operation work order                                                        \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo                                                         \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;                                                        \n" +
                "  \n" +
                "		-- get last operation work order                                                        \n" +
                "		SELECT MAX(opnumber) INTO last_opnumber FROM workorder_operation wo                                                         \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;                                              \n" +
                "  \n" +
                "		-- get inspection process type id                                                        \n" +
                "		SET InspectionOperationTypeID := 0;                                                        \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory                                                         \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;                                                        \n" +
                "  \n" +
                "		-- get Assembly Clean Type             \n" +
                "		SELECT CASE WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'BOTH'             \n" +
                "					WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'            \n" +
                "					WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'            \n" +
                "					WHEN comst.isFluxNotApplicable = 1 THEN 'NA'            \n" +
                "                    ELSE ''            \n" +
                "               END INTO assyCleanType            \n" +
                "        FROM component comst            \n" +
                "        WHERE EXISTS (SELECT 1 FROM workorder wo WHERE wo.woID = pwoID AND isDeleted = 0 AND wo.partID = comst.id );            \n" +
                "		-- open the cursor                                                        \n" +
                "		OPEN operation_cursor;                                                        \n" +
                "  \n" +
                "		 -- start looping                                                        \n" +
                "		operation_loop: LOOP                                                        \n" +
                "  \n" +
                "			-- read the name from next row into the variables                                                         \n" +
                "			FETCH operation_cursor INTO current_opnumber;                                                        \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,                                                         \n" +
                "			-- close the cursor and exit the loop if it has.                                                        \n" +
                "			IF exit_loop THEN                                                        \n" +
                "				 CLOSE operation_cursor;                                                        \n" +
                "				 LEAVE operation_loop;                                                        \n" +
                "			END IF;                      \n" +
                "  \n" +
                "			SET current_opname:= '';                                                        \n" +
                "			SET current_woopid:= 0;                                                        \n" +
                "			SET current_operationTypeID:= 0;                                                        \n" +
                "			SET current_qtyControl:= 0;                                                       \n" +
                "			SET current_isTrackBySerialNo:= 0;                                                  \n" +
                "			SET current_isLoopOperation:= 0;                                                    \n" +
                "			SET current_refLoopWOOPNumber:= 0;                                                            \n" +
                "			SET current_isIssueQty:= 0;                         \n" +
                "			SET current_refLoopWOOPID:= 0;			                      \n" +
                "  \n" +
                "			-- get opname and woopid from operation number                                                        \n" +
                "			SELECT curWOOP.opname, curWOOP.woopid, curWOOP.operationTypeID, curWOOP.qtyControl,                                 \n" +
                "			curWOOP.isIssueQty, curWOOP.isTrackBySerialNo, curWOOP.isLoopOperation,                                 \n" +
                "			(SELECT woop.opNumber FROM workorder_operation woop WHERE woop.woopid=curWOOP.refLoopWOOPID) AS refLoopWOOPNumber ,                      \n" +
                "			  curWOOP.refLoopWOOPID                             \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl,                                \n" +
                "			current_isIssueQty, current_isTrackBySerialNo, current_isLoopOperation,                            \n" +
                "			current_refLoopWOOPNumber ,                      \n" +
                "			current_refLoopWOOPID                                 \n" +
                "			FROM workorder_operation curWOOP WHERE curWOOP.opnumber = current_opnumber                                                         \n" +
                "			AND curWOOP.deletedat IS NULL AND curWOOP.woid=pwoid LIMIT 1;                                                        \n" +
                "			-- get previous operation of rework operation                                                        \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo                                                         \n" +
                "				WHERE opnumber < current_opnumber                                                         \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;                                                        \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/                                                        \n" +
                "			IF first_opnumber=current_opnumber THEN                                                        \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as first operation of work order.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "			END IF;				                                                        \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/                                                        \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/                                                        \n" +
                "			IF last_opnumber=current_opnumber THEN                                                        \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as last operation of work order.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "			END IF;				                                                        \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/                                                        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/                                                        \n" +
                "			SET IsInspectionProcess:=0;                                                        \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN                                                        \n" +
                "				SET IsInspectionProcess := 1;                                                        \n" +
                "			END IF;                                                        \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN                                                        \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is rework operation, it cannot be inspection process.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "			END IF;	                                                        \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/                                                        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/                                                        \n" +
                "			SET IsInValidReworkOperation:=0;                                                        \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN                                                        \n" +
                "				SET IsInValidReworkOperation := 1;                                                        \n" +
                "			END IF;                                                        \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN                                                        \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is rework operation, it must have manufacturer and issue qty set as true.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "			END IF;	                                                        \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/                                                        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - is track by serial # operation validation for mfg qty ****************************************************/                                                        \n" +
                "			SET IsInValidIsTrackBySerialNo:=0;                                                        \n" +
                "  \n" +
                "			IF ((current_IsTrackBySerialNo = 1) AND (current_qtyControl = 0)) THEN                                                        \n" +
                "				SET IsInValidIsTrackBySerialNo := 1;                                                        \n" +
                "			END IF;                                                        \n" +
                "  \n" +
                "			IF IsInValidIsTrackBySerialNo  > 0 THEN                                                        \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is track by serial# operation, it must have manufacturer qty set as true.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "			END IF;	                                                        \n" +
                "			/**************************************** end - is track by serial # operation validation for mfg qty ****************************************************/                                                        \n" +
                "  \n" +
                "			/**************************************** start - loop operation validation for mfg qty, sequence operation ****************************************************/                                                        \n" +
                "			SET IsInValidIsLoopOperation:=0;                                   \n" +
                "			IF (current_isLoopOperation = 1) THEN                                                         \n" +
                "				SET next_opnumber:= 0;                                                        \n" +
                "				-- get next operation of inspection operation                                                        \n" +
                "				SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo                                                         \n" +
                "					WHERE opnumber > current_opnumber                                                         \n" +
                "					AND wo.woid=pwoid AND wo.deletedat IS NULL;                                             \n" +
                "  \n" +
                "				IF(current_qtyControl = 0) THEN                                \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, it must have manufacturer qty set as true.');                                                         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "				-- if next operation is rework than not allow                               \n" +
                "				ELSEIF(next_opnumber > 0 AND                               \n" +
                "					(SELECT COUNT(1) FROM workorder_operation                                 \n" +
                "						WHERE deletedat IS NULL                                \n" +
                "							AND woID=pwoID                              \n" +
                "							AND opNumber = next_opnumber                                 \n" +
                "							AND isRework=1) > 0) THEN                              \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, next operation cannot be rework operation.');                                                         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                          		                              \n" +
                "				-- if found previous operation than check operation is inspection process or not                                                        \n" +
                "				ELSEIF(current_refLoopWOOPNumber > 0 AND                               \n" +
                "					(SELECT COUNT(1) FROM workorder_operation                                 \n" +
                "						WHERE deletedat IS NULL                                \n" +
                "							AND woID=pwoID                              \n" +
                "							AND opNumber <> current_refLoopWOOPNumber                                 \n" +
                "							AND opNumber <> current_opnumber                                 \n" +
                "							AND opNumber BETWEEN current_refLoopWOOPNumber AND current_opnumber) > 0) THEN                                \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, There should be no operation between loop operation', '(', FORMAT(current_opnumber,3), ') ',' and loop to operation', '(', FORMAT(current_refLoopWOOPNumber,3), ').');                                                         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "				-- check refLoopWOOPID added or not 			                      \n" +
                "				ELSEIF(current_refLoopWOOPID IS NULL OR current_refLoopWOOPID = 0                       \n" +
                "					OR (SELECT COUNT(1) FROM  workorder_operation WHERE deletedat IS NULL                      \n" +
                "						AND woOPID = current_refLoopWOOPID) = 0                       \n" +
                "					) THEN	                      \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, please add loop to operation for same.');                                                         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                         \n" +
                "				END IF;                                                          \n" +
                "			END IF;                                                                                \n" +
                "			/**************************************** end - loop operation validation for mfg qty, sequence operation  ****************************************************/                                                        \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/                                                        \n" +
                "			SET found_in_paralleloperation:= 0;                                                        \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO found_in_paralleloperation FROM workorder_operation_cluster                                                         \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (                                                        \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1                                                        \n" +
                "			) AND woopid=current_woopid;                                                        \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN                                                        \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "			END IF;                                                        \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/                                                        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/                                                        \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not                                                        \n" +
                "			IF current_previousopnumber > 0 THEN                                                        \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;                                                        \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process                                                        \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation                                                        \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)                                                        \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;                                                         \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process                                                         \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN                                                        \n" +
                "					IF(current_isLoopOperation = 1) THEN                                \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation.');                                                         \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "					ELSE                                \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');                                                         \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "					END IF;                                \n" +
                "				END IF;                                                        \n" +
                "			ELSE                                                        \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "			END IF;                                                        \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/                                                                    \n" +
                "		END LOOP operation_loop;                        \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/                                                        \n" +
                "		block2: BEGIN                                                        \n" +
                "			-- 1 get list of inspection operation in workorder                                                        \n" +
                "			DECLARE c_opnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "			DECLARE c_checkopnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "			DECLARE c_reworkopnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "			DECLARE temp_opname VARCHAR(500) DEFAULT 0;                                                        \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;                                                        \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;                                                        \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;                                                        \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;                                                        \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;                                                        \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;                                                        \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table                                                        \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;                                                        \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation                                                        \n" +
                "			DECLARE inspection_cursor CURSOR FOR                                                        \n" +
                "			SELECT opnumber FROM workorder_operation                                                        \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID                                                        \n" +
                "			AND woid=pwoid AND deletedat IS NULL;                                                         \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows                                                        \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;                                                        \n" +
                "  \n" +
                "			-- open the cursor                                                        \n" +
                "			OPEN inspection_cursor;                                                        \n" +
                "  \n" +
                "			 -- start looping                                                        \n" +
                "			inspection_loop: LOOP                                                        \n" +
                "  \n" +
                "				-- read the name from next row into the variables                                                         \n" +
                "				FETCH inspection_cursor INTO c_opnumber;                                                        \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,                                                         \n" +
                "				-- close the cursor and exit the loop if it has.                                                        \n" +
                "				IF exit_inspection_loop THEN                                                        \n" +
                "					 CLOSE inspection_cursor;                                                        \n" +
                "					 LEAVE inspection_loop;                                                        \n" +
                "				END IF;                                                        \n" +
                "  \n" +
                "				SET temp_opname:= '';                                                        \n" +
                "				SET temp_woopid:= 0;                                                        \n" +
                "				SET temp_isRework:= 0;                                                        \n" +
                "				SET temp_qtyControl:= 0;                                                        \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl                                                        \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl                                                        \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber                                                         \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;                                                        \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/                                                        \n" +
                "				SET IsReworkInspectionOperation:= 0;                                                        \n" +
                "				IF (temp_isRework = 1) THEN                                                        \n" +
                "					SET IsReworkInspectionOperation := 1;                                                        \n" +
                "				END IF;                                                        \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN                                                        \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it cannot be rework operation.');                                                         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "				END IF;	                                                        \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/                                                        \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/                                                        \n" +
                "				SET IsInValidInspectionOperation:= 0;                                                        \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN                                                        \n" +
                "					SET IsInValidInspectionOperation := 1;                                                        \n" +
                "				END IF;                                                        \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN                                                        \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it must have manufacturer qty set as true.');                                                         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "				END IF;	                                                        \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/                                                        \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/                                                        \n" +
                "				SET IsParallelClusterOperation:= 0;			                                                        \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation                                                         \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (                                                        \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL                                                         \n" +
                "				 			AND clusterid IN (                                                        \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL                                                         \n" +
                "								AND woid=pwoid AND isparelleloperation=1                                                        \n" +
                "				 	)                                                        \n" +
                "				);                                                        \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/                                                        \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/                                                        \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster                                                        \n" +
                "				IF (IsParallelClusterOperation = 0) THEN                                                        \n" +
                "					SET c_checkopnumber:= 0;                                                        \n" +
                "					-- get next operation of inspection operation                                                        \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo                                                         \n" +
                "						WHERE opnumber > c_opnumber                                                         \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;                                                        \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not                                                        \n" +
                "					IF c_checkopnumber > 0 THEN                                                        \n" +
                "						SET c_reworkopnumber:= 0;                                                        \n" +
                "						-- set checked operation number if found as rework process                                                        \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation                                                        \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1                                                        \n" +
                "						AND woid=pwoid AND deletedat IS NULL;                                                         \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process                                                         \n" +
                "						IF c_reworkopnumber = 0 THEN                                                        \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');                                                         \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "						END IF;                                                        \n" +
                "					ELSE                                                        \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');                                                         \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                                        \n" +
                "					END IF;	                                                        \n" +
                "				END IF;                                                        \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/                                                        \n" +
                "			END LOOP inspection_loop;                                                        \n" +
                "		END block2;                                                        \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/                                                        \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/                                                        \n" +
                "		block3: BEGIN                                                        \n" +
                "			-- 1 get list of cluster in workorder                                                        \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;                                                        \n" +
                "			DECLARE current_minopnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "			DECLARE current_maxopnumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "  \n" +
                "			DECLARE temp_clustername VARCHAR(100) DEFAULT '';                                                        \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;                                                        \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;                                                        \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;                                                        \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(7,3) DEFAULT 0;                                                        \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;                                                        \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;                                                        \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;                                                        \n" +
                "			DECLARE next_operation_to_cluster_is_loopoperation INT DEFAULT 0;                                                        \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table                                                        \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;                                                        \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster                                                        \n" +
                "			DECLARE cluster_cursor CURSOR FOR                                                        \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster                                                         \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;                                                        \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows                                                        \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;                                                        \n" +
                "  \n" +
                "			-- open the cursor                                                        \n" +
                "			OPEN cluster_cursor;                                                        \n" +
                "  \n" +
                "			 -- start looping                                                        \n" +
                "			cluster_loop: LOOP                                                        \n" +
                "  \n" +
                "				-- read the name from next row into the variables                                                         \n" +
                "				FETCH cluster_cursor INTO current_clusterid;                                                        \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,                                                         \n" +
                "				-- close the cursor and exit the loop if it has.                                                        \n" +
                "				IF exit_cluster_loop THEN                                                        \n" +
                "					 CLOSE cluster_cursor;                                                        \n" +
                "					 LEAVE cluster_loop;                                                        \n" +
                "				END IF;                                                        \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN	                                                        \n" +
                "					SET temp_clustername:= '';                                                        \n" +
                "					SET temp_isParellelOperation:= 0;                                                        \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;                                                        \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN                                                        \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/                                                        \n" +
                "						SET IsReworkParallelCluster:=0;                                                        \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation                                                         \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (                                                        \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid                                                        \n" +
                "						);                                                        \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN                                                        \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');                                                        \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "						END IF;                                                        \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/                                                        \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/                                                        \n" +
                "						SET IsPregrorammingParallelCluster:=0;                                                        \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation                                                         \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (                                                        \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid                                                        \n" +
                "						);                                                        \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN                                                        \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');                                                        \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "						END IF;                                                        \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/                                                        \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/                                                        \n" +
                "						SET found_mismatchoperations:= 0;                                                        \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (                                                        \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid                                                        \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;                                                        \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN                                                        \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');                                                        \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "						ELSE                                                        \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/                                                        \n" +
                "							IF (found_mismatchoperations = 1) THEN                                                        \n" +
                "								SET found_operationTypeID:= 0;                                                        \n" +
                "								SET cluster_maxOpNumber:= 0;                                                        \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (                                                        \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid                                                        \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;                                                        \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN                                                        \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;                                         \n" +
                "									SET next_operation_to_cluster_is_loopoperation:= 0;                                 \n" +
                "  \n" +
                "									SELECT isRework,isLoopOperation INTO next_operation_to_cluster_is_rework,next_operation_to_cluster_is_loopoperation FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND                                                         \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND                                                        \n" +
                "									opNumber > cluster_maxOpNumber);                                                        \n" +
                "  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_loopoperation = 1) THEN                                                        \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> cannot be loop operation, beacuse it is inspection parallel cluster.');                                                        \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "									END IF;                                \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN                                 \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');                                                        \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "									END IF;                                                        \n" +
                "								END IF;                                                        \n" +
                "							END IF;		                                                        \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/                                                        \n" +
                "						END IF;	                                                        \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/						                                                        \n" +
                "					END IF;                                                        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/                                                        \n" +
                "					SET current_minopnumber:= 0;                                                        \n" +
                "					SET current_maxopnumber:= 0;                                                        \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation                                                        \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN                                                         \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)                                                        \n" +
                "					AND woid = pwoid AND deletedat IS NULL;                                                        \n" +
                "					SET found_invalidsequenceoperation:= 0;                                                        \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid                                                        \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE                                                         \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)                                                        \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN                                                        \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)                                                        \n" +
                "					ORDER BY opnumber;	                                                        \n" +
                "					IF found_invalidsequenceoperation > 0 THEN                                                        \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');                                                         \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                                        \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/                                                        \n" +
                "				END IF;                                                        \n" +
                "			END LOOP cluster_loop;                                                        \n" +
                "		END block3;                                                        \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/                                                        \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/                                                        \n" +
                "		block4: BEGIN                                                        \n" +
                "  \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;                                                        \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;                                                \n" +
                "			DECLARE found_invalid_move_to_stock_operation INT DEFAULT 0;                                              \n" +
                "			DECLARE found_invalid_is_track_by_serialno_operation INT DEFAULT 0;                                                \n" +
                "			DECLARE found_invalid_allow_final_serialno_operation INT DEFAULT 0;                                                \n" +
                "			DECLARE found_invalid_is_loop_operation INT DEFAULT 0;                                                    \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;                                                        \n" +
                "			DECLARE move_to_stock_operation_count INT DEFAULT 0;                                                       \n" +
                "			DECLARE allow_final_serialno_operation_count INT DEFAULT 0;                                                     \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;                                                        \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;                                                      \n" +
                "			DECLARE invalid_wo_count INT DEFAULT 0;                                                        \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;                                                      \n" +
                "			DECLARE move_to_stock_op_type_id INT DEFAULT 0;                                                    \n" +
                "			DECLARE move_to_stock_is_rework INT DEFAULT 0;                                                     \n" +
                "			DECLARE move_to_stock_is_preprogramming INT DEFAULT 0;                                               \n" +
                "			DECLARE move_to_stock_op_name VARCHAR(500);                                               \n" +
                "			DECLARE move_to_stock_op_number DECIMAL(7,3) DEFAULT 0;                                           \n" +
                "			DECLARE found_assembly_part_not_added INT DEFAULT 0;                                          \n" +
                "			DECLARE found_assembly_equipment_not_added INT DEFAULT 0;                                                   \n" +
                "  \n" +
                "			DECLARE allow_final_serialno_operation_op_name VARCHAR(500);                                               \n" +
                "			DECLARE allow_final_serialno_operation_op_number DECIMAL(7,3) DEFAULT 0;                                 \n" +
                "			DECLARE allow_final_serialno_operation_is_rework INT DEFAULT 0;                                                     \n" +
                "			DECLARE allow_final_serialno_operation_preprogramming INT DEFAULT 0;                                                    \n" +
                "			DECLARE allow_final_serialno_operation_qtyControl INT DEFAULT 0;                                \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/                                                        \n" +
                "			SET found_invalid_rework_operation:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;                                                        \n" +
                "			IF found_invalid_rework_operation > 0 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');                                                        \n" +
                "			END IF;                                                        \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/                                                        \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/                                                        \n" +
                "			SET found_invalid_is_loop_operation:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_loop_operation FROM workorder_operation WHERE isrework = 0 AND isLoopOperation=1 AND woid=pwoid AND deletedat IS NULL;                                                        \n" +
                "			IF found_invalid_is_loop_operation > 0 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Loop Operation must have rework operation set as true.');                                                        \n" +
                "			END IF;                                                        \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/                                                        \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/                                                        \n" +
                "			SET found_invalid_inspection_operation:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO found_invalid_inspection_operation FROM workorder_operation WHERE                                                        \n" +
                "			operationTypeID = InspectionOperationTypeID AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;                                                        \n" +
                "			IF found_invalid_inspection_operation > 0 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');                                                        \n" +
                "			END IF;                                                        \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/                                                        \n" +
                "  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/                                                        \n" +
                "			SET found_invalid_is_track_by_serialno_operation:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_track_by_serialno_operation FROM workorder_operation WHERE                                                        \n" +
                "			isTrackBySerialNo = 1 AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;                                                        \n" +
                "			IF found_invalid_is_track_by_serialno_operation > 0 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Track By Serial Operation must have manufacturer qty set as true');                                                        \n" +
                "			END IF;                                                        \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/                                                        \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/                                                        \n" +
                "			SET check_workorder_isrevised:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;                                                        \n" +
                "			IF check_workorder_isrevised > 0 THEN                                                        \n" +
                "				SET first_OpTypeID:=0;                                                   \n" +
                "  \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;                                                        \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN                                                         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');                                                        \n" +
                "				END IF;                                                        \n" +
                "			END IF;                                                        \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/                                                        \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/                                                        \n" +
                "			SET preprogramming_operation_count:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;                                                        \n" +
                "			IF preprogramming_operation_count > 1 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one pre-programming operation !!');                                                        \n" +
                "			END IF;                                                        \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/                                                        \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/                                                        \n" +
                "			-- set flag 1 for standard count ok                                                        \n" +
                "			-- SET certificate_standard_count:= 0;                                                        \n" +
                "			-- SELECT COUNT(1) INTO certificate_standard_count FROM certificate_standards                                                         \n" +
                "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND                                                         \n" +
                "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);                                                        \n" +
                "			-- IF certificate_standard_count > 0 THEN                                                        \n" +
                "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');                                                        \n" +
                "			-- END IF;                                                        \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/                                                        \n" +
                "  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/                                                        \n" +
                "			-- set flag 1 for standard count ok                                                        \n" +
                "			SET invalid_wo_count:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO invalid_wo_count FROM workorder_operation                                                         \n" +
                "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;                                                        \n" +
                "			IF invalid_wo_count > 0 THEN                                                        \n" +
                "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published.');                \n" +
                "			END IF;                                                        \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/                                                        \n" +
                "  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/                                                        \n" +
                "			SET move_to_stock_operation_count:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO move_to_stock_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isMoveToStock=1;                                                        \n" +
                "			IF move_to_stock_operation_count > 1 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one move to stock operation.');                                                        \n" +
                "			ELSE	                                            \n" +
                "				IF move_to_stock_operation_count = 0 THEN                                            \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must have at least one <b>move to stock</b> operation, It should be last operation of work order.');                                                        \n" +
                "				ELSE                                            \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/                                                        \n" +
                "					SELECT opNumber, opName, operationTypeID, isRework, isPreProgrammingComponent INTO move_to_stock_op_number, move_to_stock_op_name, move_to_stock_op_type_id, move_to_stock_is_rework, move_to_stock_is_preprogramming FROM workorder_operation WHERE isMoveToStock = 1 AND woid=pwoid AND deletedat IS NULL;                                            \n" +
                "					IF(last_opnumber <> move_to_stock_op_number) THEN                                            \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It must be last operation of work order.');                                                        \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                            \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/                                                        \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/                                                        \n" +
                "					IF(move_to_stock_op_type_id = InspectionOperationTypeID) THEN                                             \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be inspection process.');                                                                    \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                            \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/                                              \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/                                                        \n" +
                "					IF(move_to_stock_is_rework = 1) THEN                                                      \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be rework operation.');                                                        \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                            \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/                                                        \n" +
                "  \n" +
                "					IF(move_to_stock_is_preprogramming = 1) THEN                                                         \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be pre-programming operation.');                                                        \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                            \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/                                                       \n" +
                "				END IF;                                               \n" +
                "			END IF;                                                        \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/                                                        \n" +
                "  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/                                                        \n" +
                "			SET allow_final_serialno_operation_count:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO allow_final_serialno_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isAllowFinalSerialMapping=1;                                                        \n" +
                "			IF allow_final_serialno_operation_count > 1 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one allow mapping serial# operation.');                \n" +
                "			ELSE	                                \n" +
                "				IF allow_final_serialno_operation_count <> 0 THEN                                \n" +
                "					SELECT opNumber, opName, isRework, isPreProgrammingComponent, qtyControl                                 \n" +
                "					INTO allow_final_serialno_operation_op_number, allow_final_serialno_operation_op_name, allow_final_serialno_operation_is_rework, allow_final_serialno_operation_preprogramming,allow_final_serialno_operation_qtyControl FROM workorder_operation WHERE isAllowFinalSerialMapping = 1 AND woid=pwoid AND deletedat IS NULL;                                            \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/                                                        \n" +
                "					IF(allow_final_serialno_operation_is_rework = 1) THEN                                                      \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be rework operation.');                                                        \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                            \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/                                                        \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/                                                        \n" +
                "					IF(allow_final_serialno_operation_qtyControl = 0) THEN                                                      \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It must have manufacturer qty set as true.');                                                        \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                            \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/                                                        \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/                                                       \n" +
                "					IF(allow_final_serialno_operation_preprogramming = 1) THEN                                                         \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be pre-programming operation.');                                                        \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);                                                        \n" +
                "					END IF;                                            \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/                       				                                \n" +
                "				END IF;                                \n" +
                "			END IF;                                                        \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/                                                        \n" +
                "  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/                                                        \n" +
                "			SET found_invalid_move_to_stock_operation:= 0;                                                        \n" +
                "			SELECT COUNT(1) INTO found_invalid_move_to_stock_operation FROM workorder_operation WHERE isMoveToStock = 1 AND qtycontrol=0 AND woid=pwoid AND deletedat IS NULL;                                                        \n" +
                "			IF found_invalid_move_to_stock_operation > 0 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Move To Stock Operation must have manufacturer qty set as true.');                                                        \n" +
                "			END IF;                                                        \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/                                                        \n" +
                "  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/                                                        \n" +
                "			-- SET found_assembly_part_not_added:= 0;                                             \n" +
                "			-- SELECT COUNT(1) INTO found_assembly_part_not_added FROM rfq_lineitems_alternatepart                                           \n" +
                "			--   WHERE rfqLineItemsID                                           \n" +
                "			-- 	IN (SELECT id FROM rfq_lineitems                                           \n" +
                "			-- 		WHERE partID                                           \n" +
                "			-- 		IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)                                          \n" +
                "			-- 		AND deletedAt IS NULL)                                          \n" +
                "			-- 			AND mountingTypeID                                           \n" +
                "			-- 			IN (                                          \n" +
                "			-- 				SELECT rfqMountingTypeID                                          \n" +
                "			-- 				FROM component_logicalgroup_detail cld                                           \n" +
                "			-- 				WHERE cld.deletedAt IS NULL AND cld.logicalgroupID                                           \n" +
                "			-- 				IN (                                          \n" +
                "			-- 					SELECT id                                           \n" +
                "			-- 					FROM component_logicalgroup                                           \n" +
                "			-- 					WHERE `name`                                           \n" +
                "			-- 					IN ('Supplies','Materials','Tools')                                          \n" +
                "			-- 					AND deletedAt IS NULL                                          \n" +
                "			-- 				)                                          \n" +
                "			-- 			)                                           \n" +
                "			-- 			AND deletedAt IS NULL                                           \n" +
                "			-- 			AND mfgPNID                                           \n" +
                "			-- NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);                                          \n" +
                "  \n" +
                "			SET found_assembly_part_not_added:= 0; 			                                        \n" +
                "			SELECT COUNT(1) INTO found_assembly_part_not_added FROM component_drivetools                                           \n" +
                "			WHERE refComponentID IN (SELECT id FROM component WHERE id                                           \n" +
                "							IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart                                           \n" +
                "								WHERE rfqLineItemsID IN (SELECT id FROM rfq_lineitems WHERE partID                                           \n" +
                "												IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)                                        \n" +
                "												AND mountingTypeID  IN (SELECT rfqMountingTypeID                                          \n" +
                "														FROM component_logicalgroup_detail cld                                           \n" +
                "														WHERE cld.deletedAt IS NULL AND cld.logicalgroupID                                           \n" +
                "														IN (SELECT id                                           \n" +
                "														FROM component_logicalgroup                                           \n" +
                "														WHERE `name` IN ('Supplies','Materials','Tools')                                          \n" +
                "														AND deletedAt IS NULL)                                          \n" +
                "													)) AND deletedAt IS NULL                                           \n" +
                "							) AND deletedAt IS NULL AND driverToolRequired=1                                          \n" +
                "						) AND deletedAt IS NULL AND componentID                                           \n" +
                "			NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);                                         \n" +
                "  \n" +
                "			IF found_assembly_part_not_added > 0 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Parts</b> from assembly which belongs to <b>Supplies, Materials & Tools</b>.');                                                        \n" +
                "			END IF;                                           \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/                                           \n" +
                "  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/                                                        \n" +
                "			SET found_assembly_equipment_not_added:= 0;                                            \n" +
                "			SELECT COUNT(1) INTO found_assembly_equipment_not_added                                           \n" +
                "			FROM component_functionaltestingequipment                                           \n" +
                "			WHERE refComponentID                                           \n" +
                "			IN (SELECT id FROM component WHERE id                                           \n" +
                "				IN (                                           \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart                                           \n" +
                "					WHERE rfqLineItemsID                                           \n" +
                "					IN (                                          \n" +
                "						SELECT id FROM rfq_lineitems WHERE partID                                           \n" +
                "						IN(                                          \n" +
                "							SELECT partID FROM workorder WHERE woID=pwoID                                          \n" +
                "						)                                          \n" +
                "					) AND deletedAt IS NULL                                           \n" +
                "				) AND deletedAt IS NULL AND functionalTestingRequired=1                                          \n" +
                "			) AND deletedAt IS NULL  AND eqpID                                           \n" +
                "			NOT IN (SELECT eqpID FROM workorder_operation_equipment WHERE woID=pwoID AND deletedAt IS NULL);                                          \n" +
                "  \n" +
                "			IF found_assembly_equipment_not_added > 0 THEN                                                        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Equipments</b> from assembly which needs <b>Functional Testing Equipments</b>.');                                                        \n" +
                "			END IF;                                          \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/                                                        \n" +
                "  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the                     \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/                    \n" +
                "			SELECT opNumber, opName INTO opNumber_Max_ForMissingPartQtyOP , opName_Max_ForMissingPartQtyOP                    \n" +
                "			FROM workorder_operation woop                                                        \n" +
                "			WHERE woop.woID = pwoid                    \n" +
                "			AND woop.`isAllowMissingPartQty` =  1                    \n" +
                "			AND woop.deletedAt IS NULL                  \n" +
                "			ORDER BY opNumber DESC LIMIT 1;                     \n" +
                "  \n" +
                "			SELECT MAX(opNumber) INTO opNumber_Max_ForReworkOP                     \n" +
                "			FROM workorder_operation woop                                                        \n" +
                "			WHERE woop.woID = pwoid                    \n" +
                "			AND woop.`isRework` =  1                    \n" +
                "			AND woop.deletedAt IS NULL ;                     \n" +
                "  \n" +
                "			IF(opNumber_Max_ForMissingPartQtyOP IS NOT NULL AND opNumber_Max_ForMissingPartQtyOP > 0 AND                     \n" +
                "				(opNumber_Max_ForReworkOP IS NULL OR opNumber_Max_ForReworkOP = 0                     \n" +
                "					OR (opNumber_Max_ForMissingPartQtyOP > opNumber_Max_ForReworkOP))) THEN                    \n" +
                "  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(opNumber_Max_ForMissingPartQtyOP,3), ') ' ,opName_Max_ForMissingPartQtyOP, '</b> operation is \"Allow Operation To Continue With Possibility Of Missing Parts Placements\".                     \n" +
                "							So after this operation, any one operation must be rework.');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                      \n" +
                "			END IF;	                    \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the                     \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/	                    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/	                    \n" +
                "			SELECT COUNT(1) INTO anyPreProgPartInWOAssyBOM FROM rfq_lineitems                     \n" +
                "			WHERE partID = (SELECT partID FROM workorder WHERE woID= pwoID AND deletedAt IS NULL)                    \n" +
                "			AND programingStatus = 1                    \n" +
                "			AND deletedAt IS NULL LIMIT 1 ;                    \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO anyPartPreProgRequireWOOP FROM workorder_operation                    \n" +
                "			WHERE woID = pwoID                    \n" +
                "			AND isPreProgrammingComponent = 1                    \n" +
                "			AND deletedAt IS NULL LIMIT 1;                    \n" +
                "  \n" +
                "  \n" +
                "			IF(anyPreProgPartInWOAssyBOM > 0 AND anyPartPreProgRequireWOOP = 0) THEN                    \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work order must have at least one part pre-programming operation.');                     \n" +
                "			END IF;	   		                    \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/			                    \n" +
                "  \n" +
                "  \n" +
                "		END block4;                                                        \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/                                                        \n" +
                "  \n" +
                "		/**************************************** start - case 5 - About required MFR# on serial Mapping validations ****************************************************/                                                        \n" +
                "		block5: BEGIN                            \n" +
                "        	DECLARE v_IsAllowSerialMappingWOId INT;              \n" +
                "            DECLARE v_IsAllowSerialMappingOperationName VARCHAR(500);              \n" +
                "			DECLARE v_CountMFRSR INT;                \n" +
                "  \n" +
                "			SELECT woOPID, fun_getOperationNameByWOOPID(woOPID) INTO v_IsAllowSerialMappingWOId              \n" +
                "            ,v_IsAllowSerialMappingOperationName FROM               \n" +
                "            workorder_operation WHERE woID = pwoID AND isDeleted = 0 AND isAllowFinalSerialMapping = 1;               \n" +
                "			IF(v_IsAllowSerialMappingWOId IS NOT NULL)                \n" +
                "			THEN                \n" +
                "				SELECT COUNT(1) INTO v_CountMFRSR FROM workorder_serialmst WHERE woID = pwoID AND serialType = 1 AND isDeleted = 0;                \n" +
                "                IF v_CountMFRSR = 0 THEN                \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ((CONCAT('Work Order must require MFR SR# because operation <b>',v_IsAllowSerialMappingOperationName,'</b> is configured as Serial# Mapping operation in work order.')));	                \n" +
                "				END IF;                 \n" +
                "			END IF;                                              \n" +
                "		END block5;                \n" +
                "		/**************************************** end - case 5 - About required MFR# on serial Mapping validations ****************************************************/                                                        \n" +
                "  \n" +
                "		/**************************************** start - Check cleaning type of operation againse Assembly cleaning type ****************************************************/                                                        \n" +
                "        block6: BEGIN            \n" +
                "			SELECT	GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean and Water-Soluble </li>') ELSE NULL END)  SEPARATOR '' )  bothCnt,            \n" +
                "					GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean </li>') ELSE NULL END)  SEPARATOR '' )  cleanCnt,            \n" +
                "					GROUP_CONCAT((CASE WHEN isWaterSoluble = 1 AND isNoClean =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Water-Soluble</li>' )ELSE NULL END) SEPARATOR '') waterCnt,             \n" +
                "                    GROUP_CONCAT((CASE WHEN isFluxNotApplicable = 1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Not Applicable</li>' )ELSE NULL END) SEPARATOR '') naCnt          \n" +
                "			INTO  bothOp, noCleanOp, waterSolubleOp  , notApplicableOp          \n" +
                "			FROM workorder_operation WHERE woID = pwoID AND isDeleted = 0;            \n" +
                "			IF assyCleanType = '' THEN      \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly flux type from part master.<br/>');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);               			      \n" +
                "			ELSEIF assyCleanType = 'NA' AND  ( noCleanOp IS NOT NULL OR waterSolubleOp IS NOT NULL) THEN                                                        \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly as No-Clean or Water-Soluble or Remove following operation from work order to validate.<br/>','<ul>',IFNULL(noCleanOp,''),IFNULL(waterSolubleOp,''),'</ul>');                                                         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                     \n" +
                "			ELSEIF	assyCleanType = 'NC' THEN            \n" +
                "				SET err = 0;            \n" +
                "				SET @stmt_op = 'Assembly configured as No-Clean.<br/><ul>';            \n" +
                "				IF  noCleanOp IS NULL THEN -- OR opWaterSolubleCnt > 0 ) THEN			                                                        \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one No-Clean operation require to validate.</li>');                                             					            \n" +
                "					SET err = 1;            \n" +
                "				END IF;            \n" +
                "				IF  bothOp IS NOT NULL THEN            \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');            \n" +
                "					SET err = 1;            \n" +
                "				END IF;          \n" +
                "				IF waterSolubleOp IS NOT NULL THEN            \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',waterSolubleOp,'</ul></li>');            \n" +
                "					SET err = 1;            \n" +
                "				END IF;            \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');            \n" +
                "				IF err > 0 THEN            \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                     \n" +
                "				END IF;                \n" +
                "			ELSEIF	assyCleanType = 'WS' THEN            \n" +
                "				SET err= 0 ;            \n" +
                "				SET @stmt_op = 'Assembly configured as Water-Soluble.<br/><ul>';            \n" +
                "				IF  noCleanOp IS NOT NULL THEN            \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',noCleanOp,'</ul></li>');            \n" +
                "					SET err = 1;            \n" +
                "				END IF;           \n" +
                "				IF  bothOp IS NOT NULL THEN            \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');            \n" +
                "					SET err = 1;            \n" +
                "				END IF;           \n" +
                "				IF waterSolubleOp IS NULL THEN            \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble operation require to validate.</li>');                                             					            \n" +
                "					SET err = 1;            \n" +
                "				END IF;            \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');            \n" +
                "				IF err > 0 THEN            \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                 \n" +
                "				END IF;                \n" +
                "			ELSEIF	assyCleanType = 'BOTH' THEN      \n" +
                "				-- Check Both Operation Available Then allow    \n" +
                "				-- Check NoClean and WaterSolubale Both Operation Allow            \n" +
                "				SET err= 0 ;       \n" +
                "				SET @stmt_op = 'Assembly configured as No-clean and Water-soluble.<br/><ul>';       \n" +
                "				IF  ((bothOp IS NULL) AND (noCleanOp IS NULL OR waterSolubleOp IS NULL)) THEN    \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble and No-clean operation or Both operation require to validate.</li>');                                             					            \n" +
                "					SET err = 1;        \n" +
                "				END IF;               \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');            \n" +
                "				IF err > 0 THEN            \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);                                 \n" +
                "				END IF;                \n" +
                "			END IF;            \n" +
                "        END block6;            \n" +
                "		/**************************************** end - first operation should not be rework type ****************************************************/                                                        \n" +
                "  \n" +
                "  \n" +
                "		SELECT errorText FROM temp_operation_error;                                                        \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/                                                        \n" +
                "		IF (SELECT COUNT(1) FROM temp_operation_error) = 0 THEN                                                        \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,                                                        \n" +
                "			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoid;                                                        \n" +
                "		END IF;                                                        \n" +
                "	END block1;                                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-02-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (722,'1.00','V1','Task List - Menu sequence changes and Resolved opNumber length error'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 722:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(                                                                                                                            \n" +
                "	IN pPageIndex INT,                                                                                                                                      \n" +
                "	IN pRecordPerPage INT,                                                                                                                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                             \n" +
                "	IN pRefSalesOrderDetID INT,                                                              \n" +
                "	IN pLineId LONGTEXT,                                                                                                                          \n" +
                "	IN pPartId INT,                                                                                                                \n" +
                "	IN pKitQty INT,                                                                                                  \n" +
                "	IN pPackagingAlias BOOLEAN,                                                                                            \n" +
                "	IN pFunctionalType VARCHAR(1000),                                                                                            \n" +
                "	IN pMountingType VARCHAR(1000),                                                                                                                              \n" +
                "	IN pCartType VARCHAR(1000),                                                                                                                              \n" +
                "	IN pWarehouse VARCHAR(1000),                                      \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,                    \n" +
                "	IN pCustomerId INT                                                                                            \n" +
                ")  \n" +
                "BEGIN                                                                                                                \n" +
                "	DECLARE pOffset INT;                                                                                                                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                    \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                                                                                                          \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                                                                                            \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                                                                                            \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                                                      \n" +
                "	SET SESSION group_concat_max_len = 500000;                                                                                                                \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                                                                                            \n" +
                "  \n" +
                "	IF (pLineId IS NOT NULL) THEN                                                                                                            \n" +
                "		SET pWhereLineId = CONCAT(\" AND a.ConsolidatedLineItemIDs = '\",pLineId,\"'\");                                                                                                            \n" +
                "	ELSE                                                                                                             \n" +
                "		SET pWhereLineId = ' AND 1=1';                                                                                                            \n" +
                "	END IF;                                                                                   \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                                                                    \n" +
                "	ELSE                                                                                                                    \n" +
                "		SET pOrderBy = \"ORDER BY lineId ASC\";                                                                                                                    \n" +
                "	END IF;                                                                                                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN                                                                                                                                                          \n" +
                "		SET pWhereClause = ' 1=1';                                                                                                             \n" +
                "	END IF;	                                                                                             \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                                                                                                   \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                                                                                                  \n" +
                "	END IF;                                                                                            \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                                                                                                   \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                                                                                                  \n" +
                "	END IF;                                                                                             \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN                      \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId                     \n" +
                "		FROM kit_allocation ka                                \n" +
                "		INNER JOIN component_sid_stock css ON css.id = ka.refUIDId                        \n" +
                "		INNER JOIN  binmst bm  ON css.binid = bm.id                     \n" +
                "		INNER JOIN   warehousemst wm ON wm.ID = bm.WarehouseID                      \n" +
                "		WHERE   ka.refSalesOrderDetID = pRefSalesOrderDetID AND                     \n" +
                "				ka.status = 'A' AND                     \n" +
                "                css.isdeleted = 0 AND                     \n" +
                "             	(CASE WHEN ( pWarehouse IS NOT NULL AND pWarehouse != '') THEN FIND_IN_SET( wm.ID ,pWarehouse) ELSE                            \n" +
                "							FIND_IN_SET(IFNULL(wm.cartMfr,'-1'), pCartType) END );                        \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                                                                                            \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND rfqLineItemsId in (', vCartLineId, ') ');                                                                                                  \n" +
                "		END IF;                                                                                            \n" +
                "	END IF;                                                                                                                         \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                                                            \n" +
                "	ELSE	                                                                                                                                                            \n" +
                "		SET rowNumWhere = '';                                                                                                                                                            \n" +
                "	END IF;                                                                                                           \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN                                      \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');                                      \n" +
                "	END IF;                                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;                                                              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS                                                              \n" +
                "	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;                                                     \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('                   \n" +
                "		SELECT	*                \n" +
                "		FROM	(                \n" +
                "				SELECT 	c.id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,		                    \n" +
                "					rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,                    \n" +
                "					custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,       	                \n" +
                "					restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,                    \n" +
                "					restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,                    \n" +
                "					isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,                    \n" +
                "					notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,                                \n" +
                "					qpa,		 	consolidatedQPA,		dnpQPA,                    \n" +
                "					uomID, 			unitName,    			isInstall,				c.connecterTypeID, 		                    \n" +
                "					parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,                    \n" +
                "					mfgPN,    		mfgPNIdsWithPackaging, 		numOfPosition, 				requireQty,    			requirePins,                     \n" +
                "					allocatedQty,		c.allocatedUnit,		consumeUnits,    			consumeQty,			consumePin,			                \n" +
                "					allocatedPins,		scrapedPins,           \n" +
                "					/*SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IFNULL(d.availableStock, 0)),0)) availableStock,          \n" +
                "					SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IFNULL(d.availableStock, 0)) availableStockInPin,*/               \n" +
                "					(                    \n" +
                "						CASE                    \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0                    \n" +
                "							ELSE                     \n" +
                "								CASE                    \n" +
                "									WHEN c.connecterTypeID = -2 THEN                    \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) END                  \n" +
                "									ELSE                    \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + consumeUnits)) END                  \n" +
                "								END                    \n" +
                "						END                    \n" +
                "					) shortagePerBuild,                    \n" +
                "					(                    \n" +
                "						CASE                    \n" +
                "							WHEN uomMismatchedStep = 0 OR isNotRequiredKitAllocation = 1 THEN 0                    \n" +
                "							ELSE                    \n" +
                "								CASE                    \n" +
                "									WHEN c.connecterTypeID = - 2 THEN                    \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) < 0) THEN 0           \n" +
                "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)))) END                  \n" +
                "									ELSE                    \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0           \n" +
                "											ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END                  \n" +
                "								END                 \n" +
                "						END                    \n" +
                "					) shortagePerBuildWithAvailable                  \n" +
                "				FROM	(                    \n" +
                "					SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,		                    \n" +
                "							a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,                    \n" +
                "							a.custPNID,		                    \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,                    \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,                    \n" +
                "							1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,                    \n" +
                "							a.restrictCPNUseInBOMStep,                     \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,                    \n" +
                "							(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,                    \n" +
                "							a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,                    \n" +
                "							a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,                                \n" +
                "							IFNULL(a.kitQPAWithDNP, 0) qpa,	IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,	IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,                    \n" +
                "							a.uomID, 			fun_getUnitNameByID(a.uomID) unitName,                    \n" +
                "							a.isInstall,			a.connecterTypeID, 		                    \n" +
                "							a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,                         \n" +
                "							a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,                    \n" +
                "							',fun_getKitConsolidateLineMFGPNWithPackaging(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',          \n" +
                "							',fun_getKitMFRPNIdsWithPackaging(pRefSalesOrderDetID),',                    \n" +
                "							a.numOfPosition,                 \n" +
                "							(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') END) requireQty,                    \n" +
                "							(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.kitQPAWithDNP, 0) * ', pKitQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,                     \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,			IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,                    \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,			IFNULL(b.allocatedPins,	0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,  \n" +
                "							IFNULL(b.scrapedPins, 0) scrapedPins          \n" +
                "					FROM 		kit_allocation_consolidate_Line_detail a                    \n" +
                "					INNER JOIN 	(                     \n" +
                "								SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,                    \n" +
                "										SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,                    \n" +
                "										SUM(b.ConsumeQty) consumeQty,		SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin, 	  \n" +
                "										SUM(b.scrapedPins) scrapedPins                    \n" +
                "								FROM 		temp_Kit_Consolidate_Detail a                     \n" +
                "								LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)                    \n" +
                "								GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs                    \n" +
                "							) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs                    \n" +
                "					WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'                    \n" +
                "				) AS  c               \n" +
                "				LEFT JOIN	vu_deducted_allocation_available_Stock d ON  FIND_IN_SET(d.refcompid, mfgPNIdsWithPackaging)          \n" +
                "				GROUP BY 	c.id,			lineID,		refAssyId,				refSalesOrderDetId,		                    \n" +
                "						rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,                    \n" +
                "						custPNID,		custPN,    			custPIDCode,    			custIsCustom,       	                \n" +
                "						restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,                    \n" +
                "						restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,                    \n" +
                "						isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,                    \n" +
                "						notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,                                \n" +
                "						qpa,		 	consolidatedQPA,		dnpQPA,                    \n" +
                "						uomID, 			unitName,    			isInstall,				c.connecterTypeID, 		                    \n" +
                "						parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,                    \n" +
                "						mfgPN,    		mfgPNIdsWithPackaging,		numOfPosition, 				requireQty,    				          \n" +
                "						requirePins,           	allocatedQty,			c.allocatedUnit,			consumeUnits,    			          \n" +
                "						consumeQty,		allocatedPins,			scrapedPins            \n" +
                "		)                  \n" +
                "		AS  mainQuery          \n" +
                "		WHERE ', pWhereClause, ' ', vFilterWhereClause            \n" +
                "	);                                                                                                 \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;                                                                                                          \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);                                                                             	                                    \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                          \n" +
                "	EXECUTE mainQuery;                                                                                                                                                          \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                                                \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");                         \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                          \n" +
                "	EXECUTE query1;                                                                                                                                                          \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \");                                                                                                                                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                          \n" +
                "	EXECUTE query2;                                                                                                                                                          \n" +
                "	DEALLOCATE PREPARE query2;                                                                                                                     \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");                                       \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                                                          \n" +
                "	EXECUTE query3;                                                                                                                                                          \n" +
                "	DEALLOCATE PREPARE query3;         \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");                            \n" +
                "	PREPARE query4 FROM @SQLStatement4;                            \n" +
                "	EXECUTE query4;                            \n" +
                "	DEALLOCATE PREPARE query4;                                                                                                                                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(                              \n" +
                "	IN pPageIndex INT,                              \n" +
                "	IN pRecordPerPage INT,                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),                              \n" +
                "	IN pPartId INT,                              \n" +
                "	IN pRefSalesOrderDetailId INT,                              \n" +
                "	IN pLineId INT,                              \n" +
                "	IN pPackagingAlias BOOLEAN,                              \n" +
                "	IN pFunctionalType VARCHAR(1000),                              \n" +
                "	IN pMountingType VARCHAR(1000),                              \n" +
                "	IN pCartType VARCHAR(1000),                              \n" +
                "	IN pWarehouse VARCHAR(1000),                              \n" +
                "	IN pFeasibilityQty INT,                              \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,                              \n" +
                "	IN pCustomerId INT                                              \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "	DECLARE pOffset INT;                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                              \n" +
                "	DECLARE pAllocatedSharedCount INT;                              \n" +
                "	DECLARE pKitQty INT DEFAULT 0;                              \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                              \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                              \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                              \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                              \n" +
                "	SET SESSION group_concat_max_len = 500000;                              \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                              \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                              \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);                              \n" +
                "	ELSE                              \n" +
                "		SET pWhereLineId = ' AND 1 = 1';                              \n" +
                "	END IF;                              \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;                              \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                              \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                              \n" +
                "	END IF;                              \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                              \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                              \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN                              \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId                              \n" +
                "		FROM 		kit_allocation ka                              \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId                              \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id                              \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID                              \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId                              \n" +
                "		AND 		ka.assyID = pPartId                              \n" +
                "		AND 		ka.`status` = 'A'                              \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')                               \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)                               \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)                               \n" +
                "					END)                              \n" +
                "		AND 		css.isDeleted = 0 ;                              \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                              \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');                               \n" +
                "		END IF;                              \n" +
                "	END IF;                              \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                              \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;                              \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN                              \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);                              \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');                              \n" +
                "	ELSE                              \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)                              \n" +
                "		INTO 	pKitQty                              \n" +
                "		FROM 	kit_allocation_assy_detail                              \n" +
                "		WHERE 	partId = pPartId                              \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId                              \n" +
                "				AND isDeleted = 0;                              \n" +
                "	END IF;                  \n" +
                "	SET @vFromSQLQuery = CONCAT('                              \n" +
                "		SELECT	*                              \n" +
                "		FROM	(                              \n" +
                "				SELECT 		c.id, 			refSalesOrderDetID, 		partID, 			qpa, 			dnpQty, 				                    \n" +
                "						lineID,     		uomID,				unitName,			parttypeID,		partTypeName, 	                    \n" +
                "						c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,    		requirePinsBuild,	mfgPN,    		                    \n" +
                "						mfgPNIdsWithPackaging,	allocatedQty,			c.allocatedUnit,		allocatedPins,		scrapedPins,                              \n" +
                "						allocated_shared,	freeToShareAmongOtherKits,	allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	                    \n" +
                "						consumePin, 		isInstall,			isBuyDNPQty,			description,		custPNID,                     \n" +
                "						custPN,  		custPIDCode, 			custIsCustom,          		restrictCPNUseWithPermissionStep, 			                    \n" +
                "						restrictCPNUsePermanentlyStep, 				restrictCPNUseInBOMStep,        restrictPackagingUsePermanently, 		                    \n" +
                "						restrictPackagingUseWithpermission,          		cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                              \n" +
                "						isNotRequiredKitAllocation, 				isNotRequiredKitAllocationValue, 			notRequiredKitAllocationReason,                              \n" +
                "						refRfqLineitem, 	rfqLineItemsId, 		c.numOfPosition,		mfgPart, 		c.connecterTypeID,                \n" +
                "						(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,              \n" +
                "						(                              \n" +
                "							CASE                              \n" +
                "								WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0                              \n" +
                "								ELSE                               \n" +
                "									CASE                              \n" +
                "										WHEN c.connecterTypeID = - 2 THEN                              \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0                     \n" +
                "												ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END                            \n" +
                "										ELSE                              \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0                     \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) END                            \n" +
                "									END                              \n" +
                "							END                              \n" +
                "						) shortagePerBuild,                    \n" +
                "						(                              \n" +
                "							CASE                              \n" +
                "								WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0                              \n" +
                "								ELSE                              \n" +
                "									CASE                              \n" +
                "										WHEN c.connecterTypeID = -2 THEN                              \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0                     \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END                            \n" +
                "										ELSE                              \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0                     \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END                            \n" +
                "									END                          \n" +
                "							END                              \n" +
                "						) shortagePerBuildWithAvailable,                    \n" +
                "						SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,                    \n" +
                "						SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,              \n" +
                "						SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,              \n" +
                "						SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins              \n" +
                "				FROM	(                     \n" +
                "						SELECT 		id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty, 				                    \n" +
                "								lineID,     		uomID,					unitName,			parttypeID,		partTypeName, 	                    \n" +
                "								mountingtypeID,		mountingTypeName,                              \n" +
                "								(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,                              \n" +
                "								(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)                              \n" +
                "										THEN 0                              \n" +
                "										ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))                              \n" +
                "								END) requirePinsBuild,                         \n" +
                "								',fun_getKitConsolidateLineMFGPNWithPackaging(pPackagingAlias, pRefSalesOrderDetailId, pCustomerId),',                    \n" +
                "								',fun_getKitMFRPNIdsWithPackaging(pRefSalesOrderDetailId),',                        \n" +
                "								IFNULL(allocatedQty, 0) allocatedQty,		IFNULL(allocatedUnit, 0) allocatedUnit,		IFNULL(allocatedPins, 0) allocatedPins,			                    \n" +
                "								IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,                              \n" +
                "								(CASE WHEN uomMismatchedStep = 0                              \n" +
                "										THEN 0                              \n" +
                "										ELSE (CASE WHEN ((qpa * IFNULL(', pKitQty, ', 0)) - allocatedUnit) < 0                              \n" +
                "													THEN ABS((qpa * IFNULL(', pKitQty, ', 0)) - allocatedUnit)                              \n" +
                "													ELSE 0                              \n" +
                "											END)                              \n" +
                "								END) freeToShareAmongOtherKits,                              \n" +
                "								allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	consumePin, 	isInstall,		                    \n" +
                "								isBuyDNPQty,			description,		custPNID,                     \n" +
                "								custPN,  			custPIDCode, 		custIsCustom,                              \n" +
                "								restrictCPNUseWithPermissionStep, 			restrictCPNUsePermanentlyStep,                     \n" +
                "								restrictCPNUseInBOMStep,          			restrictPackagingUsePermanently, 		                    \n" +
                "								restrictPackagingUseWithpermission,                              \n" +
                "								cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                              \n" +
                "								isNotRequiredKitAllocation, 	isNotRequiredKitAllocationValue, 		notRequiredKitAllocationReason,                              \n" +
                "								refRfqLineitem, 		rfqLineItemsId, 	numOfPosition,		mfgPart, 	connecterTypeID                              \n" +
                "						FROM                              \n" +
                "						(                              \n" +
                "								SELECT 	k.id,	k.refSalesOrderDetID, 	k.partID,                              \n" +
                "									(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1                              \n" +
                "											THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))                              \n" +
                "											ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))                              \n" +
                "									END) AS qpa,                              \n" +
                "									IFNULL(k.dnpQty, 0) dnpQty,                              \n" +
                "									k.lineID,                              \n" +
                "									k.uomID,		FUN_GETUNITNAMEBYID(k.uomID) unitName,                              \n" +
                "									kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,                              \n" +
                "									kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,                              \n" +
                "									k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,                              \n" +
                "									k.numOfPosition,                              \n" +
                "									IFNULL(ka.allocatedQty,0) allocatedQty,			IFNULL(ka.allocatedUnit,0) allocatedUnit,                              \n" +
                "									IFNULL(ka.allocatedPins,0) allocatedPins,		IFNULL(ka.scrapedPins,0) scrapedPins,                              \n" +
                "									IFNULL(ka.allocated_shared, 0) allocated_shared,        IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,                              \n" +
                "									IFNULL(ka.consumeUnits, 0) consumeUnits, 		IFNULL(ka.consumeQty, 0) consumeQty, 		IFNULL(ka.consumePin, 0) consumePin,                             \n" +
                "									k.isInstall,		k.isBuyDNPQty,          	CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,                              \n" +
                "									k.restrictCPNUseWithPermissionStep,	                    \n" +
                "									k.restrictCPNUsePermanentlyStep,          		k.restrictCPNUseInBOMStep,				                    \n" +
                "									k.isNotRequiredKitAllocation,          			(CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,                              \n" +
                "									k.notRequiredKitAllocationReason,			k.custPNID, 					k.custPN,                              \n" +
                "									FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,		cpnCom.isCustom custIsCustom,			cpnCom.restrictPackagingUsePermanently,                              \n" +
                "									cpnCom.restrictPackagingUseWithpermission,		FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,                              \n" +
                "									FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,	kl.uomMismatchedStep,			kl.connecterTypeID,                              \n" +
                "									(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart                              \n" +
                "								FROM 	(                              \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,                              \n" +
                "												max(c.connecterTypeID) connecterTypeID,                              \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */                              \n" +
                "														then min(c.functionalCategoryID)                              \n" +
                "														else -1 /* MisMatched */                              \n" +
                "												end) parttypeID,                              \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */                              \n" +
                "															then  min(c.mountingTypeID)                                \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */                                \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))                               \n" +
                "														else  -1                               \n" +
                "												end) mountingTypeID,                              \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */                              \n" +
                "												group_concat(kal.description) AS description                             \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal                              \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1                              \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '                              \n" +
                "												AND 	kal.partID =  ', pPartId, '                              \n" +
                "												AND 	kal.isDeleted = 0                              \n" +
                "												AND		c.isDeleted = 0                              \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem                              \n" +
                "									) AS kl                              \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'                              \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0                              \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID                              \n" +
                "												AND kl.partID = ka.assyID                              \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID            \n" +
                "							where 		 k.isDeleted = 0                             \n" +
                "						) AS a                    \n" +
                "					) AS c                    \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))                   \n" +
                "					GROUP BY 	c.id, 			refSalesOrderDetID, 		partID, 			qpa, 			dnpQty, 				                    \n" +
                "							lineID,     		uomID,				unitName,			parttypeID,		partTypeName, 	                    \n" +
                "							c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,    		requirePinsBuild,	mfgPN,    		                    \n" +
                "							mfgPNIdsWithPackaging,	allocatedQty,			allocatedUnit,			allocatedPins,		scrapedPins,                              \n" +
                "							allocated_shared,	freeToShareAmongOtherKits,	allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	                    \n" +
                "							consumePin, 		isInstall,			isBuyDNPQty,			description,		custPNID,                     \n" +
                "							custPN,  		custPIDCode, 			custIsCustom,          		restrictCPNUseWithPermissionStep, 			                    \n" +
                "							restrictCPNUsePermanentlyStep, 				restrictCPNUseInBOMStep,        restrictPackagingUsePermanently, 		                    \n" +
                "							restrictPackagingUseWithpermission,          		cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                              \n" +
                "							isNotRequiredKitAllocation, 				isNotRequiredKitAllocationValue, 			notRequiredKitAllocationReason,                              \n" +
                "							refRfqLineitem, 	rfqLineItemsId, 		c.numOfPosition,		mfgPart, 		c.connecterTypeID                    \n" +
                "  \n" +
                "		) As mainData                                                                                                                              \n" +
                "		WHERE', pWhereClause,' ', vFilterWhereClause                              \n" +
                "	);                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;                              \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);                              \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                              \n" +
                "	EXECUTE mainQuery;                              \n" +
                "	DEALLOCATE PREPARE mainQuery;                              \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");                                               \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;               \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");                              \n" +
                "	PREPARE query3 FROM @SQLStatement3;                              \n" +
                "	EXECUTE query3;                              \n" +
                "	DEALLOCATE PREPARE query3;           \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");                              \n" +
                "	PREPARE query4 FROM @SQLStatement4;                              \n" +
                "	EXECUTE query4;                              \n" +
                "	DEALLOCATE PREPARE query4;                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;                              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-02-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetKitFeasibility` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitFeasibility`(                          \n" +
                "	pRefSalesOrderDetID INT,                             \n" +
                "	pAssyID INT,                          \n" +
                "	pIsConsolidated TINYINT,                          \n" +
                "	pInputQty DECIMAL(18,8)        \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	DECLARE vKitQty DECIMAL(18,8);        \n" +
                "	DECLARE vCustomerId INT;    \n" +
                "  \n" +
                "	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;           \n" +
                "	SELECT 		customerID     \n" +
                "	INTO		vCustomerId    \n" +
                "	FROM 		salesorderdet sd    \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID    \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;    \n" +
                "  \n" +
                "	IF(pIsConsolidated = 1) THEN        \n" +
                "		/* Get consolidated parts detail from consolidated table */        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS                                                  \n" +
                "		SELECT 		k.id, 			k.refsalesORderDetid,		k.consolidatedLineItemIDs,	        \n" +
                "				k.mountingTypeID, 	k.connecterTypeID,		k.consolidatedMfgPNIDs, 	        \n" +
                "				k.numOfPosition, 	k.kitQPAWithDNP,		k.uomMismatchedStep,		        \n" +
                "				k.isNotRequiredKitAllocation,				k.uomID,    \n" +
                "				k.custPNID      \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail k        \n" +
                "		WHERE 	k.refSalesOrderDetID = pRefSalesOrderDetID AND k.isAssembly = 0 AND k.isDeleted = 0;        \n" +
                "	ELSE        \n" +
                "		/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS              \n" +
                "		SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs, 	        \n" +
                "			kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,        \n" +
                "			(    \n" +
                "				CASE     \n" +
                "					WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN     \n" +
                "						(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))        \n" +
                "					ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))        \n" +
                "				END    \n" +
                "			) AS kitQPAWithDNP,         \n" +
                "			kl.uomMismatchedStep,        \n" +
                "			k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID        \n" +
                "		FROM 	(        \n" +
                "				SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem, 	        \n" +
                "						(    \n" +
                "							CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */        \n" +
                "									THEN  MIN(c.mountingTypeID)          \n" +
                "								WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */          \n" +
                "									THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))         \n" +
                "								ELSE  -1         \n" +
                "							END    \n" +
                "						) mountingTypeID,        \n" +
                "						IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,        \n" +
                "						GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,        \n" +
                "						MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */        \n" +
                "				FROM 		kit_allocation_lineitems_alternatepart kal        \n" +
                "				JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1        \n" +
                "				LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0          \n" +
                "				WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID        \n" +
                "							AND 	kal.partID =  pAssyID        \n" +
                "							AND 	kal.isDeleted = 0        \n" +
                "							AND	c.isDeleted = 0        \n" +
                "				GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem        \n" +
                "		) AS kl         \n" +
                "		INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem;        \n" +
                "	END IF;		        \n" +
                "  \n" +
                "	/* Get available and allocated stock for selected assembly*/        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS           \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,         \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,        \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,       \n" +
                "			IFNULL(ks.consumeUnits, 0) consumeUnits,        \n" +
                "			IFNULL(ks.consumePin,0) consumePin,   \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,        \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin        \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r          \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId         \n" +
                "					AND ks.assyID = (CASE WHEN pIsConsolidated = 1 THEN ks.assyID ELSE pAssyID END)        \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)            \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))         \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1                \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;      \n" +
                "  \n" +
                "	/* Create temporary table to get avilable and allocated stock against each line with shortage*/        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS            \n" +
                "	SELECT 		r.kitQPAWithDNP qpa,		  \n" +
                "			t.allocatedUnit,		t.allocatedPin,			  \n" +
                "			t.consumeUnits,			t.consumePin,  \n" +
                "			t.availableStock,		t.availableStockInPin,        \n" +
                "			r.mountingTypeID,   		(CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,        \n" +
                "			(    \n" +
                "				CASE     \n" +
                "					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN     \n" +
                "						(t.allocatedUnit/r.kitQPAWithDNP)         \n" +
                "					ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))         \n" +
                "				END    \n" +
                "			) feasibilityWithAllocation,                        \n" +
                "			(    \n" +
                "				CASE     \n" +
                "					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN     \n" +
                "						((t.availableStock + t.allocatedUnit + t.consumeUnits)/r.kitQPAWithDNP)                    \n" +
                "					ELSE ((IFNULL(t.availableStockInPin, 0) + IFNULL(t.allocatedPin, 0) + IFNULL(t.consumePin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))                    \n" +
                "				END    \n" +
                "			) feasibilityWithAvailableAndAllocatedStock,            \n" +
                "			(CASE                  \n" +
                "				WHEN r.uomMismatchedStep = 0 THEN 0                  \n" +
                "				ELSE     \n" +
                "					CASE                  \n" +
                "						WHEN r.connecterTypeID = -2 THEN                  \n" +
                "							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)         \n" +
                "									THEN 0         \n" +
                "									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))         \n" +
                "							END)           \n" +
                "						ELSE                  \n" +
                "							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)         \n" +
                "									THEN 0         \n" +
                "									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0))         \n" +
                "							END)              \n" +
                "					END                  \n" +
                "			END) shortagePerBuild        \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r        \n" +
                "	INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id;                           \n" +
                "  \n" +
                "	SELECT 		mountingTypeID,							fun_getMountingTypeNameByID(mountingTypeID) mountingType,        \n" +
                "			connecterTypeID, 						(CASE WHEN connecterTypeID IS NOT NULL THEN fun_getConnectorTypeNameByID(connecterTypeID) ELSE NULL END) connecterType,        \n" +
                "			MIN(feasibilityWithAllocation) feasibilityWithAllocation,	SUM(Shortage) shortageLine,        \n" +
                "			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,        \n" +
                "			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,     	SUM(shortageForInputQty) shortageForInputQty,        \n" +
                "			0 releasedQty,		vKitQty pendingQty,			0 releasePercentage,		COUNT(1) totalLine        \n" +
                "	FROM    	(        \n" +
                "				SELECT 	mountingTypeID, 		connecterTypeID, 		availableStock,		         \n" +
                "					IFNULL(feasibilityWithAllocation, 0) feasibilityWithAllocation,               \n" +
                "					CASE WHEN (shortagePerBuild > 0) THEN 1 ELSE 0 END Shortage,          \n" +
                "					CAST(IFNULL(feasibilityWithAvailableAndAllocatedStock, 0) AS DECIMAL(18,5)) feasibilityWithAvailableAndAllocatedStock,        \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,        \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty        \n" +
                "				FROM 	tempFeasibilityDetail t        \n" +
                "			) AS feasibilityDet        \n" +
                "	GROUP BY 	mountingTypeID, connecterTypeID        \n" +
                "	ORDER BY 	mountingType;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-02-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_kit_allocation_summary` ;  \n" +
                "CREATE VIEW `vu_kit_allocation_summary` AS   \n" +
                "SELECT  \n" +
                "	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "	`k`.`assyID`             AS `assyID`,  \n" +
                "	`k`.`refMongoTrnsID`     AS `refMongoTrnsID`,  \n" +
                "	`k`.`refBOMLineID`       AS `refBOMLineID`,  \n" +
                "	`k`.`allocatedUOM`       AS `allocatedUOM`,  \n" +
                "	SUM(`k`.`allocatedQty`)  AS `allocatedQty`,  \n" +
                "	SUM(`k`.`allocatedUnit`) AS `allocatedUnit`,  \n" +
                "	SUM(`k`.`allocatedPin`)  AS `allocatedPins`,    \n" +
                "	SUM(`k`.`consumeQty`)    AS `consumeQty`,  \n" +
                "	SUM(`k`.`consumeUnit`)   AS `consumeUnits`,  \n" +
                "	SUM(`k`.`consumePin`)  	 AS `consumePin`,  \n" +
                "	SUM(`k`.`scrapedPin`)    AS `scrapedPins`,  \n" +
                "	SUM(`k`.`convertedallocatedSTKPositionUnits`) AS `allocatedSTKPosition`,  \n" +
                "	SUM(`k`.`allocated_shared`) AS `allocated_shared`  \n" +
                "FROM 	(  \n" +
                "		SELECT  \n" +
                "				`k`.`refSalesOrderDetID`    AS `refSalesOrderDetID`,  \n" +
                "				`k`.`assyID`                AS `assyID`,  \n" +
                "				`k`.`refBOMLineID`          AS `refBOMLineID`,  \n" +
                "				`k`.`partId`                AS `partId`,  \n" +
                "				`kal`.`refMongoTrnsID`      AS `refMongoTrnsID`,  \n" +
                "				(CASE WHEN (`k`.`STATUS` = 'A') THEN `k`.`allocatedQty` ELSE 0 END) AS `allocatedQty`,  \n" +
                "				(CASE WHEN (`k`.`STATUS` = 'A') THEN `FUN_CONVERTUOM`(`k`.`allocatedUOM`,`kal`.`uomID`,`k`.`allocatedUnit`) ELSE 0 END) AS `allocatedUnit`,  \n" +
                "				`kal`.`uomID`               AS `allocatedUOM`,  \n" +
                "				IFNULL(`k`.`consumeQty`,0)  AS `consumeQty`,  \n" +
                "				`FUN_CONVERTUOM`(`k`.`consumeUOM`,`kal`.`uomID`,IFNULL(`k`.`consumeUnit`,0))  AS `consumeUnit`,  \n" +
                "				`k`.`consumeUOM`            AS `consumeUOM`,  \n" +
                "				`FUN_CONVERTUOM`(`cs`.`uom`,`kal`.`uomID`,`cs`.`pkgUnit`)  AS `convertedallocatedSTKPositionUnits`,  \n" +
                "				`shared`.`allocated_shared` AS `allocated_shared`,  \n" +
                "				(CASE WHEN ((`k`.`STATUS` = 'A') AND (`c`.`connecterTypeID` = -(2))) THEN ((FLOOR((IFNULL(`c`.`noOfPosition`,0) / IFNULL(`kal`.`numOfPosition`,0))) * IFNULL(`kal`.`numOfPosition`,0)) * IFNULL(`k`.`allocatedUnit`,0)) ELSE 0 END) AS `allocatedPin`,  \n" +
                "				(CASE WHEN ((`k`.`STATUS` = 'R') AND (`c`.`connecterTypeID` = -(2))) THEN ((FLOOR((IFNULL(`c`.`noOfPosition`,0) / IFNULL(`kal`.`numOfPosition`,0))) * IFNULL(`kal`.`numOfPosition`,0)) * IFNULL(`k`.`consumeUnit`,0)) ELSE 0 END) AS `consumePin`,  \n" +
                "				(CASE WHEN ((`k`.`STATUS` = 'A') AND (`c`.`connecterTypeID` = -(2))) THEN (FLOOR((`c`.`noOfPosition` % IFNULL(`kal`.`numOfPosition`,0))) * IFNULL(`k`.`allocatedUnit`,0)) ELSE 0 END) AS `scrapedPin`  \n" +
                "		FROM 		((((`kit_allocation` `k`  \n" +
                "		JOIN 		`component` `c` ON ((`k`.`partId` = `c`.`id`)))  \n" +
                "		JOIN 		`kit_allocation_lineitems` `kal` ON (((`k`.`refSalesOrderDetID` = `kal`.`refSalesOrderDetID`) AND (`k`.`assyID` = `kal`.`partID`) AND (`k`.`refBOMLineID` = `kal`.`refRfqLineitem`))))  \n" +
                "		LEFT JOIN 	`component_sid_stock` `cs` ON ((`cs`.`id` = `k`.`refUIDId`)))  \n" +
                "		LEFT JOIN 	`vu_umid_allocatedtoshared` `shared` ON ((`k`.`id` = `shared`.`id`)))  \n" +
                "		WHERE 		((`c`.`isDeleted` = 0)  \n" +
                "					AND (`kal`.`isDeleted` = 0)  \n" +
                "					AND (`k`.`STATUS` <> 'D'))  \n" +
                "	) `k`  \n" +
                "GROUP BY 	`k`.`refSalesOrderDetID`,`k`.`assyID`,`k`.`refBOMLineID`,`k`.`allocatedUOM`,`k`.`refMongoTrnsID`;  \n" +
                /* **************************** Add Script Version -> 16-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (723,'1.00','V1','Kit allocation changes - FENIL'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            
        case 723:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
					"ALTER TABLE generic_recycle_bin ADD roleId INT;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (724,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 724:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
					"ALTER TABLE generic_recycle_bin_trans ADD roleId INT;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (725,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 725:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy, updatedBy)  \n" +
				"                VALUES ('Allow to Permanent Delete Document', 1, 0, 1,1);  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (726,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 726:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
					"INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy, updatedBy)  \n" +
					"                VALUES ('Allow to Restore Document', 1, 0, 1,1);  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (727,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 727:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetRecycleBinListByRefTransID`;  \n" +
				"CREATE PROCEDURE `Sproc_GetRecycleBinListByRefTransID`(      \n" +
				"	IN pRefTransID INT,    \n" +
				"    IN pGencFileOwnerType VARCHAR(1000),  \n" +
				"    IN pRoleId INT  \n" +
				")  \n" +
				"BEGIN    \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
				"	DECLARE v_TimeZone VARCHAR(50);                \n" +
				"	DECLARE v_WhereClause VARCHAR(16383);  \n" +
				"    SELECT fun_getTimeZone() INTO v_TimeZone;                    \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
				"  \n" +
				"	SET @temp_Sproc_GetRecycleBinList = CONCAT(\"          \n" +
				"		SELECT      \n" +
				"				rb.id,    \n" +
				"				rb.name,                        \n" +
				"				rb.refId,                        \n" +
				"				rb.entityID,                        \n" +
				"				rb.reftablename,    \n" +
				"                rb.parentID,    \n" +
				"				rb.gencFileOwnerType,     \n" +
				"                rb.refTransID,   \n" +
				"                rb.roleId from_roleId,  \n" +
				"                (CASE WHEN (rb.reftablename = 'genericfiles') THEN                                             \n" +
				"						fun_getFileSizeById(rb.refId)    \n" +
				"				WHEN (rb.reftablename = 'generic_folder') THEN                                             \n" +
				"						''    \n" +
				"				END) AS fileSize,     \n" +
				"                (CASE WHEN (rb.reftablename = 'genericfiles') THEN                                             \n" +
				"						fun_getFileTypeById(rb.refId)    \n" +
				"				WHEN (rb.reftablename = 'generic_folder') THEN                                             \n" +
				"						'Folder'    \n" +
				"				END) AS type,    \n" +
				"                (CASE WHEN (rb.reftablename = 'genericfiles') THEN                                             \n" +
				"					0                                                                              \n" +
				"				WHEN (rb.reftablename = 'generic_folder') THEN                                             \n" +
				"					1    \n" +
				"				END) AS isFolder,    \n" +
				"                (CASE WHEN (rb.reftablename = 'genericfiles') THEN                                             \n" +
				"					fun_getFilePathById(rb.refId)                                                                  \n" +
				"				WHEN (rb.reftablename = 'generic_folder') THEN                                             \n" +
				"					''    \n" +
				"				END) AS genFilePath,    \n" +
				"                rb.originalLocation,    \n" +
				"				fun_getUserNameByID(rb.recycledBy) recycledBy,                                  \n" +
				"				fun_getUserNameByID(rb.restoredBy) restoredBy,                                  \n" +
				"				fun_getRoleByID(rb.recycledByRoleId) recycledByRoleId,                                  \n" +
				"				fun_getRoleByID(rb.restoredByRoleId) restoredByRoleId,                                  \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(rb.recycledOn,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') recycledOn,                                  \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(rb.restoredOn,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') restoredOn          					             \n" +
				"		FROM 	generic_recycle_bin rb      		        \n" +
				"		WHERE   rb.isDeleted = 0 AND rb.refTransID = '\",pRefTransID,\"' AND rb.gencFileOwnerType = '\",pGencFileOwnerType,\"'     \n" +
				"	\");      \n" +
				"  \n" +
				"    IF(v_WhereClause IS NULL OR v_WhereClause = '') THEN                                    \n" +
				"		SET v_WhereClause = ' 1=1 ' ;                                    \n" +
				"	END IF;           \n" +
				"  \n" +
				"	IF(pRoleId IS NOT NULL OR pRoleId > 0)THEN                      \n" +
				"		SET v_WhereClause = CONCAT(v_WhereClause, \" AND from_roleId = '\", pRoleId ,\"' \");                      \n" +
				"	END IF;            \n" +
				"  \n" +
				"	SET @SQLStatement1 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_GetRecycleBinList,\" ) a WHERE \", v_WhereClause);                                                    \n" +
				"  \n" +
				"	PREPARE query1 FROM @SQLStatement1;                                                    \n" +
				"	EXECUTE query1;                        \n" +
				"	DEALLOCATE PREPARE query1;      \n" +
				"END;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (728,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 728:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetBackToRootFolderID`;  \n" +
				"CREATE PROCEDURE `Sproc_GetBackToRootFolderID`(pRoleId INT)  \n" +
				"BEGIN  \n" +
				"    SELECT gencFolderID FROM generic_folder   \n" +
				"		WHERE roleId = pRoleId AND isDeleted = 0 AND refTransID = 0 AND entityID IS NULL AND gencFileOwnerType IS NULL AND refParentId IS NULL;  \n" +
				"END;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (729,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 729:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_restoreGenericRecycleBinDetails`;  \n" +
				"CREATE PROCEDURE `Sproc_restoreGenericRecycleBinDetails`(    \n" +
				"	IN pRefId INT,    \n" +
				"    IN pName VARCHAR(255),    \n" +
				"    IN pRoleID INT,    \n" +
				"	IN pUserID INT,    \n" +
				"    In pId INT,    \n" +
				"    IN pGenRecycleLocation LONGTEXT    \n" +
				"    )  \n" +
				"BEGIN    \n" +
				"		DECLARE v_gencFolderID INT;    \n" +
				"		DECLARE v_refParentId INT;    \n" +
				"        DECLARE v_newRefParentId INT;   \n" +
				"        DECLARE v_maxtablevalue INT;    \n" +
				"        DECLARE v_newGencName VARCHAR(255);    \n" +
				"        DECLARE v_roleId INT;    \n" +
				"        DECLARE v_location VARCHAR(255);    \n" +
				"        DECLARE v_refTransID VARCHAR(255);    \n" +
				"        DECLARE v_entityID VARCHAR(255);    \n" +
				"        DECLARE v_gencFileOwnerType TEXT;    \n" +
				"        DECLARE v_getAllFileParentIds TEXT;    \n" +
				"		DECLARE v_getAllFolderParentIds TEXT;    \n" +
				"        DECLARE sub_maxValue INT;    \n" +
				"        DECLARE sub_refId INT;    \n" +
				"        DECLARE sub_name VARCHAR(255);    \n" +
				"        DECLARE v_subRefParentID INT;    \n" +
				"        DECLARE v_newParentId INT;    \n" +
				"        DECLARE sub_reftablename VARCHAR(255);    \n" +
				"        SET v_getAllFolderParentIds = '';    \n" +
				"        SET v_getAllFileParentIds = '';    \n" +
				"		/* temporary table which split name of recycle_bin location with tempId */    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS tempSplitLocation;    \n" +
				"		CREATE TEMPORARY TABLE tempSplitLocation(tempId INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,location CHAR(255));    \n" +
				"		SET @SQL = CONCAT(\"insert into tempSplitLocation (location) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT pGenRecycleLocation) AS DATA), \"/\", \"'),('\"),\"');\");                                        \n" +
				"		PREPARE stmt FROM @SQL;                                        \n" +
				"		EXECUTE stmt;    \n" +
				"        /* Get max value from tempSplitLocation table */    \n" +
				"		SELECT COUNT(*) FROM tempSplitLocation INTO v_maxtablevalue;    \n" +
				"  \n" +
				"		/* Get transaction details which helpful while creating parentfolders */    \n" +
				"		SELECT refTransID, entityID, gencFileOwnerType, parentID INTO v_refTransID, v_entityID, v_gencFileOwnerType, v_subRefParentID FROM generic_recycle_bin WHERE id = pId AND isDeleted = 0;    \n" +
				"  \n" +
				"        /* Set intial count 1 for while loop to check parent folder is exists or not*/    \n" +
				"        /* Parent Folder creation process */    \n" +
				"        SET @COUNT:=1;    \n" +
				"		WHILE @COUNT < v_maxtablevalue DO     \n" +
				"			SELECT location INTO v_location FROM tempSplitLocation WHERE tempId = (@COUNT);    \n" +
				"  \n" +
				"			IF(@COUNT = 1) THEN    \n" +
				"				/* Select name, gencFolderID & roleId which have same foldername as in location in case of parentId is Null */    \n" +
				"				SELECT gencFolderName, gencFolderID, roleId INTO v_newGencName, v_gencFolderID, v_roleId FROM generic_folder WHERE gencFolderName = v_location AND isDeleted = 0 AND isRecycle = 0 AND refParentId IS NULL;    \n" +
				"			ELSE     \n" +
				"				/* Select name, gencFolderID & roleId which have same foldername as in location */    \n" +
				"				SELECT gencFolderName, gencFolderID INTO v_newGencName, v_gencFolderID FROM generic_folder WHERE gencFolderName = v_location AND isDeleted = 0 AND isRecycle = 0 AND refParentId = v_refParentId AND refTransID = v_refTransID AND gencFileOwnerType = v_gencFileOwnerType;    \n" +
				"            END IF;    \n" +
				"  \n" +
				"            IF(v_gencFolderID IS NOT NULL) THEN    \n" +
				"				SET v_refParentId = v_gencFolderID;	  \n" +
				"            END IF;  \n" +
				"  \n" +
				"            IF(v_newGencName IS NOT NULL) THEN    \n" +
				"				SET v_newRefParentId = v_refParentId;    \n" +
				"            END IF;    \n" +
				"  \n" +
				"			/* If location name is not exits in generic folder then we need to create */    \n" +
				"			IF(v_newGencName IS NULL) THEN    \n" +
				"				INSERT INTO generic_folder (gencFolderName, refTransID, entityID, gencFileOwnerType, roleId, refParentId, isDeleted, createdBy, isRecycle)    \n" +
				"					VALUES (v_location, v_refTransID, v_entityID, v_gencFileOwnerType, v_roleId, v_newRefParentId, 0, pUserID, 0);    \n" +
				"				/* save new folder id for update parent id for selected folder/file */    \n" +
				"                SET v_newRefParentId = LAST_INSERT_ID();     \n" +
				"			END IF;    \n" +
				"  \n" +
				"			 SET @COUNT = @COUNT + 1;    \n" +
				"			 SET v_newGencName = NULL;    \n" +
				"			 SET v_location = NULL;    \n" +
				"		END WHILE;    \n" +
				"  \n" +
				"        /* Sub Folder Duplicate existence process */    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS tempGetSubFolder;    \n" +
				"		CREATE TEMPORARY TABLE tempGetSubFolder     \n" +
				"        WITH RECURSIVE cte (refRecycleBinID,refId,parentID, name,reftablename,level,filePath) AS    \n" +
				"		(    \n" +
				"		  SELECT refRecycleBinID,refId,parentID, name,reftablename, 0 AS level, name AS filePath    \n" +
				"			FROM generic_recycle_bin_trans    \n" +
				"			WHERE refRecycleBinID = pId AND isDeleted = 0 AND refId = pRefId    \n" +
				"		  UNION ALL    \n" +
				"		  SELECT g.refRecycleBinID,g.refId, g.parentID, g.name,g.reftablename, (level+1) AS level, CONCAT(filePath,'/',g.name) AS filePath    \n" +
				"			FROM cte  JOIN generic_recycle_bin_trans AS g    \n" +
				"			 ON cte.refId = g.parentID AND g.isDeleted = 0    \n" +
				"		)    \n" +
				"		SELECT ROW_NUMBER() OVER (ORDER BY level ASC) AS RowNum, cte.* FROM cte ORDER BY level;    \n" +
				"  \n" +
				"       /* Get all child folders and files into tempGetSubFolder */    \n" +
				"        SET sub_maxValue = 0;    \n" +
				"        SELECT COUNT(*) INTO sub_maxValue FROM tempGetSubFolder;    \n" +
				"        SET @COUNT:=1;    \n" +
				"		WHILE @COUNT <= sub_maxValue DO    \n" +
				"			SELECT     \n" +
				"				refId, name, reftablename    \n" +
				"				INTO     \n" +
				"                sub_refId, sub_name, sub_reftablename     \n" +
				"			FROM tempGetSubFolder     \n" +
				"            WHERE RowNum = @COUNT;    \n" +
				"  \n" +
				"            IF(sub_reftablename = 'generic_folder') THEN    \n" +
				"				/* check selected folder's child-files exits or not to change parentID */    \n" +
				"				SELECT     \n" +
				"					GROUP_CONCAT(refId)     \n" +
				"                    INTO v_getAllFileParentIds    \n" +
				"				FROM generic_recycle_bin_trans     \n" +
				"				WHERE refRecycleBinID = pId AND parentID = sub_refId AND isDeleted = 0 AND reftablename = 'genericfiles';    \n" +
				"  \n" +
				"                /* check selected folder's child-folders exits or not to change parentID */    \n" +
				"				SELECT     \n" +
				"					GROUP_CONCAT(refId)     \n" +
				"                    INTO v_getAllFolderParentIds     \n" +
				"				FROM generic_recycle_bin_trans     \n" +
				"				WHERE refRecycleBinID = pId  AND parentID = sub_refId AND isDeleted = 0 AND reftablename = 'generic_folder';                	    \n" +
				"            END IF;    \n" +
				"  \n" +
				"            IF(sub_reftablename = 'genericfiles') THEN    \n" +
				"				IF(v_subRefParentID IS NULL) THEN    \n" +
				"					/* check for duplicate file exists or not in case of refparentID is null */    \n" +
				"					SELECT     \n" +
				"						gencOriginalName    \n" +
				"						INTO v_newGencName    \n" +
				"					FROM genericfiles     \n" +
				"					WHERE  isDeleted = 0 AND gencOriginalName = sub_name AND refParentId IS NULL AND isRecycle = 0 AND refTransID = v_refTransID AND gencFileOwnerType = v_gencFileOwnerType;    \n" +
				"				ELSE     \n" +
				"					/* check for duplicate file exists or not in case of refparentID is not null */    \n" +
				"					SELECT     \n" +
				"						gencOriginalName    \n" +
				"						INTO v_newGencName    \n" +
				"					FROM genericfiles     \n" +
				"					WHERE  isDeleted = 0 AND gencOriginalName = sub_name AND refParentId = v_subRefParentID AND isRecycle = 0 AND refTransID = v_refTransID AND gencFileOwnerType = v_gencFileOwnerType;    \n" +
				"				END IF;    \n" +
				"                     SET v_newParentId = v_subRefParentID;    \n" +
				"            ELSE    \n" +
				"					/* check for duplicate folder exists or not */    \n" +
				"					SELECT     \n" +
				"						gencFolderName, gencFolderID     \n" +
				"						INTO v_newGencName, v_newParentId     \n" +
				"					FROM generic_folder     \n" +
				"					WHERE  isDeleted = 0 AND gencFolderName = sub_name AND refParentId = v_subRefParentID AND isRecycle = 0 AND refTransID = v_refTransID AND gencFileOwnerType = v_gencFileOwnerType AND roleId = v_roleId;    \n" +
				"           END IF;    \n" +
				"			SELECT v_newGencName, sub_name;    \n" +
				"            IF(v_newGencName IS NOT NULL) THEN    \n" +
				"				/* v_newame is exists then manage in case of file */    \n" +
				"				IF(sub_reftablename = 'genericfiles') THEN		    \n" +
				"                	/* update existing record for isRecycle & gencOriginalName into genericfiles table */    \n" +
				"					UPDATE genericfiles gf     \n" +
				"						SET isRecycle = 0, gencOriginalName = fun_getNewGenFileNameById(v_newGencName), refParentId = v_subRefParentID    \n" +
				"					WHERE gencFileID = sub_refId AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"                END IF;    \n" +
				"  \n" +
				"                /* v_newame is exists then manage in case of folder */    \n" +
				"                IF(sub_reftablename = 'generic_folder') THEN    \n" +
				"					IF(v_getAllFolderParentIds <> '') THEN    \n" +
				"						/* update existing record for sub_refId into generic_folder table */    \n" +
				"						UPDATE generic_folder     \n" +
				"							SET refParentId = v_newParentId    \n" +
				"						WHERE FIND_IN_SET(gencFolderID, v_getAllFolderParentIds) AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"					END IF;    \n" +
				"  \n" +
				"					IF(v_getAllFileParentIds <> '') THEN    \n" +
				"						/* update existing record for sub_refId into genericfiles table */    \n" +
				"						UPDATE genericfiles     \n" +
				"							SET refParentId = v_newParentId    \n" +
				"						WHERE FIND_IN_SET(gencFileID, v_getAllFileParentIds) AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"					END IF;    \n" +
				"  \n" +
				"					/* delete existing records from generic_folder table */    \n" +
				"					UPDATE generic_folder     \n" +
				"						SET isDeleted = 1, deletedBy = pUserID, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()    \n" +
				"					WHERE gencFolderID = sub_refId AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"				END IF;    \n" +
				"            END IF;    \n" +
				"  \n" +
				"            IF(sub_name IS NOT NULL AND v_newGencName IS NULL) THEN    \n" +
				"				IF(sub_reftablename = 'genericfiles') THEN    \n" +
				"					IF(v_newRefParentId IS NOT NULL AND @COUNT = 1) THEN    \n" +
				"						/* update existing record for isRecycle and v_newRefParentId into genericfiles table */    \n" +
				"						UPDATE genericfiles    \n" +
				"							SET isRecycle = 0, refParentId = v_newRefParentId     \n" +
				"						WHERE gencFileID = sub_refId AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"					ELSE     \n" +
				"						/* update existing record for isRecycle into genericfiles table */    \n" +
				"						UPDATE genericfiles    \n" +
				"							SET isRecycle = 0    \n" +
				"						WHERE gencFileID = sub_refId AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"                    END IF;    \n" +
				"				ELSE     \n" +
				"					IF(v_newRefParentId IS NOT NULL AND @COUNT = 1) THEN    \n" +
				"						/* update existing record for isRecycle and v_newRefParentId into generic_folder table */    \n" +
				"						UPDATE generic_folder     \n" +
				"							SET isRecycle = 0, refParentId = v_newRefParentId    \n" +
				"						WHERE gencFolderID = sub_refId AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"					ELSE     \n" +
				"						/* update existing record for isRecycle into generic_folder table */    \n" +
				"						UPDATE generic_folder     \n" +
				"							SET isRecycle = 0    \n" +
				"						WHERE gencFolderID = sub_refId AND isDeleted = 0 AND isRecycle = 1;    \n" +
				"					END IF;    \n" +
				"                END IF;    \n" +
				"			END IF;    \n" +
				"  \n" +
				"            IF(v_newParentId IS NOT NULL) THEN    \n" +
				"				SET v_subRefParentID = v_newParentId;    \n" +
				"			ELSE     \n" +
				"				SET v_subRefParentID = sub_refId;    \n" +
				"			END IF;    \n" +
				"  \n" +
				"			SET sub_refId = NULL;    \n" +
				"			SET sub_name = NULL;    \n" +
				"			SET v_newGencName = NULL;    \n" +
				"            SET v_newParentId = NULL;    \n" +
				"			SET v_getAllFolderParentIds = NULL;     \n" +
				"			SET v_getAllFileParentIds = NULL;    \n" +
				"			SET v_newRefParentId = NULL;    \n" +
				"            SET @COUNT = @COUNT + 1;    \n" +
				"        END WHILE;    \n" +
				"	SET v_subRefParentID = NULL;    \n" +
				"	/* delete informtaion from generic_recycle_bin table */    \n" +
				"	UPDATE generic_recycle_bin grb     \n" +
				"		SET grb.isDeleted = 1, grb.deletedBy = pUserID, grb.deleteByRoleId = pRoleID, grb.deletedAt = fun_DatetimetoUTCDateTime(),    \n" +
				"		grb.restoredBy = pUserID, grb.restoredByRoleId = pRoleID, grb.restoredOn = fun_DatetimetoUTCDateTime()    \n" +
				"	WHERE grb.id = pId AND grb.isDeleted = 0;    \n" +
				"	/* delete informtaion from generic_recycle_bin_trans table */    \n" +
				"	UPDATE generic_recycle_bin_trans grbt     \n" +
				"		SET grbt.isDeleted = 1, grbt.deletedBy = pUserID, grbt.deleteByRoleId = pRoleID, grbt.deletedAt=fun_DatetimetoUTCDateTime(),    \n" +
				"		grbt.restoredBy = pUserID, grbt.restoredByRoleId = pRoleID, grbt.restoredOn = fun_DatetimetoUTCDateTime()    \n" +
				"	WHERE grbt.refRecycleBinID = pId AND grbt.isDeleted = 0;    \n" +
				"   DROP TEMPORARY TABLE IF EXISTS tempSplitLocation;    \n" +
				"   DROP TEMPORARY TABLE IF EXISTS tempGetSubFolder;    \n" +
				"  \n" +
				"END;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP function IF EXISTS `fun_getSamplePicturesUploadCount`;  \n" +
				"CREATE FUNCTION `fun_getSamplePicturesUploadCount`(        \n" +
				"	pPartId INT    \n" +
				") RETURNS int  \n" +
				"BEGIN        \n" +
				"	DECLARE uploadCount INT;    \n" +
				"  \n" +
				"    /*create temparory table that contain folder heirachy  of Operator folder*/    \n" +
				"    WITH RECURSIVE SubFolder AS      \n" +
				"	(  SELECT 	gencFolderId ,    \n" +
				"				refParentID,      \n" +
				"                CASE WHEN refTransID = 0 THEN pPartId ELSE refTransID END refTransID    \n" +
				"		FROM generic_folder    \n" +
				"		WHERE entityID is null    \n" +
				"        and refTransID = 0    \n" +
				"        and gencFolderName = 'Operator'    \n" +
				"        AND isRecycle = 0  \n" +
				"		AND isDeleted = 0    \n" +
				"		UNION ALL      \n" +
				"		SELECT 	f.gencFolderId ,    \n" +
				"				f.refParentId,      \n" +
				"                f.refTransID    \n" +
				"		FROM generic_folder f             \n" +
				"		INNER JOIN SubFolder sf ON sf.gencFolderId = f.refParentId AND sf.refTransID = f.refTransID      \n" +
				"		WHERE f.entityID = -9    \n" +
				"        /*AND f.gencFileOwnerType =  'component' */    \n" +
				"		AND f.refTransID = pPartId     \n" +
				"        AND f.isRecycle = 0  \n" +
				"        AND f.isDeleted = 0    \n" +
				"	)    \n" +
				"  \n" +
				"	select count(1) into @uploadCount      \n" +
				"		  from genericfiles g        \n" +
				"		 where g.entityID =  -9       \n" +
				"		   and g.refTransID =  pPartId    \n" +
				"		   /*and g.gencFileOwnerType =  'component' */    \n" +
				"		   and exists (select 1 from genericcategory gc        \n" +
				"						where gc.isdeleted = 0   \n" +
				"						and gc.gencCategoryName = 'Samples Pictures'        \n" +
				"						and gc.categoryType = 'Document Type'        \n" +
				"						and gc.gencCategoryID = g.fileGroupBy)        \n" +
				"			and exists (select 1 from SubFolder tf where tf.gencFolderID = g.refParentId)    \n" +
				"			AND g.isRecycle = 0       \n" +
				"		    and g.isDeleted = 0;      \n" +
				"  \n" +
				"	RETURN ifnull(@uploadCount,0);    \n" +
				"END;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_AddOperationInWorkOrder`;  \n" +
				"CREATE PROCEDURE `Sproc_AddOperationInWorkOrder`(                                      \n" +
				"	IN pwoID INT,                                      \n" +
				"	IN popID VARCHAR(5000),                                      \n" +
				"	IN puserID VARCHAR(50),      \n" +
				"    IN puserRoleId INT      \n" +
				")  \n" +
				"BEGIN                 \n" +
				"DECLARE t_lv_woOPID INT;                             \n" +
				"DECLARE i INT DEFAULT 0;                                \n" +
				"DECLARE totWoOPIDs INT DEFAULT 0;          \n" +
				"DECLARE lv_woNumber VARCHAR(50);                            \n" +
				"DECLARE opNumberFromTrackBySerial INT ;      \n" +
				"DECLARE EXIT HANDLER FOR SQLEXCEPTION                                      \n" +
				"BEGIN                                      \n" +
				"	ROLLBACK;                                      \n" +
				"	RESIGNAL;                                      \n" +
				"END;                                      \n" +
				"DECLARE EXIT HANDLER FOR SQLWARNING                                      \n" +
				"  BEGIN                                      \n" +
				"	ROLLBACK;                                      \n" +
				"	RESIGNAL;                                      \n" +
				"END;          \n" +
				"	SELECT woNumber INTO lv_woNumber FROM workorder WHERE deletedAt IS NULL AND woID = pwoID ;        \n" +
				"  \n" +
				"IF (NOT EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woID = pwoID))                                      \n" +
				"	THEN SELECT 'woNumber' errorCode;        \n" +
				"ELSEIF (EXISTS (SELECT 1 FROM assemblystock WHERE deletedAt IS NULL AND `type` = 'WS' AND woNumber = lv_woNumber)) THEN        \n" +
				"		SELECT 'EC51' errorCode;           \n" +
				"	/* already added ready to ship qty - move to stock from last op done so not allowed to add operation */        \n" +
				"ELSE                                      \n" +
				"	/*Generate Dummy data from string to row */                                      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS t;                                      \n" +
				"	CREATE TEMPORARY TABLE t( txt TEXT );                                      \n" +
				"	INSERT INTO t VALUES(popID);                                      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp;                                      \n" +
				"	CREATE TEMPORARY TABLE temp( val CHAR(255) );                                      \n" +
				"	SET @SQL = CONCAT(\"insert into temp (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");                                      \n" +
				"	PREPARE stmt1 FROM @SQL;                                      \n" +
				"	EXECUTE stmt1;                                      \n" +
				"	-- SELECT DISTINCT(val) FROM temp;                                      \n" +
				"	/*Generate Dummy data from string to row */                                      \n" +
				"  \n" +
				"	START TRANSACTION;                                      \n" +
				"	/*Delete old operation from workorder */                                      \n" +
				"	UPDATE  workorder_operation_equipment_dataelement                                       \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime() ,                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                    \n" +
				"	WHERE woOPid IN (SELECT woopid FROM workorder_operation                                       \n" +
				"			WHERE woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))AND deletedAt IS NULL;                                      \n" +
				"	UPDATE  workorder_operation_equipment                                       \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime() ,                                      \n" +
				"	    deletedBy = puserID  , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                    \n" +
				"	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;                                      \n" +
				"	UPDATE workorder_operation_employee                                       \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime(),                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                     \n" +
				"	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;                                      \n" +
				"	UPDATE workorder_operation_part                                       \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime(),                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                     \n" +
				"	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;                                      \n" +
				"	UPDATE workorder_operation_dataelement                                      \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime() ,                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                    \n" +
				"	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;              \n" +
				"    UPDATE workorder_operation_cluster                                      \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime() ,                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                    \n" +
				"	WHERE clusterID IN (SELECT clusterID FROM workorder_cluster WHERE woID = pwoID) AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;             \n" +
				"	UPDATE workorder_operation                                       \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime() ,                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                     \n" +
				"	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp) AND deletedAt IS NULL;                             \n" +
				"  \n" +
				" 	UPDATE  genericfiles                                       \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime() ,                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                    \n" +
				"	WHERE refTransID IN (SELECT woOPID FROM workorder_operation WHERE deletedAt IS NULL                                     \n" +
				"				AND woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))                             \n" +
				"	AND deletedAt IS NULL                             \n" +
				"	AND gencFileOwnerType = 'workorder_operation' ;                             \n" +
				"  \n" +
				"	UPDATE  generic_folder                                       \n" +
				"	SET isDeleted = 1,                                      \n" +
				"	    deletedAt = fun_DatetimetoUTCDateTime() ,                                      \n" +
				"	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID                                    \n" +
				"	WHERE refTransID IN (SELECT woOPID FROM workorder_operation WHERE deletedAt IS NULL                                       \n" +
				"				AND woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))                             \n" +
				"	AND deletedAt IS NULL                             \n" +
				"	AND gencFileOwnerType = 'workorder_operation' ;                                      \n" +
				"	/*Delete old operation from workorder*/                               \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_newAddedOpIDList;  /* all these opIDs are new to adding as woOPID */                            \n" +
				"	CREATE TEMPORARY TABLE temp_newAddedOpIDList AS                             \n" +
				"	SELECT op.opID FROM operations op                             \n" +
				"	WHERE op.deletedAt IS NULL                            \n" +
				"	AND op.opID IN(SELECT DISTINCT(val) FROM temp)                              \n" +
				"	AND op.opID NOT IN (SELECT woop.opID FROM workorder_operation woop                             \n" +
				"				WHERE woop.woid = pwoid AND  woop.deletedAt IS NULL);                            \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"    INSERT INTO workorder_operation                                      \n" +
				"	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                                      \n" +
				"	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                      \n" +
				"	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                      \n" +
				"	opVersion, isIssueQty, isRework,`colorCode`,`tabLimitAtTraveler`, isMoveToStock,mountingTypeID, isPlacementTracking ,                \n" +
				"	`isLoopOperation` , `isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,    \n" +
				"    `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`)                                      \n" +
				"	SELECT   pwoID WOID ,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `createdBy`,`opName`,`opNumber`,                                      \n" +
				"	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                      \n" +
				"	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,'A' opVersion, `isIssueQty`, `isRework`,                              \n" +
				"	`colorCode`, IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(`isMoveToStock`,0) isMoveToStock,wo.mountingTypeID, isPlacementTracking  ,                \n" +
				"	   `isLoopOperation` , `isAllowMissingPartQty` , `isAllowBypassQty` ,`isEnablePreProgrammingPart`,`isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`        \n" +
				"	 FROM operations wo                                       \n" +
				"	 WHERE opid IN(SELECT DISTINCT(val) FROM temp)  AND                                       \n" +
				"		opid NOT IN (SELECT opid FROM workorder_operation WHERE woid = pwoid AND  deletedAt IS NULL) AND                                       \n" +
				"		wo.deletedAt IS NULL ;                \n" +
				"  \n" +
				"	INSERT INTO workorder_operation_dataelement                                      \n" +
				"	(`woID`,`opID`,`dataElementID`, `displayOrder`,`createdAt`,`createdBy`,`woOPID`,`isDeleted`)                                      \n" +
				"	SELECT a.woID ,b.opID ,b.dataElementID, b.displayOrder ,a.createdAt, a.createdBy,a.woOPID, a.isDeleted                                       \n" +
				"	FROM workorder_operation a JOIN operation_dataelement b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL                                       \n" +
				"	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND                                       \n" +
				"		a.deletedAt IS NULL AND b.deletedAt IS NULL AND                                       \n" +
				"		NOT EXISTS (SELECT 'Y' FROM  workorder_operation_dataelement c                                       \n" +
				"				WHERE c.woid = a.woid AND                                       \n" +
				"				      c.opid = a.opid AND                                       \n" +
				"				      c.dataElementID = b.dataElementID AND                                       \n" +
				"				      c.deletedAt IS NULL);	                                      \n" +
				"  \n" +
				"	INSERT INTO workorder_operation_part                                      \n" +
				"	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                      \n" +
				"	SELECT a.woID,b.opID,b.partID,a.createdAt, a.createdBy,a.woOPID, a.isDeleted                                       \n" +
				"	FROM workorder_operation a JOIN operation_part b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL                                       \n" +
				"	WHERE a.woid = pwoID                         \n" +
				"	AND a.opid IN(SELECT DISTINCT(val) FROM temp)                         \n" +
				"	AND a.deletedAt IS NULL AND b.deletedAt IS NULL                         \n" +
				"	AND NOT EXISTS (SELECT 'Y' FROM  workorder_operation_part c                                       \n" +
				"				WHERE c.woid = a.woid AND                                       \n" +
				"				      c.opid = a.opid AND                                       \n" +
				"				      c.partid = b.partid AND                                       \n" +
				"				      c.deletedAt IS NULL)                         \n" +
				"	AND b.partID NOT IN (                        \n" +
				"				SELECT id FROM component                         \n" +
				"				WHERE (restrictUSEwithpermission = 1 OR restrictPackagingUseWithpermission = 1                         \n" +
				"					OR restrictUsePermanently = 1 OR restrictPackagingUsePermanently = 1)                        \n" +
				"				AND deletedAt IS NULL                         \n" +
				"			 )                        \n" +
				"	AND b.partID NOT IN (                        \n" +
				"				SELECT mfgPNID FROM rfq_lineitems_alternatepart                         \n" +
				"				WHERE partID IN (SELECT partID FROM workorder WHERE woID = pwoID AND deletedAt IS NULL)                        \n" +
				"				AND (restrictUseInBOMWithPermissionStep = 1 OR restrictUseInBOMStep = 1)                        \n" +
				"				AND deletedAt IS NULL                         \n" +
				"				)			                          \n" +
				"				;                                      \n" +
				"  \n" +
				"	INSERT INTO workorder_operation_employee                                      \n" +
				"	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                      \n" +
				"	SELECT a.woID,a.opID,b.employeeID,fun_DatetimetoUTCDateTime() `createdAt`,a.createdBy,a.woOPID, a.isDeleted                                       \n" +
				"	FROM workorder_operation a JOIN  operation_employee   b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL                                       \n" +
				"	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND                                       \n" +
				"		NOT EXISTS (SELECT 'Y' FROM workorder_operation_employee c                                       \n" +
				"					WHERE c.woid = a.woid AND 	                                      \n" +
				"					      c.opid = a.opid AND                                       \n" +
				"					      c.employeeid = b.employeeid AND                                       \n" +
				"					      c.deletedAt IS NULL) AND                                       \n" +
				"	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;                                      \n" +
				"  \n" +
				"	INSERT INTO workorder_operation_equipment                                      \n" +
				"	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`,  `isDeleted`)                                      \n" +
				"	SELECT a.woID,a.opID,b.eqpID,fun_DatetimetoUTCDateTime() `createdAt`,a.createdBy,a.woOPID, a.isDeleted                                       \n" +
				"	FROM workorder_operation a JOIN  operation_equipment  b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL                                       \n" +
				"	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND                                       \n" +
				"		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment c                                       \n" +
				"				 WHERE c.woid = a.woid AND                                       \n" +
				"					c.opid = a.opid AND                                       \n" +
				"					c.eqpid = b.eqpid AND                                       \n" +
				"					c.deletedAt IS NULL) AND                                       \n" +
				"	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;                                              \n" +
				"  \n" +
				"        INSERT INTO workorder_operation_equipment_dataelement                                      \n" +
				"        (woid,eqpid,opid,woopid,dataElementID,displayorder,createdAt,createdBy,isDeleted)                                      \n" +
				"	SELECT a.woID,a.eqpid,a.opid,a.woopid,b.dataElementID,b.displayOrder,fun_DatetimetoUTCDateTime() `createdAt`,a.createdBy, a.isDeleted                                       \n" +
				"	FROM workorder_operation_equipment a JOIN  equipment_dataelement  b                                      \n" +
				"	 ON a.eqpid = b.eqpid AND a.deletedAt IS NULL AND b.deletedAt IS NULL                                       \n" +
				"	 AND b.dataelementID IN (SELECT dataElementID FROM dataelement WHERE dataelement_use_at IN ('Both', 'Operation'))                                      \n" +
				"	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND                                       \n" +
				"		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment_dataelement c                                      \n" +
				"				WHERE c.woid = a.woid AND                                       \n" +
				"				      c.opid = a.opid AND                                      \n" +
				"				      c.woopid = a.woopid AND                                       \n" +
				"				      c.eqpid = a.eqpid AND                                       \n" +
				"				      c.dataElementID = b.dataElementID  AND                                       \n" +
				"				      c.deletedAt IS NULL) AND                                      \n" +
				"	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;                                      \n" +
				"	UPDATE workorder SET updatedby=puserID, isOperationsVerified=0,                                      \n" +
				"			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoID;                             \n" +
				"  \n" +
				"  \n" +
				"	/* copy all op master folder to wo op level */                            \n" +
				"	/* if already added folder for woOPID then no need to copy in case of added single single op from wo op page */                            \n" +
				"	INSERT INTO generic_folder                                                              \n" +
				"	(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                              \n" +
				"	`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                              \n" +
				"	SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL                             \n" +
				" 					AND woopt1.woID = pwoID AND woopt1.opID = gf.refTransID) refTransID ,                             \n" +
				"	NULL, 'workorder_operation' gencFileOwnerType, gf.roleId, gf.refParentId,                                                              \n" +
				"	0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, gf.gencFolderID copyGencFolderID ,                            \n" +
				" 	gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                                                              \n" +
				"	FROM generic_folder gf                            \n" +
				"	WHERE gf.refTransID IN ( SELECT * FROM temp_newAddedOpIDList )                         \n" +
				"	AND gf.gencFileOwnerType = 'operations'                              \n" +
				"	AND gf.entityID = -1     \n" +
				"    AND gf.isRecycle = 0  \n" +
				"	AND gf.deletedAt IS NULL ;                            \n" +
				"  \n" +
				"	# update refParentId - parent folder for work order each operation                            \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                              \n" +
				"  \n" +
				"		 CREATE TEMPORARY TABLE temp_woOPIDs AS                             \n" +
				"		 SELECT DISTINCT refTransID                             \n" +
				"		 FROM generic_folder WHERE deletedAt IS NULL                            \n" +
				"		 AND gencFileOwnerType = 'workorder_operation'                             \n" +
				"		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3                             \n" +
				"					WHERE woopt3.deletedAt IS NULL                             \n" +
				"					AND woopt3.woID = pwoID                            \n" +
				"					AND woopt3.opID IN ( SELECT * FROM temp_newAddedOpIDList )			                            \n" +
				"				  ) ;                            \n" +
				"  \n" +
				"		 SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;                              \n" +
				"  \n" +
				"		 WHILE i < totWoOPIDs DO                             \n" +
				"  \n" +
				"		 	SET t_lv_woOPID = NULL;                            \n" +
				"		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;                            \n" +
				"  \n" +
				"			 UPDATE generic_folder gf1,                                                              \n" +
				"			 	(   SELECT a.gencFolderID, a.copyGencFolderID                                                              \n" +
				"			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID                       \n" +
				"			 		AND a.gencFileOwnerType = 'workorder_operation' AND a.deletedAt IS NULL                                                              \n" +
				"			 	) gf2                                                              \n" +
				"			 	SET gf1.refParentId = gf2.gencFolderID                                                              \n" +
				"			 WHERE gf1.refParentId = gf2.copyGencFolderID                             \n" +
				"			 AND gf1.refTransID = t_lv_woOPID                       \n" +
				"			 AND gf1.gencFileOwnerType = 'workorder_operation' AND gf1.deletedAt IS NULL ;                            \n" +
				"  \n" +
				"		 SET i = i + 1;                                \n" +
				"		 END WHILE;                                \n" +
				"  \n" +
				"	/* END of copy doc case */		                            \n" +
				"	/** Start Set trackby serial no for new Operations ****/	       \n" +
				"    SELECT IFNULL((SELECT opNumber      \n" +
				"					FROM workorder_operation      \n" +
				"					Where woID = pwoID       \n" +
				"					AND isDeleted = 0      \n" +
				"					AND isTrackBySerialFromWOOP = 1) , 0) INTO opNumberFromTrackBySerial;              \n" +
				"    IF opNumberFromTrackBySerial > 0 THEN      \n" +
				"		UPDATE workorder_operation wo      \n" +
				"		SET wo.isTrackBySerialNo = 1,      \n" +
				"			updatedBy = puserID,      \n" +
				"            updatedAt = fun_DatetimetoUTCDateTime(),      \n" +
				"            updateByRoleId = puserRoleId      \n" +
				"			WHERE wo.woID = pwoID       \n" +
				"			AND wo.isDeleted = 0      \n" +
				"			AND wo.opNumber > opNumberFromTrackBySerial      \n" +
				"			AND wo.qtyControl = 1;        \n" +
				"     END IF;         \n" +
				"	/** End Set trackby serial no for new Operations ****/      \n" +
				"  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs; 		                            \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp;                                 \n" +
				"	DROP TEMPORARY TABLE IF EXISTS t;                             \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_newAddedOpIDList;                                \n" +
				"  \n" +
				"	COMMIT;                                      \n" +
				"END IF;                                      \n" +
				"END;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_AddWorkorder`;  \n" +
				"CREATE PROCEDURE `Sproc_AddWorkorder`(                                                            \n" +
				"	IN pcustomerID INT,                                                            \n" +
				"	IN ppartID INT,                                                            \n" +
				"	IN pRoHSStatusID INT,                                                             \n" +
				"	IN pwoNumber VARCHAR(1000),                                                            \n" +
				"	IN pbuildQty INT,                                                 \n" +
				"	IN pexcessQty INT,                                                       \n" +
				"	IN pisRevision INT,                                                            \n" +
				"	IN pwoType VARCHAR(100),                                                            \n" +
				"	IN pisCopyOPFrom VARCHAR(100),                                                            \n" +
				"	IN prefrenceWOID INT,                                  \n" +
				"	IN pmasterTemplateID INT,                                  \n" +
				"	IN puserID VARCHAR(500),                              \n" +
				"	IN pisRevisedWO INT,                              \n" +
				"	IN pterminateWOID INT ,                              \n" +
				"	IN pterminateWOOPID INT,                              \n" +
				"	IN pisHotJob INT,                              \n" +
				"	IN pinitialInternalVersion VARCHAR(50)  ,                              \n" +
				"	IN pParentWOID INT  ,    \n" +
				"	IN puserRoleId INT    \n" +
				")  \n" +
				"BEGIN                                                            \n" +
				"DECLARE insertedWOID INT;                                                        \n" +
				"DECLARE strOPID VARCHAR(10000);               \n" +
				"DECLARE vPropUmidQty  INT DEFAULT 0;          \n" +
				"DECLARE vIsInternalBuild TINYINT DEFAULT 0;                                                 \n" +
				"DECLARE vIsKitAllocationNotRequired TINYINT DEFAULT 0;        \n" +
				"DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                            \n" +
				"BEGIN                                                            \n" +
				"	ROLLBACK;                                                            \n" +
				"	RESIGNAL;                                                            \n" +
				"END;                                                            \n" +
				"DECLARE EXIT HANDLER FOR SQLWARNING                                                            \n" +
				"  BEGIN                                                            \n" +
				"	ROLLBACK;                                                            \n" +
				"	RESIGNAL;                                                            \n" +
				"END;                                    \n" +
				"	IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = pwoNumber))                                          \n" +
				"		THEN SELECT 'woNumber' errorCode;         \n" +
				"	ELSEIF (EXISTS (SELECT 1 FROM assemblystock WHERE deletedAt IS NULL AND woNumber = pwoNumber AND `type` = 'OS')) THEN        \n" +
				"		SELECT 'EC02' errorCode;        \n" +
				"		/* opening stock contain same work order number then not allowed */        \n" +
				"	ELSE             		          \n" +
				"		START TRANSACTION;                                    \n" +
				"  \n" +
				"			-- select w.woNumber into refwoNumber from workorder w where w.woID = prefrenceWOID and w.deletedAt IS NULL;                                  \n" +
				"			IF(prefrenceWOID IS NOT NULL AND (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\")) THEN                                  \n" +
				"				IF (pisRevisedWO = 1) THEN                              \n" +
				"					# Update from work order status to 'Under Termination'                                  \n" +
				"					UPDATE Workorder                               \n" +
				"					SET woStatus = 6,               \n" +
				"                    woSubStatus = 6,                           \n" +
				"					updatedAt =  fun_DatetimetoUTCDateTime(),                               \n" +
				"					updatedBy = puserID                               \n" +
				"					WHERE woID = pterminateWOID                               \n" +
				"					AND IFNULL(isDeleted, 0) = 0;                                  \n" +
				"				END IF;                              \n" +
				"				CALL Sproc_CopyWorkorder(prefrenceWOID, pwoNumber, ppartID, pexcessQty, pbuildQty, puserID, NULL, NULL, pisRevision, pwoType, NULL, pcustomerID, pisRevisedWO, pterminateWOID, pterminateWOOPID, pisHotJob, pinitialInternalVersion,pisCopyOPFrom, pParentWOID);                                  \n" +
				"			ELSE                                   \n" +
				"				SET insertedWOID = NULL;                                  \n" +
				"				SET strOPID = NULL;                                 \n" +
				"  \n" +
				"				IF (pisRevisedWO = 1) THEN                              \n" +
				"					# Update from work order status to 'Under Termination'                                  \n" +
				"					UPDATE Workorder                               \n" +
				"					SET woStatus = 6,             \n" +
				"                    woSubStatus = 6,            \n" +
				"					updatedAt =  fun_DatetimetoUTCDateTime(),                               \n" +
				"					updatedBy = puserID                               \n" +
				"					WHERE woID = pterminateWOID                               \n" +
				"					AND IFNULL(isDeleted, 0) = 0;              \n" +
				"  \n" +
				"                    SELECT  isInternalBuild , proposedUmidQty , isKitAllocationNotRequired       \n" +
				"						INTO  vIsInternalBuild,vPropUmidQty ,vIsKitAllocationNotRequired           \n" +
				"					FROM workorder wo WHERE woID = pterminateWOID;              \n" +
				"				END IF;                              \n" +
				"  \n" +
				"				# add workorder                                                             \n" +
				"  \n" +
				"				INSERT INTO workorder (                                  \n" +
				"				`woNumber`,			`partID`,		`customerID`,		`buildQty`,                                  \n" +
				"				`startTime`,			`endTime`,		`masterTemplateID`,                                  \n" +
				"				`refrenceWOID`,			`createdAt`,		`createdBy`,		`woStatus`, `woSubStatus`,                                  \n" +
				"				`excessQty`,			`isClusterApplied`,	`RoHSStatusID`,		`woVersion`,                                   \n" +
				"				`isDeleted`,			`ECORemark`,		`FCORemark`              \n" +
				"				,`isOperationTrackBySerialNo`,	`isNoClean`,		`isWatersoluble`,	`isRevisedWO`,                                  \n" +
				"				`woType`,			`updatedAt`,		`updatedBy`,		`terminateWOID`,                            \n" +
				"				`terminateWOOPID`,		`isHotJob`,		`initialInternalVersion`,           \n" +
				"                `isInternalBuild` , `proposedUmidQty`,`isKitAllocationNotRequired`)      \n" +
				"				VALUES                                   \n" +
				"				(                                  \n" +
				"				pwoNumber,			ppartID,		pcustomerID,		pbuildQty,                                  \n" +
				"				NULL,				NULL,			pmasterTemplateID,	                                  \n" +
				"				prefrenceWOID,			fun_DatetimetoUTCDateTime(),		puserID,		0,  0,                                \n" +
				"				pexcessQty,			0,			pRoHSStatusID,		'A',                                  \n" +
				"				0,				NULL,			NULL,			                       \n" +
				"				0,				0,			0,			IFNULL(pisRevisedWO,0),                                  \n" +
				"				pwoType,			fun_DatetimetoUTCDateTime(),		puserID,		pterminateWOID,                            \n" +
				"				pterminateWOOPID,		pisHotJob,		pinitialInternalVersion	,						                                  \n" +
				"				 vIsInternalBuild,vPropUmidQty, vIsKitAllocationNotRequired );                                              \n" +
				"				-- get inseterted record from selected autocomplete                                  \n" +
				"				-- SELECT LAST_INSERT_ID() into insertedWOID;                                     \n" +
				"				SET insertedWOID = LAST_INSERT_ID();                                                \n" +
				"				SELECT w.woID AS woID FROM workorder w WHERE w.woID = insertedWOID;                             \n" +
				"  \n" +
				"				# copy part_assembly_certification                          \n" +
				"				INSERT INTO workorder_certification                                                          \n" +
				"				(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                                            \n" +
				"				SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `createdBy`,                        \n" +
				"						`ClassID` `classIDs`, `isDeleted`                           \n" +
				"				FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;                                   \n" +
				"  \n" +
				"				IF(pParentWOID IS NOT NULL) THEN                  \n" +
				"					#Insert parent woID details                  \n" +
				"					INSERT INTO workorder_main_assembly_mapping_details                  \n" +
				"					(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)                   \n" +
				"					SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;	                  \n" +
				"				END IF;                  \n" +
				"  \n" +
				"				# [S] - copy document_folder from selected part/assembly level to work order level                      \n" +
				"				INSERT INTO generic_folder                                                        \n" +
				"						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                        \n" +
				"						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                        \n" +
				"				SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,                                                        \n" +
				"						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, a.gencFolderID copyGencFolderID ,                      \n" +
				"						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                       \n" +
				"				FROM generic_folder a                       \n" +
				"				WHERE a.refTransID = ppartID                       \n" +
				"				AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.deletedAt IS NULL;                                                        \n" +
				"  \n" +
				"				UPDATE generic_folder gf1,                                                        \n" +
				"				(   SELECT a.gencFolderID, a.copyGencFolderID                                                        \n" +
				"					FROM generic_folder a WHERE a.refTransID = insertedWOID                   \n" +
				"					AND a.gencFileOwnerType = 'workorder' AND a.deletedAt IS NULL                  \n" +
				"				) gf2                                                        \n" +
				"				SET gf1.refParentId = gf2.gencFolderID                                                        \n" +
				"				WHERE gf1.refParentId = gf2.copyGencFolderID                       \n" +
				"				AND gf1.refTransID = insertedWOID                   \n" +
				"				AND gf1.gencFileOwnerType = 'workorder' AND gf1.isRecycle = 0 AND gf1.deletedAt IS NULL;                       \n" +
				"			# [E] - copy generic_folder from selected part/assembly level to work order level                      \n" +
				"  \n" +
				"				-- copy operation from operation master templates by pmasterTemplateID                                  \n" +
				"				IF (insertedWOID > 0 AND pisCopyOPFrom = \"M\") THEN                                   \n" +
				"					-- copy operation from workorder operation by prefrenceWOID                                  \n" +
				"					-- if(pisCopyOPFrom = \"W\") then                                  \n" +
				"					-- 	select GROUP_concat(wo.opID) into strOPID from workorder_operation wo where wo.woID=prefrenceWOID and wo.deletedAt IS NULL and IFNULL(wo.isDeleted,0)=0;                                  \n" +
				"					-- 	IF (strOPID IS NOT NULL) THEN                                  \n" +
				"					-- 		CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID);                                  \n" +
				"					-- 	END IF;                                  \n" +
				"  \n" +
				"					SELECT GROUP_CONCAT(opmt.operationID) INTO strOPID FROM operation_master_templates opmt WHERE opmt.masterTemplateId=pmasterTemplateID AND opmt.deletedAt IS NULL AND IFNULL(opmt.isDeleted,0)=0;                                  \n" +
				"					IF (strOPID IS NOT NULL) THEN                                  \n" +
				"						CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID,puserRoleId);                                  \n" +
				"					END IF;                                  \n" +
				"				END IF;                                  \n" +
				"			END IF;                                  \n" +
				"		COMMIT;                                   \n" +
				"	END IF;                                   \n" +
				"END;  \n" +
                /* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_checkOPFileFolderExistsToReplaceFile`;  \n" +
				"CREATE PROCEDURE `Sproc_checkOPFileFolderExistsToReplaceFile`(    \n" +
				"	IN pduplicateFileCopyAction VARCHAR(10)    \n" +
				"    )  \n" +
				"BEGIN    \n" +
				"		# temp table created on api side    \n" +
				"		# select * from temp_op_allFilesToReplace;    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allInvalidFilesToReplace ;    \n" +
				"		CREATE TEMPORARY TABLE temp_op_allInvalidFilesToReplace AS    \n" +
				"			SELECT 	oprf.gencFileID , oprf.gencOriginalName , oprf.refTransIDOfWOOP    \n" +
				"			FROM   	temp_op_allFilesToReplace oprf    \n" +
				"				JOIN genericfiles gf1 ON oprf.gencFileID = gf1.gencFileID    \n" +
				"				JOIN generic_folder gf2 ON oprf.refParentId = gf2.gencFolderID    \n" +
				"			WHERE   gf1.deletedAt IS NOT NULL    # deletedAt IS NOT NULL to checked deleted files    \n" +
				"				OR    \n" +
				"				gf2.deletedAt IS NOT NULL   # deletedAt IS NOT NULL to checked deleted folder in which file resides			    \n" +
				"				OR    \n" +
				"				(oprf.refParentId != gf1.refParentId)	# to check refParent is same or not - moved file to other folder    \n" +
				"				OR     \n" +
				"				(oprf.refParentId = gf1.refParentId	# to check refParent folder name is same or not    \n" +
				"				 AND oprf.refParentFolderName != gf2.gencFolderName    \n" +
				"				 );	    \n" +
				"  \n" +
				"  \n" +
				"		IF (pduplicateFileCopyAction = 'RFD') THEN  # Replace the file in the destination    \n" +
				"  \n" +
				"			SELECT oprf.gencFileID gencFileIDOfOpMstFile , gf.gencOriginalName ,    \n" +
				"				gf.gencFileExtension , gf.fileSize ,    \n" +
				"				gf.genFilePath genFilePathOfOpMstFile,    \n" +
				"				oprf.refTransIDOfWOOP , oprf.gencFileIDOfWOOPExistsFile ,    \n" +
				"				(SELECT genFilePath FROM genericfiles WHERE deletedAt IS NULL    \n" +
				"					AND gencFileID = oprf.gencFileIDOfWOOPExistsFile) AS genFilePathOfWOOPExistsFile     \n" +
				"			FROM temp_op_allFilesToReplace oprf    \n" +
				"				JOIN genericfiles gf ON oprf.gencFileID = gf.gencFileID AND gf.deletedAt IS NULL AND gf.isRecycle = 0  \n" +
				"			WHERE oprf.gencFileID NOT IN (SELECT gencFileID FROM temp_op_allInvalidFilesToReplace)  \n" +
				"			;    \n" +
				"  \n" +
				"		ELSEIF(pduplicateFileCopyAction = 'KBF') THEN  # Keep Both File    \n" +
				"  \n" +
				"			SELECT CONCAT((SUBSTRING(gf.gencOriginalName,1,CHAR_LENGTH(gf.gencOriginalName) - (CHAR_LENGTH(gf.gencFileExtension) + 1))),    \n" +
				"					'-',DATE_FORMAT(UTC_TIMESTAMP(),\"%Y%m%d%H%i%s\"),'.',gf.gencFileExtension) gencOriginalName ,     \n" +
				"				gf.gencFileDescription gencFileDescription,     \n" +
				"				gf.gencFileExtension gencFileExtension , gf.gencFileType gencFileType, gf.tags tags ,     \n" +
				"				oprf.refTransIDOfWOOP refTransID , NULL entityID , 'workorder_operation' gencFileOwnerType ,      \n" +
				"				oprf.refParentIdForWOOPNewFile refParentId , gf.fileSize fileSize ,    \n" +
				"				 gf.refTransID refCopyTransID , 'operations' refCopyGencFileOwnerType ,     \n" +
				"				 gf.genFilePath genFilePathOfOpMstFile     \n" +
				"			FROM temp_op_allFilesToReplace oprf    \n" +
				"				JOIN genericfiles gf ON oprf.gencFileID = gf.gencFileID AND gf.deletedAt IS NULL  AND gf.isRecycle = 0  \n" +
				"			WHERE oprf.gencFileID NOT IN (SELECT gencFileID FROM temp_op_allInvalidFilesToReplace)  \n" +
				"			;			    \n" +
				"  \n" +
				"		ELSE    \n" +
				"			SELECT 'invalid parameter';    \n" +
				"		END IF;    \n" +
				"  \n" +
				"  \n" +
				"		SELECT * FROM temp_op_allInvalidFilesToReplace;    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allInvalidFilesToReplace;    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allFilesToReplace ;    \n" +
				"  \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_CopyAssyDocFolderToWODoc`;  \n" +
				"CREATE PROCEDURE `Sproc_CopyAssyDocFolderToWODoc`(        \n" +
				"	IN ppartID INT,                                    \n" +
				"	IN pwoID INT,                                                  \n" +
				"	IN puserID VARCHAR(500)                \n" +
				"    )  \n" +
				"BEGIN        \n" +
				"	INSERT INTO generic_folder                                          \n" +
				"			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                          \n" +
				"			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                          \n" +
				"	SELECT  gf.gencFolderName, pwoID refTransID, '-7' , 'workorder' gencFileOwnerType, gf.roleId, gf.refParentId,                                          \n" +
				"			0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, gf.gencFolderID copyGencFolderID ,        \n" +
				"			gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                         \n" +
				"	FROM generic_folder gf         \n" +
				"	WHERE gf.refTransID = ppartID         \n" +
				"	AND gf.gencFileOwnerType = 'component' AND entityID = -9  AND gf.deletedAt IS NULL AND gf.isRecycle = 0;                                          \n" +
				"  \n" +
				"	UPDATE generic_folder gf1,                                          \n" +
				"	(   SELECT a.gencFolderID, a.copyGencFolderID                                          \n" +
				"		FROM generic_folder a WHERE a.refTransID = pwoID     \n" +
				"		AND a.gencFileOwnerType = 'workorder' AND a.deletedAt IS NULL  AND a.isRecycle = 0                                           \n" +
				"	) gf2                                          \n" +
				"	SET gf1.refParentId = gf2.gencFolderID                                          \n" +
				"	WHERE gf1.refParentId = gf2.copyGencFolderID         \n" +
				"	AND gf1.refTransID = pwoID     \n" +
				"	AND gf1.gencFileOwnerType = 'workorder' AND gf1.deletedAt IS NULL AND gf1.isRecycle = 0;         \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_CopyOpMasterFolderDocToWOOP`;  \n" +
				"CREATE PROCEDURE `Sproc_CopyOpMasterFolderDocToWOOP`(    \n" +
				"	IN pgencFolderIDsToCopy TEXT,    \n" +
				"	IN pgencFileIDsToCopy TEXT,    \n" +
				"	IN popID INT(11),    \n" +
				"	IN pwoIDs TEXT,    \n" +
				"	IN puserID VARCHAR(50),    \n" +
				"	IN pparentFolderIDOfSelected INT(11)   # parent folder of selected folder if any     \n" +
				"  \n" +
				")  \n" +
				"BEGIN    \n" +
				"	# --------------- Copy folder related changes : op master  -----------------------  \n" +
				"	DECLARE t_lv_woID INT(11);           \n" +
				"	DECLARE t_lv_woOPID INT(11);    \n" +
				"	DECLARE i INT DEFAULT 0;     \n" +
				"	DECLARE totWOIDs INT DEFAULT 0;     \n" +
				"	DECLARE lv_mainParentFolderID INT(11);     \n" +
				"	DECLARE c_pf INT DEFAULT 0;    \n" +
				"	DECLARE lv_totFolderInsideMainParent INT DEFAULT 0;    \n" +
				"	DECLARE lv_gencFolderIDOfOpToGetInnerFolders INT(11);    \n" +
				"	DECLARE lv_existsParentFolderIDForWOOP INT(11);    \n" +
				"	DECLARE isSelectedParentIsMainParentFolder TINYINT(1);     \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_op_allFoldersToCopy;    \n" +
				"	CREATE TEMPORARY TABLE temp_op_allFoldersToCopy (    \n" +
				"		gencFolderID INT(11),    \n" +
				"		gencFolderName VARCHAR(255),    \n" +
				"		refParentId INT(11),    \n" +
				"		roleId INT(11),    \n" +
				"		copyInnerFilesFolder INT(1),    \n" +
				"		levelID INT(11)    \n" +
				"	);    \n" +
				"  \n" +
				"	# when any operation master folder selectd     \n" +
				"	IF (pgencFolderIDsToCopy IS NOT NULL AND pgencFolderIDsToCopy != '') THEN    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allDeletedFoldersFromCopy;     \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allDeletedFoldersFromCopy;    \n" +
				"		SET @query_op_allDeletedFoldersFromCopy = CONCAT('    \n" +
				"			CREATE TEMPORARY TABLE temp_op_allDeletedFoldersFromCopy    \n" +
				"				SELECT 	gencFolderName     \n" +
				"				FROM 	generic_folder    \n" +
				"				WHERE 	deletedAt IS NOT NULL    \n" +
				"                AND 	isRecycle = 0  \n" +
				"				AND 	gencFolderID IN (',pgencFolderIDsToCopy,')    \n" +
				"		 ');	    \n" +
				"		PREPARE st_query_op_allDeletedFolders FROM @query_op_allDeletedFoldersFromCopy;                                                                \n" +
				"		EXECUTE st_query_op_allDeletedFolders;			    \n" +
				"  \n" +
				"  \n" +
				"		# get op master all inner folders     \n" +
				"		 SET @query_op_allInnerFolder = CONCAT('    \n" +
				"			INSERT INTO temp_op_allFoldersToCopy(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,`copyInnerFilesFolder`,`levelID`)    \n" +
				"			SELECT al.gencFolderID, al.gencFolderName,al.refParentId,al.roleId ,al.copyInnerFilesFolder, al.levelID    \n" +
				"			FROM (    \n" +
				"					WITH recursive cte AS (    \n" +
				"						  SELECT     gencFolderID ,gencFolderName, refParentId,roleId,    \n" +
				"								1 copyInnerFilesFolder,1 levelID    \n" +
				"						  FROM       generic_folder    \n" +
				"						  WHERE      gencFolderID IN (',pgencFolderIDsToCopy,')    \n" +
				"						  AND 	     deletedAt IS NULL	 AND isRecycle = 0  \n" +
				"						  AND 	     gencFileOwnerType = \"operations\"  AND refTransID =  ',popID,'	    \n" +
				"					  UNION     \n" +
				"						SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId ,    \n" +
				"								1 copyInnerFilesFolder , levelID + 1 levelID    \n" +
				"						FROM       generic_folder gf    \n" +
				"						INNER JOIN cte ON gf.refParentId = cte.gencFolderID    \n" +
				"						WHERE      gf.deletedAt IS NULL  AND gf.isRecycle = 0  \n" +
				"						AND 	   gf.gencFileOwnerType = \"operations\"  AND gf.refTransID =  ',popID,'	    \n" +
				"					  )    \n" +
				"					  SELECT * FROM cte    \n" +
				"				) al    \n" +
				"		 ');	    \n" +
				"		PREPARE st_query_op_allInnerFolder FROM @query_op_allInnerFolder;                                                                \n" +
				"		EXECUTE st_query_op_allInnerFolder;	    \n" +
				"  \n" +
				"		# get outer(reverse) folder list from selected parent - op master    \n" +
				"		SET @query_op_allOuterFolder = CONCAT('    \n" +
				"			INSERT INTO temp_op_allFoldersToCopy(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,`copyInnerFilesFolder`,`levelID`)    \n" +
				"			SELECT al.refParentId, al.gencFolderName,al.refParent ,al.roleId ,al.copyInnerFilesFolder, al.levelID    \n" +
				"			FROM (    \n" +
				"					WITH recursive cte AS (    \n" +
				"					  SELECT     refParentId, gencFolderName, 0 AS refParent ,roleId, 0 copyInnerFilesFolder , 0 levelID    \n" +
				"					  FROM       generic_folder    \n" +
				"					  WHERE      gencFolderID IN (',pgencFolderIDsToCopy,')     \n" +
				"					  AND 	     deletedAt IS NULL  AND isRecycle = 0  \n" +
				"					  AND 	     gencFileOwnerType = \"operations\"  AND refTransID =  ',popID,'	    \n" +
				"				     UNION     \n" +
				"					SELECT     gf.refParentId,gf.gencFolderName,0 AS refParent ,gf.roleId ,0 copyInnerFilesFolder , levelID - 1 levelID    \n" +
				"					FROM       generic_folder gf    \n" +
				"							INNER JOIN cte ON gf.gencFolderID = cte.refParentId    \n" +
				"					WHERE      gf.deletedAt IS NULL  AND gf.isRecycle = 0  \n" +
				"					AND 	   gf.refParentId IS NOT NULL    \n" +
				"					AND 	   gf.gencFileOwnerType = \"operations\"  AND gf.refTransID =  ',popID,'    \n" +
				"					)    \n" +
				"					SELECT DISTINCT cter.refParentId  ,gfr.gencFolderName,gfr.refParentId AS refParent ,    \n" +
				"						gfr.roleId,cter.copyInnerFilesFolder , cter.levelID    \n" +
				"					FROM cte cter    \n" +
				"					INNER JOIN generic_folder gfr ON gfr.gencFolderID = cter.refParentId     \n" +
				"						AND gfr.gencFileOwnerType = \"operations\"  AND gfr.refTransID =  ',popID,'    \n" +
				"						AND gfr.refTransId != 0    \n" +
				"						AND gfr.deletedAt IS NULL   \n" +
				"                        AND gfr.isRecycle = 0  \n" +
				"  \n" +
				"				) al	    \n" +
				"		');	    \n" +
				"		PREPARE st_query_op_allOuterFolder FROM @query_op_allOuterFolder;                                                                \n" +
				"		EXECUTE st_query_op_allOuterFolder;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	ELSE     \n" +
				"		# when only file selectd >  selected file has single parent    \n" +
				"		# get outer(reverse) folder list from selected file parent - op master    \n" +
				"		INSERT INTO temp_op_allFoldersToCopy(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,`copyInnerFilesFolder`,`levelID`)    \n" +
				"			SELECT al.refParentId, al.gencFolderName,al.refParent ,al.roleId ,al.copyInnerFilesFolder ,al.levelID    \n" +
				"			FROM (			    \n" +
				"  \n" +
				"					WITH recursive cte AS (    \n" +
				"					  SELECT     refParentId, gencFolderName, 0 AS refParent ,roleId, 0 copyInnerFilesFolder, 0 levelID    \n" +
				"					  FROM       generic_folder    \n" +
				"					  WHERE      gencFolderID IN (pparentFolderIDOfSelected)     \n" +
				"					  AND 	     deletedAt IS NULL	AND isRecycle = 0    \n" +
				"					  AND 	     gencFileOwnerType = \"operations\"  AND refTransID =  popID    \n" +
				"				     UNION     \n" +
				"					SELECT     gf.refParentId, gf.gencFolderName, 0 AS refParent,gf.roleId , 0 copyInnerFilesFolder, levelID - 1 levelID    \n" +
				"					FROM       generic_folder gf    \n" +
				"							INNER JOIN cte ON gf.gencFolderID = cte.refParentId    \n" +
				"					WHERE      gf.deletedAt IS NULL  AND gf.isRecycle = 0  \n" +
				"					AND 	   gf.refParentId IS NOT NULL    \n" +
				"					AND 	   gf.gencFileOwnerType = \"operations\"  AND gf.refTransID =  popID    \n" +
				"					)    \n" +
				"					SELECT DISTINCT cter.refParentId  ,gfr.gencFolderName,gfr.refParentId AS refParent,    \n" +
				"							gfr.roleId , cter.copyInnerFilesFolder,  cter.levelID    \n" +
				"					FROM cte cter    \n" +
				"					INNER JOIN generic_folder gfr ON gfr.gencFolderID = cter.refParentId     \n" +
				"						AND gfr.gencFileOwnerType = \"operations\"  AND gfr.refTransID =  popID    \n" +
				"						AND gfr.refTransId != 0 AND gfr.deletedAt IS NULL  AND gfr.isRecycle = 0  \n" +
				"					UNION    \n" +
				"					SELECT  pparentFolderIDOfSelected refParentId , gfr.gencFolderName , gfr.refParentId refParent,    \n" +
				"							gfr.roleId, 0 copyInnerFilesFolder,  IFNULL(MAX(cter.levelID) + 1 , 0)    \n" +
				"					FROM generic_folder gfr    \n" +
				"						INNER JOIN cte cter ON gfr.refParentId = cter.refParentId     \n" +
				"					WHERE deletedAt IS NULL  AND gfr.isRecycle = 0  \n" +
				"					AND gencFolderID = pparentFolderIDOfSelected    \n" +
				"					AND gencFileOwnerType = \"operations\"  AND refTransID =  popID	    \n" +
				"  \n" +
				"				) al;	    \n" +
				"  \n" +
				"	END IF;    \n" +
				"  \n" +
				"  \n" +
				"	# get main parent role folder ID like super admin,etc    \n" +
				"	# if already main parent like super admin then its refParent is null so main parent is same one    \n" +
				"	SELECT gencFolderID INTO lv_mainParentFolderID    \n" +
				"	FROM generic_folder    \n" +
				"	WHERE deletedAt IS NULL    \n" +
				"	AND gencFolderID =  pparentFolderIDOfSelected    \n" +
				"	AND gencFileOwnerType IS NULL AND refTransID = 0     \n" +
				"	AND refParentId IS NULL AND entityID IS NULL AND isRecycle = 0;    \n" +
				"  \n" +
				"	IF(lv_mainParentFolderID IS NULL) THEN    \n" +
				"		SET isSelectedParentIsMainParentFolder = 0;    \n" +
				"  \n" +
				"		SELECT gencFolderID INTO lv_mainParentFolderID    \n" +
				"		FROM generic_folder    \n" +
				"		WHERE deletedAt IS NULL AND isRecycle = 0  \n" +
				"		AND gencFolderID IN (SELECT refParentId FROM temp_op_allFoldersToCopy)       \n" +
				"		AND refTransID = 0 AND refParentId IS NULL AND entityID IS NULL ;    \n" +
				"  \n" +
				"	ELSE    \n" +
				"		SET isSelectedParentIsMainParentFolder = 1;    \n" +
				"	END IF;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	ALTER TABLE temp_op_allFoldersToCopy    \n" +
				"	ADD COLUMN folderLevel INT(11);    \n" +
				"  \n" +
				"	# if only file selected from super admin level type then it is always file at 1st level    \n" +
				"	# and folder at 0 level    \n" +
				"	IF((pgencFolderIDsToCopy IS NULL OR pgencFolderIDsToCopy = '') AND (SELECT COUNT(1) FROM temp_op_allFoldersToCopy) = 1    \n" +
				"		AND isSelectedParentIsMainParentFolder = 1) THEN    \n" +
				"  \n" +
				"			UPDATE temp_op_allFoldersToCopy    \n" +
				"			SET 	folderLevel = 0;    \n" +
				"  \n" +
				"	ELSE    \n" +
				"  \n" +
				"		# make levelID wise folder group level     \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allFolders_level;    \n" +
				"		CREATE TEMPORARY TABLE temp_op_allFolders_level    \n" +
				"			SELECT gencFolderID , DENSE_RANK() OVER (    \n" +
				"						ORDER BY levelID    \n" +
				"						) folderLevel    \n" +
				"			FROM temp_op_allFoldersToCopy ;    \n" +
				"  \n" +
				"		# update original table op master foder with folderLevel    \n" +
				"		UPDATE temp_op_allFoldersToCopy gf1 , temp_op_allFolders_level gf2    \n" +
				"		SET gf1.folderLevel = gf2.folderLevel     \n" +
				"		WHERE gf1.gencFolderID = gf2.gencFolderID ;    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allFolders_level;     \n" +
				"  \n" +
				"  \n" +
				"		# insert folder which is super admin level main parent    \n" +
				"		INSERT INTO temp_op_allFoldersToCopy(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,    \n" +
				"								`copyInnerFilesFolder`,`levelID` ,`folderLevel`)    \n" +
				"		SELECT 	gencFolderID ,gencFolderName ,  refParentId , roleId ,     \n" +
				"			0 copyInnerFilesFolder , 0 levelID , 0 folderLevel    \n" +
				"		FROM 	generic_folder	    \n" +
				"		WHERE 	gencFolderID = (lv_mainParentFolderID) AND isRecycle = 0;    \n" +
				"  \n" +
				"	END IF;		    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	# --------------------- Copy files related changes : op master ------------------------    \n" +
				"  \n" +
				"	IF (pgencFileIDsToCopy IS NOT NULL AND pgencFileIDsToCopy != '') THEN    \n" +
				"  \n" +
				"		# get all deleted files from selected whcih not required to copy    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allDeletedFilesFromCopy;    \n" +
				"		SET @query_op_allDeletedFilesFromCopy = CONCAT('    \n" +
				"			CREATE TEMPORARY TABLE temp_op_allDeletedFilesFromCopy    \n" +
				"				SELECT 	gencOriginalName     \n" +
				"				FROM 	genericfiles    \n" +
				"				WHERE 	deletedAt IS NOT NULL AND isRecycle = 0  \n" +
				"				AND 	gencFileID IN (',pgencFileIDsToCopy,')    \n" +
				"		 ');	    \n" +
				"		PREPARE st_query_op_allDeletedFiles FROM @query_op_allDeletedFilesFromCopy;                                                                \n" +
				"		EXECUTE st_query_op_allDeletedFiles;    \n" +
				"  \n" +
				"	END IF;    \n" +
				"  \n" +
				"  \n" +
				"	# get op master all files (selected files + selected folder inder files)    \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_op_allInnerFiles;    \n" +
				"	SET @query_op_allInnerFiles = CONCAT('    \n" +
				"		CREATE TEMPORARY TABLE  temp_op_allInnerFiles AS    \n" +
				"			SELECT   gencFileID , gencOriginalName , refParentId , genFilePath ,    \n" +
				"				 gencFileDescription, gencFileExtension, gencFileType , tags , fileSize    \n" +
				"			FROM     genericfiles    \n" +
				"			WHERE    deletedAt IS NULL  AND isRecycle = 0  \n" +
				"			AND      gencFileOwnerType = \"operations\"  AND refTransID =  ',popID,'    \n" +
				"			AND     ( gencFileID IN (',IFNULL(pgencFileIDsToCopy,0),')     \n" +
				"					OR ( refParentId IN (SELECT gencFolderID     \n" +
				"								FROM temp_op_allFoldersToCopy     \n" +
				"								WHERE copyInnerFilesFolder = 1) )    \n" +
				"				)      \n" +
				"		');    \n" +
				"	PREPARE st_query_op_allInnerFiles FROM @query_op_allInnerFiles;                                                                \n" +
				"	EXECUTE st_query_op_allInnerFiles;		    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	# --------------- loop over work order and copy all folder and files ---------------------    \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_woIDs;    \n" +
				"	CREATE TEMPORARY TABLE  temp_woIDs AS    \n" +
				"	WITH recursive    \n" +
				"		T AS ( SELECT pwoIDs AS items),    \n" +
				"		N AS ( SELECT 1 AS n UNION SELECT n + 1 FROM N, T    \n" +
				"		WHERE n <= LENGTH(items) - LENGTH(REPLACE(items, ',', '')))    \n" +
				"		SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(items, ',', n), ',', -1)    \n" +
				"		group_name FROM N, T;    \n" +
				"  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_op_wo_allNewFilesToCopy;    \n" +
				"	CREATE TEMPORARY TABLE temp_op_wo_allNewFilesToCopy(    \n" +
				"		gencOriginalName VARCHAR(255),    \n" +
				"		gencFileDescription LONGTEXT,    \n" +
				"		gencFileExtension VARCHAR(100),    \n" +
				"		gencFileType VARCHAR(100),    \n" +
				"		tags LONGTEXT,    \n" +
				"		refTransID INT(11),    \n" +
				"		entityID INT(11),    \n" +
				"		gencFileOwnerType VARCHAR(255),    \n" +
				"		refParentId INT(11),    \n" +
				"		fileSize BIGINT(20),    \n" +
				"		refCopyTransID INT(11),    \n" +
				"		refCopyGencFileOwnerType VARCHAR(150) ,    \n" +
				"		genFilePathOfOpMstFile VARCHAR(1000)    \n" +
				"  \n" +
				"	);    \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_op_wo_allDuplicateFilesToCopy;    \n" +
				"	CREATE TEMPORARY TABLE temp_op_wo_allDuplicateFilesToCopy(    \n" +
				"		gencFileID INT(11),    \n" +
				"		gencOriginalName VARCHAR(255),    \n" +
				"		refParentId INT(11),    \n" +
				"		refParentFolderName VARCHAR(255),    \n" +
				"		fileLevel INT(11),    \n" +
				"		refTransIDOfWOOP INT(11),    \n" +
				"		refParentIdForWOOPNewFile INT(11),    \n" +
				"		gencFileIDOfWOOPExistsFile INT(11)    \n" +
				"	);    \n" +
				"  \n" +
				"  \n" +
				"	SELECT COUNT(*) FROM temp_woIDs INTO totWOIDs;            \n" +
				"	WHILE i < totWOIDs DO      \n" +
				"  \n" +
				"		SET t_lv_woID = NULL;          \n" +
				"		SELECT * INTO t_lv_woID FROM temp_woIDs LIMIT i,1 ;       \n" +
				"  \n" +
				"		SET t_lv_woOPID = NULL;      \n" +
				"		SELECT woOPID INTO t_lv_woOPID FROM workorder_operation WHERE deletedAt IS NULL AND woID = t_lv_woID AND opID = popID ;    \n" +
				"  \n" +
				"		IF (t_lv_woOPID IS NOT NULL AND t_lv_woOPID != '') THEN    \n" +
				"  \n" +
				"  \n" +
				"		#-------------- work order operation all folders from root level like super admin -------------------    \n" +
				"  \n" +
				"		IF(pgencFolderIDsToCopy IS NOT NULL OR     \n" +
				"			(pgencFileIDsToCopy IS NOT NULL AND isSelectedParentIsMainParentFolder = 0)) THEN		    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woop_allExistsFolders;    \n" +
				"  \n" +
				"		CREATE TEMPORARY TABLE temp_woop_allExistsFolders AS    \n" +
				"			WITH recursive cte AS (    \n" +
				"				SELECT     gencFolderID ,gencFolderName, refParentId,roleId,0 folderLevel    \n" +
				"				FROM       generic_folder    \n" +
				"				WHERE      gencFolderID IN (lv_mainParentFolderID)    \n" +
				"				AND 	   deletedAt IS NULL AND isRecycle = 0	    \n" +
				"			      UNION     \n" +
				"				SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId , folderLevel + 1 folderLevel    \n" +
				"				FROM       generic_folder gf    \n" +
				"				INNER JOIN cte ON gf.refParentId = cte.gencFolderID    \n" +
				"				WHERE      gf.deletedAt IS NULL AND gf.isRecycle = 0  \n" +
				"				AND 	   gf.gencFileOwnerType = \"workorder_operation\"  AND gf.refTransID = t_lv_woOPID    \n" +
				"				  )    \n" +
				"				SELECT * FROM cte ;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"		#-------------- start - create all required folders -------------------    \n" +
				"  \n" +
				"		# cretae new temp table from copy op all folder    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allFoldersToCopy_ref;    \n" +
				"		CREATE TEMPORARY TABLE temp_op_allFoldersToCopy_ref AS     \n" +
				"			SELECT * FROM temp_op_allFoldersToCopy;    \n" +
				"  \n" +
				"		ALTER TABLE temp_op_allFoldersToCopy_ref     \n" +
				"		ADD COLUMN refParentIdForWOOPNewFolder INT(11);    \n" +
				"  \n" +
				"		# get wo op existing folder ref and update into new creting folder as parentRefID     \n" +
				"		UPDATE temp_op_allFoldersToCopy_ref gf1    \n" +
				"		SET refParentIdForWOOPNewFolder = (SELECT gencFolderID    \n" +
				"					FROM temp_woop_allExistsFolders    \n" +
				"					WHERE gencFolderName = (SELECT gencFolderName FROM temp_op_allFoldersToCopy     \n" +
				"								WHERE gencFolderID = gf1.refParentId)    \n" +
				"					AND folderLevel =  gf1.folderLevel - 1     \n" +
				"					) ;    \n" +
				"  \n" +
				"  \n" +
				"		# create all required folder from op master to wo op    \n" +
				"		INSERT INTO generic_folder                                                    \n" +
				"			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,    \n" +
				"			`roleId`,`refParentId`,                                                    \n" +
				"			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,    \n" +
				"			`refCopyTransID`,`refCopyGencFileOwnerType`)                                             \n" +
				"		SELECT  gf.gencFolderName,  t_lv_woOPID refTransID , NULL entityID, 'workorder_operation' gencFileOwnerType,     \n" +
				"			gf.roleId, IFNULL(refParentIdForWOOPNewFolder,gf.refParentId) refParentId,                                                    \n" +
				"			0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, gf.gencFolderID copyGencFolderID ,                  \n" +
				"			popID refCopyTransID, 'operations' refCopyGencFileOwnerType                                   \n" +
				"		FROM temp_op_allFoldersToCopy_ref gf    \n" +
				"		WHERE gencFolderName NOT IN (SELECT gencFolderName FROM temp_woop_allExistsFolders    \n" +
				"						WHERE folderLevel = gf.folderLevel);    \n" +
				"  \n" +
				"		# get wo op newly creted parent folder ref and update to new creted child folder as parentRefID							    \n" +
				"		 UPDATE generic_folder gf1,                                                    \n" +
				"			 (   SELECT a.gencFolderID, a.copyGencFolderID                                                    \n" +
				"			 	FROM generic_folder a     \n" +
				"			 	WHERE a.refTransID = t_lv_woOPID     \n" +
				"			 	AND a.gencFileOwnerType = 'workorder_operation' AND a.deletedAt IS NULL AND a.isRecycle = 0                                                 \n" +
				"			 ) gf2                                                    \n" +
				"		SET gf1.refParentId = gf2.gencFolderID                                                    \n" +
				"		WHERE gf1.refParentId = gf2.copyGencFolderID                   \n" +
				"		AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation'    \n" +
				"		AND gf1.deletedAt IS NULL AND gf1.isRecycle = 0;      \n" +
				"  \n" +
				"		#-------------- end - create all required folders -------------------	    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woop_allFoldersAfterCreated;    \n" +
				"		CREATE TEMPORARY TABLE temp_woop_allFoldersAfterCreated AS    \n" +
				"			WITH recursive cte AS (    \n" +
				"				SELECT     gencFolderID ,gencFolderName, refParentId,roleId,0 folderLevel    \n" +
				"				FROM       generic_folder    \n" +
				"				WHERE      gencFolderID IN (lv_mainParentFolderID)    \n" +
				"				AND 	   deletedAt IS NULL AND isRecycle = 0	    \n" +
				"			      UNION     \n" +
				"				SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId , folderLevel + 1 folderLevel    \n" +
				"				FROM       generic_folder gf    \n" +
				"				INNER JOIN cte ON gf.refParentId = cte.gencFolderID    \n" +
				"				WHERE      gf.deletedAt IS NULL  AND gf.isRecycle = 0	  \n" +
				"				AND 	   gf.gencFileOwnerType = \"workorder_operation\"  AND gf.refTransID = t_lv_woOPID    \n" +
				"				  )    \n" +
				"				SELECT * FROM cte ;    \n" +
				"  \n" +
				"  \n" +
				"		END IF;    \n" +
				"  \n" +
				"		#------------------- start - create all required files -------------------    \n" +
				"  \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allInnerFiles_ref;    \n" +
				"		CREATE TEMPORARY TABLE temp_op_allInnerFiles_ref    \n" +
				"			SELECT gf.* , (SELECT folderLevel FROM temp_op_allFoldersToCopy     \n" +
				"						WHERE gencFolderID = gf.refParentId) + 1 AS  fileLevel    \n" +
				"			FROM temp_op_allInnerFiles gf ;    \n" +
				"  \n" +
				"		ALTER TABLE temp_op_allInnerFiles_ref     \n" +
				"		ADD COLUMN refParentIdForWOOPNewFile INT(11);    \n" +
				"  \n" +
				"		# get wo op folder ref and update in to new creating files as parentRefID - refParent of file is at file current level - 1    \n" +
				"		IF((pgencFolderIDsToCopy IS NULL OR pgencFolderIDsToCopy = '') AND (SELECT COUNT(1) FROM temp_op_allFoldersToCopy) = 1    \n" +
				"			AND isSelectedParentIsMainParentFolder = 1) THEN    \n" +
				"  \n" +
				"			# if only file selected from super admin level type then it is always file at 1st level    \n" +
				"			# and folder at 0 level    \n" +
				"			UPDATE temp_op_allInnerFiles_ref gf1    \n" +
				"			SET refParentIdForWOOPNewFile = gf1.refParentId;    \n" +
				"  \n" +
				"		ELSE    \n" +
				"  \n" +
				"			UPDATE temp_op_allInnerFiles_ref gf1    \n" +
				"			SET refParentIdForWOOPNewFile = (SELECT gencFolderID FROM temp_woop_allFoldersAfterCreated    \n" +
				"							WHERE gencFolderName = (SELECT gencFolderName FROM temp_op_allFoldersToCopy     \n" +
				"										WHERE gencFolderID = gf1.refParentId)    \n" +
				"							AND folderLevel =  gf1.fileLevel - 1     \n" +
				"							) ;	    \n" +
				"		END IF;	    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"		#-------------- get work order operation all files from root level like super admin -------------------    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woop_allExistsFiles;    \n" +
				"  \n" +
				"		IF((pgencFolderIDsToCopy IS NULL OR pgencFolderIDsToCopy = '') AND (SELECT COUNT(1) FROM temp_op_allFoldersToCopy) = 1    \n" +
				"			AND isSelectedParentIsMainParentFolder = 1) THEN    \n" +
				"  \n" +
				"			CREATE TEMPORARY TABLE temp_woop_allExistsFiles AS    \n" +
				"				SELECT   gencFileID , gencOriginalName , refParentId     \n" +
				"				FROM     genericfiles    \n" +
				"				WHERE    deletedAt IS NULL AND isRecycle = 0  \n" +
				"				AND      gencFileOwnerType = \"workorder_operation\"  AND refTransID =  t_lv_woOPID    \n" +
				"				AND      refParentId = lv_mainParentFolderID			    \n" +
				"					 ;    \n" +
				"  \n" +
				"			ALTER TABLE temp_woop_allExistsFiles     \n" +
				"			ADD COLUMN fileLevel INT(11);    \n" +
				"  \n" +
				"			# get wo op ref parent folder level and file is in it so refParentFolderLevel + 1    \n" +
				"			UPDATE temp_woop_allExistsFiles gf    \n" +
				"			SET fileLevel =  1 ; 				    \n" +
				"  \n" +
				"		ELSE    \n" +
				"  \n" +
				"			CREATE TEMPORARY TABLE temp_woop_allExistsFiles AS    \n" +
				"				SELECT   gencFileID , gencOriginalName , refParentId     \n" +
				"				FROM     genericfiles    \n" +
				"				WHERE    deletedAt IS NULL  AND isRecycle = 0  \n" +
				"				AND      gencFileOwnerType = \"workorder_operation\"  AND refTransID =  t_lv_woOPID    \n" +
				"				AND     ( refParentId = lv_mainParentFolderID    \n" +
				"						OR  refParentId IN (SELECT gencFolderID FROM temp_woop_allExistsFolders ) 			    \n" +
				"					)  ;    \n" +
				"  \n" +
				"			ALTER TABLE temp_woop_allExistsFiles     \n" +
				"			ADD COLUMN fileLevel INT(11);    \n" +
				"  \n" +
				"			# get wo op ref parent folder level and file is in it so refParentFolderLevel + 1    \n" +
				"			UPDATE temp_woop_allExistsFiles gf    \n" +
				"			SET fileLevel = (SELECT folderLevel FROM temp_woop_allExistsFolders     \n" +
				"							WHERE gencFolderID = gf.refParentId) + 1 ;     \n" +
				"  \n" +
				"		END IF;		    \n" +
				"  \n" +
				"  \n" +
				"		# create - wo op not exists file from op master at their wo op refParentFolder level    \n" +
				"		INSERT INTO temp_op_wo_allNewFilesToCopy (`gencOriginalName` , `gencFileDescription` ,    \n" +
				"			`gencFileExtension` ,`gencFileType` , `tags` ,    \n" +
				"			  `refTransID`,`entityID` , `gencFileOwnerType`,    \n" +
				"			`refParentId` , `fileSize` ,    \n" +
				"			 `refCopyTransID` , `refCopyGencFileOwnerType` ,    \n" +
				"			 `genFilePathOfOpMstFile`)     \n" +
				"		SELECT  gf.gencOriginalName gencOriginalName , gf.gencFileDescription gencFileDescription,     \n" +
				"			gf.gencFileExtension gencFileExtension, gf.gencFileType gencFileType, gf.tags tags,     \n" +
				"			t_lv_woOPID refTransID , NULL entityID , 'workorder_operation' gencFileOwnerType ,     \n" +
				"			 gf.refParentIdForWOOPNewFile refParentId ,gf.fileSize fileSize,    \n" +
				"			 popID refCopyTransID , 'operations' refCopyGencFileOwnerType ,     \n" +
				"			 gf.genFilePath genFilePathOfOpMstFile    \n" +
				"		FROM temp_op_allInnerFiles_ref gf    \n" +
				"		WHERE gencOriginalName NOT IN (SELECT gencOriginalName FROM temp_woop_allExistsFiles    \n" +
				"						WHERE fileLevel = gf.fileLevel     \n" +
				"						AND refParentId = gf.refParentIdForWOOPNewFile) ;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"		INSERT INTO temp_op_wo_allDuplicateFilesToCopy     \n" +
				"		(`gencFileID`,`gencOriginalName`,`refParentId`,    \n" +
				"			`refParentFolderName`,    \n" +
				"			`fileLevel`, `refTransIDOfWOOP`, `refParentIdForWOOPNewFile`,    \n" +
				"			`gencFileIDOfWOOPExistsFile`)    \n" +
				"		SELECT gfo.`gencFileID` , gfo.`gencOriginalName` , gfo.`refParentId` ,    \n" +
				"			(SELECT gencFolderName FROM generic_folder WHERE gencFolderID = gfo.`refParentId`) refParentFolderName ,    \n" +
				"			gfo.fileLevel, t_lv_woOPID refTransIDOfWOOP , gfo.`refParentIdForWOOPNewFile` ,    \n" +
				"			gfwoop.gencFileID AS gencFileIDOfWOOPExistsFile    \n" +
				"		FROM temp_op_allInnerFiles_ref gfo     \n" +
				"			JOIN temp_woop_allExistsFiles gfwoop ON gfo.gencOriginalName = gfwoop.gencOriginalName    \n" +
				"								AND gfo.fileLevel = gfwoop.fileLevel    \n" +
				"								AND gfo.refParentIdForWOOPNewFile = gfwoop.refParentId     \n" +
				"		;    \n" +
				"  \n" +
				"		#-------------- end - create all required files -------------------    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woop_allExistsFolders;    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allFoldersToCopy_ref;    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woop_allFoldersAfterCreated;    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_op_allInnerFiles_ref;    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woop_allExistsFiles;    \n" +
				"  \n" +
				"		END IF;    \n" +
				"  \n" +
				"	SET i = i + 1;  	    \n" +
				"  \n" +
				"	END WHILE;     \n" +
				"  \n" +
				"	SELECT 1 AS iscopysuccess;    \n" +
				"  \n" +
				"	# SELECT \"new file list to copy all\";    \n" +
				"	SELECT * FROM temp_op_wo_allNewFilesToCopy;	    \n" +
				"  \n" +
				"	# SELECT \"duplicate files\";    \n" +
				"	SELECT * FROM temp_op_wo_allDuplicateFilesToCopy;    \n" +
				"  \n" +
				"	# SELECT 'deleted_source_folder' ;    \n" +
				"	IF (pgencFolderIDsToCopy IS NOT NULL AND pgencFolderIDsToCopy != '') THEN    \n" +
				"		SELECT * FROM temp_op_allDeletedFoldersFromCopy;    \n" +
				"	ELSE     \n" +
				"		SELECT 0 AS deleted_source_folder;    \n" +
				"	END IF;	    \n" +
				"  \n" +
				"	# SELECT 'deleted_source_files' ;    \n" +
				"	IF (pgencFileIDsToCopy IS NOT NULL AND pgencFileIDsToCopy != '') THEN    \n" +
				"		SELECT * FROM temp_op_allDeletedFilesFromCopy;    \n" +
				"	ELSE    \n" +
				"		SELECT 0 AS deleted_source_files;	    \n" +
				"	END IF;    \n" +
				"  \n" +
				"  \n" +
				"	 DROP TEMPORARY TABLE IF EXISTS temp_op_allFoldersToCopy;    \n" +
				"	 DROP TEMPORARY TABLE IF EXISTS temp_op_allInnerFiles;    \n" +
				"	 DROP TEMPORARY TABLE IF EXISTS temp_woIDs;    \n" +
				"	 DROP TEMPORARY TABLE IF EXISTS temp_op_wo_allNewFilesToCopy;    \n" +
				"	 DROP TEMPORARY TABLE IF EXISTS temp_op_wo_allDuplicateFilesToCopy;    \n" +
				"	 DROP TEMPORARY TABLE IF EXISTS temp_op_allDeletedFoldersFromCopy;    \n" +
				"	 DROP TEMPORARY TABLE IF EXISTS temp_op_allDeletedFilesFromCopy;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_CopyRFQAssyDocFolderToNewRFQAssy`;  \n" +
				"CREATE PROCEDURE `Sproc_CopyRFQAssyDocFolderToNewRFQAssy`(          \n" +
				"	IN pfromRFQAssyID INT,                                                    \n" +
				"	IN ptoRFQAssyID INT,                                                    \n" +
				"	IN puserID VARCHAR(500)                  \n" +
				"    )  \n" +
				"BEGIN          \n" +
				"	INSERT INTO generic_folder                                            \n" +
				"			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                            \n" +
				"			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                            \n" +
				"	SELECT  gf.gencFolderName, ptoRFQAssyID refTransID, null , 'bom' gencFileOwnerType, gf.roleId, gf.refParentId,                                            \n" +
				"			0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, gf.gencFolderID copyGencFolderID ,          \n" +
				"			gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                           \n" +
				"	FROM generic_folder gf           \n" +
				"	WHERE gf.refTransID = pfromRFQAssyID  AND gf.isRecycle = 0        \n" +
				"	AND gf.gencFileOwnerType = 'bom' AND gf.deletedAt IS NULL ;                            \n" +
				"  \n" +
				"	UPDATE generic_folder gf1,                                            \n" +
				"	(   SELECT a.gencFolderID, a.copyGencFolderID                                            \n" +
				"		FROM generic_folder a WHERE a.refTransID = ptoRFQAssyID       \n" +
				"		AND a.gencFileOwnerType = 'bom' AND a.deletedAt IS NULL AND a.isRecycle = 0  \n" +
				"	) gf2                                            \n" +
				"	SET gf1.refParentId = gf2.gencFolderID                                            \n" +
				"	WHERE gf1.refParentId = gf2.copyGencFolderID           \n" +
				"	AND gf1.refTransID = ptoRFQAssyID  AND gf1.isRecycle = 0      \n" +
				"	AND gf1.gencFileOwnerType = 'bom' AND gf1.deletedAt IS NULL ;           \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_CopyWorkorder`;  \n" +
				"CREATE PROCEDURE `Sproc_CopyWorkorder`(                                                                \n" +
				"	IN woID INT(1),                                                                \n" +
				"	IN woNumber VARCHAR(11),                                                                \n" +
				"	IN ppartID INT,                                                                 \n" +
				"	IN excessQty INT(1),                                                                \n" +
				"	IN buildQty INT(1),                                                         \n" +
				"	IN userID INT(1),                                                                \n" +
				"	IN ECORemark VARCHAR(100),                                                                \n" +
				"	IN FCORemark VARCHAR(100),                                                                \n" +
				"	IN isRevision INT(1),                                                          \n" +
				"	IN woType INT(11),                                                        \n" +
				"	IN ecoReqID INT(11),                                      \n" +
				"	IN pcustomerID INT(11),                                    \n" +
				"	IN pisRevisedWO INT (11),                                    \n" +
				"	IN pterminateWOID INT (11),                                    \n" +
				"	IN pterminateWOOPID INT (11),                                    \n" +
				"	IN pisHotJob INT (11)  ,                                    \n" +
				"	IN pinitialInternalVersion VARCHAR (50),                              \n" +
				"	IN pisCopyOPFrom VARCHAR(100),                              \n" +
				"	IN pParentWOID VARCHAR(100)                                 \n" +
				")  \n" +
				"BEGIN                                                                \n" +
				"DECLARE insertedWOID INT(1);                                            \n" +
				"DECLARE refPartID INT(1);                                                              \n" +
				"DECLARE insertedSubFormTransID INT(11);                                                              \n" +
				"DECLARE lv_subFormTransID_from INT(11);                                                              \n" +
				"DECLARE lv_parentDataElementID_from INT(11);                                                              \n" +
				"DECLARE lv_rowNumber_from INT(11);                                                              \n" +
				"DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;                                                                  \n" +
				"DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;                                \n" +
				"DECLARE t_lv_woOPID INT(1);                                 \n" +
				"DECLARE i INT DEFAULT 0;                                  \n" +
				"DECLARE totWoOPIDs INT DEFAULT 0;                                \n" +
				"  \n" +
				"  \n" +
				"DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                                \n" +
				"BEGIN                                                                \n" +
				"	ROLLBACK;                                                                \n" +
				"	RESIGNAL;                                                                \n" +
				"END;                                                                \n" +
				"DECLARE EXIT HANDLER FOR SQLWARNING                                                                \n" +
				"  BEGIN                                                                \n" +
				"	ROLLBACK;                                                                \n" +
				"	RESIGNAL;                                                                \n" +
				"END;                                                                \n" +
				"IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))                                                                \n" +
				"THEN SELECT 'woNumber' errorCode;                                                                \n" +
				"ELSE                                                                \n" +
				"	START TRANSACTION;                                                                \n" +
				"  \n" +
				"  \n" +
				"    # copy workorder                                                                 \n" +
				"  \n" +
				"	INSERT INTO workorder (`woNumber`,`partID`,`customerID`,`buildQty`,`startTime`,`endTime`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`                                                                \n" +
				"	,`woStatus`,`woSubStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`                                                                \n" +
				"	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`,`locationDetails`, `terminateWOID`                                  \n" +
				"	, `terminateWOOPID`, `isHotJob`, `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation,      \n" +
				"    `isKitAllocationNotRequired`)												      \n" +
				"	SELECT woNumber `woNumber`, ppartID `partID`,pcustomerID `customerID`, buildQty `buildQty`,`startTime`,`endTime`,`masterTemplateID`,woID,                                                                \n" +
				"	fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,0 `woStatus`,0 `woSubStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,'A' `woVersion`,                                                                \n" +
				"	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`isOperationTrackBySerialNo`,`isNoClean`,                                                                \n" +
				"	`isWatersoluble`, IFNULL(pisRevisedWO,0) `isRevisedWO` , woType `woType` , ecoReqID `ecoReqID` , `locationDetails`, pterminateWOID `terminateWOID`                                  \n" +
				"	, pterminateWOOPID `terminateWOOPID`, pisHotJob `isHotJob`, pinitialInternalVersion `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation,      \n" +
				"    isKitAllocationNotRequired      \n" +
				"	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                                                                \n" +
				"	SET insertedWOID = LAST_INSERT_ID();                                                                \n" +
				"  \n" +
				"    # copy part_assembly_certification                                                                \n" +
				"  \n" +
				"	INSERT INTO workorder_certification                                                                \n" +
				"	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                                                  \n" +
				"	SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`ClassID` `classIDs`, `isDeleted`                                 \n" +
				"	FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;                                                                \n" +
				"  \n" +
				"	IF(pParentWOID IS NOT NULL) THEN                          \n" +
				"		#Insert parent woID details                          \n" +
				"		INSERT INTO workorder_main_assembly_mapping_details                          \n" +
				"		(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)                           \n" +
				"		SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;	                          \n" +
				"	END IF;                          \n" +
				"  \n" +
				"	SET refPartID = 0;                                    \n" +
				"	SELECT a.partID INTO refPartID FROM workorder a WHERE a.woID = woID;                                    \n" +
				"  \n" +
				"	# copy workorder_operation                                      \n" +
				"	IF (refPartID = ppartID) THEN                                        \n" +
				"		INSERT INTO workorder_operation                                                                \n" +
				"		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                                                                \n" +
				"		`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                                \n" +
				"		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                                \n" +
				"		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,                                  \n" +
				"		    `colorcode`,`tabLimitAtTraveler`,`isMoveToStock`,`mountingTypeID`,                    \n" +
				"		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,              \n" +
				"		     `isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,    \n" +
				"             `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`)                                                                \n" +
				"		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                                                                \n" +
				"			`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                                \n" +
				"			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                                \n" +
				"		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                                                                \n" +
				"		    'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock, wo.mountingTypeID,                    \n" +
				"		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,              \n" +
				"		    `isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,    \n" +
				"            `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`    \n" +
				"		 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                                               \n" +
				"	ELSE                                     \n" +
				"		INSERT INTO workorder_operation                                                                \n" +
				"		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                                                                \n" +
				"		`opDescription`,`opDoes`,`opDonts`,`opOrder`,                                    \n" +
				"		`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                                \n" +
				"		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                                \n" +
				"		`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,                                  \n" +
				"		`colorcode`,`tabLimitAtTraveler`, `isMoveToStock`,`mountingTypeID`,                    \n" +
				"		`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,              \n" +
				"		`isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,    \n" +
				"             `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`)                                                                \n" +
				"		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                                                                \n" +
				"			`opDescription`,(SELECT mo.`opDoes` FROM operations mo WHERE mo.opID= wo.opID) AS `opDoes`,                                    \n" +
				"			(SELECT m_op.`opDonts` FROM operations m_op WHERE m_op.opID= wo.opID) AS `opDonts`,`opOrder`,                                    \n" +
				"			`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                                \n" +
				"			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                                \n" +
				"			`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                                                                \n" +
				"			'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock,wo.mountingTypeID,                    \n" +
				"			`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,              \n" +
				"			`isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart` ,    \n" +
				"             `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`                                                        \n" +
				"		FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                                     \n" +
				"	END IF;                                        \n" +
				"  \n" +
				"	#update work order operation details for loop operation case                    \n" +
				"	UPDATE workorder_operation AS newLoopOp, (SELECT loop_op.opID, (SELECT newwoop.woopid                     \n" +
				"		FROM workorder_operation newwoop                     \n" +
				"		WHERE newwoop.woID = insertedWOID                     \n" +
				"			AND newwoop.opID=(SELECT opID FROM workorder_operation                     \n" +
				"						WHERE woopID=loop_op.refLoopWOOPID)) newrefloopwoopid                    \n" +
				"				FROM workorder_operation loop_op                      \n" +
				"				WHERE loop_op.woID = woID AND isLoopOperation=1 AND deletedAt IS NULL) AS b                    \n" +
				"	SET newLoopOp.refLoopWOOPID = b.newrefloopwoopid                    \n" +
				"	WHERE newLoopOp.isLoopOperation=1                    \n" +
				"	AND b.opID=newLoopOp.opID                    \n" +
				"	AND newLoopOp.deletedAt IS NULL AND newLoopOp.woID=insertedWOID;                    \n" +
				"	#update work order operation details for loop operation case                    \n" +
				"	# copy workorder_cluster                                                                \n" +
				"  \n" +
				"    INSERT INTO workorder_cluster                                                                \n" +
				"	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)                                                                \n" +
				"	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                                                                \n" +
				"  \n" +
				"    # copy workorder_operation_cluster                                                                \n" +
				"  \n" +
				"    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                                \n" +
				"	SELECT                                                                 \n" +
				"	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID                                                                 \n" +
				"		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID                                                                 \n" +
				"		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,                                                                 \n" +
				"	woc.opID, woc.displayOrder, fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,                                                                \n" +
				"	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`                                                                \n" +
				"	FROM workorder_operation_cluster woc                                                                \n" +
				"	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)                                                                \n" +
				"	AND woc.deletedAt IS NULL;                                                                \n" +
				"  \n" +
				"    # copy workorder_operation_part                                                                \n" +
				"  \n" +
				"	INSERT INTO workorder_operation_part                                                                \n" +
				"	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                                \n" +
				"	SELECT insertedWOID `woID`,`opID`,`partID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                                \n" +
				"	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID	                                                                \n" +
				"	, `isDeleted` FROM workorder_operation_part wop                           \n" +
				"	WHERE wop.woID = woID AND wop.deletedAt IS NULL                          \n" +
				"	AND partID NOT IN (                          \n" +
				"				SELECT id FROM component                           \n" +
				"				WHERE (restrictUSEwithpermission = 1 OR restrictPackagingUseWithpermission = 1                           \n" +
				"					OR restrictUsePermanently = 1 OR restrictPackagingUsePermanently = 1)                          \n" +
				"				AND deletedAt IS NULL                           \n" +
				"				AND id IN (SELECT partID FROM workorder_operation_part                           \n" +
				"						WHERE woID = woID AND deletedAt IS NULL)                          \n" +
				"			 )                          \n" +
				"	AND partID NOT IN (                          \n" +
				"				SELECT mfgPNID FROM rfq_lineitems_alternatepart                           \n" +
				"				WHERE partID IN (SELECT partID FROM workorder WHERE woID = woID AND deletedAt IS NULL)                          \n" +
				"				AND (restrictUseInBOMWithPermissionStep = 1 OR restrictUseInBOMStep = 1)                          \n" +
				"				AND deletedAt IS NULL                           \n" +
				"				)                          \n" +
				"	;                                                                \n" +
				"  \n" +
				"    # copy workorder_operation_equipment                                                                \n" +
				"  \n" +
				"    INSERT INTO workorder_operation_equipment                                                                \n" +
				"	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)                                                                \n" +
				"	SELECT insertedWOID `woID`,`opID`,`eqpID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                                \n" +
				"	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`                                                                \n" +
				"	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;                                                                \n" +
				"  \n" +
				"    # copy workorder_operation_employee                                                                \n" +
				"  \n" +
				"    INSERT INTO workorder_operation_employee                                                                \n" +
				"	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                                \n" +
				"	SELECT insertedWOID `woID`,`opID`,`employeeID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                                \n" +
				"	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`                                                                 \n" +
				"	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;                                                                \n" +
				"  \n" +
				"    # copy dataelement_transactionvalues for Work order other fields                                                               \n" +
				"  \n" +
				"	INSERT INTO dataelement_transactionvalues                                                                \n" +
				"	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                                                                \n" +
				"	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,fun_DatetimetoUTCDateTime() `createdAt`,                                                                \n" +
				"		userID `createdBy`,`refSubFormTransID`, `isDeleted`                                                             \n" +
				"	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID                                                                \n" +
				"	AND entityID = -7                                                                \n" +
				"	AND dt.deletedAt IS NULL;                                                                \n" +
				"  \n" +
				"  \n" +
				"	# copy subform_transaction for Work order other fields multiple row sub-form	                                                            \n" +
				"  \n" +
				"	block1:BEGIN                                                                 \n" +
				"  \n" +
				"		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)                                                            \n" +
				"		DECLARE subform_wo_from_data_cursor CURSOR FOR                                                             \n" +
				"			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                                                            \n" +
				"			FROM subform_transaction WHERE deletedAt IS NULL                                                            \n" +
				"			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                                                                \n" +
				"						AND entityID = -7                                                          \n" +
				"						AND refTransID = woID                                                             \n" +
				"						ORDER BY refSubFormTransID ASC		                                                            \n" +
				"					);                                                              \n" +
				"  \n" +
				"  \n" +
				"	-- declare exit loop if data not found                                                                  \n" +
				"	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;                                                                 \n" +
				"  \n" +
				"	OPEN subform_wo_from_data_cursor;                                                                  \n" +
				"	-- loop item till all records found in string match of sub-form data element                                                            \n" +
				"  \n" +
				"	wo_sub_Form_loop:LOOP                                                              \n" +
				"  \n" +
				"		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                                                              \n" +
				"  \n" +
				"		 IF exit_loop_wo THEN                                                            \n" +
				"			LEAVE wo_sub_Form_loop;                                                                \n" +
				"		 END IF;                                                                    \n" +
				"  \n" +
				"		/* first insert work order sub-form entry to update row reference in dataelement */	                                                            \n" +
				"		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                                                            \n" +
				"		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);                                                            \n" +
				"  \n" +
				"		SET insertedSubFormTransID = LAST_INSERT_ID();	                                                            \n" +
				"  \n" +
				"		/* update new copied work order sub-form reference */                                                            \n" +
				"		UPDATE dataelement_transactionvalues                                                            \n" +
				"		SET refSubFormTransID = insertedSubFormTransID                                                            \n" +
				"		WHERE deletedAt IS NULL                                                            \n" +
				"		AND refTransID = insertedWOID                                                            \n" +
				"		AND refSubFormTransID  = lv_subFormTransID_from;                                                            \n" +
				"  \n" +
				"		SET lv_subFormTransID_from = NULL;                                                            \n" +
				"		SET lv_parentDataElementID_from = NULL;                                                            \n" +
				"		SET lv_rowNumber_from = NULL;                                                            \n" +
				"		SET insertedSubFormTransID = NULL;                                                            \n" +
				"  \n" +
				"	END LOOP wo_sub_Form_loop;	                                                            \n" +
				"	CLOSE subform_wo_from_data_cursor;	                                                            \n" +
				"  \n" +
				"	END  block1;   				                                                              \n" +
				"  \n" +
				"  \n" +
				"	# copy workorder_operation_dataelement                                                                \n" +
				"  \n" +
				"  \n" +
				"	INSERT INTO `workorder_operation_dataelement`                                                                \n" +
				"    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                                                                \n" +
				"	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,                                                                \n" +
				"	`dataElementID`,`displayOrder`,userID `createdBy`                                                                \n" +
				"	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;                                                                    \n" +
				"  \n" +
				"    # copy workorder_operation_equipment_dataelement                                                                \n" +
				"  \n" +
				"	INSERT INTO `workorder_operation_equipment_dataelement`                                                                \n" +
				"    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                                                                \n" +
				"	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,                                                                \n" +
				"	`dataElementID`,`displayOrder`,userID `createdBy`                                                                \n" +
				"	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;                                                               \n" +
				"  \n" +
				"  \n" +
				"    # copy dataelement_transactionvalues for Work order Operation other fields                                                               \n" +
				"  \n" +
				"	INSERT INTO dataelement_transactionvalues                                                                \n" +
				"	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                                                                \n" +
				"	SELECT `dataElementID`,`value`,                                                            \n" +
				"		 (SELECT woOPID FROM workorder_operation wopTo                                                              \n" +
				"		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom                                                                 \n" +
				"		 			WHERE wopFrom.woOPID = dt.refTransID )                                                            \n" +
				"		 AND wopTo.woID = insertedWOID) `refTransID`,                                                            \n" +
				"	`entityID`,fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`                                                             \n" +
				"	FROM dataelement_transactionvalues dt                                                             \n" +
				"	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL                                                            \n" +
				"					AND wop.woID = woID )                                                            \n" +
				"	AND entityID = -1                                                                \n" +
				"	AND dt.deletedAt IS NULL;                                                             \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	# copy subform_transaction for Work order operation other fields multiple row sub-form	                                                            \n" +
				"  \n" +
				"	block2:BEGIN                                                                 \n" +
				"  \n" +
				"	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)                                                            \n" +
				"	DECLARE subform_woop_from_data_cursor CURSOR FOR                                                             \n" +
				"		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                                                            \n" +
				"		FROM subform_transaction WHERE deletedAt IS NULL                                                            \n" +
				"		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                                                                \n" +
				"					AND entityID = -1                                                           \n" +
				"					AND refTransID IN (SELECT woOPID FROM workorder_operation                                                             \n" +
				"						WHERE deletedAt IS NULL AND woID = woID )                                                             \n" +
				"					ORDER BY refSubFormTransID ASC		    	                                                            \n" +
				"			);                                                             \n" +
				"  \n" +
				"  \n" +
				"	-- declare exit loop if data not found                                                                  \n" +
				"	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;                                                                 \n" +
				"  \n" +
				"	OPEN subform_woop_from_data_cursor;                                                                  \n" +
				"	-- loop item till all records found in string match of sub-form data element                                                            \n" +
				"  \n" +
				"	woop_sub_Form_loop:LOOP                                                              \n" +
				"  \n" +
				"		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                                                              \n" +
				"  \n" +
				"		 IF exit_loop_woop THEN                                                            \n" +
				"			LEAVE woop_sub_Form_loop;                                                                    \n" +
				"		 END IF;                                                                    \n" +
				"		/* first insert work order operation sub-form entry to update row reference in dataelement */	                                                            \n" +
				"		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                                                            \n" +
				"		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);                                                            \n" +
				"  \n" +
				"		SET insertedSubFormTransID = LAST_INSERT_ID();	                                                            \n" +
				"  \n" +
				"		/* update new copied work order operation sub-form reference  */                                                            \n" +
				"		SET @SQl1 = CONCAT('                                                            \n" +
				"				UPDATE dataelement_transactionvalues                                                            \n" +
				"				SET refSubFormTransID = ',insertedSubFormTransID,                                                            \n" +
				"				' WHERE deletedAt IS NULL                                                            \n" +
				"				AND refTransID IN (SELECT woOPID FROM workorder_operation                                                            \n" +
				"							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )                                                            \n" +
				"				AND refSubFormTransID  = ',lv_subFormTransID_from,';		                                                            \n" +
				"			');		                                                                                                \n" +
				"		PREPARE stmt1 FROM @SQL1;                                                                                                \n" +
				"		EXECUTE stmt1;     		                                                            \n" +
				"  \n" +
				"		SET lv_subFormTransID_from = NULL;                                                            \n" +
				"		SET lv_parentDataElementID_from = NULL;                                                            \n" +
				"		SET lv_rowNumber_from = NULL;                                                            \n" +
				"		SET insertedSubFormTransID = NULL;                                                            \n" +
				"  \n" +
				"	END LOOP woop_sub_Form_loop;	                                                            \n" +
				"	CLOSE subform_woop_from_data_cursor;	                                                            \n" +
				"  \n" +
				"	END  block2;                                                              \n" +
				"  \n" +
				"  \n" +
				"  /*        \n" +
				"    # copy workorder_preprogcomp                                                                \n" +
				"  \n" +
				"    -- add component selected operation too while copy component added subquery                                                                \n" +
				"  \n" +
				"    INSERT INTO `workorder_preprogcomp`                                                                \n" +
				"    (`woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)                                                                \n" +
				"	SELECT                                                                 \n" +
				"    insertedWOID `woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,`programName`,                                                                \n" +
				"    (SELECT woOPID FROM                                                                 \n" +
				"    workorder_operation wop                                                                 \n" +
				"	WHERE wop.opID IN (                                                                \n" +
				"		SELECT opID FROM workorder_operation wo                                                                 \n" +
				"			WHERE wo.woOPID = wp.refStkWOOPID                                                                \n" +
				"		)                                                                \n" +
				"	AND wop.woID = insertedWOID) refStkWOOPID                                                                \n" +
				"	FROM workorder_preprogcomp wp                                                                 \n" +
				"    WHERE wp.woID = woID AND wp.deletedAt IS NULL;                                                                  \n" +
				"  \n" +
				"    # copy workorder_preprogcomp_designator                                                                \n" +
				"  \n" +
				"    INSERT INTO `workorder_preprogcomp_designator`                                                                \n" +
				"	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)                                                                \n" +
				"    SELECT insertedWOID `woID`,`designatorName`,                                                                \n" +
				"	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.mfgPNID =                                                                 \n" +
				"	(SELECT swp.mfgPNID FROM workorder_preprogcomp swp WHERE swp.woID = woID AND                                                                \n" +
				"    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,                                                                \n" +
				"	userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`                                                                \n" +
				"	FROM workorder_preprogcomp_designator wpd                                                                 \n" +
				"    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;                 \n" +
				"    */                                                       \n" +
				"  \n" +
				"	/* IFNULL(isRevision,0) = 0 : isRevision means \"isNewRevision\"  */                                \n" +
				"    IF (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\") THEN     /* W : work order , PW : previous work order */                                                           \n" +
				"  \n" +
				"	 /* copy all op master folder to wo op level */                              \n" +
				"	INSERT INTO generic_folder                                                                \n" +
				"	(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                                \n" +
				"	`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                                \n" +
				"	SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID                              \n" +
				"					AND woopt1.opID = gf.refTransID) refTransID ,                               \n" +
				"	NULL, 'workorder_operation' gencFileOwnerType, gf.roleId, gf.refParentId,                                                                \n" +
				"	0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,                              \n" +
				"         gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                               \n" +
				"	FROM generic_folder gf                              \n" +
				"	WHERE gf.refTransID IN (SELECT woopt7.opID FROM workorder_operation woopt7 WHERE woopt7.woID = woID)                              \n" +
				"	AND gf.gencFileOwnerType = 'operations'                                \n" +
				"	AND entityID = -1                              \n" +
				"	AND gf.deletedAt IS NULL AND gf.isRecycle = 0;                              \n" +
				"  \n" +
				"  \n" +
				"		# update refParentId - parent folder for work order each operation                              \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                                \n" +
				"  \n" +
				"		 CREATE TEMPORARY TABLE temp_woOPIDs AS                               \n" +
				"		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL                              \n" +
				"		 AND gencFileOwnerType = 'workorder_operation'                               \n" +
				"		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3                               \n" +
				"					WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;                              \n" +
				"  \n" +
				"		SET totWoOPIDs = 0;                              \n" +
				"		SET i = 0;                              \n" +
				"		SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;                                \n" +
				"  \n" +
				"		 WHILE i < totWoOPIDs DO                                   \n" +
				"		 	SET t_lv_woOPID = NULL;                              \n" +
				"		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;                              \n" +
				"  \n" +
				"			 UPDATE generic_folder gf1,                                                                \n" +
				"			 	(   SELECT a.gencFolderID, a.copyGencFolderID                                                                \n" +
				"			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation'                                                                \n" +
				"			 	) gf2                                                                \n" +
				"			 	SET gf1.refParentId = gf2.gencFolderID                                                                \n" +
				"			 WHERE gf1.refParentId = gf2.copyGencFolderID  AND gf1.isRecycle = 0                              \n" +
				"			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';                              \n" +
				"  \n" +
				"		 SET i = i + 1;                                  \n" +
				"		 END WHILE;                                  \n" +
				"  \n" +
				"  \n" +
				"	    # copy generic_folder from selected part/assembly level to work order level                              \n" +
				"		INSERT INTO generic_folder                                                                \n" +
				"				(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                                \n" +
				"				`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                                \n" +
				"		SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,                                                                \n" +
				"				0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,                              \n" +
				"				a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                               \n" +
				"		FROM generic_folder a                               \n" +
				"		WHERE a.refTransID = ppartID   AND a.isRecycle = 0                              \n" +
				"		AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.deletedAt IS NULL;                                                                \n" +
				"  \n" +
				"		UPDATE generic_folder gf1,                                                                \n" +
				"			(   SELECT a.gencFolderID, a.copyGencFolderID                                                                \n" +
				"				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                                                                \n" +
				"			) gf2                                                                \n" +
				"			SET gf1.refParentId = gf2.gencFolderID                                                                \n" +
				"			WHERE gf1.refParentId = gf2.copyGencFolderID                               \n" +
				"			AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                               \n" +
				"  \n" +
				"	 END IF;                               \n" +
				"  \n" +
				"	IF (pisCopyOPFrom=\"PW\") THEN         /* PW : previous work order */                              \n" +
				"  \n" +
				"	   # copy generic_folder from old work order to new work order                                                               \n" +
				"	    INSERT INTO generic_folder                                                                \n" +
				"			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                                \n" +
				"			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                                \n" +
				"		SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,                                                                \n" +
				"		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,                              \n" +
				"		a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                                \n" +
				"		FROM generic_folder a                               \n" +
				"		WHERE a.refTransID = woID                               \n" +
				"		AND a.gencFileOwnerType = 'workorder'  AND a.entityID = '-7' AND a.deletedAt IS NULL AND a.isRecycle = 0                             \n" +
				"		AND ((a.refCopyTransID IS NULL AND a.refCopyGencFileOwnerType IS NULL)                              \n" +
				"			OR (a.refCopyGencFileOwnerType = 'workorder' AND a.refCopyTransID IS NOT NULL)) ;                              \n" +
				"  \n" +
				"	UPDATE generic_folder gf1,                                                                \n" +
				"		(   SELECT a.gencFolderID, a.copyGencFolderID                                                                \n" +
				"			FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder' AND a.isRecycle = 0                                                                \n" +
				"		) gf2                                                                \n" +
				"		SET gf1.refParentId = gf2.gencFolderID                                                                \n" +
				"		WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                                                                \n" +
				"  \n" +
				"  \n" +
				"	# copy generic_folder from old wo op to new wo op                               \n" +
				"  \n" +
				"	INSERT INTO generic_folder                                                                \n" +
				"		(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                                \n" +
				"		`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                                \n" +
				"		SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID                              \n" +
				"						AND woopt1.opID = (SELECT woopt2.opID FROM workorder_operation woopt2 WHERE woopt2.deletedAt IS NULL                               \n" +
				"									AND woopt2.woOPID = gf.refTransID)) refTransID ,                               \n" +
				"		gf.entityID, gf.gencFileOwnerType, gf.roleId, gf.refParentId,                                                                \n" +
				"		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,                              \n" +
				"		gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                                               \n" +
				"		FROM generic_folder gf                              \n" +
				"		WHERE gf.refTransID IN (SELECT woop.woOPID FROM workorder_operation woop WHERE woop.deletedAt IS NULL AND woop.woID = woID)                               \n" +
				"		AND gf.gencFileOwnerType = 'workorder_operation'    \n" +
				"        AND gf.isRecycle = 0  \n" +
				"		AND gf.deletedAt IS NULL                              \n" +
				"		AND ((gf.refCopyTransID IS NULL AND gf.refCopyGencFileOwnerType IS NULL)                              \n" +
				"			OR (gf.refCopyGencFileOwnerType = 'workorder_operation' AND gf.refCopyTransID IS NOT NULL));                                \n" +
				"  \n" +
				"		# update refParentId - parent folder for work order each operation                              \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                                \n" +
				"  \n" +
				"		 CREATE TEMPORARY TABLE temp_woOPIDs AS                               \n" +
				"		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL                              \n" +
				"		 AND gencFileOwnerType = 'workorder_operation'                               \n" +
				"		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3 WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;                              \n" +
				"  \n" +
				"		SET totWoOPIDs = 0;                              \n" +
				"		SET i = 0;                              \n" +
				"		 SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;                                \n" +
				"  \n" +
				"		 WHILE i < totWoOPIDs DO                                   \n" +
				"		 	SET t_lv_woOPID = NULL;                              \n" +
				"		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;                              \n" +
				"  \n" +
				"			 UPDATE generic_folder gf1,                                                                \n" +
				"			 	(   SELECT a.gencFolderID, a.copyGencFolderID                                                                \n" +
				"			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation' AND a.isRecycle = 0                                                                \n" +
				"			 	) gf2                                                                \n" +
				"			 	SET gf1.refParentId = gf2.gencFolderID                                                                \n" +
				"			 WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.isRecycle = 0                              \n" +
				"			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';                              \n" +
				"  \n" +
				"		 SET i = i + 1;                                  \n" +
				"		 END WHILE;                              \n" +
				"  \n" +
				"	END IF;                               \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                               \n" +
				"  \n" +
				"	COMMIT;                                                                \n" +
				"	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;                                                                \n" +
				"  \n" +
				"END IF;                                                             \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_MoveSourceFolderDocToDestination`;  \n" +
				"CREATE PROCEDURE `Sproc_MoveSourceFolderDocToDestination`(      \n" +
				"	IN psourceGencFolderIDsToMove TEXT,      \n" +
				"	IN psourceGencFileIDsToMove TEXT,    \n" +
				"	IN pdestinationGencFolderIDInMove INT,    \n" +
				"	IN pentityID INT,    \n" +
				"	IN pgencFileOwnerType VARCHAR(100),  \n" +
				"	IN prefTransID INT,      \n" +
				"	IN puserID VARCHAR(50),      \n" +
				"	IN pparentFolderIDOfSelected INT ,  # parent folder of selected folders/files        \n" +
				"	IN proleIdOfDestinationGencFolder INT    \n" +
				"  \n" +
				")  \n" +
				"BEGIN      \n" +
				"	DECLARE lv_mainParentFolderID INT;       \n" +
				"	DECLARE isSelectedParentIsMainParentFolder TINYINT;    \n" +
				"	DECLARE v_totDuplicateFiles INT;      \n" +
				"	DECLARE v_totDuplicateFilesFromSourceGencFileIDsToMove INT;       \n" +
				"  \n" +
				"	# --------------- Move folder related changes : source ------------------------      \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_errorlog_allFolderDocToMove;      \n" +
				"	CREATE TEMPORARY TABLE temp_errorlog_allFolderDocToMove (      \n" +
				"		errorLogID VARCHAR(50),    \n" +
				"		errorText VARCHAR(2000)    \n" +
				"	);    \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove;      \n" +
				"	CREATE TEMPORARY TABLE temp_source_allFoldersToMove (      \n" +
				"		gencFolderID INT,      \n" +
				"		gencFolderName VARCHAR(255),      \n" +
				"		refParentId INT,      \n" +
				"		roleId INT,      \n" +
				"		copyInnerFilesFolder INT,      \n" +
				"		levelID INT      \n" +
				"	);      \n" +
				"  \n" +
				"	# when any source folder selected to move       \n" +
				"	IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN     \n" +
				"			# get all deleted folders while move folder action    \n" +
				"			DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFoldersWhileMove;      \n" +
				"			SET @query_source_allDeletedFoldersWhileMove = CONCAT('      \n" +
				"				CREATE TEMPORARY TABLE temp_source_allDeletedFoldersWhileMove      \n" +
				"					SELECT 	gencFolderName       \n" +
				"					FROM 	generic_folder      \n" +
				"					WHERE 	deletedAt IS NOT NULL AND isRecycle = 0      \n" +
				"					AND 	gencFolderID IN (',psourceGencFolderIDsToMove,')      \n" +
				"			 ');	      \n" +
				"			PREPARE st_query_source_allDeletedFolders FROM @query_source_allDeletedFoldersWhileMove;                                                                  \n" +
				"			EXECUTE st_query_source_allDeletedFolders;			    \n" +
				"  \n" +
				"			# get all inner folders of selected source folders    \n" +
				"			SET @query_source_allInnerFolder = CONCAT('        \n" +
				"			INSERT INTO temp_source_allFoldersToMove(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,`copyInnerFilesFolder`,`levelID`)      \n" +
				"			SELECT al.gencFolderID, al.gencFolderName,al.refParentId,al.roleId ,al.copyInnerFilesFolder, al.levelID      \n" +
				"			FROM (      \n" +
				"					WITH RECURSIVE cte AS (      \n" +
				"						  SELECT     gencFolderID ,gencFolderName, refParentId,roleId,      \n" +
				"								1 copyInnerFilesFolder,1 levelID      \n" +
				"						  FROM       generic_folder      \n" +
				"						  WHERE      gencFolderID IN (',psourceGencFolderIDsToMove,')       \n" +
				"						  AND 	     deletedAt IS NULL	AND isRecycle = 0      \n" +
				"						  AND 	     gencFileOwnerType = \"',pgencFileOwnerType,'\"  AND refTransID =  ',prefTransID,'	      \n" +
				"					  UNION       \n" +
				"						SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId ,      \n" +
				"								1 copyInnerFilesFolder , levelID + 1 levelID      \n" +
				"						FROM       generic_folder gf      \n" +
				"						INNER JOIN cte ON gf.refParentId = cte.gencFolderID      \n" +
				"						WHERE      gf.deletedAt IS NULL  AND gf.isRecycle = 0    \n" +
				"						AND 	   gf.gencFileOwnerType = \"',pgencFileOwnerType,'\"  AND gf.refTransID =  ',prefTransID,'	      \n" +
				"					  )      \n" +
				"					  SELECT * FROM cte      \n" +
				"				) al     \n" +
				"  \n" +
				"			');	      \n" +
				"			PREPARE st_query_source_allInnerFolder FROM @query_source_allInnerFolder;                                                                  \n" +
				"			EXECUTE st_query_source_allInnerFolder;	    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"		# get main parent role folder ID like super admin,etc      \n" +
				"		# if already main parent like super admin then its refParent is null so main parent is same one      \n" +
				"		SELECT gencFolderID INTO lv_mainParentFolderID      \n" +
				"		FROM generic_folder      \n" +
				"		WHERE deletedAt IS NULL      \n" +
				"		AND gencFolderID =  pparentFolderIDOfSelected      \n" +
				"		AND gencFileOwnerType IS NULL AND refTransID = 0 AND isRecycle = 0     \n" +
				"		AND refParentId IS NULL AND entityID IS NULL ;      \n" +
				"  \n" +
				"		IF(lv_mainParentFolderID IS NULL) THEN      \n" +
				"			SET isSelectedParentIsMainParentFolder = 0;      \n" +
				"  \n" +
				"			SELECT gencFolderID INTO lv_mainParentFolderID      \n" +
				"			FROM generic_folder      \n" +
				"			WHERE deletedAt IS NULL      \n" +
				"			AND gencFolderID IN (SELECT refParentId FROM temp_source_allFoldersToMove) AND isRecycle = 0        \n" +
				"			AND refTransID = 0 AND refParentId IS NULL AND entityID IS NULL ;      \n" +
				"  \n" +
				"		ELSE      \n" +
				"			SET isSelectedParentIsMainParentFolder = 1;      \n" +
				"		END IF;      \n" +
				"  \n" +
				"		ALTER TABLE temp_source_allFoldersToMove      \n" +
				"		ADD COLUMN folderLevel INT;      \n" +
				"  \n" +
				"		/*    \n" +
				"		# if only file selected from super admin level type then it is always file at 1st level      \n" +
				"		# and folder at 0 level      \n" +
				"		IF((psourceGencFolderIDsToMove IS NULL OR psourceGencFolderIDsToMove = '') AND (SELECT COUNT(1) FROM temp_source_allFoldersToMove) = 1      \n" +
				"			AND isSelectedParentIsMainParentFolder = 1) THEN      \n" +
				"  \n" +
				"				UPDATE temp_source_allFoldersToMove      \n" +
				"				SET 	folderLevel = 0;      \n" +
				"  \n" +
				"		ELSE  */    \n" +
				"  \n" +
				"			# make levelID wise folder group level       \n" +
				"			DROP TEMPORARY TABLE IF EXISTS temp_source_allFolders_level;      \n" +
				"			CREATE TEMPORARY TABLE temp_source_allFolders_level      \n" +
				"				SELECT gencFolderID , DENSE_RANK() OVER (      \n" +
				"							ORDER BY levelID      \n" +
				"							) folderLevel      \n" +
				"				FROM temp_source_allFoldersToMove ;      \n" +
				"  \n" +
				"			# update original table source folder with folderLevel      \n" +
				"			UPDATE temp_source_allFoldersToMove gf1 , temp_source_allFolders_level gf2      \n" +
				"			SET gf1.folderLevel = gf2.folderLevel       \n" +
				"			WHERE gf1.gencFolderID = gf2.gencFolderID ;      \n" +
				"  \n" +
				"			DROP TEMPORARY TABLE IF EXISTS temp_source_allFolders_level;       \n" +
				"  \n" +
				"			/*    \n" +
				"			# insert folder which is super admin level main parent      \n" +
				"			INSERT INTO temp_source_allFoldersToMove(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,      \n" +
				"									`copyInnerFilesFolder`,`levelID` ,`folderLevel`)      \n" +
				"			SELECT 	gencFolderID ,gencFolderName ,  refParentId , roleId ,       \n" +
				"				0 copyInnerFilesFolder , 0 levelID , 0 folderLevel      \n" +
				"			FROM 	generic_folder	      \n" +
				"			WHERE 	gencFolderID = (lv_mainParentFolderID);      \n" +
				"			*/    \n" +
				"  \n" +
				"  \n" +
				"			# insert folder which is refParent of selected folder    \n" +
				"			INSERT INTO temp_source_allFoldersToMove(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,      \n" +
				"									`copyInnerFilesFolder`,`levelID` ,`folderLevel`)      \n" +
				"			SELECT 	gencFolderID ,gencFolderName ,  refParentId , roleId ,       \n" +
				"				0 copyInnerFilesFolder , 0 levelID , 0 folderLevel      \n" +
				"			FROM 	generic_folder	      \n" +
				"			WHERE 	gencFolderID = pparentFolderIDOfSelected AND isRecycle = 0;      \n" +
				"  \n" +
				"  \n" +
				"		/* END IF; */	    \n" +
				"  \n" +
				"		/*    \n" +
				"		SELECT 'all source inner folders with folderLevel';    \n" +
				"		SELECT * FROM temp_source_allFoldersToMove;    \n" +
				"		*/    \n" +
				"  \n" +
				"		IF (SELECT COUNT(1) FROM temp_source_allFoldersToMove     \n" +
				"			WHERE gencFolderID = pdestinationGencFolderIDInMove AND folderLevel >= 1 LIMIT 1) > 0 THEN    \n" +
				"  \n" +
				"			INSERT INTO temp_errorlog_allFolderDocToMove(`errorLogID`,`errorText`)     \n" +
				"			VALUES ('e1001','The destination folder is a subfolder of the source folder.') ;    \n" +
				"  \n" +
				"		END IF;	    \n" +
				"  \n" +
				"	END IF;	    \n" +
				"  \n" +
				"	IF((SELECT COUNT(1) FROM temp_errorlog_allFolderDocToMove) = 0) THEN    \n" +
				"  \n" +
				"		# --------------------- Create/move new folder to destination related changes ------------------------     \n" +
				"  \n" +
				"		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN 	    \n" +
				"		-- IF(psourceGencFolderIDsToMove IS NOT NULL OR       \n" +
				"				-- (psourceGencFileIDsToMove IS NOT NULL AND isSelectedParentIsMainParentFolder = 0)) THEN    \n" +
				"  \n" +
				"			# destination get all exists folder from selected    \n" +
				"			DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFolders;      \n" +
				"  \n" +
				"			CREATE TEMPORARY TABLE temp_destination_allExistsFolders AS      \n" +
				"				WITH RECURSIVE cte AS (      \n" +
				"					SELECT     gencFolderID ,gencFolderName, refParentId,roleId,0 folderLevel      \n" +
				"					FROM       generic_folder      \n" +
				"					WHERE      gencFolderID IN (pdestinationGencFolderIDInMove)      \n" +
				"					AND 	   deletedAt IS NULL AND isRecycle = 0	      \n" +
				"				      UNION       \n" +
				"					SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId , folderLevel + 1 folderLevel      \n" +
				"					FROM       generic_folder gf      \n" +
				"					INNER JOIN cte ON gf.refParentId = cte.gencFolderID      \n" +
				"					WHERE      gf.deletedAt IS NULL AND gf.isRecycle = 0    \n" +
				"					AND 	   gf.gencFileOwnerType = pgencFileOwnerType  AND gf.refTransID = prefTransID      \n" +
				"					  )      \n" +
				"					SELECT * FROM cte ;      \n" +
				"  \n" +
				"			/*    \n" +
				"			SELECT 'all destination inner folders';    \n" +
				"			SELECT * FROM temp_destination_allExistsFolders;    \n" +
				"			*/    \n" +
				"  \n" +
				"			#-------------- start - create all required folders to destination -------------------      \n" +
				"  \n" +
				"			# cretae new temp table from copy op all folder      \n" +
				"			DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove_ref;      \n" +
				"			CREATE TEMPORARY TABLE temp_source_allFoldersToMove_ref AS       \n" +
				"				SELECT * FROM temp_source_allFoldersToMove;      \n" +
				"  \n" +
				"			ALTER TABLE temp_source_allFoldersToMove_ref       \n" +
				"			ADD COLUMN refParentIdForDestinationNewFolder INT;      \n" +
				"			# get destination existing folder ref and update into new existing/creting folder as parentRefID       \n" +
				"  \n" +
				"				#update-1 when selected folders moves to destination then first level folder's refParent always selected destination folder    \n" +
				"				SET @query_update_source_refParentOfSelectedOnly = CONCAT('      \n" +
				"					UPDATE temp_source_allFoldersToMove_ref    \n" +
				"					SET refParentIdForDestinationNewFolder = ',pdestinationGencFolderIDInMove,'    \n" +
				"					WHERE gencFolderID IN (',psourceGencFolderIDsToMove,')	    \n" +
				"				');	      \n" +
				"				PREPARE st_query_update_source_refParentOfSelectedOnly FROM @query_update_source_refParentOfSelectedOnly;                                                                  \n" +
				"				EXECUTE st_query_update_source_refParentOfSelectedOnly;    \n" +
				"  \n" +
				"  \n" +
				"				#update-2 for inner folders inside of source selected folder, refParent is exists folder at destination place     \n" +
				"				#or same as it as no folder found at destination and we move same existing source    \n" +
				"				UPDATE temp_source_allFoldersToMove_ref gf1      \n" +
				"				SET refParentIdForDestinationNewFolder = (SELECT gencFolderID      \n" +
				"									FROM temp_destination_allExistsFolders      \n" +
				"									WHERE gencFolderName = (SELECT gencFolderName FROM temp_source_allFoldersToMove       \n" +
				"												WHERE gencFolderID = gf1.refParentId)      \n" +
				"									AND folderLevel =  gf1.folderLevel - 1       \n" +
				"									)    \n" +
				"				WHERE refParentIdForDestinationNewFolder IS NULL				     \n" +
				"				;     \n" +
				"  \n" +
				"			/*	     \n" +
				"			SELECT 'all source folders with new refParent of destination';    \n" +
				"			SELECT * FROM temp_source_allFoldersToMove_ref;    \n" +
				"			*/    \n" +
				"  \n" +
				"  \n" +
				"			# create all required folder from source to destination      \n" +
				"			/* INSERT INTO generic_folder                                                      \n" +
				"				(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,      \n" +
				"				`roleId`,`refParentId`,                                                      \n" +
				"				`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`)       */    \n" +
				"  \n" +
				"			/*	    \n" +
				"			SELECT  gf.gencFolderName,  prefTransID refTransID , pentityID entityID, pgencFileOwnerType gencFileOwnerType,       \n" +
				"				gf.roleId, ifnull(gf.refParentIdForDestinationNewFolder,gf.refParentId) refParentId,                                                      \n" +
				"				0 isDeleted,     \n" +
				"				-- fun_DatetimetoUTCDateTime() createdAt,     \n" +
				"				puserID createdBy, gf.gencFolderID copyGencFolderID                                                \n" +
				"			FROM temp_source_allFoldersToMove_ref gf      \n" +
				"			WHERE gf.gencFolderName NOT IN (SELECT gencFolderName FROM temp_destination_allExistsFolders      \n" +
				"								WHERE folderLevel = gf.folderLevel)     \n" +
				"			AND gf.folderLevel != 0      \n" +
				"			;     \n" +
				"			*/    \n" +
				"  \n" +
				"  \n" +
				"			# update refParent of moved folder >> to destination new parent folder					    \n" +
				"			UPDATE generic_folder gf, temp_source_allFoldersToMove_ref afr    \n" +
				"			SET gf.refParentID = IFNULL(afr.refParentIdForDestinationNewFolder,gf.refParentId) ,     \n" +
				"					gf.roleId = proleIdOfDestinationGencFolder    \n" +
				"			WHERE gf.gencFolderID = afr.gencFolderID  AND gf.isRecycle = 0  \n" +
				"			AND afr.gencFolderName NOT IN (SELECT gencFolderName FROM temp_destination_allExistsFolders     \n" +
				"							WHERE folderLevel = afr.folderLevel)     \n" +
				"			AND afr.folderLevel != 0  				    \n" +
				"			;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"			/*    \n" +
				"			# get destination newly creted parent folder ref and update to new creted child folder as parentRefID							      \n" +
				"			UPDATE generic_folder gf1,                                                      \n" +
				"				 (   SELECT a.gencFolderID, a.copyGencFolderID                                                      \n" +
				"					FROM generic_folder a       \n" +
				"					WHERE a.refTransID = prefTransID       \n" +
				"					AND a.gencFileOwnerType = pgencFileOwnerType AND a.deletedAt IS NULL                                                     \n" +
				"				 ) gf2                                                      \n" +
				"			SET gf1.refParentId = gf2.gencFolderID                                                      \n" +
				"			WHERE gf1.refParentId = gf2.copyGencFolderID                     \n" +
				"			AND gf1.refTransID = prefTransID AND gf1.gencFileOwnerType = pgencFileOwnerType      \n" +
				"			AND gf1.deletedAt IS NULL gf1.isRecycle = 0;     \n" +
				"			*/      \n" +
				"  \n" +
				"		-- END IF;    \n" +
				"		END IF;    \n" +
				"  \n" +
				"  \n" +
				"		#-------------- end - create all required folders to destination -------------------	    \n" +
				"  \n" +
				"		# get all newly created/existing folder of destination    \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_destination_allFoldersAfterCreated;      \n" +
				"			CREATE TEMPORARY TABLE temp_destination_allFoldersAfterCreated AS      \n" +
				"				WITH RECURSIVE cte AS (      \n" +
				"					SELECT     gencFolderID ,gencFolderName, refParentId,roleId,0 folderLevel      \n" +
				"					FROM       generic_folder     \n" +
				"					WHERE      gencFolderID IN (pdestinationGencFolderIDInMove) AND isRecycle = 0    \n" +
				"					AND 	   deletedAt IS NULL		      \n" +
				"				      UNION       \n" +
				"					SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId , folderLevel + 1 folderLevel      \n" +
				"					FROM       generic_folder gf      \n" +
				"					INNER JOIN cte ON gf.refParentId = cte.gencFolderID      \n" +
				"					WHERE      gf.deletedAt IS NULL AND gf.isRecycle = 0      \n" +
				"					AND 	   gf.gencFileOwnerType = pgencFileOwnerType  AND gf.refTransID = prefTransID      \n" +
				"					  )      \n" +
				"					SELECT * FROM cte ;      \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"		# --------------------- Move source files related changes   ------------------------      \n" +
				"  \n" +
				"		IF (psourceGencFileIDsToMove IS NOT NULL AND psourceGencFileIDsToMove != '') THEN      \n" +
				"  \n" +
				"  \n" +
				"			# get all \"deleted files\" from selected which not required to move now      \n" +
				"			DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFilesWhileMove;      \n" +
				"			SET @query_source_allDeletedFilesWhileMove = CONCAT('      \n" +
				"				CREATE TEMPORARY TABLE temp_source_allDeletedFilesWhileMove      \n" +
				"					SELECT 	gencOriginalName       \n" +
				"					FROM 	genericfiles      \n" +
				"					WHERE 	deletedAt IS NOT NULL      \n" +
				"					AND 	gencFileID IN (',psourceGencFileIDsToMove,') AND isRecycle = 0     \n" +
				"			 ');	    \n" +
				"  \n" +
				"  \n" +
				"			PREPARE st_query_source_allDeletedFilesWhileMove FROM @query_source_allDeletedFilesWhileMove;                                                                  \n" +
				"			EXECUTE st_query_source_allDeletedFilesWhileMove;      \n" +
				"  \n" +
				"		END IF;      \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"		# get source all files (selected files + selected folder all inner files)      \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove;      \n" +
				"		SET @query_source_allInnerFiles = CONCAT('      \n" +
				"			CREATE TEMPORARY TABLE  temp_source_allInnerFilesToMove AS      \n" +
				"				SELECT   gencFileID , gencOriginalName , refParentId , genFilePath ,      \n" +
				"					 gencFileDescription, gencFileExtension, gencFileType , tags , fileSize      \n" +
				"				FROM     genericfiles      \n" +
				"				WHERE    deletedAt IS NULL AND isRecycle = 0    \n" +
				"				AND      gencFileOwnerType = \"',pgencFileOwnerType,'\"  AND refTransID =  ',prefTransID,'    \n" +
				"				AND     ( gencFileID IN (',IFNULL(psourceGencFileIDsToMove,0),')       \n" +
				"						OR ( refParentId IN (SELECT gencFolderID       \n" +
				"									FROM temp_source_allFoldersToMove       \n" +
				"									WHERE copyInnerFilesFolder = 1) )      \n" +
				"					)        \n" +
				"			');      \n" +
				"		PREPARE st_query_source_allInnerFiles FROM @query_source_allInnerFiles;                                                                  \n" +
				"		EXECUTE st_query_source_allInnerFiles;    \n" +
				"  \n" +
				"		/*    \n" +
				"		SELECT 'get all source files to move';    \n" +
				"		SELECT * FROM temp_source_allInnerFilesToMove;    \n" +
				"		*/    \n" +
				"  \n" +
				"		#------------------- start - create all required files to destination -------------------    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove_ref;      \n" +
				"  \n" +
				"		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN       \n" +
				"  \n" +
				"			CREATE TEMPORARY TABLE temp_source_allInnerFilesToMove_ref      \n" +
				"				SELECT gf.* ,     \n" +
				"					CASE WHEN gf.refParentId = lv_mainParentFolderID THEN 1     \n" +
				"					ELSE ((SELECT folderLevel FROM temp_source_allFoldersToMove       \n" +
				"							WHERE gencFolderID = gf.refParentId) + 1) END AS  fileLevel      \n" +
				"				FROM temp_source_allInnerFilesToMove gf ;      \n" +
				"  \n" +
				"		ELSE    \n" +
				"  \n" +
				"			CREATE TEMPORARY TABLE temp_source_allInnerFilesToMove_ref      \n" +
				"				SELECT gf.* ,     \n" +
				"					CASE WHEN gf.refParentId = lv_mainParentFolderID THEN 1     \n" +
				"					ELSE 1 END AS fileLevel      \n" +
				"				FROM temp_source_allInnerFilesToMove gf ;      \n" +
				"  \n" +
				"		END IF;     \n" +
				"  \n" +
				"		ALTER TABLE temp_source_allInnerFilesToMove_ref       \n" +
				"		ADD COLUMN refParentIdForDestinationNewFile INT;      \n" +
				"		# get destination folder ref and update in to new creating files as parentRefID - refParent of file >> it is at file current level - 1      \n" +
				"		/*    \n" +
				"		IF((psourceGencFolderIDsToMove IS NULL OR psourceGencFolderIDsToMove = '') AND (SELECT COUNT(1) FROM temp_source_allFoldersToMove) = 1      \n" +
				"			AND isSelectedParentIsMainParentFolder = 1) THEN      \n" +
				"			# if only file selected from super admin level type then it is always file at 1st level      \n" +
				"			# and folder at 0 level      \n" +
				"			SELECT 'update files ref parent-0' ;    \n" +
				"			UPDATE temp_source_allInnerFilesToMove_ref gf1      \n" +
				"			SET refParentIdForDestinationNewFile = gf1.refParentId;      \n" +
				"		ELSE  */    \n" +
				"  \n" +
				"		/*    \n" +
				"		SELECT 'update files ref parent-1' ;    \n" +
				"		*/    \n" +
				"  \n" +
				"		IF (psourceGencFileIDsToMove IS NOT NULL AND psourceGencFileIDsToMove != '') THEN     \n" +
				"  \n" +
				"			#update-1 when selected files moves to destination then first level file's refParent always selected destination folder    \n" +
				"			SET @query_update_source_file_refParentOfSelectedOnly = CONCAT('      \n" +
				"				UPDATE temp_source_allInnerFilesToMove_ref    \n" +
				"				SET refParentIdForDestinationNewFile = ',pdestinationGencFolderIDInMove,'    \n" +
				"				WHERE gencFileID IN (',psourceGencFileIDsToMove,')	    \n" +
				"			');	      \n" +
				"			PREPARE st_query_update_source_file_refParentOfSelectedOnly FROM @query_update_source_file_refParentOfSelectedOnly;                                                                  \n" +
				"			EXECUTE st_query_update_source_file_refParentOfSelectedOnly;    \n" +
				"  \n" +
				"		END IF;    \n" +
				"  \n" +
				"		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN      \n" +
				"  \n" +
				"			#update-2 for inner files inside of source selected folder, refParent is moving folder or exists folder at destination place    \n" +
				"			UPDATE temp_source_allInnerFilesToMove_ref gf1      \n" +
				"			SET refParentIdForDestinationNewFile = (SELECT gencFolderID FROM temp_destination_allFoldersAfterCreated      \n" +
				"								WHERE gencFolderName = (SELECT gencFolderName FROM temp_source_allFoldersToMove       \n" +
				"											WHERE gencFolderID = gf1.refParentId)      \n" +
				"								AND folderLevel =  gf1.fileLevel - 1       \n" +
				"							      )    \n" +
				"			WHERE refParentIdForDestinationNewFile IS NULL	# if not put 'is null' then it will overwrite above update-1    \n" +
				"			;    \n" +
				"  \n" +
				"		END IF;	    \n" +
				"  \n" +
				"		/* END IF; */	    \n" +
				"  \n" +
				"		/*    \n" +
				"		SELECT 'all source files to move with destination refParent' ;    \n" +
				"		SELECT * FROM temp_source_allInnerFilesToMove_ref ;    \n" +
				"		*/    \n" +
				"  \n" +
				"  \n" +
				"		#-------------- get destination all exists files   -------------------      \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFiles;      \n" +
				"		/*IF((psourceGencFolderIDsToMove IS NULL OR psourceGencFolderIDsToMove = '') AND (SELECT COUNT(1) FROM temp_source_allFoldersToMove) = 1      \n" +
				"			AND isSelectedParentIsMainParentFolder = 1) THEN */    \n" +
				"		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN 	    \n" +
				"  \n" +
				"			CREATE TEMPORARY TABLE temp_destination_allExistsFiles AS      \n" +
				"				SELECT   gencFileID , gencOriginalName , refParentId       \n" +
				"				FROM     genericfiles      \n" +
				"				WHERE    deletedAt IS NULL      \n" +
				"				AND      gencFileOwnerType = pgencFileOwnerType  AND refTransID = prefTransID      \n" +
				"				AND     refParentId IN (SELECT gencFolderID FROM temp_destination_allExistsFolders) 			      \n" +
				"				AND 	isRecycle = 0  ;      \n" +
				"			ALTER TABLE temp_destination_allExistsFiles       \n" +
				"			ADD COLUMN fileLevel INT;      \n" +
				"			# get destination ref parent folder level and file is in it >> so file level is refParentFolderLevel + 1      \n" +
				"			UPDATE temp_destination_allExistsFiles gf      \n" +
				"			SET fileLevel = (SELECT folderLevel FROM temp_destination_allExistsFolders       \n" +
				"							WHERE gencFolderID = gf.refParentId) + 1 ;    \n" +
				"  \n" +
				"		ELSE      \n" +
				"  \n" +
				"			CREATE TEMPORARY TABLE temp_destination_allExistsFiles AS      \n" +
				"				SELECT   gencFileID , gencOriginalName , refParentId       \n" +
				"				FROM     genericfiles      \n" +
				"				WHERE    deletedAt IS NULL      \n" +
				"				AND      gencFileOwnerType = pgencFileOwnerType  AND refTransID = prefTransID      \n" +
				"				AND      refParentId = pdestinationGencFolderIDInMove			      \n" +
				"				AND 	 isRecycle = 0;      \n" +
				"			ALTER TABLE temp_destination_allExistsFiles       \n" +
				"			ADD COLUMN fileLevel INT;      \n" +
				"			# here all file is at main parent folder like super admin so file level is at 1       \n" +
				"			UPDATE temp_destination_allExistsFiles gf      \n" +
				"			SET fileLevel =  1 ;    \n" +
				"  \n" +
				"		END IF;	    \n" +
				"  \n" +
				"		/*    \n" +
				"		SELECT 'destination all exists files';    \n" +
				"		SELECT * FROM temp_destination_allExistsFiles;    \n" +
				"		*/    \n" +
				"  \n" +
				"		/*    \n" +
				"		SELECT 'required/new file to move in to destination from source';    \n" +
				"		*/    \n" +
				"  \n" +
				"		/*    \n" +
				"		# all required to move files into destination folder    \n" +
				"		SELECT  gf.gencOriginalName gencOriginalName , gf.gencFileDescription gencFileDescription,       \n" +
				"			gf.gencFileExtension gencFileExtension, gf.gencFileType gencFileType, gf.tags tags,       \n" +
				"			prefTransID refTransID , pentityID entityID , pgencFileOwnerType gencFileOwnerType ,       \n" +
				"			 gf.refParentIdForDestinationNewFile refParentId ,gf.fileSize fileSize,     \n" +
				"			 gf.genFilePath genFilePathOfSourceMstFile      \n" +
				"		FROM temp_source_allInnerFilesToMove_ref gf      \n" +
				"		WHERE gencOriginalName NOT IN (SELECT gencOriginalName FROM temp_destination_allExistsFiles      \n" +
				"						WHERE fileLevel = gf.fileLevel       \n" +
				"						AND refParentId = gf.refParentIdForDestinationNewFile) ;     \n" +
				"						*/    \n" +
				"  \n" +
				"  \n" +
				"		# update moved file refParent - destination folder 					    \n" +
				"		UPDATE genericfiles gf, temp_source_allInnerFilesToMove_ref safr    \n" +
				"		SET gf.refParentID = safr.refParentIdForDestinationNewFile 	    \n" +
				"		WHERE gf.gencFileID = safr.gencFileID    \n" +
				"		AND safr.gencOriginalName NOT IN (SELECT gencOriginalName FROM temp_destination_allExistsFiles      \n" +
				"						WHERE fileLevel = safr.fileLevel       \n" +
				"						AND refParentId = safr.refParentIdForDestinationNewFile)  				    \n" +
				"		;	    \n" +
				"  \n" +
				"		/*    \n" +
				"		SELECT 'get all duplicate files' ;    \n" +
				"		*/    \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_source_destination_allDuplicateFilesToCopy;      \n" +
				"		CREATE TEMPORARY TABLE temp_source_destination_allDuplicateFilesToCopy(      \n" +
				"			gencFileID INT,      \n" +
				"			gencOriginalName VARCHAR(255),      \n" +
				"			refParentId INT,      \n" +
				"			refParentFolderName VARCHAR(255),      \n" +
				"			fileLevel INT,      \n" +
				"			refTransIDOfDestination INT,      \n" +
				"			refParentIdForDestinationNewFile INT,      \n" +
				"			gencFileIDOfDestinationExistsFile INT ,    \n" +
				"			isRemoveRefParentFolderOfSourceFile TINYINT     \n" +
				"		);    \n" +
				"  \n" +
				"		# duplicate file list    \n" +
				"		# if  any/only outer file selected for move then no need to move its folder - isRemoveRefParentFolderOfSourceFile    \n" +
				"		# we have to move folder for folder with inner file case    \n" +
				"		INSERT INTO temp_source_destination_allDuplicateFilesToCopy       \n" +
				"		(`gencFileID`,`gencOriginalName`,`refParentId`,      \n" +
				"			`refParentFolderName`,      \n" +
				"			`fileLevel`, `refTransIDOfDestination`, `refParentIdForDestinationNewFile`,      \n" +
				"			`gencFileIDOfDestinationExistsFile`,    \n" +
				"			`isRemoveRefParentFolderOfSourceFile`)      \n" +
				"		SELECT gfo.`gencFileID` , gfo.`gencOriginalName` , gfo.`refParentId` ,      \n" +
				"			(SELECT gencFolderName FROM generic_folder WHERE gencFolderID = gfo.`refParentId`) refParentFolderName ,      \n" +
				"			gfo.fileLevel, prefTransID refTransIDOfDestination , gfo.`refParentIdForDestinationNewFile` ,      \n" +
				"			gfwoop.gencFileID AS gencFileIDOfDestinationExistsFile ,    \n" +
				"			 CASE WHEN (SELECT FIND_IN_SET(gfo.`gencFileID`,psourceGencFileIDsToMove) > 0) THEN 0    \n" +
				"								ELSE 1 END  isRemoveRefParentFolderOfSourceFile    \n" +
				"		FROM temp_source_allInnerFilesToMove_ref gfo       \n" +
				"			JOIN temp_destination_allExistsFiles gfwoop ON gfo.gencOriginalName = gfwoop.gencOriginalName      \n" +
				"								AND gfo.fileLevel = gfwoop.fileLevel      \n" +
				"								AND gfo.refParentIdForDestinationNewFile = gfwoop.refParentId       \n" +
				"		;      \n" +
				"  \n" +
				"		SELECT COUNT(1) INTO v_totDuplicateFiles     \n" +
				"		FROM temp_source_destination_allDuplicateFilesToCopy ;    \n" +
				"  \n" +
				"		SELECT COUNT(1) INTO v_totDuplicateFilesFromSourceGencFileIDsToMove     \n" +
				"		FROM temp_source_destination_allDuplicateFilesToCopy WHERE isRemoveRefParentFolderOfSourceFile = 0 ;	    \n" +
				"  \n" +
				"		# remove source folder which is available with same name in destination - only if it has no any duplicate files in it     \n" +
				"		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '' AND     \n" +
				"			(    \n" +
				"				v_totDuplicateFiles = 0     \n" +
				"				OR (v_totDuplicateFiles > 0 AND v_totDuplicateFiles = v_totDuplicateFilesFromSourceGencFileIDsToMove)     \n" +
				"				# duplicate file count is what we selected from then also remove other folder because no need to do with selected file refPanre    \n" +
				"			  )			    \n" +
				"		) THEN     \n" +
				"  \n" +
				"  \n" +
				"			# update refParent of moved folder >> to destination new parent folder					    \n" +
				"			UPDATE generic_folder gf, temp_source_allFoldersToMove_ref afr    \n" +
				"			SET gf.isDeleted = 1 , gf.deletedAt = fun_DatetimetoUTCDateTime() , gf.deletedBy = puserID     \n" +
				"			WHERE gf.gencFolderID = afr.gencFolderID  AND gf.isRecycle = 0  \n" +
				"			AND afr.gencFolderName IN (SELECT gencFolderName FROM temp_destination_allExistsFolders     \n" +
				"							WHERE folderLevel = afr.folderLevel)     \n" +
				"			AND afr.folderLevel != 0  				    \n" +
				"			;    \n" +
				"  \n" +
				"		END IF;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	 END IF;     \n" +
				"  \n" +
				"	IF ((SELECT COUNT(1) FROM temp_errorlog_allFolderDocToMove) > 0) THEN    \n" +
				"  \n" +
				"		SELECT 0 AS ismovesuccess;      \n" +
				"  \n" +
				"		# get error log details    \n" +
				"		SELECT * FROM temp_errorlog_allFolderDocToMove;	    \n" +
				"  \n" +
				"	ELSE     \n" +
				"  \n" +
				"		SELECT 1 AS ismovesuccess;     \n" +
				"  \n" +
				"		# SELECT 'deleted_source_folder' ;      \n" +
				"		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN     \n" +
				"			SELECT * FROM temp_source_allDeletedFoldersWhileMove;    \n" +
				"		ELSE    \n" +
				"			SELECT 0 AS deleted_source_folder;      \n" +
				"		END IF;	    \n" +
				"  \n" +
				"		# SELECT 'deleted_source_files' ;      \n" +
				"		IF (psourceGencFileIDsToMove IS NOT NULL AND psourceGencFileIDsToMove != '') THEN     \n" +
				"			SELECT * FROM temp_source_allDeletedFilesWhileMove;    \n" +
				"		ELSE    \n" +
				"			SELECT 0 AS deleted_source_files;	    \n" +
				"		END IF;	    \n" +
				"  \n" +
				"		# SELECT \"duplicate files\";      \n" +
				"		SELECT * FROM temp_source_destination_allDuplicateFilesToCopy;     \n" +
				"  \n" +
				"	END IF;	    \n" +
				"  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_errorlog_allFolderDocToMove ;					    \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove;      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFoldersWhileMove;      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allFolders_level;  		      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFolders;      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove_ref;     \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_destination_allFoldersAfterCreated ;    \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFilesWhileMove;      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove;    \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove_ref;      \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFiles ;    \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_source_destination_allDuplicateFilesToCopy;    \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP function IF EXISTS `fun_getCofCDocumentCount`;  \n" +
				"CREATE FUNCTION `fun_getCofCDocumentCount`(            \n" +
				"	pUMIDId INT,    \n" +
				"    pPackingSlipId INT    \n" +
				") RETURNS int  \n" +
				"BEGIN    \n" +
				"	Declare v_DocumentCount int;    \n" +
				"    Declare v_DocumentTypeIds varchar(1000);  \n" +
				"    Declare v_PackingSlipId int;    \n" +
				"  \n" +
				"  \n" +
				"    SELECT 	GROUP_CONCAT(gencCategoryID)       \n" +
				"	INTO	v_DocumentTypeIds      \n" +
				"	FROM 	genericcategory       \n" +
				"	WHERE 	categoryType = 'Document Type'       \n" +
				"	AND 	gencCategoryName IN ('COFC', 'Packing Slip With COFC');      \n" +
				"  \n" +
				"    SELECT 	COUNT(1) into v_DocumentCount     \n" +
				"    FROM 	genericfiles g        \n" +
				"	WHERE  ((g.refTransID = pUMIDId AND g.gencFileOwnerType = 'component_sid_stock' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds))       \n" +
				"			OR (g.refTransID = pPackingSlipId AND g.gencFileOwnerType = 'packing_slip' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds)))    \n" +
				"    AND 	g.isDeleted = 0 AND g.isRecycle = 0;    \n" +
				"  \n" +
				"	RETURN v_DocumentCount;      \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP function IF EXISTS `fun_getFileCountByTransIDAndType`;  \n" +
				"CREATE FUNCTION `fun_getFileCountByTransIDAndType`(            \n" +
				"	pOwnerType varchar(255),        \n" +
				"    pRefTransID INT(11)          \n" +
				") RETURNS longtext CHARSET utf8mb4  \n" +
				"BEGIN            \n" +
				"	RETURN (SELECT IFNULL(vgf.cnt,0) FROM   \n" +
				"			vu_genericfilescount vgf WHERE vgf.refTransID = pRefTransID  \n" +
				"            AND vgf.gencFileOwnerType = pOwnerType);   \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetAssemblySamplesList`;  \n" +
				"CREATE PROCEDURE `Sproc_GetAssemblySamplesList`(      \n" +
				"	IN pWoId INT,      \n" +
				"	IN pAssyId INT,            \n" +
				"    IN pIsShowAll TINYINT(1)            \n" +
				")  \n" +
				"BEGIN            \n" +
				"	select eq.eqpID, gf.gencFileName, co.PIDCode, eq.assetName,             \n" +
				"		bin.Name binName, wh.Name wareHouseName, pwh.Name parentWareHouseName,             \n" +
				"		et.gencCategoryName ownership,          \n" +
				"        co.id partID,          \n" +
				"        co.mfgPN,          \n" +
				"        rr.rohsIcon,          \n" +
				"        rr.name rohsName,      \n" +
				"        (select wo.selectedSampleID from workorder wo where wo.selectedSampleID = eq.eqpID and wo.woID = pWoId) selectedSampleID      \n" +
				"	  from equipment eq            \n" +
				"	  join component co ON co.id = eq.assyId            \n" +
				"      left join rfq_rohsmst rr ON rr.id = co.RoHSStatusID      \n" +
				"	  left join binmst bin ON bin.id = eq.binId      \n" +
				"	  left join warehousemst wh ON wh.ID = bin.WarehouseID      \n" +
				"	  left join warehousemst pwh ON pwh.ID = wh.parentWHID      \n" +
				"	  left join genericcategory et ON et.gencCategoryID = eq.eqpOwnershipTypeID and et.categoryType = 'Equipment, Workstation & Sample Ownerships'      \n" +
				"	  left join genericfiles gf ON gf.refTransID = eq.eqpID and gf.gencFileOwnerType = 'equipment' and gf.isDefault = 1 and gf.deletedAt is null and gf.isdeleted = false and gf.isRecycle = 0  \n" +
				"	 where eq.equipmentAs = 'S'      \n" +
				"	   and eq.deletedAt is null      \n" +
				"	   and eq.isdeleted = false      \n" +
				"       and eq.isActive = true      \n" +
				"       and case when pIsShowAll=true then      \n" +
				"				exists (select 1 from component c where c.custAssyPN = co.custAssyPN and c.mfgcodeID = co.mfgcodeID and c.id=pAssyId)      \n" +
				"			else      \n" +
				"				co.id = pAssyId      \n" +
				"			end      \n" +
				"	order by selectedSampleID is null asc, selectedSampleID asc, co.PIDCode asc;      \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetComponentCustomerLOA`;  \n" +
				"CREATE PROCEDURE `Sproc_GetComponentCustomerLOA`(                      \n" +
				"	IN ppageIndex INT,                                    \n" +
				"	IN precordPerPage INT,                            \n" +
				"	IN pOrderBy VARCHAR(255),                                    \n" +
				"    IN pWhereClause VARCHAR(16383),                                    \n" +
				"    IN pComponentID INT,                                \n" +
				"    IN pCustomerID INT                                \n" +
				")  \n" +
				"BEGIN                                    \n" +
				"	DECLARE pOffset INT;                                    \n" +
				"	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
				"	DECLARE v_TimeZone VARCHAR(50);                  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                \n" +
				"  	DROP TEMPORARY TABLE IF EXISTS Results;            \n" +
				"	IF(pComponentID IS NOT NULL) THEN                                  \n" +
				"			SET @temp_Sproc_GetComponentCustomerLOA = CONCAT(\"SELECT cst.id AS CustomerID, cst.mfgName companyName, loa.id, loa.componentID, loa.loa_price,     \n" +
				"				fun_getUserNameByID(loa.updatedBy) updatedby,                              \n" +
				"				fun_getUserNameByID(loa.createdBy) createdby,                              \n" +
				"				fun_getRoleByID(loa.createByRoleId) createdbyRole,                              \n" +
				"				fun_getRoleByID(loa.updateByRoleId) updatedbyRole,                              \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(loa.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                              \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(loa.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          \n" +
				"				fun_getRoHSNameByID(com.RoHSStatusID)rohsComplientConvertedValue,fun_getRoHSIconByID(com.RoHSStatusID)rohsIcon , com.isCustom      \n" +
				"			FROM component_customer_loa loa                                    \n" +
				"			JOIN mfgcodemst cst ON cst.id = loa.customerID AND IFNULL(cst.isDeleted,0) = 0        \n" +
				"            JOIN component com on com.id = loa.componentID        \n" +
				"            WHERE loa.componentID = \",pComponentID,\" AND IFNULL(loa.isDeleted,0) = 0                \n" +
				"             AND EXISTS (SELECT 1 FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_customer_loa' AND gf.refTransID = loa.id AND gf.isDeleted = 0 and gf.isRecycle = 0)\");                \n" +
				"	END IF;                                    \n" +
				"	IF(pCustomerID IS NOT NULL) THEN                                  \n" +
				"		SET @temp_Sproc_GetComponentCustomerLOA = CONCAT(\"SELECT com.id AS ComponentID, com.mfgPN, com.PIDCode, loa.id, loa.customerID, loa.loa_price,        \n" +
				"		fun_getRoHSNameByID(com.RoHSStatusID)rohsComplientConvertedValue,fun_getRoHSIconByID(com.RoHSStatusID)rohsIcon, com.isCustom      \n" +
				"        FROM component_customer_loa loa                                    \n" +
				"		JOIN component com ON com.id = loa.componentID AND IFNULL(com.isDeleted,0) = 0                  \n" +
				"        WHERE loa.customerID = \",pCustomerID,\" AND IFNULL(loa.isDeleted,0) = 0                \n" +
				"          AND EXISTS (SELECT 1 FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_customer_loa' AND gf.refTransID = loa.id AND gf.isDeleted = 0 and gf.isRecycle = 0)\");                \n" +
				"	END IF;                \n" +
				"  \n" +
				"	IF (pOrderBy IS NOT NULL) THEN                                    \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
				"	ELSE                                    \n" +
				"		SET pOrderBy = \"ORDER BY id ASC\" ;                                    \n" +
				"	END IF;                \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
				"		SET pWhereClause = '1=1' ;                                    \n" +
				"	END IF;	                \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
				"	ELSE	                                    \n" +
				"		SET rowNumWhere = '';                                    \n" +
				"	END IF;                \n" +
				"  \n" +
				"	/* to get total count of rows */               \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentCustomerLOA,\" ) c where 1=1 and \", pWhereClause);              \n" +
				"	PREPARE query2 FROM @SQLStatement2;              \n" +
				"	EXECUTE query2;              \n" +
				"	DEALLOCATE PREPARE query2;            \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentCustomerLOA,\" ) c              \n" +
				"		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
				"	PREPARE query1 FROM @SQLStatement2;              \n" +
				"	EXECUTE query1;              \n" +
				"	DEALLOCATE PREPARE query1;                 \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetECORequest`;  \n" +
				"CREATE PROCEDURE `Sproc_GetECORequest`(            \n" +
				"	IN ppageIndex INT,            \n" +
				"	IN precordPerPage INT,            \n" +
				"	IN pOrderBy VARCHAR(255),            \n" +
				"    IN pWhereClause VARCHAR(16383),            \n" +
				"    IN pRequestType INT,            \n" +
				"    IN pPartID INT,            \n" +
				"    IN pEcoDfmNum LONGTEXT            \n" +
				"    )  \n" +
				"BEGIN        \n" +
				" 	DECLARE pOffset INT;            \n" +
				"	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
				"	DECLARE vTextAngularKeyCode VARCHAR(500);            \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
				"	DECLARE v_TimeZone VARCHAR(50);                  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
				"     -- get data to manage image/video/link url for text-angular            \n" +
				"	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();            \n" +
				"  \n" +
				"	SET @tempquery = CONCAT(\"SELECT er.ecoReqID,er.ecoNumber,er.woID,er.custECONumber,er.FCAECONumber,          \n" +
				"		fun_getTextAngularData(er.reasonForChange, '\",vTextAngularKeyCode,\"') reasonForChange, fun_getTextAngularData(er.description, '\",vTextAngularKeyCode,\"') description,          \n" +
				"        er.initiateBy,er.initiateDate,er.approvalBy, er.approvalDate,er.rejectedBy,er.status,          \n" +
				"        fun_getTextAngularData(er.comments, '\",vTextAngularKeyCode,\"') comments,er.finalStatus,er.finalStatusInit,er.finalStatusDate,          \n" +
				"        fun_getTextAngularData(er.finalStatusReason, '\",vTextAngularKeyCode,\"') finalStatusReason,er.ecoDraftStaus,              \n" +
				"		er.isAllProductConf,er.isFutureProd,er.isTemp,er.opID,er.woOPID,er.fromPartID,er.toPartID,er.ECOImplemetTo,er.requestedWOOPID,              \n" +
				"		er.implemetToWOID,er.closedDate,er.requestType,er.ecoDfmTypeID,er.mountingTypeID,              \n" +
				"        fun_getUserNameByID(er.updatedBy) updatedby,              \n" +
				"		fun_getUserNameByID(er.createdBy) createdby,               \n" +
				"		fun_getRoleByID(er.createByRoleId) createdbyRole,              \n" +
				"		fun_getRoleByID(er.updateByRoleId) updatedbyRole,               \n" +
				"		fun_ApplyCommonDateTimeFormatByParaValue(er.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                \n" +
				"		fun_ApplyCommonDateTimeFormatByParaValue(er.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,            \n" +
				"		IFNULL(vgf.cnt,0) AS documentCount,  \n" +
				"        fun_getGenericCategoryNameByID(er.ecoDfmTypeID) EcoDfmType,fun_getMountingTypeNameByID(er.mountingTypeID) MountingType,                  \n" +
				"        CONCAT(emp.firstName , ' ' , emp.lastName) fullName ,fun_getWoSubStatusNameByID((select woSubStatus from workorder where woID = er.woID)) WoStatus,                   \n" +
				"        (select woSubStatus from workorder where woID = er.woID) woStatusID,                  \n" +
				"        fun_getWorkorderNumberByID(er.woID) as workorder,                        \n" +
				"        tc.PIDCode AS toPIDCode,tc.mfgPN as toMFGPN,fc.mfgPN as fromMFGPN,tc.nickName as toNickName,fc.nickName as fromNickName,fc.isCustom as fromIsCustom,tc.isCustom AS toIsCustom,                           \n" +
				"        fc.PIDCode AS fromPIDCode,fun_getRoHSIconByID(fc.RoHSStatusID) as fromPartRoHSIcon, fun_getRoHSNameByID(fc.RoHSStatusID) as fromPartRoHSName,                      \n" +
				"        fun_getRoHSIconByID(tc.RoHSStatusID) as toPartRoHSIcon, fun_getRoHSNameByID(tc.RoHSStatusID) as toPartRoHSName,                      \n" +
				"        (CASE WHEN (`er`.`custECONumber` IS NULL OR `er`.`custECONumber` = '') THEN er.FCAECONumber                             \n" +
				"			ELSE er.custECONumber END) AS `ECODFMNumberValue` ,            \n" +
				"		(CASE WHEN (`er`.`custECONumber` IS NULL OR `er`.`custECONumber` = '') THEN 'INTERNAL'                             \n" +
				"			ELSE 'CUSTOMER' END) AS `custECONumberConvertedValue` ,             \n" +
				"		(CASE WHEN (`er`.`status` = 'P') THEN 'Inactive'                             \n" +
				"			WHEN (`er`.`status` = 'C') THEN 'Active' END) AS `statusConvertedValue` ,                            \n" +
				"		(CASE WHEN (`er`.`finalStatus` = 'P') THEN 'Resolution Pending'                             \n" +
				"		WHEN (`er`.`finalStatus` = 'A') THEN (case when `er`.`requestType` = 1 then 'Resolution Accepted' else 'Resolution Accepted' end)                        \n" +
				"        WHEN (`er`.`finalStatus` = 'R') THEN (case when `er`.`requestType` = 1 then  'Rejected' else  'Rejected' end) ELSE '' END) AS `finalstatusConvertedValue`				                             \n" +
				"        FROM eco_request er     \n" +
				"        JOIN vu_genericfilescount vgf ON vgf.refTransID = er.ecoReqID  \n" +
				"        JOIN employees emp ON er.initiateBy = emp.id AND IFNULL(emp.isDeleted, 0) = 0                            \n" +
				"        left JOIN component fc ON fc.id = er.fromPartID AND IFNULL(fc.isDeleted,0) = 0 AND IFNULL(fc.category,0) = 3                          \n" +
				"        left JOIN component tc ON tc.id = er.toPartID AND IFNULL(tc.isDeleted,0) = 0 AND IFNULL(tc.category,0) = 3                          \n" +
				"        WHERE IFNULL(er.isDeleted,0) = 0 AND vgf.gencFileOwnerType = 'eco_request' \");                    \n" +
				"  \n" +
				"	IF (pOrderBy IS NOT NULL) THEN                            \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
				"	ELSE                            \n" +
				"		SET pOrderBy = \"ORDER BY ecoNumber ASC\";                            \n" +
				"	END IF;	                            \n" +
				"	IF(pRequestType IS NOT NULL OR pRequestType != '') THEN                    \n" +
				"    	SET @tempquery = CONCAT(@tempquery,\" and er.requestType = \",pRequestType);                     \n" +
				"	END IF;                \n" +
				"  \n" +
				"    IF(pPartID IS NOT NULL OR pPartID != '') THEN                    \n" +
				"		SET @tempquery = CONCAT(@tempquery,\" and er.fromPartID = \",pPartID);                     \n" +
				"	END IF;                    \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
				"	ELSE	                            \n" +
				"		SET rowNumWhere = '';                            \n" +
				"	END IF;	                        \n" +
				"  \n" +
				"    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
				"		SET pWhereClause = '1=1' ;                            \n" +
				"	END IF;	              \n" +
				"  \n" +
				"     IF(pEcoDfmNum IS NOT NULL OR pEcoDfmNum != '') THEN                    \n" +
				"    	SET pWhereClause = CONCAT(pWhereClause,\" and (ECODFMNumberValue like '%\",pEcoDfmNum,\"%' OR ecoNumber like '%\",pEcoDfmNum,\"%') \");                     \n" +
				"	END IF;           \n" +
				"   # select @tempquery;          \n" +
				"     /* to get total count of rows */                         \n" +
				"    SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                        \n" +
				" # select  @SQLStatement2;          \n" +
				"    PREPARE query2 FROM @SQLStatement2;                        \n" +
				"	EXECUTE query2;                        \n" +
				"	DEALLOCATE PREPARE query2;                      \n" +
				"  \n" +
				"   SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                        \n" +
				"		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
				"  \n" +
				"    PREPARE query1 FROM @SQLStatement2;                        \n" +
				"	EXECUTE query1;                        \n" +
				"	DEALLOCATE PREPARE query1;                        \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetFilterEquipmentlist`;  \n" +
				"CREATE PROCEDURE `Sproc_GetFilterEquipmentlist`(    \n" +
				"	IN searchString VARCHAR(255)    \n" +
				")  \n" +
				"BEGIN    \n" +
				"  \n" +
				"	DECLARE pWhereClause VARCHAR(16383);      \n" +
				"         SET pWhereClause = '1=1' ;     \n" +
				"  \n" +
				"	SET @temp_Sproc_GetFilterEquipmentlist = CONCAT(\"          \n" +
				"		SELECT eqpID,assetName,(select g.gencFileName from genericfiles g where g.gencFileName  like 'profile%' and g.refTransID=eqpID and g.deletedAt is null and g.isRecycle = 0 and g.gencFileOwnerType='equipment' limit 1) profileImg	              \n" +
				"		FROM `equipment`            \n" +
				"		WHERE `deletedAt` IS NULL  and isActive=1          \n" +
				"	\");              \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	IF(searchString IS NOT NULL AND searchString != '') THEN              \n" +
				"		SET pWhereClause =CONCAT('assetName like ''%', searchString, '%'' ') ;     \n" +
				"	END IF;	              \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetFilterEquipmentlist,\" ) c  where \", pWhereClause);                \n" +
				"	PREPARE query1 FROM @SQLStatement2;                \n" +
				"	EXECUTE query1;                \n" +
				"	DEALLOCATE PREPARE query1;          \n" +
				"  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_getInvoiceDocumentCount`;  \n" +
				"CREATE PROCEDURE `Sproc_getInvoiceDocumentCount`(                                                                                          \n" +
				"	IN invoiceID INT                  \n" +
				")  \n" +
				"BEGIN                         \n" +
				"	 SELECT   \n" +
				"		IFNULL(vgf.cnt, 0) AS invoiceDocumentCount,  \n" +
				"		IFNULL(vgf1.cnt, 0) AS packingslipDocumentCount  \n" +
				"	 FROM customer_packingslip cp   \n" +
				"	 LEFT JOIN vu_genericfilescount vgf ON  \n" +
				"			vgf.entityID = -18 AND vgf.refTransID = invoiceID  \n" +
				"     LEFT JOIN vu_genericfilescount vgf1 ON  \n" +
				"			vgf1.entityID = -17 AND vgf1.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID = invoiceID AND cpp.isDeleted = 0)  \n" +
				"     WHERE cp.isDeleted = 0 AND cp.id = invoiceID;  \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetUMIDDocumentCount`;  \n" +
				"CREATE PROCEDURE `Sproc_GetUMIDDocumentCount`(	                        \n" +
				"	IN pUMIDId INT                      \n" +
				"    )  \n" +
				"BEGIN                        \n" +
				"	DECLARE v_PackingSlipId INT;      \n" +
				"	DECLARE v_DocumentTypeIds VARCHAR(100);      \n" +
				"	DECLARE v_DocumentCount INT;   \n" +
				"	DECLARE v_DocumentCofCCount INT;      \n" +
				"  \n" +
				"	SELECT 	refPackingSlipMaterialRecID       \n" +
				"	INTO 	v_PackingSlipId      \n" +
				"	FROM 	packing_slip_material_receive_det       \n" +
				"	WHERE 	deletedAt IS NULL       \n" +
				"			AND id = (      \n" +
				"					SELECT 	refPackingSlipDetailID       \n" +
				"					FROM 	component_sid_stock_packing_detail       \n" +
				"					WHERE 	refComponentSidStockID = pUMIDId       \n" +
				"							AND deletedAt IS NULL       \n" +
				"					LIMIT 1      \n" +
				"				)      \n" +
				"	LIMIT 1;      \n" +
				"  \n" +
				"	SELECT 	GROUP_CONCAT(gencCategoryID)       \n" +
				"	INTO	v_DocumentTypeIds      \n" +
				"	FROM 	genericcategory       \n" +
				"	WHERE 	deletedAt IS NULL  \n" +
				"			AND categoryType = 'Document Type'       \n" +
				"			AND gencCategoryName IN ('COFC', 'Packing Slip With COFC');      \n" +
				"  \n" +
				"    SELECT    \n" +
				"		IFNULL(vgf.cnt, 0) INTO v_DocumentCount  \n" +
				"	FROM 	vu_genericfilescount vgf       \n" +
				"	WHERE 	vgf.refTransID = pUMIDId       \n" +
				"			AND vgf.gencFileOwnerType = 'component_sid_stock';      \n" +
				"  \n" +
				"	SELECT 	COUNT(1)      \n" +
				"	INTO 	v_DocumentCofCCount      \n" +
				"	FROM 	genericfiles       \n" +
				"	WHERE 	deletedAt IS NULL  AND isRecycle = 0       \n" +
				"			AND (    \n" +
				"				(refTransID = pUMIDId AND gencFileOwnerType = 'component_sid_stock' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds))       \n" +
				"				OR     \n" +
				"				(refTransID = v_PackingSlipId AND gencFileOwnerType = 'packing_slip' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds))    \n" +
				"			);      \n" +
				"  \n" +
				"	SELECT 	v_DocumentCount AS documentCount,      \n" +
				"		v_DocumentCofCCount AS documentCofCCount;      \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetUMIDDocumentListForCOFC`;  \n" +
				"CREATE PROCEDURE `Sproc_GetUMIDDocumentListForCOFC`()  \n" +
				"BEGIN    \n" +
				"		Declare vPartPictureCategoryId int(11);    \n" +
				"		Declare vCofCCategoryId int(11);   \n" +
				"  \n" +
				"		SELECT gencCategoryID into vPartPictureCategoryId FROM genericcategory WHERE gencCategoryName = 'Part Picture' and isRecycle = 0;    \n" +
				"		SELECT gencCategoryID into vCofCCategoryId FROM genericcategory WHERE gencCategoryName = 'COFC' and isRecycle = 0;    \n" +
				"		select 	g.gencFileID, 			g.gencFileName, 	g.gencOriginalName, 	g.gencFileExtension, 	g.gencFileType, 	    \n" +
				"				g.tags, 				g.isDefault,		g.refTransID, 			p.uid,					g.entityID, 			    \n" +
				"                g.gencFileOwnerType, 	g.isActive, 		g.genFilePath, 			g.isShared, 			g.fileGroupBy, 		    \n" +
				"                g.fileSize,				vCofCCategoryId cOfcFileGroup,				g.createdBy,			g.createByRoleId    \n" +
				"		from 	genericfiles g    \n" +
				"		join (    \n" +
				"			select 	css.uid, max(g.gencFileID) partPictureDocumentId    \n" +
				"			from 	genericfiles g    \n" +
				"			join 	component_sid_stock css on g.refTransID = css.id and css.stockInventoryType = 'OI' and css.isDeleted = 0    \n" +
				"            where 	g.isDeleted = 0  and g.isRecycle = 0  \n" +
				"			group by refTransID     \n" +
				"			having 	sum(g.fileGroupBy = vCofCCategoryId) = 0 and sum(g.fileGroupBy = vPartPictureCategoryId) > 0    \n" +
				"            limit 	5     \n" +
				"		) p on p.partPictureDocumentId = g.gencFileID and g.isRecycle = 0;	    \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetWOSampleDetail`;  \n" +
				"CREATE PROCEDURE `Sproc_GetWOSampleDetail`(      \n" +
				"	IN pWoID INT    \n" +
				")  \n" +
				"BEGIN    \n" +
				"	SELECT genFilePath , gencOriginalName      \n" +
				"    FROM genericfiles gf , workorder wo      \n" +
				"    WHERE gf.refTransID = wo.selectedSampleID      \n" +
				"    AND gf.gencFileOwnerType ='equipment'       \n" +
				"    AND gf.entityID = -3      \n" +
				"    AND IFNULL(gf.isDeleted,0) = 0  AND gf.isRecycle = 0    \n" +
				"    AND wo.woID = pWoID;      \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetWoUmidImageAndCofcDoc`;  \n" +
				"CREATE PROCEDURE `Sproc_GetWoUmidImageAndCofcDoc`(            \n" +
				"	pFromGenerated INT,			        \n" +
				"	pWoId INT,            \n" +
				"    pSODtlId INT,        \n" +
				"    pShowDoc CHAR(3) ,            \n" +
				"    pPartType CHAR(3) ,        \n" +
				"    pIgnoreDuplicate TINYINT,        \n" +
				"    pPrintSerialNo TINYINT,   \n" +
				"    pGeneratedByID INT            \n" +
				")  \n" +
				"BEGIN	            \n" +
				"	DECLARE vGroupBy VARCHAR(1000);            \n" +
				"	DECLARE vOrderBy VARCHAR(1000);            \n" +
				"	DECLARE vWhereClause VARCHAR(1000);            \n" +
				"	DECLARE vIsContinue INT DEFAULT 1;        \n" +
				"  \n" +
				"    DROP TEMPORARY TABLE IF EXISTS `temp_usage_material_report_mst`;        \n" +
				"    DROP TEMPORARY TABLE IF EXISTS `temp_usage_material_report_dtl`;        \n" +
				"    DROP TEMPORARY  TABLE IF EXISTS `temp_rev_wo_list`;        \n" +
				"    DROP TEMPORARY  TABLE IF EXISTS `temp_subass_wo_list`;        \n" +
				"  \n" +
				"     ## from generated = 2 , SP called from sales order list         \n" +
				"     ## From Generated = 1 , SP called from workorder list        \n" +
				"	IF pFromGenerated = 2 THEN         \n" +
				"		SELECT  COUNT(1)  INTO @cnt        \n" +
				"        FROM customer_packingslip cp,  customer_packingslip_det cpd         \n" +
				"        WHERE cp.id  = cpd.refCustPackingSlipID         \n" +
				"        AND cp.status = 1        \n" +
				"        AND cp.isDeleted = 0        \n" +
				"        AND cpd.isDeleted = 0        \n" +
				"        AND cpd.refSalesorderDetid = pSODtlId;        \n" +
				"  \n" +
				"		IF @cnt = 0  THEN         \n" +
				"			SET vIsContinue = 0 ;            \n" +
				"         END IF;           \n" +
				"    END IF;        \n" +
				"	IF vIsContinue = 1 THEN		        \n" +
				"		#get list of revised workorder list of given workorder        \n" +
				"        CREATE TEMPORARY TABLE `temp_rev_wo_list` AS        \n" +
				"		WITH RECURSIVE RevWo AS  (        \n" +
				"						SELECT	woId,1 lvl  ,terminateWOID        \n" +
				"						FROM workorder         \n" +
				"						WHERE woId = pWoId        \n" +
				"						AND isDeleted = 0        \n" +
				"						UNION ALL        \n" +
				"						SELECT	wo.woID, rw.lvl +1 lvl,wo.terminateWOID        \n" +
				"						 FROM workorder wo              \n" +
				"						 INNER JOIN RevWo rw ON rw.woID = wo.terminatewoID        \n" +
				"						 WHERE wo.isDeleted = 0	        \n" +
				"					) 	SELECT rev.woID  revWoId        \n" +
				"						FROM RevWo rev WHERE rev.terminateWOID IS NOT NULL;        \n" +
				"		#get list of subassembly workorder list of given work order        \n" +
				"        CREATE TEMPORARY TABLE `temp_subass_wo_list` AS        \n" +
				"        WITH RECURSIVE SubWo AS  (        \n" +
				"								SELECT	refWOID,parentWOID,1 lvl          \n" +
				"								FROM workorder_main_assembly_mapping_details         \n" +
				"								WHERE parentWOID = pWoId        \n" +
				"								AND isDeleted = 0        \n" +
				"								UNION ALL        \n" +
				"								SELECT	wam.refWOID,wam.parentWOID, sw.lvl +1 lvl				        \n" +
				"								 FROM workorder_main_assembly_mapping_details wam              \n" +
				"								 INNER JOIN SubWo sw ON sw.refWOID = wam.parentWOID                 \n" +
				"								 WHERE wam.isDeleted = 0	        \n" +
				"								 ) SELECT refWOID subWoId        \n" +
				"								FROM SubWo sub ;        \n" +
				"  \n" +
				"		#first get list of workorder under SO detail id passed or  form particular WO        \n" +
				"		CREATE TEMPORARY TABLE `temp_usage_material_report_mst` AS        \n" +
				"		SELECT IFNULL(pSODtlId, wsd.salesOrderDetailID) soDtlId,        \n" +
				"			   IFNULL(pWoId , wo.woId) woId,        \n" +
				"			   wo.woNumber,        \n" +
				"			   wo.partID assyId,			          \n" +
				"			  assyCo.mfgPN,              \n" +
				"			  fun_getMfgCodeAndNameByID(assyCo.mfgcodeID) customerName ,		          \n" +
				"			  CASE WHEN wsd.parentPartID = wsd.partID THEN 0 ELSE 1 END isSubAssembly, #for sub assembly        \n" +
				"			  wo.isRevisedWO isRevised,        \n" +
				"			  fun_getGroupByWoIdForUsageReport(wo.woId , wo.isRevisedWO ,(CASE WHEN wsd.parentPartID = wsd.partID THEN 0 ELSE 1 END) ) groupByWoId,        \n" +
				"			  CASE WHEN wsd.parentPartID != wsd.partID THEN 2         \n" +
				"				   WHEN wo.isRevisedWO = 1 THEN  2 ELSE 1 END displayOrder        \n" +
				"		FROM workorder wo         \n" +
				"		JOIN workorder_salesorder_details wsd ON wsd.woId = wo.woId AND wsd.isDeleted = 0         \n" +
				"		JOIN component assyCo ON assyCo.id = wo.partID AND assyCo.isDeleted = 0        \n" +
				"		WHERE wo.woId =  IF(pFromGenerated = 1, pWoId ,wo.woId)        \n" +
				"		AND wsd.salesOrderDetailID = IF(pFromGenerated = 2 , pSODtlId , wsd.salesOrderDetailID)            \n" +
				"		AND wo.isDeleted = 0            \n" +
				"		AND (SELECT COUNT(1) FROM workorder_trans a WHERE a.woId = wo.woID) > 0        \n" +
				"		UNION ALL        \n" +
				"		SELECT IFNULL(pSODtlId, 0) soDtlId,  #this query to  get revised WO of given WO ID.        \n" +
				"			   woRev.woId woId,        \n" +
				"			   woRev.woNumber,        \n" +
				"			   woRev.partID assyId,			          \n" +
				"			  assyCo.mfgPN,              \n" +
				"			  fun_getMfgCodeAndNameByID(assyCo.mfgcodeID) customerName ,		          \n" +
				"			  0 isSubAssembly, #for sub assembly        \n" +
				"			  woRev.isRevisedWO,        \n" +
				"			  fun_getGroupByWoIdForUsageReport(woRev.woId , woRev.isRevisedWO ,0 ) groupByWoId,        \n" +
				"			  2 displayOrder                  \n" +
				"		FROM workorder woRev             \n" +
				"		JOIN component assyCo ON assyCo.id = woRev.partID AND assyCo.isDeleted = 0        \n" +
				"		WHERE woRev.woID  IN ( SELECT revWoId FROM temp_rev_wo_list )                            \n" +
				"		AND  woRev.isDeleted = 0        \n" +
				"		UNION ALL        \n" +
				"		SELECT 	IFNULL(pSODtlId, wsd.salesOrderDetailID) soDtlId,  #this query to  get Sub Ass. WO of given WO ID.        \n" +
				"			   woSub.woId woId,        \n" +
				"			   woSub.woNumber,        \n" +
				"			   woSub.partID assyId,			          \n" +
				"			  assyCo.mfgPN,              \n" +
				"			  fun_getMfgCodeAndNameByID(assyCo.mfgcodeID) customerName ,		          \n" +
				"			  1 isSubAssembly, #for sub assembly        \n" +
				"			  woSub.isRevisedWO,        \n" +
				"			  fun_getGroupByWoIdForUsageReport(woSub.woId , woSub.isRevisedWO ,1) groupByWoId,        \n" +
				"			  2 displayOrder                  \n" +
				"		FROM workorder woSub         \n" +
				"		JOIN workorder_salesorder_details wsd ON wsd.woId = woSub.woId AND wsd.isDeleted = 0         \n" +
				"		JOIN component assyCo ON assyCo.id = woSub.partID AND assyCo.isDeleted = 0        \n" +
				"		WHERE woSub.woID  IN ( SELECT subWoId FROM temp_subass_wo_list)                            \n" +
				"		AND  woSub.isDeleted = 0;         \n" +
				"  \n" +
				"		# temporary table to get UMID details as per wo in master (For files images & COFC docs)        \n" +
				"		CREATE TEMPORARY TABLE `temp_usage_material_report_dtl` AS            \n" +
				"		SELECT  umid,           \n" +
				"				sidid,			        \n" +
				"				woId,        \n" +
				"				umidPartId,        \n" +
				"				mfgcodeID,        \n" +
				"				supplierName,        \n" +
				"				umidMfgPn,        \n" +
				"				gencOriginalName,        \n" +
				"				gencFileType,        \n" +
				"				gencFileOwnerType,        \n" +
				"				genFilePath,        \n" +
				"				fileGroupBy,        \n" +
				"				packingSlipId,        \n" +
				"				(SELECT wtud.createdAt FROM workorder_trans_umid_details wtud , workorder_trans wt                      \n" +
				"					WHERE wtud.woTransID = wt.woTransID AND  wtud.refsidid = a.sidid AND wt.woId = a.woId AND wtud.isDeleted = 0 LIMIT 1) createdAt,        \n" +
				"				dtlDisplayOrder        \n" +
				"		 FROM      (        \n" +
				"		SELECT 	tmst.woId,        \n" +
				"				woUMID.refsidid sidid,        \n" +
				"				css.uid umid,        \n" +
				"				css.refcompid umidPartId,        \n" +
				"				coUmid.mfgcodeID,        \n" +
				"				fun_getMfgCodeAndNameByID(coUmid.mfgcodeID) supplierName,        \n" +
				"				coUmid.mfgPN umidMfgPn,        \n" +
				"				gf.gencOriginalName,        \n" +
				"				gf.gencFileType,        \n" +
				"				gf.gencFileOwnerType,        \n" +
				"				gf.genFilePath,        \n" +
				"				gf.fileGroupBy,        \n" +
				"				0 packingSlipId,        \n" +
				"				2 dtlDisplayOrder        \n" +
				"		 FROM   temp_usage_material_report_mst  tmst        \n" +
				"		 JOIN	workorder_trans woTrans ON woTrans.woId = tmst.woId AND woTrans.isDeleted = 0        \n" +
				"		 JOIN	workorder_trans_umid_details woUMID ON  woUMID.woTransId = woTrans.woTransId AND woUMID.isDeleted = 0        \n" +
				"		 JOIN 	component_sid_stock css ON css.id = woUMID.refsidid AND css.isDeleted = 0         \n" +
				"		 JOIN	component coUmid ON coUmid.id = css.refcompid AND  coUmid.isDeleted = 0         \n" +
				"		 LEFT JOIN genericfiles gf ON gf.refTransID = woUMID.refsidid AND  gf.isDeleted = 0 AND gf.isRecycle = 0        \n" +
				"				AND gf.entityID = -11 AND ( (gf.gencFileType LIKE 'image%' AND gf.fileGroupBy IN (SELECT gc.gencCategoryID FROM  genericcategory gc             \n" +
				"																	WHERE gc.categoryType = 'Document Type' AND gc.gencCategoryName = 'Part Picture') )        \n" +
				"											 OR ( (gf.gencFileType LIKE 'image%' OR gf.gencFileType LIKE '%pdf') AND gf.fileGroupBy IN (SELECT gc.gencCategoryID FROM  genericcategory gc             \n" +
				"																	WHERE gc.categoryType = 'Document Type' AND gc.gencCategoryName = 'COFC') )                               \n" +
				"											)            \n" +
				"		) a        \n" +
				"         GROUP BY a.umid,  a.sidid, a.woId, a.umidPartId, a.mfgcodeID, a.supplierName, a.umidMfgPn, a.gencOriginalName,        \n" +
				"					a.gencFileType, a.gencFileOwnerType, a.genFilePath, a.fileGroupBy, a.packingSlipId,a.dtlDisplayOrder;          \n" +
				"  \n" +
				"        #Insert data from packing slip of COFC documents (images & PDF)                    \n" +
				"        INSERT INTO temp_usage_material_report_dtl                    \n" +
				"		SELECT  umid,           \n" +
				"				sidid,			        \n" +
				"				woId,        \n" +
				"				umidPartId,        \n" +
				"				mfgcodeID,        \n" +
				"				supplierName,        \n" +
				"				umidMfgPn,        \n" +
				"				gencOriginalName,        \n" +
				"				gencFileType,        \n" +
				"				gencFileOwnerType,        \n" +
				"				genFilePath,        \n" +
				"				fileGroupBy,        \n" +
				"				packingSlipId,        \n" +
				"				(SELECT wtud.createdAt FROM workorder_trans_umid_details wtud , workorder_trans wt                      \n" +
				"					WHERE wtud.woTransID = wt.woTransID AND  wtud.refsidid = b.sidid AND wt.woId = b.woId AND wtud.isDeleted = 0 LIMIT 1) createdAt,        \n" +
				"				dtlDisplayOrder        \n" +
				"		 FROM (SELECT 	ptmst.woId,        \n" +
				"				woUMID.refsidid sidid,        \n" +
				"				css.uid umid,        \n" +
				"				css.refcompid umidPartId,        \n" +
				"				coUmid.mfgcodeID,        \n" +
				"				fun_getMfgCodeAndNameByID(coUmid.mfgcodeID) supplierName,        \n" +
				"				coUmid.mfgPN umidMfgPn,        \n" +
				"				gf.gencOriginalName,        \n" +
				"				gf.gencFileType,        \n" +
				"				gf.gencFileOwnerType,        \n" +
				"				gf.genFilePath,        \n" +
				"				gf.fileGroupBy,        \n" +
				"				psd.refPackingSlipMaterialRecID  packingSlipId,        \n" +
				"				1 dtlDisplayOrder        \n" +
				"		 FROM   temp_usage_material_report_mst  ptmst        \n" +
				"		 JOIN	workorder_trans woTrans ON woTrans.woId = ptmst.woId AND woTrans.isDeleted = 0        \n" +
				"		 JOIN	workorder_trans_umid_details woUMID ON  woUMID.woTransId = woTrans.woTransId AND woUMID.isDeleted = 0                 \n" +
				"		 JOIN 	component_sid_stock css ON css.id = woUMID.refsidid AND css.isDeleted = 0         \n" +
				"		 JOIN	component coUmid ON coUmid.id = css.refcompid AND  coUmid.isDeleted = 0         \n" +
				"		 JOIN 	component_sid_stock_packing_detail cspd ON cspd.refComponentSidStockID = woUMID.refsidid AND cspd.isDeleted = 0            \n" +
				"		 JOIN 	packing_slip_material_receive_det psd ON psd.id = cspd.refPackingSlipDetailID AND psd.isDeleted = 0            \n" +
				"		 JOIN 	genericfiles gf ON gf.refTransID = psd.refPackingSlipMaterialRecID AND  gf.isDeleted = 0  and gf.isRecycle = 0       \n" +
				"				AND gf.entityID = -14 AND ( (gf.gencFileType LIKE 'image%' OR gf.gencFileType LIKE '%pdf') AND gf.fileGroupBy IN (SELECT gc.gencCategoryID FROM  genericcategory gc             \n" +
				"																	WHERE gc.categoryType = 'Document Type' AND gc.gencCategoryName = 'Packing Slip With COFC') )        \n" +
				"		 ) b        \n" +
				"         GROUP BY b.umid,  b.sidid, b.woId, b.umidPartId, b.mfgcodeID, b.supplierName, b.umidMfgPn, b.gencOriginalName,        \n" +
				"					b.gencFileType, b.gencFileOwnerType, b.genFilePath, b.fileGroupBy, b.packingSlipId, b.dtlDisplayOrder;          \n" +
				"  \n" +
				"			/* 	DocType I - Image Only            \n" +
				"				DocType A - Image And Document (Dduplicate COFC)            \n" +
				"				DocType D - Documents Only */            \n" +
				"		 IF pShowDoc = 'I'  THEN        \n" +
				"				SET vWhereClause  = \" AND ( (gencFileOwnerType = 'component_sid_stock' AND gencFileType like 'image%'         \n" +
				"														AND fileGroupBy in (select gc.gencCategoryID from  genericcategory gc             \n" +
				"																	where gc.categoryType = 'Document Type' and gc.gencCategoryName = 'Part Picture' )) or gencFileType is null )\";        \n" +
				"		 ELSEIF pShowDoc = 'D'  THEN        \n" +
				"				SET vWhereClause  = \" AND (gencFileType is null or ( gencFileOwnerType = 'component_sid_stock' AND fileGroupBy in (select gc.gencCategoryID from  genericcategory gc             \n" +
				"																	where gc.categoryType = 'Document Type' and gc.gencCategoryName = 'COFC') )         \n" +
				"                                                                or  (gencFileOwnerType = 'packing_slip' AND fileGroupBy in (select gc.gencCategoryID from  genericcategory gc             \n" +
				"																	where gc.categoryType = 'Document Type' and gc.gencCategoryName = 'Packing Slip With COFC') )            \n" +
				"                                                                    ) \";        \n" +
				"		 ELSEIF pShowDoc = 'A'  THEN        \n" +
				"				SET vWhereClause = \" AND 1 = 1\";        \n" +
				"		 END IF;        \n" +
				"		 /** Filter by Part Type **/        \n" +
				"		IF pPartType = 'BOM' THEN        \n" +
				"			SET vWhereClause  = CONCAT( vWhereClause , \" AND umidPartId in (select mfgPNID from rfq_lineitems_alternatepart  rla             \n" +
				"												   JOIN rfq_lineitems rli ON rli.id = rla.rfqLineItemsID AND rli.isDeleted = 0            \n" +
				"												   WHERE rla.isDeleted = 0            \n" +
				"												   AND rli.partID = assyId )\") ;          \n" +
				"		ELSEIF pPartType = 'SMT' THEN        \n" +
				"			SET vWhereClause  = CONCAT(vWhereClause , \" AND umidPartId not in (select mfgPNID from rfq_lineitems_alternatepart  rla             \n" +
				"												   JOIN rfq_lineitems rli ON rli.id = rla.rfqLineItemsID AND rli.isDeleted = 0            \n" +
				"												   WHERE rla.isDeleted = 0            \n" +
				"												   AND rli.partID = assyId )\");               \n" +
				"		ELSEIF pPartType = 'ALL' THEN        \n" +
				"			SET vWhereClause  =  CONCAT(vWhereClause , \" AND 1 = 1\");        \n" +
				"		END IF;	        \n" +
				"        /***** ordering data  @first level main WO then child (sub ass/revised) WO ******/        \n" +
				"        /****** @second level first PDF files and then imaages for each wo level detail ***/        \n" +
				"		SET vOrderBy = 'order by  tmst.groupByWoId , tmst.displayOrder ,tDtl.createdAt,  tDtl.dtlDisplayOrder';         \n" +
				"  \n" +
				"		IF (pIgnoreDuplicate = 0) THEN        \n" +
				"			SET @sql1 = CONCAT( 'select tMst.soDtlId,        \n" +
				"						tMst.woId,        \n" +
				"						tMst.woNumber,        \n" +
				"						tMst.assyId,						        \n" +
				"						tMst.mfgPN,        \n" +
				"						tMst.customerName,        \n" +
				"						tMst.groupByWoId,        \n" +
				"						tMst.displayOrder mstDisaplyOrder,        \n" +
				"						tDtl.umid,        \n" +
				"						tDtl.sidid,        \n" +
				"						tDtl.umidPartId,        \n" +
				"						tDtl.mfgcodeID,        \n" +
				"						tDtl.umidMfgPN,        \n" +
				"						tDtl.supplierName,        \n" +
				"						tDtl.gencOriginalName,        \n" +
				"						tDtl.gencFileType,        \n" +
				"						tDtl.gencFileOwnerType,        \n" +
				"						tDtl.genFilePath,        \n" +
				"						tDtl.createdAt,        \n" +
				"						tDtl.dtlDisplayOrder dtlDisplayOrder        \n" +
				"			from   temp_usage_material_report_mst tMst ,  temp_usage_material_report_dtl tDtl         \n" +
				"			Where tMst.woId = tDtl.woId ',            \n" +
				"			vWhereClause,'  ', vOrderBy) ;        \n" +
				"		ELSEIF (pIgnoreDuplicate = 1) THEN # Incase of ignore duplicate  show only single files no repeatation        \n" +
				"			SET @sql1 = CONCAT('select  -1 soDtlId,        \n" +
				"						-1 woId,        \n" +
				"						tMst.assyId,						        \n" +
				"						tMst.mfgPN,		        \n" +
				"                        tMst.customerName,						        \n" +
				"						tMst.displayOrder mstDisaplyOrder,        \n" +
				"						-1 umid,        \n" +
				"						tDtl.gencOriginalName,        \n" +
				"						tDtl.gencFileType,        \n" +
				"						tDtl.gencFileOwnerType,        \n" +
				"						tDtl.genFilePath,        \n" +
				"						tDtl.dtlDisplayOrder dtlDisplayOrder        \n" +
				"			from   temp_usage_material_report_mst tMst ,  temp_usage_material_report_dtl tDtl         \n" +
				"			Where tMst.woId = tDtl.woId	',            \n" +
				"			vWhereClause,' AND gencFileType is not null         \n" +
				"            group by tMst.assyId, tMst.mfgPN, tMst.customerName, tMst.displayOrder ,        \n" +
				"						tDtl.gencOriginalName,tDtl.gencFileType,tDtl.gencFileOwnerType, tDtl.genFilePath,        \n" +
				"						tDtl.dtlDisplayOrder');        \n" +
				"		END IF;        \n" +
				"  \n" +
				"		PREPARE stmt1 FROM @SQL1;                  \n" +
				"		EXECUTE stmt1;             \n" +
				"        DEALLOCATE PREPARE stmt1;        \n" +
				"  \n" +
				"  \n" +
				"    ### Get Customer PO NUmber        \n" +
				"    SELECT  GROUP_CONCAT(DISTINCT sm.poNumber) custPONumber        \n" +
				"    FROM workorder_salesorder_details wsd , salesordermst sm  , salesorderdet sd         \n" +
				"    WHERE wsd.salesOrderDetailID = sd.id        \n" +
				"    AND sd.refSalesOrderId = sm.id        \n" +
				"    AND wsd.isDeleted = 0        \n" +
				"    AND sd.isDeleted = 0        \n" +
				"    AND sm.isDeleted = 0     \n" +
				"    AND sd.partCategory=3       \n" +
				"    AND CASE WHEN  pFromGenerated = 1 THEN  wsd.woId = pWoId         \n" +
				"			 ELSE sd.id = pSODtlId END ;        \n" +
				"  \n" +
				"    #####Get Company Logo        \n" +
				"	SELECT sc.`values` compLogo            \n" +
				"	FROM systemconfigrations sc            \n" +
				"	WHERE sc.`key` ='CompanyLogo';            \n" +
				"  \n" +
				"  \n" +
				"	## Get Generated By User Details        \n" +
				"	SELECT CONCAT(emp.firstName,' ',emp.lastName) generatedBy,            \n" +
				"		emp.email generatedByEmail,            \n" +
				"		fun_ConvertUTCDatetimeToDataKeyTimeZone(NOW()) generatedAt            \n" +
				"	FROM users u                  \n" +
				"	JOIN employees emp ON emp.id = u.employeeID                  \n" +
				"	WHERE u.id = pGeneratedByID;               \n" +
				"  \n" +
				"    ## Include All WO Serial No only if Flag is set            \n" +
				"	IF (pPrintSerialNo) && vIsContinue = 1 THEN        \n" +
				"		SELECT  GROUP_CONCAT(DISTINCT LPAD(wosr.SerialNo, LENGTH(wosr.SerialNo) + 5, ' ' )) finalSrNo FROM workorder_serialmst wosr        \n" +
				"        WHERE wosr.woID  IN (SELECT a.woId FROM temp_usage_material_report_mst a)        \n" +
				"        AND wosr.isDeleted = 0         \n" +
				"        AND serialType = 2;		        \n" +
				"    END IF;        \n" +
				"  \n" +
				"    ELSE        \n" +
				"		SELECT 'nodata' nodata;            \n" +
				"    END IF;        \n" +
				"	DROP TEMPORARY TABLE IF EXISTS `temp_usage_material_report_mst`;        \n" +
				"    DROP TEMPORARY TABLE IF EXISTS `temp_usage_material_report_dtl`;        \n" +
				"	DROP TEMPORARY  TABLE IF EXISTS `temp_rev_wo_list`;        \n" +
				"    DROP TEMPORARY  TABLE IF EXISTS `temp_subass_wo_list`;        \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_MoveSourceDuplicateDocumentToDestination`;  \n" +
				"CREATE PROCEDURE `Sproc_MoveSourceDuplicateDocumentToDestination`(      \n" +
				"	IN pduplicateFileCopyAction VARCHAR(10),      \n" +
				"	IN puserID INT  \n" +
				"    )  \n" +
				"BEGIN      \n" +
				"		# temp table created on api side      \n" +
				"		# select * from temp_source_allDuplicateFilesToMove;       \n" +
				"  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_source_allInvalidFilesToReplace ;      \n" +
				"		CREATE TEMPORARY TABLE temp_source_allInvalidFilesToReplace AS      \n" +
				"			SELECT 	tsadf.gencFileID , tsadf.gencOriginalName , tsadf.refTransIDOfDestination , tsadf.refParentId     \n" +
				"			FROM   	temp_source_allDuplicateFilesToMove tsadf      \n" +
				"				JOIN genericfiles gf1 ON tsadf.gencFileID = gf1.gencFileID      \n" +
				"				JOIN generic_folder gf2 ON tsadf.refParentId = gf2.gencFolderID      \n" +
				"			WHERE   gf1.deletedAt IS NOT NULL    # deletedAt IS NOT NULL to checked deleted files      \n" +
				"				OR      \n" +
				"				gf2.deletedAt IS NOT NULL   # deletedAt IS NOT NULL to checked deleted folder in which file resides			      \n" +
				"				OR      \n" +
				"				(tsadf.refParentId != gf1.refParentId)	# to check refParent is same or not - moved file to other folder      \n" +
				"				OR       \n" +
				"				(tsadf.refParentId = gf1.refParentId	# to check refParent folder name is same or not      \n" +
				"				 AND tsadf.refParentFolderName != gf2.gencFolderName      \n" +
				"				 ) ;	      \n" +
				"  \n" +
				"  \n" +
				"		IF (pduplicateFileCopyAction = 'RFD') THEN  # Replace the file in the destination      \n" +
				"  \n" +
				"			# get all allowed replace file to destination with new refParent    \n" +
				"			SELECT tsadf.gencFileID gencFileIDOfSourceMstFile , gf.gencOriginalName ,      \n" +
				"				gf.gencFileExtension , gf.fileSize ,      \n" +
				"				gf.genFilePath genFilePathOfSourceMstFile,      \n" +
				"				tsadf.refTransIDOfDestination , tsadf.gencFileIDOfDestinationExistsFile ,      \n" +
				"				(SELECT genFilePath FROM genericfiles WHERE deletedAt IS NULL      \n" +
				"					AND gencFileID = tsadf.gencFileIDOfDestinationExistsFile) AS genFilePathOfDestinationExistsFile       \n" +
				"			FROM temp_source_allDuplicateFilesToMove tsadf      \n" +
				"				JOIN genericfiles gf ON tsadf.gencFileID = gf.gencFileID AND gf.deletedAt IS NULL      \n" +
				"			WHERE tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)      \n" +
				"			;      \n" +
				"  \n" +
				"			# delete duplicate existing file from destination folder 					    \n" +
				"			UPDATE genericfiles     \n" +
				"			SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime() , deletedBy = puserID     \n" +
				"			WHERE gencFileID IN (SELECT gencFileIDOfDestinationExistsFile FROM temp_source_allDuplicateFilesToMove)    \n" +
				"			AND gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)    \n" +
				"			;    \n" +
				"  \n" +
				"			# replace source file to destination - update source file refParent to destination folder 					    \n" +
				"			UPDATE genericfiles gf, temp_source_allDuplicateFilesToMove tsadf    \n" +
				"			SET gf.refParentID = tsadf.refParentIdForDestinationNewFile	    \n" +
				"			WHERE gf.gencFileID = tsadf.gencFileID    \n" +
				"			AND tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)    \n" +
				"			;    \n" +
				"  \n" +
				"			# remove source folder as duplicate files in it so duplicate folder it is     \n" +
				"			UPDATE generic_folder     \n" +
				"			SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime() , deletedBy = puserID     \n" +
				"			WHERE gencFolderID IN (SELECT refParentId FROM temp_source_allDuplicateFilesToMove    \n" +
				"						WHERE isRemoveRefParentFolderOfSourceFile = 1)     \n" +
				"			AND gencFolderID NOT IN (SELECT refParentId FROM temp_source_allInvalidFilesToReplace)    \n" +
				"			;    \n" +
				"  \n" +
				"		ELSEIF(pduplicateFileCopyAction = 'KBF') THEN  # Keep Both File      \n" +
				"  \n" +
				"			/*    \n" +
				"			SELECT CONCAT((SUBSTRING(gf.gencOriginalName,1,CHAR_LENGTH(gf.gencOriginalName) - (CHAR_LENGTH(gf.gencFileExtension) + 1))),      \n" +
				"					'-',DATE_FORMAT(UTC_TIMESTAMP(),\"%Y%m%d%H%i%s\"),'.',gf.gencFileExtension) gencOriginalName ,       \n" +
				"				gf.gencFileDescription gencFileDescription,       \n" +
				"				gf.gencFileExtension gencFileExtension , gf.gencFileType gencFileType, gf.tags tags ,       \n" +
				"				tsadf.refTransIDOfDestination refTransID  ,        \n" +
				"				tsadf.refParentIdForDestinationNewFile refParentId , gf.fileSize fileSize ,      \n" +
				"				 gf.refTransID refCopyTransID ,      \n" +
				"				 gf.genFilePath genFilePathOfSourceMstFile       \n" +
				"			FROM temp_source_allDuplicateFilesToMove tsadf      \n" +
				"				JOIN genericfiles gf ON tsadf.gencFileID = gf.gencFileID AND gf.deletedAt IS NULL      \n" +
				"			WHERE tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)      \n" +
				"			;    \n" +
				"			*/		    \n" +
				"  \n" +
				"			# replace source file to destination - update source file refParent to destination folder     \n" +
				"			# and file name with datetime as keep both file case					    \n" +
				"			UPDATE genericfiles gf, temp_source_allDuplicateFilesToMove tsadf    \n" +
				"			SET gf.refParentID = tsadf.refParentIdForDestinationNewFile ,    \n" +
				"			    gf.gencOriginalName =  (CONCAT((SUBSTRING(gf.gencOriginalName,1,CHAR_LENGTH(gf.gencOriginalName) - (CHAR_LENGTH(gf.gencFileExtension) + 1))),      \n" +
				"					'-',DATE_FORMAT(UTC_TIMESTAMP(),\"%Y%m%d%H%i%s\"),'.',gf.gencFileExtension))    \n" +
				"			WHERE gf.gencFileID = tsadf.gencFileID    \n" +
				"			AND tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)    \n" +
				"			;    \n" +
				"  \n" +
				"			# remove source folder as duplicate files in it so duplicate folder it is     \n" +
				"			UPDATE generic_folder     \n" +
				"			SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime() , deletedBy = puserID     \n" +
				"			WHERE gencFolderID IN (SELECT refParentId FROM temp_source_allDuplicateFilesToMove    \n" +
				"						WHERE isRemoveRefParentFolderOfSourceFile = 1)     \n" +
				"			AND gencFolderID NOT IN (SELECT refParentId FROM temp_source_allInvalidFilesToReplace)    \n" +
				"			;	      \n" +
				"  \n" +
				"		ELSE      \n" +
				"			SELECT 'invalid parameter';      \n" +
				"		END IF;      \n" +
				"  \n" +
				"  \n" +
				"		SELECT * FROM temp_source_allInvalidFilesToReplace;      \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_source_allInvalidFilesToReplace;      \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_source_allDuplicateFilesToMove ;      \n" +
				"  \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails`;  \n" +
				"CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(                                                              \n" +
				"	IN ppageIndex INT,                                                              \n" +
				"	IN precordPerPage INT,                                                              \n" +
				"	IN pOrderBy VARCHAR(255),                                                              \n" +
				"	IN pWhereClause VARCHAR(16383),              	                              \n" +
				"    IN pFilterStatus LONGTEXT,                              \n" +
				"    IN pDueDate DATE,                              \n" +
				"    IN pAdditionalDays INT,                              \n" +
				"    IN pTermsAndAboveDays INT,                              \n" +
				"    IN pPoNumber VARCHAR(50),                             \n" +
				"    IN pIsExactSearchPO TINYINT,                              \n" +
				"    IN pMfgCodeIds LONGTEXT ,                            \n" +
				"    IN pPaymentTermsIds LONGTEXT ,                          \n" +
				"    IN pPartId INT,                        \n" +
				"    IN pTransType VARCHAR(5)                        \n" +
				"    -- IN pChequeNumber  VARCHAR(50)                              \n" +
				")  \n" +
				"BEGIN                                                              \n" +
				"  \n" +
				"	DECLARE pOffset INT;                                                              \n" +
				"	DECLARE rowNumWhere VARCHAR(255) ;                                                              \n" +
				"	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                             \n" +
				"	DECLARE vTimeZone VARCHAR(50);                                                             \n" +
				"	SELECT fun_getTimeZone() INTO vTimeZone;                                                    \n" +
				"	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                             \n" +
				"  \n" +
				"	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"                                                 \n" +
				"		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate,                           \n" +
				"        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,                        \n" +
				"        cp.packingSlipNumber,cp.packingslipDate,                              \n" +
				"        cp.invoiceNumber,cp.invoiceDate,                            \n" +
				"        cp.creditMemoNumber, cp.creditMemoDate,                        \n" +
				"        cp.refDebitMemoNumber, cp.refDebitMemoDate,                        \n" +
				"        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'                           \n" +
				"				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,                          \n" +
				"        cp.soNumber,cp.soDate,                                            \n" +
				"		cp.sorevision,                              \n" +
				"        cp.refSalesOrderID,                              \n" +
				"        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,                               \n" +
				"        cp.refCustInvoiceID,                                            \n" +
				"		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,                            \n" +
				"		 cp.status,                         \n" +
				"         cp.subStatus,                                          \n" +
				"		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then ''                               \n" +
				"				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'                               \n" +
				"                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'                            \n" +
				"                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'                         \n" +
				"                when cp.transType = 'C' then '' END as paymentStatusValue,                              \n" +
				"		  cp.paymentStatus,                           \n" +
				"          ifnull(packingSlip.subStatus,0) packingSlipStatusID,                    \n" +
				"		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,                            \n" +
				"		  cp.totalAmount,                                      \n" +
				"		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-18 AND gc.refTransID=cp.id AND gc.isdeleted=0) invoiceDocumentCount,                                            \n" +
				"		 (SELECT COUNT(1) FROM genericfiles gc WHERE gc.entityid=-17 AND gc.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id) AND gc.isdeleted=0) packingslipDocumentCount,                                            \n" +
				"		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,                                    \n" +
				"		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,                                 \n" +
				"         cp.customerID,                            \n" +
				"         cp.createdBy as createdById,                            \n" +
				"		 get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,                    \n" +
				"		 fun_getUserNameByID(cp.updatedBy) updatedby,                                            \n" +
				"		 fun_getUserNameByID(cp.createdBy) createdby,                                            \n" +
				"		 fun_getRoleByID(cp.createByRoleId) createdbyRole,                                            \n" +
				"		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,                                              \n" +
				"		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                          \n" +
				"		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,                              \n" +
				"		 DATE_ADD((cp.invoiceDate ),INTERVAL IFNULL((case when cp.termsId is Not NULL then cp.termsDays-1                                    \n" +
				"													else 0 end),0) DAY) paymentDueDate,                                 \n" +
				"         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,                              \n" +
				"         cp.termsDays termDays,                              \n" +
				"         cp.freeOnBoardName,                            \n" +
				"         cp.isLocked,                            \n" +
				"         fun_getIntToText(cp.isLocked) isLockedConvertedValue,                            \n" +
				"         fun_getUserNameByID(cp.lockedBy) lockedBy,                            \n" +
				"         fun_getRoleByID(cp.lockedByRole) lockedByRole,                            \n" +
				"         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,                            \n" +
				"         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,                              \n" +
				"         packingSlip.id packingSlipId,                    \n" +
				"         (select group_concat(paymentNumber)                    \n" +
				"				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd                     \n" +
				"				on pipd.refPayementid = pip.id and pipd.isDeleted = 0                     \n" +
				"                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,                \n" +
				"		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,            \n" +
				"         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,          \n" +
				"         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms          \n" +
				"		 FROM customer_packingslip cp                               \n" +
				"         join  mfgcodemst m on m.id = cp.customerID                                      \n" +
				"         LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0              \n" +
				"		WHERE  cp.isDeleted=0                                            \n" +
				"        AND cp.transType = '\" , pTransType,\"'\");                                                              \n" +
				"  \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN               \n" +
				"		IF pTransType = 'I' THEN              \n" +
				"			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";                                                    \n" +
				"        ELSE              \n" +
				"			SET pOrderBy = \"ORDER BY c.id DESC\";                                                    \n" +
				"        END IF;                  \n" +
				"	ELSE                                                              \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                              \n" +
				"	END IF;	                                                              \n" +
				"    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                              \n" +
				"		SET pWhereClause = '1=1' ;                                                              \n" +
				"	END IF;	                              \n" +
				"    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                      \n" +
				"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');                                                      \n" +
				"	END IF;                                \n" +
				"  \n" +
				"	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                                                      \n" +
				"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');                                                      \n" +
				"	END IF;                             \n" +
				"  \n" +
				"    IF pPartId IS NOT NULL THEN                          \n" +
				"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');                           \n" +
				"    END IF;                          \n" +
				"	# IF(pChequeNumber IS NOT NULL)THEN                                            \n" +
				"	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');                                            \n" +
				"	# END IF;                                \n" +
				"  \n" +
				"	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN                                            \n" +
				"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');                                            \n" +
				"	END IF;                                 \n" +
				"  \n" +
				"    IF pDueDate IS NOT NULL THEN                                                    \n" +
				"		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                                      \n" +
				"	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                                      \n" +
				"		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                                      \n" +
				"	END IF;                                    \n" +
				"  \n" +
				"    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN                                    \n" +
				"		IF pIsExactSearchPO = 1 THEN                                    \n" +
				"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'                                    \n" +
				"										OR 	c.poNumber = '\", pPoNumber, \"'                                    \n" +
				"										OR 	c.packingSlipNumber = '\", pPoNumber, \"'                                    \n" +
				"										OR 	c.invoiceNumber = '\", pPoNumber, \"'                                    \n" +
				"										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"                                    \n" +
				"						);                                    \n" +
				"		ELSE                                    \n" +
				"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'                                    \n" +
				"										OR 	c.poNumber like '%\", pPoNumber, \"%'                                    \n" +
				"										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'                                    \n" +
				"										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'                                    \n" +
				"										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"                                    \n" +
				"						);                                    \n" +
				"		END IF;                                    \n" +
				"	END IF;                                    \n" +
				"   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;                              \n" +
				"  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                               \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                              \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                              \n" +
				"	ELSE	                                                              \n" +
				"		SET rowNumWhere = '';                                                              \n" +
				"	END IF;	                                                              \n" +
				"  \n" +
				"  \n" +
				"	 /* to get total count of rows */                                                                 \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);                                                                \n" +
				"	PREPARE query2 FROM @SQLStatement2;                                                                \n" +
				"	EXECUTE query2;                                                                \n" +
				"	DEALLOCATE PREPARE query2;                                                              \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                  \n" +
				"		 round((c.totalAmount),2) totalAmount,                                  \n" +
				"    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,                                  \n" +
				"    				round((c.totalAmount - c.receivedAmount),2) pendingAmount  from ( \",                               \n" +
				"			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
				"	PREPARE query1 FROM @SQLStatement2;                                                                \n" +
				"	EXECUTE query1;                                                                \n" +
				"	DEALLOCATE PREPARE query1;                                                            \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_RetrieveEquipment`;  \n" +
				"CREATE PROCEDURE `Sproc_RetrieveEquipment`(              \n" +
				"IN ppageIndex INT,              \n" +
				"IN precordPerPage INT,              \n" +
				"IN pOrderBy VARCHAR(255),        \n" +
				"IN pWhereClause VARCHAR(16383)              \n" +
				")  \n" +
				"BEGIN              \n" +
				"	DECLARE pOffset INT;              \n" +
				"	DECLARE rowNumWhere VARCHAR(255);              \n" +
				"	DECLARE vTextAngularKeyCode VARCHAR(500);       \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
				"	DECLARE v_TimeZone VARCHAR(50);                  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;            \n" +
				"	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();              \n" +
				"	SET @temp_Sproc_RetrieveEquipment = CONCAT(\"              \n" +
				"		SELECT `eqp`.eqpID,`eqp`.assetName,`eqp`.eqpMake,`eqp`.eqpModel,`eqp`.eqpYear,`eqp`.assetNumber,`eqp`.eqpGroupID,              \n" +
				"		`eqp`.equipmentAs,`eqp`.equipmentSetupMethod,`eqp`.placedInServiceDate,`eqp`.outOfServiceDate,`eqp`.isActive,              \n" +
				"		/*CONCAT('(',mfg.mfgCode, ') ',co.mfgPN) mfgPNWithMfgCode,*/              \n" +
				"		co.PIDCode,              \n" +
				"		bin.name binName,               \n" +
				"		wm.Name binWarehouseName,               \n" +
				"		pwm.Name binParentWarehouseName,              \n" +
				"		eqp.serialNumber  ,            \n" +
				"		fun_getTextAngularData(`eqp`.eqpDescription, '\", vTextAngularKeyCode,\"') eqpDescription,                      \n" +
				"		fun_getUserNameByID(`eqp`.updatedBy) updatedby,              \n" +
				"		fun_getUserNameByID(`eqp`.createdBy) createdby,              \n" +
				"		fun_getRoleByID(`eqp`.createByRoleId) createdbyRole,              \n" +
				"		fun_getRoleByID(`eqp`.updateByRoleId) updatedbyRole,          \n" +
				"		fun_ApplyCommonDateTimeFormatByParaValue(eqp.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                \n" +
				"		fun_ApplyCommonDateTimeFormatByParaValue(eqp.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                  \n" +
				"		warehousemst.Name as warehouseName,              \n" +
				"		(SELECT gencCategoryName FROM genericcategory              \n" +
				"			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpTypeID) AS `eqpTypeIDConvertedValue` ,              \n" +
				"		(SELECT gencCategoryName FROM genericcategory              \n" +
				"			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpGroupID) AS `eqpGroupIDConvertedValue` ,              \n" +
				"		(SELECT gencCategoryName FROM genericcategory              \n" +
				"			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpSubGroupID) AS `eqpSubGroupIDConvertedValue` ,              \n" +
				"		(SELECT gencCategoryName FROM genericcategory              \n" +
				"			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpOwnershipTypeID) AS `eqpOwnershipTypeIDConvertedValue` ,              \n" +
				"			(SELECT gencCategoryName FROM genericcategory              \n" +
				"			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.locationTypeID) AS locationName,              \n" +
				"		(CASE WHEN (`eqp`.`equipmentAs` = 'E') THEN 'Equipment'              \n" +
				"				WHEN (`eqp`.`equipmentAs` = 'W') THEN 'Workstation'              \n" +
				"				WHEN (`eqp`.`equipmentAs` = 'S') THEN 'Sample' ELSE '' END) AS `equipmentAsConvertedValue` ,              \n" +
				"		(CASE WHEN (`eqp`.`isActive` = 0) THEN 'Inactive'              \n" +
				"				WHEN (`eqp`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,dept.`deptName` AS `department` ,              \n" +
				"		(select gencFileName FROM genericfiles where deletedAt IS NULL AND refTransID = `eqp`.eqpID              \n" +
				"				AND gencFileName like 'profile%' AND entityID = '-3' AND isRecycle = 0             \n" +
				"				AND gencFileOwnerType = 'equipment') AS gencFileNameAsProfileImage,              \n" +
				"		case when eqp.calibrationRequired = 1 then        \n" +
				"				'Yes'        \n" +
				"			when  eqp.calibrationRequired = 0 then        \n" +
				"				'No'        \n" +
				"		end calibrationRequiredValue  ,      \n" +
				"        eqp.calibrationRequired,      \n" +
				"        cd.calibrationDate,      \n" +
				"		cd.calibrationExpirationDate      \n" +
				"		FROM `equipment` AS `eqp`              \n" +
				"		LEFT JOIN department dept ON `dept`.`deptID` = `eqp`.`departmentID`              \n" +
				"		LEFT JOIN warehousemst `warehousemst` ON `warehousemst`.`refEqpID` = `eqp`.`eqpID`              \n" +
				"		left join binmst bin on eqp.binId = bin.id              \n" +
				"		left join warehousemst wm on wm.id = bin.WarehouseID              \n" +
				"		left join warehousemst pwm on pwm.id = wm.parentWHID              \n" +
				"		left join component co ON co.id = eqp.assyId              \n" +
				"		/*left join mfgcodemst mfg on mfg.id = co.mfgcodeID*/              \n" +
				"        left join (select rank() over (partition by refEqpID,calibrationType order by calibrationDate desc) rnk,      \n" +
				"							cd.id, cd.refEqpID, cd.calibrationDate, cd.calibrationExpirationDate      \n" +
				"					  from calibration_details cd      \n" +
				"					 where cd.deletedAt is null) cd ON rnk = 1 and cd.refEqpID = eqp.eqpid      \n" +
				"		WHERE eqp.`deletedAt` IS NULL           \n" +
				"	\");              \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
				"		SET pOrderBy = \"ORDER BY assetName ASC\";              \n" +
				"	ELSE              \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
				"	END IF;              \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
				"		SET pWhereClause = '1=1' ;              \n" +
				"	END IF;              \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN              \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage;              \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
				"	ELSE              \n" +
				"		SET rowNumWhere = '';              \n" +
				"	END IF;              \n" +
				"	/* to get total count of rows */              \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEquipment,\" ) c where 1=1 and \", pWhereClause);              \n" +
				"	PREPARE query2 FROM @SQLStatement2;              \n" +
				"	EXECUTE query2;              \n" +
				"	DEALLOCATE PREPARE query2;              \n" +
				"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEquipment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
				"	PREPARE query1 FROM @SQLStatement2;              \n" +
				"	EXECUTE query1;              \n" +
				"	DEALLOCATE PREPARE query1;              \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
				"CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(                                \n" +
				"	IN ppageIndex INT,                                \n" +
				"	IN precordPerPage INT,                                \n" +
				"	IN pOrderBy VARCHAR(255),                                \n" +
				"	IN pWhereClause VARCHAR(16383),          \n" +
				"	IN psupplierID VARCHAR(16000),          \n" +
				"	IN pshippingMethodId VARCHAR(16000),          \n" +
				"	IN psearchposotype VARCHAR(10),    \n" +
				"	IN psearchposotext VARCHAR(1000),          \n" +
				"	IN ppartIds VARCHAR(1000)                     \n" +
				")  \n" +
				"BEGIN                                \n" +
				"  \n" +
				"	DECLARE pOffset INT;                                \n" +
				"	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
				"	DECLARE vDateTimeDisplayFormat VARCHAR(100);                               \n" +
				"	DECLARE vTimeZone VARCHAR(50);                               \n" +
				"	SELECT fun_getTimeZone() INTO vTimeZone;                      \n" +
				"	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;               \n" +
				"  \n" +
				"	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"                            \n" +
				"		SELECT pom.id,          \n" +
				"       pom.poNumber,          \n" +
				"       pom.supplierID,          \n" +
				"       pom.poDate,          \n" +
				"       pom.soNumber,          \n" +
				"       pom.soDate,          \n" +
				"       pom.termsID,          \n" +
				"       pom.shippingMethodID,          \n" +
				"       CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,          \n" +
				"       pom.status,          \n" +
				"       pom.poComment,          \n" +
				"       pom.shippingComment,          \n" +
				"       pom.serialNumber,          \n" +
				"       pom.poRevision,     \n" +
				"       pom.carrierID,         \n" +
				"       pom.carrierAccountNumber,          \n" +
				"       CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,          \n" +
				"       pom.shippingInsurance,          \n" +
				"       pom.supplierAddress,          \n" +
				"       pom.shippingAddress,          \n" +
				"       pom.intermediateAddress,          \n" +
				"       CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,          \n" +
				"       pom.isBlanketPO,          \n" +
				"       m.mfgcode,    \n" +
				"      concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,         \n" +
				"       pom.poWorkingStatus,        \n" +
				"       case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,         \n" +
				"	   IFNULL(vgf.cnt, 0) poDocumentCount,          \n" +
				"       (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID          \n" +
				"        WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,          \n" +
				"        (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID          \n" +
				"        WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,          \n" +
				"       fun_getFOBById(pom.freeOnBoardId) freeOnBoard,          \n" +
				"       fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,          \n" +
				"       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,           \n" +
				"       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,          \n" +
				"       (select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,          \n" +
				"       fun_getUserNameByID(pom.updatedBy)updatedby,           \n" +
				"       fun_getUserNameByID(pom.createdBy) createdby,          \n" +
				"       fun_getRoleByID(pom.createByRoleId) createdbyRole,           \n" +
				"       fun_getRoleByID(pom.updateByRoleId) updatedbyRole,          \n" +
				"       fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,            \n" +
				"       fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt                \n" +
				"FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID          \n" +
				"LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0     \n" +
				"LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id        \n" +
				"WHERE pom.isdeleted=0            \n" +
				"	\");           \n" +
				"  \n" +
				"  IF(psupplierID IS NOT NULL)THEN          \n" +
				"  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');          \n" +
				"  END IF;          \n" +
				"  IF(pshippingMethodId IS NOT NULL)THEN          \n" +
				"  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');          \n" +
				"  END IF;          \n" +
				"  IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN          \n" +
				"	IF(psearchposotype='C')THEN          \n" +
				"              SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');          \n" +
				"         ELSE          \n" +
				"              SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');          \n" +
				"         END IF;          \n" +
				"  END IF;         \n" +
				"  \n" +
				"  IF(ppartIds IS NOT NULL)THEN          \n" +
				"  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and           \n" +
				"   (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');          \n" +
				"  END IF;          \n" +
				"  \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                \n" +
				"        SET pOrderBy = \"ORDER BY createdAt DESC\";                      \n" +
				"	ELSE                                \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
				"	END IF;	          \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
				"		SET pWhereClause = '1=1' ;                                \n" +
				"	END IF;	                                \n" +
				"  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
				"	ELSE	                                \n" +
				"		SET rowNumWhere = '';                                \n" +
				"	END IF;	                                \n" +
				"  \n" +
				"  \n" +
				"	 /* to get total count of rows */                                   \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);                                  \n" +
				"	PREPARE query2 FROM @SQLStatement2;                                  \n" +
				"	EXECUTE query2;                                  \n" +
				"	DEALLOCATE PREPARE query2;                                \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
				"	PREPARE query1 FROM @SQLStatement2;                                  \n" +
				"	EXECUTE query1;                                  \n" +
				"	DEALLOCATE PREPARE query1;                            \n" +
				"  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
				"CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(                                                  \n" +
				"	IN pPageIndex INT,                                                  \n" +
				"	IN pRecordPerPage INT,                                                  \n" +
				"	IN pOrderBy VARCHAR(255),                                                  \n" +
				"	IN pWhereClause VARCHAR(16383),                        \n" +
				"	IN pReceiptType VARCHAR(10),            \n" +
				"	IN pMfgCodeIds VARCHAR(16383),            \n" +
				"	IN pAdvanceSearchPoSoPsInv VARCHAR(50),      \n" +
				"	IN pMfrPnId INT            \n" +
				")  \n" +
				"BEGIN                                                  \n" +
				"  \n" +
				"	DECLARE pOffset INT;                                                  \n" +
				"	DECLARE rowNumWhere VARCHAR(255);                \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                               \n" +
				"	DECLARE v_TimeZone VARCHAR(50);            \n" +
				"	DECLARE v_advanceFilterWhereClause VARCHAR(16383);               \n" +
				"	SET SESSION group_concat_max_len = 500000;                       \n" +
				"  \n" +
				"	SET v_advanceFilterWhereClause = ' 1 = 1 ';            \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;                      \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                   \n" +
				"  \n" +
				"	IF (pMfgCodeIds IS NOT NULL) THEN            \n" +
				"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');            \n" +
				"	END IF;            \n" +
				"  \n" +
				"	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN            \n" +
				"		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (             \n" +
				"											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'             \n" +
				"										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'              \n" +
				"										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'              \n" +
				"										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"              \n" +
				"									  \" )             \n" +
				"					\");              \n" +
				"	END IF;            \n" +
				"  \n" +
				"	IF (pMfrPnId IS NOT NULL) THEN      \n" +
				"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (      \n" +
				"				SELECT 	refPackingSlipMaterialRecID      \n" +
				"				FROM 	packing_slip_material_receive_det      \n" +
				"				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0      \n" +
				"			)      \n" +
				"		\");      \n" +
				"	END IF;      \n" +
				"  \n" +
				"	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"	            \n" +
				"			SELECT  *            \n" +
				"			FROM	(            \n" +
				"					SELECT 		p.id,                  \n" +
				"							p.poNumber,                  \n" +
				"							p.mfgCodeID,                  \n" +
				"							p.supplierSONumber,                  \n" +
				"							p.packingSlipNumber,                  \n" +
				"							p.packingSlipDate,                  \n" +
				"							p.invoiceNumber,                  \n" +
				"							p.invoiceDate,                  \n" +
				"							p.creditMemoNumber,                  \n" +
				"							p.creditMemoDate,                  \n" +
				"							p.debitMemoNumber,                  \n" +
				"							p.debitMemoDate,                  \n" +
				"							p.receiptDate,                  \n" +
				"							p.description,                  \n" +
				"							p.billToAddress,                  \n" +
				"							p.shipToAddress,                  \n" +
				"							p.poVersion,                  \n" +
				"							p.isDeleted,                  \n" +
				"							p.receiptType,                  \n" +
				"							p.`status`,             \n" +
				"							p.packingSlipModeStatus,               \n" +
				"							p.chequeNumber,                  \n" +
				"							p.chequeDate,                  \n" +
				"							p.chequeAmount,                  \n" +
				"							p.applyDate,                  \n" +
				"							p.refParentCreditDebitInvoiceno,                  \n" +
				"							p.refPackingSlipNumberForInvoice,                  \n" +
				"							p.invoiceTotalDue,                  \n" +
				"							p.isTariffInvoice,                  \n" +
				"							p.bankName,              									                                     \n" +
				"							fun_getUserNameByID(p.updatedBy) updatedByName,                               \n" +
				"							fun_getUserNameByID(p.createdBy)  createdByName,                                     \n" +
				"							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,     \n" +
				"							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,                        \n" +
				"							fun_getRoleByID(p.createByRoleId) createdbyRole,                    \n" +
				"							fun_getRoleByID(p.updateByRoleId) updatedbyRole,                    \n" +
				"							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                    \n" +
				"							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,            \n" +
				"							(          \n" +
				"								CASE          \n" +
				"									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'          \n" +
				"									WHEN p.packingSlipModeStatus = 'P' THEN 'Publish'          \n" +
				"									ELSE NULL          \n" +
				"								END          \n" +
				"							) packingSlipModeStatusValue,  	          \n" +
				"							ps.id invoiceId,          \n" +
				"							ps.invoiceNumber refInvoiceNumber,          \n" +
				"							ps.invoiceDate refInvoiceDate,          \n" +
				"							(          \n" +
				"								CASE          \n" +
				"									WHEN p.status = 'I' THEN 'Investigate'          \n" +
				"									WHEN p.status = 'W' THEN 'Waiting for Invoice'          \n" +
				"									WHEN p.status = 'IR' THEN 'Invoice Received'          \n" +
				"									WHEN p.status = 'A' THEN 'Approved to Pay'          \n" +
				"									WHEN p.status = 'P' THEN 'Paid'          \n" +
				"									ELSE NULL          \n" +
				"								END          \n" +
				"							) statusValue,          \n" +
				"							IFNULL(g.cnt,0) packingSlipDocCount,          \n" +
				"							psm.totalDetailLine itemReceived,        \n" +
				"							psm.totalRejectLine totalRejectedLine          \n" +
				"					FROM		packing_slip_material_receive p            \n" +
				"					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0            \n" +
				"					LEFT JOIN 	(          \n" +
				"								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine, SUM(IF(psm.receivedStatus = 'R', 1, 0)) AS totalRejectLine         \n" +
				"								FROM 		packing_slip_material_receive_det psm           \n" +
				"								WHERE 		isDeleted = 0           \n" +
				"								GROUP BY 	refPackingSlipMaterialRecID          \n" +
				"							) psm ON psm.refPackingSlipMaterialRecID = p.id    \n" +
				"					LEFT JOIN vu_genericfilescount g ON  \n" +
				"							g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id           \n" +
				"					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')             \n" +
				"				) a            \n" +
				"			WHERE \", v_advanceFilterWhereClause            \n" +
				"		);                        \n" +
				"  \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;                                                  \n" +
				"	ELSE                                                  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
				"	END IF;	                                                  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                  \n" +
				"		SET pWhereClause = '1=1' ;                                                  \n" +
				"	END IF;	                                          \n" +
				"  \n" +
				"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                   \n" +
				"		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
				"	ELSE	                                                  \n" +
				"		SET rowNumWhere = '';                                                  \n" +
				"	END IF;	                                                  \n" +
				"  \n" +
				"	/* to get total count of rows */                                     \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);            	                        \n" +
				"	PREPARE query1 FROM @SQLStatement1;                                    \n" +
				"	EXECUTE query1;                                    \n" +
				"	DEALLOCATE PREPARE query1;                                  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
				"	PREPARE query2 FROM @SQLStatement2;                                    \n" +
				"	EXECUTE query2;                                    \n" +
				"	DEALLOCATE PREPARE query2;                                \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
				"DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
				"CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                            \n" +
				"	IN pPageIndex INT,                            \n" +
				"	IN pRecordPerPage INT,                            \n" +
				"	IN pOrderBy VARCHAR(255),                            \n" +
				"	IN pWhereClause VARCHAR(16383),              \n" +
				"	IN pReceiptType VARCHAR(10),                            \n" +
				"	IN pMfgCodeIds LONGTEXT,                            \n" +
				"	IN pPaymentMethodTypeIds LONGTEXT,         \n" +
				"	IN pDueDate DATE,                            \n" +
				"	IN pAdditionalDays INT,                            \n" +
				"	IN pTermsAndAboveDays INT,                            \n" +
				"	IN pInvoiceNumber VARCHAR(50),                            \n" +
				"	IN pIsExactSearch TINYINT,                          \n" +
				"	IN pMfrPnId INT,              \n" +
				"    IN pInvoiceIds LONGTEXT,          \n" +
				"    IN pExactPaymentNumberSearch TINYINT,          \n" +
				"    IN pPaymentNumber VARCHAR(50)          \n" +
				")  \n" +
				"BEGIN                                        \n" +
				"	DECLARE pOffset INT;                                        \n" +
				"	DECLARE rowNumWhere VARCHAR(255);            \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                       \n" +
				"	DECLARE v_TimeZone VARCHAR(50);                      \n" +
				"  \n" +
				"	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                      \n" +
				"	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                     \n" +
				"  \n" +
				"	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"          \n" +
				"			SELECT 		p.id,          \n" +
				"					p.poNumber,          \n" +
				"					p.mfgCodeID,          \n" +
				"					p.supplierSONumber,          \n" +
				"					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,          \n" +
				"					p.packingSlipDate,          \n" +
				"					p.invoiceNumber,          \n" +
				"					p.invoiceDate,          \n" +
				"					p.creditMemoNumber,          \n" +
				"					p.creditMemoDate,          \n" +
				"					p.debitMemoNumber,          \n" +
				"					p.debitMemoDate,          \n" +
				"					p.receiptDate,          \n" +
				"					p.description,          \n" +
				"					p.billToAddress,          \n" +
				"					p.shipToAddress,          \n" +
				"					p.poVersion,          \n" +
				"					p.isDeleted,          \n" +
				"					p.receiptType,          \n" +
				"					p.`status`,          \n" +
				"					p.applyDate,          \n" +
				"					p.refParentCreditDebitInvoiceno,          \n" +
				"					p.refPackingSlipNumberForInvoice,          \n" +
				"					p.invoiceTotalDue,          \n" +
				"					p.isTariffInvoice,                            \n" +
				"					p.creditMemoType,          \n" +
				"					fun_getUserNameByID(p.updatedBy) updatedByName,                       \n" +
				"					fun_getUserNameByID(p.createdBy)  createdByName,            \n" +
				"					fun_getRoleByID(p.createByRoleId) createdbyRole,            \n" +
				"					fun_getRoleByID(p.updateByRoleId) updatedbyRole,            \n" +
				"					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,            \n" +
				"					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                     \n" +
				"					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,          \n" +
				"					(              \n" +
				"						SELECT 	IFNULL(g.cnt,0)            \n" +
				"						FROM 	vu_genericfilescount g               \n" +
				"						WHERE 	g.refTransID = p.id               \n" +
				"								AND             \n" +
				"								(            \n" +
				"									CASE             \n" +
				"										WHEN p.receiptType = 'C' THEN g.entityID = -15            \n" +
				"										WHEN p.receiptType = 'D' THEN g.entityID = -16              \n" +
				"										ELSE g.entityID = -13            \n" +
				"									END            \n" +
				"								)     \n" +
				"					) invoiceDocCount,              \n" +
				"					(              \n" +
				"						SELECT 	IFNULL(g.cnt,0)               \n" +
				"						FROM 	vu_genericfilescount g               \n" +
				"						WHERE 	g.refTransID = psm.id   \n" +
				"								AND g.entityID = -14     \n" +
				"								AND g.gencFileOwnerType = 'packing_slip'         \n" +
				"					) packingSlipDocCount,                                    \n" +
				"					pd.itemReceived,                                      \n" +
				"					pd.otherChargesItemReceived,                                            \n" +
				"					pd.itemDisapproved,          \n" +
				"					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,          \n" +
				"                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,          \n" +
				"					ps.status parentInvoiceStatus,          \n" +
				"					ps.invoiceNumber refInvoiceNumber,          \n" +
				"					ps.creditMemoType parentCreditMemoType,          \n" +
				"					pd.totalExtendedAmount,          \n" +
				"					pe.totalCreditAmount,          \n" +
				"					pe.totalDebitAmount,          \n" +
				"					(          \n" +
				"						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)          \n" +
				"					) amountToPay,          \n" +
				"					pd.packingDetailNote,          \n" +
				"					pd.approveLineCount,          \n" +
				"					DATE_ADD((case 	WHEN p.receiptType = 'D' THEN                  \n" +
				" 									p.debitMemoDate                  \n" +
				" 								WHEN p.receiptType = 'C' THEN                  \n" +
				" 									p.creditMemoDate                  \n" +
				" 								ELSE p.invoiceDate                          \n" +
				" 							end),          \n" +
				"     					INTERVAL IFNULL(p.termsDays,0) DAY) paymentDueDate,    \n" +
				"    					p.refPayementid,                          \n" +
				"					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,          \n" +
				" 					p.paymentTermsID,          \n" +
				"					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                                  \n" +
				"					psm.packingSlipModeStatus,                          \n" +
				"					ifnull(get_totalSupplierInvoicePaidAmountById(p.id),0) paidAmount,                          \n" +
				"					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                      \n" +
				"					p.invoiceRequireManagementApproval,                      \n" +
				"					(                      \n" +
				"						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                      \n" +
				"								'Yes'                      \n" +
				"							WHEN p.invoiceRequireManagementApproval = 0 THEN                      \n" +
				"								'No'                      \n" +
				"						END                      \n" +
				"					) invoiceRequireManagementApprovalValue,                       \n" +
				"					p.invoiceApprovalStatus,                      \n" +
				"					(                      \n" +
				"						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                      \n" +
				"								'Approved'                      \n" +
				"							WHEN p.invoiceApprovalStatus = 2 THEN                      \n" +
				"								'Pending'                      \n" +
				"							WHEN p.invoiceApprovalStatus = 3 THEN                      \n" +
				"								'N/A'                      \n" +
				"						END                      \n" +
				"					) invoiceApprovalStatusValue,                      \n" +
				"					p.invoiceApprovedBy,                      \n" +
				"					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                      \n" +
				"					p.invoiceApprovalDate,                      \n" +
				"					p.invoiceApprovalComment,                      \n" +
				"					p.internalRemark                      \n" +
				"			FROM packing_slip_material_receive p          \n" +
				"			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0          \n" +
				"			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0          \n" +
				"			left join (          \n" +
				"							select 	a.refPackingSlipMaterialRecID,          \n" +
				"								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,          \n" +
				"								sum(a.itemReceived) itemReceived,                                    \n" +
				"								sum(a.otherChargesItemReceived) otherChargesItemReceived,          \n" +
				"								sum(a.itemDisapproved) itemDisapproved,          \n" +
				"								sum(a.approveLineCount) approveLineCount,          \n" +
				"								sum(a.extendedPrice) totalExtendedAmount          \n" +
				"							from 	(                                    \n" +
				"									SELECT 	psm.refPackingSlipMaterialRecID,                                     \n" +
				"										psm.packingSlipSerialNumber,                                     \n" +
				"										ifnull(psm.approveNote,psm.comment) approveNote,                        \n" +
				"										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,                                    \n" +
				"										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,                                    \n" +
				"										case when psm.status = 'D' then 1 else 0 end itemDisapproved,          \n" +
				"										case when psm.status = 'A' then 1 else 0 end approveLineCount,          \n" +
				"										extendedPrice          \n" +
				"									FROM 	packing_slip_material_receive_det psm          \n" +
				"									WHERE 	psm.isDeleted = 0          \n" +
				"                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)          \n" +
				"								) a                                              \n" +
				"							group by a.refPackingSlipMaterialRecID                                    \n" +
				"						) pd ON pd.refPackingSlipMaterialRecID = p.id                                              \n" +
				"				left join (                                    \n" +
				"							select	 	ps.refParentCreditDebitInvoiceno,                                               \n" +
				"										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                          \n" +
				"    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                          \n" +
				"    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                          \n" +
				"							from 		packing_slip_material_receive ps                                              \n" +
				"							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                              \n" +
				"								  where ps.receiptType in ('C','D')          \n" +
				"									and ps.isDeleted = 0          \n" +
				"									and pd.isDeleted = 0          \n" +
				"							group by 	ps.refParentCreditDebitInvoiceno          \n" +
				"						) pe ON pe.refParentCreditDebitInvoiceno = p.id          \n" +
				"				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",          \n" +
				"                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),              \n" +
				"                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                               \n" +
				"	);                                          \n" +
				"  \n" +
				"	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                              \n" +
				"		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                                              \n" +
				"	END IF;                                              \n" +
				"  \n" +
				"	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN      \n" +
				"		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');      \n" +
				"	END IF;      \n" +
				"  \n" +
				"    IF (pPaymentNumber IS NOT NULL and pPaymentNumber != '') THEN          \n" +
				"		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"          \n" +
				"				and exists (select 1          \n" +
				"							  from packingslip_invoice_payment pm          \n" +
				"							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id          \n" +
				"							 where pm.isDeleted = 0          \n" +
				"							   and pm.isPaymentVoided = 0          \n" +
				"							   and pm.refPaymentMode = 'P'          \n" +
				"							   and pd.refPackingslipInvoiceID = p.id          \n" +
				"							   and pm.paymentNumber \",          \n" +
				"                               case when pExactPaymentNumberSearch = true then CONCAT(\" = \", pPaymentNumber ,\" \") else CONCAT(\" like '%\", pPaymentNumber, \"%' \") end          \n" +
				"                               ,\") \");          \n" +
				"    END IF;          \n" +
				"  \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                        \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                                              \n" +
				"	ELSE                                        \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
				"	END IF;	                                        \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                        \n" +
				"		SET pWhereClause = '1=1' ;                                        \n" +
				"	END IF;	                                \n" +
				"  \n" +
				"	IF pDueDate IS NOT NULL THEN                                            \n" +
				"		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                              \n" +
				"	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                              \n" +
				"		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                              \n" +
				"	END IF;                                              \n" +
				"  \n" +
				"	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                            \n" +
				"		IF pIsExactSearch = 1 THEN                            \n" +
				"			SET pWhereClause= CONCAT(pWhereClause, \"                            \n" +
				"									AND (                            \n" +
				"											c.supplierSONumber = '\", pInvoiceNumber, \"'                            \n" +
				"										OR 	c.poNumber = '\", pInvoiceNumber, \"'                            \n" +
				"										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                            \n" +
				"										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                            \n" +
				"										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                          \n" +
				"										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                          \n" +
				"										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                            \n" +
				"									  \" ) \"                            \n" +
				"						);                            \n" +
				"		ELSE                            \n" +
				"			SET pWhereClause= CONCAT(pWhereClause, \"                            \n" +
				"									AND (                            \n" +
				"											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                            \n" +
				"										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                            \n" +
				"										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                            \n" +
				"										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                            \n" +
				"										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                          \n" +
				"										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                            \n" +
				"										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                            \n" +
				"									  \" ) \"                            \n" +
				"						);                            \n" +
				"		END IF;                            \n" +
				"	END IF;                            \n" +
				"  \n" +
				"	IF (pMfrPnId IS NOT NULL) THEN          \n" +
				"		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (          \n" +
				"				SELECT 1          \n" +
				"				  FROM packing_slip_material_receive_det x          \n" +
				"				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0          \n" +
				"			)          \n" +
				"		\");          \n" +
				"	END IF;          \n" +
				"  \n" +
				"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                         \n" +
				"		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                        \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
				"	ELSE	                                        \n" +
				"		SET rowNumWhere = '';                                        \n" +
				"	END IF;	                                        \n" +
				"  \n" +
				"	/* to get total count of rows */                                        \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                                        \n" +
				"    PREPARE query1 FROM @SQLStatement1;                                        \n" +
				"	EXECUTE query1;                                        \n" +
				"	DEALLOCATE PREPARE query1;                          \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"                                     \n" +
				"			SELECT 	c.*,                                     \n" +
				"					case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                          \n" +
				"                    round(c.paidAmount,2) totalPaidAmount,                          \n" +
				"    				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                          \n" +
				"    				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                          \n" +
				"                    round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                         \n" +
				"			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                                     \n" +
				"			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                                        \n" +
				"	PREPARE query2 FROM @SQLStatement2;                                        \n" +
				"	EXECUTE query2;                                        \n" +
				"	DEALLOCATE PREPARE query2;                                       \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */"DROP procedure IF EXISTS `Sproc_RetriveSupplierRMAList`;  \n" +
				"CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(                                                      \n" +
				"	IN pPageIndex INT,                                                      \n" +
				"	IN pRecordPerPage INT,                                                      \n" +
				"	IN pOrderBy VARCHAR(255),                                                      \n" +
				"	IN pWhereClause VARCHAR(16383),                \n" +
				"	IN pMfgCodeIds VARCHAR(16383),                \n" +
				"	IN pAdvanceSearchNumbers VARCHAR(50),          \n" +
				"	IN pSearchType VARCHAR(10),      \n" +
				"	IN pMfrPnId INT   \n" +
				")  \n" +
				"BEGIN          \n" +
				"	DECLARE pOffset INT;                                                      \n" +
				"	DECLARE rowNumWhere VARCHAR(255);                    \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                   \n" +
				"	DECLARE v_TimeZone VARCHAR(50);                \n" +
				"	DECLARE v_advanceFilterWhereClause VARCHAR(16383);                  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;                          \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;            \n" +
				"	SET v_advanceFilterWhereClause = ' 1 = 1 ';          \n" +
				"  \n" +
				"	IF (pMfgCodeIds IS NOT NULL) THEN                \n" +
				"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');                \n" +
				"	END IF;           \n" +
				"  \n" +
				"	IF (pAdvanceSearchNumbers IS NOT NULL) THEN          \n" +
				"		IF (pSearchType = 'contains') THEN          \n" +
				"			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (                 \n" +
				"												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'                 \n" +
				"											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'                  \n" +
				"											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"                  \n" +
				"										  \" )                 \n" +
				"									\");                  \n" +
				"		ELSE          \n" +
				"			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (                 \n" +
				"												rmaNumber = '\", pAdvanceSearchNumbers, \"'                 \n" +
				"											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'                  \n" +
				"											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"                  \n" +
				"										  \" )                 \n" +
				"									\");                  \n" +
				"		END IF;          \n" +
				"	END IF;      \n" +
				"  \n" +
				"	IF (pMfrPnId IS NOT NULL) THEN      \n" +
				"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (      \n" +
				"				SELECT 	refPackingSlipMaterialRecID      \n" +
				"				FROM 	packing_slip_material_receive_det      \n" +
				"				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0      \n" +
				"			)      \n" +
				"		\");      \n" +
				"	END IF;      \n" +
				"  \n" +
				"	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"           \n" +
				"		SELECT	*          \n" +
				"		FROM 	(          \n" +
				"				SELECT 		p.id,          \n" +
				"						p.receiptType,                      \n" +
				"						p.packingSlipModeStatus rmaModeStatus,          \n" +
				"						(              \n" +
				"							CASE              \n" +
				"								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'              \n" +
				"								WHEN p.packingSlipModeStatus = 'P' THEN 'Publish'          \n" +
				"								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'              \n" +
				"								ELSE NULL              \n" +
				"							END              \n" +
				"						) rmaModeStatusValue,            \n" +
				"						p.`status`,          \n" +
				"						(	          \n" +
				"							CASE              \n" +
				"								WHEN p.status = 'D' THEN 'Draft'              \n" +
				"								WHEN p.status = 'WS' THEN 'Waiting For Shipment'              \n" +
				"								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'          \n" +
				"								WHEN p.status = 'CR' THEN 'Credit Memo Received'              \n" +
				"								WHEN p.status = 'A' THEN 'Approved to Pay'              \n" +
				"								WHEN p.status = 'P' THEN 'Paid'              \n" +
				"								ELSE NULL              \n" +
				"							END              \n" +
				"						) statusValue,            \n" +
				"						p.mfgCodeID,          \n" +
				"						fun_getMfgCodeByID(p.mfgCodeID) supplierCode,      \n" +
				"						fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,        \n" +
				"						p.poNumber rmaNumber,          \n" +
				"						p.poDate rmaDate,          \n" +
				"						p.packingSlipNumber,                      \n" +
				"						p.packingSlipDate,                      \n" +
				"						p.receiptDate shippedDate,          \n" +
				"						IFNULL(g.cnt,0) rmaDocCount,           \n" +
				"						psm.totalDetailLine itemReturn,          \n" +
				"						ps.id refCreditMemoId,        \n" +
				"						ps.creditMemoNumber refCreditMemoNumber,              \n" +
				"						ps.creditMemoDate refCreditMemoDate,           \n" +
				"						p.remark,          \n" +
				"						p.internalRemark,      \n" +
				"						p.shippingMethodId,          \n" +
				"						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,          \n" +
				"						p.carrierId,          \n" +
				"						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,          \n" +
				"						p.carrierAccountNumber,          \n" +
				"						p.shippingInsurance,          \n" +
				"						(          \n" +
				"							CASE          \n" +
				"								WHEN p.shippingInsurance = 1 THEN 'Yes'          \n" +
				"								WHEN p.shippingInsurance = 0 THEN 'No'          \n" +
				"								ELSE NULL           \n" +
				"							END          \n" +
				"						) shippingInsuranceValue,          \n" +
				"						p.rmaShippingAddress,          \n" +
				"						fun_getUserNameByID(p.updatedBy) updatedByName,                                   \n" +
				"						fun_getUserNameByID(p.createdBy)  createdByName,                                         \n" +
				"						fun_getRoleByID(p.createByRoleId) createdbyRole,                        \n" +
				"						fun_getRoleByID(p.updateByRoleId) updatedbyRole,                        \n" +
				"						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                        \n" +
				"						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt          \n" +
				"				FROM 		packing_slip_material_receive p          \n" +
				"				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0          \n" +
				"				LEFT JOIN 	(              \n" +
				"							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine             \n" +
				"							FROM 		packing_slip_material_receive_det psm               \n" +
				"							WHERE 		isDeleted = 0               \n" +
				"							GROUP BY 	refPackingSlipMaterialRecID              \n" +
				"						) psm ON psm.refPackingSlipMaterialRecID = p.id              \n" +
				"				 LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id     \n" +
				"						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id        \n" +
				"				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0          \n" +
				"			) AS a          \n" +
				"		WHERE \", v_advanceFilterWhereClause          \n" +
				"	);           \n" +
				"  \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                      \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;                                                      \n" +
				"	ELSE                                                      \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                      \n" +
				"	END IF;            \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                      \n" +
				"		SET pWhereClause = ' 1=1 ' ;                                                      \n" +
				"	END IF;                  \n" +
				"  \n" +
				"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                       \n" +
				"		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                      \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                      \n" +
				"	ELSE	                                                      \n" +
				"		SET rowNumWhere = '';                                                      \n" +
				"	END IF;           \n" +
				"  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);                           \n" +
				"	PREPARE query1 FROM @SQLStatement1;                                        \n" +
				"	EXECUTE query1;                                        \n" +
				"	DEALLOCATE PREPARE query1;          \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
				"	PREPARE query2 FROM @SQLStatement2;                                        \n" +
				"	EXECUTE query2;                                        \n" +
				"	DEALLOCATE PREPARE query2;          \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** New Script -> 17-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (730,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 730:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_genericfilescount`;  \n" +
                "CREATE VIEW `vu_genericfilescount` AS  \n" +
                "    SELECT   \n" +
                "        COUNT(1) AS `cnt`,  \n" +
                "        `genericfiles`.`gencFileOwnerType` AS `gencFileOwnerType`,  \n" +
                "        `genericfiles`.`refTransID` AS `refTransID`,  \n" +
                "        `genericfiles`.`entityID` AS `entityID`  \n" +
                "    FROM  \n" +
                "        `genericfiles`    \n" +
                "    WHERE  \n" +
                "        ((`genericfiles`.`isDeleted` = 0)  \n" +
                "            AND (`genericfiles`.`isRecycle` = 0))  \n" +
                "    GROUP BY `genericfiles`.`gencFileOwnerType` , `genericfiles`.`refTransID` , `genericfiles`.`entityID`;  \n" +
                "CREATE   \n" +
                "     OR REPLACE ALGORITHM = UNDEFINED   \n" +
                "    DEFINER = `root`@`localhost`   \n" +
                "    SQL SECURITY DEFINER  \n" +
                "VIEW `vu_genericfilescount` AS  \n" +
                "    SELECT   \n" +
                "        COUNT(1) AS `cnt`,  \n" +
                "        `genericfiles`.`gencFileOwnerType` AS `gencFileOwnerType`,  \n" +
                "        `genericfiles`.`refTransID` AS `refTransID`,  \n" +
                "        `genericfiles`.`entityID` AS `entityID`  \n" +
                "    FROM  \n" +
                "        `genericfiles`    \n" +
                "    WHERE  \n" +
                "        ((`genericfiles`.`isDeleted` = 0)  \n" +
                "            AND (`genericfiles`.`isRecycle` = 0))  \n" +
                "    GROUP BY `genericfiles`.`gencFileOwnerType` , `genericfiles`.`refTransID` , `genericfiles`.`entityID`;  \n" +
                /* **************************** New Script -> 17-02-2021   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (731,'1.00','V1',' User story #30210 vu_genericfilescount - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 731:
            allDbChangesArray.push(
            /* **************************** New Script -> 17-02-2021 *********************************** */
            "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(                              \n" +
            "	IN pPageIndex INT,                              \n" +
            "	IN pRecordPerPage INT,                              \n" +
            "	IN pOrderBy VARCHAR(255),                              \n" +
            "	IN pWhereClause VARCHAR(16383),                \n" +
            "	IN pReceiptType VARCHAR(10),                              \n" +
            "	IN pMfgCodeIds LONGTEXT,                              \n" +
            "	IN pPaymentMethodTypeIds LONGTEXT,           \n" +
            "	IN pDueDate DATE,                              \n" +
            "	IN pAdditionalDays INT,                              \n" +
            "	IN pTermsAndAboveDays INT,                              \n" +
            "	IN pInvoiceNumber VARCHAR(50),                              \n" +
            "	IN pIsExactSearch TINYINT,                            \n" +
            "	IN pMfrPnId INT,                \n" +
            "    IN pInvoiceIds LONGTEXT,            \n" +
            "    IN pExactPaymentNumberSearch TINYINT,            \n" +
            "    IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pInvoiceFromDate DATE,  \n" +
            "    IN pInvoiceToDate DATE  \n" +
            ")  \n" +
            "BEGIN                                          \n" +
            "	DECLARE pOffset INT;                                          \n" +
            "	DECLARE rowNumWhere VARCHAR(255);              \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                         \n" +
            "	DECLARE v_TimeZone VARCHAR(50);                        \n" +
            "  \n" +
            "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                        \n" +
            "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                       \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"            \n" +
            "			SELECT 		p.id,            \n" +
            "					p.poNumber,            \n" +
            "					p.mfgCodeID,            \n" +
            "					p.supplierSONumber,            \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,            \n" +
            "					p.packingSlipDate,            \n" +
            "					p.invoiceNumber,            \n" +
            "					p.invoiceDate,  \n" +
            "                    ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
            "					p.creditMemoNumber,            \n" +
            "					p.creditMemoDate,            \n" +
            "					p.debitMemoNumber,            \n" +
            "					p.debitMemoDate,            \n" +
            "					p.receiptDate,            \n" +
            "					p.description,            \n" +
            "					p.billToAddress,            \n" +
            "					p.shipToAddress,            \n" +
            "					p.poVersion,            \n" +
            "					p.isDeleted,            \n" +
            "					p.receiptType,            \n" +
            "					p.`status`,            \n" +
            "					p.applyDate,            \n" +
            "					p.refParentCreditDebitInvoiceno,            \n" +
            "					p.refPackingSlipNumberForInvoice,            \n" +
            "					p.invoiceTotalDue,            \n" +
            "					p.isTariffInvoice,                              \n" +
            "					p.creditMemoType,            \n" +
            "					fun_getUserNameByID(p.updatedBy) updatedByName,                         \n" +
            "					fun_getUserNameByID(p.createdBy)  createdByName,              \n" +
            "					fun_getRoleByID(p.createByRoleId) createdbyRole,              \n" +
            "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,              \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,              \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                       \n" +
            "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,            \n" +
            "					(                \n" +
            "						SELECT 	IFNULL(g.cnt,0)              \n" +
            "						FROM 	vu_genericfilescount g                 \n" +
            "						WHERE 	g.refTransID = p.id                 \n" +
            "								AND               \n" +
            "								(              \n" +
            "									CASE               \n" +
            "										WHEN p.receiptType = 'C' THEN g.entityID = -15              \n" +
            "										WHEN p.receiptType = 'D' THEN g.entityID = -16                \n" +
            "										ELSE g.entityID = -13              \n" +
            "									END              \n" +
            "								)       \n" +
            "					) invoiceDocCount,                \n" +
            "					(                \n" +
            "						SELECT 	IFNULL(g.cnt,0)                 \n" +
            "						FROM 	vu_genericfilescount g                 \n" +
            "						WHERE 	g.refTransID = psm.id     \n" +
            "								AND g.entityID = -14       \n" +
            "								AND g.gencFileOwnerType = 'packing_slip'           \n" +
            "					) packingSlipDocCount,                                      \n" +
            "					pd.itemReceived,                                        \n" +
            "					pd.otherChargesItemReceived,                                              \n" +
            "					pd.itemDisapproved,            \n" +
            "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,            \n" +
            "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,            \n" +
            "					ps.status parentInvoiceStatus,            \n" +
            "					ps.invoiceNumber refInvoiceNumber,            \n" +
            "					ps.creditMemoType parentCreditMemoType,            \n" +
            "					pd.totalExtendedAmount,            \n" +
            "					pe.totalCreditAmount,            \n" +
            "					pe.totalDebitAmount,            \n" +
            "					(            \n" +
            "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)            \n" +
            "					) amountToPay,            \n" +
            "					pd.packingDetailNote,            \n" +
            "					pd.approveLineCount,            \n" +
            "					DATE_ADD((case 	WHEN p.receiptType = 'D' THEN                    \n" +
            " 									p.debitMemoDate                    \n" +
            " 								WHEN p.receiptType = 'C' THEN                    \n" +
            " 									p.creditMemoDate                    \n" +
            " 								ELSE p.invoiceDate                            \n" +
            " 							end),            \n" +
            "     					INTERVAL IFNULL(p.termsDays,0) DAY) paymentDueDate,      \n" +
            "    					p.refPayementid,                            \n" +
            "					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,            \n" +
            " 					p.paymentTermsID,            \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                                    \n" +
            "					psm.packingSlipModeStatus,                            \n" +
            "					ifnull(get_totalSupplierInvoicePaidAmountById(p.id),0) paidAmount,                            \n" +
            "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                        \n" +
            "					p.invoiceRequireManagementApproval,                        \n" +
            "					(                        \n" +
            "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                        \n" +
            "								'Yes'                        \n" +
            "							WHEN p.invoiceRequireManagementApproval = 0 THEN                        \n" +
            "								'No'                        \n" +
            "						END                        \n" +
            "					) invoiceRequireManagementApprovalValue,                         \n" +
            "					p.invoiceApprovalStatus,                        \n" +
            "					(                        \n" +
            "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                        \n" +
            "								'Approved'                        \n" +
            "							WHEN p.invoiceApprovalStatus = 2 THEN                        \n" +
            "								'Pending'                        \n" +
            "							WHEN p.invoiceApprovalStatus = 3 THEN                        \n" +
            "								'N/A'                        \n" +
            "						END                        \n" +
            "					) invoiceApprovalStatusValue,                        \n" +
            "					p.invoiceApprovedBy,                        \n" +
            "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                        \n" +
            "					p.invoiceApprovalDate,                        \n" +
            "					p.invoiceApprovalComment,                        \n" +
            "					p.internalRemark                        \n" +
            "			FROM packing_slip_material_receive p            \n" +
            "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0            \n" +
            "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0            \n" +
            "			left join (            \n" +
            "							select 	a.refPackingSlipMaterialRecID,            \n" +
            "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,            \n" +
            "								sum(a.itemReceived) itemReceived,                                      \n" +
            "								sum(a.otherChargesItemReceived) otherChargesItemReceived,            \n" +
            "								sum(a.itemDisapproved) itemDisapproved,            \n" +
            "								sum(a.approveLineCount) approveLineCount,            \n" +
            "								sum(a.extendedPrice) totalExtendedAmount            \n" +
            "							from 	(                                      \n" +
            "									SELECT 	psm.refPackingSlipMaterialRecID,                                       \n" +
            "										psm.packingSlipSerialNumber,                                       \n" +
            "										ifnull(psm.approveNote,psm.comment) approveNote,                          \n" +
            "										case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,                                      \n" +
            "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,                                      \n" +
            "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,            \n" +
            "										case when psm.status = 'A' then 1 else 0 end approveLineCount,            \n" +
            "										extendedPrice            \n" +
            "									FROM 	packing_slip_material_receive_det psm            \n" +
            "									WHERE 	psm.isDeleted = 0            \n" +
            "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)            \n" +
            "								) a                                                \n" +
            "							group by a.refPackingSlipMaterialRecID                                      \n" +
            "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                                \n" +
            "				left join (                                      \n" +
            "							select	 	ps.refParentCreditDebitInvoiceno,                                                 \n" +
            "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                            \n" +
            "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                            \n" +
            "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                            \n" +
            "							from 		packing_slip_material_receive ps                                                \n" +
            "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                                \n" +
            "								  where ps.receiptType in ('C','D')            \n" +
            "									and ps.isDeleted = 0            \n" +
            "									and pd.isDeleted = 0            \n" +
            "							group by 	ps.refParentCreditDebitInvoiceno            \n" +
            "						) pe ON pe.refParentCreditDebitInvoiceno = p.id            \n" +
            "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",            \n" +
            "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),                \n" +
            "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                                 \n" +
            "	);                                            \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                                                \n" +
            "	END IF;                                                \n" +
            "  \n" +
            "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN        \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');        \n" +
            "	END IF;        \n" +
            "  \n" +
            "    IF (pPaymentNumber IS NOT NULL and pPaymentNumber != '') THEN            \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"            \n" +
            "				and exists (select 1            \n" +
            "							  from packingslip_invoice_payment pm            \n" +
            "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id            \n" +
            "							 where pm.isDeleted = 0            \n" +
            "							   and pm.isPaymentVoided = 0            \n" +
            "							   and pm.refPaymentMode = 'P'            \n" +
            "							   and pd.refPackingslipInvoiceID = p.id            \n" +
            "							   and pm.paymentNumber \",            \n" +
            "                               case when pExactPaymentNumberSearch = true then CONCAT(\" = \", pPaymentNumber ,\" \") else CONCAT(\" like '%\", pPaymentNumber, \"%' \") end            \n" +
            "                               ,\") \");            \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pDueDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
            "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pInvoiceFromDate IS NOT NULL and pInvoiceToDate is not null THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'   \n" +
            "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
            "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                              \n" +
            "		IF pIsExactSearch = 1 THEN                              \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"                              \n" +
            "									AND (                              \n" +
            "											c.supplierSONumber = '\", pInvoiceNumber, \"'                              \n" +
            "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                              \n" +
            "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                              \n" +
            "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                              \n" +
            "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                            \n" +
            "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                            \n" +
            "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                              \n" +
            "									  \" ) \"                              \n" +
            "						);                              \n" +
            "		ELSE                              \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"                              \n" +
            "									AND (                              \n" +
            "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                              \n" +
            "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                              \n" +
            "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                              \n" +
            "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                              \n" +
            "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                            \n" +
            "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                              \n" +
            "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                              \n" +
            "									  \" ) \"                              \n" +
            "						);                              \n" +
            "		END IF;                              \n" +
            "	END IF;                              \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN            \n" +
            "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (            \n" +
            "				SELECT 1            \n" +
            "				  FROM packing_slip_material_receive_det x            \n" +
            "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0            \n" +
            "			)            \n" +
            "		\");            \n" +
            "	END IF;            \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"  \n" +
            "			SELECT 	c.*,  \n" +
            "					case when c.refPayementid is null and c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
            "                    round(c.paidAmount,2) totalPaidAmount,  \n" +
            "    				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,  \n" +
            "    				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,  \n" +
            "                    round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete  \n" +
            "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
            "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (732,'1.00','V1','Task 30769: Add From Date and To Date filter on the invoice page, this will work on invoice date Hot Fix - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 732:
  allDbChangesArray.push(
  /* **************************** New Script -> 17-02-2020  *********************************** */
      "DROP FUNCTION IF EXISTS `fun_getCertificationByWoNumber` ;  \n" +
      "CREATE FUNCTION `fun_getCertificationByWoNumber`(                        \n" +
      "	pWoNumber VARCHAR(250)                      \n" +
      ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
      "BEGIN                        \n" +
      "	DECLARE compCertificationList LONGTEXT;              \n" +
      "	DECLARE pPartID INT;      \n" +
      "	SELECT DISTINCT      \n" +
      "    partID      \n" +
      "INTO pPartID FROM      \n" +
      "    assemblyStock      \n" +
      "WHERE      \n" +
      "    woNumber = pWoNumber AND isDeleted = 0;		      \n" +
      "    IF (SELECT COUNT(1) FROM assemblyStock WHERE woNumber = pWoNumber AND isDeleted = 0 AND woID IS NULL) > 0     \n" +
      "    THEN	        \n" +
      "	SELECT       \n" +
      "    GROUP_CONCAT(    \n" +
      "        CASE      \n" +
      "            WHEN csd.classID IS NULL THEN cs.fullName    \n" +
      "            ELSE (SELECT       \n" +
      "                    GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))      \n" +
      "                FROM      \n" +
      "                    standard_class      \n" +
      "                WHERE      \n" +
      "                    classID = csd.classID AND isDeleted = 0)      \n" +
      "        END      \n" +
      "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC      \n" +
      "        SEPARATOR ', ')      \n" +
      "FROM      \n" +
      "    `component_standard_details` csd      \n" +
      "        JOIN      \n" +
      "    certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID      \n" +
      "WHERE      \n" +
      "    csd.isDeleted = 0      \n" +
      "        AND csd.componentID = pPartID INTO compCertificationList;        \n" +
      "ELSE       \n" +
      "		SELECT       \n" +
      "    GROUP_CONCAT(DISTINCT IFNULL(cs.fullName, ''),      \n" +
      "        ' ',      \n" +
      "        CASE      \n" +
      "            WHEN wc.classIDs IS NULL THEN ''      \n" +
      "            ELSE (SELECT       \n" +
      "                    GROUP_CONCAT(IFNULL(className, ''))      \n" +
      "                FROM      \n" +
      "                    standard_class      \n" +
      "                WHERE      \n" +
      "                    classID = wc.classIDs)      \n" +
      "        END      \n" +
      "        ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC      \n" +
      "        SEPARATOR ', ')      \n" +
      "FROM      \n" +
      "    `workorder_certification` wc      \n" +
      "        JOIN      \n" +
      "    certificate_standards cs ON wc.certificateStandardID = cs.certificateStandardID      \n" +
      "WHERE      \n" +
      "    wc.isDeleted = 0      \n" +
      "        AND wc.woID IN (SELECT       \n" +
      "            woID      \n" +
      "        FROM      \n" +
      "            assemblystock      \n" +
      "        WHERE      \n" +
      "            partID = pPartID AND isDeleted = 0) INTO compCertificationList;	      \n" +
      "        END IF;      \n" +
      "	RETURN compCertificationList;                    \n" +
      "END;  \n" +
  /* **************************** New Script -> 17-02-2020  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetPurchaseOrderReportDetails` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(              \n" +
      "	IN pid INT              \n" +
      ")  \n" +
      "BEGIN              \n" +
      "  \n" +
      "    # Purchase Order Master details              \n" +
      "    SELECT  po.id,               \n" +
      "		po.status,              \n" +
      "		po.poNumber,              \n" +
      "        po.poRevision,              \n" +
      "        po.poDate,              \n" +
      "        po.supplierAddress,              \n" +
      "		po.shippingAddress,       \n" +
      "        po.intermediateAddress,      \n" +
      "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                \n" +
      "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,              \n" +
      "        po.shippingInsurance,              \n" +
      "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,              \n" +
      "        po.poComment,              \n" +
      "        po.serialNumber,             \n" +
      "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,              \n" +
      "		us.emailAddress,              \n" +
      "		emp.phExtension              \n" +
      "	FROM purchase_order_mst po              \n" +
      "         INNER JOIN                    \n" +
      "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID                    \n" +
      "        AND gcs.isDeleted = 0                    \n" +
      "        INNER JOIN                    \n" +
      "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID                    \n" +
      "        AND gcp.isDeleted = 0              \n" +
      "     LEFT JOIN users us ON us.id = po.updatedBy                      \n" +
      "	 LEFT JOIN employees emp ON emp.id = us.employeeID                \n" +
      "        WHERE po.isDeleted = 0 AND po.id = pid;              \n" +
      "  \n" +
      "	# Purchase Order Line details              \n" +
      "    SELECT  pod.lineID,              \n" +
      "		pod.id AS pODetID,              \n" +
      "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,      \n" +
      "		(CASE WHEN (c.iscustom=1) THEN                   \n" +
      "			c.custAssyPN                  \n" +
      "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                   \n" +
      "			c.mfgPN                   \n" +
      "        ELSE ''  END) AS mfgPN ,            \n" +
      "        IFNULL(c.rev, '') AS revision,              \n" +
      "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,              \n" +
      "		pod.supplierQuoteNumber,              \n" +
      "        pod.internalRef,              \n" +
      "        fun_getPackagingNameByID(pod.packagingID) packagingType,              \n" +
      "        pod.qty,              \n" +
      "        'EA' uom,              \n" +
      "        pod.price,              \n" +
      "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,     \n" +
      "        CONCAT(IFNULL(pod.partDescription, ''),'<br/>',     \n" +
      "            IFNULL(CONCAT(                              \n" +
      "                            fun_getCertificationByPartID(pod.mfgPartID)),                              \n" +
      "                    ''),              \n" +
      "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                              \n" +
      "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,            \n" +
      "        pod.lineComment              \n" +
      "	 FROM purchase_order_det pod              \n" +
      "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)               \n" +
      "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid               \n" +
      "	 ORDER BY pod.lineID ASC;	              \n" +
      "  \n" +
      "	# Get purchase order Total Price table details          \n" +
      "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                         \n" +
      "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud             \n" +
      "				INNER JOIN component cm ON cm.id = pud.mfgPartID              \n" +
      "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 AND cm.partType <> 4) totalLinePrice ,                  \n" +
      "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,                      \n" +
      "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd               \n" +
      "				INNER JOIN component c ON c.id = ppd.mfgPartID              \n" +
      "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 AND c.partType = 4) totalPOMiscPrice                      \n" +
      "		FROM purchase_order_det pd                 \n" +
      "		WHERE pd.refPurchaseOrderID= pid              \n" +
      "		AND pd.isdeleted=0;       \n" +
      "  \n" +
      "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,              \n" +
      "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,              \n" +
      "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,         \n" +
      "				IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0),0) totalPOPrice FROM tempTotalPrice LIMIT 1;                       \n" +
      "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	              \n" +
      "END;  \n" +
  /* **************************** New Script -> 17-02-2020  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(          \n" +
      "	IN partID INT ,              \n" +
      "	IN cpID INT               \n" +
      ")  \n" +
      "BEGIN                \n" +
      "  \n" +
      "	# COFC Report Header details      \n" +
      "	SELECT                   \n" +
      "    cp.id,      \n" +
      "    cp.packingSlipNumber AS PackingSlip,                \n" +
      "    cp.packingSlipDate AS PackingSlipDate,                \n" +
      "    cp.soNumber AS SalesOrderNumber,                \n" +
      "    cp.poNumber AS PONumber,               \n" +
      "	 cp.soDate AS SODate,                  \n" +
      "    cp.sorevision AS SORevision,              \n" +
      "    IFNULL(mfg.mfgName, '') AS Customer,                \n" +
      "    'BAS' AS DepartmentName,                \n" +
      "    'Paul Khunt' AS ManagerName                \n" +
      "FROM                \n" +
      "    customer_packingslip cp            \n" +
      "        LEFT JOIN                \n" +
      "    mfgcodemst mfg ON mfg.id = cp.customerID                \n" +
      "        AND mfg.isDeleted = 0                \n" +
      "WHERE                \n" +
      "    cp.isDeleted = 0 AND cp.id = cpID        \n" +
      "LIMIT 1;                \n" +
      "  \n" +
      "  # COFC Report Table details              \n" +
      "	SELECT             \n" +
      "    cpd.id AS cpDetID,          \n" +
      "	cpd.custPOLineID AS POLine,                \n" +
      "	cpd.lineID AS PSLine,              \n" +
      "    CASE WHEN (c.partType = 3) THEN sa.shippedqty ELSE cpd.shipQty END AS ShippedQty,                 \n" +
      "    cpd.poQty AS OrderQty,                \n" +
      "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN    \n" +
      "	fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                  \n" +
      "	WHEN (c.iscustom = 1) THEN                  \n" +
      "	c.custAssyPN                  \n" +
      "	WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                  \n" +
      "	c.mfgPN                  \n" +
      "	ELSE                  \n" +
      "	''                  \n" +
      "	END) AS PartNumber,              \n" +
      "    IFNULL(c.rev, '') AS Revision,                \n" +
      "    sa.woNumber AS WorkOrderNumber,                \n" +
      "    fun_getCertificationByWoNumber(sa.woNumber) AS Standards,                \n" +
      "    FUN_GETUOMBYID(c.uom) AS UOM,  \n" +
      "    cpd.assyDescription AS Descripton,  \n" +
      "     c.partType,                     \n" +
      "    (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1) AS DateCode 	        \n" +
      "FROM  		    	          \n" +
      "    customer_packingslip_det cpd                \n" +
      "		INNER JOIN  component c ON c.id = cpd.partid AND c.isDeleted = 0         \n" +
      "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0        \n" +
      "WHERE                \n" +
      "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID         \n" +
      "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;             \n" +
      "  \n" +
      "END;  \n" +
  /* **************************** New Script -> 17-02-2020  *********************************** */
  
  /* **************************** Add Script Version ->  *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (733,'1.00','V1',' Hot Fix #30771-Champak '," + userid + ", '" + requiredDet.ipAddress + "');"
  );
break;

        case 733:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "IN ppageIndex INT,  \n" +
                "IN precordPerPage INT,  \n" +
                "IN pOrderBy VARCHAR(255),  \n" +
                "IN pWhereClause VARCHAR(16383),  \n" +
                "IN pFilterStatus LONGTEXT,  \n" +
                "IN pDueDate DATE,  \n" +
                "IN pAdditionalDays INT,  \n" +
                "IN pTermsAndAboveDays INT,  \n" +
                "IN pPoNumber VARCHAR(50),  \n" +
                "IN pIsExactSearchPO TINYINT,  \n" +
                "IN pMfgCodeIds LONGTEXT ,  \n" +
                "IN pPaymentTermsIds LONGTEXT ,  \n" +
                "IN pPartId INT,  \n" +
                "IN pTransType VARCHAR(5)  \n" +
                "-- IN pChequeNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pOffset INT;  \n" +
                "DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "DECLARE vTimeZone VARCHAR(50);  \n" +
                "SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "SELECT cp.id, cp.transType, cp.poNumber,cp.poDate,  \n" +
                "(CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "cp.invoiceNumber,cp.invoiceDate,  \n" +
                "cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2 THEN 'Invoice'  \n" +
                "WHEN cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "cp.soNumber,cp.soDate,  \n" +
                "cp.sorevision,  \n" +
                "cp.refSalesOrderID,  \n" +
                "cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "cp.refCustInvoiceID,  \n" +
                "fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "cp.status,  \n" +
                "cp.subStatus,  \n" +
                "case when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then ''  \n" +
                "when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'  \n" +
                "when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'  \n" +
                "when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'  \n" +
                "when cp.transType = 'C' then '' END as paymentStatusValue,  \n" +
                "cp.paymentStatus,  \n" +
                "ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "cp.totalAmount,  \n" +
                "(SELECT IFNULL(g.cnt,0)  \n" +
                "FROM vu_genericfilescount g  \n" +
                "WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "(SELECT IFNULL(g.cnt,0)  \n" +
                "FROM vu_genericfilescount g  \n" +
                "WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "(select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,  \n" +
                "cp.customerID,  \n" +
                "cp.createdBy as createdById,  \n" +
                "get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "DATE_ADD((cp.invoiceDate ),INTERVAL IFNULL((case when cp.termsId is Not NULL then cp.termsDays-1  \n" +
                "else 0 end),0) DAY) paymentDueDate,  \n" +
                "fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
                "cp.termsDays termDays,  \n" +
                "cp.freeOnBoardName,  \n" +
                "cp.isLocked,  \n" +
                "fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "packingSlip.id packingSlipId,  \n" +
                "(select group_concat(paymentNumber)  \n" +
                "from packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "(select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
                "fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms  \n" +
                "FROM customer_packingslip cp  \n" +
                "join mfgcodemst m on m.id = cp.customerID  \n" +
                "LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  \n" +
                "WHERE cp.isDeleted=0  \n" +
                "AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "IF pTransType = 'I' THEN  \n" +
                "SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "ELSE  \n" +
                "SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "END IF;  \n" +
                "ELSE  \n" +
                "SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "END IF;  \n" +
                "IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "SET pWhereClause = '1=1' ;  \n" +
                "END IF;  \n" +
                "IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "END IF;  \n" +
                "IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "END IF;  \n" +
                "IF pPartId IS NOT NULL THEN  \n" +
                "SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "END IF;  \n" +
                "# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "# SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "# END IF;  \n" +
                "IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "END IF;  \n" +
                "IF pDueDate IS NOT NULL THEN  \n" +
                "SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "END IF;  \n" +
                "IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "IF pIsExactSearchPO = 1 THEN  \n" +
                "SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "OR c.poNumber = '\", pPoNumber, \"'  \n" +
                "OR c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "OR c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "OR c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                ");  \n" +
                "ELSE  \n" +
                "SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "OR c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "OR c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "OR c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "OR c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                ");  \n" +
                "END IF;  \n" +
                "END IF;  \n" +
                "# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "ELSE  \n" +
                "SET rowNumWhere = '';  \n" +
                "END IF;  \n" +
                "/* to get total count of rows */  \n" +
                "SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "PREPARE query2 FROM @SQLStatement2;  \n" +
                "EXECUTE query2;  \n" +
                "DEALLOCATE PREPARE query2;  \n" +
                "SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "round((c.totalAmount),2) totalAmount,  \n" +
                "round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "round((c.totalAmount - c.receivedAmount),2) pendingAmount from ( \",  \n" +
                "@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "PREPARE query1 FROM @SQLStatement2;  \n" +
                "EXECUTE query1;  \n" +
                "DEALLOCATE PREPARE query1;  \n" +
                "END; \n" +
                /* **************************** New Script -> 17-02-2021   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (734,'1.00','V1',' User story #30210 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 734:
                allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(                                                              \n" +
                "	IN ppageIndex INT,                                                              \n" +
                "	IN precordPerPage INT,                                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                                              \n" +
                "	IN pWhereClause VARCHAR(16383),              	                              \n" +
                "    IN pFilterStatus LONGTEXT,                              \n" +
                "    IN pDueDate DATE,                              \n" +
                "    IN pAdditionalDays INT,                              \n" +
                "    IN pTermsAndAboveDays INT,                              \n" +
                "    IN pPoNumber VARCHAR(50),                              \n" +
                "    IN pIsExactSearchPO TINYINT,                              \n" +
                "    IN pMfgCodeIds LONGTEXT ,                            \n" +
                "    IN pPaymentTermsIds LONGTEXT ,                          \n" +
                "    IN pPartId INT,                        \n" +
                "    IN pTransType VARCHAR(5) ,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE  \n" +
                "    -- IN pChequeNumber  VARCHAR(50)                              \n" +
                ")  \n" +
                "BEGIN                                                              \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                              \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                             \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                                             \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                             \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"                                                 \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate,                           \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,                        \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,                              \n" +
                "        cp.invoiceNumber,cp.invoiceDate,                            \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,                        \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,                        \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'                           \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,                          \n" +
                "        cp.soNumber,cp.soDate,                                            \n" +
                "		cp.sorevision,                              \n" +
                "        cp.refSalesOrderID,                              \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,                               \n" +
                "        cp.refCustInvoiceID,                                            \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,                            \n" +
                "		 cp.status,                         \n" +
                "         cp.subStatus,                                          \n" +
                "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then ''                               \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'                               \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'                            \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'                         \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusValue,                              \n" +
                "		  cp.paymentStatus,                           \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,                    \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,                            \n" +
                "		  cp.totalAmount,                                      \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,                                            \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,                                    \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,                                 \n" +
                "         cp.customerID,                            \n" +
                "         cp.createdBy as createdById,                            \n" +
                "		 get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,                    \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,                                            \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,                                            \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,                                            \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,                                              \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                          \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,                              \n" +
                "		 DATE_ADD((cp.invoiceDate ),INTERVAL IFNULL((case when cp.termsId is Not NULL then cp.termsDays-1                                    \n" +
                "													else 0 end),0) DAY) paymentDueDate,                                 \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,                              \n" +
                "         cp.termsDays termDays,                              \n" +
                "         cp.freeOnBoardName,                            \n" +
                "         cp.isLocked,                            \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,                            \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,                            \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,                            \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,                            \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,                              \n" +
                "         packingSlip.id packingSlipId,                    \n" +
                "         (select group_concat(paymentNumber)                    \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd                     \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0                     \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,                \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,            \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,          \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms          \n" +
                "		 FROM customer_packingslip cp                               \n" +
                "         join  mfgcodemst m on m.id = cp.customerID                                      \n" +
                "         LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0              \n" +
                "		WHERE  cp.isDeleted=0                                            \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");                                                              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN               \n" +
                "		IF pTransType = 'I' THEN              \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";                                                    \n" +
                "        ELSE              \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";                                                    \n" +
                "        END IF;                  \n" +
                "	ELSE                                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                              \n" +
                "	END IF;	                                                              \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                              \n" +
                "		SET pWhereClause = '1=1' ;                                                              \n" +
                "	END IF;	                              \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                      \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');                                                      \n" +
                "	END IF;                                \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                                                      \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');                                                      \n" +
                "	END IF;                             \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN                          \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');                           \n" +
                "    END IF;                          \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN                                            \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');                                            \n" +
                "	# END IF;                                \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN                                            \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');                                            \n" +
                "	END IF;                                 \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                                      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                                      \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN                                    \n" +
                "		IF pIsExactSearchPO = 1 THEN                                    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'                                    \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'                                    \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'                                    \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'                                    \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"                                    \n" +
                "						);                                    \n" +
                "		ELSE                                    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'                                    \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'                                    \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'                                    \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'                                    \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"                                    \n" +
                "						);                                    \n" +
                "		END IF;                                    \n" +
                "	END IF;                                    \n" +
                "#select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;                              \n" +
                "  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");			  \n" +
                "        END IF;  \n" +
                "    END IF;      \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");			  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    #select pWhereClause;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                              \n" +
                "	ELSE	                                                              \n" +
                "		SET rowNumWhere = '';                                                              \n" +
                "	END IF;	                                                              \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                                 \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);                                                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                \n" +
                "	EXECUTE query2;                                                                \n" +
                "	DEALLOCATE PREPARE query2;                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                  \n" +
                "		 round((c.totalAmount),2) totalAmount,                                  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,                                  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) pendingAmount  from ( \",                               \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                                \n" +
                "	EXECUTE query1;                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (735,'1.00','V1','Sproc_RetrieveCustomerInvoiceDetails - shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break; 
        case 735:
              allDbChangesArray.push(
              /* **************************** New Script -> 17-02-2021  *********************************** */
                  "DROP PROCEDURE IF EXISTS `Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS` ;  \n" +
                  "CREATE PROCEDURE `Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS`(      \n" +
                  "	IN pCurrShipUMID VARCHAR(20),      \n" +
                  "	IN pCurrRefsidid INT,      \n" +
                  "	IN pCurrShippedQty INT,      \n" +
                  "	IN pCurrDBAvaiShippedQty INT,      \n" +
                  "	IN pToBinIDOfEmptyBin INT,      \n" +
                  "	IN pTransTypeForUMID VARCHAR(100),      \n" +
                  "	IN pActionPerformedForUMIDZeroOut VARCHAR(100),      \n" +
                  "	IN pActionPerformedForUMIDConsumed VARCHAR(100),      \n" +
                  "	IN pActionPerformedForUMIDAdjust VARCHAR(100),      \n" +
                  "	IN pCpsdRefSalesorderDetid INT,      \n" +
                  "	IN pPartID INT,      \n" +
                  "	IN pUomIDOfAssy INT,      \n" +
                  "	IN pUserID VARCHAR(50),                \n" +
                  "	IN pUserRoleID VARCHAR(50)           \n" +
                  "    )  \n" +
                  "BEGIN      \n" +
                  "	-- declare lv_tot_stock_umid INT DEFAULT 0;      \n" +
                  "	DECLARE lv_allocated_stock_umid INT DEFAULT 0;      \n" +
                  "	DECLARE lv_actual_ship_qty INT DEFAULT 0;      \n" +
                  "	DECLARE lv_actionPerformed VARCHAR(100);      \n" +
                  "	DECLARE lv_currUMIDDBAvaiPkgQty INT;       \n" +
                  "	DECLARE lv_currUMIDDBAvaiBinID INT;      \n" +
                  "	DECLARE lv_currUMIDDBAvaiUOM INT;       \n" +
                  "	DECLARE lv_userInputDetail TEXT;       \n" +
                  "	DECLARE lv_currUMIDDBAvaiUOMUnitName VARCHAR(100);      \n" +
                  "	DECLARE lv_actualShipQty_converted_consumeunit DECIMAL(18,8);      \n" +
                  "	DECLARE lv_UMIDPkgQtyAfterProcess_converted_pkgunit DECIMAL(18,8);      \n" +
                  "	DECLARE lv_adjustPkgQty INT ;      \n" +
                  "	DECLARE lv_converted_adjustPkgUnit DECIMAL(18,8);   \n" +
                  "	DECLARE lv_wareHouseIDOfEmptyWareHouse INT;    \n" +
                  "  \n" +
                  "	/* actual_ship_qty = curr ship from UI - db available ship qty */      \n" +
                  "	SET lv_actual_ship_qty = IFNULL(pCurrShippedQty,0) - IFNULL(pCurrDBAvaiShippedQty,0);      \n" +
                  "  \n" +
                  "	/* tot_stock_umid */       \n" +
                  "	SELECT pkgQty, binID, uom  INTO lv_currUMIDDBAvaiPkgQty, lv_currUMIDDBAvaiBinID, lv_currUMIDDBAvaiUOM      \n" +
                  "        FROM temp_db_comp_sid_stock_list      \n" +
                  "        WHERE id = pCurrRefsidid ;      \n" +
                  "  \n" +
                  "	/* allocated_stock_umid */      \n" +
                  "	SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))) INTO lv_allocated_stock_umid      \n" +
                  "	FROM kit_allocation       \n" +
                  "	WHERE uid = pCurrShipUMID       \n" +
                  "	AND STATUS IN ('A','R')              \n" +
                  "	GROUP BY uid ;      \n" +
                  "  \n" +
                  "	/* get uom unit name */      \n" +
                  "	SELECT unitName INTO lv_currUMIDDBAvaiUOMUnitName      \n" +
                  "	FROM uoms       \n" +
                  "	WHERE id = lv_currUMIDDBAvaiUOM       \n" +
                  "	AND isDeleted = 0 ;      \n" +
                  "  \n" +
                  "  \n" +
                  "	SET lv_actualShipQty_converted_consumeunit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , lv_actual_ship_qty);      \n" +
                  "	SET lv_UMIDPkgQtyAfterProcess_converted_pkgunit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , (lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty));      \n" +
                  "  \n" +
                  "  \n" +
                  "	/* zero out case >> if ship qty same as UMID pkg available qty */      \n" +
                  "        IF(lv_actual_ship_qty = lv_currUMIDDBAvaiPkgQty) THEN      \n" +
                  "  \n" +
                  "		SET lv_actionPerformed = pActionPerformedForUMIDZeroOut ;      \n" +
                  "		SET lv_userInputDetail = CONCAT('{\"remainingPkgQty\": 0,      \n" +
                  "				\"remainingPkgUnit\": 0,      \n" +
                  "				\"remainingAdjustPkgQty\": 0,      \n" +
                  "				\"remainingAdjustPkgUnit\": 0,      \n" +
                  "				\"remainingAdjustPkgQtyDiff\": 0,      \n" +
                  "				\"remainingAdjustPkgUnitDiff\": 0,      \n" +
                  "				\"unitName\": \"',lv_currUMIDDBAvaiUOMUnitName,'\",\"uom\": ',lv_currUMIDDBAvaiUOM,',\"refKitAllocationID\": null,      \n" +
                  "				\"consumeQty\":',lv_actual_ship_qty,',\"consumeUnit\": ',lv_actualShipQty_converted_consumeunit,',      \n" +
                  "				\"scrapExpiredQty\": 0,\"scrapExpiredUnit\": 0}') ;      \n" +
                  "  \n" +
                  "		UPDATE 	component_sid_stock                             \n" +
                  "		SET 	binID = pToBinIDOfEmptyBin,      \n" +
                  "			isinStk = 0,      \n" +
                  "			updatedBy = pUserID,       \n" +
                  "			updateByRoleId = pUserRoleID  ,      \n" +
                  "			updatedAt = fun_DatetimetoUTCDateTime()                             \n" +
                  "		WHERE 	id = pCurrRefsidid AND isDeleted = 0;      \n" +
                  "  \n" +
                  "  \n" +
                  "	ELSEIF(lv_actual_ship_qty > 0) THEN      \n" +
                  "		/* consume UMID stock case >> so we do minus UMID pkgqty in component_sid_stock table  */      \n" +
                  "		SET lv_actionPerformed = pActionPerformedForUMIDConsumed ;      \n" +
                  "		SET lv_userInputDetail = CONCAT('{\"remainingPkgQty\": ',(lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty),',      \n" +
                  "				\"remainingPkgUnit\": ',lv_UMIDPkgQtyAfterProcess_converted_pkgunit,',\"remainingAdjustPkgQty\": null,      \n" +
                  "				\"remainingAdjustPkgUnit\": null,\"remainingAdjustPkgQtyDiff\": 0,\"remainingAdjustPkgUnitDiff\": 0,      \n" +
                  "				\"unitName\": \"',lv_currUMIDDBAvaiUOMUnitName,'\",\"uom\": ',lv_currUMIDDBAvaiUOM,',\"refKitAllocationID\": null,      \n" +
                  "				\"consumeQty\": ',lv_actual_ship_qty,',\"consumeUnit\": ',lv_actualShipQty_converted_consumeunit,',      \n" +
                  "				\"scrapExpiredQty\": 0,\"scrapExpiredUnit\": 0}') ;      \n" +
                  "	ELSEIF(lv_actual_ship_qty < 0) THEN      \n" +
                  "		/* UMID stock adjustment case >> so we do plus UMID pkgqty in component_sid_stock table  */      \n" +
                  "  \n" +
                  "		SET lv_adjustPkgQty = (0 - lv_actual_ship_qty);      \n" +
                  "		SET lv_converted_adjustPkgUnit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , lv_adjustPkgQty);      \n" +
                  "		SET lv_actionPerformed = pActionPerformedForUMIDAdjust;      \n" +
                  "		SET lv_userInputDetail = CONCAT('{\"remainingPkgQty\": ',lv_currUMIDDBAvaiPkgQty,',      \n" +
                  "				\"remainingPkgUnit\": ',fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , lv_currUMIDDBAvaiPkgQty),',      \n" +
                  "				\"remainingAdjustPkgQty\": ',lv_adjustPkgQty,',      \n" +
                  "				\"remainingAdjustPkgUnit\": ',lv_converted_adjustPkgUnit,',      \n" +
                  "				\"remainingAdjustPkgQtyDiff\": ',lv_adjustPkgQty,',      \n" +
                  "				\"remainingAdjustPkgUnitDiff\": ',lv_converted_adjustPkgUnit,',      \n" +
                  "				\"unitName\": \"',lv_currUMIDDBAvaiUOMUnitName,'\",\"uom\": ',lv_currUMIDDBAvaiUOM,',\"refKitAllocationID\": null,      \n" +
                  "				\"consumeQty\": ',lv_actual_ship_qty,',\"consumeUnit\": ',lv_actualShipQty_converted_consumeunit,',      \n" +
                  "				\"scrapExpiredQty\": 0,\"scrapExpiredUnit\": 0}') ;      \n" +
                  "	END IF;          \n" +
                  "  \n" +
                  "  \n" +
                  "	IF(lv_actual_ship_qty > (lv_currUMIDDBAvaiPkgQty - lv_allocated_stock_umid)) THEN      \n" +
                  "		/* (available from allocated UMID stock in kit) */      \n" +
                  "  \n" +
                  "		/* deallocate from other kit */      \n" +
                  "		UPDATE kit_allocation                 \n" +
                  "		SET `status` = 'D',        \n" +
                  "			remark = 'Auto deallocated from customer packing slip.',            \n" +
                  "			updatedBy = pUserID,                \n" +
                  "			updateByRoleId = pUserRoleID  ,              \n" +
                  "			updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                  "		WHERE uid = pCurrShipUMID                \n" +
                  "		AND STATUS = 'A';      \n" +
                  "  \n" +
                  "        END IF;      \n" +
                  "  \n" +
                  "  \n" +
                  "        /* when UMID is with empty bin request come to increase umid stock then      \n" +
                  "		update UMID bin > set fromBinID from empty bin */      \n" +
                  "        /* if(lv_actionPerformed != pActionPerformedForUMIDZeroOut and lv_currUMIDDBAvaiPkgQty=0       \n" +
                  "			and lv_currUMIDDBAvaiBinID=pToBinIDOfEmptyBin and ((lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty) > 0)) then      \n" +
                  "  \n" +
                  "		UPDATE 	component_sid_stock               \n" +
                  "		SET 	binID = fromBin              \n" +
                  "		WHERE  	id = pCurrRefsidid              \n" +
                  "		AND 	isDeleted = 0;      \n" +
                  "  \n" +
                  "	end if; */      \n" +
                  "  \n" +
                  "  \n" +
                  "  \n" +
                  "	/* update UNID pkgqty and unit */      \n" +
                  "        UPDATE component_sid_stock               \n" +
                  "	SET pkgQty = pkgQty - lv_actual_ship_qty,	                    \n" +
                  "		pkgUnit = fun_convertUOM(pUomIDOfAssy , lv_currUMIDDBAvaiUOM , (pkgUnit - lv_actual_ship_qty)),      \n" +
                  "		updatedBy = pUserID,                \n" +
                  "		updateByRoleId = pUserRoleID  ,              \n" +
                  "		updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                  "	WHERE  id = pCurrRefsidid              \n" +
                  "	AND isDeleted = 0;      \n" +
                  "  \n" +
                  "	IF(lv_actionPerformed = pActionPerformedForUMIDZeroOut) THEN  \n" +
                  "		SELECT WarehouseID INTO lv_wareHouseIDOfEmptyWareHouse  \n" +
                  "		FROM binmst  \n" +
                  "		WHERE isDeleted = 0  \n" +
                  "		AND id = -1 ;  \n" +
                  "	END IF;  \n" +
                  "  \n" +
                  "  \n" +
                  "        -- Insert log in UMID history page                                                        \n" +
                  "	INSERT INTO component_sid_stock_history                       \n" +
                  "		(                      \n" +
                  "			transType, 			actionPerformed, 	refUIDId, 	uid, 			refcompid,                       \n" +
                  "			binID, 				    \n" +
                  "			warehouseID, 			  \n" +
                  "			deptWHID, 			orgQty, 		orgUnit,                       \n" +
                  "			currentQty, 			currentUnit, 		uom, 		                      \n" +
                  "			scrappedQty, 			scrappedUnit,                       \n" +
                  "			consumedQty,			consumedUnit,		      \n" +
                  "			adjustQty,			adjustUnit,                     \n" +
                  "			refTrans, 			refTransID, 		reason, 	                      \n" +
                  "			refSalesOrderDetID,		assyID,                      \n" +
                  "			woTransID,			userInputDetail,	isDeleted, 	createdBy, 		createdAt, 		                      \n" +
                  "			updatedBy, 			updatedAt ,		createByRoleId,	updateByRoleId    \n" +
                  "		)                      \n" +
                  "	SELECT                      \n" +
                  "			pTransTypeForUMID,		lv_actionPerformed,	id,		uid,			refcompid,                      \n" +
                  "			CASE WHEN (lv_actionPerformed = pActionPerformedForUMIDZeroOut) THEN pToBinIDOfEmptyBin ELSE binID END,				    \n" +
                  "			CASE WHEN (lv_actionPerformed = pActionPerformedForUMIDZeroOut) THEN lv_wareHouseIDOfEmptyWareHouse ELSE warehouseID END,			  \n" +
                  "			deptWHID,			orgQty,			orgPkgUnit,                      \n" +
                  "			(lv_currUMIDDBAvaiPkgQty - lv_actual_ship_qty),	lv_UMIDPkgQtyAfterProcess_converted_pkgunit,		uom,		                      \n" +
                  "			NULL,		                NULL,			      \n" +
                  "			lv_actual_ship_qty,		lv_actualShipQty_converted_consumeunit,	      \n" +
                  "			lv_adjustPkgQty,		lv_converted_adjustPkgUnit,      \n" +
                  "			NULL,				NULL,			'Auto entry from customer packing slip',		                      \n" +
                  "			pCpsdRefSalesorderDetid,        pPartID,			                \n" +
                  "			NULL,   			lv_userInputDetail,	0,		pUserID,	fun_DatetimetoUTCDateTime(),                      \n" +
                  "			pUserID,			fun_DatetimetoUTCDateTime(), pUserRoleID, pUserRoleID    \n" +
                  "	FROM temp_db_comp_sid_stock_list       \n" +
                  "	WHERE id = pCurrRefsidid ;         \n" +
                  "  \n" +
                  "  \n" +
                  "    END;  \n" +
              /* **************************** Add Script Version -> 17-02-2021  *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (736,'1.00','V1',' Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
              );
            break;

        case 736:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-02-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerInvoiceReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                        \n" +
                "	IN cpID INT                        \n" +
                ")  \n" +
                "BEGIN	                        \n" +
                "  \n" +
                "    # Customer Invoice Master table details                         \n" +
                "    SELECT  cp.id,                        \n" +
                "		cp.invoiceNumber,                        \n" +
                "        cp.invoiceDate,                        \n" +
                "		cp.packingSlipNumber,                              \n" +
                "		cp.packingSlipDate,                              \n" +
                "		cp.poDate,                              \n" +
                "		cp.poNumber,              \n" +
                "		mg.customerSystemID,              \n" +
                "		mg.accountRef,             \n" +
                "		cp.packingSlipComment,                       \n" +
                "        cp.status,                        \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '            \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                      \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                        \n" +
                "        cp.billingAddress,                        \n" +
                "        cp.shippingAddress,              \n" +
                "        cp.intermediateAddress,                        \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                        \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                          \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                         \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                        \n" +
                "        cp.systemID AS legalnumber,      \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,                        \n" +
                "		us.emailAddress,                        \n" +
                "		emp.phExtension                        \n" +
                "		FROM customer_packingslip cp               \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                        \n" +
                "                LEFT JOIN                              \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                         \n" +
                "        AND gcs.isDeleted = 0                             \n" +
                "           LEFT JOIN                              \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                         \n" +
                "        AND gcp.isDeleted = 0                           \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                         \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                         \n" +
                "  \n" +
                "	# Customer Invoice line level details                         \n" +
                "	SELECT                          \n" +
                "		cpd.id,                              \n" +
                "		cpd.partId,                    \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                     \n" +
                "		cpd.lineID,                        \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                           \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                        \n" +
                "		  WHEN (c.iscustom=1) THEN                         \n" +
                "			c.custAssyPN                        \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                         \n" +
                "			c.mfgPN                         \n" +
                "        ELSE                                                                 \n" +
                "			  ''                                                \n" +
                "			END) AS mfgPN ,                        \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                             \n" +
                "			'Other Charges'                              \n" +
                "		ELSE                                                                 \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                \n" +
                "			END) AS  mfgName,                        \n" +
                "		IFNULL(c.rev, '') AS revision,                        \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                        \n" +
                "		cpd.shipQty AS qty,                         \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                        \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,              \n" +
                "		CONCAT(        \n" +
                "		IFNULL(cpd.assyDescription, ''),'<br/>',                             \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                \n" +
                "                IFNULL(CONCAT(', ',                                \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                \n" +
                "                    ''),                \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',            \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS DESCRIPTION               \n" +
                "  \n" +
                "	FROM                              \n" +
                "		customer_packingslip_det cpd                              \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                               \n" +
                "	WHERE                              \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                         \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                         \n" +
                "    SELECT                                      \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                         \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                         \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                              \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                                  \n" +
                "			(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                         \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                         \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                        \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                         \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice                        \n" +
                "		FROM customer_packingslip_det cpd                             \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                          \n" +
                "		AND cpd.isdeleted=0;                              \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                          \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                          \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,    \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice FROM tempTotalPrice LIMIT 1;         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-02-2021   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (737,'1.00','V1',' Bug #30796 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 737:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-02-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerPackingslipReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                            \n" +
                "	IN cpid INT                            \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "	SELECT                         \n" +
                "    cp.id,                    \n" +
                "    cp.status,           \n" +
                "    cp.packingSlipType,          \n" +
                "    cp.packingSlipNumber AS PackingSlip,                        \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                        \n" +
                "    cp.poDate AS PODate,                        \n" +
                "    cp.soNumber AS SalesOrderNumber,                        \n" +
                "    cp.poNumber AS PONumber,    \n" +
                "    cp.packingSlipComment,                        \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                        \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                        \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                    \n" +
                "    cp.soDate AS SODate,                        \n" +
                "    cp.sorevision AS SORevision,                        \n" +
                "	cp.billingAddress AS SoldToAddress,                  \n" +
                "	cp.shippingAddress AS ShippingAddress,         \n" +
                "	cp.intermediateAddress AS IntermediateAddress,           \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),                        \n" +
                "            '-') AS SalesOrderPersonName,                  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension                    \n" +
                "FROM                        \n" +
                "    customer_packingslip cp               \n" +
                "        LEFT JOIN                        \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                        \n" +
                "        AND sm.isDeleted = 0                        \n" +
                "        LEFT JOIN                        \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                        \n" +
                "        AND gc.isDeleted = 0                        \n" +
                "        AND gc.categoryType = 'Shipping Methods'                        \n" +
                "        LEFT JOIN                        \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                        \n" +
                "        AND gcc.isDeleted = 0                        \n" +
                "        AND gcc.categoryType = 'Payment Terms'                      \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                            \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                     \n" +
                "WHERE                        \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                        \n" +
                "LIMIT 1;                        \n" +
                "  \n" +
                "SELECT                         \n" +
                "	cpd.lineID AS PSLine,                  \n" +
                "    cpd.id AS cpDetID,                  \n" +
                "    cpd.refCustPackingSlipID AS cpID,                   \n" +
                "    cpd.partId,                  \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                    \n" +
                "    IFNULL(cpd.remainingQty,0) AS RemainingQty,                    \n" +
                "    cpd.custPOLineID AS POLine,            \n" +
                "    cpd.shippingNotes AS ShippingComment,            \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN                  \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                  \n" +
                "		WHEN (c.iscustom = 1) THEN                  \n" +
                "		c.custAssyPN                  \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN                  \n" +
                "		c.mfgPN                  \n" +
                "		ELSE                  \n" +
                "		''                  \n" +
                "	END) AS PartNumber,                     \n" +
                "    FUN_GETUOMABBREVIATIONBYID(c.uom) AS UOM,                        \n" +
                "    IFNULL(c.rev, '') AS Revision,                   \n" +
                "    c.partType,                  \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',                     \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                        \n" +
                "            IFNULL(CONCAT(', ',                        \n" +
                "                            cpd.standrads),                        \n" +
                "                    ''),                        \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                        \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                        \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                        \n" +
                "FROM                        \n" +
                "    customer_packingslip_det cpd                  \n" +
                "        LEFT JOIN                        \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                        \n" +
                "        AND cp.isDeleted = 0                        \n" +
                "        LEFT JOIN                        \n" +
                "    component c ON c.id = cpd.partid                        \n" +
                "        LEFT JOIN                        \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                        \n" +
                "        AND sd.isDeleted = 0                       \n" +
                "        LEFT JOIN                       \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                        \n" +
                "        LEFT JOIN                        \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID      	                  \n" +
                "        LEFT JOIN                        \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                        \n" +
                "        AND ra.partID = cpd.partId                        \n" +
                "        LEFT JOIN                        \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                   \n" +
                "WHERE                \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                          \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-02-2021   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (738,'1.00','V1',' Bug #30796 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 738:
                allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2021  *********************************** */
                "DROp FUNCTION IF EXISTS fun_replaceSpecialCharacters;  \n" +
                "CREATE FUNCTION `fun_replaceSpecialCharacters`(   \n" +
                "pSourceString varchar(150)   \n" +
                ") RETURNS varchar(150) CHARSET utf8mb4  \n" +
                "BEGIN   \n" +
                "declare vReplaceString varchar(10);   \n" +
                "declare vDestinationString varchar(150);   \n" +
                " set vDestinationString = pSourceString;   \n" +
                "  \n" +
                " select replace(vDestinationString, \"/\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \":\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \"*\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \"?\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \"\\\"\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \"<\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \">\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \"|\", \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, '\\\\\', \"+\") into vDestinationString; \n" +
                " select replace(vDestinationString, \"#\", \"+\") into vDestinationString;   \n" +
                "  \n" +
                " return vDestinationString;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  24-02-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (739,'1.00','V1',' Update fun_replaceSpecialCharacters - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break;
        case 739:
	        allDbChangesArray.push(
		        /* **************************** New Script -> 24-02-2021 *********************************** */
		        "DROP procedure IF EXISTS `Sproc_KitRelease`;  \n" +
                "CREATE PROCEDURE `Sproc_KitRelease`(                                  \n" +
                "	IN pRefSalesOrderDetID INT,                         \n" +
                "	IN pAssyID INT,                                         \n" +
                "	IN pSubAssyID INT,                             \n" +
                "	IN pPlanDetID INT,                                   \n" +
                "	IN pWOID INT,                  \n" +
                "	IN pToDeptId INT,                  \n" +
                "	IN pDescription VARCHAR(1000),                    \n" +
                "	IN pCreatedBy VARCHAR(255),                            \n" +
                "	IN pCreateByRoleId INT,                \n" +
                "	IN pIsReRelease TINYINT                       \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "	/* Return list of error code if any validation not passed                          \n" +
                "	1: If kit qty and plan kit qty mismatch                          \n" +
                "	*/                          \n" +
                "  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);                            \n" +
                "	-- DECLARE vFromParentWarehouse INT(11);                            \n" +
                "	-- DECLARE vToParentWarehouse INT(11);                            \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);                            \n" +
                "	DECLARE vNickname VARCHAR(50);                          \n" +
                "	DECLARE vReleaseKitNumber VARCHAR(60);                          \n" +
                "	DECLARE vTotalPlan INT;                          \n" +
                "	DECLARE vReleasedPlan INT;                              \n" +
                "	DECLARE vKitQty INT;                          \n" +
                "	DECLARE vIsReleaseKit TINYINT;                        \n" +
                "	DECLARE vPlanExists INT;         \n" +
                "    DECLARE vActualKitReleaseDate DATETIME;      \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                                  \n" +
                "	BEGIN                                  \n" +
                "		ROLLBACK;                                  \n" +
                "		RESIGNAL;                                  \n" +
                "	END;                                  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                  \n" +
                "	BEGIN                                  \n" +
                "		ROLLBACK;                                  \n" +
                "		RESIGNAL;            \n" +
                "	END;                                  \n" +
                "	START TRANSACTION;                                  \n" +
                "  \n" +
                "    SET vActualKitReleaseDate = fun_DatetimetoUTCDateTime();      \n" +
                "	SELECT 	COUNT(1) INTO vPlanExists                 \n" +
                "        FROM 	salesorder_plan_detailsmst                       \n" +
                "        WHERE 	id = pPlanDetID                   \n" +
                "			AND kitStatus = 'R'                   \n" +
                "			AND salesOrderDetID = pRefSalesOrderDetID                       \n" +
                "			AND refAssyId = pAssyID                   \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);                      \n" +
                "  \n" +
                "        IF(vPlanExists = 1 AND pIsReRelease = 0) THEN                      \n" +
                "		UPDATE 	salesorder_plan_detailsmst                            \n" +
                "		SET 	woID = pWOID,                             \n" +
                "			releasedNote = pDescription,                          \n" +
                "			updatedBy = pCreatedBy,                                  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime(),                            \n" +
                "			updateByRoleId = pCreateByRoleId                       \n" +
                "		WHERE 	id = pPlanDetID;                            \n" +
                "  \n" +
                "		SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isUpdateRelease;                    \n" +
                "	ELSE                       \n" +
                "		SET vIsReleaseKit = 1;                          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail                          \n" +
                "		( errorCode INT );                          \n" +
                "  \n" +
                "		-- get total plan count of main assembly                          \n" +
                "		SELECT COUNT(1) INTO vTotalPlan FROM salesorder_plan_detailsmst                           \n" +
                "		WHERE refAssyId = pAssyID AND subAssyID IS NULL AND isDeleted = 0;                          \n" +
                "  \n" +
                "		-- get released plan count based on selected assembly                          \n" +
                "		SELECT 	COUNT(1) INTO vReleasedPlan FROM salesorder_plan_detailsmst                           \n" +
                "		WHERE 	refAssyId = pAssyID                           \n" +
                "				AND 	(CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)                          \n" +
                "				AND 	kitStatus = 'R'                          \n" +
                "				AND 	isDeleted = 0;                          \n" +
                "  \n" +
                "		-- if release for last plan and if plan kit release qty and sales order kit qty is not match then restrict to release kit                           \n" +
                "		IF((vTotalPlan - vReleasedPlan) = 1) THEN                          \n" +
                "			SELECT 		(                  \n" +
                "						CASE                   \n" +
                "							WHEN (SUM(IFNULL(s.kitReleaseQty, 0)) != sd.kitQty OR SUM(IFNULL(s.poQty, 0)) != sd.qty) THEN                   \n" +
                "								0                   \n" +
                "							ELSE                   \n" +
                "								1                   \n" +
                "						END                  \n" +
                "					)                           \n" +
                "			INTO 		vIsReleaseKit                          \n" +
                "			FROM 		salesorder_plan_detailsmst s                          \n" +
                "			INNER JOIN 	salesorderdet sd ON s.salesOrderDetID = sd.id AND sd.partCategory=3                          \n" +
                "			WHERE  		s.salesOrderDetID  = pRefSalesOrderDetID AND s.refAssyId = pAssyID AND s.subAssyID IS NULL AND s.isdeleted = 0;                      \n" +
                "  \n" +
                "			-- ErrorCode 1: If kit qty and plan kit qty mismatch                          \n" +
                "			IF(vIsReleaseKit = 0) THEN                          \n" +
                "				INSERT INTO tempValidationDetail (errorCode) VALUES (1);                          \n" +
                "			END IF;                          \n" +
                "		END IF;                          \n" +
                "  \n" +
                "		IF(vIsReleaseKit = 0) THEN                           \n" +
                "			SELECT * FROM tempValidationDetail;                          \n" +
                "		ELSE                          \n" +
                "			-- set id for parent warehouse i.e. -1 for Main Material Warehouse and -2 for Main Production Warehouse                          \n" +
                "			-- SET vFromParentWarehouse = -1;                            \n" +
                "			-- SET vToParentWarehouse = -2;                            \n" +
                "			-- get feasibility of sub assembly at the time of release kit               \n" +
                "  \n" +
                "			SELECT 	(    \n" +
                "					CASE    \n" +
                "						WHEN connecterTypeID = -2 THEN    \n" +
                "							ROUND(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)), 8)                            \n" +
                "						ELSE    \n" +
                "							ROUND(MIN(allocatedunit/qpaWithDnp), 8)    \n" +
                "					END    \n" +
                "				)    \n" +
                "			INTO 	vFeasibilityWithAllocatedQty                            \n" +
                "			FROM 	vu_kit_allocation_detail                             \n" +
                "			WHERE 	refSalesorderdetid = pRefSalesOrderDetID                   \n" +
                "					AND assyID = IFNULL(pSubAssyID, pAssyID);                            \n" +
                "			-- get nickname of assembly selected for release kit which is used further to generate kit release number                          \n" +
                "			SELECT nickname INTO vNickname FROM component WHERE id = IFNULL(pSubAssyID, pAssyID);                            \n" +
                "  \n" +
                "			-- generate release kit number based on nickname i.e., <nickname>-<auto increment number which is left padded with 0 upto 5 digit>                          \n" +
                "			-- e.g., CA277-00001                          \n" +
                "			SELECT 		CONCAT(vNickname, '-', LPAD((COUNT(DISTINCT s.id) + 1), 5, \"0\"))  INTO vReleaseKitNumber                           \n" +
                "			FROM 		salesorder_plan_detailsmst s                          \n" +
                "			INNER JOIN 	component c ON s.subassyid = c.id OR s.refAssyId = c.id                          \n" +
                "			WHERE  		c.nickname = vNickname -- subAssyID = pSubAssyID                           \n" +
                "						AND s.kitStatus = 'R'                          \n" +
                "						AND s.isDeleted = 0;                          \n" +
                "  \n" +
                "			-- Release for sub assembly                          \n" +
                "			IF(pSubAssyID IS NOT NULL) THEN                            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSubAssyPlanDet;                            \n" +
                "  \n" +
                "				-- get qpa for sub assembly to calculate kit qty and PO qty                          \n" +
                "				SELECT  perAssyBuildQty                            \n" +
                "				INTO 	vSubAssyQPA                            \n" +
                "				FROM 	kit_allocation_assy_detail                            \n" +
                "				WHERE 	refSalesorderdetid = pRefSalesOrderDetID                            \n" +
                "						AND partId = pSubAssyID                            \n" +
                "						AND isDeleted = 0;                            \n" +
                "  \n" +
                "				-- For sub-assembly we will make entry for release plan based on main assembly plan                          \n" +
                "				INSERT INTO salesorder_plan_detailsmst                            \n" +
                "				(	salesOrderDetID, 				refAssyId, 			subAssyID, 		poQty, 						poDueDate, 				                            \n" +
                "					materialDockDate,				kitReleaseQty, 						mfrLeadTime, 				kitReleaseDate,                             \n" +
                "					plannKitNumber,                             \n" +
                "					actualKitReleaseDate, 			releasedBy, 		releaseTimeFeasibility, 					kitStatus, 		                            \n" +
                "					woID, 							refPlanId, 			releasedNote,	 releaseKitNumber,			isDeleted, 				                          \n" +
                "					createdAt,   					createdBy, 			updatedAt, 									updatedBy, 		                            \n" +
                "					createByRoleId, 				updateByRoleId                            \n" +
                "				)                            \n" +
                "				SELECT                             \n" +
                "					pRefSalesOrderDetID, 			pAssyID, 			pSubAssyID, 		(vSubAssyQPA * poQty), 	poDueDate, 				                            \n" +
                "					materialDockDate,				(vSubAssyQPA * kitReleaseQty), 			mfrLeadTime, 			kitReleaseDate,                             \n" +
                "					plannKitNumber,                             \n" +
                "					vActualKitReleaseDate, 	pCreatedBy, 		vFeasibilityWithAllocatedQty, 				'R', 		                            \n" +
                "					pWOID, 							pPlanDetID, 		pDescription,	vReleaseKitNumber,			0, 						                          \n" +
                "					fun_DatetimetoUTCDateTime(),   	pCreatedBy, 		fun_DatetimetoUTCDateTime(), 				pCreatedBy, 		                            \n" +
                "					pCreateByRoleId, 				pCreateByRoleId                            \n" +
                "				FROM 	salesorder_plan_detailsmst                            \n" +
                "				WHERE 	id = pPlanDetID;                           \n" +
                "  \n" +
                "                 # Update SalesOrderDet kitReleaseDate      \n" +
                "                /*IF(pPlanDetID = (SELECT MIN(id) FROM salesorder_plan_detailsmst WHERE salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID AND subAssyID = pSubAssyID AND isDeleted = 0)) THEN      \n" +
                "					UPDATE salesorderdet SET kitReleaseDate = vActualKitReleaseDate WHERE id = pRefSalesOrderDetID AND isDeleted = 0;      \n" +
                "                END IF;   */   \n" +
                "  \n" +
                "			-- Release for sub assembly                          \n" +
                "			ELSE   \n" +
                "				-- Update release detail for main assembly plan                          \n" +
                "				UPDATE salesorder_plan_detailsmst                            \n" +
                "				SET actualKitReleaseDate = vActualKitReleaseDate,                            \n" +
                "					releasedBy = pCreatedBy,                            \n" +
                "					releaseTimeFeasibility = vFeasibilityWithAllocatedQty,                            \n" +
                "					kitStatus = 'R',                            \n" +
                "					woID = pWOID,                             \n" +
                "					releasedNote = pDescription,                     \n" +
                "					kitReturnStatus = NULL,                  \n" +
                "					kitReturnDate = NULL,                  \n" +
                "					kitReturnBy = NULL,                  \n" +
                "					initiateReturnBy = NULL,                  \n" +
                "					initiateReturnAt = NULL,                       \n" +
                "					updatedBy = pCreatedBy,                                  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime(),                            \n" +
                "					updateByRoleId = pCreateByRoleId,                          \n" +
                "					releaseKitNumber = vReleaseKitNumber                          \n" +
                "				WHERE 	id = pPlanDetID;         \n" +
                "                # Update SalesOrderDet kitReleaseDate      \n" +
                "                /*IF(pPlanDetID = (SELECT MIN(id) FROM salesorder_plan_detailsmst WHERE salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID AND subAssyID IS NULL AND isDeleted = 0) ) THEN      \n" +
                "					UPDATE salesorderdet SET kitReleaseDate = vActualKitReleaseDate WHERE id = pRefSalesOrderDetID AND isDeleted = 0;      \n" +
                "                END IF;   */   \n" +
                "            END IF;                            \n" +
                "  \n" +
                "			-- Transfer inventory from Main Material Warehouse to Main Production Warehouse                          \n" +
                "			CALL Sproc_transfer_stock('Department Transfer', NULL, NULL, NULL ,NULL, NULL, pCreatedBy, pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), NULL, pToDeptId, 'M', NULL, NULL, NULL, NULL, NULL, NULL, 'Kit Transfer', 'Release Kit (Kit Allocation)', NULL, TRUE, pDescription, NULL, NULL);                            \n" +
                "		END IF;                      \n" +
                "        END IF;                          \n" +
                "	COMMIT;                                  \n" +
                "END;  \n" +
		        /* **************************** New Script -> 24-02-2021   *********************************** */
		        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		        "VALUES (740,'1.00','V1',' Kit Release issue on production server - Dharmishtha '," + userid + ", '" + requiredDet.ipAddress + "');"
	        );
	        break;
         case 740:
  allDbChangesArray.push(
  /* **************************** New Script ->26-02-2020  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRack` ;  \n" +
      "CREATE PROCEDURE `Sproc_RetrieveRack`(                                                            \n" +
      " IN ppageIndex INT,              \n" +
      " IN precordPerPage INT,              \n" +
      " IN pOrderBy VARCHAR(255),              \n" +
      " IN pWhereClause VARCHAR(16383),        \n" +
      " IN popstatus VARCHAR(50)                         \n" +
      ")  \n" +
      "BEGIN                                                           \n" +
      " DECLARE pOffset INT;              \n" +
      " DECLARE rowNumWhere VARCHAR(255);    \n" +
      " DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
      " DECLARE v_TimeZone VARCHAR(50);                  \n" +
      " SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
      " SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;               \n" +
      " SET @temp_Sproc_RetrieveRack = CONCAT(\"              \n" +
      "  SELECT  rack.id,               \n" +
      "   rack.name,               \n" +
      "   rack.isActive,   \n" +
      "   rack.woID,              \n" +
      "   wo.woNumber,  \n" +
      "   rack.woOPID,                \n" +
      "   FORMAT(woOP.opNumber, 3) AS opNumber,          \n" +
      "   woOP.opName,              \n" +
      "   fun_getUserNameByID(rack.updatedBy) updatedby,              \n" +
      "   fun_getUserNameByID(rack.createdBy) createdby,              \n" +
      "   fun_getRoleByID(rack.createByRoleId) createdbyRole,              \n" +
      "   fun_getRoleByID(rack.updateByRoleId) updatedbyRole,                 \n" +
      "   fun_ApplyCommonDateTimeFormatByParaValue(rack.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                              \n" +
      "   fun_ApplyCommonDateTimeFormatByParaValue(rack.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,        \n" +
      "   (              \n" +
      "    CASE              \n" +
      "     WHEN (rack.isActive = 0) THEN 'Inactive'              \n" +
      "     WHEN (rack.isActive = 1) THEN 'Active'              \n" +
      "     ELSE ''              \n" +
      "    END              \n" +
      "   ) AS isActiveConvertedValue,            \n" +
      "            rack.opStatus,            \n" +
      "            (            \n" +
      "    CASE            \n" +
      "     WHEN (rack.opStatus = 1) THEN 'Empty'            \n" +
      "                    WHEN (rack.opStatus = 2) THEN 'WIP'            \n" +
      "                    WHEN (rack.opStatus = 3) THEN 'Completed'            \n" +
      "                    ELSE ''            \n" +
      "    END            \n" +
      "            ) AS opStatusConvertedValue            \n" +
      "  FROM  rackmst AS rack              \n" +
      "  LEFT JOIN workorder as wo ON rack.woID = wo.woID              \n" +
      "  LEFT JOIN workorder_operation as woOP ON rack.woOPID = woOP.woOPID              \n" +
      "  WHERE  rack.isDeleted=0            \n" +
      " \");         \n" +
      " IF(popstatus IS NOT NULL AND popstatus!='')THEN        \n" +
      " SET @temp_Sproc_RetrieveRack=CONCAT(@temp_Sproc_RetrieveRack,' and rack.opStatus in (',popstatus,')');        \n" +
      " END IF;         \n" +
      "  \n" +
      " IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
      "  SET pOrderBy = \"ORDER BY name ASC\";              \n" +
      " ELSE              \n" +
      "  SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
      " END IF;              \n" +
      " IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
      "  SET pWhereClause = '1=1' ;              \n" +
      " END IF;              \n" +
      " IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN              \n" +
      "  SET pOffset = (ppageIndex -1) * precordPerPage;              \n" +
      "  SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
      " ELSE              \n" +
      "  SET rowNumWhere = '';              \n" +
      " END IF;              \n" +
      " SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveRack,\" ) c where 1=1 and \", pWhereClause);              \n" +
      " PREPARE query1 FROM @SQLStatement1;              \n" +
      " EXECUTE query1;              \n" +
      " DEALLOCATE PREPARE query1;              \n" +
      " SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveRack,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
      " PREPARE query2 FROM @SQLStatement2;              \n" +
      " EXECUTE query2;              \n" +
      " DEALLOCATE PREPARE query2;              \n" +
      "END;  \n" +
  /* **************************** New Script ->26-02-2020  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesorderDetails` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(	                              \n" +
      "	IN psoposearch LONGTEXT,                          \n" +
      "	IN salesorderID INT                          \n" +
      "    )  \n" +
      "BEGIN                           \n" +
      "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;                          \n" +
      "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS                          \n" +
      "       SELECT som.id FROM salesordermst som                   \n" +
      "     WHERE som.id IN                   \n" +
      "          (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN component c ON c.id=sd.partID AND c.isdeleted=0 WHERE                   \n" +
      "	       EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.isdeleted=0 AND sm.id=sd.refSalesOrderID) AND sd.isdeleted=0 AND c.partType IN (2,3)             \n" +
      "	       AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd                  \n" +
      "	                   WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0)) OR som.id=salesorderID;              \n" +
      "  \n" +
      " SET @pWhereClause=\"1=1\";                          \n" +
      "  \n" +
      " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"                          \n" +
      "	select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,        \n" +
      "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#`,so.customerID,so.billingAddressID,        \n" +
      "		so.termsID , so.shippingAddressID,                          \n" +
      "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,       \n" +
      "		so.poDate,        \n" +
      "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,		        \n" +
      "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,        \n" +
      "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,                         \n" +
      "		concat('(',m.mfgcode,')',' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,        \n" +
      "		m.mfgName,  \n" +
      "		so.status              \n" +
      "	from salesordermst so         \n" +
      "		join mfgcodemst m on m.id=so.customerID         \n" +
      "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");                          \n" +
      "  \n" +
      "  IF(salesorderID IS NOT NULL)THEN                          \n" +
      "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);                          \n" +
      "  END IF;                          \n" +
      "	IF(psoposearch IS NOT NULL)THEN                          \n" +
      "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");                          \n" +
      "	END IF;	                          \n" +
      "  \n" +
      "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);                              \n" +
      "  \n" +
      "	PREPARE query1 FROM @SQLStatement1;                                                      \n" +
      "	EXECUTE query1;                                                      \n" +
      "	DEALLOCATE PREPARE query1;                             \n" +
      "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;                    \n" +
      "END;  \n" +
  /* **************************** New Script ->26-02-2020  *********************************** */
  
  /* **************************** Add Script Version ->  *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
      "VALUES (741,'1.00','V1',' Bug 31002: [Main Branch] - Sales order and customer packing slip issues given by client.-Champak '," + userid + ", '" + requiredDet.ipAddress + "');"
  );
            break;
            case 741:
              allDbChangesArray.push(
              /* **************************** New Script -> 28-02-2021  *********************************** */
                  "DROP FUNCTION IF EXISTS `fun_checkUMIDVerificationRequire` ;  \n" +
                  "CREATE FUNCTION `fun_checkUMIDVerificationRequire`(        \n" +
                  "	passyID INT,    \n" +
                  "	pUMID VARCHAR(14),  \n" +
                  "	pFromFeeder INT) RETURNS VARCHAR(255) CHARSET utf8mb4  \n" +
                  "BEGIN        \n" +
                  "	DECLARE returnValue VARCHAR(255);       \n" +
                  "	DECLARE temp_umid_verify INT(11) DEFAULT 0;                        \n" +
                  "	DECLARE temp_assy_verify INT(11) DEFAULT 0;                        \n" +
                  "	DECLARE temp_assy_umid_verify INT(11) DEFAULT 0;      \n" +
                  "  \n" +
                  "	# step 0 - get assembly part details    \n" +
                  "	SELECT isAutoVerificationOfAllAssemblyParts, umidVerificationRequire     \n" +
                  "		INTO temp_assy_verify, temp_assy_umid_verify    \n" +
                  "		FROM COMPONENT WHERE id=passyID AND deletedAt IS NULL;    \n" +
                  "  \n" +
                  "	SELECT umidVerificationRequire INTO temp_umid_verify     \n" +
                  "		FROM COMPONENT WHERE id IN (SELECT refcompid FROM component_sid_stock WHERE uid=pUMID AND deletedAt IS NULL) AND deletedAt IS NULL;    \n" +
                  "  \n" +
                  "	SET returnValue = 1;     \n" +
                  "	-- IF From Feeder than only check with Assy Verification flow else check with UMID Verification Require only  \n" +
                  "	IF(pFromFeeder = 1) THEN  \n" +
                  "		-- IF AutoVerification from Assembly and Component Verification Require than    \n" +
                  "		-- AUTO (1), 	Verification Require(1) - Pending    \n" +
                  "		IF(temp_umid_verify = 1 AND temp_assy_verify = 1) THEN    \n" +
                  "			SET returnValue = 1;    \n" +
                  "		-- IF AutoVerification from Assembly and Component Verification not Require than    \n" +
                  "		-- AUTO (1), 	Verification Require(0) - Verified    \n" +
                  "		ELSEIF(temp_umid_verify = 0 AND temp_assy_verify = 1) THEN    \n" +
                  "			SET returnValue = 0;    \n" +
                  "		-- IF Manual Verification from Assembly and Component Verification Require than    \n" +
                  "		-- Manual (0), 	Verification Require(1) - Pending    \n" +
                  "		ELSEIF(temp_umid_verify = 1 AND temp_assy_verify = 0) THEN    \n" +
                  "			SET returnValue = 1;    \n" +
                  "		-- IF Manual Verification from Assembly and Component Verification not Require than    \n" +
                  "		-- Manual (0), 	Verification Require(0) - Pending    \n" +
                  "		ELSEIF(temp_umid_verify = 0 AND temp_assy_verify = 0) THEN    \n" +
                  "			SET returnValue = 1;    \n" +
                  "		END IF;	   \n" +
                  "	ELSE   \n" +
                  "		-- Component Verification Require than    \n" +
                  "		-- Verification Require(1) - Pending    \n" +
                  "		IF(temp_umid_verify = 1) THEN    \n" +
                  "			SET returnValue = 1;    \n" +
                  "		-- Component Verification not Require than    \n" +
                  "		-- Verification Require(0) - Verified    \n" +
                  "		ELSEIF(temp_umid_verify = 0) THEN    \n" +
                  "			SET returnValue = 0;    \n" +
                  "		END IF;	   \n" +
                  "	END IF;  \n" +
                  "	RETURN returnValue;        \n" +
                  "    END;  \n" +
                  /* **************************** Add Script Version ->  *********************************** */
                  "DROP PROCEDURE IF EXISTS `Sproc_ValidateScanFeederFirst` ;  \n" +
                  "CREATE PROCEDURE `Sproc_ValidateScanFeederFirst`(                                                                                                            \n" +
                  "	IN pfeederLocation VARCHAR(1000),                                                                      \n" +
                  "	IN pUMID VARCHAR(14),                                                                         \n" +
                  "	IN ppartID INT,                                                                              \n" +
                  "	IN pwoOpEqpID INT,                                                                              \n" +
                  "	IN pwoOpID INT,                                                                     \n" +
                  "	IN pwoTransID INT,                                                                      \n" +
                  "	IN pemployeeId INT,                                                                      \n" +
                  "	IN pcheckKitAllocation INT,                                                                      \n" +
                  "	IN pverificationType VARCHAR(255),                                                                      \n" +
                  "	IN pisVerify INT,                                                                      \n" +
                  "	IN ptransactionType VARCHAR(1),                                                                     \n" +
                  "	IN pisChangeReel INT,                                                                       \n" +
                  "	IN preelChangeType VARCHAR(100),                                                                     \n" +
                  "	IN ptoBinID INT,                                                                         \n" +
                  "	IN pOldUMID VARCHAR(14),                                                                            \n" +
                  "	IN pisConfirmed INT,                                                           \n" +
                  "	IN pwoID INT,                                                                \n" +
                  "	IN pCreatedBy VARCHAR(255)                                                                      \n" +
                  ")  \n" +
                  "BEGIN                                                  \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;                                                                        \n" +
                  "	DECLARE temp_comp_id INT;                                                                   \n" +
                  "	DECLARE temp_comp_uom INT;                                                       \n" +
                  "	DECLARE temp_rfqLineItemsID VARCHAR(100);                                                                        \n" +
                  "	DECLARE temp_lineID VARCHAR(100);                                                                       \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);                                                                        \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);                                                                         \n" +
                  "	DECLARE temp_eqpFeederID INT;                                                                         \n" +
                  "	DECLARE temp_comp_is_cpn INT DEFAULT 0;                                                                       \n" +
                  "	DECLARE uidVerified INT DEFAULT 0;                                                                      \n" +
                  "	DECLARE feederVerified INT DEFAULT 0;                                                                           \n" +
                  "	DECLARE temp_umid_comp_id INT;                                                                           \n" +
                  "	DECLARE temp_umid_pkgQty INT;                                                                        \n" +
                  "	DECLARE temp_umid_stock_id INT;                                                                       \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);                                                                    \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);                                                         \n" +
                  "	DECLARE temp_umid_package_id INT;                                                                       \n" +
                  "	DECLARE temp_old_umid_comp_id INT;                                                                       \n" +
                  "	DECLARE temp_old_umid_stock_id INT;                                                                        \n" +
                  "	DECLARE temp_old_umid_pkgQty INT;                                                                           \n" +
                  "	DECLARE temp_old_umid_pkgUnit INT;                                                                      \n" +
                  "	DECLARE temp_old_umid_pkgUOM INT;                                                                        \n" +
                  "	DECLARE temp_eqp_wh_id INT;                                                                                \n" +
                  "	DECLARE temp_eqp_bin_id INT;                                                                          \n" +
                  "	DECLARE temp_eqp_wh_name VARCHAR(100);                                                                  \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);                                               \n" +
                  "	DECLARE temp_salesOrderDetID VARCHAR(100);   	                                                                    \n" +
                  "	DECLARE flag_isFeederTransExists INT  DEFAULT 0;                                                                         \n" +
                  "	DECLARE valid_umid_transfer INT  DEFAULT 0;                                                                          \n" +
                  "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);                                                               \n" +
                  "	DECLARE flag_tempVerificationRequire INT  DEFAULT 0;                                                                              \n" +
                  "	DECLARE temp_json_object VARCHAR(100);                                                                         \n" +
                  "	DECLARE temp_last_inserted_umid_id INT ;                   \n" +
                  "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;      \n" +
                  "    DECLARE temp_checkKitAllocation VARCHAR(50);      \n" +
                  "    DECLARE temp_continue TINYINT DEFAULT 0;      \n" +
                  "  \n" +
                  "	SET temp_eqp_wh_id = NULL;                                                                    \n" +
                  "	SET temp_eqp_bin_id = NULL;                                                                   \n" +
                  "	SET temp_eqp_wh_name = NULL;                                                                   \n" +
                  "	SET temp_all_mfg_id_lineID = NULL;                                                                             \n" +
                  "  \n" +
                  "  \n" +
                  "	-- create temporary table for error                                                                        \n" +
                  "		DROP TEMPORARY TABLE IF EXISTS temp_scan_error;                                                                         \n" +
                  "		CREATE TEMPORARY TABLE temp_scan_error                                                                        \n" +
                  "		(                                                                        \n" +
                  "			 errorText VARCHAR(2000),                                                                        \n" +
                  "			 isFeederError INT,                                                                      \n" +
                  "			 isUMIDError INT,                                                                      \n" +
                  "			 isConfirmation INT,                                                                       \n" +
                  "			 isMessage INT,                                                                       \n" +
                  "			 isInformation INT,                                                                       \n" +
                  "			 stringText1 VARCHAR(1000),                                                                       \n" +
                  "			 stringText2 VARCHAR(1000),                                                                       \n" +
                  "			 stringText3 VARCHAR(1000)                                                                       \n" +
                  "		);                                                                      \n" +
                  "  \n" +
                  "		DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;                                                              \n" +
                  "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;                                                 \n" +
                  "  \n" +
                  "        IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 1) > 0) THEN                                                \n" +
                  "			SET flag_tempVerificationRequire = 1;                                                \n" +
                  "        END IF;      \n" +
                  "  \n" +
                  "		SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo      \n" +
                  "		FROM workorder wo       \n" +
                  "		WHERE wo.woID = pwoID      \n" +
                  "		AND wo.isDeleted = 0;      \n" +
                  "  \n" +
                  "	# Step 1 - check feeder is valid or not for scanned details and return pid details                                                                       \n" +
                  "	IF ((fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, pisChangeReel) > 0)) THEN                                                     \n" +
                  "		SELECT id, rfqLineItemsID, partID, eqpFeederID, lineID, pidcode, uom, mfgPN, isCPN                                                                       \n" +
                  "		INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_eqpFeederID, temp_lineID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn                                                                     \n" +
                  "		FROM temp_feeder_details;                                                                   \n" +
                  "		-- removed due to allow verification multiple times                                                    \n" +
                  "		-- IF(pisChangeReel <> 1 AND pisVerify = 1) THEN                                                            \n" +
                  "		-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);                                                                      \n" +
                  "		-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN                                                                      \n" +
                  "		-- 		IF(flag_isFeederTransExists = 0) THEN                                                                      \n" +
                  "		-- 			-- FAILED                                                                 \n" +
                  "		-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);                                                                                         \n" +
                  "		-- 		END IF;                                                              \n" +
                  "		-- 	END IF;                                                              \n" +
                  "		-- ELSE                                                             \n" +
                  "			IF (pUMID IS NOT NULL) THEN                                                              \n" +
                  "				-- select concat('select fun_checkUMIDScan(',pUMID,',',ppartID,',',pwoTransID,',',pwoOpID,',',pemployeeId,',',pcheckKitAllocation,',','',',','',',',ptransactionType,',','1',',',pisVerify,',',pwoOpEqpID,',',pfeederLocation,',',pCreatedBy,')');                                                \n" +
                  "				IF flag_kit_allocation_not_required_wo = 1 THEN      \n" +
                  "					SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';      \n" +
                  "				ELSE      \n" +
                  "					SET temp_checkKitAllocation = pcheckKitAllocation;      \n" +
                  "				END IF;      \n" +
                  "				IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN                                                                                     \n" +
                  "					SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId                                        \n" +
                  "					-- , refSalesOrderDetID                                                  \n" +
                  "					INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id                                       \n" +
                  "					-- , temp_salesorderdetID                                                                                \n" +
                  "					FROM temp_umid_details;                                                             \n" +
                  "					#check umid id pid is allocated to same line id in bill of material                                                                      \n" +
                  "					#yes - check for kit allocation of UMID                                                                      \n" +
                  "					#no - Suggest location for scan UMID                                \n" +
                  "					-- select concat('select fun_checkKitAllocation(',IFNULL(pUMID,0),',',IFNULL(pwoID,0),',',IFNULL(pwoOPID,0),',',IFNULL(pwoTransID,0),',',IFNULL(temp_eqpFeederID,0),',',IFNULL(temp_umid_comp_id,0),',',IFNULL(temp_umid_package_id,0),',',IFNULL(pcheckKitAllocation,0),',',IFNULL(pisConfirmed,0),'1',','')');                                                \n" +
                  "  \n" +
                  "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                            \n" +
                  "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'                                            \n" +
                  "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd                                             \n" +
                  "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN                                            \n" +
                  "							-- ALLOCATED                                      \n" +
                  "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);                                       \n" +
                  "					ELSE      \n" +
                  "						#in case validate UMID without Kit set true at WO      \n" +
                  "                        #select 'Line 134',flag_kit_allocation_not_required_wo ;      \n" +
                  "						IF flag_kit_allocation_not_required_wo = 1 THEN    \n" +
                  "							IF ((SELECT COUNT(1) FROM temp_assy_part_list                                                         \n" +
                  "																WHERE mfgPNID = temp_umid_comp_id                                                        \n" +
                  "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld                                     \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                \n" +
                  "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld                                     \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN      \n" +
                  "									-- WRONG_LOCATION                                                                 \n" +
                  "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);      \n" +
                  "                               ELSE          \n" +
                  "									SET temp_continue = 1;  							    \n" +
                  "                               END IF;         \n" +
                  "						ELSEIF (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN                                                        				      \n" +
                  "							SET temp_continue = 1;      \n" +
                  "                        ELSE           \n" +
                  "							SET temp_continue = 0;      \n" +
                  "                        END IF;      \n" +
                  "                       # select 'Line 142',temp_continue, pisVerify , pfeederLocation,temp_eqp_wh_id ;      \n" +
                  "                        IF temp_continue = 1 THEN      \n" +
                  "							#check part belongs to multiple line                                               \n" +
                  "							#yes - check for umid and feeder component must be same                                              \n" +
                  "							#no - check for restrict part                                              \n" +
                  "							#no - allow to scan details                                              \n" +
                  "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld                                                                             \n" +
                  "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN                               \n" +
                  "								-- INVALID                                                                                              \n" +
                  "								SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                   \n" +
                  "							-- fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID)                                                              \n" +
                  "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN                                        			      \n" +
                  "								SET result = 0;                                     \n" +
                  "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN                                                   \n" +
                  "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                  \n" +
                  "							ELSE           \n" +
                  "								# if feeder details and umid details are valid than give umid qty details on screen                                                                      \n" +
                  "								# insert transaction details for fedder first and umid validate details in  workorder_trans_umid_details                                                                      \n" +
                  "								-- verify flag                                                          \n" +
                  "								IF (pisVerify <> 1) THEN                                                      \n" +
                  "									# Get Equipment/WareHouse ID from pwoOpEqpID                                   \n" +
                  "									IF ((pwoOpEqpID IS NOT NULL) AND       \n" +
                  "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1 ) THEN                                                                \n" +
                  "										SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst                                                                \n" +
                  "										WHERE refEqpID IN (                                                                \n" +
                  "											SELECT woe.eqpID FROM workorder_operation_equipment woe                                                                 \n" +
                  "											WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL                                                                \n" +
                  "										) AND whmst.deletedAt IS NULL;                                                                \n" +
                  "  \n" +
                  "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN                                                                \n" +
                  "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL                                                                 \n" +
                  "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;                                                                \n" +
                  "										END IF;                                                             \n" +
                  "										IF (temp_eqp_bin_id IS NOT NULL) THEN                                                          \n" +
                  "											IF(flag_tempVerificationRequire = 0) THEN -- verification not require                                                 \n" +
                  "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details                                                                     \n" +
                  "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'                                                 \n" +
                  "													AND refsidid = temp_umid_stock_id                                                                    \n" +
                  "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID                                                               \n" +
                  "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID                                                 \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld                                                   \n" +
                  "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                                  \n" +
                  "													AND reelStatus=\"P\" AND deletedAt IS NULL                                        \n" +
                  "													AND woOPID = pwoOpID;                                                                    \n" +
                  "  \n" +
                  "												IF(temp_feeder_transID > 0) THEN                                              \n" +
                  "													-- FAILED                                                    \n" +
                  "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                \n" +
                  "												ELSE                                               \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                             \n" +
                  "														NULL,temp_eqp_bin_id, temp_umid_stock_id,                                                             \n" +
                  "														pCreatedBy, NULL, NULL,                                                             \n" +
                  "														NULL, NULL, NULL, NULL,                                                            \n" +
                  "														NULL, NULL, NULL, NULL, NULL,                              \n" +
                  "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,                              \n" +
                  "														0,NULL,NULL,NULL);                                                                        \n" +
                  "  \n" +
                  "													INSERT INTO workorder_trans_umid_details                                                          \n" +
                  "														(`woTransID`,`eqpFeederID`,`refsidid`,                                                          \n" +
                  "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                          \n" +
                  "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                      \n" +
                  "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`)                                                           \n" +
                  "													VALUES                                                          \n" +
                  "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,                                                           \n" +
                  "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,                                                          \n" +
                  "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,                                                         \n" +
                  "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\");                                                      \n" +
                  "  \n" +
                  "													-- VERIFIED                                                          \n" +
                  "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                       \n" +
                  "													SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                   \n" +
                  "													SET valid_umid_transfer = 1;                                               \n" +
                  "												END IF;                                               \n" +
                  "											ELSE                                              \n" +
                  "												-- transfer umid to bin                                                          \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                                 \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,                                                                 \n" +
                  "													pCreatedBy, NULL, NULL,                                                                 \n" +
                  "													NULL, NULL, NULL, NULL,                                                                \n" +
                  "													NULL, NULL, NULL, NULL, NULL,                               \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,                              \n" +
                  "													0,NULL,NULL,NULL);                                                                 \n" +
                  "  \n" +
                  "												-- add umid transaction details                                                          \n" +
                  "												INSERT INTO workorder_trans_umid_details                                                                      \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,                                                                      \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                                      \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                                       \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`)                                                                       \n" +
                  "												VALUES                                                                      \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,                                                                       \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,                                                                      \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,                                                                   \n" +
                  "													pCreatedBy, pCreatedBy, \"P\");                                                              \n" +
                  "  \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                       \n" +
                  "												SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                             \n" +
                  "												SET valid_umid_transfer = 1;                                                 \n" +
                  "											END IF;                                                            \n" +
                  "										ELSE                                                             \n" +
                  "											-- WRONG_LOCATION                                                                                         \n" +
                  "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                                \n" +
                  "										END IF;                                                            \n" +
                  "									ELSE 	                                    \n" +
                  "										SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                    \n" +
                  "									END IF;                                                                  \n" +
                  "  \n" +
                  "									SET uidVerified = 1;                                                                      \n" +
                  "								ELSE                                                        \n" +
                  "									-- If change reel and old umid details                                                          \n" +
                  "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN                                                   \n" +
                  "										-- check workorder operation equipment id and kit allocated or not while change reel                                    \n" +
                  "										-- get component details based on old umid                                                          \n" +
                  "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom                                                          \n" +
                  "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM                                                          \n" +
                  "											FROM component_sid_stock css                                                           \n" +
                  "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;                                                           \n" +
                  "  \n" +
                  "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud                                                                       \n" +
                  "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'                                                           \n" +
                  "											AND wtud.refsidid=temp_old_umid_stock_id                                                           \n" +
                  "												AND wtud.mfgPNID=temp_old_umid_comp_id                                                          \n" +
                  "												AND wtud.woOpEqpID=pwoOPEqpID                                                                 \n" +
                  "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID                                                           \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld                                                           \n" +
                  "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                                  \n" +
                  "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL                                        \n" +
                  "											AND woOPID = pwoOpID;                                                           \n" +
                  "  \n" +
                  "									-- If not change reel than check for reel transaction is done or not                                                          \n" +
                  "									ELSEIF(pisChangeReel <> 1) THEN                                                          \n" +
                  "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud                                                                      \n" +
                  "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND transactionType='F'                                                           \n" +
                  "											AND wtud.refsidid = temp_umid_stock_id                                                                     \n" +
                  "												AND wtud.mfgPNID=temp_umid_comp_id                                                          \n" +
                  "												AND wtud.woOpEqpID=pwoOPEqpID                                                                 \n" +
                  "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID                                                           \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld                                                           \n" +
                  "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                                  \n" +
                  "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL                                         \n" +
                  "											AND wtud.woOPID = pwoOpID;                                        \n" +
                  "											-- AND isVerified=0;                                                           \n" +
                  "									END IF;                                                          \n" +
                  "  \n" +
                  "									-- if not change reel than update verify flag for verfiy true                                                          \n" +
                  "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN                                                                     \n" +
                  "										UPDATE workorder_trans_umid_details                                                                      \n" +
                  "										SET isVerified=1,                                                                      \n" +
                  "										verifiedBy=pemployeeId,                                                                      \n" +
                  "										verifiedOn=fun_DatetimetoUTCDateTime()                                                                      \n" +
                  "										WHERE id=temp_feeder_transID;                                           \n" +
                  "  \n" +
                  "										SET temp_last_inserted_umid_id = temp_feeder_transID;                                                                 \n" +
                  "  \n" +
                  "										-- VERIFIED                                                             \n" +
                  "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                                        \n" +
                  "										SET uidVerified = 1;                                                              \n" +
                  "  \n" +
                  "									-- if change reel than update verify flag for verfiy true	                                                                    \n" +
                  "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN                                                            \n" +
                  "										-- check workorder operation equipment id and kit allocated or not while change reel                                    \n" +
                  "										IF ((pwoOpEqpID IS NOT NULL) AND       \n" +
                  "											( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN                                                                \n" +
                  "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst                                                                \n" +
                  "											WHERE whmst.refEqpID IN (                                                                \n" +
                  "												SELECT woe.eqpID FROM workorder_operation_equipment woe                                                                \n" +
                  "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL                                                                \n" +
                  "											) AND whmst.deletedAt IS NULL;                                     \n" +
                  "  \n" +
                  "											-- check feeder location and warehouse is valid than allow to do changes reel                                    \n" +
                  "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN                                                                \n" +
                  "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL                                                                 \n" +
                  "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;                                                                \n" +
                  "											END IF;                                                              \n" +
                  "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN                                                            \n" +
                  "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM                                                          \n" +
                  "												IF (preelChangeType = \"ZeroOut\") THEN                                                \n" +
                  "														-- Added for multiple kit                                        \n" +
                  "													SET temp_json_object = CONCAT('[{\\\"id\\\":',                                                            \n" +
                  "														(SELECT id FROM kit_allocation ka                                                           \n" +
                  "															WHERE ka.refSalesOrderDetID IN                                         \n" +
                  "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)                                         \n" +
                  "																FROM workorder_salesorder_details wsd                                                               \n" +
                  "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)                                                           \n" +
                  "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),                                                            \n" +
                  "														',\\\"returnQty\\\":',0,                                                            \n" +
                  "														',\\\"returnUnit\\\":',0,                                                            \n" +
                  "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,                                                            \n" +
                  "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,                                                            \n" +
                  "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');                                                          \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                             \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,                 \n" +
                  "														pCreatedBy, NULL, NULL,                 \n" +
                  "														NULL, NULL, NULL, 0,                                                             \n" +
                  "														0, NULL, NULL, temp_json_object, preelChangeType,                              \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType)              \n" +
                  "														,pwoTransID,                              \n" +
                  "														1,NULL,NULL,NULL);                                                           \n" +
                  "												ELSE                                                           \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                             \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,                                                             \n" +
                  "														pCreatedBy, NULL, NULL,                                                             \n" +
                  "														NULL, NULL, NULL, NULL,                                                            \n" +
                  "														NULL, NULL, NULL, NULL, NULL,                               \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,                              \n" +
                  "														0,NULL,NULL,NULL);                                                           \n" +
                  "												END IF;                                                          \n" +
                  "												SET valid_umid_transfer = 1;                                                               \n" +
                  "  \n" +
                  "												-- update old record toumid                                                          \n" +
                  "												UPDATE workorder_trans_umid_details                                                                      \n" +
                  "												SET toRefUIDId=temp_umid_stock_id                                                              \n" +
                  "												WHERE id=temp_feeder_transID;                                       \n" +
                  "  \n" +
                  "												SET temp_last_inserted_umid_id = temp_feeder_transID;                                                           \n" +
                  "  \n" +
                  "												-- transfer umid to bin                      	                                    \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                             	                                    \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,                             	                                    \n" +
                  "													pCreatedBy, NULL, NULL,                             	                                    \n" +
                  "													NULL, NULL, NULL, NULL,                            	                                    \n" +
                  "													NULL, NULL, NULL, NULL, NULL,                                \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,                              \n" +
                  "													0,NULL,NULL,NULL);                                    \n" +
                  "  \n" +
                  "												-- SELECT pwoTransID;                                                  \n" +
                  "												-- insert new umid for workorder equipment feeder                                                          \n" +
                  "												INSERT INTO workorder_trans_umid_details                                                                      \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,                                                                      \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                                      \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                                       \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`)                                                                       \n" +
                  "												VALUES                                                                      \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,                                                                       \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,                                                                      \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,                                                                   \n" +
                  "													pCreatedBy, pCreatedBy, \"P\");                                           \n" +
                  "  \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                       \n" +
                  "												-- UMID SCANNED	                                        \n" +
                  "												SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                     \n" +
                  "											ELSE                                                             \n" +
                  "												-- WRONG_LOCATION                                                                            \n" +
                  "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                                                        \n" +
                  "											END IF;                                     \n" +
                  "										ELSE 	                                    \n" +
                  "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                             \n" +
                  "										END IF;                                                             \n" +
                  "									ELSE                                                     \n" +
                  "										-- FAILED                                                                        \n" +
                  "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);                                                                 \n" +
                  "									END IF;                                                             \n" +
                  "								END IF;                                                                     \n" +
                  "							END IF;                               \n" +
                  "						END IF;      \n" +
                  "  \n" +
                  "                    END IF;                                                                   \n" +
                  "				END IF;                                 \n" +
                  "				-- SELECT IFNULL(COUNT(1),0) FROM kit_allocation WHERE uid = pUMID AND assyID=ppartID AND refBOMLineID IN (SELECT rfqLineItemsID FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details WHERE uid=pUMID))) > 0		                                                                \n" +
                  "			ELSE                                                                 \n" +
                  "				# if feeder details are valid than give PID Details on screen                                                                      \n" +
                  "				SET feederVerified = 1;                                                                      \n" +
                  "				-- SELECT * FROM temp_feeder_details;                                                                      \n" +
                  "			END IF;                                                            \n" +
                  "		-- END IF;     -- removed due to allow verification multiple times                                                              \n" +
                  "	END IF;                                                                       \n" +
                  "	INSERT INTO `uid_verification_history`(                                                                          \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,                                                                          \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                                                          \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,		                                                                             \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,                                                                       \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)                                                                          \n" +
                  "	VALUES (                                                                      \n" +
                  "		pfeederLocation, 					CASE WHEN (pUMID IS NULL) THEN '' ELSE pUMID END, 	temp_comp_id,                                                                      \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_comp_id),		temp_mfgpn, 						temp_umid_comp_id,                                                                      \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),	temp_umid_mfgPN,					CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                                                      \n" +
                  "		0,							IFNULL(pCreatedBy,''),					fun_DatetimetoUTCDateTime(),                                                                        \n" +
                  "		pwoTransID, 						pwoOpEqpID,						pverificationType                                                                      \n" +
                  "	);                                                                      \n" +
                  "  \n" +
                  "	#1. return history of umid transfer	                                                                \n" +
                  "	IF(valid_umid_transfer = 0) THEN					                                                                      \n" +
                  "		SELECT id FROM kit_allocation WHERE 1=0;                                                                 \n" +
                  "	END IF;                                                                \n" +
                  "  \n" +
                  "	#2. return history of verification					                                                                      \n" +
                  "        SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();                                                                      \n" +
                  "  \n" +
                  "        #3. return error                                                                      \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');                                                                      \n" +
                  "  \n" +
                  "	#4. return umid details                                                                  \n" +
                  "	-- IF (uidVerified=1) THEN                                                                    \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details                                                                \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;                                                                \n" +
                  "	SELECT * FROM temp_umid_details;                                                                \n" +
                  "	-- END IF;                                                                    \n" +
                  "  \n" +
                  "	#5. return feeder details                                                                  \n" +
                  "	-- IF (feederVerified=1) THEN                                                                        \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details                                                                \n" +
                  "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;                                                                      \n" +
                  "	SELECT * FROM temp_feeder_details;                                                                       \n" +
                  "	-- END IF;                                                                   \n" +
                  "  \n" +
                  "	#6. return allocated UMID details                                                                \n" +
                  "	IF (pOldUMID IS NULL AND feederVerified=1) THEN                                            \n" +
                  "		-- select '1';                                          \n" +
                  "		SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd                                                               \n" +
                  "		WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;                                                                \n" +
                  "  \n" +
                  "		IF (temp_comp_is_cpn = 0) THEN                                \n" +
                  "			SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID                                               \n" +
                  "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID                                                       \n" +
                  "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld                                                   \n" +
                  "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);                                                \n" +
                  "		ELSE                                 \n" +
                  "			SELECT GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID                                               \n" +
                  "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID                                                       \n" +
                  "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld                                                   \n" +
                  "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);                                                \n" +
                  "		END IF;                                \n" +
                  "  \n" +
                  "		-- select concat('CALL Sproc_GetStockAllocateList (',temp_salesOrderDetID,',',ppartID,',',temp_all_mfg_id_lineID,',',temp_comp_uom,',',CAST(temp_rfqLineItemsID AS CHAR(255)),',','AllocatedStock',');');                                \n" +
                  "		CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");                                        \n" +
                  "	ELSE                                                                \n" +
                  "		SELECT woSalesOrderDetID FROM workorder_salesorder_details                                                                 \n" +
                  "		WHERE 1=0;                                                                \n" +
                  "	END IF;                                         \n" +
                  "  \n" +
                  "	#7 return last inserted/updated records for umid transaction                                      \n" +
                  "	SELECT temp_last_inserted_umid_id;                                      \n" +
                  "END;  \n" +
                  /* **************************** Add Script Version ->  *********************************** */
                  "DROP PROCEDURE IF EXISTS `Sproc_validateScanMissingUMIDOnly` ;  \n" +
                  "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(                                                      \n" +
                  "	IN pUMID VARCHAR(14),                                                     \n" +
                  "	IN ppartID INT,                                                  \n" +
                  "	IN pwoOpID INT,                                                       \n" +
                  "	IN pwoTransID INT,                                                    \n" +
                  "	IN pemployeeId INT,                                                    \n" +
                  "	IN pcheckKitAllocation INT,                                                    \n" +
                  "	IN pverificationType VARCHAR(255),                                                    \n" +
                  "	IN pisVerify INT,                                                       \n" +
                  "	IN ptransactionType VARCHAR(1),                                             \n" +
                  "	IN prfqLineItemsID INT,                                           \n" +
                  "	IN pisConfirmed INT,                                            \n" +
                  "	IN pwoID INT,                       \n" +
                  "	IN pisPlacementTracking INT,                                          \n" +
                  "	IN psaveUMIDDetails INT,                                             \n" +
                  "	IN prefDesig VARCHAR(3000),                                          \n" +
                  "	IN passyQty INT  ,          \n" +
                  "    IN pConsumeQty INT,          \n" +
                  "    IN pUMIDAllocateStatus INT,          \n" +
                  "    IN pCreatedBy VARCHAR(255),             \n" +
                  "    IN pCreateByRoleId INT          \n" +
                  ")  \n" +
                  "BEGIN                                           \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;                                                              \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);                                                      \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);                                                    \n" +
                  "	DECLARE uidVerified INT DEFAULT 0;                                                     \n" +
                  "	DECLARE temp_umid_comp_id INT;                                                     \n" +
                  "	DECLARE temp_umid_stock_id INT;                                                    \n" +
                  "	DECLARE temp_umid_pkgQty INT;                                                    \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);                                                   \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);                                                 \n" +
                  "	DECLARE temp_umid_package_id INT;                                               \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);                                                               \n" +
                  "	DECLARE temp_last_inserted_umid_id INT;                                                    \n" +
                  "	DECLARE flag_isFeederTransExists INT DEFAULT 0;                                                      \n" +
                  "	DECLARE flag_tempVerificationRequire INT DEFAULT 0;                                                                 \n" +
                  "	DECLARE flag_tempLineCount INT DEFAULT 0;                                           \n" +
                  "	DECLARE tot_stock_umid INT DEFAULT 0;          \n" +
                  "    DECLARE allocated_stock_umid INT DEFAULT 0 ;          \n" +
                  "    DECLARE kit_qty INT DEFAULT 0 ;          \n" +
                  "    DECLARE temp_salesorder_detID INT ;          \n" +
                  "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;        \n" +
                  "    DECLARE vParentWoId INT;    \n" +
                  "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit          \n" +
                  "	-- create temporary table for error                                                      \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;                                                       \n" +
                  "	CREATE TEMPORARY TABLE temp_scan_error                                                      \n" +
                  "	(                                                      \n" +
                  "	     errorText VARCHAR(2000),                                                     \n" +
                  "	     isFeederError INT,                                                    \n" +
                  "	     isUMIDError INT,                                                    \n" +
                  "	     isConfirmation INT,                                                     \n" +
                  "	     isMessage INT,                                                     \n" +
                  "	     isInformation INT,                                                     \n" +
                  "	     stringText1 VARCHAR(1000),                                                     \n" +
                  "	     stringText2 VARCHAR(1000),                                                     \n" +
                  "	     stringText3 VARCHAR(1000)                                                                                          \n" +
                  "	);                                  \n" +
                  "		#Get parent WO ID in case of revise  work order.    \n" +
                  "		WITH RECURSIVE RevWo AS  (    \n" +
                  "			SELECT	woId,					    \n" +
                  "					1 lvl  ,    \n" +
                  "					terminateWOID    \n" +
                  "			FROM workorder     \n" +
                  "			WHERE woId = pwoID    \n" +
                  "			AND isDeleted = 0    \n" +
                  "			UNION ALL    \n" +
                  "			SELECT	wo.woID,					    \n" +
                  "					rw.lvl +1 lvl,    \n" +
                  "					wo.terminateWOID    \n" +
                  "			 FROM workorder wo          \n" +
                  "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID    \n" +
                  "			 WHERE wo.isDeleted = 0	    \n" +
                  "			 )     \n" +
                  "			SELECT rev.woID  INTO vParentWoId    \n" +
                  "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;    \n" +
                  "  \n" +
                  "		#Check for kit allocation flag from BOM Line         \n" +
                  "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck        \n" +
                  "		FROM rfq_lineitems rli         \n" +
                  "		WHERE rli.id = prfqLineItemsID                \n" +
                  "        AND rli.isDeleted = 0 ;        \n" +
                  "  \n" +
                  "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);        \n" +
                  "  \n" +
                  "		#CHeck Only BOM Part allowed        \n" +
                  "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla         \n" +
                  "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock         \n" +
                  "											WHERE uid = pUMID AND isDeleted = 0 )        \n" +
                  "				AND rla.isDeleted = 0) = 0 THEN        \n" +
                  "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                       \n" +
                  "        END IF;                \n" +
                  "	# umid transaction details based on umid                            \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;                                  \n" +
                  "  \n" +
                  "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN                                        \n" +
                  "		SET flag_tempVerificationRequire = 1;                                        \n" +
                  "	END IF;                                        \n" +
                  "  \n" +
                  "	# Step 1 - check feeder is valid or not for scanned details and return pid details                                                     \n" +
                  "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');                                                \n" +
                  "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN                                                 \n" +
                  "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId                                                     \n" +
                  "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id                                                \n" +
                  "		FROM temp_umid_details;                                              \n" +
                  "  \n" +
                  "  \n" +
                  "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                         \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details); 		              \n" +
                  "		IF(flag_tempLineCount = 1) THEN              \n" +
                  "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list                                         \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                      \n" +
                  "		END IF;              \n" +
                  "  \n" +
                  "		IF(prfqLineItemsID IS NOT NULL) THEN                   \n" +
                  "			UPDATE temp_umid_details tud               \n" +
                  "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL               \n" +
                  "			AND id = prfqLineItemsID)              \n" +
                  "			WHERE tud.refsidid=temp_umid_stock_id;               \n" +
                  "  \n" +
                  "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                         \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                         \n" +
                  "			AND rfqLineItemsID = prfqLineItemsID;                \n" +
                  "		END IF;            \n" +
                  "  \n" +
                  "  \n" +
                  "        #step -2 Already  Allocated in Given KIT of same WO            \n" +
                  "        IF (pUMIDAllocateStatus = 0 ) THEN			        \n" +
                  "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))            \n" +
                  "            INTO kit_qty          \n" +
                  "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID          \n" +
                  "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )          \n" +
                  "			AND STATUS = 'A';          \n" +
                  "  \n" +
                  "            IF kit_qty > 0 THEN          \n" +
                  "				IF  kit_qty >= pConsumeQty THEN 				          \n" +
                  "					SET pUMIDAllocateStatus = 1 ;          \n" +
                  "				ELSEIF kit_qty < pConsumeQty THEN               \n" +
                  "					SET pUMIDAllocateStatus = 2 ;                          \n" +
                  "				END IF ;            \n" +
                  "                #SELECT 'LINE 122' , pUMIDAllocateStatus;        \n" +
                  "            ELSE           \n" +
                  "				SELECT SUM(css.pkgQty) INTO tot_stock_umid           \n" +
                  "				FROM component_sid_stock AS css          \n" +
                  "				WHERE css.uid = pUMID           \n" +
                  "				AND css.isDeleted = 0;           \n" +
                  "  \n" +
                  "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid          \n" +
                  "				FROM kit_allocation AS ka_all          \n" +
                  "				WHERE ka_all.uid = pUMID           \n" +
                  "				AND  ka_all.status IN ('A','R')          \n" +
                  "				GROUP BY ka_all.uid ;          \n" +
                  "  \n" +
                  "				#step - 3 Check Un-Allocated  stock available or not           \n" +
                  "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN 								          \n" +
                  "					SET pUMIDAllocateStatus = 3;           \n" +
                  "					#allocate kit from un allocated stock          \n" +
                  "				END IF;                      \n" +
                  "                #SELECT 'LINE 139' , pUMIDAllocateStatus;        \n" +
                  "            END IF;                     \n" +
                  "        END IF;          \n" +
                  "        #SELECT 'LINE 142' , pUMIDAllocateStatus;        \n" +
                  "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate            \n" +
                  "  \n" +
                  "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN              \n" +
                  "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN              \n" +
                  "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);              \n" +
                  "					SET uidVerified = 1;               \n" +
                  "				ELSE               \n" +
                  "					SET uidVerified = 0;               \n" +
                  "					SET result = 0;              \n" +
                  "				END IF;                 \n" +
                  "			ELSE                \n" +
                  "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN                                 \n" +
                  "					SET result = 0;                \n" +
                  "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN                                    \n" +
                  "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                    \n" +
                  "				ELSE              \n" +
                  "						#take first sales order default in case of multiple sales order          \n" +
                  "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs          \n" +
                  "						INTO temp_salesorder_detID          \n" +
                  "						FROM  workorder_salesorder_details          \n" +
                  "						WHERE woID = IFNULL(vParentWoId,pwoID)    \n" +
                  "						AND isDeleted = 0          \n" +
                  "						LIMIT 1;					          \n" +
                  "					-- check verification required                                              \n" +
                  "					-- than verification require than check from which page scan/verify                                        \n" +
                  "					IF(flag_tempVerificationRequire = 0) THEN -- verification not require                                          \n" +
                  "						-- if scan option selected than check for already scanned in flow first                                         \n" +
                  "						-- if not scanned than add as verified umid directly                                        \n" +
                  "						IF(pisVerify <> 1) THEN                                        \n" +
                  "							SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details                                                               \n" +
                  "							WHERE transactionType='U'                                           \n" +
                  "							AND refsidid = temp_umid_stock_id                                                              \n" +
                  "							AND mfgPNID=temp_umid_comp_id                                                      \n" +
                  "							AND reelStatus=\"C\" AND deletedAt IS NULL                              \n" +
                  "							AND woOPID = pwoOpID                            \n" +
                  "							AND employeeID=pemployeeId;                     \n" +
                  "							-- if already scanned than give message                                        \n" +
                  "							-- else add as verified umid directly                                        \n" +
                  "							IF(temp_feeder_transID > 0) THEN                                                    \n" +
                  "								-- FAILED                                              \n" +
                  "								-- SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);    \n" +
                  "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                      \n" +
                  "								INSERT INTO workorder_trans_umid_details                                                      \n" +
                  "									(`woTransID`,`eqpFeederID`,`refsidid`,                                                      \n" +
                  "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                      \n" +
                  "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                  \n" +
                  "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,                 \n" +
                  "									`verifiedOn`,`reelStatus`, refDesig)                                                       \n" +
                  "								VALUES                                                      \n" +
                  "									(pwoTransID, NULL, temp_umid_stock_id,                                                       \n" +
                  "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                      \n" +
                  "									passyQty, NULL, prfqLineItemsID, ptransactionType,                                                     \n" +
                  "									pCreatedBy, pCreatedBy, 1, pemployeeId,                 \n" +
                  "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig);                                                  \n" +
                  "  \n" +
                  "	  							-- VERIFIED                               \n" +
                  "								CREATE TEMPORARY TABLE temp_umid_transIDs AS                                \n" +
                  "								SELECT LAST_INSERT_ID() AS id;                                                     \n" +
                  "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                             \n" +
                  "								SET uidVerified = 1;                                                \n" +
                  "							ELSE                    \n" +
                  "								IF psaveUMIDDetails = 1 THEN          \n" +
                  "									-- Condition for SMT material / For SMT UMID no need to do kit allocation          \n" +
                  "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN          \n" +
                  "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;        \n" +
                  "										# Check wheather kit allocation required  or not        \n" +
                  "  \n" +
                  "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN         \n" +
                  "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);          \n" +
                  "										ELSE         \n" +
                  "											SET result = 1;        \n" +
                  "										END IF;            \n" +
                  "									ELSE          \n" +
                  "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND                                               \n" +
                  "												wop.partID = temp_umid_comp_id AND                                               \n" +
                  "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN                                              \n" +
                  "											SET result = 1;            \n" +
                  "										END IF;          \n" +
                  "									END IF;          \n" +
                  "  \n" +
                  "									IF (result = 1 ) THEN          \n" +
                  "										SET result = 1;           \n" +
                  "										INSERT INTO workorder_trans_umid_details                                                    \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                    \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                    \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                \n" +
                  "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,               \n" +
                  "										`verifiedOn`, `reelStatus`, refDesig, consumeQty)                                                     \n" +
                  "										VALUES                                                    \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,                                                     \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                    \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                   \n" +
                  "										pCreatedBy, pCreatedBy, 1, pemployeeId,               \n" +
                  "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty);                                                \n" +
                  "										-- VERIFIED                              \n" +
                  "										CREATE TEMPORARY TABLE temp_umid_transIDs AS                              \n" +
                  "										SELECT LAST_INSERT_ID() AS id;                                                   \n" +
                  "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                            \n" +
                  "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                                       \n" +
                  "										SET uidVerified = 1;           \n" +
                  "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN          \n" +
                  "										SET pUMIDAllocateStatus = 4;          \n" +
                  "									END IF;              \n" +
                  "								END IF;								                                           \n" +
                  "							END IF;                                        \n" +
                  "						ELSE                \n" +
                  "							-- if already scanned than verify same umid for history                                        \n" +
                  "							-- if not scanned yet than give message                                   \n" +
                  "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN              \n" +
                  "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);              \n" +
                  "								SET uidVerified = 1;               \n" +
                  "							ELSE               \n" +
                  "								SET uidVerified = 0;               \n" +
                  "								SET result = 0;              \n" +
                  "							END IF;                                       \n" +
                  "						END IF;                                        \n" +
                  "					ELSE                                             \n" +
                  "						-- verification require than check from which page/popup                                        \n" +
                  "						-- if from scan popup than add umid as scanned new record                                        \n" +
                  "						-- else check for verify flow                                        \n" +
                  "                        #select  prfqLineItemsID;          \n" +
                  "						IF (pisVerify <> 1) THEN          \n" +
                  "							IF psaveUMIDDetails = 1 THEN          \n" +
                  "								-- Condition for SMT material / For SMT UMID no need to do kit allocation          \n" +
                  "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN          \n" +
                  "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;        \n" +
                  "                                # Check wheather kit allocation required  or not        \n" +
                  "  \n" +
                  "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN         \n" +
                  "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);          \n" +
                  "                                    ELSE         \n" +
                  "										SET result = 1;        \n" +
                  "                                    END IF; 									        \n" +
                  "                                ELSE          \n" +
                  "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND                                               \n" +
                  "											wop.partID = temp_umid_comp_id AND                                               \n" +
                  "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN                                              \n" +
                  "										SET result = 1;            \n" +
                  "									END IF;          \n" +
                  "								END IF;          \n" +
                  "                                #select 'Line261' , result;        \n" +
                  "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN          \n" +
                  "                                IF result = 1 THEN          \n" +
                  "									SET result = 1;               \n" +
                  "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;        \n" +
                  "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                    \n" +
                  "									INSERT INTO workorder_trans_umid_details                                                    \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                    \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                    \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                \n" +
                  "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)                                                     \n" +
                  "									VALUES                                                    \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,                                                     \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                    \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                   \n" +
                  "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);                                                \n" +
                  "									-- SCANNED                             \n" +
                  "									CREATE TEMPORARY TABLE temp_umid_transIDs AS                              \n" +
                  "									SELECT LAST_INSERT_ID() AS id;            \n" +
                  "                                    -- Condition for SMT material / For SMT UMID , only successful scan message          \n" +
                  "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN          \n" +
                  "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                           \n" +
                  "										SET uidVerified = 1;                \n" +
                  "                                    ELSE          \n" +
                  "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                           \n" +
                  "										SET uidVerified = 1;                \n" +
                  "									END IF;          \n" +
                  "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN          \n" +
                  "									SET pUMIDAllocateStatus = 4;                                                  \n" +
                  "                                END IF;              \n" +
                  "							END IF;          \n" +
                  "						ELSE                       \n" +
                  "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN              \n" +
                  "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);              \n" +
                  "								SET uidVerified = 1;               \n" +
                  "							ELSE               \n" +
                  "								SET uidVerified = 0;               \n" +
                  "								SET result = 0;              \n" +
                  "							END IF;                                               \n" +
                  "						END IF;                                   \n" +
                  "					END IF;              \n" +
                  "				END IF;              \n" +
                  "			END IF;              \n" +
                  "		#END IF;              \n" +
                  "	END IF;     	          \n" +
                  "	#END IF;	             \n" +
                  "  \n" +
                  "	#select '10' , 'AT END' ;           \n" +
                  "	INSERT INTO `uid_verification_history`(                                                        \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,                                                        \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                                        \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,		                                                           \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,                                                     \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)                                                        \n" +
                  "	VALUES (                                                    \n" +
                  "		pUMID,							'',				temp_umid_comp_id,                                                    \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,                                                    \n" +
                  "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                                    \n" +
                  "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),                                                      \n" +
                  "		pwoTransID, 						NULL,				pverificationType                                                    \n" +
                  "	);                                            \n" +
                  "  \n" +
                  "	#0. return assy part list	                                        \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list                                           \n" +
                  "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;              \n" +
                  "  \n" +
                  "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN                   \n" +
                  "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                        \n" +
                  "		AND rfqLineItemsID = prfqLineItemsID;               \n" +
                  "	ELSE                     \n" +
                  "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN                  \n" +
                  "			-- verified UMID              \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE 1=0;                                        \n" +
                  "		ELSE			                  \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                                        \n" +
                  "		END IF;              \n" +
                  "	END IF;                                        \n" +
                  "  \n" +
                  "	#1. return history of verification					                                                    \n" +
                  "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();                                                    \n" +
                  "  \n" +
                  "	#2. return error                                                             \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';                                                      \n" +
                  "  \n" +
                  "	#3. return umid details                                                    \n" +
                  "	-- IF (uidVerified=1) THEN                                                    \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details                                              \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;                                              \n" +
                  "	SELECT * FROM temp_umid_details;                                                 \n" +
                  "	-- SELECT * FROM temp_umid_details;                                                    \n" +
                  "	-- END IF;                               \n" +
                  "  \n" +
                  "	#4 return last inserted/updated records for umid transacrion                                    \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs                                \n" +
                  "	SELECT NULL AS id;                            \n" +
                  "	SELECT id FROM temp_umid_transIDs;           \n" +
                  "  \n" +
                  "    #5 return UMID allocation checking status          \n" +
                  "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';          \n" +
                  "  \n" +
                  "END;  \n" +
                  /* **************************** Add Script Version ->  *********************************** */
                  "DROP PROCEDURE IF EXISTS `Sproc_ValidateScanUMIDFirst` ;  \n" +
                  "CREATE PROCEDURE `Sproc_ValidateScanUMIDFirst`(                                                                    \n" +
                  "	IN pUMID VARCHAR(14),                                                                                                          \n" +
                  "	IN pfeederLocation VARCHAR(1000),                                                                       \n" +
                  "	IN ppartID INT(11),                                                                   \n" +
                  "	IN pwoOpEqpID INT(11),                                                                 \n" +
                  "	IN pwoOpID INT(11),                                                                 \n" +
                  "	IN pwoTransID INT(11),                                                                  \n" +
                  "	IN pemployeeId INT(11),                                                                  \n" +
                  "	IN pcheckKitAllocation INT(11),                                                                  \n" +
                  "	IN pverificationType VARCHAR(255),                                                                          \n" +
                  "	IN pisVerify INT(11),                                                                        \n" +
                  "	IN ptransactionType VARCHAR(1),                                                                  \n" +
                  "	IN pisChangeReel INT(11),                                                                   \n" +
                  "	IN preelChangeType VARCHAR(100),                                                                 \n" +
                  "	IN ptoBinID INT(11),                                                                     \n" +
                  "	IN pOldUMID VARCHAR(14),                                                                 \n" +
                  "	IN pisConfirmed INT(11),                                                      \n" +
                  "	IN pwoID INT(11),                                                                   \n" +
                  "	IN pCreatedBy VARCHAR(255)                                                                  \n" +
                  ")  \n" +
                  "BEGIN                                               \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;                                                                     \n" +
                  "	DECLARE temp_comp_id INT(11);                                                                      \n" +
                  "	DECLARE temp_comp_uom INT(11);                                                                        \n" +
                  "	DECLARE temp_rfqLineItemsID VARCHAR(100);                                                                \n" +
                  "	DECLARE temp_lineID VARCHAR(100);                                                                      \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);                                                                    \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);                                                                     \n" +
                  "	DECLARE temp_eqpFeederID INT(11);                                                                            \n" +
                  "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;                                                                    \n" +
                  "	DECLARE uidVerified INT(11) DEFAULT 0;                                                                  \n" +
                  "	DECLARE feederVerified INT(11) DEFAULT 0;                                                                  \n" +
                  "	DECLARE temp_umid_comp_id INT(11);                                                                   \n" +
                  "	DECLARE temp_umid_pkgQty INT(11);                                                                   \n" +
                  "	DECLARE temp_umid_stock_id INT(11);                                                          \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);                                                             \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);                                                         \n" +
                  "	DECLARE temp_umid_package_id INT(11);                                                                  \n" +
                  "	DECLARE temp_umid_pkgUnit INT(11);                                                                   \n" +
                  "	DECLARE temp_umid_pkgCount INT(11);                                                                   \n" +
                  "	DECLARE temp_umid_pkgUOM INT(11);                          \n" +
                  "	DECLARE temp_old_umid_comp_id INT(11);                                                                   \n" +
                  "	DECLARE temp_old_umid_stock_id INT(11);                                                                    \n" +
                  "	DECLARE temp_old_umid_pkgQty INT(11);                                                                       \n" +
                  "	DECLARE temp_old_umid_pkgUnit INT(11);                                                                  \n" +
                  "	DECLARE temp_old_umid_pkgUOM INT(11);                                                             \n" +
                  "	DECLARE temp_eqp_wh_id INT(11);                                                                            \n" +
                  "	DECLARE temp_eqp_bin_id INT(11);                                                                      \n" +
                  "	DECLARE temp_eqp_wh_name VARCHAR(100);                                                                       \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);                                                              \n" +
                  "	DECLARE temp_salesorderdetID VARCHAR(100);                                                                   \n" +
                  "	DECLARE flag_isFeederTransExists INT (11) DEFAULT 0;                                                                   \n" +
                  "	DECLARE valid_umid_transfer INT (11) DEFAULT 0;                                                            \n" +
                  "	DECLARE flag_tempVerificationRequire INT (11) DEFAULT 0;                                                                                                                    \n" +
                  "	DECLARE temp_json_object VARCHAR(100);                        \n" +
                  "	DECLARE temp_last_inserted_umid_id INT (11);                                                      \n" +
                  "    DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;      \n" +
                  "    DECLARE temp_checkKitAllocation VARCHAR(50);      \n" +
                  "    DECLARE temp_continue TINYINT DEFAULT 0;      \n" +
                  "  \n" +
                  "	SET temp_eqp_wh_id = NULL;                                                                \n" +
                  "	SET temp_eqp_bin_id = NULL;                                                               \n" +
                  "	SET temp_eqp_wh_name = NULL;                                                                    \n" +
                  "  \n" +
                  "	-- create temporary table for error                                                                    \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;                                    \n" +
                  "	CREATE TEMPORARY TABLE temp_scan_error                                                                    \n" +
                  "	(                                                                    \n" +
                  "	     errorText VARCHAR(2000),                                                                   \n" +
                  "	     isFeederError INT(11),                                                                  \n" +
                  "	     isUMIDError INT(11),                                                                  \n" +
                  "	     isConfirmation INT(11),                                                                   \n" +
                  "	     isMessage INT(11),                                                                   \n" +
                  "	     isInformation INT(11),                                                                   \n" +
                  "	     stringText1 VARCHAR(1000),                                                                   \n" +
                  "	     stringText2 VARCHAR(1000),                                                                   \n" +
                  "	     stringText3 VARCHAR(1000)                                                                \n" +
                  "	);                 \n" +
                  "  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;                                                                \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;                                                   \n" +
                  "  \n" +
                  "    IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 1) > 0) THEN                                            \n" +
                  "		SET flag_tempVerificationRequire = 1;                                            \n" +
                  "	END IF;                                            \n" +
                  "  \n" +
                  "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo      \n" +
                  "	FROM workorder wo       \n" +
                  "	WHERE wo.woID = pwoID      \n" +
                  "	AND wo.isDeleted = 0;        \n" +
                  "  \n" +
                  "	IF flag_kit_allocation_not_required_wo = 1 THEN      \n" +
                  "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';      \n" +
                  "	ELSE      \n" +
                  "		SET temp_checkKitAllocation = pcheckKitAllocation;      \n" +
                  "	END IF;      \n" +
                  "  \n" +
                  "    # Step 1 - check feeder is valid or not for scanned details and return pid details                                                                   \n" +
                  "	#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,')');                                                              \n" +
                  "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN                                                                \n" +
                  "		SELECT id, refsidid, pkgQty, PIDCode, pkgUOM, pkgUnit, mfgPN, packagingGroupId                                      \n" +
                  "		-- , refSalesOrderDetID                                                       \n" +
                  "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_pkgUOM, temp_umid_pkgUnit, temp_umid_mfgPN, temp_umid_package_id                                     \n" +
                  "		-- , temp_salesorderdetID                                                                  \n" +
                  "		FROM temp_umid_details;                                                                 \n" +
                  "  \n" +
                  "		IF(pfeederLocation IS NOT NULL) THEN	          \n" +
                  "			IF(fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, 0) > 0) THEN						                                                                  \n" +
                  "				SELECT id, rfqLineItemsID, partID, lineID, eqpFeederID, pidcode, uom, mfgPN, isCPN                                                                  \n" +
                  "				INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_lineID, temp_eqpFeederID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn                                                                  \n" +
                  "				FROM temp_feeder_details;                                                                  \n" +
                  "				-- IF(pisVerify = 1) THEN                                                      \n" +
                  "				-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);                                                                  \n" +
                  "				-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN                                                                  \n" +
                  "				-- 		IF(flag_isFeederTransExists = 0) THEN                                                                  \n" +
                  "				-- 			-- FAILED                                                            \n" +
                  "				-- 			SET @stmt_str = 'FEED001';                                                                    \n" +
                  "				-- 			INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)                                                             \n" +
                  "				-- 			VALUES (@stmt_str, 1, 0, 0, 0, 0, NULL, NULL, NULL);                                              \n" +
                  "				-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);                                                                                       \n" +
                  "				-- 		END IF;                                                       \n" +
                  "				-- 	END IF;                                                       \n" +
                  "				-- ELSE                                                               \n" +
                  "					# check for valid lineid for feeder details and umid details                                                                  \n" +
                  "					#yes - check for lineid and valid than save transaction                                                                  \n" +
                  "					#no - suggest valid feeder location                                 \n" +
                  "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                        \n" +
                  "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'                                        \n" +
                  "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd                                         \n" +
                  "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN                                        \n" +
                  "							-- ALLOCATED                                  \n" +
                  "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);                                   \n" +
                  "  \n" +
                  "					ELSE      \n" +
                  "						#in case validate UMID without Kit set true at WO      \n" +
                  "						IF flag_kit_allocation_not_required_wo = 1 THEN  							    \n" +
                  "							IF ((SELECT COUNT(1) FROM temp_assy_part_list                                                         \n" +
                  "																WHERE mfgPNID = temp_umid_comp_id                                                        \n" +
                  "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld                                     \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                \n" +
                  "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld                                     \n" +
                  "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN      \n" +
                  "									-- WRONG_LOCATION                                                                 \n" +
                  "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);      \n" +
                  "							   ELSE          \n" +
                  "									SET temp_continue = 1;  							    \n" +
                  "							   END IF;   							     \n" +
                  "						ELSEIF ( fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN                                                                \n" +
                  "							SET temp_continue = 1 ;      \n" +
                  "						END IF;      \n" +
                  "                        IF temp_continue = 1 THEN      \n" +
                  "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld                                                   \n" +
                  "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN                                                    \n" +
                  "									SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                  \n" +
                  "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id,1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN                                            \n" +
                  "								SET result = 0;                                  \n" +
                  "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN                                                 \n" +
                  "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                \n" +
                  "							ELSE                \n" +
                  "								IF (pisVerify <> 1) THEN                                   \n" +
                  "									# Get Equipment/WareHouse ID from pwoOpEqpID                                                            \n" +
                  "									-- IF NOT ALLOCATED THAN NO NEED TO GIVE ELSE PART, IT IS ALREADY ADDED IN FUNCTION            \n" +
                  "                                    -- UMID016 for regualer feeder scan       \n" +
                  "                                    -- UMID042 for Part level Kit Allocation checking success  . Both from  fun_checkKitAllocation      \n" +
                  "									IF ( pwoOpEqpID IS NOT NULL AND       \n" +
                  "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0)  OR flag_kit_allocation_not_required_wo = 1 ) THEN                                                            \n" +
                  "										SELECT id, `name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst                                                             \n" +
                  "										WHERE refEqpID IN (                                                            \n" +
                  "											SELECT eqpID FROM workorder_operation_equipment                                                             \n" +
                  "											WHERE woOpEqpID=pwoOpEqpID AND deletedAt IS NULL                                                            \n" +
                  "										) AND deletedAt IS NULL;                                                            \n" +
                  "  \n" +
                  "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN                                                            \n" +
                  "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL                                                             \n" +
                  "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;                                                            \n" +
                  "										END IF;                                                            \n" +
                  "  \n" +
                  "										-- CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL, (SELECT binID FROM temp_umid_details),temp_eqp_wh_id, NULL, pCreatedBy, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);                                                            \n" +
                  "										IF (temp_eqp_bin_id IS NOT NULL) THEN                             \n" +
                  "											IF(flag_tempVerificationRequire = 0) THEN -- verification not require                            \n" +
                  "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details                                                                   \n" +
                  "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'                                               \n" +
                  "													AND refsidid = temp_umid_stock_id                                                                  \n" +
                  "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID                                                             \n" +
                  "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID                                               \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld                                                 \n" +
                  "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                                \n" +
                  "													AND reelStatus=\"P\" AND deletedAt IS NULL                                      \n" +
                  "													AND woOPID = pwoOpID;                                                                \n" +
                  "  \n" +
                  "  \n" +
                  "												IF(temp_feeder_transID > 0) THEN                                            \n" +
                  "													-- FAILED                                                  \n" +
                  "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                              \n" +
                  "												ELSE                                            \n" +
                  "  \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                           \n" +
                  "														NULL,temp_eqp_bin_id, temp_umid_stock_id,                                                           \n" +
                  "														pCreatedBy, NULL, NULL,                                                           \n" +
                  "														NULL, NULL, NULL, NULL,                                                          \n" +
                  "														NULL, NULL, NULL, NULL, NULL,                           \n" +
                  "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,                            \n" +
                  "														0,NULL,NULL,NULL);                                                                      \n" +
                  "  \n" +
                  "													INSERT INTO workorder_trans_umid_details                                                        \n" +
                  "														(`woTransID`,`eqpFeederID`,`refsidid`,                                                        \n" +
                  "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                        \n" +
                  "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                    \n" +
                  "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`)                                                         \n" +
                  "													VALUES                                                        \n" +
                  "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,                                                         \n" +
                  "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,                                                        \n" +
                  "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,                                                       \n" +
                  "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\");                                                    \n" +
                  "  \n" +
                  "													-- VERIFIED                                                  \n" +
                  "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                             \n" +
                  "													SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                  \n" +
                  "													SET valid_umid_transfer = 1;                                             \n" +
                  "												END IF;                                             \n" +
                  "											ELSE                                            \n" +
                  "  \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                           \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,                                                           \n" +
                  "													pCreatedBy, NULL, NULL,                                                           \n" +
                  "													NULL, NULL, NULL, NULL,                                                          \n" +
                  "													NULL, NULL, NULL, NULL, NULL,                           \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,                            \n" +
                  "													0,NULL,NULL,NULL);                                                \n" +
                  "  \n" +
                  "												# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                                  \n" +
                  "												INSERT INTO workorder_trans_umid_details                                                                  \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,                                                                  \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                                  \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                              \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`)                                                                   \n" +
                  "												VALUES                                                                  \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,                                                                   \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,                                                                  \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,                                                                 \n" +
                  "													pCreatedBy, pCreatedBy, \"P\");                                                          \n" +
                  "  \n" +
                  "												-- SCANNED                          \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                     \n" +
                  "												SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                           \n" +
                  "												SET valid_umid_transfer = 1;                                              \n" +
                  "											END IF;                                            \n" +
                  "										ELSE                                                       \n" +
                  "											-- WRONG_LOCATION                                                          \n" +
                  "											-- SET @stmt_str = 'UMID018';                                                                  \n" +
                  "											-- INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)                                                           \n" +
                  "											-- VALUES (@stmt_str, 0, 1, 0, 0, 0, NULL, NULL, NULL);                                             \n" +
                  "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                                                         \n" +
                  "										END IF;                                                      \n" +
                  "									END IF;                                                             \n" +
                  "  \n" +
                  "									SET feederVerified = 1;                                                                  \n" +
                  "								ELSE                          \n" +
                  "									-- If change reel and old umid details                                                      \n" +
                  "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN                                                         \n" +
                  "										-- check workorder operation equipment id and kit allocated or not while change reel                                \n" +
                  "										-- get component details based on old umid                                                      \n" +
                  "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom                                                      \n" +
                  "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM                                                      \n" +
                  "											FROM component_sid_stock css                                                       \n" +
                  "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;                                                       \n" +
                  "  \n" +
                  "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud                                                                   \n" +
                  "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'                                                       \n" +
                  "											AND wtud.refsidid=temp_old_umid_stock_id                                                       \n" +
                  "												AND wtud.mfgPNID=temp_old_umid_comp_id                                                      \n" +
                  "												AND wtud.woOpEqpID=pwoOPEqpID                                                             \n" +
                  "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID                                                       \n" +
                  "													FROM workorder_operation_feeder_lineitem_details woefld                                                       \n" +
                  "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                              \n" +
                  "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL                                    \n" +
                  "											AND woOPID = pwoOpID;                       \n" +
                  "									-- If not change reel than check for reel transaction is done or not                                                      \n" +
                  "									ELSEIF(pisChangeReel <> 1) THEN                          \n" +
                  "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud                                                                   \n" +
                  "										WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'                                               \n" +
                  "										AND wtud.refsidid = temp_umid_stock_id                                                                  \n" +
                  "										AND wtud.mfgPNID=temp_umid_comp_id AND wtud.woOpEqpID=pwoOPEqpID                                                             \n" +
                  "										AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID                                               \n" +
                  "										FROM workorder_operation_feeder_lineitem_details woefld                                                 \n" +
                  "											WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)                                                                \n" +
                  "										AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL                                       \n" +
                  "										AND wtud.woOPID = pwoOpID;                                      \n" +
                  "										-- AND isVerified=0;                                         \n" +
                  "									END IF;                       \n" +
                  "  \n" +
                  "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN                                                                  \n" +
                  "										UPDATE workorder_trans_umid_details                                                                  \n" +
                  "										SET isVerified=1,                                                                  \n" +
                  "										verifiedBy=pemployeeId,                                                                  \n" +
                  "										verifiedOn=fun_DatetimetoUTCDateTime()                                                                  \n" +
                  "										WHERE id=temp_feeder_transID;                                                                  \n" +
                  "  \n" +
                  "										SET temp_last_inserted_umid_id = temp_feeder_transID;                                     \n" +
                  "										-- VERIFIED                                                                  \n" +
                  "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                \n" +
                  "										SET feederVerified = 1;                       \n" +
                  "									-- if change reel than update verify flag for verfiy true	                                                                \n" +
                  "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN                          \n" +
                  "										 -- check workorder operation equipment id and kit allocated or not while change reel                                \n" +
                  "										IF ((pwoOpEqpID IS NOT NULL) AND       \n" +
                  "                                        ( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN                          \n" +
                  "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst                                                            \n" +
                  "											WHERE whmst.refEqpID IN (                                                            \n" +
                  "												SELECT woe.eqpID FROM workorder_operation_equipment woe                                                            \n" +
                  "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL                                                            \n" +
                  "											) AND whmst.deletedAt IS NULL;                                 \n" +
                  "  \n" +
                  "											-- check feeder location and warehouse is valid than allow to do changes reel                                \n" +
                  "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN                                                            \n" +
                  "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL                                                             \n" +
                  "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;                                                            \n" +
                  "											END IF;                        \n" +
                  "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN                                                        \n" +
                  "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM                                                      \n" +
                  "												IF (preelChangeType = \"ZeroOut\") THEN                                            \n" +
                  "														-- Added for multiple kit                                    \n" +
                  "													SET temp_json_object = CONCAT('[{\\\"id\\\":',                                                        \n" +
                  "														(SELECT id FROM kit_allocation ka                                                       \n" +
                  "															WHERE ka.refSalesOrderDetID IN                                     \n" +
                  "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)                                     \n" +
                  "																FROM workorder_salesorder_details wsd                                                           \n" +
                  "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)                                                       \n" +
                  "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),                                                        \n" +
                  "														',\\\"returnQty\\\":',0,                                                        \n" +
                  "														',\\\"returnUnit\\\":',0,                                                        \n" +
                  "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,                                                        \n" +
                  "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,                                                        \n" +
                  "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');                                                      \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                         \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,                                                         \n" +
                  "														pCreatedBy, NULL, NULL,                                                         \n" +
                  "														NULL, NULL, NULL, 0,                                                         \n" +
                  "														0, NULL, NULL, temp_json_object, preelChangeType,                          \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,                          \n" +
                  "														1,NULL,NULL,NULL);                                                       \n" +
                  "												ELSE                                                       \n" +
                  "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                                                         \n" +
                  "														NULL ,ptoBinID, temp_old_umid_stock_id,                                                         \n" +
                  "														pCreatedBy, NULL, NULL,                                                         \n" +
                  "														NULL, NULL, NULL, NULL,                                                        \n" +
                  "														NULL, NULL, NULL, NULL, NULL,                         \n" +
                  "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,                          \n" +
                  "														0,NULL,NULL,NULL);                                                       \n" +
                  "												END IF;                                                      \n" +
                  "												SET valid_umid_transfer = 1;                                                           \n" +
                  "  \n" +
                  "												-- update old record toumid                                                      \n" +
                  "												UPDATE workorder_trans_umid_details                                                                  \n" +
                  "												SET toRefUIDId=temp_umid_stock_id                                                          \n" +
                  "												WHERE id=temp_feeder_transID;                                   \n" +
                  "  \n" +
                  "												SET temp_last_inserted_umid_id = temp_feeder_transID;                                                       \n" +
                  "  \n" +
                  "												-- transfer umid to bin                      	                                \n" +
                  "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,                             	                                \n" +
                  "													NULL,temp_eqp_bin_id, temp_umid_stock_id,                             	                                \n" +
                  "													pCreatedBy, NULL, NULL,                             	                                \n" +
                  "													NULL, NULL, NULL, NULL,                            	                                \n" +
                  "													NULL, NULL, NULL, NULL, NULL,                         \n" +
                  "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,                          \n" +
                  "													0,NULL,NULL,NULL);                                \n" +
                  "  \n" +
                  "												-- SELECT pwoTransID;                                              \n" +
                  "												-- insert new umid for workorder equipment feeder                                                      \n" +
                  "												INSERT INTO workorder_trans_umid_details                                                                  \n" +
                  "													(`woTransID`,`eqpFeederID`,`refsidid`,                                                                  \n" +
                  "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                                  \n" +
                  "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                                   \n" +
                  "													`updatedBy`,`createdBy`, `reelStatus`)                                                                   \n" +
                  "												VALUES                                                                  \n" +
                  "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,                                                                   \n" +
                  "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,                                                                  \n" +
                  "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,                                                               \n" +
                  "													pCreatedBy, pCreatedBy, \"P\");                                       \n" +
                  "  \n" +
                  "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                   \n" +
                  "												-- UMID SCANNED	                                    \n" +
                  "												SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                 \n" +
                  "											ELSE                                                         \n" +
                  "												-- WRONG_LOCATION                                                                        \n" +
                  "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                                                                    \n" +
                  "											END IF;                                                   \n" +
                  "										ELSE 	                                \n" +
                  "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                         \n" +
                  "										END IF;                                       \n" +
                  "									ELSE                                                                   \n" +
                  "										-- FAILED                                                                   \n" +
                  "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);                                                                       \n" +
                  "									END IF;                                                                  \n" +
                  "								END IF;                                             \n" +
                  "							END IF;                                                                                   \n" +
                  "						END IF;      \n" +
                  "                    END IF;	                                                      \n" +
                  "				-- END IF;                                                             \n" +
                  "			END IF;                                                              \n" +
                  "		ELSE                                                                   \n" +
                  "			SET uidVerified = 1;                                                                  \n" +
                  "		END IF;                                                              \n" +
                  "	END IF;	                                                              \n" +
                  "  \n" +
                  "	INSERT INTO `uid_verification_history`(                                                                      \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,                                                                      \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                                                      \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,		                                                                         \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,                                                                   \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)                                                                      \n" +
                  "	VALUES (                                                                  \n" +
                  "		pUMID,							CASE WHEN (pfeederLocation IS NULL) THEN '' ELSE pfeederLocation END,		temp_umid_comp_id,                                                                  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 								temp_comp_id,                                                                  \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_comp_id), 		temp_mfgpn,									CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                                                  \n" +
                  "		0,							IFNULL(pCreatedBy,''),								fun_DatetimetoUTCDateTime(),                                                                    \n" +
                  "		pwoTransID, 						pwoOpEqpID,									pverificationType                                                                  \n" +
                  "	);                      	                                            \n" +
                  "  \n" +
                  "	#1. return history of umid transfer	                                                            \n" +
                  "	IF(valid_umid_transfer = 0) THEN				                                                                  \n" +
                  "		SELECT id FROM kit_allocation WHERE 1=0;                                                             \n" +
                  "	END IF;                                                            \n" +
                  "  \n" +
                  "	#2. return history of verification					                                                                  \n" +
                  "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();                                                                  \n" +
                  "  \n" +
                  "	#3. return error                                                                  \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');                                                                   \n" +
                  "  \n" +
                  "	#4. return umid details                                                                  \n" +
                  "	-- IF (uidVerified=1) THEN                                                                     \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details                                                            \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;                                                            \n" +
                  "	SELECT * FROM temp_umid_details;                                                               \n" +
                  "	-- END IF;                                                                  \n" +
                  "  \n" +
                  "	#5. return feeder details                                                                  \n" +
                  "	-- IF (feederVerified=1) THEN                                                                   \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details                                                             \n" +
                  "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;                                                                  \n" +
                  "	SELECT * FROM temp_feeder_details;                                                                  \n" +
                  "	-- END IF;                                            \n" +
                  "  \n" +
                  "	#6. return allocated UMID details                                                                     \n" +
                  "	SELECT woSalesOrderDetID FROM workorder_salesorder_details                                                             \n" +
                  "	WHERE 1=0;                       \n" +
                  "  \n" +
                  "	#7 return last inserted/updated records for umid transacrion                                    \n" +
                  "	SELECT temp_last_inserted_umid_id;                                                           \n" +
                  "END;  \n" +
                  /* **************************** Add Script Version ->  *********************************** */
                  "DROP PROCEDURE IF EXISTS `Sproc_RetrieveWOTransEquipmentFeederVerificationDetails` ;  \n" +
                  "CREATE PROCEDURE `Sproc_RetrieveWOTransEquipmentFeederVerificationDetails`(                                        \n" +
                  "	IN ppageIndex INT,                                        \n" +
                  "	IN precordPerPage INT,                                        \n" +
                  "	IN pOrderBy VARCHAR(255),                                        \n" +
                  "	IN pWhereClause VARCHAR(16383),                                    \n" +
                  "	IN pWoTransUMIDDetID INT,                                   \n" +
                  "	IN ptransactionType VARCHAR(1)                              \n" +
                  ")  \n" +
                  "BEGIN                                        \n" +
                  "DECLARE pOffset INT;                                       \n" +
                  "		DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                  "  \n" +
                  "		SET @temp_Sproc_RetrieveWOTransEquipmentFeederVerificationDetails = CONCAT(\"          \n" +
                  "  \n" +
                  "		SELECT wotuvd.id,                                     \n" +
                  "			wotfd.woTransID,                                     \n" +
                  "			woefd.id AS eqpFeederID,                                \n" +
                  "			woefd.feederLocation,                                  \n" +
                  "			(SELECT GROUP_CONCAT(IFNULL(CAST(wol.lineID AS UNSIGNED),'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS lineID,                                                      \n" +
                  "			wotfd.refsidid,                                     \n" +
                  "			(SELECT uid FROM component_sid_stock WHERE id = wotfd.refsidid) AS umid,                                \n" +
                  "			(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'                                     \n" +
                  "					WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,                                \n" +
                  "			wotfd.mfgPNID,                                 \n" +
                  "			co.PIDCODE AS PIDCode,                                \n" +
                  "			co.mfgPN AS mfgPN,     \n" +
                  "			co.isCustom ,                                     \n" +
                  "			ro.rohsIcon,                                                    \n" +
                  "			`ro`.`name` AS `rohsName`,                                    \n" +
                  "			wotfd.woOpEqpID,                                     \n" +
                  "			wotfd.assyQty,                                     \n" +
                  "			wotfd.UOM,             \n" +
                  "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wotuvd.verifiedOn) verifiedOn,        \n" +
                  "			fun_ConvertUTCDatetimeToDataKeyTimeZone(wotuvd.updatedAt) updatedAt,             \n" +
                  "			fun_getRestrictedFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) isRestricted,              \n" +
                  "			fun_getbomRestrictedWithPermissionFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) restrictPermission,                       \n" +
                  "			(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotuvd.verifiedBy) AS verifiedBy,                                       \n" +
                  "			(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,                                           \n" +
                  "			wotfd.rfqLineItemsID                                    \n" +
                  "			FROM workorder_trans_umid_verification_history wotuvd                      \n" +
                  "		LEFT JOIN workorder_trans_umid_details wotfd ON (wotuvd.woTransUMIDDetID = wotfd.id AND wotfd.`deletedAt` IS NULL)                      \n" +
                  "		LEFT JOIN workorder_operation_equipment_feeder_details woefd ON (wotfd.eqpFeederID = woefd.id AND woefd.`deletedAt` IS NULL)                                \n" +
                  "		LEFT JOIN component co ON (wotfd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)                                \n" +
                  "		LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)                                   \n" +
                  "		WHERE wotuvd.deletedAt IS NULL AND wotfd.transactionType='\",ptransactionType,\"' AND wotuvd.woTransUMIDDetID = \",pWoTransUMIDDetID,\"           \n" +
                  "  \n" +
                  "		\");                   \n" +
                  "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                        \n" +
                  "			SET pOrderBy = \"ORDER BY fun_castStringDateTimeToDateTime(updatedAt) DESC\";                                        \n" +
                  "		ELSE                                        \n" +
                  "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                  "		END IF;	                                        \n" +
                  "  \n" +
                  "  \n" +
                  "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                        \n" +
                  "			SET pWhereClause = '1=1' ;                                        \n" +
                  "		END IF;	                                        \n" +
                  "  \n" +
                  "  \n" +
                  "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                  "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                  "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                  "		ELSE	                                        \n" +
                  "			SET rowNumWhere = '';                                        \n" +
                  "		END IF;	                                        \n" +
                  "  \n" +
                  "  \n" +
                  "		/* to get total count of rows */                   \n" +
                  "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWOTransEquipmentFeederVerificationDetails,\" ) c where 1=1 and \", pWhereClause);                  \n" +
                  "		PREPARE query2 FROM @SQLStatement2;                  \n" +
                  "		EXECUTE query2;                  \n" +
                  "		DEALLOCATE PREPARE query2;                \n" +
                  "  \n" +
                  "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWOTransEquipmentFeederVerificationDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                  "		PREPARE query1 FROM @SQLStatement2;                  \n" +
                  "		EXECUTE query1;                  \n" +
                  "		DEALLOCATE PREPARE query1;            \n" +
                  "  \n" +
                  "  \n" +
                  "    END;  \n" +
                  /* **************************** Add Script Version ->  *********************************** */
                  "DROP PROCEDURE IF EXISTS `Sproc_validateScanUMIDOnly` ;  \n" +
                  "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(                                                        \n" +
                  "	IN pUMID VARCHAR(14),                                                       \n" +
                  "	IN ppartID INT,                                                    \n" +
                  "	IN pwoOpID INT,                                                         \n" +
                  "	IN pwoTransID INT,                                                      \n" +
                  "	IN pemployeeId INT,                                                      \n" +
                  "	IN pcheckKitAllocation INT,                                                      \n" +
                  "	IN pverificationType VARCHAR(255),                                                      \n" +
                  "	IN pisVerify INT,                                                         \n" +
                  "	IN ptransactionType VARCHAR(1),                                               \n" +
                  "	IN prfqLineItemsID INT,                                             \n" +
                  "	IN pisConfirmed INT,                                              \n" +
                  "	IN pwoID INT,                                                 \n" +
                  "	IN pCreatedBy VARCHAR(255),                                            \n" +
                  "	IN pisPlacementTracking INT,                                            \n" +
                  "	IN psaveUMIDDetails INT,                                               \n" +
                  "	IN prefDesig VARCHAR(3000),                                            \n" +
                  "	IN passyQty INT                                                       \n" +
                  ")  \n" +
                  "BEGIN                                             \n" +
                  "	DECLARE result VARCHAR(255) DEFAULT 0;                                                                \n" +
                  "	DECLARE temp_pidcode VARCHAR(100);                                                        \n" +
                  "	DECLARE temp_mfgpn VARCHAR(50);                                                      \n" +
                  "	DECLARE uidVerified INT DEFAULT 0;                                                       \n" +
                  "	DECLARE temp_umid_comp_id INT;                                                       \n" +
                  "	DECLARE temp_umid_stock_id INT;                                                      \n" +
                  "	DECLARE temp_umid_pkgQty INT;                                                      \n" +
                  "	DECLARE temp_umid_pidcode VARCHAR(100);                                                     \n" +
                  "	DECLARE temp_umid_mfgPN VARCHAR(100);                                                   \n" +
                  "	DECLARE temp_umid_package_id INT;                                                 \n" +
                  "	DECLARE temp_feeder_transID VARCHAR(100);                                                                 \n" +
                  "	DECLARE temp_last_inserted_umid_id INT;                                                      \n" +
                  "	DECLARE flag_isFeederTransExists INT DEFAULT 0;                                                        \n" +
                  "	DECLARE flag_tempVerificationRequire INT DEFAULT 0;                                                                   \n" +
                  "	DECLARE flag_tempLineCount INT DEFAULT 0;                                             \n" +
                  "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;    \n" +
                  "    DECLARE temp_checkKitAllocation VARCHAR(50);    \n" +
                  "  \n" +
                  "	-- create temporary table for error                                                        \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;                                                         \n" +
                  "	CREATE TEMPORARY TABLE temp_scan_error                                                        \n" +
                  "	(                                                        \n" +
                  "	     errorText VARCHAR(2000),                                                       \n" +
                  "	     isFeederError INT,                                                      \n" +
                  "	     isUMIDError INT,                                                      \n" +
                  "	     isConfirmation INT,                                                       \n" +
                  "	     isMessage INT,                                                       \n" +
                  "	     isInformation INT,                                                       \n" +
                  "	     stringText1 VARCHAR(1000),                                                       \n" +
                  "	     stringText2 VARCHAR(1000),                                                       \n" +
                  "	     stringText3 VARCHAR(1000)                                                                                            \n" +
                  "	);                                    \n" +
                  "  \n" +
                  "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo    \n" +
                  "    FROM workorder wo     \n" +
                  "    WHERE wo.woID = pwoID    \n" +
                  "    AND wo.isDeleted = 0;    \n" +
                  "  \n" +
                  "	# umid transaction details based on umid                              \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;                                    \n" +
                  "  \n" +
                  "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN                                          \n" +
                  "		SET flag_tempVerificationRequire = 1;                                          \n" +
                  "	END IF;            \n" +
                  "  \n" +
                  "	IF flag_kit_allocation_not_required_wo = 1 THEN    \n" +
                  "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';    \n" +
                  "    ELSE    \n" +
                  "		SET temp_checkKitAllocation = pcheckKitAllocation;    \n" +
                  "    END IF;    \n" +
                  "  \n" +
                  "	# Step 1 - check feeder is valid or not for scanned details and return pid details                                                       \n" +
                  "#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,',',pwoID,',',pCreatedBy,',',pisConfirmed,')');                                                              \n" +
                  "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN                                                   \n" +
                  "  \n" +
                  "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId                                                       \n" +
                  "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id                                                  \n" +
                  "		FROM temp_umid_details;                                                \n" +
                  "  \n" +
                  "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                           \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details); 		                \n" +
                  "		IF(flag_tempLineCount = 1) THEN                \n" +
                  "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list                                           \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                        \n" +
                  "		END IF;                \n" +
                  "  \n" +
                  "		IF(prfqLineItemsID IS NOT NULL) THEN                     \n" +
                  "			UPDATE temp_umid_details tud                 \n" +
                  "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL                 \n" +
                  "			AND id = prfqLineItemsID)                \n" +
                  "			WHERE tud.refsidid=temp_umid_stock_id;                 \n" +
                  "  \n" +
                  "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                           \n" +
                  "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                           \n" +
                  "			AND rfqLineItemsID = prfqLineItemsID;                  \n" +
                  "		END IF;                 \n" +
                  "#SELECT 'Line 84', fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, prfqLineItemsID);          \n" +
                  "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN    \n" +
                  "			SET result = 0;    \n" +
                  "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN                                     \n" +
                  "			SET result = 0;                 \n" +
                  "		ELSE                    \n" +
                  "			-- need to check from here                \n" +
                  "			-- If scan popup with manual placement and allocated in kit and not saved details          --      \n" +
                  "#SELECT 'Line90',pisVerify,pisPlacementTracking ,  psaveUMIDDetails , temp_scan_error.* FROM temp_scan_error  ;          \n" +
                  "			-- Check placement tracking with more than one BOM line item for same part        \n" +
                  "			IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0)) THEN      \n" +
                  "				SET result = 0;      \n" +
                  "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN                \n" +
                  "				SET result = 0;            \n" +
                  "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN           \n" +
                  "				SET result = 0;            \n" +
                  "			ELSE                \n" +
                  "#	SELECT 'Line 94',flag_tempLineCount ,pisVerify  ;                      \n" +
                  "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN                \n" +
                  "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                \n" +
                  "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                \n" +
                  "						SET uidVerified = 1;                 \n" +
                  "					ELSE                 \n" +
                  "						SET uidVerified = 0;                 \n" +
                  "						SET result = 0;                \n" +
                  "					END IF;                   \n" +
                  "				ELSE                \n" +
                  "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN                                   \n" +
                  "						SET result = 0;                  \n" +
                  "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN                                      \n" +
                  "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                      \n" +
                  "					ELSE                  \n" +
                  "#SELECT 'Line 109',flag_tempVerificationRequire ,pisVerify  ;                                  \n" +
                  "						-- check verification required                                                \n" +
                  "						-- than verification require than check from which page scan/verify                                          \n" +
                  "						IF(flag_tempVerificationRequire = 0) THEN -- verification not require      \n" +
                  "							-- if scan option selected than check for already scanned in flow first                                           \n" +
                  "							-- if not scanned than add as verified umid directly                                          \n" +
                  "							IF(pisVerify <> 1) THEN                                          \n" +
                  "								SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details                                                                 \n" +
                  "								WHERE transactionType='U'                                             \n" +
                  "								AND refsidid = temp_umid_stock_id                                                                \n" +
                  "								AND mfgPNID=temp_umid_comp_id                                                        \n" +
                  "								AND reelStatus=\"C\" AND deletedAt IS NULL                                \n" +
                  "								AND woOPID = pwoOpID                              \n" +
                  "								AND employeeID=pemployeeId;                       \n" +
                  "  \n" +
                  "								-- if already scanned than give message                                          \n" +
                  "								-- else add as verified umid directly                                          \n" +
                  "								IF(temp_feeder_transID > 0) THEN                                                      \n" +
                  "									-- FAILED                                                \n" +
                  "									-- SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                 \n" +
                  "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                      \n" +
                  "									INSERT INTO workorder_trans_umid_details                                                      \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                      \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                      \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                  \n" +
                  "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,                 \n" +
                  "										`verifiedOn`,`reelStatus`, refDesig)                                                       \n" +
                  "									VALUES                                                      \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,                                                       \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                      \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                     \n" +
                  "										pCreatedBy, pCreatedBy, 1, pemployeeId,                 \n" +
                  "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig);                                                  \n" +
                  "  \n" +
                  "									-- SCANNED                               \n" +
                  "									CREATE TEMPORARY TABLE temp_umid_transIDs AS                                \n" +
                  "									SELECT LAST_INSERT_ID() AS id;                                                     \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                             \n" +
                  "									SET uidVerified = 1;                                                  									  \n" +
                  "								ELSE                                                   \n" +
                  "									INSERT INTO workorder_trans_umid_details                                                      \n" +
                  "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                      \n" +
                  "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                      \n" +
                  "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                  \n" +
                  "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,                 \n" +
                  "										`verifiedOn`, `reelStatus`, refDesig)                                                       \n" +
                  "									VALUES                                                      \n" +
                  "										(pwoTransID, NULL, temp_umid_stock_id,                                                       \n" +
                  "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                      \n" +
                  "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                     \n" +
                  "										pCreatedBy, pCreatedBy, 1, pemployeeId,                 \n" +
                  "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig);                                                  \n" +
                  "  \n" +
                  "									-- VERIFIED                                \n" +
                  "									CREATE TEMPORARY TABLE temp_umid_transIDs AS                                \n" +
                  "									SELECT LAST_INSERT_ID() AS id;                                                     \n" +
                  "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                              \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                                         \n" +
                  "									SET uidVerified = 1;                                              \n" +
                  "								END IF;                                          \n" +
                  "							ELSE                  \n" +
                  "								-- if already scanned than verify same umid for history                                          \n" +
                  "								-- if not scanned yet than give message                                     \n" +
                  "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                \n" +
                  "									SET uidVerified = 1;                 \n" +
                  "								ELSE                 \n" +
                  "									SET uidVerified = 0;                 \n" +
                  "									SET result = 0;                \n" +
                  "								END IF;                                         \n" +
                  "							END IF;                                          \n" +
                  "						ELSE                                               \n" +
                  "							-- verification require than check from which page/popup                                          \n" +
                  "							-- if from scan popup than add umid as scanned new record                                          \n" +
                  "							-- else check for verify flow   							  \n" +
                  "							IF (pisVerify <> 1) THEN                          \n" +
                  "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                      \n" +
                  "								INSERT INTO workorder_trans_umid_details                                                      \n" +
                  "									(`woTransID`,`eqpFeederID`,`refsidid`,                                                      \n" +
                  "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                      \n" +
                  "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                  \n" +
                  "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)                                                       \n" +
                  "								VALUES                                                      \n" +
                  "									(pwoTransID, NULL, temp_umid_stock_id,                                                       \n" +
                  "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                      \n" +
                  "									passyQty, NULL, prfqLineItemsID, ptransactionType,                                                     \n" +
                  "									pCreatedBy, pCreatedBy, \"C\", prefDesig);                                                  \n" +
                  "  \n" +
                  "								-- SCANNED                               \n" +
                  "								CREATE TEMPORARY TABLE temp_umid_transIDs AS                                \n" +
                  "								SELECT LAST_INSERT_ID() AS id;                                                     \n" +
                  "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                             \n" +
                  "								SET uidVerified = 1;                                                    \n" +
                  "							ELSE                         \n" +
                  "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                \n" +
                  "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                \n" +
                  "									SET uidVerified = 1;                 \n" +
                  "								ELSE                 \n" +
                  "									SET uidVerified = 0;                 \n" +
                  "									SET result = 0;                \n" +
                  "								END IF;                                                 \n" +
                  "							END IF;                                     \n" +
                  "						END IF;                \n" +
                  "					END IF;                \n" +
                  "				END IF;                \n" +
                  "			END IF;                \n" +
                  "		END IF;                 \n" +
                  "	END IF;	                                                  \n" +
                  "  \n" +
                  "	INSERT INTO `uid_verification_history`(                                                          \n" +
                  "		`scanString1`,		`scanString2`,		`string1PartID`,                                                          \n" +
                  "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                                          \n" +
                  "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,		                                                             \n" +
                  "		`isDeleted`,		`createdBy`,		`createdAt`,                                                       \n" +
                  "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)                                                          \n" +
                  "	VALUES (                                                      \n" +
                  "		pUMID,							'',				temp_umid_comp_id,                                                      \n" +
                  "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,                                                      \n" +
                  "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                                      \n" +
                  "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),                                                        \n" +
                  "		pwoTransID, 						NULL,				pverificationType                                                      \n" +
                  "	);                                              \n" +
                  "  \n" +
                  "	#0. return assy part list	                                          \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list                                             \n" +
                  "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;                \n" +
                  "  \n" +
                  "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN                     \n" +
                  "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                          \n" +
                  "		AND rfqLineItemsID = prfqLineItemsID;                 \n" +
                  "	ELSE                       \n" +
                  "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN                    \n" +
                  "			-- verified UMID                \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE 1=0;                                          \n" +
                  "		ELSE			                    \n" +
                  "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                                          \n" +
                  "		END IF;                \n" +
                  "	END IF;                                          \n" +
                  "  \n" +
                  "	#1. return history of verification					                                                      \n" +
                  "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();                                                      \n" +
                  "  \n" +
                  "	#2. return error                                                               \n" +
                  "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');                                                        \n" +
                  "  \n" +
                  "	#3. return umid details                                                      \n" +
                  "	-- IF (uidVerified=1) THEN                                                      \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details                                                \n" +
                  "	SELECT id FROM component_sid_stock WHERE 1=0;                                                \n" +
                  "	SELECT * FROM temp_umid_details;                                                   \n" +
                  "	-- SELECT * FROM temp_umid_details;                                                      \n" +
                  "	-- END IF;                                 \n" +
                  "  \n" +
                  "	#4 return last inserted/updated records for umid transacrion                                      \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs                                  \n" +
                  "	SELECT NULL AS id;                              \n" +
                  "	SELECT id FROM temp_umid_transIDs;                                        \n" +
                  "END;  \n" +
                  /* **************************** Add Script Version ->  *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (742,'1.00','V1','Resovled multiple time allow verification in and default assembly validation for scan material - Vaibhav'," + userid + ", '" + requiredDet.ipAddress + "');"
              );
            break;
        case 742:
              allDbChangesArray.push(
              /* **************************** New Script -> 05-03-2021  *********************************** */
                  "DROP VIEW IF EXISTS `vu_bom_details_with_alias` ;  \n" +
                  "CREATE VIEW `vu_bom_details_with_alias` AS   \n" +
                  "SELECT  \n" +
                  "  `rl`.`id`                                                AS `id`,  \n" +
                  "  `rl`.`partID`                                            AS `AssyId`,  \n" +
                  "  `FUN_GETASSYNAMEBYID`(  \n" +
                  "`rl`.`partID`)                   AS `AssyName`,  \n" +
                  "  `FUN_GETASSYPIDCODEBYID`(  \n" +
                  "`rl`.`partID`)                AS `AssemblyID`,  \n" +
                  "  `rl`.`lineID`                                            AS `LineID`,  \n" +
                  "  `rl`.`qpa`                                               AS `Qpa`,  \n" +
                  "  `rl`.`refDesig`                                          AS `refDesig`,  \n" +
                  "  `rl`.`custPN`                                            AS `CustPn`,  \n" +
                  "  `rl`.`customerRev`                                       AS `customerRev`,  \n" +
                  "  `rl`.`custPNID`                                          AS `custPNID`,  \n" +
                  "  `FUN_GETCOMPONENTPRODUCTIONPN`(  \n" +
                  "`rl`.`custPNID`)        AS `custProductionPN`,  \n" +
                  "  `FUN_GETASSYPIDCODEBYID`(  \n" +
                  "`rl`.`custPNID`)              AS `custPIDCode`,  \n" +
                  "  `rl`.`restrictCPNUseInBOMStep`                           AS `restrictCPNUseInBOMStep`,  \n" +
                  "  (CASE WHEN (IFNULL(`rl`.`restrictCPNUseInBOMStep`,0) = 1) THEN 1 ELSE `pkg`.`restrictUseInBOMStep` END) AS `restrictPart`,  \n" +
                  "  `FUN_GETASSYNAMEBYID`(  \n" +
                  "`rl`.`custPNID`)                 AS `CPN`,  \n" +
                  "  `rl`.`uomID`                                             AS `uomid`,  \n" +
                  "  `rl`.`isInstall`                                         AS `isinstall`,  \n" +
                  "  `rl`.`isPurchase`                                        AS `isPurchase`,  \n" +
                  "  `rl`.`isBuyDNPQty`                                       AS `isBuyDNPQty`,  \n" +
                  "  `rl`.`customerApprovalForPopulateStep`                   AS `customerApprovalForPopulateStep`,  \n" +
                  "  `rl`.`customerApprovalCPN`                               AS `customerApprovalCPN`,  \n" +
                  "  `pkg`.`mfgPN`                                            AS `mfgpn`,  \n" +
                  "  `pkg`.`mfgPnIDWithPackagingAliasID`                      AS `mfgPnIDWithPackagingAliasID`,  \n" +
                  "  `pkg`.`restrictUseInBOMStep`                             AS `restrictUseInBOMStep`,  \n" +
                  "  `pkg`.`isBOMpart`                                        AS `isBOMPart`,  \n" +
                  "  `pkg`.`rfqAssyBomID`                                     AS `rfqAssyBomID`,  \n" +
                  "  `c`.`PIDCode`                                            AS `PIDCode`,  \n" +
                  "  `c`.`packaginggroupID`                                   AS `packagingGroupId`,  \n" +
                  "  `c`.`mountingTypeID`                                     AS `mountingTypeID`,  \n" +
                  "  IFNULL(`c`.`RoHSStatusID`,`pkg`.`RoHSStatusID`)          AS `RoHSStatusID`,  \n" +
                  "  IFNULL(`c`.`isCustom`,`pkg`.`iscustom`)                  AS `isCustom`,  \n" +
                  "  `FUN_GETROHSICONBYID`(  \n" +
                  "IFNULL(`c`.`RoHSStatusID`,`pkg`.`RoHSStatusID`))  AS `rohsIcon`,  \n" +
                  "  `FUN_GETROHSNAMEBYID`(  \n" +
                  "IFNULL(`c`.`RoHSStatusID`,`pkg`.`RoHSStatusID`))  AS `rohsName`,  \n" +
                  "  (CASE WHEN (`c`.`packaginggroupID` IS NULL) THEN 0 ELSE 1 END) AS `isPackagingAlias`,  \n" +
                  "  (CASE WHEN (`rl`.`custPNID` IS NOT NULL) THEN 1 ELSE 0 END) AS `isCPN`,  \n" +
                  "  (CASE WHEN (`c`.`restrictUSEwithpermission` = 1) THEN 0 ELSE IFNULL(`pkg`.`restrictUseWithPermissionStep`,1) END) AS `restrictUseWithPermissionStep`,  \n" +
                  "  (CASE WHEN (`c`.`restrictUsePermanently` = 1) THEN 0 ELSE IFNULL(`pkg`.`restrictUsePermanentlyStep`,1) END) AS `restrictUsePermanentlyStep`,  \n" +
                  "  `c`.`restrictUSEwithpermission`                          AS `partLevelRestrictUSEwithpermission`,  \n" +
                  "  `c`.`restrictUsePermanently`                             AS `partLevelRestrictUsePermanently`,  \n" +
                  "  `c`.`restrictPackagingUseWithpermission`                 AS `partLevelRestrictPackagingUseWithpermission`,  \n" +
                  "  `c`.`restrictPackagingUsePermanently`                    AS `partLevelRestrictPackagingUsePermanently`,  \n" +
                  "  `c`.`productionPN`                                       AS `productionPN`,  \n" +
                  "  `rl`.`restrictCPNUseInBOMStep`                           AS `rfqLevelRestrictCPNUseInBOMStep`,  \n" +
                  "  `rl`.`restrictCPNUseWithPermissionStep`                  AS `rfqLevelRestrictCPNUseWithPermissionStep`,  \n" +
                  "  `rl`.`restrictCPNUsePermanentlyStep`                     AS `rfqLevelRestrictCPNUsePermanentlyStep`,  \n" +
                  "  `pkg`.`restrictUseWithPermissionStep`                    AS `lineLevelRestrictUseWithPermissionStep`,  \n" +
                  "  `pkg`.`restrictUsePermanentlyStep`                       AS `lineLevelRestrictUsePermanentlyStep`,  \n" +
                  "  `pkg`.`restrictUseInBOMStep`                             AS `lineLevelRestrictUseInBOMStep`,  \n" +
                  "  `pkg`.`restrictUseInBOMWithPermissionStep`               AS `lineLevelRestrictUseInBOMWithPermissionStep`,  \n" +
                  "  `pkg`.`restrictUseInBOMExcludingAliasStep`               AS `lineLevelrestrictUseInBOMExcludingAliasStep`,  \n" +
                  "  `pkg`.`restrictUseInBOMExcludingAliasWithPermissionStep` AS `lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                  "  `pkg`.`customerApproval`                                 AS `lineLevelCustomerApproval`,  \n" +
                  "  `rl`.`isDeleted`                                         AS `isDeleted`,  \n" +
                  "  `rl`.`deletedAt`                                         AS `deletedAt`,  \n" +
                  "  `rl`.`isNotRequiredKitAllocation`                        AS `isNotRequiredKitAllocation`,  \n" +
                  "  `rl`.`programingStatus`                                  AS `programingStatus`,  \n" +
                  "  `rl`.`dnpDesigCount`                                     AS `dnpDesigCount`  \n" +
                  "FROM ((`rfq_lineitems` `rl`  \n" +
                  "    LEFT JOIN (SELECT  \n" +
                  "                 `rlaoq`.`mfgPnIDWithPackagingAliasID`                     AS `mfgPnIDWithPackagingAliasID`,  \n" +
                  "                 `FUN_GETCOMPONENTNAMEBYID`(  \n" +
                  "`rlaoq`.`mfgPnIDWithPackagingAliasID`)  AS `mfgPN`,  \n" +
                  "                 MAX(`rlaoq`.`isBOMPart`)                                  AS `isBOMpart`,  \n" +
                  "                 `rlaoq`.`rfqLineItemsID`                                  AS `rfqLineItemsID`,  \n" +
                  "                 `rlaoq`.`rfqAssyBomID`                                    AS `rfqAssyBomID`,  \n" +
                  "                 MAX(`rlaoq`.`RoHSStatusID`)                               AS `RoHSStatusID`,  \n" +
                  "                 MAX(`rlaoq`.`isCustom`)                                   AS `iscustom`,  \n" +
                  "                 MAX(`rlaoq`.`restrictUseWithPermissionStep`)              AS `restrictUseWithPermissionStep`,  \n" +
                  "                 MAX(`rlaoq`.`restrictUsePermanentlyStep`)                 AS `restrictUsePermanentlyStep`,  \n" +
                  "                 MAX(`rlaoq`.`restrictUseInBOMStep`)                       AS `restrictUseInBOMStep`,  \n" +
                  "                 MAX(`rlaoq`.`restrictUseInBOMWithPermissionStep`)         AS `restrictUseInBOMWithPermissionStep`,  \n" +
                  "                 MAX(`rlaoq`.`restrictUseInBOMExcludingAliasStep`)         AS `restrictUseInBOMExcludingAliasStep`,  \n" +
                  "                 MAX(`rlaoq`.`restrictUseInBOMExcludingAliasWithPermissionStep`) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                  "                 `rlaoq`.`customerApproval`                                AS `customerApproval`  \n" +
                  "               FROM (SELECT  \n" +
                  "                       `rla`.`mfgPNID`                                            AS `bommfgpnid`,  \n" +
                  "                       IFNULL(`cp`.`componentID`,`rla`.`mfgPNID`)                 AS `mfgPnIDWithPackagingAliasID`,  \n" +
                  "                       (CASE WHEN (`rla`.`mfgPNID` <> `cp`.`componentID`) THEN 0 ELSE 1 END) AS `isBOMPart`,  \n" +
                  "                       `rla`.`rfqLineItemsID`                                     AS `rfqLineItemsID`,  \n" +
                  "                       `rla`.`rfqAssyBomID`                                       AS `rfqAssyBomID`,  \n" +
                  "                       `c`.`RoHSStatusID`                                         AS `RoHSStatusID`,  \n" +
                  "                       `c`.`isCustom`                                             AS `isCustom`,  \n" +
                  "                       `rla`.`restrictUseWithPermissionStep`                      AS `restrictUseWithPermissionStep`,  \n" +
                  "                       `rla`.`restrictUsePermanentlyStep`                         AS `restrictUsePermanentlyStep`,  \n" +
                  "                       `rla`.`restrictUseInBOMStep`                               AS `restrictUseInBOMStep`,  \n" +
                  "                       `rla`.`restrictUseInBOMWithPermissionStep`                 AS `restrictUseInBOMWithPermissionStep`,  \n" +
                  "                       `rla`.`restrictUseInBOMExcludingAliasStep`                 AS `restrictUseInBOMExcludingAliasStep`,  \n" +
                  "                       `rla`.`restrictUseInBOMExcludingAliasWithPermissionStep`   AS `restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                  "                       `rla`.`customerApproval`                                   AS `customerApproval`  \n" +
                  "                     FROM ((`rfq_lineitems_alternatepart` `rla`  \n" +
                  "                         JOIN `component` `c`  \n" +
                  "                           ON ((`rla`.`mfgPNID` = `c`.`id`)))  \n" +
                  "                        LEFT JOIN `component_packagingalias` `cp`  \n" +
                  "                          ON ((`cp`.`aliasgroupID` = `c`.`packaginggroupID`)))  \n" +
                  "                     WHERE ((`rla`.`isDeleted` = 0)  \n" +
                  "                            AND (IFNULL(`cp`.`isDeleted`,0) = 0))) `rlaoq`  \n" +
                  "               GROUP BY `rlaoq`.`mfgPnIDWithPackagingAliasID`,`rlaoq`.`rfqLineItemsID`,`rlaoq`.`rfqAssyBomID`,`rlaoq`.`customerApproval`) `pkg`  \n" +
                  "      ON ((`rl`.`id` = `pkg`.`rfqLineItemsID`)))  \n" +
                  "   LEFT JOIN `component` `c`  \n" +
                  "     ON ((`pkg`.`mfgPnIDWithPackagingAliasID` = `c`.`id`)));  \n" +
              /* **************************** Add Script Version -> 05-03-2021  *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (743,'1.00','V1','View changes due to packaging aliad of alternate part is each other - Fixed on production - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
              );
            break;
            case 743:
                allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckPackagingAlias_Validation`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckPackagingAlias_Validation`(    \n" +
                "	IN pToPartID   INT,      \n" +
                "	IN pFromPartID INT,    \n" +
                "    INOUT  pMissMatchField  longtext)  \n" +
                "BEGIN      \n" +
                "	DECLARE v_FunctionalCategoryID int;      \n" +
                "    DECLARE v_ValidationCount int;    \n" +
                "    DECLARE v_fieldNameToValidate  varchar(100);    \n" +
                "	DECLARE v_fieldDataType  varchar(100);    \n" +
                "	DECLARE v_matchCriteria  varchar(10);    \n" +
                "	DECLARE v_nullValueIsValid  tinyint;    \n" +
                "	DECLARE v_fieldTitle  varchar(100);    \n" +
                "    DECLARE v_IndexNo INT DEFAULT 0;     \n" +
                "  \n" +
                "    INSERT INTO  tempFromComponentDetail    \n" +
                "    select * from component where id = pFromPartID;    \n" +
                "  \n" +
                "	INSERT INTO  tempToComponentDetail    \n" +
                "    select * from component where id = pToPartID;    \n" +
                "    set v_FunctionalCategoryID = (select functionalCategoryID from tempFromComponentDetail limit 1);    \n" +
                "  \n" +
                "    SELECT functionalCategoryID INTO v_FunctionalCategoryID FROM tempFromComponentDetail  limit 1;     \n" +
                "  \n" +
                "	INSERT INTO tempComponentAlternateValidationDetail    \n" +
                "    select * from component_alternatepn_validations where type = 2 and refRfqPartTypeId =v_FunctionalCategoryID and isDeleted = 0;    \n" +
                "  \n" +
                "    SELECT count(1) INTO v_ValidationCount FROM tempComponentAlternateValidationDetail;                           \n" +
                "	SET v_IndexNo = 0;        \n" +
                "    SET pMissMatchField = (SELECT (CASE WHEN pMissMatchField is null THEN '' ELSE pMissMatchField END));    \n" +
                "  \n" +
                "  	IF(v_ValidationCount > 0)    \n" +
                "    THEN            \n" +
                "        WHILE v_IndexNo < v_ValidationCount DO    \n" +
                "			set v_fieldNameToValidate = null;    \n" +
                "			set v_fieldDataType = null;    \n" +
                "			set v_matchCriteria = null;    \n" +
                "			set v_nullValueIsValid  = null;    \n" +
                "			set v_fieldTitle = null;    \n" +
                "            set @FromPartValue = null;    \n" +
                "            set @ToPartValue = null;    \n" +
                "            set @IsMatchCriteria = false;    \n" +
                "  \n" +
                "			SELECT fieldNameToValidate,fieldDataType,matchCriteria,nullValueIsValid,fieldTitle     \n" +
                "				INTO v_fieldNameToValidate,v_fieldDataType,v_matchCriteria,v_nullValueIsValid,v_fieldTitle    \n" +
                "			FROM tempComponentAlternateValidationDetail LIMIT v_IndexNo,1;     \n" +
                "            set @SQLAssignValueStatement1 = CONCAT('SELECT a.', v_fieldNameToValidate, ' INTO @FromPartValue from tempFromComponentDetail a;');    \n" +
                "  \n" +
                "            set @SQLAssignValueStatement2 = CONCAT('SELECT a.', v_fieldNameToValidate, ' INTO @ToPartValue from tempToComponentDetail a;');    \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLAssignValueStatement1;                          \n" +
                "			EXECUTE query1;                          \n" +
                "			DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLAssignValueStatement2;                          \n" +
                "			EXECUTE query2;                          \n" +
                "			DEALLOCATE PREPARE query2;     \n" +
                "  \n" +
                "            IF(v_nullValueIsValid = 1 and (@FromPartValue is null or @FromPartValue = '') and (@ToPartValue is null OR @ToPartValue = ''))    \n" +
                "            THEN     \n" +
                "                set @FromPartValue = '';    \n" +
                "                set @ToPartValue = '';    \n" +
                "			ELSE    \n" +
                "                iF(v_fieldDataType = 'string')    \n" +
                "                THEN	    \n" +
                "					set v_matchCriteria = (select CASE WHEN (v_matchCriteria = '==') THEN ' = ' ELSE    \n" +
                "											(CASE WHEN (v_matchCriteria = '!==') THEN ' != ' ELSE v_matchCriteria END) END);    \n" +
                "  \n" +
                "                    set @FromPartValue = (select CASE WHEN (@FromPartValue is null or @FromPartValue = '' )THEN \"''\" ELSE concat(\"'\", CAST(@FromPartValue as CHAR), \"'\") END);    \n" +
                "  \n" +
                "                    set @ToPartValue = (select CASE WHEN (@ToPartValue  is null or @ToPartValue  = '' ) THEN \"''\" ELSE concat(\"'\", CAST(@ToPartValue  as CHAR), \"'\") END);    \n" +
                "  \n" +
                "					set @SQLValidateStatement1 = CONCAT('select (CASE WHEN(',@FromPartValue ,' ', v_matchCriteria , ' ' ,@ToPartValue,') THEN 1 ELSE 0 END) INTO @IsMatchCriteria;');    \n" +
                "  \n" +
                "					PREPARE query1 FROM @SQLValidateStatement1;                          \n" +
                "					EXECUTE query1;                           \n" +
                "					DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "                    IF(@IsMatchCriteria = 0)    \n" +
                "                    THEN    \n" +
                "						set pMissMatchField = (select (CASE WHEN (pMissMatchField = '') THEN v_fieldTitle ELSE CONCAT(pMissMatchField, \", \", v_fieldTitle) END));    \n" +
                "                    END IF;       \n" +
                "                ELSEIF(v_fieldDataType = 'number')    \n" +
                "                THEN    \n" +
                "					set v_matchCriteria = (select CASE WHEN (v_matchCriteria = '==') THEN ' = ' ELSE    \n" +
                "											(CASE WHEN (v_matchCriteria = '!==') THEN ' != ' ELSE v_matchCriteria END) END);    \n" +
                "  \n" +
                "                    set @FromPartValue = (select CASE WHEN (@FromPartValue is null or @FromPartValue = '' ) THEN CAST(0 as DECIMAl(18,8)) ELSE CAST(@FromPartValue as DECIMAl(18,8)) END);    \n" +
                "                    set @ToPartValue = (select CASE WHEN (@ToPartValue  is null or @ToPartValue  = '' ) THEN CAST(0 as DECIMAl(18,8)) ELSE CAST(@ToPartValue as DECIMAl(18,8)) END);    \n" +
                "  \n" +
                "                    set @SQLValidateStatement1 = CONCAT('select (CASE WHEN(',@FromPartValue ,' ', v_matchCriteria , ' ' ,@ToPartValue,') THEN 1 ELSE 0 END) INTO @IsMatchCriteria;');    \n" +
                "                    PREPARE query1 FROM @SQLValidateStatement1;                          \n" +
                "					EXECUTE query1;                          \n" +
                "					DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "                    IF(@IsMatchCriteria = 0)    \n" +
                "                    THEN    \n" +
                "						set pMissMatchField = (select (CASE WHEN (pMissMatchField = '') THEN v_fieldTitle ELSE CONCAT(pMissMatchField, \", \", v_fieldTitle) END));    \n" +
                "                    END IF;                        \n" +
                "				END IF;				    \n" +
                "			END IF;    \n" +
                "			SET v_IndexNo = v_IndexNo + 1;    \n" +
                "		END WHILE;    \n" +
                "        set pMissMatchField = (select (CASE WHEN pMissMatchField is null THEN '' ELSE pMissMatchField END));    \n" +
                "    END IF;     \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                                    \n" +
                "	IN pFromPartID INT,                        \n" +
                "    IN pNewEpicorType varchar(50),                        \n" +
                "    IN pNewAssemblyType INT,                        \n" +
                "    IN pNewMfgcodeID INT,                        \n" +
                "    IN pNewCustAssyPN varchar(500),                        \n" +
                "    IN pNewPartRev varchar(50),                        \n" +
                "    IN pNewMfgPN varchar(100),                        \n" +
                "    IN pNewAssyCode varchar(50),                        \n" +
                "    IN pNewNickName varchar(50),                        \n" +
                "    IN pNewPIDCode varchar(109),                 \n" +
                "    IN pIsCPN tinyint,            \n" +
                "    IN pIsCustom tinyInt,            \n" +
                "    IN pUserID Int,                                    \n" +
                "    IN pUserRoleId Int,                                    \n" +
                "    IN pIsAttribute tinyint,                                    \n" +
                "    IN pIsSettings tinyint,                                    \n" +
                "    IN pIsAdditionalAttibute tinyint,                                    \n" +
                "    IN pIsPackagingDetail tinyint,                                    \n" +
                "    IN pIsStandards tinyint,                                    \n" +
                "    IN pIsRequiredFunctionalType tinyint,                                    \n" +
                "    IN pIsRequiredMountingType tinyint,                                    \n" +
                "    IN pIsPackagingAliasPart tinyint,                                    \n" +
                "    IN pIsOtherPartName tinyint,                                    \n" +
                "    IN pIsAlternatePart tinyint,                                    \n" +
                "    IN pIsRoHSReplacementPart tinyint,                                    \n" +
                "    IN pIsDriveTool tinyint,                                    \n" +
                "    IN pIsProcessMaterial tinyint,                                    \n" +
                "    IN pIsRequiredMattingParts tinyint,                                    \n" +
                "    IN pIsPickupPad tinyint,                                    \n" +
                "    IN pIsFunctionalTesingTool tinyint,                                    \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                                    \n" +
                "    IN pIsBOM tinyint,            \n" +
                "    IN pIsFluxType tinyInt,            \n" +
                "    IN pIsComments tinyInt            \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "DECLARE vValidationPassed tinyint;                        \n" +
                "DECLARE vFromPartCategory tinyint;                        \n" +
                "DECLARE vFromMfgType varchar(5);                    \n" +
                "DECLARE vCount INT;                                  \n" +
                "DECLARE vToPartID INT;                                  \n" +
                "DECLARE vUserRoleId INT;      \n" +
                "DECLARE vMisMatchFields longtext;                           \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                    \n" +
                "BEGIN                                    \n" +
                "	ROLLBACK;                                    \n" +
                "	RESIGNAL;                                    \n" +
                "END;                                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                    \n" +
                "  BEGIN                                    \n" +
                "	ROLLBACK;                                    \n" +
                "	RESIGNAL;                                    \n" +
                "END;       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail    \n" +
                "    select * from component where 1 = 2;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail    \n" +
                "    select * from component where 1 = 2;    \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail    \n" +
                "    select * from component_alternatepn_validations where 1 = 2;    \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                        \n" +
                "  \n" +
                "    select co.category, m.mfgType                    \n" +
                "      into vFromPartCategory, vFromMfgType                    \n" +
                "	  from component co                     \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID                    \n" +
                "	 where co.id = pFromPartID;                    \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/                    \n" +
                "		set pIsAttribute = 1;                    \n" +
                "        set pIsAdditionalAttibute = 1;                    \n" +
                "    end if;                    \n" +
                "  \n" +
                "	set vCount = 0;                        \n" +
                "    if (vFromPartCategory = 3) then # check category                        \n" +
                "	   select count(1) into vCount                                  \n" +
                "		 from component co                                  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                        \n" +
                "          and co.category = 3                        \n" +
                "		  and co.custAssyPN = pNewCustAssyPN                      \n" +
                "		  and co.rev = pNewPartRev                                  \n" +
                "          and co.isDeleted = 0                                  \n" +
                "		  and co.deletedAt is null;                                 \n" +
                "		if vCount > 0 then                        \n" +
                "			set vValidationPassed = 0;                        \n" +
                "            select 'DUPLICATE_REV' as message;                        \n" +
                "        end if;                        \n" +
                "  \n" +
                "         set vCount = 0;                        \n" +
                "		 select count(1) into vCount                        \n" +
                "			 from component co                        \n" +
                "			where co.nickName != pNewNickName                        \n" +
                "              and co.category = 3                        \n" +
                "              and co.custAssyPN = pNewCustAssyPN                        \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                        \n" +
                "			  and co.isDeleted = 0                        \n" +
                "			  and co.deletedAt is null;                         \n" +
                "		  if vCount > 0 then                        \n" +
                "			set vValidationPassed = 0;                        \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,                        \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName                        \n" +
                "				 from component co                        \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID                        \n" +
                "				where co.nickName != pNewNickName                        \n" +
                "				  and co.category = 3                        \n" +
                "				  and co.custAssyPN = pNewCustAssyPN                        \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                        \n" +
                "				  and co.isDeleted = 0                        \n" +
                "				  and co.deletedAt is null                        \n" +
                "				  limit 1;                        \n" +
                "		  end if;                        \n" +
                "  \n" +
                "		set vCount = 0;                        \n" +
                "		 select count(1) into vCount                        \n" +
                "			 from component co                        \n" +
                "			where co.nickName = pNewNickName                        \n" +
                "              and co.category = 3                        \n" +
                "              and co.custAssyPN != pNewCustAssyPN                        \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                        \n" +
                "			  and co.isDeleted = 0                      \n" +
                "			  and co.deletedAt is null;                        \n" +
                "		 if vCount > 0 then                        \n" +
                "			set vValidationPassed = 0;                        \n" +
                "				select 'DUPLICATE_NICKNAME' as message,                        \n" +
                "                        custAssyPN                        \n" +
                "				 from component co                        \n" +
                "				where co.nickName = pNewNickName                        \n" +
                "				  and co.category = 3                        \n" +
                "				  and co.custAssyPN != pNewCustAssyPN                        \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                        \n" +
                "				  and co.isDeleted = 0                      \n" +
                "				  and co.deletedAt is null                        \n" +
                "				  limit 1;                        \n" +
                "		  end if;                        \n" +
                "	end if;                        \n" +
                "  \n" +
                "    set vCount = 0;                        \n" +
                "		select count(1) into vCount                                  \n" +
                "		 from component co                                  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                        \n" +
                "		  and co.mfgPN = pNewMfgPN                                  \n" +
                "          and co.isDeleted = 0                      \n" +
                "		  and co.deletedAt is null;                                 \n" +
                "	 if vCount > 0 then                        \n" +
                "		set vValidationPassed = 0;                        \n" +
                "        select 'DUPLICATE_MFGPN' as message;                        \n" +
                "     end if;                        \n" +
                "  \n" +
                "    set vCount = 0;                        \n" +
                "		select count(1) into vCount                                  \n" +
                "		 from component co                                  \n" +
                "		where co.PIDCode = pNewPIDCode                                  \n" +
                "		  and co.isDeleted = 0                      \n" +
                "		  and co.deletedAt is null;                             \n" +
                "    if vCount > 0 then                        \n" +
                "		set vValidationPassed = 0;                        \n" +
                "        select 'DUPLICATE_PID' as message;                        \n" +
                "     end if;                        \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed              \n" +
                "		START TRANSACTION;        \n" +
                "		insert into component(                                  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                                  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                                  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                                  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                                  \n" +
                "				rohsText, rohsDeviation, rohsgroupID, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                                  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,                                  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,                    \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,          \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial)                        \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                                  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                                  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                                  \n" +
                "				partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                                  \n" +
                "				rohsText, rohsDeviation, (CASE WHEN (pIsCPN = 1) THEN 0 ELSE rohsgroupID END) , mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                                  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                                  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,detailDescription,                    \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,            \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),            \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),            \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),            \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,          \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial                               \n" +
                "		 from component                                  \n" +
                "		where id = pFromPartID;                                  \n" +
                "		set vToPartID = LAST_INSERT_ID();                                  \n" +
                "		/* As of now Comment this Entry Due to have to cover in next sprint            \n" +
                "		insert into component_images                                  \n" +
                "				(imageURL, refComponentID, createdBy, createByRoleId, updatedBy, updateByRoleId, isDeleted)                                  \n" +
                "		select imageURL, vToPartID,pUserID, pUserRoleId,                                  \n" +
                "				pUserID,pUserRoleId,isDeleted                                  \n" +
                "		 from component_images                                  \n" +
                "		where refComponentID = pFromPartID                                  \n" +
                "		  and isDeleted = false;                                  \n" +
                "		insert into component_datasheets                                  \n" +
                "				(datasheetURL, refComponentID, createdBy, updatedBy, isDeleted, createByRoleId, updateByRoleId)                                  \n" +
                "		select datasheetURL, vToPartID,pUserID ,pUserID,isDeleted,                                  \n" +
                "				pUserRoleId, pUserRoleId                                 \n" +
                "		 from component_datasheets                                  \n" +
                "		where refComponentID = pFromPartID                                  \n" +
                "		  and isDeleted = false;                                   \n" +
                "		*/            \n" +
                "  \n" +
                "		IF pIsAttribute  then                                      \n" +
                "			UPDATE `component` toPart,                                     \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                                    \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                                    \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                                    \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                                    \n" +
                "			SET                                    \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                                    \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                                    \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,                                    \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,                                    \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,                                    \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                                    \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                                    \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                                    \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                                    \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                                    \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,                                    \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,                                    \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,                                    \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,                                    \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,                                    \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,                                    \n" +
                "			toPart.`pitch` = fromPart.pitch,                                    \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,                                    \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,                                    \n" +
                "			toPart.`length` = fromPart.length,                                    \n" +
                "			toPart.`width` = fromPart.width,                                    \n" +
                "			toPart.`heightText` = fromPart.heightText,                                    \n" +
                "			toPart.`height` = fromPart.height,                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                    \n" +
                "		end if;                                    \n" +
                "		IF pIsSettings then                                    \n" +
                "			UPDATE `component` toPart,                                     \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                                    \n" +
                "			`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                                    \n" +
                "			`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,                                    \n" +
                "			`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                                    \n" +
                "			SET                                    \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                                    \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                                    \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                                    \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                                    \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,                                    \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                                    \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                                    \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                                    \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,                                    \n" +
                "			toPart.`eau` = fromPart.eau,                                    \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,                                    \n" +
                "			toPart.`driverToolRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.driverToolRequired  END),                                    \n" +
                "			toPart.`matingPartRquired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.matingPartRquired  END),                                    \n" +
                "			toPart.`pickupPadRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.pickupPadRequired  END),                                    \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,                                    \n" +
                "			toPart.`functionalTestingRequired` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.functionalTestingRequired END),                                    \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),                                    \n" +
                "			toPart.`bomLock` = fromPart.bomLock,                                    \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`                                    \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                    \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                                    \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                                    \n" +
                "		end if;                                    \n" +
                "		IF pIsAdditionalAttibute then                                    \n" +
                "			UPDATE `component` toPart,                                     \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                                     \n" +
                "			from component where id = pFromPartID) fromPart                                    \n" +
                "			SET                                    \n" +
                "			toPart.`tolerance` = fromPart.tolerance,                                    \n" +
                "			toPart.`voltage` = fromPart.voltage,                                    \n" +
                "			toPart.`value` = fromPart.value,                                    \n" +
                "			toPart.`partPackage` = fromPart.partPackage,                                    \n" +
                "			toPart.`powerRating` = fromPart.powerRating,                                    \n" +
                "			toPart.`weight` = fromPart.weight,                                    \n" +
                "			toPart.`feature` = fromPart.feature,                                    \n" +
                "			toPart.`color` = fromPart.color,                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                    \n" +
                "		end if;                                    \n" +
                "		IF pIsPackagingDetail then                                    \n" +
                "			UPDATE `component` toPart,                                     \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                                    \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart                                    \n" +
                "			SET                                    \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,                                    \n" +
                "			toPart.`packagingID` = fromPart.packagingID,                                    \n" +
                "			toPart.`minimum` = fromPart.minimum,                                    \n" +
                "			toPart.`mult` = fromPart.mult,                                    \n" +
                "			toPart.`packageQty` = fromPart.packageQty,                                    \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,                                    \n" +
                "			toPart.`uom` = fromPart.uom,                                    \n" +
                "			toPart.`uomText` = fromPart.uomText,                                    \n" +
                "			toPart.`unit` = fromPart.unit,                                    \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,                                    \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,                                    \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,                                    \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,                                    \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                    \n" +
                "		end if;                                    \n" +
                "		if pIsStandards then                                    \n" +
                "			UPDATE `component` toPart,                                     \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                                    \n" +
                "			SET                                    \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                                    \n" +
                "			toPart.`htsCode` = fromPart.htsCode,                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                    \n" +
                "			INSERT INTO `component_standard_details`                                    \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                                    \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                                    \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                                    \n" +
                "			and not exists (select 1 from component_standard_details csd                                    \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                                    \n" +
                "		end if;                                    \n" +
                "		if pIsRequiredMountingType then                                    \n" +
                "			INSERT INTO `component_requiremountingtype`                                    \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                    \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                    \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                     \n" +
                "			and not exists (select 1 from component_requiremountingtype                                     \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                                    \n" +
                "			set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                                    \n" +
                "			if @requiredMountingTypecount>0 then                                    \n" +
                "				UPDATE `component` toPart                                    \n" +
                "				SET                                    \n" +
                "				toPart.`mountingTypePartRequired` = true,                                    \n" +
                "				toPart.`updatedBy` = pUserID,                                    \n" +
                "				toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "				toPart.`updatedAt` = current_timestamp()                                    \n" +
                "				WHERE toPart.`id` = vToPartID;                                    \n" +
                "			end if;                                    \n" +
                "		end if;                                    \n" +
                "		if pIsRequiredFunctionalType then                                    \n" +
                "			INSERT INTO `component_requirefunctionaltype`                                    \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                    \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                    \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                    \n" +
                "			and not exists (select 1 from component_requirefunctionaltype                                     \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);                                    \n" +
                "			set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                                    \n" +
                "			if @requiredFunctionalTypecount>0 then                                    \n" +
                "				UPDATE `component` toPart                                    \n" +
                "				SET                                    \n" +
                "				toPart.`functionalTypePartRequired` = true,                                    \n" +
                "				toPart.`updatedBy` = pUserID,                                    \n" +
                "				toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "				toPart.`updatedAt` = current_timestamp()                                    \n" +
                "				WHERE toPart.`id` = vToPartID;                                    \n" +
                "			end if;                                    \n" +
                "		end if;                                    \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)    \n" +
                "		THEN    \n" +
                "			set vMisMatchFields  = '';    \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);    \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);    \n" +
                "		END IF;    \n" +
                "		IF(vValidationPassed = 0)    \n" +
                "		THEN    \n" +
                "			ROLLBACK;                                       \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;    \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;           \n" +
                "		ELSE   \n" +
                "			if pIsPackagingAliasPart then         \n" +
                "				set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                                    \n" +
                "				set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                                    \n" +
                "				if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                                    \n" +
                "					# generate new packaging alias group id                                    \n" +
                "					set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                                    \n" +
                "					# update alias group id as new packaging alias group id in packaging alias table                                    \n" +
                "					update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                                    \n" +
                "					# update packaging alias group id as new packaging alias group id in component table                                    \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);       \n" +
                "					# update Identity value with new Max Value     \n" +
                "					UPDATE `identity` SET `maxvalue`= @newPackagingGroupID,`updatedAt`= current_timestamp() ,  \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;     \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then                                    \n" +
                "					# generate new packaging alias group id      \n" +
                "					set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);    \n" +
                "					# Insert data in packaging alias table for ToPartID  & FromPartID                                  \n" +
                "					INSERT INTO `component_packagingalias`                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "					values    \n" +
                "					(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);    \n" +
                "					INSERT INTO `component_packagingalias`                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "					values    \n" +
                "					(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);    \n" +
                "					# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId                                 \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);	     \n" +
                "					# update Identity value with new Max Value     \n" +
                "					UPDATE `identity` SET `maxvalue`= @newPackagingGroupID,`updatedAt`= current_timestamp() ,  \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;     \n" +
                "				elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                                    \n" +
                "				# Insert data in packaging alias table for ToPartID                                    \n" +
                "					INSERT INTO `component_packagingalias`                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "					values    \n" +
                "					(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);    \n" +
                "				# Update data for packaging alias group id for  ToPartID    \n" +
                "					update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;    \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                                    \n" +
                "				# Insert data in packaging alias table for ToPartID                                    \n" +
                "					INSERT INTO `component_packagingalias`                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "					values                                    \n" +
                "					(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                                    \n" +
                "				# Update data for packaging alias group id for  FromPartID		                                    \n" +
                "					update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;       \n" +
                "				end if;                                    \n" +
                "			end if;                                    \n" +
                "			if pIsOtherPartName then                                    \n" +
                "				INSERT INTO `component_otherpn`                                    \n" +
                "				(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                    \n" +
                "				SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                    \n" +
                "				FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                    \n" +
                "				and not exists (select 1 from component_otherpn                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                                    \n" +
                "			end if;                                    \n" +
                "			If pIsAlternatePart then                                    \n" +
                "				INSERT INTO `component_alternatepn`                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                                    \n" +
                "			end if;                        \n" +
                "			if pIsRoHSReplacementPart then                  \n" +
                "				set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);                                    \n" +
                "				set @TorohsgroupID = (select rohsgroupID from component where id = vToPartID);                                    \n" +
                "				if @FromrohsgroupID is not null and @TorohsgroupID is not null then                                    \n" +
                "					# generate new packaging alias group id                                    \n" +
                "					set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);                                    \n" +
                "					# update alias group id as new packaging alias group id in packaging alias table                                    \n" +
                "					  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);                                        \n" +
                "				   # update packaging alias group id as new packaging alias group id in component table                                    \n" +
                "					 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);                                    \n" +
                "				elseif @FromrohsgroupID is not null and @TorohsgroupID is null then                                    \n" +
                "				# Insert data in packaging alias table for ToPartID                                    \n" +
                "					INSERT INTO `component_rohsalternatepn`                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "					values                                    \n" +
                "					(@FromrohsgroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                                    \n" +
                "				# Update data for packaging alias group id for  ToPartID	                                    \n" +
                "					update component set rohsgroupID = @FromrohsgroupID where id = vToPartID;                                    \n" +
                "				elseif @FromrohsgroupID is null and @TorohsgroupID is not null then                                    \n" +
                "				# Insert data in packaging alias table for ToPartID                                    \n" +
                "					INSERT INTO `component_rohsalternatepn`                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "					values                                    \n" +
                "					(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                                    \n" +
                "				# Update data for packaging alias group id for  FromPartID		                                    \n" +
                "					update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;                                    \n" +
                "				end if;                                    \n" +
                "			end if;                                    \n" +
                "			if pIsDriveTool then                                    \n" +
                "				INSERT INTO `component_drivetools`                                    \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                                    \n" +
                "				SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                                    \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                    \n" +
                "				and not exists (select 1 from component_drivetools                                     \n" +
                "				where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                                    \n" +
                "				set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                                    \n" +
                "				if @DriveToolcount>0 then                                    \n" +
                "					UPDATE `component` toPart                                    \n" +
                "					SET                                    \n" +
                "					toPart.`driverToolRequired` = true,                                    \n" +
                "					toPart.`updatedBy` = pUserID,                                    \n" +
                "					toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "					toPart.`updatedAt` = current_timestamp()                                    \n" +
                "					WHERE toPart.`id` = vToPartID;                                    \n" +
                "				end if;                                    \n" +
                "			end if;                                    \n" +
                "			if pIsProcessMaterial then                                    \n" +
                "				INSERT INTO `component_processmaterial`                                    \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                                    \n" +
                "				SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                                    \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                    \n" +
                "				and not exists (select 1 from component_processmaterial                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                                     \n" +
                "			end if;                                    \n" +
                "			if pIsRequiredMattingParts then                                    \n" +
                "				INSERT INTO `component_alternatepn`                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                                    \n" +
                "				set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                                    \n" +
                "				if @mattingpartcount>0 then                                    \n" +
                "					UPDATE `component` toPart                                    \n" +
                "					SET                                    \n" +
                "					toPart.`matingPartRquired` = true,                                    \n" +
                "					toPart.`updatedBy` = pUserID,                                    \n" +
                "					toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "					toPart.`updatedAt` = current_timestamp()                                    \n" +
                "					WHERE toPart.`id` = vToPartID;                                    \n" +
                "				end if;                                    \n" +
                "			end if;                                    \n" +
                "			if pIsPickupPad then                                    \n" +
                "				INSERT INTO `component_alternatepn`                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);                                    \n" +
                "				set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                                    \n" +
                "				if @PickupPadcount>0 then                                    \n" +
                "					UPDATE `component` toPart                                    \n" +
                "					SET                                    \n" +
                "					toPart.`pickupPadRequired` = true,                                    \n" +
                "					toPart.`updatedBy` = pUserID,                                    \n" +
                "					toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "					toPart.`updatedAt` = current_timestamp()                                    \n" +
                "					WHERE toPart.`id` = vToPartID;                                    \n" +
                "				end if;                                    \n" +
                "			end if;                        \n" +
                "			if pIsFunctionalTesingTool then                                    \n" +
                "				INSERT INTO `component_alternatepn`                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                                    \n" +
                "				set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = vToPartID);                                    \n" +
                "				if @FunctionalTesingToolcount>0 then                                    \n" +
                "					UPDATE `component` toPart                                    \n" +
                "					SET                                    \n" +
                "					toPart.`functionalTestingRequired` = true,                                    \n" +
                "					toPart.`updatedBy` = pUserID,                                    \n" +
                "					toPart.`updateByRoleId` = pUserRoleId,                            \n" +
                "					toPart.`updatedAt` = current_timestamp()                                    \n" +
                "					WHERE toPart.`id` = vToPartID;                                    \n" +
                "				end if;                                    \n" +
                "			end if;                                    \n" +
                "			if pIsFinctionalRestingEquipment then                                    \n" +
                "				INSERT INTO `component_functionaltestingequipment`                                    \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                    \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                    \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                    \n" +
                "				and not exists (select 1 from component_functionaltestingequipment                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                                    \n" +
                "			end if;                                    \n" +
                "			if (vFromPartCategory = 3) then                        \n" +
                "				if pIsBOM then                                  \n" +
                "					call Sproc_CopyAssyBOMQuote(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                            \n" +
                "				end if;                                  \n" +
                "				call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                              \n" +
                "			end if;              \n" +
                "			if(pIsComments = 1) THEN             \n" +
                "					INSERT INTO componenet_inspection_requirement_det            \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)            \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),            \n" +
                "					pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;            \n" +
                "					INSERT INTO assembly_revision_comments            \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				            \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where             \n" +
                "						partID = pFromPartID;            \n" +
                "				END IF;            \n" +
                "			commit;                        \n" +
                "			select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;          \n" +
                "		END IF;    \n" +
                "	end if;                                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  09-03-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (744,'1.00','V1',' Update SP Sproc_CheckPackagingAlias_Validation and Sproc_CreateAssemblyRevision  - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break;
            case 744:
                allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2021  *********************************** */
                "UPDATE `page_detail`   \n" +
                "SET `menuRoute` = 'Financialmanagement.suppliercreditnote', `isHideFromMenuList` = '1'   \n" +
                "WHERE pageRoute = 'app.transaction.invoicecreditmemo';  \n" +
                "UPDATE `page_detail`   \n" +
                "	SET `menuRoute` = 'Financialmanagement.supplierdebitnote', `isHideFromMenuList` = '1'  \n" +
                "WHERE pageRoute = 'app.transaction.invoicedebitmemo';  \n" +
                "UPDATE `page_detail`   \n" +
                "	SET `menuRoute` = 'Financialmanagement.supplierpaymenthistory', `isHideFromMenuList` = '1'  \n" +
                "WHERE pageRoute = 'app.transaction.invoicepayment';  \n" +
                "UPDATE `page_detail`  \n" +
                "	SET `menuRoute` = 'Financialmanagement.supplierrma', `isHideFromMenuList` = '1'  \n" +
                "WHERE pageRoute = 'app.transaction.invoicesupplierrma';  \n" +
                "UPDATE `page_detail`  \n" +
                "	SET `menuRoute` = 'Financialmanagement.invoicepackingslip', `isHideFromMenuList` = '1'  \n" +
                "WHERE pageRoute = 'app.transaction.invoicepackingslip';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (745,'1.00','V1','Bug 31289: Hotfix: Issue in the Extended Invoice Price calculation and also in the credit memo header [09-03-21] - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
                );
                break;
            case 745:
                allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(      \n" +
                "	IN pFromPartID INT(11),      \n" +
                "    IN pToPartID INT(11),      \n" +
                "    IN pUserID Int(11),      \n" +
                "    IN pIsAttribute tinyint(1),      \n" +
                "    IN pIsSettings tinyint(1),      \n" +
                "    IN pIsAdditionalAttibute tinyint(1),      \n" +
                "    IN pIsPackagingDetail tinyint(1),      \n" +
                "    IN pIsStandards tinyint(1),      \n" +
                "    IN pIsRequiredFunctionalType tinyint(1),      \n" +
                "    IN pIsRequiredMountingType tinyint(1),      \n" +
                "    IN pIsPackagingAliasPart tinyint(1),      \n" +
                "    IN pIsOtherPartName tinyint(1),      \n" +
                "    IN pIsAlternatePart tinyint(1),      \n" +
                "    IN pIsRoHSReplacementPart tinyint(1),      \n" +
                "    IN pIsDriveTool tinyint(1),      \n" +
                "    IN pIsProcessMaterial tinyint(1),      \n" +
                "    IN pIsRequiredMattingParts tinyint(1),      \n" +
                "    IN pIsPickupPad tinyint(1),      \n" +
                "    IN pIsProgram tinyint(1),      \n" +
                "    IN pIsFunctionalTesingTool tinyint(1),      \n" +
                "    IN pIsFinctionalRestingEquipment tinyint(1)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DECLARE vValidationPassed tinyint;      \n" +
                "DECLARE vMisMatchFields longtext;    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
                "  BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;       \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail    \n" +
                "    select * from component where 1 = 2;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail    \n" +
                "    select * from component where 1 = 2;    \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail    \n" +
                "    select * from component_alternatepn_validations where 1 = 2;    \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                  \n" +
                "  \n" +
                "	START TRANSACTION;    \n" +
                "	IF pIsAttribute  then        \n" +
                "		UPDATE `component` toPart,       \n" +
                "		(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,      \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,      \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,      \n" +
                "		`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart      \n" +
                "		SET      \n" +
                "		toPart.`functionalCategoryID` = fromPart.functionalCategoryID,      \n" +
                "		toPart.`functionalCategoryText` = fromPart.functionalCategoryText,      \n" +
                "		toPart.`mountingTypeID` = fromPart.mountingTypeID,      \n" +
                "		toPart.`mountingTypeText` = fromPart.mountingTypeText,      \n" +
                "		toPart.`operatingTemp` = fromPart.operatingTemp,      \n" +
                "		toPart.`minOperatingTemp` = fromPart.minOperatingTemp,      \n" +
                "		toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,      \n" +
                "		toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,      \n" +
                "		toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,      \n" +
                "		toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,      \n" +
                "		toPart.`connecterTypeID` = fromPart.connecterTypeID,      \n" +
                "		toPart.`connectorTypeText` = fromPart.connectorTypeText,      \n" +
                "		toPart.`noOfPositionText` = fromPart.noOfPositionText,      \n" +
                "		toPart.`noOfPosition` = fromPart.noOfPosition,      \n" +
                "		toPart.`noOfRowsText` = fromPart.noOfRowsText,      \n" +
                "		toPart.`noOfRows` = fromPart.noOfRows,      \n" +
                "		toPart.`pitch` = fromPart.pitch,      \n" +
                "		toPart.`pitchMating` = fromPart.pitchMating,      \n" +
                "		toPart.`sizeDimension` = fromPart.sizeDimension,      \n" +
                "		toPart.`length` = fromPart.length,      \n" +
                "		toPart.`width` = fromPart.width,      \n" +
                "		toPart.`heightText` = fromPart.heightText,      \n" +
                "		toPart.`height` = fromPart.height,      \n" +
                "		toPart.`updatedBy` = pUserID,      \n" +
                "		toPart.`updatedAt` = current_timestamp()      \n" +
                "		WHERE toPart.`id` = pToPartID;      \n" +
                "	end if;      \n" +
                "	IF pIsSettings then      \n" +
                "		UPDATE `component` toPart,       \n" +
                "		(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,      \n" +
                "		`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,      \n" +
                "		`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,      \n" +
                "		`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart      \n" +
                "		SET      \n" +
                "		toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,      \n" +
                "		toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,      \n" +
                "		toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,      \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,      \n" +
                "		toPart.`selfLifeDays` = fromPart.selfLifeDays,      \n" +
                "		toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,      \n" +
                "		toPart.`maxPriceLimit` = fromPart.maxPriceLimit,      \n" +
                "		toPart.`maxQtyonHand` = fromPart.maxQtyonHand,      \n" +
                "		toPart.`saftyStock` = fromPart.saftyStock,      \n" +
                "		toPart.`eau` = fromPart.eau,       \n" +
                "		toPart.`businessRisk` = fromPart.businessRisk,      \n" +
                "		toPart.`driverToolRequired` = fromPart.driverToolRequired,      \n" +
                "		toPart.`matingPartRquired` = fromPart.matingPartRquired,      \n" +
                "		toPart.`pickupPadRequired` = fromPart.pickupPadRequired,      \n" +
                "		toPart.`programingRequired` = fromPart.programingRequired,      \n" +
                "		toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,      \n" +
                "		toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,      \n" +
                "		toPart.`bomLock` = fromPart.bomLock,      \n" +
                "		toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,      \n" +
                "		toPart.`updatedBy` = pUserID,      \n" +
                "		toPart.`updatedAt` = current_timestamp()      \n" +
                "		WHERE toPart.`id` = pToPartID;      \n" +
                "		INSERT INTO `component_temperature_sensitive_data`      \n" +
                "		(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)      \n" +
                "		select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, pToPartID `refComponentID`      \n" +
                "		from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;      \n" +
                "	end if;      \n" +
                "	IF pIsAdditionalAttibute then      \n" +
                "		UPDATE `component` toPart,       \n" +
                "		(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`       \n" +
                "		from component where id = pFromPartID) fromPart      \n" +
                "		SET      \n" +
                "		toPart.`tolerance` = fromPart.tolerance,      \n" +
                "		toPart.`voltage` = fromPart.voltage,      \n" +
                "		toPart.`value` = fromPart.value,      \n" +
                "		toPart.`partPackage` = fromPart.partPackage,      \n" +
                "		toPart.`powerRating` = fromPart.powerRating,      \n" +
                "		toPart.`weight` = fromPart.weight,      \n" +
                "		toPart.`feature` = fromPart.feature,      \n" +
                "		toPart.`color` = fromPart.color,      \n" +
                "		toPart.`updatedBy` = pUserID,      \n" +
                "		toPart.`updatedAt` = current_timestamp()      \n" +
                "		WHERE toPart.`id` = pToPartID;      \n" +
                "	end if;      \n" +
                "	IF pIsPackagingDetail then      \n" +
                "		UPDATE `component` toPart,       \n" +
                "		(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,      \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom` from component where id = pFromPartID) fromPart      \n" +
                "		SET      \n" +
                "		toPart.`deviceMarking` = fromPart.deviceMarking,      \n" +
                "		toPart.`packagingID` = fromPart.packagingID,      \n" +
                "		toPart.`minimum` = fromPart.minimum,      \n" +
                "		toPart.`mult` = fromPart.mult,      \n" +
                "		toPart.`packageQty` = fromPart.packageQty,      \n" +
                "		toPart.`uomClassID` = fromPart.uomClassID,      \n" +
                "		toPart.`uom` = fromPart.uom,      \n" +
                "		toPart.`uomText` = fromPart.uomText,      \n" +
                "		toPart.`unit` = fromPart.unit,      \n" +
                "		toPart.`pcbPerArray` = fromPart.pcbPerArray,      \n" +
                "		toPart.`grossWeight` = fromPart.grossWeight,      \n" +
                "		toPart.`grossWeightUom` = fromPart.grossWeightUom,      \n" +
                "		toPart.`packagingWeight` = fromPart.packagingWeight,      \n" +
                "		toPart.`packagingWeightUom` = fromPart.packagingWeightUom,      \n" +
                "		toPart.`updatedBy` = pUserID,      \n" +
                "		toPart.`updatedAt` = current_timestamp()      \n" +
                "		WHERE toPart.`id` = pToPartID;      \n" +
                "	end if;      \n" +
                "	if pIsStandards then      \n" +
                "		UPDATE `component` toPart,       \n" +
                "		(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart      \n" +
                "		SET      \n" +
                "		toPart.`countryOfOrigin` = fromPart.countryOfOrigin,      \n" +
                "		toPart.`htsCode` = fromPart.htsCode,      \n" +
                "		toPart.`updatedBy` = pUserID,      \n" +
                "		toPart.`updatedAt` = current_timestamp()      \n" +
                "		WHERE toPart.`id` = pToPartID;      \n" +
                "		INSERT INTO `component_standard_details`      \n" +
                "		(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)      \n" +
                "		select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`      \n" +
                "		from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null      \n" +
                "		and not exists (select 1 from component_standard_details csd      \n" +
                "		where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));      \n" +
                "	end if;      \n" +
                "	if pIsRequiredMountingType then      \n" +
                "		INSERT INTO `component_requiremountingtype`      \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)      \n" +
                "		SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`      \n" +
                "		FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null       \n" +
                "		and not exists (select 1 from component_requiremountingtype       \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);      \n" +
                "		set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);      \n" +
                "		if @requiredMountingTypecount>0 then      \n" +
                "			UPDATE `component` toPart      \n" +
                "			SET      \n" +
                "			toPart.`mountingTypePartRequired` = true,      \n" +
                "			toPart.`updatedBy` = pUserID,      \n" +
                "			toPart.`updatedAt` = current_timestamp()      \n" +
                "			WHERE toPart.`id` = pToPartID;      \n" +
                "		end if;      \n" +
                "	end if;      \n" +
                "	if pIsRequiredFunctionalType then      \n" +
                "		INSERT INTO `component_requirefunctionaltype`      \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)      \n" +
                "		SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`      \n" +
                "		FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null      \n" +
                "		and not exists (select 1 from component_requirefunctionaltype       \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);      \n" +
                "		set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);      \n" +
                "		if @requiredFunctionalTypecount>0 then      \n" +
                "			UPDATE `component` toPart      \n" +
                "			SET      \n" +
                "			toPart.`functionalTypePartRequired` = true,      \n" +
                "			toPart.`updatedBy` = pUserID,      \n" +
                "			toPart.`updatedAt` = current_timestamp()      \n" +
                "			WHERE toPart.`id` = pToPartID;      \n" +
                "		end if;      \n" +
                "	end if;      \n" +
                "	IF(pIsPackagingAliasPart)    \n" +
                "	THEN    \n" +
                "		set vMisMatchFields  = '';    \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID, pFromPartID, vMisMatchFields);    \n" +
                "		set vValidationPassed = (select CASE WHEN (vMisMatchFields != '') THEN 0 ELSE 1 END);    \n" +
                "	END IF;   \n" +
                "	IF(vValidationPassed = 0)    \n" +
                "	THEN                                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;    \n" +
                "		select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;         \n" +
                "	ELSE  \n" +
                "		if pIsPackagingAliasPart then      \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);      \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);      \n" +
                "			select @FromPackagingAliasID,@ToPackagingAliasID;    \n" +
                "			if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then      \n" +
                "				# generate new packaging alias group id      \n" +
                "				set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);      \n" +
                "				# update alias group id as new packaging alias group id in packaging alias table      \n" +
                "				update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);      \n" +
                "				# update packaging alias group id as new packaging alias group id in component table      \n" +
                "				update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);      \n" +
                "				# update Identity value with new Max Value     \n" +
                "				UPDATE `identity` SET `maxvalue`= @newPackagingGroupID,`updatedAt`= current_timestamp() ,    \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;    \n" +
                "			elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then                                    \n" +
                "				# generate new packaging alias group id      \n" +
                "				set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);    \n" +
                "				select @newPackagingGroupID;    \n" +
                "				# Insert data in packaging alias table for ToPartID  & FromPartID                                  \n" +
                "				INSERT INTO `component_packagingalias`                                    \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "				values    \n" +
                "				(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);    \n" +
                "				INSERT INTO `component_packagingalias`                                    \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                    \n" +
                "				values    \n" +
                "				(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);    \n" +
                "  \n" +
                "				# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId                                 \n" +
                "				update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);	  \n" +
                "                # update Identity value with new Max Value       \n" +
                "                UPDATE `identity` SET `maxvalue`= @newPackagingGroupID,`updatedAt`= current_timestamp() ,    \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;       \n" +
                "			elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then      \n" +
                "  \n" +
                "			# Insert data in packaging alias table for ToPartID      \n" +
                "				INSERT INTO `component_packagingalias`      \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)      \n" +
                "				values      \n" +
                "				(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);      \n" +
                "			# Update data for packaging alias group id for  ToPartID	      \n" +
                "				update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;      \n" +
                "  \n" +
                "			elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then      \n" +
                "  \n" +
                "			# Insert data in packaging alias table for ToPartID      \n" +
                "				INSERT INTO `component_packagingalias`      \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)      \n" +
                "				values      \n" +
                "				(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);      \n" +
                "			# Update data for packaging alias group id for  FromPartID		      \n" +
                "				update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;      \n" +
                "  \n" +
                "			end if;      \n" +
                "		end if;      \n" +
                "		if pIsOtherPartName then      \n" +
                "			INSERT INTO `component_otherpn`      \n" +
                "			(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)      \n" +
                "			SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`      \n" +
                "			FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null      \n" +
                "			and not exists (select 1 from component_otherpn       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);      \n" +
                "		end if;      \n" +
                "		If pIsAlternatePart then      \n" +
                "			INSERT INTO `component_alternatepn`      \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)      \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`      \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID      \n" +
                "			and not exists (select 1 from component_alternatepn       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);      \n" +
                "		end if;      \n" +
                "		if pIsRoHSReplacementPart then      \n" +
                "  \n" +
                "			set @FromrohsgroupID = (select rohsgroupID from component where id = pFromPartID);      \n" +
                "			set @TorohsgroupID = (select rohsgroupID from component where id = pToPartID);      \n" +
                "			if @FromrohsgroupID is not null and @TorohsgroupID is not null then      \n" +
                "				# generate new packaging alias group id      \n" +
                "				set @newrohsgroupID = (SELECT max(`aliasgroupID`)+1 FROM `component_rohsalternatepn` WHERE isdeleted=0);      \n" +
                "				# update alias group id as new packaging alias group id in packaging alias table      \n" +
                "				  update component_rohsalternatepn set aliasgroupID = @newrohsgroupID where isDeleted = 0 and deletedat is null and aliasgroupID in (@FromrohsgroupID,@TorohsgroupID);          \n" +
                "			   # update packaging alias group id as new packaging alias group id in component table      \n" +
                "				 update component set rohsgroupID = @newrohsgroupID where rohsgroupID in (@FromrohsgroupID,@TorohsgroupID);      \n" +
                "			elseif @FromrohsgroupID is not null and @TorohsgroupID is null then      \n" +
                "  \n" +
                "			# Insert data in packaging alias table for ToPartID      \n" +
                "				INSERT INTO `component_rohsalternatepn`      \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)      \n" +
                "				values      \n" +
                "				(@FromrohsgroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);      \n" +
                "			# Update data for packaging alias group id for  ToPartID	      \n" +
                "				update component set rohsgroupID = @FromrohsgroupID where id = pToPartID;      \n" +
                "  \n" +
                "			elseif @FromrohsgroupID is null and @TorohsgroupID is not null then      \n" +
                "  \n" +
                "			# Insert data in packaging alias table for ToPartID      \n" +
                "				INSERT INTO `component_rohsalternatepn`      \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)      \n" +
                "				values      \n" +
                "				(@TorohsgroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);      \n" +
                "			# Update data for packaging alias group id for  FromPartID		      \n" +
                "				update component set rohsgroupID = @TorohsgroupID where id = pFromPartID;      \n" +
                "  \n" +
                "			end if;      \n" +
                "		end if;      \n" +
                "		if pIsDriveTool then      \n" +
                "			INSERT INTO `component_drivetools`      \n" +
                "			(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)      \n" +
                "			SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`      \n" +
                "			FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID      \n" +
                "			and not exists (select 1 from component_drivetools       \n" +
                "			where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);      \n" +
                "  \n" +
                "			set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);      \n" +
                "			if @DriveToolcount>0 then      \n" +
                "				UPDATE `component` toPart      \n" +
                "				SET      \n" +
                "				toPart.`driverToolRequired` = true,      \n" +
                "				toPart.`updatedBy` = pUserID,      \n" +
                "				toPart.`updatedAt` = current_timestamp()      \n" +
                "				WHERE toPart.`id` = pToPartID;      \n" +
                "			end if;      \n" +
                "		end if;      \n" +
                "		if pIsProcessMaterial then      \n" +
                "			INSERT INTO `component_processmaterial`      \n" +
                "			(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)      \n" +
                "			SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`      \n" +
                "			FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID      \n" +
                "			and not exists (select 1 from component_processmaterial       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);       \n" +
                "		end if;      \n" +
                "		if pIsRequiredMattingParts then      \n" +
                "			INSERT INTO `component_alternatepn`      \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)      \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`      \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID      \n" +
                "			and not exists (select 1 from component_alternatepn       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);      \n" +
                "  \n" +
                "			set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);      \n" +
                "			if @mattingpartcount>0 then      \n" +
                "				UPDATE `component` toPart      \n" +
                "				SET      \n" +
                "				toPart.`matingPartRquired` = true,      \n" +
                "				toPart.`updatedBy` = pUserID,      \n" +
                "				toPart.`updatedAt` = current_timestamp()      \n" +
                "				WHERE toPart.`id` = pToPartID;      \n" +
                "			end if;      \n" +
                "  \n" +
                "		end if;      \n" +
                "		if pIsPickupPad then      \n" +
                "		INSERT INTO `component_alternatepn`      \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)      \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`      \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID      \n" +
                "			and not exists (select 1 from component_alternatepn       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);      \n" +
                "  \n" +
                "			set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);      \n" +
                "			if @PickupPadcount>0 then      \n" +
                "				UPDATE `component` toPart      \n" +
                "				SET      \n" +
                "				toPart.`pickupPadRequired` = true,      \n" +
                "				toPart.`updatedBy` = pUserID,      \n" +
                "				toPart.`updatedAt` = current_timestamp()      \n" +
                "				WHERE toPart.`id` = pToPartID;      \n" +
                "			end if;      \n" +
                "		end if;      \n" +
                "		if pIsProgram then      \n" +
                "			INSERT INTO `component_alternatepn`      \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)      \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`      \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 3 and isDeleted = 0 and deletedAt is null and componentID != pToPartID      \n" +
                "			and not exists (select 1 from component_alternatepn       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 3);      \n" +
                "  \n" +
                "			set @Programcount =  (select count(1) from component_alternatepn where type = '3' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);      \n" +
                "			if @Programcount>0 then      \n" +
                "				UPDATE `component` toPart      \n" +
                "				SET      \n" +
                "				toPart.`programingRequired` = true,      \n" +
                "				toPart.`updatedBy` = pUserID,      \n" +
                "				toPart.`updatedAt` = current_timestamp()      \n" +
                "				WHERE toPart.`id` = pToPartID;      \n" +
                "			end if;      \n" +
                "		end if;      \n" +
                "		if pIsFunctionalTesingTool then      \n" +
                "			INSERT INTO `component_alternatepn`      \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)      \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`      \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID      \n" +
                "			and not exists (select 1 from component_alternatepn       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);      \n" +
                "  \n" +
                "			set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);      \n" +
                "			if @FunctionalTesingToolcount>0 then      \n" +
                "				UPDATE `component` toPart      \n" +
                "				SET      \n" +
                "				toPart.`functionalTestingRequired` = true,      \n" +
                "				toPart.`updatedBy` = pUserID,      \n" +
                "				toPart.`updatedAt` = current_timestamp()      \n" +
                "				WHERE toPart.`id` = pToPartID;      \n" +
                "			end if;      \n" +
                "		end if;      \n" +
                "		if pIsFinctionalRestingEquipment then      \n" +
                "			INSERT INTO `component_functionaltestingequipment`      \n" +
                "			(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)      \n" +
                "			SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`      \n" +
                "			FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null      \n" +
                "			and not exists (select 1 from component_functionaltestingequipment       \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);      \n" +
                "		end if;      \n" +
                "		commit;      \n" +
                "		select * from component where id = pToPartID;      \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-03-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (746,'1.00','V1',' Update SP for Sproc_CopyPartDetail- SHBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break;
        case 746:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_validateScanMissingUMIDOnly` ;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(                                                        \n" +
                "	IN pUMID VARCHAR(14),                                                       \n" +
                "	IN ppartID INT,                                                    \n" +
                "	IN pwoOpID INT,                                                         \n" +
                "	IN pwoTransID INT,                                                      \n" +
                "	IN pemployeeId INT,                                                      \n" +
                "	IN pcheckKitAllocation INT,                                                      \n" +
                "	IN pverificationType VARCHAR(255),                                                      \n" +
                "	IN pisVerify INT,                                                         \n" +
                "	IN ptransactionType VARCHAR(1),                                               \n" +
                "	IN prfqLineItemsID INT,                                             \n" +
                "	IN pisConfirmed INT,                                              \n" +
                "	IN pwoID INT,                         \n" +
                "	IN pisPlacementTracking INT,                                            \n" +
                "	IN psaveUMIDDetails INT,                                               \n" +
                "	IN prefDesig VARCHAR(3000),                                            \n" +
                "	IN passyQty INT  ,            \n" +
                "    IN pConsumeQty INT,            \n" +
                "    IN pUMIDAllocateStatus INT,            \n" +
                "    IN pCreatedBy VARCHAR(255),               \n" +
                "    IN pCreateByRoleId INT            \n" +
                ")  \n" +
                "BEGIN                                             \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;                                                                \n" +
                "	DECLARE temp_pidcode VARCHAR(100);                                                        \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);                                                      \n" +
                "	DECLARE uidVerified INT DEFAULT 0;                                                       \n" +
                "	DECLARE temp_umid_comp_id INT;                                                       \n" +
                "	DECLARE temp_umid_stock_id INT;                                                      \n" +
                "	DECLARE temp_umid_pkgQty INT;                                                      \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);                                                     \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);                                                   \n" +
                "	DECLARE temp_umid_package_id INT;                                                 \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);                                                                 \n" +
                "	DECLARE temp_last_inserted_umid_id INT;                                                      \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;                                                        \n" +
                "	DECLARE flag_tempVerificationRequire INT DEFAULT 0;                                                                   \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;                                             \n" +
                "	DECLARE tot_stock_umid INT DEFAULT 0;            \n" +
                "    DECLARE allocated_stock_umid INT DEFAULT 0 ;            \n" +
                "    DECLARE kit_qty INT DEFAULT 0 ;            \n" +
                "    DECLARE temp_salesorder_detID INT ;            \n" +
                "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;          \n" +
                "    DECLARE vParentWoId INT;      \n" +
                "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit            \n" +
                "	-- create temporary table for error                                                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;                                                         \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error                                                        \n" +
                "	(                                                        \n" +
                "	     errorText VARCHAR(2000),                                                       \n" +
                "	     isFeederError INT,                                                      \n" +
                "	     isUMIDError INT,                                                      \n" +
                "	     isConfirmation INT,                                                       \n" +
                "	     isMessage INT,                                                       \n" +
                "	     isInformation INT,                                                       \n" +
                "	     stringText1 VARCHAR(1000),                                                       \n" +
                "	     stringText2 VARCHAR(1000),                                                       \n" +
                "	     stringText3 VARCHAR(1000)                                                                                            \n" +
                "	);                                    \n" +
                "		#Get parent WO ID in case of revise  work order.      \n" +
                "		WITH RECURSIVE RevWo AS  (      \n" +
                "			SELECT	woId,					      \n" +
                "					1 lvl  ,      \n" +
                "					terminateWOID      \n" +
                "			FROM workorder       \n" +
                "			WHERE woId = pwoID      \n" +
                "			AND isDeleted = 0      \n" +
                "			UNION ALL      \n" +
                "			SELECT	wo.woID,					      \n" +
                "					rw.lvl +1 lvl,      \n" +
                "					wo.terminateWOID      \n" +
                "			 FROM workorder wo            \n" +
                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID      \n" +
                "			 WHERE wo.isDeleted = 0	      \n" +
                "			 )       \n" +
                "			SELECT rev.woID  INTO vParentWoId      \n" +
                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;      \n" +
                "  \n" +
                "		#Check for kit allocation flag from BOM Line           \n" +
                "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck          \n" +
                "		FROM rfq_lineitems rli           \n" +
                "		WHERE rli.id = prfqLineItemsID                  \n" +
                "        AND rli.isDeleted = 0 ;          \n" +
                "  \n" +
                "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);          \n" +
                "  \n" +
                "		#CHeck Only BOM Part allowed          \n" +
                "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla           \n" +
                "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock           \n" +
                "											WHERE uid = pUMID AND isDeleted = 0 )          \n" +
                "				AND rla.isDeleted = 0) = 0 THEN          \n" +
                "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                         \n" +
                "        END IF;                  \n" +
                "	# umid transaction details based on umid                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;                                    \n" +
                "  \n" +
                "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN                                          \n" +
                "		SET flag_tempVerificationRequire = 1;                                          \n" +
                "	END IF;                                          \n" +
                "  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details                                                       \n" +
                "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');                                                  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN                                                   \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId                                                       \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id                                                  \n" +
                "		FROM temp_umid_details;                                                \n" +
                "  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                           \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details); 		                \n" +
                "		IF(flag_tempLineCount = 1) THEN                \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list                                           \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                        \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN                     \n" +
                "			UPDATE temp_umid_details tud                 \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL                 \n" +
                "			AND id = prfqLineItemsID)                \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;                 \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                           \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                           \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;                  \n" +
                "		END IF;              \n" +
                "  \n" +
                "  \n" +
                "        #step -2 Already  Allocated in Given KIT of same WO              \n" +
                "        IF (pUMIDAllocateStatus = 0 ) THEN			          \n" +
                "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))              \n" +
                "            INTO kit_qty            \n" +
                "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID            \n" +
                "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )            \n" +
                "			AND STATUS = 'A';            \n" +
                "  \n" +
                "            IF kit_qty > 0 THEN            \n" +
                "				IF  kit_qty >= pConsumeQty THEN 				            \n" +
                "					SET pUMIDAllocateStatus = 1 ;            \n" +
                "				ELSEIF kit_qty < pConsumeQty THEN                 \n" +
                "					SET pUMIDAllocateStatus = 2 ;                            \n" +
                "				END IF ;              \n" +
                "                #SELECT 'LINE 122' , pUMIDAllocateStatus;          \n" +
                "            ELSE             \n" +
                "				SELECT SUM(css.pkgQty) INTO tot_stock_umid             \n" +
                "				FROM component_sid_stock AS css            \n" +
                "				WHERE css.uid = pUMID             \n" +
                "				AND css.isDeleted = 0;             \n" +
                "  \n" +
                "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid            \n" +
                "				FROM kit_allocation AS ka_all            \n" +
                "				WHERE ka_all.uid = pUMID             \n" +
                "				AND  ka_all.status IN ('A','R')            \n" +
                "				GROUP BY ka_all.uid ;            \n" +
                "  \n" +
                "				#step - 3 Check Un-Allocated  stock available or not             \n" +
                "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN 								            \n" +
                "					SET pUMIDAllocateStatus = 3;             \n" +
                "					#allocate kit from un allocated stock            \n" +
                "				END IF;                        \n" +
                "                #SELECT 'LINE 139' , pUMIDAllocateStatus;          \n" +
                "            END IF;                       \n" +
                "        END IF;            \n" +
                "        #SELECT 'LINE 142' , pUMIDAllocateStatus;          \n" +
                "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate              \n" +
                "  \n" +
                "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN                \n" +
                "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                \n" +
                "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                \n" +
                "					SET uidVerified = 1;                 \n" +
                "				ELSE                 \n" +
                "					SET uidVerified = 0;                 \n" +
                "					SET result = 0;                \n" +
                "				END IF;                   \n" +
                "			ELSE                  \n" +
                "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN                                   \n" +
                "					SET result = 0;                  \n" +
                "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN                                      \n" +
                "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                      \n" +
                "				ELSE                \n" +
                "						#take first sales order default in case of multiple sales order            \n" +
                "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs            \n" +
                "						INTO temp_salesorder_detID            \n" +
                "						FROM  workorder_salesorder_details            \n" +
                "						WHERE woID = IFNULL(vParentWoId,pwoID)      \n" +
                "						AND isDeleted = 0            \n" +
                "						LIMIT 1;					            \n" +
                "					-- check verification required                                                \n" +
                "					-- than verification require than check from which page scan/verify                                          \n" +
                "					IF(flag_tempVerificationRequire = 0) THEN -- verification not require                                            \n" +
                "						-- if scan option selected than check for already scanned in flow first                                           \n" +
                "						-- if not scanned than add as verified umid directly                                          \n" +
                "						IF(pisVerify <> 1) THEN                                          \n" +
                "							SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details                                                                 \n" +
                "							WHERE transactionType='U'                                             \n" +
                "							AND refsidid = temp_umid_stock_id                                                                \n" +
                "							AND mfgPNID=temp_umid_comp_id                                                        \n" +
                "							AND reelStatus=\"C\" AND deletedAt IS NULL                                \n" +
                "							AND woOPID = pwoOpID                              \n" +
                "							AND employeeID=pemployeeId;                       \n" +
                "							-- if already scanned than give message                                          \n" +
                "							-- else add as verified umid directly                                          \n" +
                "							IF(temp_feeder_transID > 0) THEN                                                      \n" +
                "								-- FAILED                                                \n" +
                "								-- SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);      \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                        \n" +
                "								INSERT INTO workorder_trans_umid_details                                                        \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,                                                        \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                        \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                    \n" +
                "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,                   \n" +
                "									`verifiedOn`,`reelStatus`, refDesig)                                                         \n" +
                "								VALUES                                                        \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,                                                         \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                        \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,                                                       \n" +
                "									pCreatedBy, pCreatedBy, 1, pemployeeId,                   \n" +
                "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig);                                                    \n" +
                "  \n" +
                "	  							-- VERIFIED                                 \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS                                  \n" +
                "								SELECT LAST_INSERT_ID() AS id;                                                       \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                               \n" +
                "								SET uidVerified = 1;                                                  \n" +
                "							ELSE                      \n" +
                "								IF psaveUMIDDetails = 1 THEN            \n" +
                "									-- Condition for SMT material / For SMT UMID no need to do kit allocation            \n" +
                "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN            \n" +
                "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;          \n" +
                "										# Check wheather kit allocation required  or not          \n" +
                "  \n" +
                "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN           \n" +
                "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);            \n" +
                "										ELSE           \n" +
                "											SET result = 1;          \n" +
                "										END IF;              \n" +
                "									ELSE            \n" +
                "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND                                                 \n" +
                "												wop.partID = temp_umid_comp_id AND                                                 \n" +
                "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN                                                \n" +
                "											SET result = 1;              \n" +
                "										END IF;            \n" +
                "									END IF;            \n" +
                "  \n" +
                "									IF (result = 1 ) THEN            \n" +
                "										SET result = 1;             \n" +
                "										INSERT INTO workorder_trans_umid_details                                                      \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                      \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                      \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,                 \n" +
                "										`verifiedOn`, `reelStatus`, refDesig, consumeQty)                                                       \n" +
                "										VALUES                                                      \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,                                                       \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                      \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                     \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,                 \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty);                                                  \n" +
                "										-- VERIFIED                                \n" +
                "										CREATE TEMPORARY TABLE temp_umid_transIDs AS                                \n" +
                "										SELECT LAST_INSERT_ID() AS id;                                                     \n" +
                "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                              \n" +
                "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                                         \n" +
                "										SET uidVerified = 1;             \n" +
                "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN            \n" +
                "										SET pUMIDAllocateStatus = 4;            \n" +
                "									END IF;                \n" +
                "								END IF;								                                             \n" +
                "							END IF;                                          \n" +
                "						ELSE                  \n" +
                "							-- if already scanned than verify same umid for history                                          \n" +
                "							-- if not scanned yet than give message                                     \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                \n" +
                "								SET uidVerified = 1;                 \n" +
                "							ELSE                 \n" +
                "								SET uidVerified = 0;                 \n" +
                "								SET result = 0;                \n" +
                "							END IF;                                         \n" +
                "						END IF;                                          \n" +
                "					ELSE                                               \n" +
                "						-- verification require than check from which page/popup                                          \n" +
                "						-- if from scan popup than add umid as scanned new record                                          \n" +
                "						-- else check for verify flow                                          \n" +
                "                        #select  prfqLineItemsID;            \n" +
                "						IF (pisVerify <> 1) THEN            \n" +
                "							IF psaveUMIDDetails = 1 THEN            \n" +
                "								-- Condition for SMT material / For SMT UMID no need to do kit allocation            \n" +
                "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN            \n" +
                "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;          \n" +
                "                                # Check wheather kit allocation required  or not          \n" +
                "  \n" +
                "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN           \n" +
                "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);            \n" +
                "                                    ELSE           \n" +
                "										SET result = 1;          \n" +
                "                                    END IF; 									          \n" +
                "                                ELSE            \n" +
                "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND                                                 \n" +
                "											wop.partID = temp_umid_comp_id AND                                                 \n" +
                "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN                                                \n" +
                "										SET result = 1;              \n" +
                "									END IF;            \n" +
                "								END IF;            \n" +
                "                                #select 'Line261' , result;          \n" +
                "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN            \n" +
                "                                IF result = 1 THEN            \n" +
                "									SET result = 1;                 \n" +
                "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;          \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                      \n" +
                "									INSERT INTO workorder_trans_umid_details                                                      \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                      \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                      \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                  \n" +
                "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)                                                       \n" +
                "									VALUES                                                      \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,                                                       \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                      \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                     \n" +
                "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);                                                  \n" +
                "									-- SCANNED                               \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS                                \n" +
                "									SELECT LAST_INSERT_ID() AS id;              \n" +
                "                                    -- Condition for SMT material / For SMT UMID , only successful scan message            \n" +
                "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN            \n" +
                "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                             \n" +
                "										SET uidVerified = 1;                  \n" +
                "                                    ELSE            \n" +
                "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                             \n" +
                "										SET uidVerified = 1;                  \n" +
                "									END IF;            \n" +
                "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN            \n" +
                "									SET pUMIDAllocateStatus = 4;                                                    \n" +
                "                                END IF;                \n" +
                "							END IF;            \n" +
                "						ELSE                         \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                \n" +
                "								SET uidVerified = 1;                 \n" +
                "							ELSE                 \n" +
                "								SET uidVerified = 0;                 \n" +
                "								SET result = 0;                \n" +
                "							END IF;                                                 \n" +
                "						END IF;                                     \n" +
                "					END IF;                \n" +
                "				END IF;                \n" +
                "			END IF;                \n" +
                "		#END IF;                \n" +
                "	END IF;     	            \n" +
                "	#END IF;	               \n" +
                "  \n" +
                "	#select '10' , 'AT END' ;             \n" +
                "	INSERT INTO `uid_verification_history`(                                                          \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,                                                          \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                                          \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,		                                                             \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,                                                       \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)                                                          \n" +
                "	VALUES (                                                      \n" +
                "		pUMID,							'',				temp_umid_comp_id,                                                      \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,                                                      \n" +
                "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                                      \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),                                                        \n" +
                "		pwoTransID, 						NULL,				pverificationType                                                      \n" +
                "	);                                              \n" +
                "  \n" +
                "	#0. return assy part list	                                          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list                                             \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;                \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN                     \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                          \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;                 \n" +
                "	ELSE                       \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN                    \n" +
                "			-- verified UMID                \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;                                          \n" +
                "		ELSE			                    \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                                          \n" +
                "		END IF;                \n" +
                "	END IF;                                          \n" +
                "  \n" +
                "	#1. return history of verification					                                                      \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();                                                      \n" +
                "  \n" +
                "	#2. return error                                                               \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';                                                        \n" +
                "  \n" +
                "	#3. return umid details                                                      \n" +
                "	-- IF (uidVerified=1) THEN                                                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details                                                \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;                                                \n" +
                "	SELECT * FROM temp_umid_details;                                                   \n" +
                "	-- SELECT * FROM temp_umid_details;                                                      \n" +
                "	-- END IF;                                 \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion                                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs                                  \n" +
                "	SELECT NULL AS id;                              \n" +
                "	SELECT id FROM temp_umid_transIDs;             \n" +
                "  \n" +
                "    #5 return UMID allocation checking status            \n" +
                "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 09-03-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_validateScanUMIDOnly` ;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(                                                          \n" +
                "	IN pUMID VARCHAR(14),                                                         \n" +
                "	IN ppartID INT,                                                      \n" +
                "	IN pwoOpID INT,                                                           \n" +
                "	IN pwoTransID INT,                                                        \n" +
                "	IN pemployeeId INT,                                                        \n" +
                "	IN pcheckKitAllocation INT,                                                        \n" +
                "	IN pverificationType VARCHAR(255),                                                        \n" +
                "	IN pisVerify INT,                                                           \n" +
                "	IN ptransactionType VARCHAR(1),                                                 \n" +
                "	IN prfqLineItemsID INT,                                               \n" +
                "	IN pisConfirmed INT,                                                \n" +
                "	IN pwoID INT,                                                   \n" +
                "	IN pCreatedBy VARCHAR(255),                                              \n" +
                "	IN pisPlacementTracking INT,                                              \n" +
                "	IN psaveUMIDDetails INT,                                                 \n" +
                "	IN prefDesig VARCHAR(3000),                                              \n" +
                "	IN passyQty INT                                                         \n" +
                ")  \n" +
                "BEGIN                                               \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;                                                                  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);                                                          \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);                                                        \n" +
                "	DECLARE uidVerified INT DEFAULT 0;                                                         \n" +
                "	DECLARE temp_umid_comp_id INT;                                                         \n" +
                "	DECLARE temp_umid_stock_id INT;                                                        \n" +
                "	DECLARE temp_umid_pkgQty INT;                                                        \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);                                                       \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);                                                     \n" +
                "	DECLARE temp_umid_package_id INT;                                                   \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);                                                                   \n" +
                "	DECLARE temp_last_inserted_umid_id INT;                                                        \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;                                                          \n" +
                "	DECLARE flag_tempVerificationRequire INT DEFAULT 0;                                                                     \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;                                               \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;      \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);      \n" +
                "  \n" +
                "	-- create temporary table for error                                                          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;                                                           \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error                                                          \n" +
                "	(                                                          \n" +
                "	     errorText VARCHAR(2000),                                                         \n" +
                "	     isFeederError INT,                                                        \n" +
                "	     isUMIDError INT,                                                        \n" +
                "	     isConfirmation INT,                                                         \n" +
                "	     isMessage INT,                                                         \n" +
                "	     isInformation INT,                                                         \n" +
                "	     stringText1 VARCHAR(1000),                                                         \n" +
                "	     stringText2 VARCHAR(1000),                                                         \n" +
                "	     stringText3 VARCHAR(1000)                                                                                              \n" +
                "	);                                      \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo      \n" +
                "    FROM workorder wo       \n" +
                "    WHERE wo.woID = pwoID      \n" +
                "    AND wo.isDeleted = 0;      \n" +
                "  \n" +
                "	# umid transaction details based on umid                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;                                      \n" +
                "  \n" +
                "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN                                            \n" +
                "		SET flag_tempVerificationRequire = 1;                                            \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN      \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';      \n" +
                "    ELSE      \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details                                                         \n" +
                "#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,',',pwoID,',',pCreatedBy,',',pisConfirmed,')');                                                                \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN                                                     \n" +
                "  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId                                                         \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id                                                    \n" +
                "		FROM temp_umid_details;                                                  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                             \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details); 		                  \n" +
                "		IF(flag_tempLineCount = 1) THEN                  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list                                             \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                          \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN                       \n" +
                "			UPDATE temp_umid_details tud                   \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL                   \n" +
                "			AND id = prfqLineItemsID)                  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;                   \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list                                             \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                             \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;                    \n" +
                "		END IF;                   \n" +
                "#SELECT 'Line 84', fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, prfqLineItemsID);            \n" +
                "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN      \n" +
                "			SET result = 0;      \n" +
                "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN                                       \n" +
                "			SET result = 0;                   \n" +
                "		ELSE                \n" +
                "			-- need to check from here                  \n" +
                "			-- If scan popup with manual placement and allocated in kit and not saved details          --        \n" +
                "#SELECT 'Line90',pisVerify,pisPlacementTracking ,  psaveUMIDDetails , temp_scan_error.* FROM temp_scan_error  ;            \n" +
                "			-- Check placement tracking with more than one BOM line item for same part          \n" +
                "			IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0)) THEN        \n" +
                "				SET result = 0;        \n" +
                "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN                  \n" +
                "				SET result = 0;              \n" +
                "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN             \n" +
                "				SET result = 0;              \n" +
                "			ELSE            \n" +
                "#	SELECT 'Line 94',flag_tempLineCount ,pisVerify  ;                        \n" +
                "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN                  \n" +
                "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                  \n" +
                "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                  \n" +
                "						SET uidVerified = 1;                   \n" +
                "					ELSE                   \n" +
                "						SET uidVerified = 0;                   \n" +
                "						SET result = 0;                  \n" +
                "					END IF;                     \n" +
                "				ELSE                     \n" +
                "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN                                     \n" +
                "						SET result = 0;                    \n" +
                "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN                                        \n" +
                "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                        \n" +
                "					ELSE                   \n" +
                "#SELECT 'Line 109',flag_tempVerificationRequire ,pisVerify  ;                                    \n" +
                "						-- check verification required                                                  \n" +
                "						-- than verification require than check from which page scan/verify                                            \n" +
                "						IF(flag_tempVerificationRequire = 0) THEN -- verification not require    \n" +
                "							-- if scan option selected than check for already scanned in flow first                                             \n" +
                "							-- if not scanned than add as verified umid directly                                            \n" +
                "							IF(pisVerify <> 1) THEN                                               \n" +
                "								SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details                                                                   \n" +
                "								WHERE transactionType='U'                                               \n" +
                "								AND refsidid = temp_umid_stock_id                                                                  \n" +
                "								AND mfgPNID=temp_umid_comp_id                                                          \n" +
                "								AND reelStatus=\"C\" AND deletedAt IS NULL                                  \n" +
                "								AND woOPID = pwoOpID                                \n" +
                "								AND employeeID=pemployeeId;                        \n" +
                "  \n" +
                "								-- if already scanned than give message                                            \n" +
                "								-- else add as verified umid directly                                            \n" +
                "								IF(temp_feeder_transID > 0) THEN                                                        \n" +
                "									-- FAILED                                                  \n" +
                "									-- SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                   \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                        \n" +
                "									INSERT INTO workorder_trans_umid_details                                                        \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                        \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                        \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                    \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,                   \n" +
                "										`verifiedOn`,`reelStatus`, refDesig)                                                         \n" +
                "									VALUES                                                        \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,                                                         \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                        \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                       \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,                   \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig);                                                    \n" +
                "  \n" +
                "									-- SCANNED                                 \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS                                  \n" +
                "									SELECT LAST_INSERT_ID() AS id;                                                       \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                               \n" +
                "									SET uidVerified = 1;                                                  									    \n" +
                "								ELSE                                                     \n" +
                "									INSERT INTO workorder_trans_umid_details                                                        \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,                                                        \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                        \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                    \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,                   \n" +
                "										`verifiedOn`, `reelStatus`, refDesig)                                                         \n" +
                "									VALUES                                                        \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,                                                         \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                        \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,                                                       \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,                   \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig);                                                    \n" +
                "  \n" +
                "									-- VERIFIED                                  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS                                  \n" +
                "									SELECT LAST_INSERT_ID() AS id;                                                       \n" +
                "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;                                                \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                                           \n" +
                "									SET uidVerified = 1;                                                \n" +
                "								END IF;                                            \n" +
                "							ELSE                    \n" +
                "								-- if already scanned than verify same umid for history                                            \n" +
                "								-- if not scanned yet than give message                                       \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                  \n" +
                "									SET uidVerified = 1;                   \n" +
                "								ELSE                   \n" +
                "									SET uidVerified = 0;                   \n" +
                "									SET result = 0;                  \n" +
                "								END IF;                                           \n" +
                "							END IF;                                            \n" +
                "						ELSE                                                        \n" +
                "							-- verification require than check from which page/popup                                            \n" +
                "							-- if from scan popup than add umid as scanned new record                                            \n" +
                "							-- else check for verify flow   							    \n" +
                "							IF (pisVerify <> 1) THEN                            \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details                                                        \n" +
                "								INSERT INTO workorder_trans_umid_details                                                        \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,                                                        \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,                                                        \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,                                                    \n" +
                "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)                                                         \n" +
                "								VALUES                                                        \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,                                                         \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,                                                        \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,                                                       \n" +
                "									pCreatedBy, pCreatedBy, \"C\", prefDesig);                                                    \n" +
                "  \n" +
                "								-- SCANNED                                 \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS                                  \n" +
                "								SELECT LAST_INSERT_ID() AS id;                                                       \n" +
                "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);                                                                                               \n" +
                "								SET uidVerified = 1;                                                      \n" +
                "							ELSE                           \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN                  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);                  \n" +
                "									SET uidVerified = 1;                   \n" +
                "								ELSE                   \n" +
                "									SET uidVerified = 0;                   \n" +
                "									SET result = 0;                  \n" +
                "								END IF;                                                   \n" +
                "							END IF;                                       \n" +
                "						END IF;                  \n" +
                "					END IF;                  \n" +
                "				END IF;                  \n" +
                "			END IF;                  \n" +
                "		END IF;                   \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(                                                            \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,                                                            \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                                            \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,		                                                               \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,                                                         \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)                                                            \n" +
                "	VALUES (                                                        \n" +
                "		pUMID,							'',				temp_umid_comp_id,                                                        \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,                                                        \n" +
                "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                                        \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),                                                          \n" +
                "		pwoTransID, 						NULL,				pverificationType                                                        \n" +
                "	);                                                \n" +
                "  \n" +
                "	#0. return assy part list	                                            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list                                               \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;                  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN                       \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                                            \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;                   \n" +
                "	ELSE                         \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN                      \n" +
                "			-- verified UMID                  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;                                            \n" +
                "		ELSE			                      \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);                                            \n" +
                "		END IF;                  \n" +
                "	END IF;                                            \n" +
                "  \n" +
                "	#1. return history of verification					                                                        \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();                                                        \n" +
                "  \n" +
                "	#2. return error                                                                 \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');                                                          \n" +
                "  \n" +
                "	#3. return umid details                                                        \n" +
                "	-- IF (uidVerified=1) THEN                                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details                                                  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;                                                  \n" +
                "	SELECT * FROM temp_umid_details;                                                     \n" +
                "	-- SELECT * FROM temp_umid_details;                                                        \n" +
                "	-- END IF;                                   \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs                                    \n" +
                "	SELECT NULL AS id;                                \n" +
                "	SELECT id FROM temp_umid_transIDs;                                          \n" +
                "END;  \n" +
                /* **************************** New Script -> 09-03-2021 *********************************** */
                "UPDATE page_detail  SET  menuName = \"Initial Stock\",  \n" +
                "                displayMenuName = \"Initial Stock\" WHERE pagename = \"Assemblies Stock\";  \n" +
                /* **************************** Add Script Version ->09-03-2021*********************************** */
                /* **************************** New Script -> 09-03-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (747,'1.00','V1','Resolved scan umid issue - Vaibhav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 747:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-03-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(                \n" +
                "	IN pGoodPart VARCHAR(100),                      \n" +
                "	IN pSearch VARCHAR(500),                      \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),                      \n" +
                "	IN pRoHSStatusID VARCHAR(100),                      \n" +
                "	IN pMfgCodeId INT,                      \n" +
                "	IN pMountingType VARCHAR(50),                      \n" +
                "	IN pMountingTypeId INT,                      \n" +
                "	IN pCategoryID INT,                      \n" +
                "	IN pIsContainCPN TINYINT,                      \n" +
                "	IN pRohsMainCategoryID INT,                      \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,              \n" +
                "	IN prefSupplierMfgpnComponentID INT ,              \n" +
                "	IN ppackagingID INT,              \n" +
                "	IN pstrictCustomPart TINYINT,              \n" +
                "	IN psupplierID INT              \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE vRohsMainCategoryID INT;                      \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;                      \n" +
                "	/*===>this logic is added to compare invert rohs category*/                      \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN                      \n" +
                "		IF pRohsMainCategoryID = -1 THEN                      \n" +
                "			SET vRohsMainCategoryID = -2;                          \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN                          \n" +
                "			SET vRohsMainCategoryID = -1;                          \n" +
                "		END IF;                          \n" +
                "	END IF;                          \n" +
                "	/*<===this logic is added to compare invert rohs category*/              \n" +
                "	/* this logic used in purchase order when supplier is strictly custom part */            \n" +
                "	IF(pstrictCustomPart = 1)THEN      \n" +
                "		SELECT *   \n" +
                "		FROM                                  \n" +
                "		(                                  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,                                  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,                    \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,                      \n" +
                "					c.mfgcodeID,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,              \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,                      \n" +
                "					c.value,								c.partPackage,					c.powerRating,                      \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,                      \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,                      \n" +
                "					c.pitchMating,							c.length,						c.width,                      \n" +
                "					c.height,								c.voltage,						c.weight,                      \n" +
                "					c.feature,								c.color,						c.partStatus,                      \n" +
                "					c.uom,									c.uomClassID,					c.unit,                      \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,	  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,               \n" +
                "					r.rohsIcon,								r.name AS rohsName,                      \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,                      \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,                      \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,                            \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,                            \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,                            \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,                            \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,                            \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,                            \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,                            \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,                            \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,                            \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,                            \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,                \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,      \n" +
                "					c.detailDescription,					c.isHazmatMaterial  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0   \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                \n" +
                "			AND 	c.id = IFNULL(pId, c.id)   \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)                \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)               \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)              \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)               \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID   \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR               \n" +
                "					c.mfgcodeid IN (SELECT mc.id   \n" +
                "										FROM mfgcodemst mc   \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR              \n" +
                "					c.mfgcodeid IN (SELECT mc.id   \n" +
                "										FROM mfgcodemst mc   \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)              \n" +
                "			)  \n" +
                "			AND c.category != 3  \n" +
                "			AND c.iscustom = 1  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                              \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR   \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn   \n" +
                "													WHERE opn.refcomponentid = a.id   \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)                                              \n" +
                "		)                            \n" +
                "		ORDER BY a.mfgPN;          \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN                \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */                               \n" +
                "		SELECT * FROM                                  \n" +
                "		(                                  \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,   \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,   \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,   \n" +
                "					c.mfgcodeID,					  \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,   \n" +
                "					c.category,							c.imageURL,								c.documentPath,              \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                "					c.value,							c.partPackage,							c.powerRating,  \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                "					c.pitchMating,        				c.length,								c.width,  \n" +
                "					c.height,        					c.voltage,								c.weight,  \n" +
                "					c.feature,        					c.color,								c.partStatus,  \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,          \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,                                      \n" +
                "					c.restrictPackagingUseWithpermission,                                      \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,                       \n" +
                "					r.rohsIcon,							r.name AS rohsName,                      \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,                      \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,                      \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,                            \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,                             \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,                            \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,                            \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,                            \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,                            \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,                            \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,                            \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,                            \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,                  \n" +
                "					c.refMfgPNMfgCodeId,                \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,      \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,      \n" +
                "					c.detailDescription,        		c.isHazmatMaterial                       \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))             \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType                    \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID             \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0             \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)                \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)                \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)               \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)               \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)                \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)              \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "		) AS a                                              \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                              \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR   \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn   \n" +
                "													WHERE opn.refcomponentid = a.id   \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)                                              \n" +
                "		)                            \n" +
                "		ORDER BY a.mfgPN;   \n" +
                "  \n" +
                "	ELSE            \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,   \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                "  \n" +
                "		select *   \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                "					c.tolerance,				c.category,							c.imageURL,  \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                "					c.width,            		c.height,							c.voltage,  \n" +
                "					c.weight,            		c.feature,            				c.color,  \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                "					c.packagingID,				c.packaging,  \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                "					r.rohsIcon,					r.name AS rohsName,  \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,				  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,  \n" +
                "					vu.mfgPN supplierPartMfgPn,  \n" +
                "					vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,		c.isHazmatMaterial  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR   \n" +
                "				(pSearch IS NOT NULL AND   \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR   \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  \n" +
                "		ORDER BY mfgPN;              \n" +
                "	END IF;                      \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-03-2021  *********************************** */
                "DROP VIEW IF EXISTS `vu_supplierpartdetail_forfilter` ;  \n" +
                "CREATE VIEW `vu_supplierpartdetail_forfilter` AS  \n" +
                "    SELECT   \n" +
                "        `c`.`id` AS `supplierPNId`,  \n" +
                "        `c`.`mfgPN` AS `supplierPN`,  \n" +
                "        `c`.`mfgcodeID` AS `suppliercode`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `cm`.`mfgPN` AS `mfgPN`,  \n" +
                "        `cm`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `cm`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `mfg`.`mfgCode` AS `mfgCode`,  \n" +
                "        `mfg`.`mfgName` AS `mfgName`        \n" +
                "    FROM  \n" +
                "        ((`component` `c`  \n" +
                "        JOIN `component` `cm` ON ((`c`.`refSupplierMfgpnComponentID` = `cm`.`id`)))  \n" +
                "        JOIN `mfgcodemst` `mfg` ON ((`mfg`.`id` = `c`.`refMfgPNMfgCodeId`)))  \n" +
                "    WHERE  \n" +
                "        EXISTS( SELECT   \n" +
                "                1  \n" +
                "            FROM  \n" +
                "                `mfgcodemst` `m`  \n" +
                "            WHERE  \n" +
                "                ((`m`.`id` = `c`.`mfgcodeID`)  \n" +
                "                    AND (`m`.`mfgType` = 'DIST')));  \n" +
                /* **************************** Add Script Version -> 10-03-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (748,'1.00','V1',' Refactor procedure Sproc_GetComponentMFGAliasSearch - Dharmishtha'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//case 351:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 28-09-2020  *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version ->  *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (352,'1.00','V1',' Sample entry - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
//  );
//break;