(function (maxBuildNumber, userid) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 1011:
            /* **************************** New Script -> 10-06-2021  *********************************** */
            allDbChangesArray.push(
                "DROP procedure IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(    \n" +
                "	IN pCustCreditMemoMstID INT ,    \n" +
                "	IN pCustomerPaymentMstID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "		DECLARE v_TimeZone VARCHAR(50);    \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate , cps.totalAmount , psip.paymentNumber ,    \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,    \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,    \n" +
                "			cps.isMarkForRefund , cps.agreedRefundAmt ,    \n" +
                "            fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,    \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN    \n" +
                "					(CASE WHEN (cps.paymentStatus = 'PE' ) THEN ''    \n" +
                "						  WHEN (cps.paymentStatus = 'RE' ) THEN 'Received & Applied'    \n" +
                "						  WHEN (cps.paymentStatus = 'PR' ) THEN 'Received' END)    \n" +
                "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue    \n" +
                "		FROM customer_packingslip AS cps    \n" +
                "			LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID    \n" +
                "					AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'    \n" +
                "					AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)    \n" +
                "					AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)    \n" +
                "		WHERE cps.id = pCustCreditMemoMstID    \n" +
                "		AND cps.isDeleted = 0    \n" +
                "		;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`)" +
                " VALUES (1012,'1.00','V1','Applied Credit Memo Refund Amount - Heena'," + userid + ");"
            );
            break;
        case 1012:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDocumentCount`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDocumentCount`(	                              \n" +
                "	IN pUMIDId INT                      \n" +
                "    )  \n" +
                "BEGIN                              \n" +
                "	DECLARE v_PackingSlipId INT;     \n" +
                "	DECLARE v_DocumentTypeIds VARCHAR(100);        \n" +
                "	DECLARE v_DocumentCount INT;         \n" +
                "	DECLARE v_DocumentCofCCount INT;        \n" +
                "	DECLARE v_ParentDocumentCount INT;        \n" +
                "    DECLARE v_ParentUIDId INT;         \n" +
                "    DECLARE v_SplitUIDCount INT;      \n" +
                "  \n" +
                "    SELECT parentUIDId INTO v_ParentUIDId FROM component_sid_stock WHERE id = pUMIDId and isDeleted = 0;      \n" +
                "  \n" +
                "	SELECT 	refPackingSlipMaterialRecID             \n" +
                "	INTO 	v_PackingSlipId            \n" +
                "	FROM 	packing_slip_material_receive_det             \n" +
                "	WHERE 	deletedAt IS NULL     \n" +
                "			AND id = (            \n" +
                "					SELECT 	refPackingSlipDetailID             \n" +
                "					FROM 	component_sid_stock_packing_detail             \n" +
                "					WHERE 	refComponentSidStockID in (pUMIDId, v_ParentUIDId)          \n" +
                "							AND deletedAt IS NULL             \n" +
                "					LIMIT 1            \n" +
                "				)            \n" +
                "	LIMIT 1;            \n" +
                "  \n" +
                "	SELECT 	GROUP_CONCAT(gencCategoryID)             \n" +
                "	INTO	v_DocumentTypeIds            \n" +
                "	FROM 	genericcategory             \n" +
                "	WHERE 	deletedAt IS NULL        \n" +
                "			AND categoryType = 'Document Type'             \n" +
                "			AND gencCategoryName IN ('COFC', 'Packing Slip With COFC');            \n" +
                "  \n" +
                "    SELECT          \n" +
                "		IFNULL(vgf.cnt, 0) INTO v_DocumentCount        \n" +
                "	FROM 	vu_genericfilescount vgf             \n" +
                "	WHERE 	vgf.refTransID = pUMIDId             \n" +
                "			AND vgf.gencFileOwnerType = 'component_sid_stock';       \n" +
                "  \n" +
                "	SELECT          \n" +
                "		IFNULL(vgf.cnt, 0) INTO v_ParentDocumentCount        \n" +
                "	FROM 	vu_genericfilescount vgf             \n" +
                "	WHERE 	vgf.refTransID = v_ParentUIDId      \n" +
                "			AND vgf.gencFileOwnerType = 'component_sid_stock';       \n" +
                "  \n" +
                "	SELECT 	COUNT(1)            \n" +
                "	INTO 	v_DocumentCofCCount            \n" +
                "	FROM 	genericfiles             \n" +
                "	WHERE 	deletedAt IS NULL  AND isRecycle = 0             \n" +
                "			AND (          \n" +
                "				(refTransID IN (pUMIDId, IFNULL(v_ParentUIDId,'')) AND gencFileOwnerType = 'component_sid_stock' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds))             \n" +
                "				OR           \n" +
                "				(refTransID = v_PackingSlipId AND gencFileOwnerType = 'packing_slip' AND FIND_IN_SET(fileGroupBy, v_DocumentTypeIds))          \n" +
                "			);     \n" +
                "  \n" +
                "	SELECT 	COUNT(1)                \n" +
                "	INTO	v_SplitUIDCount            \n" +
                "	FROM 	component_sid_stock   \n" +
                "    WHERE parentUIDId = pUMIDId and isDeleted = 0;      \n" +
                "  \n" +
                "	SELECT 	v_DocumentCount AS documentCount,      \n" +
                "		v_DocumentCofCCount AS documentCofCCount,      \n" +
                "        v_ParentDocumentCount AS parentDocumentCount,  \n" +
                "        v_SplitUIDCount AS splitUIDCount;     \n" +
                "END; \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPOSOAssemblyList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPOSOAssemblyList`(        \n" +
                "	pExcludeCanceled TINYINT,        \n" +
                "	pSalesOrderDetailID INT,        \n" +
                "	pSearch VARCHAR(500)       \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQLStatement1 = \"	SELECT  k.*,    \n" +
                "								IF(numberOfSubAssy > 0 ,  CONCAT(searchQuery,', (', numberOfSubAssy , ')') , searchQuery)  AS salescolumn  \n" +
                "						FROM (  \n" +
                "								SELECT 	        \n" +
                "									`Sales Order ID`,  `Sales Order`, 	    `Po Number`,    `Assy ID`,    `Sales Order Status`, 	        \n" +
                "									`Status`, 	   `SalesOrderDetailId`, 	`PartID`, `Customer ID`,      `Assy Name`, 	        \n" +
                "									`NickName`,    `PO Qty`,             	`mrpQty`,     `kitQty`,       `RoHSName`, 		        \n" +
                "									`RohsIcon`,   `materialDueDate`,  `shippingDate`,  `Company Name`, 	  `Po Date`,                 \n" +
                "									`kitNumber`,   `isSkipKitCreation`,  `Company Code`,     \n" +
                "									CONCAT(`Assy ID`, ', ',`Po Number`,', ',`Sales Order`,', ',`PO Qty`,', ',`kitNumber`) searchQuery,    \n" +
                "									(SELECT COUNT(1) FROM kit_allocation_assy_detail kasd WHERE kasd.refSalesOrderDetID = vusr.SalesOrderDetailId AND deletedAt IS NULL AND bomAssyLevel > 0) numberOfSubAssy                    \n" +
                "									FROM 	vu_salesorder_shipped_report vusr WHERE isSkipKitCreation !=1 ) as k WHERE 1 = 1\";        \n" +
                "  \n" +
                "    IF(pExcludeCanceled=1) THEN        \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `Status` != 'Canceled'\");            \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF(pSalesOrderDetailID IS NOT NULL) THEN        \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `SalesOrderDetailId` = \",pSalesOrderDetailID,\" \");            \n" +
                "    END IF;   \n" +
                "	IF(pSearch IS NOT NULL AND pSearch != '') THEN     \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT  s.* FROM (  \n" +
                "								\",@SQLStatement1,\"	) as s WHERE  \n" +
                "							salescolumn LIKE '%\", pSearch ,\"%' \");    \n" +
                "    END IF;   \n" +
                "  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;                                                                                                                                    \n" +
                "	EXECUTE mainQuery;                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE mainQuery;                 \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(                                     \n" +
                "	IN pVerificationType VARCHAR(100),                                     \n" +
                "	IN pUID VARCHAR(15),                                     \n" +
                "	IN pScanMFGPNLabel VARCHAR(1000),                                     \n" +
                "	IN pScanPID VARCHAR(50),                                     \n" +
                "	IN pScanCPN VARCHAR(50),                                     \n" +
                "	IN pScanUID VARCHAR(15),                                     \n" +
                "	IN pScanMFGPN VARCHAR(100),                                     \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pMFRId INT,                      \n" +
                "	IN pBarcodeId INT                                    \n" +
                ")  \n" +
                "BEGIN                                     \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;                                     \n" +
                "	DECLARE v_mfgcodeID INT;	                                  \n" +
                "	DECLARE v_mfgPN VARCHAR(100);       \n" +
                " 	DECLARE v_PIDCode VARCHAR(100);	    \n" +
                " 	DECLARE v_PartDescription VARCHAR(2000);	                                  \n" +
                "	DECLARE v_RoHSStatusID INT;		                                  \n" +
                "	DECLARE v_compStockID INT;	                                  \n" +
                "	DECLARE	v_pkgQty DECIMAL(18,8);	                                  \n" +
                "	DECLARE v_pkgUnit DECIMAL(18,8);                                  \n" +
                " 	DECLARE v_uom VARCHAR(255);                                     \n" +
                " 	DECLARE v_string2PartID INT;	                                  \n" +
                " 	DECLARE v_scanString2MFG VARCHAR(100);                                  \n" +
                " 	DECLARE v_scanString2MFGPNID VARCHAR(100);                                     \n" +
                " 	DECLARE v_packingSlipId INT;                                  \n" +
                "	DECLARE	v_packingSlipNumber VARCHAR(255);                                  \n" +
                "	DECLARE	v_packingSlipSupplierId INT;                                  \n" +
                "	DECLARE	v_packingSlipSupplierCode VARCHAR(10);                                  \n" +
                "	DECLARE	v_cOfCValue VARCHAR(100);                                \n" +
                "	DECLARE v_isCustom TINYINT(1) DEFAULT 0;                            \n" +
                "	DECLARE v_componentId INT;                        \n" +
                "	DECLARE v_successId INT;                        \n" +
                "	DECLARE v_refcompid INT;      \n" +
                "    DECLARE v_mountingTypeID INT;  \n" +
                "    DECLARE v_partPackage VARCHAR(255);  \n" +
                "    DECLARE v_uomClass VARCHAR(255);  \n" +
                "    DECLARE v_spq DECIMAL(18,8);	  \n" +
                "    DECLARE v_orgQty DECIMAL(18,8);	  \n" +
                "	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_imageURL VARCHAR(1000);  \n" +
                "    DECLARE v_documentPath VARCHAR(1000);  \n" +
                "    DECLARE v_mfgCode VARCHAR(255);  \n" +
                "    DECLARE v_mfgName VARCHAR(255);  \n" +
                "    DECLARE v_mfgType VARCHAR(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;                                     \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;                                     \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS                                     \n" +
                "		SELECT 		*,                                  \n" +
                "				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode                                  \n" +
                "		FROM 		(                                  \n" +
                "					SELECT 		*,	                                  \n" +
                "							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,                                   \n" +
                "							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
                "                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(                               \n" +
                "												CASE                               \n" +
                "													WHEN stockInventoryType = 'NI' THEN                              \n" +
                "														fun_getUMIDPackingSlipNameByID(id)   \n" +
                "													WHEN stockInventoryType = 'SI' THEN                              \n" +
                "														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
                "													ELSE                              \n" +
                "														uid                              \n" +
                "												END                              \n" +
                "											)ELSE NULL END) cOfCValue   \n" +
                "					FROM 		(                                  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   mt.name uomClass,   c.isCustom,  c.mfgPNDescription,                        \n" +
                "										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
                "								FROM 		component_sid_stock cs                                     \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id   \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id   \n" +
                "								INNER JOIN 	measurement_types mt ON um.measurementTypeID = mt.id   \n" +
                "								WHERE 		cs.uid =  pUID                              \n" +
                "								AND 		cs.isDeleted = 0                                     \n" +
                "								LIMIT 		1                                  \n" +
                "							) AS a                                  \n" +
                "				) AS b;                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (                                     \n" +
                "		scanString1 VARCHAR(1000) NULL,                                   \n" +
                "		scanString2 VARCHAR(1000) NULL,                                     \n" +
                "		string1PartID INT(11) NULL,	                                  \n" +
                "		scanString1MFG VARCHAR(100) NULL,                                   \n" +
                "		scanString1MFGPNID VARCHAR(100) NULL,                                     \n" +
                "		string2PartID INT(11) NULL,	                                  \n" +
                "		scanString2MFG VARCHAR(100) NULL,                                   \n" +
                "		scanString2MFGPNID VARCHAR(100) NULL,                                     \n" +
                "		STATUS VARCHAR(100) NULL,                                   \n" +
                "		packingSlipId INT(11) NULL,                                  \n" +
                "		packingSlipNumber VARCHAR(255) NULL,                                  \n" +
                "		packingSlipSupplierId INT(11) NULL,                                  \n" +
                "		packingSlipSupplierCode VARCHAR(10) NULL,                                  \n" +
                "		cOfCValue VARCHAR(100) NULL,                                  \n" +
                "		isDeleted TINYINT(1) DEFAULT '0',                                     \n" +
                "		createdBy VARCHAR(255) NULL,                                   \n" +
                "		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP                                  \n" +
                "	);                                     \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,                                     \n" +
                "					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                                    \n" +
                "					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,                                  \n" +
                "					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,                                  \n" +
                "					`packingSlipSupplierCode`,			`cOfCValue`)                                     \n" +
                "	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,	                                    \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,                                     \n" +
                "		NULL string2PartID,                                     \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,                                  \n" +
                "		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,                                  \n" +
                "		supplierCode,			cOfCValue                                  \n" +
                "	FROM 	tempUIDDet UH;                                     \n" +
                "  \n" +
                "	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,	  \n" +
                "			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClass,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
                "            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL                         \n" +
                "	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
                "			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClass,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
                "            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL                                 \n" +
                "	FROM 	tempUIDDet u;                                    \n" +
                "  \n" +
                "	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN                                     \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN                                     \n" +
                "			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN                                     \n" +
                "				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL);                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS                        \n" +
                "				SELECT * FROM tempUIDSuccessDetail;                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;                                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS                        \n" +
                "				SELECT * FROM tempUIDComponentDetail;	                        \n" +
                "				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;                        \n" +
                "				IF (v_successId = 1) THEN                        \n" +
                "					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;                        \n" +
                "					IF (v_componentId = v_refcompid) THEN                        \n" +
                "						SET uidVerified = 1;                        \n" +
                "					END IF;                       \n" +
                "				ELSE                       \n" +
                "					SET uidVerified = 0;                        \n" +
                "				END IF;                        \n" +
                "			-- END IF;                                     \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN                                     \n" +
                "			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN                                     \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "			FROM 	component c                                     \n" +
                "			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);                                     \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN                                     \n" +
                "				SET uidVerified = 1;                                     \n" +
                "			END IF	;                                     \n" +
                "		ELSEIF (pUID = pScanUID) THEN                                     \n" +
                "			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN                                     \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "			FROM 	tempUIDDet c;                                     \n" +
                "			SET uidVerified = 1;                                     \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN                                     \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN                                     \n" +
                "				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN                                     \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "				FROM 	tempUIDDet c;                                     \n" +
                "				SET uidVerified = 1;                                     \n" +
                "			ELSE                                     \n" +
                "				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN                                     \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                                     \n" +
                "				FROM 	component c                                     \n" +
                "				WHERE 	c.mfgPN = pScanMFGPN;                                     \n" +
                "			END IF;                                     \n" +
                "		END IF;                                     \n" +
                "		UPDATE 	tempUIDHistory                                     \n" +
                "		SET 	string2PartID = v_string2PartID,                                     \n" +
                "			scanString2MFG = v_scanString2MFG,                                     \n" +
                "			scanString2MFGPNID = v_scanString2MFGPNID;                                     \n" +
                "	ELSE                                     \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)                                     \n" +
                "				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));                                     \n" +
                "	END IF;                                     \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,                                     \n" +
                "						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,	                                    \n" +
                "						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,	                                    \n" +
                "						`status`,	                                    \n" +
                "						`isDeleted`,		`createdBy`,		`createdAt`)                                     \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,                                     \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),	                                  \n" +
                "		UH.scanString1MFGPNID,	UH.string2PartID,	                                  \n" +
                "		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,	                                    \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                                     \n" +
                "		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`                                     \n" +
                "	FROM 	tempUIDHistory UH;                                     \n" +
                "  \n" +
                "	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
                "		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,    \n" +
                "        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,   \n" +
                "		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
                "		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClass uomClass,                              \n" +
                "		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,                                  \n" +
                "		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,                                 \n" +
                "		v_cOfCValue cOfCValue,	v_isCustom isCustom                                  \n" +
                "	FROM 	uid_verification_history                                     \n" +
                "	WHERE 	id = LAST_INSERT_ID();	                       \n" +
                "  \n" +
                "	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN                         \n" +
                "		SELECT * FROM tempUIDSuccessDetail;                      \n" +
                "	ELSE                       \n" +
                "		SELECT 1;                      \n" +
                "	END IF;                                   \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(    \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),    \n" +
                "	IN pAssyId INT,    \n" +
                "	IN pPartId VARCHAR(255),    \n" +
                "	IN pToUOM INT,    \n" +
                "	IN pRfqLineItemIds VARCHAR(255),    \n" +
                "	IN pCustomerId INT,     \n" +
                "	IN pType VARCHAR(255),    \n" +
                "	IN pStockType VARCHAR(20)    \n" +
                ")  \n" +
                "BEGIN                         \n" +
                "	DECLARE v_WhareClause VARCHAR(255);    \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);    \n" +
                "	DECLARE v_AssyId INT;    \n" +
                "	DECLARE v_IsPurchase TINYINT;    \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);    \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;    \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);    \n" +
                "	SET SESSION group_concat_max_len = 500000;    \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')    \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN    \n" +
                "	FROM 	kit_allocation_lineitems    \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID    \n" +
                "			AND partID = pAssyId    \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)    \n" +
                "			AND isDeleted = 0    \n" +
                "	LIMIT 	1;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS    \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId    \n" +
                "	FROM 		component c    \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0    \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartId)    \n" +
                "				AND c.isDeleted = 0    \n" +
                "	GROUP BY 	mfrPNId;    \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS    \n" +
                "		SELECT 	*    \n" +
                "		FROM 	(    \n" +
                "				SELECT  	*    \n" +
                "				FROM 		(    \n" +
                "							SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode,    \n" +
                "									fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,    \n" +
                "									IFNULL(cst.customerID, 0) customerID,		cst.binID,			IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,    \n" +
                "									IFNULL(cst.assyID, 0) assyID,			cst.receiveMaterialType,	cst.customerConsign,	cst.uom,	cst.packaging,    \n" +
                "									cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,    \n" +
                "									cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,    \n" +
                "									cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,    \n" +
                "									cst.pkgUnit,		c.PIDCode,		IFNULL(cst.nickName, '-') nickName,			IFNULL(fun_getMfgCodeAndNameByID(cst.customerID), '-') customer,    \n" +
                "									IFNULL(ca.PIDCode, '-') assembly,		c.RoHSStatusID	rohsID,    \n" +
                "									fun_getRoHSNameByID(c.RoHSStatusID) rohsName,				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,    \n" +
                "									IFNULL(fun_getRoHSNameByID(ca.RoHSStatusID), '-') assyRohsName,		IFNULL(fun_getRoHSIconByID(ca.RoHSStatusID), '-') assyRohsIcon,    \n" +
                "									fun_getBinNameByID(cst.binID) binName,			      		fun_getWarehouseNameByBinID(cst.binID) warehouseName,    \n" +
                "									fun_getWareHouseTypeByBinID(cst.binID) warehouseType,			fun_getDepartmentNameByBinID(cst.binID) departmentName,    \n" +
                "									fun_getUnitNameByID(cst.uom) unitName,    \n" +
                "									c.mfgPN,		0 pendingUMIDQty,    \n" +
                "									fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,    \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,    \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,    \n" +
                "									(    \n" +
                "										CASE    \n" +
                "											WHEN c.connecterTypeID = -2 THEN    \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))    \n" +
                "											ELSE 0    \n" +
                "										END    \n" +
                "									) allocatedPins,    \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,    \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,    \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,    \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,             	c.isGoodPart,                                                   \n" +
                "									c.restrictUsePermanently,		c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                 \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,					d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                          \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,      \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,					cst.isUMIDRestrict,	                                    \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                    \n" +
                "									d.customerApproval customerApproveStatus,                                       v_CustomerApprovalCPN customerApproveStatusCPN,        \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,						fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                        \n" +
                "									v_IsPurchase isPurchase,            \n" +
                "									fun_getBOMLineCleanStatusErrorCategoryWise(NULL, d.refRfqLineitem, cst.id, pAssyId, 2) lineCleanStatus            \n" +
                "									-- concat(d.refRfqLineitem, '###', cst.id, '###', pAssyId) lineCleanStatus                        \n" +
                "									-- cst.id lineCleanStatus        \n" +
                "							FROM 		component_sid_stock cst      \n" +
                "							LEFT JOIN 	component c ON c.id = cst.refcompid                                             \n" +
                "							LEFT JOIN	component ca ON ca.id = cst.assyID                 \n" +
                "							LEFT JOIN 	(                      \n" +
                "										SELECT 		ka.refUIDId,                                     \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                         \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                        \n" +
                "										FROM 		kit_allocation ka        \n" +
                "										WHERE 		ka.status = 'A'                 \n" +
                "										GROUP BY 	ka.refUIDId                    \n" +
                "									) AS ka ON ka.refUIDId = cst.id                        \n" +
                "							LEFT JOIN	(               \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                           \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                         \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                                 \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                                  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                         \n" +
                "													AND a.partID = pAssyId                            \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                       \n" +
                "													AND a.isDeleted = 0           \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                      \n" +
                "										UNION        \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  		                           \n" +
                "										FROM 		kit_allocation_lineitems a                                         \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                         \n" +
                "													AND a.partID = pAssyId                            \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                       \n" +
                "													AND a.isDeleted = 0           \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		      \n" +
                "									) d ON d.mfgPNID = cst.refcompid                        \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                        \n" +
                "										AND (                        \n" +
                "											CASE                        \n" +
                "												WHEN pStockType = 'IS' THEN                        \n" +
                "													cst.customerConsign = 0                        \n" +
                "												WHEN pStockType = 'CS' THEN                        \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                        \n" +
                "												ELSE                        \n" +
                "													1 = 1                        \n" +
                "											END                        \n" +
                "											)                        \n" +
                "										AND cst.isDeleted = 0                        \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0                         \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                  \n" +
                "			) b;                                  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                        \n" +
                "		SELECT 		0 AS id,			'-' AS uid,				refcompid,			0 AS pkgQty, 		                                    \n" +
                "				'-' AS dateCode,   		'-' AS internalDateCodeInDate,		0 AS customerID,		0 AS binID, 	                                  \n" +
                "				0 AS salesOrderDetailID,	0 AS assyID,				'-' AS receiveMaterialType, 	0 AS customerConsign,	                                    \n" +
                "				c.uom,				c.packagingID packaging,		fromBin,			b.Name fromBinName,                                  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		                        \n" +
                "				w.parentWHID fromDepartment,	fun_getWarehouseNameByID(w.parentWHID) fromDepartmentName,                                  \n" +
                "				0 AS pkgUnit,			c.PIDCode,				'-' nickName,			'-' AS customer,		                                    \n" +
                "				'-' AS assembly,		c.RoHSStatusID	rohsID,                        \n" +
                "				'-' AS assyRohsName,		'-' AS assyRohsIcon,			                        \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		                                    \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                            			                    \n" +
                "				'-' AS binName,			'-' AS warehouseName, 			'-' AS warehouseType,		'-' AS departmentName,	                    \n" +
                "				fun_getUnitNameByID(c.uom) unitName,					c.mfgPN,			pendingUMIDQty,                  \n" +
                "				0 AS convertedUnit,		0 currentPin,				'-' AS allocatedToKit,		                        \n" +
                "				0 AS allocatedQty,		0 AS allocatedUnit,			0 AS allocatedPins,		0 AS scrapedPins,                                    \n" +
                "				0 AS FreeToShare,		0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		'-' costCategory, 			                                    \n" +
                "				c.isGoodPart,			c.restrictUsePermanently,		c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently, 	                                    \n" +
                "				c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		0 AS restrictUseInBOMWithPermission,	      \n" +
                "				1 AS restrictUseInBOMExcluding,	0 AS restrictUseInBOMExcludingAliasWithPermission,			v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,      \n" +
                "				0 AS isUMIDRestrict,		fun_convertUOM(c.uom,pToUOM,c.unit) unit,				'-' customerApproveStatus,		                                    \n" +
                "				v_CustomerApprovalCPN customerApproveStatusCPN,				0 UMIDRohsStatusID,			'-' UMIDRohsStatus, 		            \n" +
                "				v_IsPurchase isPurchase, 	0 AS lineCleanStatus         \n" +
                "		FROM 		(                        \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                        \n" +
                "					FROM 		vu_umid_creation_pending vu                        \n" +
                "					GROUP BY 	vu.PartId, vu.BinID                        \n" +
                "				) vu                                  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid                                  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0                         \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0                                \n" +
                "		WHERE 		c.id IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart) AND pendingUMIDQty > 0;	                              \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                        \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                        \n" +
                "		ELSE                        \n" +
                "			SELECT 	*		                                \n" +
                "			FROM 	(                                \n" +
                "					SELECT  id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                  \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                    \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                  \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                  \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                  \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                  \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                          \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                          \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                  \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                        \n" +
                "					UNION ALL                    \n" +
                "					SELECT 	id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                  \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                    \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                  \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                  \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                  \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                  \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                          \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                          \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                  \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                   \n" +
                "					FROM 	temp_nonUmidAvailableStock                                  \n" +
                "				) d;                                \n" +
                "				-- ORDER BY internalDateCodeInDate IS NULL, internalDateCodeInDate, costCategory, uid;                          \n" +
                "		END IF;          \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN                \n" +
                "		SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                                \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                                    \n" +
                "				cst.customerID,		cst.binID,		cst.salesOrderDetailID, 	cst.assyID,		cst.receiveMaterialType,                        \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,					                        \n" +
                "				cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                  \n" +
                "				cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,             \n" +
                "				cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                                    \n" +
                "				fun_getBinNameByID(cst.binID) binName,		cst.pkgUnit,		cst.nickName,			                                    \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,	fun_getWareHouseTypeByBinID(cst.binID) warehouseType,                                            \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	fun_getDepartmentTypeByBinID(cst.binID) departmentType,                   \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			                                            \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	fun_getAssyPIDCodeByID(cst.assyID) assembly,	                                    \n" +
                "				c.PIDCode,		c.mfgPN, 			c.RoHSStatusID rohsID,				                                           \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                         \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                        \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                        \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                        \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                                    \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                                       \n" +
                "				v_NumOfPosition bomPin,                        \n" +
                "				c.noOfPosition,          \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                           \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                                \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,      \n" +
                "				c.isCustom,                          \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                                                          \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                                                    \n" +
                "				c.isCustom,	cst.rohsStatusID UMIDRohsStatusID,                                                    \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                                              \n" +
                "				ka.roHSApprovalReason,                                              \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                              \n" +
                "		FROM 		component_sid_stock cst                      \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid                                              \n" +
                "		LEFT JOIN 	(                        \n" +
                "					SELECT 		b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                         \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                        \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                           \n" +
                "					FROM 		(                        \n" +
                "								SELECT 		refUIDId, partID, allocatedUOM, consumeUOM,                         \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                         \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                          \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                        \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                        \n" +
                "								FROM 		kit_allocation                         \n" +
                "								WHERE 		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                        \n" +
                "								GROUP BY 	refUIDId, partID, allocatedUOM, consumeUOM                        \n" +
                "							) a                        \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId AND (CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                        \n" +
                " 				) ka ON ka.refUIDId = cst.id                       \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                                 \n" +
                "					AND ka.assyID = IFNULL(pAssyId,ka.assyID)                              \n" +
                "					AND ka.partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                                \n" +
                "					AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)       \n" +
                "					AND (                        \n" +
                "						CASE                         \n" +
                "							WHEN pType = 'AllocatedStock' THEN                         \n" +
                "								ka.`status` = 'A'                         \n" +
                "							ELSE                         \n" +
                "								ka.`status` = 'R'                         \n" +
                "						END                        \n" +
                "					)                        \n" +
                "					AND cst.isDeleted = 0                        \n" +
                "		ORDER BY 	internalDateCodeInDate, costCategory, cst.uid;                             \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;               \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getUMIDDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getUMIDDataForSearchMaterial`(             \n" +
                "	IN pPageIndex INT,                                                                                                                                \n" +
                "	IN pRecordPerPage INT,                                                                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pAssyId INT,       \n" +
                "    IN pNickName VARCHAR(255),    \n" +
                "	IN pSearchString VARCHAR(100),     \n" +
                "	IN pSearchType VARCHAR(10)            \n" +
                ")  \n" +
                "BEGIN                     \n" +
                "	DECLARE pOffset INT;                                                                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                                            \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_WhereClauseExtra VARCHAR(1000);       \n" +
                "    DECLARE v_WhereClauseNickName VARCHAR(1000);    \n" +
                "	DECLARE v_UMIDSearchQuery LONGTEXT;            \n" +
                "	DECLARE v_MFRSearchQuery LONGTEXT;            \n" +
                "	DECLARE v_MFRPackagingSearchQuery LONGTEXT;            \n" +
                "	DECLARE v_FromFinalSQLQuery LONGTEXT;            \n" +
                "	SET v_WhereClauseExtra = ' AND 1 = 1 ';            \n" +
                "  \n" +
                "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                                                                   \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                                  \n" +
                "	ELSE	                                                                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                                                                  \n" +
                "	END IF;	            \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \" id DESC\") ;                                                                                                                                  \n" +
                "	ELSE                                                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                                                  \n" +
                "	END IF;	            \n" +
                "	IF (pSearchType = 'contains') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');            \n" +
                "	ELSEIF (pSearchType = 'exact') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');            \n" +
                "	ELSE            \n" +
                "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';            \n" +
                "		SET v_WhereClausePIDSearch = ' 1 = 1';            \n" +
                "	END IF;            \n" +
                "  \n" +
                "    SET v_WhereClauseNickName = '1 = 1';    \n" +
                "  \n" +
                "	IF (pAssyId IS NOT NULL) THEN            \n" +
                "		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND assyID = ', pAssyId);            \n" +
                "	ELSEIF (pNickName IS NOT NULL) THEN    \n" +
                "		SET v_WhereClauseNickName = CONCAT(v_WhereClauseNickName, ' AND a.assyNickName = \"', pNickName,'\"');      \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NOT NULL AND pWhereClause != '') THEN                                                                                                                                  \n" +
                "		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND ', pWhereClause);                                                                                                                                  \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET v_UMIDSearchQuery = CONCAT('            \n" +
                "		SELECT 	id            \n" +
                "		FROM	component_sid_stock            \n" +
                "		WHERE	(', v_WhereClauseUMIDSearch ,')            \n" +
                "				AND isDeleted = 0            \n" +
                "	');            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetUMIDBySearchString;                                                                          \n" +
                "	SET @vSQLMainQuery1 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetUMIDBySearchString AS \", v_UMIDSearchQuery);                \n" +
                "	PREPARE mainQuery1 FROM @vSQLMainQuery1;                                                                                                                                                \n" +
                "	EXECUTE mainQuery1;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE mainQuery1;              \n" +
                "  \n" +
                "	SET v_MFRSearchQuery = CONCAT('             \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId          \n" +
                "			FROM 		component c        \n" +
                "			LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0     \n" +
                "			LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0         \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0             \n" +
                "			WHERE 		(', v_WhereClausePIDSearch ,')             \n" +
                "						AND c.isDeleted = 0  \n" +
                "	');      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;                                                                          \n" +
                "	SET @vSQLMainQuery2 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", v_MFRSearchQuery);                                                                                 	                      \n" +
                "	PREPARE mainQuery2 FROM @vSQLMainQuery2;                                                                                                                                                \n" +
                "	EXECUTE mainQuery2;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE mainQuery2;              \n" +
                "  \n" +
                "	SET v_FromFinalSQLQuery = CONCAT('             \n" +
                "				SELECT 		css.id,             \n" +
                "						css.uid,             \n" +
                "						css.receiveMaterialType,            \n" +
                "						css.refcompid,             \n" +
                "						fun_getMfgCodeAndNameByID(c.mfgCodeId) fullMfrName,             \n" +
                "						c.mfgPN mfrPN,             \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,            \n" +
                "						fun_getRoHSNameByID(c.RoHSStatusID) rohsName,            \n" +
                "						c.isCustom,            \n" +
                "						c.restrictUsePermanently,            \n" +
                "						c.restrictUSEwithpermission,            \n" +
                "						c.restrictPackagingUsePermanently,            \n" +
                "						c.restrictPackagingUseWithpermission,            \n" +
                "						fun_getBinNameByID(css.binID) currentBinName,            \n" +
                "						fun_getWarehouseNameByBinID(css.binID) currentWarehouseName,            \n" +
                "						fun_getDepartmentNameByBinID(css.binID) currentParentWarehouseName,            \n" +
                "						css.pkgQty currentCount,            \n" +
                "						css.pkgUnit currentUnit,            \n" +
                "						css.uom currentUOM,            \n" +
                "						fun_getUnitNameByID(css.uom) currentUOMName,            \n" +
                "						css.packaging,            \n" +
                "						fun_getPackagingNameByID(css.packaging) packagingName,            \n" +
                "						ka.status,             \n" +
                "						ka.assyID,             \n" +
                "						ka.partId,            \n" +
                "						fun_getAllocatedKitsNameByID(css.id, \"A\") allocatedToKit,            \n" +
                "						(CASE WHEN ka.assyID IS NULL THEN NULL ELSE fun_getAssyNickNameByID(ka.assyID) END) assyNickName,            \n" +
                "						rl.lineID bomLineNo            \n" +
                "				FROM 		component_sid_stock css             \n" +
                "				LEFT JOIN 	kit_allocation ka ON css.id = ka.refUIDId AND ka.status = \"A\"            \n" +
                "				LEFT JOIN 	rfq_lineitems rl ON rl.id = ka.refBOMLineID AND rl.partID = ka.assyID AND rl.isDeleted = 0            \n" +
                "				INNER JOIN	component c ON c.id = css.refcompid AND c.deletedAt IS NULL            \n" +
                "				WHERE 		css.isDeleted = 0        \n" +
                "							AND (            \n" +
                "								EXISTS (            \n" +
                "									SELECT 	1            \n" +
                "									FROM 	tempGetUMIDBySearchString t            \n" +
                "									WHERE 	t.id = css.id            \n" +
                "								)            \n" +
                "								OR            \n" +
                "								EXISTS (            \n" +
                "									SELECT 	1            \n" +
                "									FROM 	tempGetMFRPNIdBySearchString t            \n" +
                "									WHERE 	t.mfrPNId = css.refcompid   OR t.distPNId = css.refcompid        \n" +
                "								)            \n" +
                "						) GROUP BY id, refcompid '  , pOrderBy , ' ' , rowNumWhere, '            \n" +
                "			');     \n" +
                "	SET @finalMainQuery = CONCAT(\"SELECT a.* FROM ( \", v_FromFinalSQLQuery,\" ) a WHERE \", v_WhereClauseNickName, v_WhereClauseExtra );                                          \n" +
                "	PREPARE finalMainQuery FROM @finalMainQuery;                                                                                                                                                \n" +
                "	EXECUTE finalMainQuery;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE finalMainQuery;       \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getBOMDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getBOMDataForSearchMaterial`(    \n" +
                "	IN pAssyId INT,            \n" +
                "	IN pSearchString VARCHAR(100),            \n" +
                "	IN pSearchType VARCHAR(10)            \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);            \n" +
                "	DECLARE v_SearchBOMLineIds VARCHAR(10000);            \n" +
                "	DECLARE v_MFRPnIds LONGTEXT;  \n" +
                "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "  \n" +
                "    IF (pSearchType = 'contains') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');            \n" +
                "	ELSEIF (pSearchType = 'exact') THEN            \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');            \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');            \n" +
                "	ELSE            \n" +
                "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';            \n" +
                "		SET v_WhereClausePIDSearch = ' 1 = 1';            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('            \n" +
                "		SELECT 	refcompid AS mfrPNId , NULL AS  distPNId         \n" +
                "		FROM 	component_sid_stock             \n" +
                "		WHERE   ', v_WhereClauseUMIDSearch ,'            \n" +
                "				AND isDeleted = 0            \n" +
                "		UNION     \n" +
                "		SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId          \n" +
                "		FROM 		component c        \n" +
                "		LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0     \n" +
                "		LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0         \n" +
                "		LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0             \n" +
                "		WHERE 		(', v_WhereClausePIDSearch ,')            \n" +
                "	');            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;                          \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", @vFromSQLQuery);            \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                  \n" +
                "	EXECUTE mainQuery;                                  \n" +
                "	DEALLOCATE PREPARE mainQuery;              \n" +
                "  \n" +
                "	SELECT CONCAT(GROUP_CONCAT(mfrPNId), ',',GROUP_CONCAT(distPNId)) INTO v_MFRPnIds FROM tempGetMFRPNIdBySearchString;            \n" +
                "  \n" +
                "  \n" +
                "	SELECT 	GROUP_CONCAT(rfqLineItemsID) INTO v_SearchBOMLineIds            \n" +
                "	FROM 	(    \n" +
                "			SELECT 		a.rfqLineItemsID            \n" +
                "			FROM 		rfq_lineitems_alternatepart a                  \n" +
                "			LEFT JOIN	rfq_lineitems b ON b.id = a.rfqLineItemsID                  \n" +
                "			INNER JOIN 	component c ON a.mfgPNID = c.id                 \n" +
                "			LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                  \n" +
                "			WHERE 		a.partID = IFNULL(pAssyId, a.partID)             \n" +
                "						AND FIND_IN_SET(IFNULL(d.id, c.id), v_MFRPnIds)            \n" +
                "						AND a.isDeleted = 0            \n" +
                "		) AS a;            \n" +
                "  \n" +
                "  \n" +
                "		SELECT 		rl.id,                \n" +
                "				fun_getAssyPIDCodeByID(rl.partId) assyPIDCode,            \n" +
                "				rl.partId assyId,          \n" +
                "				rl.lineID,    \n" +
                "				rl.cust_lineID,    \n" +
                "				rl.qpa,    \n" +
                "				rl.refDesig,    \n" +
                "				(CASE WHEN rla.mfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE rla.mfgCode END) AS mfgCode,    \n" +
                "				IFNULL(d.mfgCodeID, c.mfgCodeID) mfgCodeID,    \n" +
                "				mcm.acquisitionDetail,    \n" +
                "				IFNULL(d.mfgPN, c.mfgPN) mfgPN,    \n" +
                "				IFNULL(d.id, c.id) AS mfgPNID,            \n" +
                "				(CASE WHEN rla.distMfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE rla.distributor END) AS distributor,	                                          \n" +
                "				mcmDist.acquisitionDetail AS distAcquisitionDetail,            \n" +
                "				rla.distMfgCodeID,    \n" +
                "				rla.distPN,    \n" +
                "				rla.distMfgPNID,            \n" +
                "				rl.custPN,    \n" +
                "				rl.custPNID,                            \n" +
                "				(CASE WHEN rl.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = rl.custPNID) ELSE 0 END) AS isCustPN,                                          \n" +
                "				(CASE WHEN rl.uomID IS NULL THEN rl.org_uomName ELSE fun_getUnitNameByID(rl.uomID) END) AS uomID,    \n" +
                "				(CASE WHEN rl.programingStatus = 1 THEN 'Pre' WHEN rl.programingStatus = 2 THEN 'Post' ELSE 'N/A' END) AS programingStatus,             \n" +
                "				(CASE WHEN rl.substitutesAllow IS NULL THEN rl.org_substitutesAllow ELSE CASE WHEN rl.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN rl.substitutesAllow = 2 THEN 'No' ELSE '' END END) AS substitutesAllow,    \n" +
                "				(CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = rl.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END) AS allocatedInKit,                                         \n" +
                "				rla.description descriptionAlternate,    \n" +
                "				rl.description,    \n" +
                "				rl.numOfPosition,    \n" +
                "				rl.numOfRows,    \n" +
                "				rl.customerRev,    \n" +
                "				rl.customerDescription,    \n" +
                "				rl.customerPartDesc,            \n" +
                "				CONCAT(part.partTypeName) partclassID,    \n" +
                "				rl.isInstall,    \n" +
                "				rl.isPurchase,    \n" +
                "				rl.dnpQty,    \n" +
                "				rl.dnpDesig,    \n" +
                "				rla.id AS rfqAlternatePartID,        \n" +
                "				rl.qpaDesignatorStep,    \n" +
                "				rl.duplicateCPNStep,    \n" +
                "				rl.restrictCPNUseWithPermissionStep,                            \n" +
                "				rl.restrictCPNUsePermanentlyStep,    \n" +
                "				rl.restrictCPNUseInBOMStep,    \n" +
                "				rl.requireMountingTypeStep,    \n" +
                "				rl.requireFunctionalTypeStep,                                 \n" +
                "				rl.requireMountingTypeError,            \n" +
                "				rl.requireFunctionalTypeError,                                          \n" +
                "				(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES' WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END) AS isBuyDNPQty,                     \n" +
                "				rl.isObsoleteLine,    \n" +
                "				rl.customerApprovalForQPAREFDESStep,    \n" +
                "				rl.customerApprovalForBuyStep,            \n" +
                "				rl.customerApprovalForPopulateStep,                                 \n" +
                "				rl.dnpQPARefDesStep,    \n" +
                "				rl.customerApprovalForDNPQPAREFDESStep,    \n" +
                "				rl.customerApprovalForDNPBuyStep,                                         \n" +
                "				rl.customerApprovalCPN,             \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) qpaCustomerApprovalComment,                               \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) dnpqpaCustomerApprovalComment,                                         \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyCustomerApprovalComment,                               \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyDNPCustomerApprovalComment,                          \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) populateCustomerApprovalComment,     \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) cpnCustomerApprovalComment,                              \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedQPA,                             \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,    \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedDNPQPA,                             \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,             \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,                                          \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,                \n" +
                "				rla.mfgVerificationStep,    \n" +
                "				rla.mfgDistMappingStep,    \n" +
                "				rla.mfgCodeStep,    \n" +
                "				rla.customerApproval,    \n" +
                "				rla.isCustomerUnAppoval,    \n" +
                "				rla.org_mfgCode,    \n" +
                "				rla.org_mfgPN,    \n" +
                "				rla.org_distributor,    \n" +
                "				rla.org_distPN,    \n" +
                "				rla.distVerificationStep,               \n" +
                "				rla.distCodeStep,    \n" +
                "				rla.getMFGPNStep,    \n" +
                "				rla.obsoletePartStep,    \n" +
                "				rla.mfgGoodPartMappingStep,    \n" +
                "				rla.mfgPNStep,    \n" +
                "				rla.distPNStep,    \n" +
                "				rla.badMfgPN,    \n" +
                "				rla.distGoodPartMappingStep,    \n" +
                "				rla.nonRohsStep,    \n" +
                "				rla.epoxyStep,             \n" +
                "				rla.invalidConnectorTypeStep,    \n" +
                "				rla.duplicateMPNInSameLineStep,    \n" +
                "				rla.mismatchMountingTypeStep,    \n" +
                "				rla.mismatchFunctionalCategoryStep,    \n" +
                "				rla.restrictUseWithPermissionStep,    \n" +
                "				rla.restrictUsePermanentlyStep,    \n" +
                "				rla.partPinIsLessthenBOMPinStep,    \n" +
                "				rla.exportControlledStep,    \n" +
                "				rla.tbdPartStep,             \n" +
                "				rla.userData1,    \n" +
                "				rla.userData2,    \n" +
                "				rla.userData3,    \n" +
                "				rla.userData4,    \n" +
                "				rla.userData5,    \n" +
                "				rla.userData6,    \n" +
                "				rla.userData7,    \n" +
                "				rla.userData8,    \n" +
                "				rla.userData9,    \n" +
                "				rla.userData10,                \n" +
                "				rla.pickupPadRequiredStep,    \n" +
                "				rla.matingPartRquiredStep,               \n" +
                "				rla.suggestedGoodPartStep,                 \n" +
                "				rla.suggestedGoodDistPartStep,    \n" +
                "				rla.driverToolsRequiredStep,    \n" +
                "				rla.functionalTestingRequiredStep,    \n" +
                "				rla.mismatchValueStep,                 \n" +
                "				rla.approvedMountingType,    \n" +
                "				rla.mismatchPackageStep,    \n" +
                "				rla.mismatchPowerStep,                 \n" +
                "				rla.mismatchToleranceStep,    \n" +
                "				rla.mismatchTempratureStep,    \n" +
                "				rla.mismatchNumberOfRowsStep,    \n" +
                "				rla.uomMismatchedStep,    \n" +
                "				rla.programingRequiredStep,    \n" +
                "				rla.mismatchColorStep,    \n" +
                "				rla.restrictUseInBOMStep,    \n" +
                "				rla.restrictUseInBOMWithPermissionStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "				rla.restrictUseExcludingAliasStep,    \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,                                      \n" +
                "				rla.unknownPartStep,    \n" +
                "				rla.defaultInvalidMFRStep,    \n" +
                "				rla.isUnlockApprovedPart,        \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                     \n" +
                "							CONCAT(cpnPart.partTypeName)                     \n" +
                "						ELSE                     \n" +
                "							CONCAT(part.partTypeName)             \n" +
                "					END            \n" +
                "				)             \n" +
                "				AS parttypeID,                                  \n" +
                "				part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                     \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                     \n" +
                "							CONCAT(cpnMount.name)                     \n" +
                "						ELSE                     \n" +
                "							CONCAT(mount.name)             \n" +
                "					END            \n" +
                "				) AS mountingtypeID,                      \n" +
                "				CONCAT(cat.categoryname) partcategoryID,             \n" +
                "				c.isGoodPart isMFGGoodPart,    \n" +
                "				(SELECT co.isGoodPart FROM component co WHERE co.id = rla.distMfgPNID AND co.deletedAt IS NULL) isDistGoodPart,    \n" +
                "				c.RoHSStatusID RoHSStatusID,                \n" +
                "				fun_getRoHSCategoryByID(c.RoHSStatusID) refMainCategoryID,                                        \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN (c.eolDate IS NOT NULL AND c.eolDate < fun_DatetimetoUTCDateTime()) OR EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE c.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0) THEN             \n" +
                "							1             \n" +
                "						ELSE             \n" +
                "							0             \n" +
                "					END             \n" +
                "				) isObsolete,            \n" +
                "				c.PIDCode,                                \n" +
                "				c.mfgPNDescription,    \n" +
                "				c.pitch,    \n" +
                "				c.noOfRows,    \n" +
                "				c.partPackage,    \n" +
                "				c.value,    \n" +
                "				c.tolerance,                                          \n" +
                "				c.voltage,                  \n" +
                "				c.isCustom,    \n" +
                "				c.packaging,              \n" +
                "				c.deviceMarking,    \n" +
                "				c.powerRating,    \n" +
                "				c.minOperatingTemp,    \n" +
                "				c.maxOperatingTemp,    \n" +
                "				c.connecterTypeID,    \n" +
                "				c.driverToolRequired,                                \n" +
                "				c.matingPartRquired,                                \n" +
                "				c.pickupPadRequired,                                \n" +
                "				c.programingRequired,                                \n" +
                "				c.dataSheetLink,                    \n" +
                "				c.isCPN,               \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = c.id AND deletedAt IS NULL) AS driveToolIDs,                                \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = c.id AND deletedAt IS NULL AND `type` = 3) AS programingRequiredIDs,                          \n" +
                "				(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = c.id AND deletedAt IS NULL) AS operationalAttributeIDs,                              \n" +
                "				(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,    \n" +
                "				(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,        \n" +
                "				c.isTemperatureSensitive,    \n" +
                "				c.noOfPosition AS componentLead,    \n" +
                "				fun_getPartStatusNameByID(c.partStatus) AS partStatus,    \n" +
                "				fun_getPartStatusColorCodeByID(c.partStatus) AS partStatuscolorCode,    \n" +
                "				c.createdBy,    \n" +
                "				(SELECT u.unitName FROM UOMs u WHERE u.id = c.uom ) AS uom,            \n" +
                "				c.color,    \n" +
                "				c.uom AS partUOMID,                 \n" +
                "				(            \n" +
                "					CASE             \n" +
                "						WHEN (            \n" +
                "							SELECT 		COUNT(cs.isExportControlled) AS isExportControlled              \n" +
                "							FROM 		component co                           \n" +
                "							LEFT JOIN 	component_standard_details csd ON csd.componentID = co.id AND IFNULL(csd.isDeleted,0) = 0                           \n" +
                "							LEFT JOIN 	certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1                          \n" +
                "							WHERE 		c.id = co.id            \n" +
                "						) > 0 THEN             \n" +
                "							1             \n" +
                "						ELSE             \n" +
                "							0             \n" +
                "					END             \n" +
                "				) isExportControlled,          \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,                              \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,    \n" +
                "				ac.description AS additionalComment,    \n" +
                "				ac.id AS additionalCommentId             \n" +
                "		FROM 		rfq_lineitems_alternatepart rla    \n" +
                "		INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0            \n" +
                "		INNER JOIN	component c ON c.id = rla.mfgPNID AND c.isDeleted = 0              \n" +
                "		LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID            \n" +
                "		LEFT JOIN 	mfgcodemst mcm ON rla.mfgCodeID = mcm.id AND mcm.isDeleted = 0            \n" +
                "		LEFT JOIN 	mfgcodemst mcmDist ON rla.mfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_parttypemst part ON c.functionalCategoryID = part.id AND part.isDeleted = 0            \n" +
                "		LEFT JOIN 	component cpn ON rl.custPNID = cpn.id AND cpn.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id AND cpnPart.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_mountingtypemst mount ON c.mountingtypeID = mount.id AND mount.isDeleted = 0             \n" +
                "		LEFT JOIN 	rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id AND cpnMount.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_partcategory cat ON c.category = cat.id AND cat.isDeleted = 0            \n" +
                "		LEFT JOIN 	rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = rl.id AND ac.isDeleted = 0            \n" +
                "		WHERE 	 	FIND_IN_SET(rl.id, v_SearchBOMLineIds)            \n" +
                "					AND rla.partID = IFNULL(pAssyId, rla.partID)            \n" +
                "					AND rla.isDeleted = 0            \n" +
                "		ORDER BY 	rl.lineID;            \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP function IF EXISTS `fun_getCofCByBinIdPartId`;  \n" +
                "CREATE FUNCTION `fun_getCofCByBinIdPartId`(                        \n" +
                "	pBinId INT(11),        \n" +
                "	pPartId INT(11),      \n" +
                "	pIsMfg BOOLEAN      \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                        \n" +
                "	DECLARE vCofC VARCHAR(100);        \n" +
                "	DECLARE vMfgName VARCHAR(255);       \n" +
                "	DECLARE vResult  VARCHAR(255);             \n" +
                "	SELECT  \n" +
                "		 (CASE WHEN fun_getCofCDocumentCount(NULL, id) > 0 THEN                                                               \n" +
                "				CONCAT(IFNULL(fun_getMfgCodeByID(mfgCodeID),''),packingSlipNumber)                                                             \n" +
                "			ELSE                                                               \n" +
                "				NULL  \n" +
                "		END),       \n" +
                "		fun_getMfgNameByID(mfgCodeID)  \n" +
                "	INTO vCofC,vMfgName  \n" +
                "	FROM 	packing_slip_material_receive        \n" +
                "	WHERE 	isDeleted = 0        \n" +
                "			AND id IN (        \n" +
                "					SELECT 	refPackingSlipMaterialRecID        \n" +
                "					FROM 	packing_slip_material_receive_det         \n" +
                "					WHERE 	isDeleted = 0         \n" +
                "							AND binID = pBinId       \n" +
                "							AND partID = pPartId         \n" +
                "							AND umidCreated = 0        \n" +
                "				)         \n" +
                "			AND receiptType = 'P';         \n" +
                "  \n" +
                "	IF (pIsMfg) THEN      \n" +
                "		SET vResult = vMfgName;      \n" +
                "	ELSE     \n" +
                "		SET vResult = vCofC;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	RETURN vResult;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDeleteUIDValidation`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDeleteUIDValidation`(    \n" +
                "	IN pIDs LONGTEXT             \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_PackingSlipId INT;    \n" +
                "    DECLARE v_BinId INT;    \n" +
                "    DECLARE v_PartId INT;    \n" +
                "    DECLARE v_PackagingId INT;    \n" +
                "    DECLARE v_Count INT;    \n" +
                "    DECLARE v_ErrorCode INT;    \n" +
                "     /* To handle Response */  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail    \n" +
                "    ( 	    \n" +
                "		partId INT,    \n" +
                "        packaging INT,     \n" +
                "        packingSlipId INT,    \n" +
                "        binId INT,     \n" +
                "		uidData LONGTEXT,    \n" +
                "		pidCode VARCHAR(255),    \n" +
                "        packingSlipNumber VARCHAR(255),     \n" +
                "        binName VARCHAR(255),    \n" +
                "        packagingName VARCHAR(255),    \n" +
                "        uidCount INT    \n" +
                "	);    \n" +
                "  \n" +
                "    /* create temp table to check internal umid criteria for errorcode 1*/    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempUIDDet;    \n" +
                "    CREATE TEMPORARY TABLE tempUIDDet AS    \n" +
                "		SELECT 	css.id,				css.uid,				css.refcompid,	    \n" +
                "				css.packaging,		a.packingSlipId,		css.fromBin,    \n" +
                "                c.PIDCode,			a.packingSlipNumber,    \n" +
                "                fun_getBinNameByID(css.fromBin) binName,    \n" +
                "                fun_getPackagingNameByID(css.packaging) packagingName    \n" +
                "		FROM    \n" +
                "			component_sid_stock css    \n" +
                "				INNER JOIN	component c ON css.refcompid = c.id AND c.isDeleted = 0    \n" +
                "				LEFT JOIN	    \n" +
                "					(SELECT     \n" +
                "						cspd.refComponentSidStockID, ps.id packingSlipId, ps.packingSlipNumber    \n" +
                "					FROM    \n" +
                "						component_sid_stock_packing_detail cspd    \n" +
                "					INNER JOIN packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id    \n" +
                "						AND psd.isDeleted = 0    \n" +
                "					INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id    \n" +
                "						AND ps.isDeleted = 0    \n" +
                "					GROUP BY cspd.refComponentSidStockID , ps.id, ps.packingSlipNumber) a     \n" +
                "				ON a.refComponentSidStockID = IFNULL(css.parentUIDId, css.id)    \n" +
                "		WHERE FIND_IN_SET(css.id ,pIDs);    \n" +
                "  \n" +
                "	/* check same packingslip, packaging, partid, binid having data exists for selected umid(s) */    \n" +
                "	SELECT COUNT(1) INTO v_Count    \n" +
                "		FROM     \n" +
                "			(SELECT COUNT(1) FROM tempUIDDet GROUP BY packaging, packingSlipId, fromBin, refcompid) as psCount;    \n" +
                "  \n" +
                "	IF(v_Count > 1) THEN    \n" +
                "		/* Set Reponse data for ErrorCode 1 */    \n" +
                "		SET v_ErrorCode = 1;    \n" +
                "		INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount)    \n" +
                "				SELECT tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, GROUP_CONCAT(id, '###', uid SEPARATOR '@@@'), tu.PIDCode, tu.packingSlipNumber, tu.binName, tu.packagingName, COUNT(tu.uid)    \n" +
                "                FROM tempUIDDet tu GROUP BY tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin;    \n" +
                "    ELSE    \n" +
                "		SET v_Count = 0;     \n" +
                "		/* set value for bin, packing slip, packaging and partid */    \n" +
                "		SELECT 	t.packaging, t.packingSlipId, t.fromBin, t.refcompid     \n" +
                "				INTO v_PackagingId, v_PackingSlipId, v_BinId, v_PartId    \n" +
                "			FROM tempUIDDet t GROUP BY t.packaging, t.packingSlipId, t.fromBin, t.refcompid;    \n" +
                "  \n" +
                "		/* check any pending umid exits for same bin, packing slip, packaging and partid */    \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;    \n" +
                "		CREATE TEMPORARY TABLE tempPendingUIDDet AS    \n" +
                "		SELECT	vucp.BinID,		vucp.PartId,	vucp.packingSlipID,		vucp.packagingID,    \n" +
                "				c.PIDCode,		 ps.packingSlipNumber,    \n" +
                "                fun_getBinNameByID(vucp.BinID) binName,    \n" +
                "                fun_getPackagingNameByID(vucp.packagingID) packagingName    \n" +
                "				FROM    \n" +
                "					vu_umid_creation_pending vucp    \n" +
                "						INNER JOIN	component c ON vucp.PartId = c.id AND c.partType != 4	AND c.isdeleted = 0    \n" +
                "						INNER JOIN	packing_slip_material_receive ps ON ps.id = vucp.packingSlipID	AND ps.isdeleted = 0    \n" +
                "					WHERE	vucp.BalanceQty > 0    \n" +
                "							AND vucp.packagingID = v_PackagingId    \n" +
                "							AND vucp.BinID = v_BinId    \n" +
                "							AND vucp.PartId = v_PartId    \n" +
                "							AND vucp.packingSlipID <> v_PackingSlipId;    \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_Count    \n" +
                "			 FROM tempPendingUIDDet GROUP BY packagingID, packingSlipID, BinID, PartId;    \n" +
                "  \n" +
                "        IF(v_Count > 0) THEN    \n" +
                "			SET v_ErrorCode = 2;    \n" +
                "            INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount)    \n" +
                "				SELECT tp.PartId, tp.packagingID, tp.packingSlipID, tp.BinID, NULL, tp.PIDCode, tp.packingSlipNumber, tp.binName, tp.packagingName, NULL    \n" +
                "                FROM tempPendingUIDDet tp    \n" +
                "                GROUP BY tp.packagingID, tp.packingSlipID, tp.BinID, tp.PartId;    \n" +
                "		ELSE      \n" +
                "			SET v_ErrorCode = 0;    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "    SELECT v_ErrorCode AS errorCode;    \n" +
                "    IF(v_ErrorCode <> 0) THEN    \n" +
                "		SELECT 	* FROM tempValidationDetail;    \n" +
                "    END IF;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getUMIDPackingSlipDetilById`;  \n" +
                "CREATE PROCEDURE `Sproc_getUMIDPackingSlipDetilById`(  \n" +
                "IN pUIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT 		CONCAT(mcm.mfgCode,ps.packingSlipNumber) AS packingSlipNumber, ps.id                \n" +
                "	FROM 		component_sid_stock_packing_detail cspd              \n" +
                "	INNER JOIN 	packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0    \n" +
                "	INNER JOIN 	packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0    \n" +
                "	INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0    \n" +
                "	WHERE 		cspd.refComponentSidStockID = pUIDId          \n" +
                "	LIMIT 		1;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1013,'1.00','V1','Bug #34383 & 34274 And User Story #34269 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1013:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "INSERT INTO `page_detail`   \n" +
                "        (`pageName`, `RO`, `RW`, `menuRoute`, `menuName`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`,   \n" +
                "    `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `popupFunName`, `isHideFromMenuList`)   \n" +
                "VALUES ('Split UMID', '0', '0', 'splitumid', 'Split UMID', '0', '31.05', '2', 'icons-split-umid', '1', '1', '0', '1', 'Split UMID', '1', '1','openSplitUID', '0');  \n" +
                /* **************************** New Script -> 14-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1014,'1.00','V1','Bug #34383  - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1014:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-06-2021 *********************************** */
                "CALL sproc_Utility_UpdateIconInPageDetail('Configuration','icons-system');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Certificate Standard','icons-std-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Equipment, Workstation & Sample','icons-eqpt-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Defects','icons-inspection-defect');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('RFQ Setting','icons-rfq-settings');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Attributes (NRE, OH, Markup, etc.)','icons-quote-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions','icons-quote-terms');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Assemblies','icons-part-master-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Receiving','icons-receiving');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Sales OrderMenu','icons-so-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Ordermenu','icons-wo-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Pending WO Creation List','icons-wo-pending');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Defect Category','icons-defect-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Configure Search','icons-configure-search');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Notification Category','icons-notification-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Requirements & Comments Category','icons-requirement-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Email Template','icons-email-template');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions Categories','icons-quote-term-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Quote Terms & Conditions Attributes','icons-quote-term-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO/DFM Category','icons-eco-category');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('ECO/DFM Category Attributes','icons-eco-attribute');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Scanner','icons-scanner');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Work Order Data Fields Report','icons-data-tracking-report');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Transaction wise Work Order Data Fields','icons-wo2');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Customer Payment','icons-customer-pmt');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Inovaxe UnAuthorize Request Response history','icons-unauthorized-notification');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('CustomerMenu','icons-customer-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('SupplierMenu','icons-supplier-menu');  \n" +
                "CALL sproc_Utility_UpdateIconInPageDetail('Personnel','icons-personnel-menu');  \n" +
                /* **************************** Add Script Version -> 15-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1015,'1.00','V1',' Task 34554: Generate confirmed icons and update in application - RITUL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1015:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS   \n" +
                "SELECT `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "       `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "       `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "       `a`.`poNumber` AS `Po Number`,  \n" +
                "       `a`.`poDate` AS `Po Date`,  \n" +
                "       `a`.`customerID` AS `Customer ID`,  \n" +
                "       `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "       `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "       `a`.`status` AS `Sales Order Status`,  \n" +
                "       `a`.`revision` AS `Revision`,  \n" +
                "       `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "       `a`.`termsID` AS `Terms ID`,  \n" +
                "       `a`.`soDate` AS `So Date`,  \n" +
                "       `a`.`partID` AS `PartID`,  \n" +
                "       `a`.`PIDCode` AS `Assy ID`,  \n" +
                "       `a`.`mfgPN` AS `Assy Name`,  \n" +
                "       `a`.`rev` AS `Assy Revision`,  \n" +
                "       `a`.`nickName` AS `NickName`,  \n" +
                "       `a`.`liveVersion` AS `liveVersion`,  \n" +
                "       `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "       `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "       `a`.`qty` AS `PO Qty`,  \n" +
                "       `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "       `a`.`shippingQty` AS `shippingQty`,  \n" +
                "       `a`.`companyName` AS `Company Name`,  \n" +
                "       `a`.`internalPO` AS `internalPO`,  \n" +
                "       `a`.`mfgCode` AS `mfgCode`,  \n" +
                "       `a`.`fullName` AS `Full Name`,  \n" +
                "       `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "       `a`.`isCancle` AS `isCancle`,  \n" +
                "       `a`.`cancleReason` AS `cancleReason`,  \n" +
                "       `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "       `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "       `a`.`shippingDate` AS `shippingDate`,  \n" +
                "       `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "       `a`.`remark` AS `remark`,  \n" +
                "       `a`.`price` AS `price`,  \n" +
                "       `a`.`mrpQty` AS `mrpQty`,  \n" +
                "       `a`.`kitQty` AS `kitQty`,  \n" +
                "       `a`.`isHotJob` AS `isHotJob`,  \n" +
                "       `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "       `a`.`RoHSName` AS `RoHSName`,  \n" +
                "       `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "       `a`.`lineID` AS `lineID`,  \n" +
                "       `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "       `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "       (IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,  \n" +
                "       (CASE WHEN (`a`.`isCancle` = 1) THEN 'Canceled' WHEN (((IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) > 0) OR (`a`.`salesOrderDetailId` IS NULL)) THEN 'In Progress' ELSE 'Completed' END) AS `Status`,  \n" +
                "       `a`.`modifyDate` AS `modifyDate`,  \n" +
                "       `a`.`createdDate` AS `createdDate`,  \n" +
                "       `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "       `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "       `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "       `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "       `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "       `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "       `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "       `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "       `a`.`kitnumber` AS `kitnumber`,  \n" +
                "       `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "       `a`.`partDescription` AS `partDescription`,  \n" +
                "       `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "       `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "       `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "       `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "       `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "       `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "       `a`.`internalComment` AS `internalComment`,  \n" +
                "       `a`.`partCategory` AS `partCategory`,  \n" +
                "       `a`.`serialNumber` AS `serialNumber`,  \n" +
                "       `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "       `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "       `a`.`poRevision` AS `poRevision`,  \n" +
                "       `a`.`partType` AS `partType`,  \n" +
                "       (CASE WHEN (`a`.`isCancle` = 1) THEN -(1) ELSE `a`.`salesOrderDetStatus` END) AS `salesOrderDetStatus`,  \n" +
                "       `a`.`completeStatusReason` AS `completeStatusReason` FROM (SELECT `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "       `sm`.`poNumber` AS `poNumber`,  \n" +
                "       `sm`.`poDate` AS `poDate`,  \n" +
                "       `sm`.`customerID` AS `customerID`,  \n" +
                "       `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "       `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "       `sm`.`status` AS `status`,  \n" +
                "       `sm`.`revision` AS `revision`,  \n" +
                "       `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "       `sm`.`termsID` AS `termsID`,  \n" +
                "       `sm`.`soDate` AS `soDate`,  \n" +
                "       `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "       `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "       `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "       `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "       `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "       `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "       `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "       (CASE WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes' ELSE 'No' END) AS `blanketPOText`,  \n" +
                "       `sm`.`poRevision` AS `poRevision`,  \n" +
                "       `FUN_GETUSERNAMEBYID`(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "       `FUN_GETUSERNAMEBYID`(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "       `FUN_GETROLEBYID`(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "       `FUN_GETROLEBYID`(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "       `FUN_GETROLEBYID`(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "       `FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "       `FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "       (SELECT 1 FROM `workorder_salesorder_details` `x` WHERE ((`x`.`salesOrderDetailID` = `a`.`id`) AND (`x`.`isDeleted` = 0)) LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "       `co`.`PIDCode` AS `PIDCode`,  \n" +
                "       `co`.`mfgPN` AS `mfgPN`,  \n" +
                "       `co`.`rev` AS `rev`,  \n" +
                "       `co`.`nickName` AS `nickName`,  \n" +
                "       `co`.`liveVersion` AS `liveVersion`,  \n" +
                "       `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "       `co`.`isCustom` AS `isCustomPart`,  \n" +
                "       `co`.`partType` AS `partType`,  \n" +
                "       `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "       CONCAT('(',`cu`.`mfgCode`,') ',`cu`.`mfgName`) AS `companyName`,  \n" +
                "       `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "       `cu`.`isCompany` AS `internalPO`,  \n" +
                "       `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "       CONCAT(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,  \n" +
                "       `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "       `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "       `roh`.`name` AS `RoHSName`,  \n" +
                "       `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "       `a`.`qty` AS `qty`,  \n" +
                "       `a`.`id` AS `salesOrderDetailId`,  \n" +
                "       `a`.`kitNumber` AS `kitnumber`,  \n" +
                "       `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "       `a`.`partDescription` AS `partDescription`,  \n" +
                "       `a`.`partID` AS `partID`,  \n" +
                "       `a`.`isCancle` AS `isCancle`,  \n" +
                "       `a`.`isHotJob` AS `isHotJob`,  \n" +
                "       `a`.`cancleReason` AS `cancleReason`,  \n" +
                "       `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "       (SELECT MIN(IFNULL(ssm.requestedDockDate,`ssm`.`shippingDate`)) FROM `salesshippingmst` `ssm` WHERE ((`ssm`.`sDetID` = `a`.`id`) AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "       `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "       `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "       `a`.`remark` AS `remark`,  \n" +
                "       `a`.`price` AS `price`,  \n" +
                "       `a`.`mrpQty` AS `mrpQty`,  \n" +
                "       `a`.`kitQty` AS `kitQty`,  \n" +
                "       `a`.`shippingQty` AS `shippingQty`,  \n" +
                "       `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "       `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "       `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "       `a`.`internalComment` AS `internalComment`,  \n" +
                "       `a`.`partCategory` AS `partCategory`,  \n" +
                "       `a`.`lineID` AS `lineID`,  \n" +
                "       (SELECT IFNULL(SUM(`customer_packingslip_det`.`shipQty`),0) FROM `customer_packingslip_det`   \n" +
                "       WHERE ((`customer_packingslip_det`.`partId` = `a`.`partID`) AND (`customer_packingslip_det`.`isDeleted` = 0)   \n" +
                "       AND `customer_packingslip_det`.`refCustPackingSlipID` IN (SELECT `cps`.`id` FROM `customer_packingslip` `cps`   \n" +
                "       WHERE (`cps`.`transType` = 'P')) AND (`customer_packingslip_det`.`refSalesorderDetid` = `a`.`id`))) AS `ShippedQty`,  \n" +
                "       `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "       `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`   \n" +
                "       FROM ((((((((`salesordermst` `sm` LEFT JOIN `salesorderdet` `a` ON(((`sm`.`id` = `a`.`refSalesOrderID`)   \n" +
                "       AND (`a`.`deletedAt` IS NULL) AND (`sm`.`deletedAt` IS NULL)))) LEFT JOIN `mfgcodemst` `cu`   \n" +
                "       ON(((`sm`.`customerID` = `cu`.`id`) AND (`cu`.`deletedAt` IS NULL)))) LEFT JOIN `component` `co`   \n" +
                "       ON((`a`.`partID` = `co`.`id`))) LEFT JOIN `mfgcodemst` `mg` ON(((`mg`.`id` = `co`.`mfgcodeID`) AND (`mg`.`isDeleted` = 0)))) LEFT JOIN `rfq_rohsmst` `roh`   \n" +
                "       ON(((`roh`.`id` = `co`.`RoHSStatusID`) AND (`roh`.`deletedAt` IS NULL)))) LEFT JOIN `customer_contactperson` `cc`   \n" +
                "       ON(((`sm`.`contactPersonID` = `cc`.`personId`) AND (`cc`.`deletedAt` IS NULL)))) LEFT JOIN `genericcategory` `gc`   \n" +
                "       ON(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) AND (`gc`.`deletedAt` IS NULL))))   \n" +
                "       LEFT JOIN (SELECT `s`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`refAssyId` AS `refAssyId`,  \n" +
                "       GROUP_CONCAT(DISTINCT ' ',`wo`.`woNumber` SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "       GROUP_CONCAT(DISTINCT ' ',CONCAT(`wo`.`woID`,'###',`wo`.`woNumber`) SEPARATOR ',') AS `releasedWorkorderNmberAndId`   \n" +
                "       FROM (`salesorder_plan_detailsmst` `s` LEFT JOIN `workorder` `wo`   \n" +
                "       ON((`wo`.`woID` = `s`.`woID`))) GROUP BY `s`.`salesOrderDetID`) `k`   \n" +
                "       ON((`k`.`salesOrderDetID` = `a`.`id`))) WHERE (`sm`.`deletedAt` IS NULL)) `a`;  \n" +
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(                                                                                                                                 \n" +
                "	IN ppageIndex INT,                                        \n" +
                "	IN precordPerPage INT,                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN pIsKitList TINYINT,                                        \n" +
                "	IN pPlannedStatus VARCHAR(10),                                        \n" +
                "	IN pSalesOrderDetailId INT,                                        \n" +
                "	IN pIsPendingWOCreationList TINYINT,                                        \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),                                        \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,                      \n" +
                "	IN pfilterStatus VARCHAR(100),                      \n" +
                "	IN pcustomerIds VARCHAR(16000),                      \n" +
                "	IN pshippingMethodId VARCHAR(16000),                      \n" +
                "	IN ptermsIds VARCHAR(16000),                      \n" +
                "	IN psearchposotext VARCHAR(1000),                      \n" +
                "	IN psearchposotype VARCHAR(10),                      \n" +
                "	IN pfromDate DATE,                          \n" +
                "	IN ptoDate DATE,                      \n" +
                "	IN prushJob TINYINT,                      \n" +
                "	IN ppartIds VARCHAR(16000),                      \n" +
                "	IN pworkorders VARCHAR(16000),                      \n" +
                "	IN psearchextPricetext VARCHAR(1000),                      \n" +
                "	IN psearchextPricetype VARCHAR(10),                  \n" +
                "	IN pkitreturnStatus VARCHAR(100),                  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)                                       \n" +
                ")  \n" +
                "BEGIN                                        \n" +
                "	DECLARE pOffset INT;                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                        \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);                                        \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);                                        \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);                                        \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);                                        \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);                                        \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';                                        \n" +
                "	SET v_PendingWOWhereClause='';                                        \n" +
                "	IF(pIsKitList=1) THEN                                        \n" +
                "		SET v_DynamicColumns = CONCAT(\",                                        \n" +
                "			hu.refType as refTypeKR,                                        \n" +
                "			hu.status as haltStatusKR,                                        \n" +
                "			(                                        \n" +
                "				CASE                                        \n" +
                "					WHEN hu.status = 'H' THEN                                        \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))                                                                                                    \n" +
                "					ELSE ''                                        \n" +
                "				END                                        \n" +
                "			) AS reasonKR,                                        \n" +
                "			hutt.refType as refTypePO,                                        \n" +
                "			hutt.status as haltStatusPO,                                        \n" +
                "			(                                        \n" +
                "				CASE                                        \n" +
                "					WHEN hutt.status = 'H' THEN                                        \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))                                                                                                    \n" +
                "					ELSE ''                                        \n" +
                "				END                                        \n" +
                "			) AS reasonPO,                                        \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion                                        \n" +
                "		\");                                                                                  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"                                                                                    \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)                                                                                 \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)                                              \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;                                                                                  \n" +
                "	ELSE                                                                                  \n" +
                "		SET v_DynamicColumns=CONCAT(\",                                                              \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,                                                                                  \n" +
                "			(                                                              \n" +
                "				CASE                                                                                            \n" +
                "					WHEN hut.status = 'H' THEN                                                                                 \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))                                                                                                    \n" +
                "					ELSE ''                                                                                         \n" +
                "				END                                                              \n" +
                "			) AS reasonPO                                                              \n" +
                "		\");                                                                                  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"                                                              \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (                                                              \n" +
                "				SELECT 	MAX(ht.id)                                                               \n" +
                "				FROM 	holdunholdtrans ht                                                               \n" +
                "				WHERE 	hut.refTransId = ht.refTransId                                                               \n" +
                "						AND ht.refType='PO'                                                               \n" +
                "						AND ht.isdeleted=0                                                              \n" +
                "					)                                                              \n" +
                "				\") ;                                                                                  \n" +
                "	END IF;                                                              \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN                                                                       \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');                                                                     \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");                                                                                  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (                                                                                \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,                                                                                        \n" +
                "						co.mfgPN AS mfgPN,                                                                                          \n" +
                "						co.nickname AS nickName,                                                            \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,                                                               \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,                                                               \n" +
                "						vusalesorderdet.poNumber,                                                               \n" +
                "						vusalesorderdet.salesOrderNumber                                                                        \n" +
                "				FROM 		workorder wo                                                                                                                                    \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3                                                                          \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID                                                                        \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName                                                            \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)                                                              \n" +
                "		\");                                                                                  \n" +
                "	END IF;                                                        \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN                                                    \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd                                                     \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');                                                    \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,                                                    \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');                                                                           \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';                                                    \n" +
                "        IF pOrderBy IS NULL THEN                                                    \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';                                                    \n" +
                "        END IF;                                                    \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"                                                                                                              \n" +
                "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,                                                                                                                              \n" +
                "			(                                                                                            \n" +
                "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN                                                                                             \n" +
                "						'No'                                                                                                                                \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN                                                                                             \n" +
                "						'Yes'                                                                                             \n" +
                "					ELSE                                                                                             \n" +
                "						''                                                                                             \n" +
                "				END                                                                                            \n" +
                "			) AS `isHotJobValue`,                                                                                                                                \n" +
                "			`vuss`.`Sales Order ID` AS id,                                                                                                                              \n" +
                "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,                                                                                                                            \n" +
                "			`vuss`.`Sales Order` AS salesOrderNumber,                                                                                                                                \n" +
                "			`vuss`.`Po Number` AS poNumber,                                                                                                                                \n" +
                "			`vuss`.`Po Date` AS poDate,                                                                                                                                \n" +
                "			`vuss`.`Customer ID` AS customerID,                                                                                                                                \n" +
                "			`vuss`.`ContactPerson ID` AS contactPersonID,                                                                                                                                \n" +
                "			`vuss`.`ShippingMethod ID` AS shippingMethodID,                                                                                                                                \n" +
                "			`vuss`.`Sales Order Status` AS `status`,                                                                                                                                \n" +
                "			`vuss`.`Revision` AS revision,                                                                                                                                \n" +
                "			`vuss`.`Shipping Comment` AS shippingComment,                                                                                                                                \n" +
                "			`vuss`.`Terms ID` AS termsID,                                                                                                                                \n" +
                "			`vuss`.`So Date` AS soDate,                                                                                                                                \n" +
                "			`vuss`.`Company Name` AS companyName,                                               \n" +
                "			`vuss`.`internalPO` AS internalPO,                                               \n" +
                "			`vuss`.`mfgCode` AS mfgCode,                                                                        \n" +
                "			`vuss`.`Full Name` AS fullName,                                                                                                                                \n" +
                "			`vuss`.`GencCategory Code` AS genCategoryCode,                                                                                                                            \n" +
                "			`vuss`.`PO Qty` AS qty,             \n" +
                "			ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,            \n" +
                "			ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,                                                                                                                           \n" +
                "			`vuss`.`mrpQty` AS mrpQty,                                                                  \n" +
                "			`vuss`.`custPOLineNumber` AS custPOLineNumber,                                                                           \n" +
                "			`vuss`.`kitQty` AS kitQty, \",                                                                                                                     \n" +
                "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),                                                                                                                            \n" +
                "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,                                                                                                                            \n" +
                "			`vuss`.`materialDueDate` AS materialDueDate,                                                                                                                            \n" +
                "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,                                                                                                                            \n" +
                "			`vuss`.`shippingQty` AS shippingQty,                                                                                                                            \n" +
                "			`vuss`.`remark` AS remark,                                                                                                                            \n" +
                "			`vuss`.`Assy ID` AS PIDCode,                                                                                                                      \n" +
                "			`vuss`.`Assy Name` AS mfgPN,                                                                                                                          \n" +
                "			`vuss`.`NickName` AS nickName,                                                                                                                           \n" +
                "			`vuss`.`liveVersion` AS liveVersion,                                                                                                                           \n" +
                "			`vuss`.`partDescription` AS partDescription,                                                                                                                            \n" +
                "			`vuss`.`cancleReason` AS cancleReason,                                                                                                                            \n" +
                "			`vuss`.`Status` AS completedStatus,                                                                                                                                \n" +
                "			`vuss`.`modifyDate` AS modifyDate,                                                                                                                                  \n" +
                "			`vuss`.`createdDate` AS createdDate,                                                                                                                              \n" +
                "			`vuss`.`soModifiedBy` AS soModifiedBy,                                                                                                                             \n" +
                "			`vuss`.`soCreatedBy` AS soCreatedBy,                                                                                                                                \n" +
                "			`vuss`.`updatedbyRole` AS updatedbyRole,                                                                                                                             \n" +
                "			`vuss`.`createdbyRole` AS createdbyRole,          \n" +
                "			vuss.isBlanketPO,          \n" +
                "			vuss.blanketPOText,          \n" +
                "			vuss.poRevision,          \n" +
                "			vuss.partType,   \n" +
                "			vuss.mfgcodeID,  \n" +
                "			vuss.manufacturerName,                                                                                                                            \n" +
                "			`vuss`.`PartID` AS partID,                                                                                 \n" +
                "			`vuss`.`isCustomPart` AS isCustomPart,                                                                          \n" +
                "			`vuss`.`kitNumber` AS kitNumber,                                \n" +
                "			`vuss`.`serialNumber` AS serialNumber,                            \n" +
                "			`vuss`.partCategory,   \n" +
                "			vuss.lineID,                           \n" +
                "			vuss.internalCommentSo,                                  \n" +
                "			vuss.internalComment,                                                        \n" +
                "			ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,                                                  \n" +
                "			vuss.Status as salesOrderDetStatusConvertedValues,                                               \n" +
                "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,                                                        \n" +
                "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,                      \n" +
                "			 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,                                                                                                     \n" +
                "			fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,                                                                                                          \n" +
                "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,                                                 \n" +
                "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,                                                   \n" +
                "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,                                                             \n" +
                "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,                                                                                                                            \n" +
                "			(                                                                                            \n" +
                "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN                                                                                             \n" +
                "						'Draft'                                                                                                                                 \n" +
                "					WHEN (`vuss`.`Sales Order Status` = 1) THEN                                                                                             \n" +
                "						'Published'                                                                                                                                \n" +
                "					ELSE                                                                                             \n" +
                "						''                                                                                             \n" +
                "				END                                                                                            \n" +
                "			) AS `statusConvertedValue`,                                                                        \n" +
                "			hutkit.refType as refTypeKA,                                                                      \n" +
                "			hutkit.status as haltStatusKA,                                                                                   \n" +
                "			(                                                              \n" +
                "				CASE                                                                                            \n" +
                "					WHEN 	hutkit.status = 'H' THEN                                                                                 \n" +
                "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))                                                                                                    \n" +
                "					ELSE 	''                                                                                          \n" +
                "				END                                                              \n" +
                "			) AS reasonKA,                                                                        \n" +
                "			ka.allocPerComponent AS `kitStatusPercentage`,                                                                                                                  \n" +
                "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,                                                                            \n" +
                "			(                                                              \n" +
                "				CASE 	                                                              \n" +
                "					WHEN 	ka.kitReturnStatus is null then                                                               \n" +
                "						'N/A'                                                               \n" +
                "					ELSE 	                                                              \n" +
                "						ka.kitReturnStatus                                                               \n" +
                "				END                                                              \n" +
                "			) as kitReturnStatus,                                                                          \n" +
                "			(                                                              \n" +
                "				CASE 	                                                              \n" +
                "					WHEN ka.kitReleaseStatus is null then                                                               \n" +
                "						'Not Released'                                                               \n" +
                "					else                                                               \n" +
                "						ka.kitReleaseStatus                                                               \n" +
                "				END                                                              \n" +
                "			) as kitReleaseStatus,                                                                                              \n" +
                "			`vuss`.`Shipped Qty` AS shippedQty,                                                \n" +
                "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100                                             \n" +
                "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage, 			                                                           \n" +
                "			p.nextReleaseDate,                                                                                            \n" +
                "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,                                                                          \n" +
                "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,                                                                          \n" +
                "			p.releasedPlanCount totalkitRelease,                                                                                                    \n" +
                "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,                                                                                          \n" +
                "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,                                                               \n" +
                "			vuss.releasedWorkorder,                                \n" +
                "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"                                                                                  \n" +
                "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"                                                                          \n" +
                "	LEFT JOIN  	(                                                                          \n" +
                "				SELECT  salesOrderDetID,                                                               \n" +
                "					refAssyId,                                                                           \n" +
                "					count(1) totalPlan,                                                                           \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,                                                                          \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate                                                                          \n" +
                "				FROM 	salesorder_plan_detailsmst                                                                           \n" +
                "				WHERE 	isDeleted=0                                                            \n" +
                "						AND subAssyID is null                                                                           \n" +
                "				GROUP BY salesOrderDetID, refAssyId                                                                          \n" +
                "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`                                                                             \n" +
                "	LEFT JOIN 	(                                                                          \n" +
                "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                                            \n" +
                "					`k`.`assyID` AS `assyID`,                                                                \n" +
                "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,                                                                          \n" +
                "					`k`.`shortageLine` AS `shortageLine`,                                                        \n" +
                "					allocPermainAssy allocPerComponent,                                                        \n" +
                "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,                                                                          \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,                                                                           \n" +
                "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,                                                                          \n" +
                "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`                                                                          \n" +
                "					FROM (                                                                          \n" +
                "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,                                                               \n" +
                "							mainAssy AS `assyID`,                                                                 \n" +
                "							COUNT(1) AS `totalLine`,                                                               \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,                                                              \n" +
                "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,                                                                \n" +
                "							sum( k.shortageline) shortageline,                                                          \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,                              \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`                              \n" +
                "					      FROM (                              \n" +
                "  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,                                                                          \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,                                     \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,                              \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,                                                         \n" +
                "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,                                                          \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,                               \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,                               \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`                                                                           \n" +
                "								FROM  	`vu_kit_allocation_detail` vk                                                            \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id                                           \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1                                                   \n" +
                "							) `k`                                                           \n" +
                "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy                                                          \n" +
                "					) `k`                                                                     \n" +
                "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`                                                                             \n" +
                "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0                                                                                \n" +
                "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)                                                                                             \n" +
                "	\");                                                                                                                     \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                                                \n" +
                "	ELSE                                                                                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;                                                                                                                                \n" +
                "	END IF;                                                                                                                                 \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                                                                                                \n" +
                "	END IF;                                                                         \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);                                                                        \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN                     \n" +
                "	IF(pIsKitList=1)THEN                    \n" +
                "	SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');                   \n" +
                "	ELSE                                                                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');                   \n" +
                "	END IF;                                                                       \n" +
                "	END IF;                        \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');                                                                        \n" +
                "	END IF;                       \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');                                                                        \n" +
                "	END IF;                         \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');                                                                        \n" +
                "	END IF;                       \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN                                  \n" +
                "	  IF(psearchposotype='C')THEN                                  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');                                   \n" +
                "          ELSE                                  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');                                  \n" +
                "          END IF;                                  \n" +
                "        END IF;                      \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN                                  \n" +
                "	  IF(psearchextPricetype='C')THEN                                  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');                                   \n" +
                "          ELSE                                  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');                                  \n" +
                "          END IF;                                  \n" +
                "        END IF;                              \n" +
                "  \n" +
                "        IF(prushJob =1) THEN                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJobValue=\"Yes\"');                                                                        \n" +
                "	END IF;                      \n" +
                "	IF(pworkorders IS NOT NULL)THEN                   \n" +
                "	SET pworkorders=REPLACE(pworkorders,',','|');                \n" +
                "	 SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');                       \n" +
                "	END IF;                 \n" +
                "	IF(ppartIds IS NOT NULL)THEN                                  \n" +
                "  SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');                                  \n" +
                "  END IF;                  \n" +
                "  \n" +
                "  IF(pkitreturnStatus IS NOT NULL)THEN                  \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');                   \n" +
                "  END IF;                  \n" +
                "  IF(pkitReleaseStatus IS NOT NULL)THEN                  \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');                   \n" +
                "  END IF;                         \n" +
                "        -- from date to date filter                      \n" +
                "	  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN                                  \n" +
                "  SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');                                             \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN                                  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');                                    \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN                                  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');                                                   \n" +
                "  END IF;                                                         \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN                                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);                                                    \n" +
                "    END IF;                                                        \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN                                                          \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");                                                   \n" +
                "	END IF;                                              \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN                                                                                                                                \n" +
                "		IF (pPlannedStatus = 'P') THEN                                                                                            \n" +
                "			SET v_PlannedWhere = \" AND kitReleasePlanCount > 0\";                                                                                            \n" +
                "		ELSEIF (pPlannedStatus = 'R') THEN                                                                                            \n" +
                "			SET v_PlannedWhere = \" AND kitReleasePlanCount <= 0\";                                                                                            \n" +
                "		END IF;                                                                                                                                \n" +
                "	END IF;                                                                                              \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN                                                                                            \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);                                                                                            \n" +
                "	END IF;                                                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                                                                                                   \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                                \n" +
                "	ELSE                                                                                                                                 \n" +
                "		SET rowNumWhere = '';                                                                                                                                \n" +
                "	END IF;                                                                                                             \n" +
                "	/* to get total count of rows */                                                                                                                   \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));                                                                                                                  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                              \n" +
                "	EXECUTE query1;                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                                                                                                                  \n" +
                "    PREPARE query2 FROM @SQLStatement2;                  \n" +
                "  \n" +
                "	EXECUTE query2;                      \n" +
                "  \n" +
                "	DEALLOCATE PREPARE query2;                                                                                                                                 \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount <= 0 AND \", pWhereClause, v_PendingWOWhereClause);                                                                                                                      \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                  \n" +
                "	EXECUTE query3;                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query3;                                                                                               \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1016,'1.00','V1','Alter vu_salesorder_updatedlist_report-Champak '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1016:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_getBOMDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getBOMDataForSearchMaterial`(      \n" +
                "	IN pAssyId INT,              \n" +
                "	IN pSearchString VARCHAR(100),              \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "    IN pNickName VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_SearchBOMLineIds VARCHAR(10000);  \n" +
                "	DECLARE v_MFRPnIds LONGTEXT;  \n" +
                "	DECLARE v_AssyIds LONGTEXT;  \n" +
                "  \n" +
                "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "  \n" +
                "	IF(pNickName IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(id) INTO v_AssyIds FROM component WHERE isDeleted = 0 AND nickname = pNickName;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pSearchType = 'contains') THEN              \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');              \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');              \n" +
                "	ELSEIF (pSearchType = 'exact') THEN              \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');              \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');              \n" +
                "	ELSE              \n" +
                "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';              \n" +
                "		SET v_WhereClausePIDSearch = ' 1 = 1';              \n" +
                "	END IF;     \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('              \n" +
                "		SELECT 	refcompid AS mfrPNId , NULL AS  distPNId           \n" +
                "		FROM 	component_sid_stock               \n" +
                "		WHERE   ', v_WhereClauseUMIDSearch ,'              \n" +
                "				AND isDeleted = 0              \n" +
                "		UNION       \n" +
                "		SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId            \n" +
                "		FROM 		component c          \n" +
                "		LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0       \n" +
                "		LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0           \n" +
                "		LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0               \n" +
                "		WHERE 		(', v_WhereClausePIDSearch ,')              \n" +
                "	');              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;                            \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", @vFromSQLQuery);              \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;   \n" +
                "	EXECUTE mainQuery;   \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT CONCAT(GROUP_CONCAT(mfrPNId), ',',GROUP_CONCAT(distPNId)) INTO v_MFRPnIds FROM tempGetMFRPNIdBySearchString;              \n" +
                "  \n" +
                "	SELECT 	GROUP_CONCAT(rfqLineItemsID) INTO v_SearchBOMLineIds              \n" +
                "	FROM 	(      \n" +
                "			SELECT 		a.rfqLineItemsID              \n" +
                "			FROM 		rfq_lineitems_alternatepart a                    \n" +
                "			LEFT JOIN	rfq_lineitems b ON b.id = a.rfqLineItemsID                    \n" +
                "			INNER JOIN 	component c ON a.mfgPNID = c.id                   \n" +
                "			LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                    \n" +
                "			WHERE 		a.partID IN (IFNULL(IFNULL(pAssyId, v_AssyIds), a.partID))         \n" +
                "						AND FIND_IN_SET(IFNULL(d.id, c.id), v_MFRPnIds)              \n" +
                "						AND a.isDeleted = 0              \n" +
                "		) AS a;              \n" +
                "  \n" +
                "   SELECT 		rl.id,                  \n" +
                "				fun_getAssyPIDCodeByID(rl.partId) assyPIDCode,              \n" +
                "				rl.partId assyId,            \n" +
                "				rl.lineID,      \n" +
                "				rl.cust_lineID,      \n" +
                "				rl.qpa,      \n" +
                "				rl.refDesig,      \n" +
                "				(CASE WHEN rla.mfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE rla.mfgCode END) AS mfgCode,      \n" +
                "				IFNULL(d.mfgCodeID, c.mfgCodeID) mfgCodeID,      \n" +
                "				mcm.acquisitionDetail,      \n" +
                "				IFNULL(d.mfgPN, c.mfgPN) mfgPN,      \n" +
                "				IFNULL(d.id, c.id) AS mfgPNID,              \n" +
                "				(CASE WHEN rla.distMfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE rla.distributor END) AS distributor,	                                            \n" +
                "				mcmDist.acquisitionDetail AS distAcquisitionDetail,              \n" +
                "				rla.distMfgCodeID,      \n" +
                "				rla.distPN,      \n" +
                "				rla.distMfgPNID,              \n" +
                "				rl.custPN,      \n" +
                "				rl.custPNID,                              \n" +
                "				(CASE WHEN rl.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = rl.custPNID) ELSE 0 END) AS isCustPN,                                            \n" +
                "				(CASE WHEN rl.uomID IS NULL THEN rl.org_uomName ELSE fun_getUnitNameByID(rl.uomID) END) AS uomID,      \n" +
                "				(CASE WHEN rl.programingStatus = 1 THEN 'Pre' WHEN rl.programingStatus = 2 THEN 'Post' ELSE 'N/A' END) AS programingStatus,               \n" +
                "				(CASE WHEN rl.substitutesAllow IS NULL THEN rl.org_substitutesAllow ELSE CASE WHEN rl.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN rl.substitutesAllow = 2 THEN 'No' ELSE '' END END) AS substitutesAllow,      \n" +
                "				(CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = rl.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END) AS allocatedInKit,                                           \n" +
                "				rla.description descriptionAlternate,      \n" +
                "				rl.description,      \n" +
                "				rl.numOfPosition,      \n" +
                "				rl.numOfRows,      \n" +
                "				rl.customerRev,      \n" +
                "				rl.customerDescription,      \n" +
                "				rl.customerPartDesc,              \n" +
                "				CONCAT(part.partTypeName) partclassID,      \n" +
                "				rl.isInstall,      \n" +
                "				rl.isPurchase,      \n" +
                "				rl.dnpQty,      \n" +
                "				rl.dnpDesig,      \n" +
                "				rla.id AS rfqAlternatePartID,          \n" +
                "				rl.qpaDesignatorStep,      \n" +
                "				rl.duplicateCPNStep,      \n" +
                "				rl.restrictCPNUseWithPermissionStep,                              \n" +
                "				rl.restrictCPNUsePermanentlyStep,      \n" +
                "				rl.restrictCPNUseInBOMStep,      \n" +
                "				rl.requireMountingTypeStep,      \n" +
                "				rl.requireFunctionalTypeStep,                                   \n" +
                "				rl.requireMountingTypeError,              \n" +
                "				rl.requireFunctionalTypeError,                                            \n" +
                "				(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES' WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END) AS isBuyDNPQty,                       \n" +
                "				rl.isObsoleteLine,      \n" +
                "				rl.customerApprovalForQPAREFDESStep,      \n" +
                "				rl.customerApprovalForBuyStep,              \n" +
                "				rl.customerApprovalForPopulateStep,                                   \n" +
                "				rl.dnpQPARefDesStep,      \n" +
                "				rl.customerApprovalForDNPQPAREFDESStep,      \n" +
                "				rl.customerApprovalForDNPBuyStep,                                           \n" +
                "				rl.customerApprovalCPN,               \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) qpaCustomerApprovalComment,                                 \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) dnpqpaCustomerApprovalComment,                                           \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyCustomerApprovalComment,                                 \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyDNPCustomerApprovalComment,                            \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) populateCustomerApprovalComment,       \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) cpnCustomerApprovalComment,                                \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedQPA,                               \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,      \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedDNPQPA,                               \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,               \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,                                            \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,                  \n" +
                "				rla.mfgVerificationStep,      \n" +
                "				rla.mfgDistMappingStep,      \n" +
                "				rla.mfgCodeStep,      \n" +
                "				rla.customerApproval,      \n" +
                "				rla.isCustomerUnAppoval,      \n" +
                "				rla.org_mfgCode,      \n" +
                "				rla.org_mfgPN,      \n" +
                "				rla.org_distributor,      \n" +
                "				rla.org_distPN,      \n" +
                "				rla.distVerificationStep,                 \n" +
                "				rla.distCodeStep,      \n" +
                "				rla.getMFGPNStep,      \n" +
                "				rla.obsoletePartStep,      \n" +
                "				rla.mfgGoodPartMappingStep,      \n" +
                "				rla.mfgPNStep,      \n" +
                "				rla.distPNStep,      \n" +
                "				rla.badMfgPN,      \n" +
                "				rla.distGoodPartMappingStep,      \n" +
                "				rla.nonRohsStep,      \n" +
                "				rla.epoxyStep,               \n" +
                "				rla.invalidConnectorTypeStep,      \n" +
                "				rla.duplicateMPNInSameLineStep,      \n" +
                "				rla.mismatchMountingTypeStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.restrictUseWithPermissionStep,      \n" +
                "				rla.restrictUsePermanentlyStep,      \n" +
                "				rla.partPinIsLessthenBOMPinStep,      \n" +
                "				rla.exportControlledStep,      \n" +
                "				rla.tbdPartStep,               \n" +
                "				rla.userData1,      \n" +
                "				rla.userData2,      \n" +
                "				rla.userData3,      \n" +
                "				rla.userData4,      \n" +
                "				rla.userData5,      \n" +
                "				rla.userData6,      \n" +
                "				rla.userData7,      \n" +
                "				rla.userData8,      \n" +
                "				rla.userData9,      \n" +
                "				rla.userData10,                  \n" +
                "				rla.pickupPadRequiredStep,      \n" +
                "				rla.matingPartRquiredStep,                 \n" +
                "				rla.suggestedGoodPartStep,                   \n" +
                "				rla.suggestedGoodDistPartStep,      \n" +
                "				rla.driverToolsRequiredStep,      \n" +
                "				rla.functionalTestingRequiredStep,      \n" +
                "				rla.mismatchValueStep,                   \n" +
                "				rla.approvedMountingType,      \n" +
                "				rla.mismatchPackageStep,      \n" +
                "				rla.mismatchPowerStep,                   \n" +
                "				rla.mismatchToleranceStep,      \n" +
                "				rla.mismatchTempratureStep,      \n" +
                "				rla.mismatchNumberOfRowsStep,      \n" +
                "				rla.uomMismatchedStep,      \n" +
                "				rla.programingRequiredStep,      \n" +
                "				rla.mismatchColorStep,      \n" +
                "				rla.restrictUseInBOMStep,      \n" +
                "				rla.restrictUseInBOMWithPermissionStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,               \n" +
                "				rla.restrictUseExcludingAliasStep,      \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,                                        \n" +
                "				rla.unknownPartStep,      \n" +
                "				rla.defaultInvalidMFRStep,      \n" +
                "				rla.isUnlockApprovedPart,          \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                       \n" +
                "							CONCAT(cpnPart.partTypeName)                       \n" +
                "						ELSE                       \n" +
                "							CONCAT(part.partTypeName)               \n" +
                "					END              \n" +
                "				)               \n" +
                "				AS parttypeID,                                    \n" +
                "				part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                       \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN                       \n" +
                "							CONCAT(cpnMount.name)                       \n" +
                "						ELSE                       \n" +
                "							CONCAT(mount.name)               \n" +
                "					END              \n" +
                "				) AS mountingtypeID,                        \n" +
                "				CONCAT(cat.categoryname) partcategoryID,               \n" +
                "				c.isGoodPart isMFGGoodPart,      \n" +
                "				(SELECT co.isGoodPart FROM component co WHERE co.id = rla.distMfgPNID AND co.deletedAt IS NULL) isDistGoodPart,      \n" +
                "				c.RoHSStatusID RoHSStatusID,                  \n" +
                "				fun_getRoHSCategoryByID(c.RoHSStatusID) refMainCategoryID,                                          \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN (c.eolDate IS NOT NULL AND c.eolDate < fun_DatetimetoUTCDateTime()) OR EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE c.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0) THEN               \n" +
                "							1               \n" +
                "						ELSE               \n" +
                "							0               \n" +
                "					END               \n" +
                "				) isObsolete,              \n" +
                "				c.PIDCode,                                  \n" +
                "				c.mfgPNDescription,      \n" +
                "				c.pitch,      \n" +
                "				c.noOfRows,      \n" +
                "				c.partPackage,      \n" +
                "				c.value,      \n" +
                "				c.tolerance,                                            \n" +
                "				c.voltage,                    \n" +
                "				c.isCustom,      \n" +
                "				c.packaging,                \n" +
                "				c.deviceMarking,      \n" +
                "				c.powerRating,      \n" +
                "				c.minOperatingTemp,      \n" +
                "				c.maxOperatingTemp,      \n" +
                "				c.connecterTypeID,      \n" +
                "				c.driverToolRequired,                                  \n" +
                "				c.matingPartRquired,                                  \n" +
                "				c.pickupPadRequired,                                  \n" +
                "				c.programingRequired,                                  \n" +
                "				c.dataSheetLink,                      \n" +
                "				c.isCPN,                 \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = c.id AND deletedAt IS NULL) AS driveToolIDs,                                  \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = c.id AND deletedAt IS NULL AND `type` = 3) AS programingRequiredIDs,                            \n" +
                "				(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = c.id AND deletedAt IS NULL) AS operationalAttributeIDs,                                \n" +
                "				(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,      \n" +
                "				(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND deletedAt IS NULL ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,          \n" +
                "				c.isTemperatureSensitive,      \n" +
                "				c.noOfPosition AS componentLead,      \n" +
                "				fun_getPartStatusNameByID(c.partStatus) AS partStatus,      \n" +
                "				fun_getPartStatusColorCodeByID(c.partStatus) AS partStatuscolorCode,      \n" +
                "				c.createdBy,      \n" +
                "				(SELECT u.unitName FROM UOMs u WHERE u.id = c.uom ) AS uom,              \n" +
                "				c.color,      \n" +
                "				c.uom AS partUOMID,                   \n" +
                "				(              \n" +
                "					CASE               \n" +
                "						WHEN (              \n" +
                "							SELECT 		COUNT(cs.isExportControlled) AS isExportControlled                \n" +
                "							FROM 		component co                             \n" +
                "							LEFT JOIN 	component_standard_details csd ON csd.componentID = co.id AND IFNULL(csd.isDeleted,0) = 0                             \n" +
                "							LEFT JOIN 	certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1                            \n" +
                "							WHERE 		c.id = co.id              \n" +
                "						) > 0 THEN               \n" +
                "							1               \n" +
                "						ELSE               \n" +
                "							0               \n" +
                "					END               \n" +
                "				) isExportControlled,            \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,                                \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,      \n" +
                "				ac.description AS additionalComment,      \n" +
                "				ac.id AS additionalCommentId               \n" +
                "		FROM 		rfq_lineitems_alternatepart rla      \n" +
                "		INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0              \n" +
                "		INNER JOIN	component c ON c.id = rla.mfgPNID AND c.isDeleted = 0                \n" +
                "		LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID              \n" +
                "		LEFT JOIN 	mfgcodemst mcm ON rla.mfgCodeID = mcm.id AND mcm.isDeleted = 0              \n" +
                "		LEFT JOIN 	mfgcodemst mcmDist ON rla.mfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_parttypemst part ON c.functionalCategoryID = part.id AND part.isDeleted = 0              \n" +
                "		LEFT JOIN 	component cpn ON rl.custPNID = cpn.id AND cpn.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id AND cpnPart.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_mountingtypemst mount ON c.mountingtypeID = mount.id AND mount.isDeleted = 0               \n" +
                "		LEFT JOIN 	rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id AND cpnMount.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_partcategory cat ON c.category = cat.id AND cat.isDeleted = 0              \n" +
                "		LEFT JOIN 	rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = rl.id AND ac.isDeleted = 0              \n" +
                "		WHERE 	 	FIND_IN_SET(rl.id, v_SearchBOMLineIds)              \n" +
                "					AND rla.partID = IFNULL(pAssyId, rla.partID)              \n" +
                "					AND rla.isDeleted = 0              \n" +
                "		ORDER BY 	rl.lineID;     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;              \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1017,'1.00','V1','Bug #34383 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1017:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	                                                                                \n" +
                "	IN ppageIndex INT,                                                                                    \n" +
                "	IN precordPerPage INT,                                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),	                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                             \n" +
                "	IN pWOId INT,                              \n" +
                "        IN woSubstatusIds LONGTEXT,                              \n" +
                "        IN woTypeIds LONGTEXT,                              \n" +
                "        IN rohsStatusIds LONGTEXT,                              \n" +
                "        IN assyTypeIds LONGTEXT,                              \n" +
                "        IN stdCertificationIds LONGTEXT,                              \n" +
                "        IN stdclassIds LONGTEXT,                              \n" +
                "        IN isPendingSoMapping TINYINT,                              \n" +
                "        IN isPendingkitMapping TINYINT,                              \n" +
                "        IN isRunningwo TINYINT,                              \n" +
                "        IN isTrackBySerialNumber TINYINT,                              \n" +
                "        IN isrushJob TINYINT,                              \n" +
                "        IN isstoppedWo TINYINT,                              \n" +
                "        IN isnewWo TINYINT,                              \n" +
                "        IN isWaterSoluble TINYINT,                              \n" +
                "        IN isecodfm TINYINT,                              \n" +
                "        IN isOpenWo TINYINT,                      \n" +
                "	IN isInterBuildFilter TINYINT,                              \n" +
                "        IN customerIds LONGTEXT,                              \n" +
                "        IN salesOrderdetails LONGTEXT,                              \n" +
                "        IN assyIds LONGTEXT ,                              \n" +
                "        IN assyNicknameIds LONGTEXT,                              \n" +
                "        IN operationIds LONGTEXT,                              \n" +
                "        IN employeeIds LONGTEXT ,                              \n" +
                "	IN equipmentIds LONGTEXT,                              \n" +
                "	IN materialIds LONGTEXT,                              \n" +
                "	IN umidIds LONGTEXT,          \n" +
                "	IN isNoClean TINYINT,          \n" +
                "	IN isFluxNotApplicable TINYINT,          \n" +
                "	IN isKitNotRequired TINYINT          \n" +
                "    )  \n" +
                "BEGIN                                                                                    \n" +
                "	DECLARE pOffset INT;                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                      \n" +
                "	DECLARE v_WorkOrderDetailWhere VARCHAR(1000);                           \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                     \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                     \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                              \n" +
                "###                      \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(\"                                                  \n" +
                "	SELECT 	wo.woID,			wo.woNumber,				wo.customerID,                      \n" +
                "		wo.buildQty,			wo.startTime,				wo.endTime,                      \n" +
                "		wo.masterTemplateID,		wo.refrenceWOID,			wo.createdAt,                      \n" +
                "		wo.createdBy,			wo.updatedAt,				wo.updatedBy,							                      \n" +
                "		wo.woStatus,			wo.isDeleted,				wo.excessQty,				                      \n" +
                "		wo.isClusterApplied,		wo.RoHSStatusID,			wo.woVersion,				                      \n" +
                "		wo.isWatersoluble,		wo.isOperationTrackBySerialNo,		wo.ECORemark,                      \n" +
                "		wo.FCORemark,			wo.isStopWorkorder,			wo.isRevisedWO,                      \n" +
                "		wo.isMFGQty,			wo.isOperationsVerified,		wo.terminateWOID,                      \n" +
                "		wo.woType,			wo.ecoReqID,				wo.partID,                      \n" +
                "		wo.locationDetails,		wo.isHotJob,				wo.initialInternalVersion,                      \n" +
                "		wo.terminateWOOPID,		wo.isIncludeSubAssembly,		wo.documentPath,                      \n" +
                "		wo.isRackTrackingRequired,	wo.isStrictlyFollowRackValidation,	wo.createByRoleId,                      \n" +
                "		wo.updateByRoleId,		wo.selectedSampleID,			wo.isNoClean,  wo.isFluxNotApplicable ,                   \n" +
                "		wo.isInternalBuild,		wo.proposedUmidQty,                      \n" +
                "		wo.woSubStatus,(case when wo.isRackTrackingRequired=1 then 'Yes' else 'No' end) as   rackTrackingRequired,                              \n" +
                "		(case when wo.isStrictlyFollowRackValidation=1 then 'Yes' else 'No' end) as   strictlyFollowRackValidation,                                                                        \n" +
                "		fun_getIntToText(wo.isInternalBuild) as  isInternalBuildConvertedValue,                     \n" +
                "		fun_getUserNameByID(wo.updatedBy) woModifiedBy,                                          \n" +
                "		fun_getUserNameByID(wo.createdBy) woCreatedBy,                                          \n" +
                "		fun_getRoleByID(wo.updateByRoleId) updatedbyRole,                   \n" +
                "		fun_getRoleByID(wo.createByRoleId) createdbyRole,                        \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(wo.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woCreatedAt,                                    \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(wo.updatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woUpdatedAt,                                        \n" +
                "		fun_getMfgCodeAndNameByID(wo.customerID) mfgName,                                                                      \n" +
                "		co.PIDCODE AS PIDCode,                                                                       \n" +
                "		co.mfgPN AS mfgPN,                                                                          \n" +
                "		co.nickname AS nickName,                                                                       \n" +
                "		co.mfgPNDescription AS mfgPNDescription,                                                                                 \n" +
                "		co.rev AS rev,                                                                                                           \n" +
                "		co.liveVersion AS liveVersion,                                       \n" +
                "		wthu.woTransHoldUnholdId,		                                    \n" +
                "		vuwosummstk.shippedQty,                                                                      \n" +
                "		vuwosummstk.readytoShipQty,                                            \n" +
                "		vuwosummstk.scrapQty AS scrappedQty ,                       \n" +
                "		`vuwosummstk`.`stockAdjustmentQty`,                                                                     \n" +
                "		`tmp_vuwotransfer`.`OP Name` AS fromOpName,                                                                      \n" +
                "		`tmp_vuwotransfer`.`OP Number` AS fromOpNumber,                                                                      \n" +
                "		`tmp_vuwotransfer`.`woOPID Identity` AS fromWOOPID,                                                                       \n" +
                "		`tmp_vuwotransfer`.`TransferQty` AS transferQty,                                                                      \n" +
                "		`tmp_vuwotransfer`.`To WO Number` AS transferWoNumber,                                                                  \n" +
                "		`tmp_vuwotransfer`.`To WO Version` AS transferWoVersion,                                              \n" +
                "		fun_getWoSubStatusNameByID(`wo`.`woSubStatus`) AS `woSubStatusConvertedValue`,                                                                         \n" +
                "		-- fun_getReadyStock(`wo`.`woID`) AS returnPending,                                                                        \n" +
                "		(IFNULL(vuwosummstk.buildQty,0) - IFNULL(vuwosummstk.firstOPtotalQty,0)) AS returnPending,                                                                              \n" +
                "		CAST(fun_getMinShippingDateByWOID(`wo`.`woID`) AS DATETIME) AS shippingDate,                                                                                   \n" +
                "		ro.rohsIcon,                                                                      \n" +
                "		`ro`.`name` AS `rohsName` ,                                                                                \n" +
                "		tmp_workorder_operation.opCount opCount,                                                                      \n" +
                "		tmp_workorder_reqforreview.woReviewChangesCount woReviewChangesCount,                                                                      \n" +
                "		tmp_eco_request.ecoRequestCount ecoRequestCount,                                                      \n" +
                "		tmp_eco_request.dfmRequestCount as dfmRequestCount,                                                       \n" +
                "		tmp_workorder_cluster.parallelClusterCount,                                                                      \n" +
                "		fun_getSampleAvailableConvertedValueByAssyID(wo.partID) AS `isSampleAvailableConvertedValue` ,                                                                                    \n" +
                "		fun_getIntToText(wo.isHotJob) AS `isHotJobConvertedValue`,                                                                                    \n" +
                "		fun_getIntToText(`wo`.`isOperationTrackBySerialNo`) AS `isOperationTrackBySerialNoConvertedValue`,                                                                                    \n" +
                "		fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,                                                                            \n" +
                "		fun_getIntToText(`wo`.`isStopWorkorder`) AS `isHalt`,                                                                                  \n" +
                "		fun_getWOHoldUnholdReason(wo.woID,wo.isStopWorkorder,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS reasonDetails,                                                                                  \n" +
                "		tmp_workorder_operation.stopOperationCount as stopOperationCount,                                                                      \n" +
                "		vusalesorderdet.totalPOQty,                       \n" +
                "		vusalesorderdet.POQtyValues soPOQty,                                                                                      \n" +
                "   		vusalesorderdet.totalMRPQty,                       \n" +
                "   		vusalesorderdet.MRPQtyValues soMRPQty,                        \n" +
                "   		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.poNumber ELSE vusalesorderdet.poNumber END poNumber,                           \n" +
                "		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.salesOrderNumber ELSE vusalesorderdet.salesOrderNumber END salesOrderNumber,                        \n" +
                "		vusalesorderdet.lineID ,                                              \n" +
                "		 vusalesorderdet.salesOrderMstIDs,                       \n" +
                "		 vusalesorderdet.SOPOQtyValues ,                               \n" +
                "		fun_getKitReleaseStatusByWoID(wo.woID) kitReleaseStatus,                            \n" +
                "		(CASE WHEN co.totalSolderPoints > 0 THEN fun_calculateDPMOForWO(wo.woID) ELSE NULL END) AS DPMO  ,                                        \n" +
                "		tmp_workorder_reqrevcomments.pendingWOReqThreadCount as pendingWOReqThreadCount,                        \n" +
                "		fun_getAssyTypeByID(co.assemblyType) as assyTypeName ,            \n" +
                "		wo.isKitAllocationNotRequired,          \n" +
                "		Round(((IFNULL(vuwosummstk.readytoShipQty,0) + IFNULL(vuwosummstk.scrapQty,0) + IFNULL(vuwosummstk.shippedQty,0))/IFNULL(wo.buildQty,0))*100,2) AS `woCompletionPercentage`,        \n" +
                "		fun_getIntToText(wo.isKitAllocationNotRequired) isKitAllocationNotRequiredConvertedValue,    \n" +
                "        (CASE WHEN co.isFluxNotApplicable = 1 THEN 'NA'        \n" +
                "				  WHEN co.isNoClean = 0 AND co.isWaterSoluble = 1 THEN 'WS'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 0 THEN 'NC'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NCF'  END) assyFluxType,        \n" +
                "            (CASE WHEN co.isFluxNotApplicable = 1 THEN 'Not Applicable'        \n" +
                "				  WHEN co.isNoClean = 0 AND co.isWaterSoluble = 1 THEN 'Water-Soluble'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 0 THEN 'No-Clean'        \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'     \n" +
                "                  ELSE 'No-Configured' END ) assyFluxTypeConvertedValue ,   \n" +
                "                systemID        \n" +
                "	FROM                       \n" +
                "		workorder wo                                                                                    \n" +
                "		INNER JOIN component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3                                                                          \n" +
                "		INNER JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                                                                              \n" +
                "		LEFT OUTER JOIN vu_workorder_summary_stk vuwosummstk ON (vuwosummstk.woid = wo.woID)                                           \n" +
                "		LEFT OUTER JOIN workorder_trans_hold_unhold wthu ON wo.woID = wthu.woID AND wthu.isDeleted = 0  AND wthu.endDate IS NULL                                    \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				`wotransfer`.`OP Name`,                                                                    \n" +
                "				`wotransfer`.`OP Number`,                                                                      \n" +
                "				`wotransfer`.`woOPID Identity`,                                                                       \n" +
                "				`wotransfer`.`To WO Number`,                                                                      \n" +
                "				`wotransfer`.`To WO Version`,                                                                   \n" +
                "				`wotransfer`.`woID Identity` AS woID,                      \n" +
                "				SUM(`wotransfer`.`Transfer Qty`) `TransferQty`                                                                      \n" +
                "			FROM                       \n" +
                "				vu_workorder_transfer_report wotransfer                      \n" +
                "			GROUP BY                       \n" +
                "				`wotransfer`.`OP Name`,                                                                    \n" +
                "				`wotransfer`.`OP Number`,                                                                      \n" +
                "				`wotransfer`.`woOPID Identity`,                                                                       \n" +
                "				`wotransfer`.`To WO Number`,                                                                      \n" +
                "				`wotransfer`.`To WO Version`,                                                                   \n" +
                "				`wotransfer`.`woID Identity`                      \n" +
                "		) as tmp_vuwotransfer ON `tmp_vuwotransfer`.`woID` = wo.woID                      \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID,                       \n" +
                "				SUM(IF(er.requestType = 1, 1,0)) AS  ecoRequestCount,                      \n" +
                "				SUM(IF(er.requestType = 2, 1,0)) AS dfmRequestCount                       \n" +
                "			FROM                       \n" +
                "				eco_request er                       \n" +
                "			WHERE  er.isDeleted  = 0              \n" +
                "			GROUP BY woID) as tmp_eco_request ON tmp_eco_request.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID, COUNT(1) AS parallelClusterCount                       \n" +
                "			FROM                       \n" +
                "				workorder_cluster woc                       \n" +
                "			WHERE                       \n" +
                "				woc.isDeleted = 0 AND woc.isParellelOperation = 1              \n" +
                "				GROUP BY woID                      \n" +
                "		) as tmp_workorder_cluster ON tmp_workorder_cluster.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID, COUNT(1)  AS woReviewChangesCount                       \n" +
                "			FROM                       \n" +
                "				workorder_reqforreview                       \n" +
                "			WHERE  isDeleted = 0                      \n" +
                "			GROUP BY woID                      \n" +
                "		) as tmp_workorder_reqforreview ON tmp_workorder_reqforreview.woID = wo.woID                      \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				woID,                       \n" +
                "				COUNT(*) AS opCount,                      \n" +
                "				SUM(IF(isStopOperation = 1,1,0)) AS stopOperationCount                      \n" +
                "			FROM                       \n" +
                "				workorder_operation                       \n" +
                "			WHERE  isDeleted = 0                      \n" +
                "			GROUP BY woID                      \n" +
                "		) as tmp_workorder_operation ON tmp_workorder_operation.woID = wo.woID                       \n" +
                "		LEFT OUTER JOIN (                      \n" +
                "			SELECT                       \n" +
                "				wr.woID, COUNT(1) AS pendingWOReqThreadCount                      \n" +
                "			FROM                       \n" +
                "				workorder AS wo                       \n" +
                "				INNER JOIN workorder_reqrevcomments AS wr ON wo.woID = wr.woID                      \n" +
                "			WHERE                       \n" +
                "				wr.isDeleted = 0  AND wr.accRejStatus = 'P'                                      \n" +
                "				AND wr.commentemployeeID != fun_getEmployeeIDByUserID(wo.createdBy)                      \n" +
                "			GROUP BY woID) as tmp_workorder_reqrevcomments  ON tmp_workorder_reqrevcomments.woID = wo.woID                      \n" +
                "		LEFT JOIN vu_workorder_salesorder_details parentSODtl ON parentSODtl.woID = wo.terminateWOID                         \n" +
                "	WHERE                       \n" +
                "		wo.isdeleted = 0\");                      \n" +
                " ##select @temp_Sproc_GetWorkorder;                      \n" +
                "  IF(woSubstatusIds IS NOT NULL AND woSubstatusIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woSubStatus in (', woSubstatusIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(woTypeIds IS NOT NULL AND woTypeIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woType in (', woTypeIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(rohsStatusIds IS NOT NULL AND rohsStatusIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.RoHSStatusID in (', rohsStatusIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(assyTypeIds IS NOT NULL AND assyTypeIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partId IN (SELECT c.id FROM component c WHERE c.isDeleted = 0 and c.assemblyType IN (',assyTypeIds,'))');                              \n" +
                "  END IF;                              \n" +
                "IF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '' AND                                                    \n" +
                "		stdclassIds IS NOT NULL AND stdclassIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' ) and wc.classIds in (', stdclassIds, ' )) ');                                                    \n" +
                "	ELSEIF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' )) ');                                                    \n" +
                "	ELSEIF (stdclassIds IS NOT NULL AND stdclassIds != '') THEN                                                    \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.classIds in (', stdclassIds, ' )) ');                                                    \n" +
                "    END IF;                              \n" +
                "  IF(isPendingSoMapping=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0 ) ');                                                    \n" +
                "  END IF;                              \n" +
                "  IF(isPendingkitMapping=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from salesorder_plan_detailsmst sp where sp.woID = wo.woID and sp.isDeleted = 0 ) ');                                                    \n" +
                "  END IF;                              \n" +
                "IF(isRunningwo=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and wt.checkinTime is not null and wt.checkoutTime is null) ');                               \n" +
                "END IF;                                \n" +
                "IF(isTrackBySerialNumber=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isOperationTrackBySerialNo=1');                                \n" +
                "END IF;                              \n" +
                "IF(isrushJob=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isHotJob=1');                                \n" +
                "END IF;                              \n" +
                "IF(isstoppedWo=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isStopWorkorder=1');                              \n" +
                "END IF;                              \n" +
                "  IF(isnewWo IS NOT NULL)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isRevisedWO=',isnewWo,'');                              \n" +
                "  END IF;                              \n" +
                "  IF(isecodfm=1)THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 ) ');                               \n" +
                "  END IF;                              \n" +
                "  IF(isWaterSoluble = 1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isWatersoluble=1');                              \n" +
                "  END IF;          \n" +
                "  IF(isNoClean = 1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isNoClean=1');                              \n" +
                "  END IF;          \n" +
                "  IF(isFluxNotApplicable = 1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isFluxNotApplicable=1');                              \n" +
                "  END IF;	                       \n" +
                "  IF(isOpenWo IS NOT NULL)THEN                              \n" +
                "	IF(isOpenWo=1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus=\"P\") ');                              \n" +
                "	ELSE                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus!=\"P\") ');                              \n" +
                "	END IF;                              \n" +
                "  END IF;                             \n" +
                "   IF(isInterBuildFilter =1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isInternalBuild = 1 ');                              \n" +
                "	END IF;             \n" +
                "    IF(isKitNotRequired =1)THEN                              \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isKitAllocationNotRequired = 1 ');                              \n" +
                "	END IF;                      \n" +
                "  IF(customerIds IS NOT NULL AND customerIds!='')THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.customerID in (', customerIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(salesOrderdetails IS NOT NULL AND salesOrderdetails!='')THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0  and ws.salesorderdetailID in (select sd.id from salesorderdet sd where sd.isDeleted = 0 and sd.refSalesOrderID in (',salesOrderdetails,'))) ');                              \n" +
                "  END IF;                              \n" +
                "  IF(assyIds IS NOT NULL AND assyIds!='') THEN                              \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (', assyIds, ' )');                              \n" +
                "  END IF;                              \n" +
                "  IF(assyNicknameIds IS NOT NULL AND assyNicknameIds!='') THEN                              \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (select c.id from component c where c.nickname in (', assyNicknameIds, ' ))');                              \n" +
                "  END IF;                              \n" +
                "  IF (operationIds IS NOT NULL AND operationIds != '') THEN                               \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_operation woop where woop.woID = wo.woID and woop.isDeleted = 0 and woop.opID in (', operationIds, ' )) ');                                                    \n" +
                "  END IF;                              \n" +
                "  IF (employeeIds IS NOT NULL AND employeeIds != '' AND operationIds IS NOT NULL AND operationIds != '') THEN                               \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0 and woe.opID in (',operationIds,') and woe.employeeID in (', employeeIds, ' ))                               \n" +
                "	OR  exists (select 1 from  workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and wte.opID in (',operationIds,') and wte.employeeID in (', employeeIds, ' )))');                               \n" +
                "  ELSEIF(employeeIds IS NOT NULL AND employeeIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.employeeID in (', employeeIds, ' ))                               \n" +
                "            OR  exists(select 1 from workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and  wte.employeeID in (', employeeIds, ' ))                              \n" +
                "            OR  exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.employeeID in (', employeeIds, ' )))');                                \n" +
                "  END IF;                              \n" +
                "  IF(equipmentIds IS NOT NULL AND equipmentIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_equipment woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.eqpID in (', equipmentIds, ' ))                               \n" +
                "            OR  exists(select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and  wt.equipmentID in (', equipmentIds, ' ))                              \n" +
                "            OR exists(select 1 from workorder_operation_equipment_feeder_details woef where woef.woopeqpid in (select woe.woOpEqpID from workorder_operation_equipment woe where woe.woID=wo.woID and woe.isDeleted = 0) and woef.isDeleted = 0 and  woef.eqpID in (', equipmentIds, ' )))');                                \n" +
                "  END IF;                              \n" +
                "  IF(materialIds IS NOT NULL AND materialIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_part wop where wop.woID = wo.woID and wop.isDeleted = 0  and wop.partID in (', materialIds, ' ))                               \n" +
                "            OR exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.mfgpnid in (', materialIds, ' )))');                                \n" +
                "  END IF;                              \n" +
                "  IF(umidIds IS NOT NULL AND umidIds != '') THEN                              \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.refsidid in (select csd.id from component_sid_stock csd where csd.uid in (', umidIds, ' ) and csd.isDeleted = 0))');                                \n" +
                "  END IF;                              \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                    \n" +
                "	ELSE                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName ASC\") ;                                                                                    \n" +
                "	END IF;	                                                                                    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                                                    \n" +
                "	END IF;	                                                                                    \n" +
                "    IF (pWOId != 0) THEN                                                \n" +
                "		SET v_WorkOrderDetailWhere = CONCAT(\" AND woID = \", pWOId);                                                \n" +
                "	END IF;                                      \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                    \n" +
                "	ELSE	                                                                                    \n" +
                "		SET rowNumWhere = '';                                                                                    \n" +
                "	END IF;	                                                                                    \n" +
                "	  /* to get total count of rows */                                                       \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetWorkorder,\" ) c where 1=1 and \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, ''));                                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                      \n" +
                "	EXECUTE query2;                                                      \n" +
                "	DEALLOCATE PREPARE query2;                                                    \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetWorkorder,\" ) c  where \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                                                      \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                      \n" +
                "	EXECUTE query1;                                                      \n" +
                "	DEALLOCATE PREPARE query1;                                                                               \n" +
                "	/* to get total count of rows of workorder table */                                                                                    \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) FROM workorder where isDeleted = 0\" );                                                                                    \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                    \n" +
                "	EXECUTE query3;                                                                                    \n" +
                "	DEALLOCATE PREPARE query3;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1018,'1.00','V1','Resolved Work Order List Issue - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1018:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPurchaseOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(                      \n" +
                "	IN pid INT                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "    # Purchase Order Master details                      \n" +
                "    SELECT  po.id,                       \n" +
                "		po.status,                      \n" +
                "		po.poNumber,                      \n" +
                "        po.poRevision,                      \n" +
                "        po.poDate,       \n" +
                "        po.poWorkingStatus,                     \n" +
                "        po.supplierAddress,                      \n" +
                "		po.shippingAddress,               \n" +
                "        po.intermediateAddress,              \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                        \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                      \n" +
                "        po.shippingInsurance,                      \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,                      \n" +
                "        po.poComment,                      \n" +
                "        po.serialNumber,                     \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                      \n" +
                "		us.emailAddress,                      \n" +
                "		emp.phExtension  ,  \n" +
                "        '1.00' AS docNumber  \n" +
                "	FROM purchase_order_mst po                      \n" +
                "         INNER JOIN                            \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID                            \n" +
                "        AND gcs.isDeleted = 0                            \n" +
                "        INNER JOIN                            \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID                            \n" +
                "        AND gcp.isDeleted = 0                      \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy                              \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                        \n" +
                "        WHERE po.isDeleted = 0 AND po.id = pid;                      \n" +
                "  \n" +
                "	# Purchase Order Line details                      \n" +
                "    SELECT  pod.lineID,                      \n" +
                "		pod.id AS pODetID,                      \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,              \n" +
                "		(CASE WHEN (c.iscustom=1) THEN                           \n" +
                "			c.custAssyPN                          \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                           \n" +
                "			c.mfgPN                           \n" +
                "        ELSE ''  END) AS mfgPN ,                    \n" +
                "        IFNULL(c.rev, '') AS revision,                      \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,                      \n" +
                "		pod.supplierQuoteNumber,                      \n" +
                "        pod.internalRef,                      \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,                      \n" +
                "        pod.qty,                      \n" +
                "        'EA' uom,                      \n" +
                "        pod.price,    \n" +
                "        (SELECT SUM(IFNULL(pold.receivedQty,0)) FROM purchase_order_line_release_det pold WHERE pold.isdeleted=0 AND pold.refPurchaseOrderDetID=pod.id) receivedQty,       \n" +
                "       fun_getMFGPNByID(pod.supplierPartID) supplierPN,                       \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,             \n" +
                "        CONCAT(IFNULL(pod.partDescription, ''),CASE WHEN (fun_getCertificationByPartID(pod.mfgPartID) IS NULL AND c.htsCode IS NULL AND c.countryOfOrigin IS NULL) THEN '' ELSE '<br/>' END,             \n" +
                "            IFNULL(CONCAT(                                      \n" +
                "                            fun_getCertificationByPartID(pod.mfgPartID)),                                      \n" +
                "                    ''),                      \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                      \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                    \n" +
                "        pod.lineComment                      \n" +
                "	 FROM purchase_order_det pod                      \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)                       \n" +
                "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid                       \n" +
                "	 ORDER BY pod.lineID ASC;	                      \n" +
                "  \n" +
                "	# Get purchase order Total Price table details                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                                 \n" +
                "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud                     \n" +
                "				INNER JOIN component cm ON cm.id = pud.mfgPartID                      \n" +
                "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 AND cm.partType <> 4) totalLinePrice ,                          \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,                              \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd                       \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID                      \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 AND c.partType = 4) totalPOMiscPrice                              \n" +
                "		FROM purchase_order_det pd                         \n" +
                "		WHERE pd.refPurchaseOrderID= pid                      \n" +
                "		AND pd.isdeleted=0;               \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                      \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                      \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,                 \n" +
                "				IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0),0) totalPOPrice FROM tempTotalPrice LIMIT 1;                               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1019,'1.00','V1','Sproc_GetPurchaseOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1019:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(	                                              \n" +
                "	IN pid INT(11)                                    \n" +
                "    )  \n" +
                "BEGIN                                              \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,                                      \n" +
                "		sm.soDate,                                            \n" +
                "		sm.status,                \n" +
                "		sm.shippingComment,                                            \n" +
                "		mfg.mfgName AS customer,                                            \n" +
                "		gctsm.gencCategoryName AS shippingMethod,                                            \n" +
                "		gctpm.gencCategoryName AS paymentMethod,                  \n" +
                "		-- get intermediate shipment address                  \n" +
                "		CASE                                             \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN                                                    \n" +
                "	(                                                    \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                            \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                         \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                 \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                 \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                        \n" +
                "	FROM customer_addresses ca                                                        \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                        \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0                                                     \n" +
                "	) END AS intermediateShippingAddress,                  \n" +
                "  \n" +
                "        -- get shipping detils of customer                                                     \n" +
                "        CASE                                             \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN                                                    \n" +
                "	(                                                    \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                            \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                         \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                 \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                 \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                        \n" +
                "	FROM customer_addresses ca                                                        \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                        \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                                                     \n" +
                "	) END AS shippingAddress,                                            \n" +
                "	-- get billing Address                                            \n" +
                "	CASE                                             \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN                                                    \n" +
                "	(                                                    \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                         \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),                                \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                 \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                        \n" +
                "	FROM customer_addresses ca                                                        \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID                                                        \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'                                                   \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,                               \n" +
                "    '1.00' docNumber  \n" +
                "  \n" +
                "	FROM salesordermst sm                                              \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)                                            \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)                                              \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0                                \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId                                  \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo                                          \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);                                          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT                     \n" +
                "    sd.lineID,                    \n" +
                "    c.PIDCode,                    \n" +
                "    sd.id AS sDetID,                    \n" +
                "    (CONCAT(CASE                    \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN                    \n" +
                "        ELSE c.custAssyPN                    \n" +
                "    END)) mfgPN,                    \n" +
                "    c.rev revision,             \n" +
                "    CONCAT(IFNULL(sd.partDescription, ''), '<br/>',                               \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),                                  \n" +
                "            IFNULL(CONCAT(', ',                                  \n" +
                "                            fun_getCertificationByPartID(sd.partID)),                                  \n" +
                "                    ''),                                  \n" +
                "            IFNULL(CONCAT(', Quote#', CASE                    \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                    \n" +
                "        ELSE sd.quoteNumber                    \n" +
                "    END), ''),                                  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                   \n" +
                "    sd.qty,                    \n" +
                "    sd.price,                    \n" +
                "    sd.qty * sd.price AS extPrice,                    \n" +
                "    sd.materialTentitiveDocDate,                \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,                   \n" +
                "    CASE                    \n" +
                "        WHEN sd.partCategory = 2 THEN NULL                    \n" +
                "        ELSE sd.shippingQty                    \n" +
                "    END shippingQty,                    \n" +
                "    ro.rohsIcon AS rohsIcon,                    \n" +
                "    ro.name AS rohsStatus,                    \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,                    \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,    \n" +
                "    su.emailAddress,                    \n" +
                "    sd.custPOLineNumber,                    \n" +
                "    CASE                    \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                    \n" +
                "        ELSE sd.quoteNumber                    \n" +
                "    END quoteNumber,                    \n" +
                "    sd.remark,                    \n" +
                "    emp.phExtension,              \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser                    \n" +
                "FROM                    \n" +
                "    salesorderdet sd                    \n" +
                "        JOIN                    \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id                    \n" +
                "        AND sm.deletedAt IS NULL)                    \n" +
                "        JOIN                    \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)                    \n" +
                "        JOIN                    \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id                    \n" +
                "        AND ro.deletedAt IS NULL)                    \n" +
                "        LEFT JOIN                    \n" +
                "    users su ON su.id = sm.updatedBy                    \n" +
                "        LEFT JOIN                    \n" +
                "    employees emp ON emp.id = su.employeeID                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                    \n" +
                "        AND ra.partID = sd.partID                    \n" +
                "        LEFT JOIN                    \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                    \n" +
                "WHERE                    \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)                    \n" +
                "        AND sm.id = pid                    \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;	                                \n" +
                "  \n" +
                "        -- get salesorder level total details for                                \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                \n" +
                "	SELECT SUM(sd.qty * sd.price) totalLinePrice,                                \n" +
                "	(SELECT SUM(sod.qty * sod.price) FROM salesorder_otherexpense_details sod WHERE sod.refSalesOrderDetID IN (SELECT s.id FROM salesorderdet s JOIN component c ON c.id=s.partID AND c.isdeleted=0 WHERE s.refsalesorderID=pid            \n" +
                "                	AND s.isDeleted=0 ) AND sod.isdeleted=0) totalLineMiscPrice,                                \n" +
                "	(SELECT SUM(ssd.qty * ssd.price) FROM salesorderdet ssd JOIN component c ON c.id=ssd.partID AND c.isdeleted=0  WHERE ssd.refsalesorderID=pid AND c.partType=4 AND ssd.isdeleted=0) totalSOMiscPrice                              \n" +
                "                	FROM salesorderdet sd  JOIN component c ON c.id=sd.partID AND c.isdeleted=0                             \n" +
                "                	WHERE sd.refsalesorderID=pid AND c.partType IN (2,3) AND sd.isdeleted=0;                     \n" +
                "  \n" +
                "	SELECT                     \n" +
                "    IFNULL(totalLinePrice,0) totalLinePrice,                    \n" +
                "    IFNULL(totalLineMiscPrice, 0) totalLineMiscPrice,                    \n" +
                "    IFNULL(totalSOMiscPrice, 0) totalSOMiscPrice,                    \n" +
                "    (IFNULL(totalLinePrice,0) + IFNULL(totalLineMiscPrice, 0) + IFNULL(totalSOMiscPrice, 0)) totalSOPrice                    \n" +
                "FROM                    \n" +
                "    tempTotalPrice;                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1020,'1.00','V1','Sproc_GetSalesOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1020:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                                      \n" +
                "	IN cpid INT                                      \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	SELECT                                   \n" +
                "    cp.id,                              \n" +
                "    cp.status,                     \n" +
                "    cp.packingSlipType,                    \n" +
                "    cp.packingSlipNumber AS PackingSlip,                                  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                                  \n" +
                "    cp.poDate AS PODate,                                  \n" +
                "    cp.soNumber AS SalesOrderNumber,                                  \n" +
                "    cp.poNumber AS PONumber,              \n" +
                "    cp.packingSlipComment,                                  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                                  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                                  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                              \n" +
                "    cp.soDate AS SODate,                                  \n" +
                "    cp.sorevision AS SORevision,                                  \n" +
                "	cp.billingAddress AS SoldToAddress,                            \n" +
                "	cp.shippingAddress AS ShippingAddress,                   \n" +
                "	cp.intermediateAddress AS IntermediateAddress,                     \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,                            \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,    \n" +
                "    cp.revision packingSlipVersion  ,  \n" +
                "    '1.00' docNumber  \n" +
                "FROM                                  \n" +
                "    customer_packingslip cp                         \n" +
                "        LEFT JOIN                                  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                                  \n" +
                "        AND sm.isDeleted = 0                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                                  \n" +
                "        AND gc.isDeleted = 0                                  \n" +
                "        AND gc.categoryType = 'Shipping Methods'                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                                  \n" +
                "        AND gcc.isDeleted = 0                                  \n" +
                "        AND gcc.categoryType = 'Payment Terms'                                \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                                      \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                               \n" +
                "WHERE                                  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                                  \n" +
                "LIMIT 1;                                  \n" +
                "  \n" +
                "SELECT                                   \n" +
                "	cpd.lineID AS PSLine,                            \n" +
                "    cpd.id AS cpDetID,      \n" +
                "    ss.releaseNumber,                            \n" +
                "    cpd.refCustPackingSlipID AS cpID,                             \n" +
                "    cpd.partId,                            \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                              \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,                              \n" +
                "    cpd.custPOLineID AS POLine,                      \n" +
                "    cpd.shippingNotes AS ShippingComment,                      \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN                            \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                            \n" +
                "		WHEN (c.iscustom = 1) THEN                            \n" +
                "		c.custAssyPN                            \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN                            \n" +
                "		c.mfgPN                            \n" +
                "		ELSE                            \n" +
                "		''                            \n" +
                "	END) AS PartNumber,              \n" +
                "	CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,                               \n" +
                "    IFNULL(c.rev, '') AS Revision,                             \n" +
                "    c.partType,                            \n" +
                "    CONCAT(IFNULL(cpd.assyDescription, ''), '<br/>',                               \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                                  \n" +
                "            IFNULL(CONCAT(', ',                                  \n" +
                "                            cpd.standrads),                                  \n" +
                "                    ''),                                  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                                  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                                  \n" +
                "FROM                                  \n" +
                "    customer_packingslip_det cpd                            \n" +
                "        LEFT JOIN                                  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                                  \n" +
                "        AND cp.isDeleted = 0                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    component c ON c.id = cpd.partid                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                                  \n" +
                "        AND sd.isDeleted = 0                                 \n" +
                "        LEFT JOIN                                 \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID       \n" +
                "    LEFT JOIN      \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId     	                            \n" +
                "        LEFT JOIN                                  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                                  \n" +
                "        AND ra.partID = cpd.partId                                  \n" +
                "        LEFT JOIN                                  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                             \n" +
                "WHERE                          \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1021,'1.00','V1','Sproc_GetCustomerPackingslipReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1021:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                                  \n" +
                "	IN cpID INT                                  \n" +
                ")  \n" +
                "BEGIN	                                  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);        \n" +
                "    # Customer Invoice Master table details                                   \n" +
                "    SELECT  cp.id,                                  \n" +
                "		cp.invoiceNumber,                                  \n" +
                "        cp.invoiceDate,                                  \n" +
                "		cp.packingSlipNumber,                                        \n" +
                "		cp.packingSlipDate,                                        \n" +
                "		cp.poDate,                                        \n" +
                "		cp.poNumber,                  \n" +
                "        cp.poRevision,        \n" +
                "		mg.customerSystemID,                        \n" +
                "		mg.accountRef,                       \n" +
                "		cp.packingSlipComment,                                 \n" +
                "        cp.status,                                  \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '                      \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                                \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                                  \n" +
                "        cp.billingAddress,                                  \n" +
                "        cp.shippingAddress,                        \n" +
                "        cp.intermediateAddress,                                  \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                                  \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                    \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                   \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                                  \n" +
                "        cp.systemID AS legalnumber,                \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,                                  \n" +
                "		us.emailAddress,                                  \n" +
                "		emp.phExtension,      \n" +
                "        cp.revision invoiceVersion,  \n" +
                "        '1.00' AS docNumber  \n" +
                "		FROM customer_packingslip cp                         \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                                  \n" +
                "                LEFT JOIN                                        \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                                   \n" +
                "        AND gcs.isDeleted = 0                                       \n" +
                "           LEFT JOIN                                        \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                                   \n" +
                "        AND gcp.isDeleted = 0                                     \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                          \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                                   \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                                   \n" +
                "  \n" +
                "	# Customer Invoice line level details                                   \n" +
                "	SELECT                                    \n" +
                "		cpd.id,                                        \n" +
                "		cpd.partId,                              \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                               \n" +
                "		cpd.lineID,           \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,          \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,                               \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                     \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                                  \n" +
                "		  WHEN (c.iscustom=1) THEN                                   \n" +
                "			c.custAssyPN                                  \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                                   \n" +
                "			c.mfgPN                                   \n" +
                "        ELSE                                                                           \n" +
                "			  ''                                                          \n" +
                "			END) AS mfgPN ,                                  \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                       \n" +
                "			'Other Charges'                                        \n" +
                "		ELSE                                                                           \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                          \n" +
                "			END) AS  mfgName,                                  \n" +
                "		IFNULL(c.rev, '') AS revision,                                  \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                                  \n" +
                "		cpd.shipQty AS qty,                                   \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                                  \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,                        \n" +
                "		CONCAT(                  \n" +
                "		IFNULL(cpd.assyDescription, ''),'<br/>',                                       \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                          \n" +
                "                IFNULL(CONCAT(', ',                                          \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                          \n" +
                "                    ''),                          \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                          \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),          \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,                      \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS DESCRIPTION                     \n" +
                "  \n" +
                "	FROM                                        \n" +
                "		customer_packingslip_det cpd           \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0                                           \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                         \n" +
                "	WHERE                                        \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                                   \n" +
                "  \n" +
                "	SELECT  get_totalCustomerInvoiceReceivedAmountById(cpID) into vReceivedAmt;        \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                   \n" +
                "    SELECT                                                \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                                   \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                                   \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                                        \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                                            \n" +
                "			(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                                   \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                                   \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                                  \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                                   \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice                                  \n" +
                "		FROM customer_packingslip_det cpd                                       \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                                    \n" +
                "		AND cpd.isdeleted=0;                                        \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                                    \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                                    \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,              \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice,        \n" +
                "                vReceivedAmt totalRecvAmt,        \n" +
                "                (IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) - ifnull(vReceivedAmt,0)) totalBalAmt        \n" +
                "                FROM tempTotalPrice LIMIT 1;                   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                   \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1022,'1.00','V1','Sproc_GetCustomerInvoiceReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1022:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCreditMemoReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                        \n" +
                "	IN cpID INT                        \n" +
                ")  \n" +
                "BEGIN	                        \n" +
                "   # Customer Invoice Master table details                         \n" +
                "   SELECT  cp.id,                         \n" +
                "			cp.invoiceNumber,                        \n" +
                "			cp.invoiceDate,            \n" +
                "            cp.creditMemoNumber,            \n" +
                "            cp.creditMemoDate,            \n" +
                "            cp.refDebitMemoNumber,            \n" +
                "            refDebitMemoDate,                            \n" +
                "			cp.poNumber,                               \n" +
                "			cp.poDate,              \n" +
                "			mg.customerSystemID,              \n" +
                "			mg.accountRef,            \n" +
                "			cp.status,                     \n" +
                "			cp.billingAddress,             \n" +
                "			cp.shippingAddress,              \n" +
                "            cp.packingSlipComment,              \n" +
                "            cp.rmaNumber,            \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                          \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                \n" +
                "			cp.systemID AS legalnumber,                \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                  \n" +
                "			us.emailAddress,              \n" +
                "			emp.phExtension,  \n" +
                "            '1.00' docNumber  \n" +
                "		FROM customer_packingslip cp               \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                        \n" +
                "                LEFT JOIN                              \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                         \n" +
                "        AND gcs.isDeleted = 0                             \n" +
                "           LEFT JOIN                              \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                         \n" +
                "        AND gcp.isDeleted = 0                           \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                         \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0   \n" +
                "    and transType='C'  \n" +
                "    LIMIT 1;                         \n" +
                "  \n" +
                "	# Customer Invoice line level details                         \n" +
                "	SELECT                          \n" +
                "		cpd.id,                              \n" +
                "		cpd.partId,                    \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                     \n" +
                "		cpd.lineID,             \n" +
                "        cpd.reflineID,          \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                           \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                        \n" +
                "		  WHEN (c.iscustom=1) THEN                         \n" +
                "			c.custAssyPN                        \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                         \n" +
                "			c.mfgPN                         \n" +
                "        ELSE                                                                 \n" +
                "			  ''                                                \n" +
                "			END) AS mfgPN ,                        \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                             \n" +
                "			'Other Charges'                              \n" +
                "		ELSE                                                                 \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                \n" +
                "			END) AS  mfgName,                        \n" +
                "		IFNULL(c.rev, '') AS revision,                        \n" +
                "		(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                           \n" +
                "			'EA'                        \n" +
                "		ELSE         \n" +
                "			fun_getUOMAbbreviationByID(c.uom)        \n" +
                "        END) AS uom,                        \n" +
                "		cpd.shipQty AS qty,                         \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                        \n" +
                "		IFNULL(cpd.extendedPrice,0) AS extPrice,              \n" +
                "		CONCAT(IFNULL(cpd.assyDescription, ''),'<br/>',                             \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                               \n" +
                "            IFNULL(CONCAT(', ',                                \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                \n" +
                "                    ''),                \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',      \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS description               \n" +
                "  \n" +
                "	FROM                              \n" +
                "		customer_packingslip_det cpd                             \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                              \n" +
                "	WHERE                              \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID ORDER BY reflineID ASC;                         \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                         \n" +
                "    SELECT                                      \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                         \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                     \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 AND cp.refChargesTypeID IS NULL) totalLinePrice,            \n" +
                "			(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                         \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice                        \n" +
                "		FROM customer_packingslip_det cpd                             \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                          \n" +
                "		AND cpd.isdeleted=0;           \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                \n" +
                "                IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,      \n" +
                "                IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalCIOMiscPrice,0),0) totalCIPrice FROM tempTotalPrice LIMIT 1;           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1023,'1.00','V1','Sproc_GetCreditMemoReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1023:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(          \n" +
                "    IN pWhereClause VARCHAR(16383),          \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),        \n" +
                "    IN pprefix VARCHAR(20),          \n" +
                "    IN pIsFromUID TINYINT,          \n" +
                "    IN pComponentID INT,          \n" +
                "    IN pCustomerID INT,          \n" +
                "    IN pCPN BOOL,          \n" +
                "    IN pMFGAvailabel BOOL,          \n" +
                "    IN pRefCpnMfgID INT,          \n" +
                "    IN pAssyID INT,          \n" +
                "    IN pSalesOrderDetailID INT,          \n" +
                "    IN pReceiveMaterialType VARCHAR(255),          \n" +
                "    IN pkitAssemblyID INT,          \n" +
                "    IN pBarcodeID INT,          \n" +
                "    IN pBOMLineID INT,          \n" +
                "    IN pSupplierID INT,          \n" +
                "    IN pCategory VARCHAR(2),          \n" +
                "    IN pInventoryType VARCHAR(2),          \n" +
                "    IN pCallFrom VARCHAR(50),      \n" +
                "    IN pExcludeStatus INT      \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;          \n" +
                "	DECLARE v_delimiter VARCHAR(10);          \n" +
                "	DECLARE v_length INT;          \n" +
                "	DECLARE v_fieldType INT;          \n" +
                "	DECLARE v_entityId INT;          \n" +
                "	DECLARE v_dataElementId INT;          \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);          \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);          \n" +
                "	DECLARE strLabel VARCHAR(2000);          \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);           \n" +
                "	DECLARE StaticField VARCHAR(100);          \n" +
                "	DECLARE DynamicField VARCHAR(100);          \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';          \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');          \n" +
                "	DECLARE plen,slen INT;          \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;          \n" +
                "	DECLARE pbr_Separator VARCHAR(50);          \n" +
                "	DECLARE barcode_type_id INT;          \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);          \n" +
                "	DECLARE UpdateValue VARCHAR(16383);          \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';          \n" +
                "	DECLARE v_SupplierID INT;          \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);          \n" +
                "	DECLARE v_barcode_id INT;          \n" +
                "	DECLARE v_barcode_count INT;          \n" +
                "	DECLARE v_NumberOfPart INT;          \n" +
                "	DECLARE v_rfqLineItemsID INT;          \n" +
                "	DECLARE v_componentCount INT;          \n" +
                "	DECLARE v_componentId INT;          \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);          \n" +
                "	DECLARE v_partMFG INT;          \n" +
                "	DECLARE v_isGoodPart TINYINT;          \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;          \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;          \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;          \n" +
                "	DECLARE v_isInstall TINYINT;          \n" +
                "	DECLARE v_isBOMLineClean TINYINT;          \n" +
                "	DECLARE v_BOMLineId INT;          \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;          \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;          \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;          \n" +
                "	DECLARE v_PIDCode VARCHAR(110);          \n" +
                "	DECLARE v_isPurchase TINYINT;          \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);          \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);          \n" +
                "	DECLARE v_BOMLineCount INT;          \n" +
                "	DECLARE v_AlternateLineId INT;          \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);          \n" +
                "	DECLARE v_BOMAssyId INT;          \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);          \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;          \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;          \n" +
                "	DECLARE v_isCPNFlag TINYINT;          \n" +
                "	DECLARE v_dateCodeFormatID INT;          \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);          \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);          \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;          \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;                                    \n" +
                "	DECLARE v_MFRList VARCHAR(10000);                                  \n" +
                "	DECLARE v_barcode_status INT;                                  \n" +
                "	DECLARE v_category INT;                                  \n" +
                "	DECLARE v_partType INT;                      \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;	                                    \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;                                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                             \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                            \n" +
                "	(                            \n" +
                "		errorText LONGTEXT,                            \n" +
                "		IsSuccess VARCHAR (2),                  \n" +
                "		MFGPart VARCHAR(10000)                                 \n" +
                "	);                                \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */            \n" +
                "	IF (pCategory = 'P') THEN                                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;                             \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive                                \n" +
                "		(                                         \n" +
                "			scanlabel VARCHAR(1000),                                \n" +
                "			poNumber VARCHAR(50),                            \n" +
                "			supplierSONumber VARCHAR(50),                          \n" +
                "			packingSlipNumber VARCHAR(50),                          \n" +
                "			invoiceNumber VARCHAR(50)                          \n" +
                "		);                                \n" +
                "	ELSE /* Temp table for MFR */                                 \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                             \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock                            \n" +
                "		(                            \n" +
                "			refcompid INT,                            \n" +
                "			pkgQty DECIMAL(18,6),          \n" +
                "			dateCode VARCHAR(10),          \n" +
                "			lotCode VARCHAR(255),          \n" +
                "			scanlabel VARCHAR(1000),          \n" +
                "			createdBy VARCHAR(255),          \n" +
                "			uid VARCHAR(14),          \n" +
                "			prefix VARCHAR(20),          \n" +
                "			nickName VARCHAR(50),          \n" +
                "			cpn TINYINT,          \n" +
                "			mfgAvailabel TINYINT,          \n" +
                "			refCPNMFGPNID INT,          \n" +
                "			customerID INT,          \n" +
                "			assyID INT,          \n" +
                "			salesOrderDetailID INT,          \n" +
                "			receiveMaterialType VARCHAR(255),          \n" +
                "			refSupplierPartId INT,                                                    \n" +
                "			mfrDateCode VARCHAR(50),                          \n" +
                "			poNumber VARCHAR(50),                            \n" +
                "			supplierSONumber VARCHAR(50),                          \n" +
                "			packingSlipNumber VARCHAR(50),                          \n" +
                "			invoiceNumber VARCHAR(50),                      \n" +
                "			binName VARCHAR(100),                      \n" +
                "			packaging VARCHAR(100),                      \n" +
                "			packingSlipDetailNickname VARCHAR(50)                      \n" +
                "		);            \n" +
                "  \n" +
                "		/* Temp table for data element value */            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                             \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                            \n" +
                "		(                            \n" +
                "			entityid INT,          \n" +
                "			dataelementid INT,          \n" +
                "			`value` LONGTEXT,          \n" +
                "			createdBy VARCHAR(255)          \n" +
                "		);           \n" +
                "    END IF;                                    \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator             \n" +
                "	# return error code          \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found          \n" +
                "	# 0: Barcode template does not exist, Please add template          \n" +
                "	# 1: Validation Clear          \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component          \n" +
                "	# 3: Mfgcode is not found          \n" +
                "	# 4: MFG PN does not exist          \n" +
                "	# 5: Multiple MFG PN found          \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code          \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly          \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer          \n" +
                "	# 9:  Multiple barcode template found.          \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check          \n" +
                "	# 11: MFG PN is incorrect part          \n" +
                "	# 12: PID PID1 was restricted part at part master level.          \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.          \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.          \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.          \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.          \n" +
                "	# 17: PID is contain more than 1 BOM line.          \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.          \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.          \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.          \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.          \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.          \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other          \n" +
                "  \n" +
                "	block1: BEGIN                           \n" +
                "   SET valuesforInsert = REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause, '\\\\', '\\\\'), '\\\\', '\\\\\\\\'), '\"', '\\\\\"'), \"'\",\"\\\\'\");           \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                                       \n" +
                "			/* Get barcode from labelstring */            \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status                                 \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                                \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                             \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN                                  \n" +
                "				/* Get More than 1 barcode then give validation */            \n" +
                "				IF (v_barcode_count > 1) THEN            \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                              \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                             \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                             \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);	                            \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                   \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "				ELSE               \n" +
                "					SET pBarcodeID = v_barcode_id;            \n" +
                "				END IF;                                   \n" +
                "			END IF;           \n" +
                "		ELSE            \n" +
                "			/* Get data from barcode id */            \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;            \n" +
                "		END IF;                                                                                                     \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */            \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN                     			                  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);                           \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name                                 \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND              \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;            \n" +
                "			SET pBarcodeID = v_barcode_id;                                                                      \n" +
                "		END IF;             \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */              \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                          \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;            \n" +
                "			SET v_BarcodeType = '2D';                  \n" +
                "		ELSE /* barcode 1D */                                                               \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                           \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;                                                             \n" +
                "			SET v_BarcodeType = '1D';               \n" +
                "		END IF;             \n" +
                "	END block1;                                                                  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */            \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN            \n" +
                "		block2: BEGIN                                              \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                            \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                            \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                         \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;                     \n" +
                "			-- declare exit loop if data not found                            \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                            \n" +
                "			-- if any record match found than  check for delimiter and its value                       \n" +
                "			IF (pbr_template_ID > 0) THEN                            \n" +
                "				-- create temporary table for deliemeter and component dataelement                            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                            \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                            \n" +
                "					pentityId INT,                            \n" +
                "					pdataElementId INT,                            \n" +
                "					pdelimiter_value VARCHAR(200)                            \n" +
                "				);                       \n" +
                "				-- create temporary table for separator string values                            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;			                            \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                            \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength                                 \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;                 \n" +
                "				-- open cursor                            \n" +
                "				OPEN barcodeMatch_cursor;                       \n" +
                "				-- set str label as whereclause                          \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter                        \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");           \n" +
                "				-- if prefix is found than remove those from actual string match                            \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN		                            \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));          \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));          \n" +
                "				 END IF;                           \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                             \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                            \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                            \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                            \n" +
                "				 END IF;	                                                                                        \n" +
                "				-- insert all values after seprator split                    \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                                    				                        \n" +
                "				PREPARE stmt1 FROM @SQL;                            \n" +
                "				EXECUTE stmt1;                                           \n" +
                "				DEALLOCATE PREPARE stmt1;                          \n" +
                "				IF (pCategory = 'P') THEN                                \n" +
                "					-- create dynamic query to insert in packing slip                            \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';                                                \n" +
                "				ELSE                                 \n" +
                "					-- create dynamic query to insert in recieving material                            \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                \n" +
                "				END IF;                                \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                            \n" +
                "				barcodeMatch_loop:LOOP                           \n" +
                "					-- get all five selected values                            \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                    \n" +
                "					-- exit loop if no record found for barcode match                            \n" +
                "					IF exit_loop THEN                                                                                              \n" +
                "						CLOSE barcodeMatch_cursor;                            \n" +
                "						LEAVE barcodeMatch_loop;                            \n" +
                "					END IF;                       \n" +
                "					-- dynamic query to get dellimeter string with values from string                            \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                              \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                            \n" +
                "					EXECUTE stmtdelimiter;                                                \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;                                 \n" +
                "  \n" +
                "					-- get delimiter values from string                            \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                    \n" +
                "					-- check for field type is static or dynamic                            \n" +
                "					-- if static field than check for mfg code and mfg part number          \n" +
                "					IF v_fieldType = 0  THEN                                \n" +
                "						-- component_sid_stock                             \n" +
                "						-- get static field name from barcode table delimiter data element id                                            \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);                 \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                            \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                    \n" +
                "							SET MFG_Part_No = delimiter_value_data;             \n" +
                "							/* If component id is not found */                                 \n" +
                "							IF(pComponentID = 0)      \n" +
                "                            THEN                    \n" +
                "								/* Get component data */            \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;          \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                            \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM                       \n" +
                "								(                      \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType          \n" +
                "									FROM 	component c                                                                                                       \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND       \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)             \n" +
                "									UNION                      \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                                       \n" +
                "									FROM 		component_otherpn co                                                                                                       \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0                 \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND      \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0	                                      \n" +
                "								) a                                      \n" +
                "								UNION                                      \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM                       \n" +
                "								(                      \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                    \n" +
                "									FROM 	component c                                                                                                       \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND      \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0                   \n" +
                "									UNION                      \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                    \n" +
                "									FROM 		component_otherpn co                                                                                                       \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                       \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)       \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0	                                      \n" +
                "								) a                                      \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;            \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN          \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID                                     \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;                                    \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail; 				                                    \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  		                                    \n" +
                "								   ELSE          \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;          \n" +
                "								END IF;					                                    \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN                   \n" +
                "									/* If component is more that one then remove supplier from list */            \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;          \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS          \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;          \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */            \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;          \n" +
                "									IF (v_componentCount < 2) THEN          \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission          \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission          \n" +
                "										FROM 	temp_component_supplier_detail;          \n" +
                "									END IF;          \n" +
                "								ELSE          \n" +
                "									IF (pSupplierID IS NULL) THEN          \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType          \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType          \n" +
                "										FROM 	temp_component_detail;                                    \n" +
                "									ELSE 	                                    \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN                                    \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;                                    \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN                                    \n" +
                "											SET v_componentCount=0;                                    \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;                                    \n" +
                "										ELSE                                    \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                            \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                            \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);                                    \n" +
                "										END IF;          \n" +
                "									END IF;          \n" +
                "								END IF;       \n" +
                "							ELSE                \n" +
                "								/* If component id is found */            \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType                            \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType                            \n" +
                "								FROM 	component          \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;                  \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */            \n" +
                "							IF v_componentCount > 1 THEN            \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;                  \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */            \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN                             \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;                  \n" +
                "							END IF;                            \n" +
                "  \n" +
                "							/* If bad part found */            \n" +
                "							IF (v_isGoodPart != 1) THEN                                    \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;             \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Check all type of restriction */            \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                       \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */            \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                     \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */            \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                     \n" +
                "								CLOSE barcodeMatch_cursor;                            \n" +
                "								LEAVE barcodeMatch_loop;                  \n" +
                "							END IF;                    \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */            \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                \n" +
                "							IF (@MFGType = 'DIST') THEN                \n" +
                "								SET v_SupplierID = v_componentId;                \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and       \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);                \n" +
                "							END IF;             \n" +
                "  \n" +
                "							/* Check kit allocation */            \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */            \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;          \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId          \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId                        \n" +
                "								FROM 	(          \n" +
                "										SELECT 	*          \n" +
                "										FROM          \n" +
                "											(            \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,                       \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId          \n" +
                "												FROM 		component_packagingalias cp              \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid          \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id          \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID          \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0      \n" +
                "												UNION              \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,          \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId          \n" +
                "												FROM 		rfq_lineitems_alternatepart rla          \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                           \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0                 \n" +
                "												UNION                                                                               \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,          \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId          \n" +
                "												FROM 		rfq_lineitems_alternatepart rla          \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                           \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL          \n" +
                "												GROUP BY 	custPNID, rla.partID          \n" +
                "											) b                       \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)          \n" +
                "										GROUP BY b.lineID, b.assyId                                                                \n" +
                "									) a;                                                                \n" +
                "  \n" +
                "								/* BOM line not found  */            \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                   \n" +
                "									CLOSE barcodeMatch_cursor;                            \n" +
                "									LEAVE barcodeMatch_loop;                 \n" +
                "								/* Found More then one BOM line */          \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                    \n" +
                "									CLOSE barcodeMatch_cursor;                            \n" +
                "									LEAVE barcodeMatch_loop;          \n" +
                "								ELSE                      \n" +
                "									/* Restrict use bom */            \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                  \n" +
                "										CLOSE barcodeMatch_cursor;                            \n" +
                "										LEAVE barcodeMatch_loop;                  \n" +
                "									END IF;                                                                         \n" +
                "  \n" +
                "									/* BOM line contain any error */            \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;          \n" +
                "									IF (v_isBOMLineClean = 0) THEN          \n" +
                "										CLOSE barcodeMatch_cursor;          \n" +
                "										LEAVE barcodeMatch_loop;          \n" +
                "									END IF;          \n" +
                "								END IF;          \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */          \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN          \n" +
                "									CLOSE barcodeMatch_cursor;          \n" +
                "									LEAVE barcodeMatch_loop;          \n" +
                "								END IF;          \n" +
                "							END IF;          \n" +
                "  \n" +
                "							/* Set dynamic query for component */            \n" +
                "							IF  v_componentCount = 1 THEN                                     \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                            \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				          \n" +
                "								ELSE                                  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                            \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"'); 	    		                            \n" +
                "								END IF;                                  \n" +
                "							END IF;                        \n" +
                "						END IF;                            \n" +
                "  \n" +
                "						/* Not in use */            \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                            \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;                                            \n" +
                "						END IF;              \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */            \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN          \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');          \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                               \n" +
                "							END IF;                                  \n" +
                "						END IF;                                  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */            \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;          \n" +
                "						END IF;          \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */            \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN                                      \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                                    \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                                                    \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                                                    \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                                                    \n" +
                "							ELSE                                  \n" +
                "								SET exit_loop = FALSE;                                  \n" +
                "							END IF;                                   \n" +
                "						END IF;                        \n" +
                "  \n" +
                "						/* Set dynamic query for binid */            \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                          \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */            \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                        \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */            \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                                 \n" +
                "  \n" +
                "						/* Set dynamic query for po number */            \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                                 \n" +
                "  \n" +
                "						/* Set dynamic query for so number */            \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                             \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */            \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                             \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */            \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                        \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');            \n" +
                "							ELSE                                  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "							END IF;                                  \n" +
                "						END IF;                        \n" +
                "					ELSE                           \n" +
                "						/* Set dynamic query for other than system generated */            \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                             \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;                         \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                             \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);          \n" +
                "					END IF;          \n" +
                "				END LOOP barcodeMatch_loop;          \n" +
                "				-- check if mfg and component both found than          \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                        \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);                            \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);          	                                    \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);				                                    \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);          \n" +
                "				ELSEIF (v_componentCount > 1) THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);                             \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);                             \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                         \n" +
                "					IF (v_isGoodPart = 2) THEN                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);          \n" +
                "					ELSE                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);          \n" +
                "					END IF;                                                                                    \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);          \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                                                         \n" +
                "					IF (v_isCPNFlag = 1) THEN                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);          \n" +
                "					ELSE                                                                     \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);          \n" +
                "					END IF;                                                                    \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                         \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);                    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                 \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                 \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                 \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN                           \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);                            \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                            \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                            \n" +
                "					IF @Mfgmatched = 0  THEN                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);					                            \n" +
                "					END IF;							                            \n" +
                "				ELSE                   \n" +
                "					IF @mfgCount = 0 THEN                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                            \n" +
                "					END IF;	                            \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                              \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);                            \n" +
                "					END IF;				                            \n" +
                "				END IF;	          \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN           \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;              \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;              \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                            \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                            \n" +
                "					END IF;           \n" +
                "				END IF;                 \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN                \n" +
                "					/* If not fire any validation */            \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                   \n" +
                "  \n" +
                "						-- must call statements in sequence               \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */       		                  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');          \n" +
                "						PREPARE stmt1 FROM @SQL1;                            \n" +
                "						EXECUTE stmt1;                         \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');              \n" +
                "						IF (pnickName IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');              \n" +
                "						END IF;                  \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);            \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);              \n" +
                "						END IF;                   \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);              \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);              \n" +
                "						END IF;                 \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);              \n" +
                "						END IF;                  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');           \n" +
                "						END IF;               \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);              \n" +
                "						END IF;               \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;	                             \n" +
                "						PREPARE stmt2 FROM @SQL2;                            \n" +
                "						EXECUTE stmt2;	            \n" +
                "						DEALLOCATE PREPARE stmt2;                                   \n" +
                "  \n" +
                "						/* Add success result in save error table */            \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                                                            \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                            \n" +
                "						ELSE                                                                             \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                            \n" +
                "						END IF;                                                                            \n" +
                "  \n" +
                "						/* Add data in table of delimeter table */            \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                             \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 	                            \n" +
                "						END IF;                            \n" +
                "  \n" +
                "						/* select detail of error table */            \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */              \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;              \n" +
                "  \n" +
                "						/* Select data of component */            \n" +
                "						SELECT 	c.*,                                                          \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                          \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                           \n" +
                "							csup.packageQty AS supplierPkgQty,          \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,          \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                           \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                           \n" +
                "							mcm.mfgName AS supplierMFGName,                                                           \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                           \n" +
                "							csup.packagingID AS supplierPackagingId,                                                           \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                                                           \n" +
                "							csup.minimum AS supplierMinimum,                                                           \n" +
                "							ccpn.id AS cpnID,                                                           \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                           \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                           \n" +
                "							rfqroh.name AS rohsName,                                                           \n" +
                "							rfqmou.name AS mountingTypeName,                                                           \n" +
                "							um.unitName AS uomName,                                                          \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                          \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                          \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                                        \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                                           \n" +
                "						FROM component AS c           \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID          \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID          \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                          \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID          \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                      \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID          \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID            \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                         \n" +
                "						WHERE c.id = v_componentId;      \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */            \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`          \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv           \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl          \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;                 \n" +
                "  \n" +
                "						/* select data of cpn */            \n" +
                "						SELECT 	id, refComponentID, refCPNPartID          \n" +
                "						FROM 	component_cust_alias_rev_pn          \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;          \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (          \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0          \n" +
                "						) AND isDeleted = 0;                                                                            \n" +
                "  \n" +
                "						/* select detail of bom */            \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,          \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN          \n" +
                "						FROM 		rfq_lineitems_alternatepart rla          \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0          \n" +
                "						WHERE 		rla.isDeleted = 0          \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))          \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)          \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);          \n" +
                "  \n" +
                "					ELSE                      \n" +
                "						/* Found any error then select error  */            \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                            \n" +
                "					END IF;              \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                 \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "				ELSE          \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */            \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN          \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');          \n" +
                "						PREPARE stmt1 FROM @SQL1;                            \n" +
                "						EXECUTE stmt1;          \n" +
                "						DEALLOCATE PREPARE stmt1;                        \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					/* Add success data in temp error table */            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                       \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */            \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                   \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                                   \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                         \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */            \n" +
                "					IF (pCategory = 'M') THEN                      \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                   \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                      \n" +
                "						SELECT 	c.*,                                                           \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                           \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                           \n" +
                "							csup.packageQty AS supplierPkgQty,          \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,          \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                           \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                           \n" +
                "							mcm.mfgName AS supplierMFGName,                                                           \n" +
                "							csup.packagingID AS supplierPackagingId,                                                           \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                           \n" +
                "							csup.id AS supplierMFGPNID,                                                           \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                                                           \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                                                     \n" +
                "							ccpn.id AS cpnID,                                                           \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                           \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                           \n" +
                "							rfqroh.name AS rohsName,                                                           \n" +
                "							rfqmou.name AS mountingTypeName,                                                           \n" +
                "							um.unitName AS uomName,                                                          \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                          \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                          \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,          \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName          \n" +
                "						FROM component AS c           \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID          \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID          \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                          \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID          \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                       \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                     \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID              \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom            \n" +
                "						WHERE c.id = v_componentId;      \n" +
                "					END IF;                                    \n" +
                "				END IF;                        \n" +
                "			ELSE                                                             \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                             \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                            \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;	                                  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                                   \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                  \n" +
                "				SELECT 1;                                   \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                   \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                  \n" +
                "				SELECT 1; 		                                \n" +
                "			END IF;                            \n" +
                "  \n" +
                "		END block2;                                  \n" +
                "	ELSE                                                  \n" +
                "		IF (pIsFromUID = 1) THEN                                                  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;                                                  \n" +
                "		ELSE                                                   \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                                   \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                                  \n" +
                "			SELECT 1;                                                  \n" +
                "		END IF;                                                  \n" +
                "	END IF;                                      \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1024,'1.00','V1','Bug 34641: While create UMID within same page with Add UMID button then from department is set null - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1024:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                                    \n" +
                "	IN cpID INT                                    \n" +
                ")  \n" +
                "BEGIN	                                    \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);          \n" +
                "    # Customer Invoice Master table details                                     \n" +
                "    SELECT  cp.id,                                    \n" +
                "		cp.invoiceNumber,                                    \n" +
                "        cp.invoiceDate,                                    \n" +
                "		cp.packingSlipNumber,                                          \n" +
                "		cp.packingSlipDate,                                          \n" +
                "		cp.poDate,                                          \n" +
                "		cp.poNumber,                    \n" +
                "        cp.poRevision,          \n" +
                "		mg.customerSystemID,                          \n" +
                "		mg.accountRef,                         \n" +
                "		cp.packingSlipComment,                                   \n" +
                "        cp.status,                                    \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '                        \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                                  \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                                    \n" +
                "        cp.billingAddress,                                    \n" +
                "        cp.shippingAddress,                          \n" +
                "        cp.intermediateAddress,                                    \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                                    \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                      \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                     \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                                    \n" +
                "        cp.systemID AS legalnumber,                  \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,                                    \n" +
                "		us.emailAddress,                                    \n" +
                "		emp.phExtension,        \n" +
                "        cp.revision invoiceVersion,    \n" +
                "        '1.00' AS docNumber,  \n" +
                "        subStatus  \n" +
                "		FROM customer_packingslip cp                           \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                                    \n" +
                "                LEFT JOIN                                          \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                                     \n" +
                "        AND gcs.isDeleted = 0                                         \n" +
                "           LEFT JOIN                                          \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                                     \n" +
                "        AND gcp.isDeleted = 0                                       \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                            \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                                     \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                                     \n" +
                "  \n" +
                "	# Customer Invoice line level details                                     \n" +
                "	SELECT                                      \n" +
                "		cpd.id,                                          \n" +
                "		cpd.partId,                                \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                                 \n" +
                "		cpd.lineID,             \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,            \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,                                 \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                       \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                                    \n" +
                "		  WHEN (c.iscustom=1) THEN                                     \n" +
                "			c.custAssyPN                                    \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                                     \n" +
                "			c.mfgPN                                     \n" +
                "        ELSE                                                                             \n" +
                "			  ''                                                            \n" +
                "			END) AS mfgPN ,                                    \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                         \n" +
                "			'Other Charges'                                          \n" +
                "		ELSE                                                                             \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                            \n" +
                "			END) AS  mfgName,                                    \n" +
                "		IFNULL(c.rev, '') AS revision,                                    \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                                    \n" +
                "		cpd.shipQty AS qty,                                     \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                                    \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,                          \n" +
                "		CONCAT(                    \n" +
                "		IFNULL(cpd.assyDescription, ''),'<br/>',                                         \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                            \n" +
                "                IFNULL(CONCAT(', ',                                            \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                            \n" +
                "                    ''),                            \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                            \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),            \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,                        \n" +
                "            IFNULL(cpd.shippingNotes,'')) AS DESCRIPTION                       \n" +
                "  \n" +
                "	FROM                                          \n" +
                "		customer_packingslip_det cpd             \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0                                             \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                           \n" +
                "	WHERE                                          \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                                     \n" +
                "  \n" +
                "	SELECT  get_totalCustomerInvoiceReceivedAmountById(cpID) into vReceivedAmt;          \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                     \n" +
                "    SELECT                                                  \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                                     \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                                     \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                                          \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                                              \n" +
                "			(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                                     \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                                     \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                                    \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                                     \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice                                    \n" +
                "		FROM customer_packingslip_det cpd                                         \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                                      \n" +
                "		AND cpd.isdeleted=0;                                          \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                                      \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                                      \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,                \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice,          \n" +
                "                vReceivedAmt totalRecvAmt,          \n" +
                "                (IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) - ifnull(vReceivedAmt,0)) totalBalAmt          \n" +
                "                FROM tempTotalPrice LIMIT 1;                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1025,'1.00','V1','Sproc_GetCustomerInvoiceReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1025:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-06-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseIncomingInspectionList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseIncomingInspectionList`(  \n" +
                "    IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pInspectionTempId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @tempLeftJoin = concat('LEFT JOIN `inspection_template_requirement_det` AS itrd  \n" +
                "				ON itrd.`inspectionRequirementId` = im.`id`  \n" +
                "                AND itrd.`inspectionTemplateId` = ',pInspectionTempId,'  \n" +
                "                AND itrd.`isDeleted`=0 ');  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT im.id, im.isActive, gc.`gencCategoryID`,  \n" +
                "			(CASE WHEN (`im`.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (`im`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,  \n" +
                "			(CASE WHEN im.requiementType = 'R' THEN 'Requirement'  \n" +
                "				WHEN im.requiementType = 'C' THEN 'Comment' END) AS requiementType,      \n" +
                "			im.systemGenerated,  \n" +
                "            \",(CASE WHEN pInspectionTempId IS NOT NULL AND pInspectionTempId  != '' THEN 'itrd.id' ELSE 'null' END),\" AS TemplateDetId,  \n" +
                "            \",(CASE WHEN pInspectionTempId IS NOT NULL AND pInspectionTempId  != '' THEN 'itrd.inspectionTemplateId' ELSE 'null' END),\" AS templateId,  \n" +
                "            (CASE WHEN (im.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (im.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "			im.requirement,  \n" +
                "			fun_checkForInspectionId(im.id) isRequirementReference,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(im.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_getUserNameByID(im.createdBy) createdBy,  \n" +
                "			fun_getUserNameByID(im.updatedBy) updatedBy,  \n" +
                "			fun_getRoleByID(im.createByRoleId) createByRoleId,  \n" +
                "			fun_getRoleByID(im.updateByRoleId) updateByRoleId,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(im.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "            case when gc.gencCategoryCode is not null then concat('(',gc.gencCategoryCode,') ',gc.gencCategoryName) else gc.gencCategoryName End AS partRequirementCategoryName  \n" +
                "            FROM `inspection_mst` AS im  \n" +
                "            JOIN `genericcategory` AS gc  \n" +
                "				ON im.`partRequirementCategoryID` = gc.`gencCategoryID`  \n" +
                "				AND gc.`isDeleted`=0  \n" +
                "			\", (CASE WHEN pInspectionTempId IS NOT NULL AND pInspectionTempId  != '' THEN @tempLeftJoin ELSE '' END) ,\"  \n" +
                "            WHERE im.`isDeleted` = 0 \");  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY requirement ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY templateId DESC,\" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) AS TotalRecord FROM ( \",@tempquery,\" ) c WHERE 1=1 AND \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT * FROM ( \", @tempquery,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1026,'1.00','V1',' Bug 34692 & Bug 34303 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1026:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(          \n" +
                "	IN ppageIndex INT,          \n" +
                "	IN precordPerPage INT,          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN psupplierID VARCHAR(16000),          \n" +
                "	IN pshippingMethodId VARCHAR(16000),          \n" +
                "	IN psearchposotype VARCHAR(10),          \n" +
                "	IN psearchposotext VARCHAR(1000),          \n" +
                "	IN ppartIds VARCHAR(1000),         \n" +
                "    IN ppolinestatus VARCHAR(10),          \n" +
                "	IN ppostatus VARCHAR(10),          \n" +
                "	IN pfromDate DATE,          \n" +
                "	IN ptoDate DATE          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT;          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);          \n" +
                "	DECLARE vTimeZone VARCHAR(50);          \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;          \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;          \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"          \n" +
                "		SELECT  pod.id,          \n" +
                "				pom.id as refPurchaseOrderID,          \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,          \n" +
                "				pod.mfgPartID,          \n" +
                "				pod.packagingID,          \n" +
                "				pod.supplierPartID,          \n" +
                "				pod.partDescription,          \n" +
                "				pod.pcbPerArray,          \n" +
                "				pod.rohsStatusID,          \n" +
                "				pod.internalRef,          \n" +
                "				pod.qty,          \n" +
                "				pod.price,          \n" +
                "				pom.shippingMethodID,          \n" +
                "				(pod.qty * pod.price) extPrice,          \n" +
                "				pod.totalRelease,          \n" +
                "				pod.lineComment,          \n" +
                "				pod.lineID,          \n" +
                "				pod.supplierQuoteNumber,          \n" +
                "				pom.poDate,          \n" +
                "				pom.poRevision,          \n" +
                "				pom.soNumber,          \n" +
                "				pom.soDate,          \n" +
                "				c.mfgPN,          \n" +
                "				c.pidCode,          \n" +
                "				c.unit,          \n" +
                "				c.iscustom,          \n" +
                "				c.partType,          \n" +
                "				rr.name AS rohsName,          \n" +
                "				rr.rohsIcon,          \n" +
                "				cp.name AS packagingName,          \n" +
                "				mc.mfgCode,          \n" +
                "				mc.mfgName,          \n" +
                "				mc.id As mfgcodeID,          \n" +
                "				pom.poNumber,          \n" +
                "				pom.status,          \n" +
                "				pom.carrierID,          \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,          \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,          \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,          \n" +
                "				vups.totalReceivedQty,          \n" +
                "				vups.totalPendingQty,          \n" +
                "				vups.poLineCompleteReason,           \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,          \n" +
                "				concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,          \n" +
                "				fun_getUnitNameByID(c.uom) uomName,          \n" +
                "				sc.mfgPN supplierPN,          \n" +
                "				pom.supplierID,          \n" +
                "				pom.termsID,          \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,          \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,          \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,          \n" +
                "				pom.carrierAccountNumber,          \n" +
                "				pom.poComment,          \n" +
                "				pom.shippingComment,          \n" +
                "				pod.internalLineComment,          \n" +
                "				m.mfgcode as supplierMfgName,          \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,          \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,          \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,          \n" +
                "				CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,          \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,          \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,          \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,          \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,          \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,          \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,          \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,          \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId          \n" +
                "		FROM purchase_order_det pod       \n" +
                "		left JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0          \n" +
                "		left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id          \n" +
                "		left JOIN mfgcodemst m ON m.id=pom.supplierID          \n" +
                "		left JOIN component c ON c.id=pod.mfgPartID          \n" +
                "		left join component sc on sc.id=pod.supplierPartID          \n" +
                "		left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID          \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID          \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID          \n" +
                "		WHERE pod.isdeleted=0          \n" +
                "	\");           \n" +
                "	IF(psupplierID IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');          \n" +
                "	END IF;          \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');          \n" +
                "	END IF;          \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN          \n" +
                "		IF(psearchposotype='C')THEN          \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');          \n" +
                "		ELSE          \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');          \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');          \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''')');          \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate<=''',ptoDate,''')');          \n" +
                "	END IF;          \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when c.partType=4 and pom.poWorkingStatus=\"C\" then \"C\" else ifnull(vups.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');          \n" +
                "	END IF;          \n" +
                "	IF(ppostatus IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when pom.poWorkingStatus=\"C\" then \"C\" when pom.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');          \n" +
                "	END IF;          \n" +
                "	IF(ppartIds IS NOT NULL)THEN          \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');          \n" +
                "	END IF;          \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);          \n" +
                "	END IF;          \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1';          \n" +
                "	END IF;          \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN          \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);          \n" +
                "	ELSE          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;          \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query1 FROM @SQLStatement2;          \n" +
                "	EXECUTE query1;           \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1027,'1.00','V1',' Sproc_RetrievePurchaseOrderPerLineDeatils - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1027:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_replaceSpecialCharacters`;  \n" +
                "CREATE FUNCTION `fun_replaceSpecialCharacters`(     \n" +
                "pSourceString varchar(150)     \n" +
                ") RETURNS varchar(150) CHARSET utf8mb4  \n" +
                "BEGIN     \n" +
                "declare vReplaceString varchar(10);     \n" +
                "declare vDestinationString varchar(150);     \n" +
                " set vDestinationString = pSourceString;     \n" +
                "  \n" +
                " select replace(vDestinationString, \"/\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \":\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"*\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"?\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"\\\"\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"<\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \">\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"|\", \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, '\\\\\', \"+\") into vDestinationString;   \n" +
                " select replace(vDestinationString, \"#\", \"+\") into vDestinationString;     \n" +
                " select replace(vDestinationString, \"'\", \"+\") into vDestinationString;     \n" +
                "  \n" +
                " return vDestinationString;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1028,'1.00','V1','Datasheet Folder path create issue  - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1028:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "DROP TRIGGER `Trg_AU_help_blog_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_help_blog_det` AFTER UPDATE ON `help_blog_det`   \n" +
                "    FOR EACH ROW BEGIN    \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "		VALUES(\"HELPBLOGDET\", CAST(new.id AS CHAR),'Description', CAST(OLD.description AS CHAR), CAST(new.description AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);              \n" +
                "	END IF;     \n" +
                "    	IF IFNULL(OLD.isSystemGenerated,0) != IFNULL(NEW.isSystemGenerated,0) THEN         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "		VALUES(\"HELPBLOGDET\", CAST(new.id AS CHAR),'System Generated', CAST(OLD.isSystemGenerated AS CHAR), CAST(new.isSystemGenerated AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);              \n" +
                "	END IF;     \n" +
                "    	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "		VALUES(\"HELPBLOGDET\", CAST(new.id AS CHAR),'Dispaly Order', CAST(OLD.displayOrder AS CHAR), CAST(new.displayOrder AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);              \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1029,'1.00','V1','User Story 34391: [Main Branch] Calibration Changes suggested by client  - purav'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;



        case 1029:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveHelpBlogHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveHelpBlogHistory`(                                                      	                                                          \n" +
                "	IN ppageIndex INT,                                                                \n" +
                "	IN precordPerPage INT,                                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN phelpBlogDetId INT,      \n" +
                "    IN phelpBlogId INT      \n" +
                ")  \n" +
                "BEGIN                                                          \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);           \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                             \n" +
                "	DECLARE vTimeZone VARCHAR(50);            \n" +
                "	DECLARE vCustPSDetIdWhrClause VARCHAR(100);        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;          \n" +
                "  \n" +
                "	IF (phelpBlogDetId IS NULL) THEN    \n" +
                "	SET @temp_Sproc_HelpBlogChangeHistory = CONCAT(\"              \n" +
                "		SELECT 	da.ID,      \n" +
                "				da.Tablename,      \n" +
                "				da.RefTransID,      \n" +
                "				da.Colname,      \n" +
                "				da.Oldval,      \n" +
                "				da.Newval,        \n" +
                "				fun_getUserNameByID(da.Updatedby) updatedby,              \n" +
                "				fun_getUserNameByID(da.createdBy) createdby,              \n" +
                "				fun_getRoleByID(da.createByRoleId) createdbyRole,              \n" +
                "				fun_getRoleByID(da.updateByRoleId) updatedbyRole,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt          \n" +
                "		FROM dataentrychange_auditlog da         \n" +
                "				WHERE RefTransID in (select id from help_blog_det where helpBlogId =\",phelpBlogId,\" )    \n" +
                "				AND (da.Tablename = 'HELPBLOG' OR da.Tablename = 'HELPBLOGDET')     \n" +
                "  \n" +
                "         \");    \n" +
                "         ELSE    \n" +
                "            SET @temp_Sproc_HelpBlogChangeHistory = CONCAT(\"              \n" +
                "		SELECT 	da.ID,      \n" +
                "				da.Tablename,      \n" +
                "				da.RefTransID,      \n" +
                "				da.Colname,      \n" +
                "				da.Oldval,      \n" +
                "				da.Newval,        \n" +
                "				fun_getUserNameByID(da.Updatedby) updatedby,              \n" +
                "				fun_getUserNameByID(da.createdBy) createdby,              \n" +
                "				fun_getRoleByID(da.createByRoleId) createdbyRole,              \n" +
                "				fun_getRoleByID(da.updateByRoleId) updatedbyRole,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt          \n" +
                "		FROM dataentrychange_auditlog da         \n" +
                "				WHERE RefTransID = \",phelpBlogDetId,\" AND (da.Tablename = 'HELPBLOG' OR da.Tablename = 'HELPBLOGDET')    \n" +
                "  \n" +
                "         \");       \n" +
                "         END IF;    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */                         \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HelpBlogChangeHistory,\" ) c where 1=1 and \", pWhereClause);                        \n" +
                "		PREPARE query2 FROM @SQLStatement2;               \n" +
                "		EXECUTE query2;                        \n" +
                "		DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HelpBlogChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "		PREPARE query1 FROM @SQLStatement2;                        \n" +
                "		EXECUTE query1;     	                   \n" +
                "		DEALLOCATE PREPARE query1;           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1030,'1.00','V1','User Story 34391: [Main Branch] Calibration Changes suggested by client  - purav'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;


        case 1030:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                //"DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole`;  \n" +
                //"CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(                  \n" +
                //"	IN ppageIndex INT,                  \n" +
                //"	IN precordPerPage INT,                  \n" +
                //"	IN pOrderBy VARCHAR(255),                  \n" +
                //"	IN pWhereClause VARCHAR(16383),                \n" +
                //"	IN pUserId INT,                \n" +
                //"	IN pRoleId INT,          \n" +
                //"	IN isShowDefault INT          \n" +
                //")  \n" +
                //"BEGIN                \n" +
                //"  \n" +
                //"	DECLARE pOffset INT;                  \n" +
                //"	DECLARE rowNumWhere VARCHAR(255);                 \n" +
                //"	DROP TEMPORARY TABLE IF EXISTS PageResults;                \n" +
                //"	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;                \n" +
                //"  \n" +
                //" 	IF (isShowDefault = 1) THEN                \n" +
                //" 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS                \n" +
                //" 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,`rp`.`isHelpBlog`,            \n" +
                //" 			`pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`    \n" +
                //" 			FROM `rolepagedetail` AS `rp`                \n" +
                //" 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`                \n" +
                //" 			WHERE `rp`.`roleID` = pRoleId             \n" +
                //" 			AND `rp`.`deletedAt` IS NULL             \n" +
                //" 			AND `pd`.`deletedAt` IS NULL             \n" +
                //" 			AND `pd`.`isActive` = 1;                \n" +
                //"  \n" +
                //" 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)                \n" +
                //" 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass             \n" +
                //" 			FROM page_detail             \n" +
                //" 			WHERE deletedAt IS NULL             \n" +
                //" 			AND isActive = 1             \n" +
                //" 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail             \n" +
                //" 			WHERE roleID = pRoleId AND deletedAt IS NULL);                \n" +
                //" 	ELSE                \n" +
                //"		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS                \n" +
                //"			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,             \n" +
                //"			`up`.`IsShortcut`,`up`.`isHelpBlog`, `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`,  \n" +
                //"			`pd`.`popupFunName`,`pd`.`paramDet`      \n" +
                //"			FROM `userpagedetail` AS `up`                \n" +
                //"			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`                \n" +
                //"			WHERE `up`.`userID` = pUserId             \n" +
                //"			AND `up`.`roleID` = pRoleId             \n" +
                //"			AND `up`.`deletedAt` IS NULL             \n" +
                //"			AND `pd`.`deletedAt` IS NULL             \n" +
                //"			AND `pd`.`isActive` = 1;                \n" +
                //"  \n" +
                //"		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)                \n" +
                //"		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass                \n" +
                //"		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);                \n" +
                //" 	END IF;                \n" +
                //"  \n" +
                //"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                  \n" +
                //"		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");                  \n" +
                //"	ELSE                  \n" +
                //"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                  \n" +
                //"	END IF;	                  \n" +
                //"  \n" +
                //"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                //"		SET pWhereClause = '1=1' ;                  \n" +
                //"	END IF;	                  \n" +
                //"  \n" +
                //"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                //"		SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                //"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                //"	ELSE	                  \n" +
                //"		SET rowNumWhere = '';                  \n" +
                //"	END IF;	                  \n" +
                //"  \n" +
                //"	/* to get total count of rows */                  \n" +
                //"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );                  \n" +
                //"	PREPARE query1 FROM @SQLStatement1;                  \n" +
                //"	EXECUTE query1;                  \n" +
                //"	DEALLOCATE PREPARE query1;                  \n" +
                //"  \n" +
                //"	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                //"	PREPARE query2 FROM @SQLStatement2;                  \n" +
                //"	EXECUTE query2;                  \n" +
                //"	DEALLOCATE PREPARE query2;                  \n" +
                //"  \n" +
                //"	DROP TEMPORARY TABLE IF EXISTS PageResults;                \n" +
                //"END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1031,'1.00','V1','User Story 34391: [Main Branch] Calibration Changes suggested by client  - purav'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1031:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(                               \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "	DECLARE pOffset INT;                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                                         \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);                 \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);               \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);                \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);               \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);              \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);                  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);               \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                           \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;                        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                               \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 	              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                  \n" +
                "	ELSE	                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                  \n" +
                "	END IF;                            \n" +
                "	IF (v_ParentWHType = 'M') THEN              \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"              \n" +
                "					SELECT 		DISTINCT c.id,               \n" +
                "							c.salesOrderDetID,                              \n" +
                "							c.refAssyId,                              \n" +
                "							c.subAssyID,                              \n" +
                "							c.plannKitNumber,                              \n" +
                "							c.poQty,                              \n" +
                "							c.poDueDate,                              \n" +
                "							c.mfrLeadTime,                              \n" +
                "							c.materialDockDate,                              \n" +
                "							c.kitReleaseQty,                              \n" +
                "							c.kitReleaseDate,                              \n" +
                "							c.feasibilityWithAllocatedQty,                   \n" +
                "							c.actualKitReleaseDate,                         \n" +
                "							c.releasedBy,                              \n" +
                "							c.releaseTimeFeasibility,                              \n" +
                "							c.kitStatus,                              \n" +
                "							c.rushJob,                              \n" +
                "							c.mismatchItem,                              \n" +
                "							c.woStatusID,                              \n" +
                "							c.refPlanId,                              \n" +
                "							c.releasedNote,                              \n" +
                "							c.releaseKitNumber,                              \n" +
                "							c.kitReturnStatus,              \n" +
                "							c.woID,              \n" +
                "							c.workorderNumber              \n" +
                "					FROM 		(                              \n" +
                "								SELECT 		id,                              \n" +
                "										salesOrderDetID,                              \n" +
                "										refAssyId,                              \n" +
                "										subAssyID,                              \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate                              \n" +
                "								FROM 		vu_release_plan_detail                               \n" +
                "								WHERE 		kitStatus = 'P'                              \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID                              \n" +
                "							) AS b                               \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id	                              \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID                               \n" +
                "								AND c.refAssyId = b.refAssyId                               \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)                              \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate              \n" +
                "			\");              \n" +
                "	ELSE              \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"              \n" +
                "					SELECT 		DISTINCT c.id,               \n" +
                "							c.salesOrderDetID,                              \n" +
                "							c.refAssyId,                              \n" +
                "							c.subAssyID,                              \n" +
                "							c.plannKitNumber,                              \n" +
                "							c.poQty,                              \n" +
                "							c.poDueDate,                              \n" +
                "							c.mfrLeadTime,                              \n" +
                "							c.materialDockDate,                              \n" +
                "							c.kitReleaseQty,                              \n" +
                "							c.kitReleaseDate,                              \n" +
                "							c.feasibilityWithAllocatedQty,                   \n" +
                "							c.actualKitReleaseDate,                         \n" +
                "							c.releasedBy,                              \n" +
                "							c.releaseTimeFeasibility,                              \n" +
                "							c.kitStatus,                              \n" +
                "							c.rushJob,                              \n" +
                "							c.mismatchItem,                              \n" +
                "							c.woStatusID,                              \n" +
                "							c.refPlanId,                              \n" +
                "							c.releasedNote,                              \n" +
                "							c.releaseKitNumber,                              \n" +
                "							c.kitReturnStatus,              \n" +
                "							c.woID,              \n" +
                "							c.workorderNumber              \n" +
                "					FROM 		(                              \n" +
                "								SELECT 		MAX(id) AS id,                              \n" +
                "										salesOrderDetID,                              \n" +
                "										refAssyId,                              \n" +
                "										subAssyID,                              \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate                              \n" +
                "								FROM 		vu_release_plan_detail                               \n" +
                "								WHERE 		kitStatus = 'R'                              \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID                              \n" +
                "							) AS b                               \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id	                              \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID                               \n" +
                "								AND c.refAssyId = b.refAssyId                               \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)                              \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate              \n" +
                "			\");              \n" +
                "	END IF;              \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN              \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN              \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");              \n" +
                "		ELSE              \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"              \n" +
                "				csd.binId IN (                          \n" +
                "						SELECT 	id                          \n" +
                "						FROM 	binmst                          \n" +
                "						WHERE 	deletedAt IS NULL                          \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'                          \n" +
                "					)              \n" +
                "			\");              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN              \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");              \n" +
                "		ELSE              \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"               \n" +
                "				ka.refUIDId IN (                          \n" +
                "					SELECT 	id                           \n" +
                "					FROM 	component_sid_stock                           \n" +
                "					WHERE 	deletedAt IS NULL                           \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'                          \n" +
                "				)              \n" +
                "			\");              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"               \n" +
                "			EXISTS (                                  \n" +
                "				SELECT 		1                           \n" +
                "				FROM 		kit_allocation ka                                  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId                                        \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id                           \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)                            \n" +
                "							AND ka.status = 'A'                          \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")                          \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")                          \n" +
                "			)              \n" +
                "		\");              \n" +
                "	ELSE              \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");              \n" +
                "	END IF;              \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");              \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	              \n" +
                "						(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"              \n" +
                "								ELSE               \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"              \n" +
                "							END              \n" +
                "						)              \n" +
                "					 \");              \n" +
                "	ELSE               \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	              \n" +
                "						(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = sd.partID              \n" +
                "								ELSE               \n" +
                "									kad.partId = kad.partId              \n" +
                "							END              \n" +
                "						)              \n" +
                "					 \");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"              \n" +
                "								ELSE 	              \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"              \n" +
                "							END              \n" +
                "						)              \n" +
                "					\");              \n" +
                "	ELSE              \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"               \n" +
                "					AND	(              \n" +
                "							CASE              \n" +
                "								WHEN kad.partId IS NULL THEN               \n" +
                "									sd.partID = sd.partID              \n" +
                "								ELSE 	              \n" +
                "									kad.partId = kad.partId              \n" +
                "							END              \n" +
                "						)              \n" +
                "					\");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN            \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");            \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");            \n" +
                "		END IF;            \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");            \n" +
                "		END IF;            \n" +
                "	ELSE            \n" +
                "		IF (pIsCheckPRE = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN            \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN            \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";            \n" +
                "		END IF;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"               \n" +
                "		SELECT	a.*,              \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore              \n" +
                "		FROM	(              \n" +
                "			SELECT 		sd.id refSalesOrderDetID, 	              \n" +
                "					sd.kitNumber, 	              \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,               \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,              \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,              \n" +
                "					sd.partID assyMainId,	              \n" +
                "					c.mfgPN assyMainName,		              \n" +
                "					c.PIDCode assyMainPIDCode,              \n" +
                "					kad.partId assySubId,                 \n" +
                "					cs.mfgPN assySubName,		              \n" +
                "					cs.PIDCode assySubPIDCode,               \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,                   \n" +
                "					sd.kitNumber kitName,              \n" +
                "					s.id soId,  			              \n" +
                "					s.poNumber, 					              \n" +
                "					s.salesOrderNumber, 	              \n" +
                "					s.poDate, 					              \n" +
                "					sd.qty, 			              \n" +
                "					sd.kitQty,				              \n" +
                "					kad.totalAssyBuildQty,			              \n" +
                "					\", pDeptID ,\" AS deptID,	              \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,              \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,					              \n" +
                "					IFNULL(b.uidCount, 0) uidCount,				              \n" +
                "					IFNULL(b.binCount, 0) binCount,					              \n" +
                "					ka.kitReleaseStatus,              \n" +
                "					ka.totalLines,			              \n" +
                "					ka.shortageLines,				              \n" +
                "					sd.isHotJob,  			              \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  		              \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,			              \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,              \n" +
                "					ka.kitPercentage,	                 \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,		              \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,            \n" +
                "					(                              \n" +
                "						SELECT 	COUNT(1)                               \n" +
                "						FROM 	vu_release_plan_detail                               \n" +
                "						WHERE 	salesOrderDetID = sd.id              \n" +
                "								AND refAssyId = sd.partID               \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)                               \n" +
                "					) totalKitPlan,                              \n" +
                "					(                              \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)                               \n" +
                "						FROM 	vu_release_plan_detail vr                              \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id                              \n" +
                "								AND vr.refAssyId = sd.partID                               \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)                               \n" +
                "								AND vr.kitStatus = 'R'                              \n" +
                "					) totalKitReleasePlan,                     \n" +
                "					(                              \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt                              \n" +
                "						FROM 	holdunholdtrans h                               \n" +
                "						WHERE 	h.refTransId = sd.id                               \n" +
                "								AND h.refType = 'PO'                               \n" +
                "								AND h.`status` = 'H'                               \n" +
                "						ORDER BY h.id DESC                               \n" +
                "						LIMIT 1                              \n" +
                "					) poHalt,                              \n" +
                "					(                              \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt                              \n" +
                "						FROM 	(                              \n" +
                "								SELECT 	a.haltTooltip                              \n" +
                "								FROM 	(                              \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip                               \n" +
                "										FROM 	holdunholdtrans h                               \n" +
                "										WHERE 	h.refTransId = sd.id              \n" +
                "												AND h.refType = 'KR'                               \n" +
                "												AND h.`status` = 'H'                               \n" +
                "										ORDER BY h.id DESC                              \n" +
                "										LIMIT 1                              \n" +
                "								) a                              \n" +
                "								UNION                               \n" +
                "								SELECT 	b.haltTooltip                               \n" +
                "								FROM 	(                              \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip                               \n" +
                "										FROM 	holdunholdtrans h                              \n" +
                "										WHERE 	h.refTransId = sd.id              \n" +
                "												AND h.refType = 'KA'                              \n" +
                "												AND h.`status` = 'H'                               \n" +
                "										ORDER BY h.id DESC                              \n" +
                "										LIMIT 1                              \n" +
                "								) b                              \n" +
                "						) c                              \n" +
                "					) kitHalt,              \n" +
                "					p.woID,						              \n" +
                "					p.workorderNumber,              \n" +
                "					p.id AS id,			              \n" +
                "					p.salesOrderDetID,				              \n" +
                "					p.refAssyId,			              \n" +
                "					p.subAssyID,				              \n" +
                "					p.plannKitNumber,              \n" +
                "					p.poQty,				              \n" +
                "					p.poDueDate,					              \n" +
                "					p.mfrLeadTime,			              \n" +
                "					p.materialDockDate,			              \n" +
                "					p.kitReleaseQty,              \n" +
                "					p.kitReleaseDate,              \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,              \n" +
                "					p.feasibilityWithAllocatedQty,	              \n" +
                "					p.actualKitReleaseDate,	              \n" +
                "					p.releasedBy,				              \n" +
                "					p.releaseTimeFeasibility,              \n" +
                "					p.kitStatus,			              \n" +
                "					p.rushJob,						              \n" +
                "					p.mismatchItem,			              \n" +
                "					p.woStatusID,			              \n" +
                "					p.refPlanId,					              \n" +
                "					p.releasedNote,			              \n" +
                "					p.releaseKitNumber,			              \n" +
                "					p.kitReturnStatus,              \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,              \n" +
                "					fun_getKitReleaseIndication(p.kitReleaseDate, IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0)) kitReleaseIndicator,	              \n" +
                "					ka.allocationUMIDCount allocationUMIDCount              \n" +
                "			FROM 		salesorderdet sd                             \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                           \n" +
                "			INNER JOIN	component c ON sd.partID = c.id                      \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id                  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id                \n" +
                "			LEFT JOIN	(              \n" +
                "						SELECT 	a.refSalesOrderDetID, 	                              \n" +
                "							a.assyID, 	                              \n" +
                "							a.binID, 	                              \n" +
                "							COUNT(1) binCount, 	                              \n" +
                "							SUM(a.uidCount) uidCount,                              \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin                              \n" +
                "						FROM 	(                                  \n" +
                "								SELECT 		k.refSalesOrderDetID,                               \n" +
                "										k.assyID,                               \n" +
                "										csd.binID,                               \n" +
                "										COUNT(1) uidCount,                              \n" +
                "										(                              \n" +
                "											SELECT IF( EXISTS(                              \n" +
                "												SELECT 	binId                               \n" +
                "												FROM 	component_sid_stock                               \n" +
                "												WHERE 	binID = csd.binID                               \n" +
                "													AND deletedAt IS NULL                              \n" +
                "													AND id NOT IN (                              \n" +
                "														SELECT 	refUIDId                              \n" +
                "														FROM 	kit_allocation                              \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID                              \n" +
                "																AND assyID = k.assyID                              \n" +
                "																AND `status` = 'A'                              \n" +
                "													)                              \n" +
                "											), 1, 0)                              \n" +
                "										) mismatchUMIDBin                                    \n" +
                "									FROM 		kit_allocation k                                   \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId                                              \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID                                              \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID                                     \n" +
                "									WHERE		k.status = 'A'                                  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)                                  \n" +
                "												AND	csd.isDeleted = 0                                              \n" +
                "												AND	b.isDeleted = 0                                              \n" +
                "												AND	w.isDeleted = 0                                    \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID                                  \n" +
                "							) AS a                                  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID              \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)               \n" +
                "			LEFT JOIN 	(              \n" +
                "						SELECT 	k.refSalesOrderDetID, 	              \n" +
                "							k.assyID, 	              \n" +
                "							k.totalLines,              \n" +
                "							k.shortageLines,			              \n" +
                "							k.kitAllocationPercentage kitPercentage,              \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,              \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount              \n" +
                "						FROM 	(              \n" +
                "								SELECT 	k.refSalesOrderDetID, 	              \n" +
                "									k.assyID,              \n" +
                "									COUNT(1) AS totalLines,	              \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,              \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage              \n" +
                "								FROM 	(              \n" +
                "										SELECT 	refSalesOrderDetID, 	              \n" +
                "											assyID,		              \n" +
                "											(    \n" +
                "												CASE    \n" +
                "													WHEN connecterTypeID = -2 THEN    \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))    \n" +
                "													ELSE    \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))    \n" +
                "												END    \n" +
                "											 ) AS allocationPer,              \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage              \n" +
                "										FROM 	vu_kit_allocation_detail              \n" +
                "									) k              \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID              \n" +
                "							) k              \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)               \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id               \n" +
                "							AND p.refAssyId = sd.partID               \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)              \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3               \n" +
                "						AND 	s.isDeleted = 0                \n" +
                "						AND 	sd.isCancle != 1              \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")               \n" +
                "						AND 	(\", v_WhereClause ,\")              \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId              \n" +
                "		) AS a              \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")            \n" +
                "	\");              \n" +
                "	IF (v_ParentWHType = 'M') THEN              \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"               \n" +
                "			ORDER BY isHotJob DESC,               \n" +
                "				 shortageIndicatore DESC,              \n" +
                "				 kitReleaseDate ASC              \n" +
                "			\");                  \n" +
                "	ELSE              \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"               \n" +
                "			ORDER BY isHotJob DESC,               \n" +
                "				 shortageIndicatore DESC,              \n" +
                "				 actualKitReleaseDate ASC              \n" +
                "			\");                  \n" +
                "	END IF;              \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");                   \n" +
                "	PREPARE query2 FROM @SQLStatementCount;                                            \n" +
                "	EXECUTE query2;                                            \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;                     \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);        \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                        \n" +
                "	EXECUTE mainQuery;                                                                                        \n" +
                "	DEALLOCATE PREPARE mainQuery;                \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1032,'1.00','V1','Xfer Bulk Material kit procedure (gives error for refSalesorderDetID) - Dharmishtha'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1032:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(                \n" +
                "	IN ppageIndex INT,                \n" +
                "	IN precordPerPage INT,                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pUserId INT,              \n" +
                "	IN pRoleId INT,        \n" +
                "	IN isShowDefault INT        \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT;                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;              \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;              \n" +
                "  \n" +
                " 	IF (isShowDefault = 1) THEN              \n" +
                " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS              \n" +
                " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,          \n" +
                " 			`pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`    \n" +
                " 			FROM `rolepagedetail` AS `rp`              \n" +
                " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`              \n" +
                " 			WHERE `rp`.`roleID` = pRoleId           \n" +
                " 			AND `rp`.`deletedAt` IS NULL           \n" +
                " 			AND `pd`.`deletedAt` IS NULL           \n" +
                " 			AND `pd`.`isActive` = 1;              \n" +
                "  \n" +
                " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)              \n" +
                " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass           \n" +
                " 			FROM page_detail           \n" +
                " 			WHERE deletedAt IS NULL           \n" +
                " 			AND isActive = 1           \n" +
                " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail           \n" +
                " 			WHERE roleID = pRoleId AND deletedAt IS NULL);              \n" +
                " 	ELSE              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS              \n" +
                "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,           \n" +
                "			`up`.`IsShortcut`, `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`    \n" +
                "			FROM `userpagedetail` AS `up`              \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`              \n" +
                "			WHERE `up`.`userID` = pUserId           \n" +
                "			AND `up`.`roleID` = pRoleId           \n" +
                "			AND `up`.`deletedAt` IS NULL           \n" +
                "			AND `pd`.`deletedAt` IS NULL           \n" +
                "			AND `pd`.`isActive` = 1;              \n" +
                "  \n" +
                "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)              \n" +
                "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass              \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);              \n" +
                " 	END IF;              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");                \n" +
                "	ELSE                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "	ELSE	                \n" +
                "		SET rowNumWhere = '';                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	/* to get total count of rows */                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1033,'1.00','V1','updated to previous Sproc_GetPermissionsPageListByRole  - purav'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1033:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_cofcdocumentcount` ;  \n" +
                "CREATE VIEW `vu_cofcdocumentcount` AS  \n" +
                "    SELECT   \n" +
                "        COUNT(1) AS `cofcCount`,  \n" +
                "        `g`.`refTransID` AS `refTransID`,  \n" +
                "        `g`.`gencFileOwnerType` AS `gencFileOwnerType`  \n" +
                "    FROM  \n" +
                "        (`genericfiles` `g`  \n" +
                "        JOIN `genericcategory` `gc` ON (((`g`.`fileGroupBy` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0)  \n" +
                "            AND (`gc`.`gencCategoryName` IN ('COFC' , 'Packing Slip With COFC')))))  \n" +
                "    WHERE  \n" +
                "        ((`g`.`isDeleted` = 0)  \n" +
                "            AND (`g`.`gencFileOwnerType` IN ('component_sid_stock' , 'packing_slip')))  \n" +
                "    GROUP BY `g`.`refTransID` , `g`.`gencFileOwnerType`;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_umidcofcdetail` ;  \n" +
                "CREATE VIEW `vu_umidcofcdetail` AS  \n" +
                "    SELECT   \n" +
                "        `cspd`.`refComponentSidStockID` AS `refComponentSidStockID`,  \n" +
                "        `mcm`.`mfgCode` AS `mfgCode`,  \n" +
                "        `ps`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `mcm`.`mfgName` AS `mfgName`,  \n" +
                "        `ps`.`id` AS `packingSlipId`,  \n" +
                "        `ps`.`mfgCodeID` AS `packingSlipSupplierId`,  \n" +
                "        `g`.`cofcCount` AS `cofcCount`   \n" +
                "    FROM  \n" +
                "        ((((`component_sid_stock_packing_detail` `cspd`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` FORCE INDEX (PRIMARY) ON (((`cspd`.`refPackingSlipDetailID` = `psd`.`id`)  \n" +
                "            AND (`psd`.`isDeleted` = 0))))  \n" +
                "        JOIN `packing_slip_material_receive` `ps` FORCE INDEX (PRIMARY) ON (((`psd`.`refPackingSlipMaterialRecID` = `ps`.`id`)  \n" +
                "            AND (`ps`.`isDeleted` = 0))))  \n" +
                "        JOIN `mfgcodemst` `mcm` ON (((`mcm`.`id` = `ps`.`mfgCodeID`)  \n" +
                "            AND (`mcm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `vu_cofcdocumentcount` `g` ON (((`g`.`refTransID` = `ps`.`id`)  \n" +
                "            AND (`g`.`gencFileOwnerType` = 'packing_slip'))))  \n" +
                "    GROUP BY `cspd`.`refComponentSidStockID` , `mcm`.`mfgCode` , `ps`.`packingSlipNumber` , `mcm`.`mfgName` , `ps`.`id`;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    In pInnerQueryWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;                                                    \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;                                                    \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                    \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;               \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);      \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*left join filter*/  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	deletedAt IS NULL  \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		   id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,   \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomName,				orgPkgUnit,  \n" +
                "							orgQty, 			packaginggroupID,	packaging,				packagingName,  		printStatus, 			tentativePrice,  \n" +
                "							costScrapQty,		costCategoryID,		costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,    	  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin, 		   \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName, 	  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,		  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,	  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,	                \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,	  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,    \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly, 	  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCode, 		 	refCPNMFGPNID,	       	cpnMFGPN, 		  \n" +
                "							refSupplierPartId,	supplierMFGCode,	supplieMFGPN,			totalScrapUnit,			perScrapQty,       \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt, 		   \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt, 		          \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,    	  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId  \n" +
                "		FROM 		(		                                                                                                    \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,	  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'                                                    \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'  \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,                                                    \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL                                                    \n" +
                "								END) displayStockInventoryType,        \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,				  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,					  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,				  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,					  \n" +
                "								css.pkgUnit,				css.uom,					u.unitName uomName,			IFNULL(css.orgPkgUnit, 0) orgPkgUnit,  \n" +
                "								css.orgQty,					c.packaginggroupID,			css.packaging,				cp.name packagingName,		css.printStatus,		  \n" +
                "								IFNULL(c.price, 0) tentativePrice,						((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,  \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,    \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,     \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,                                                                                                                       \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,                                                                                                    \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,				                                                                                                               \n" +
                "								css.refCPNMFGPNID,		CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								cssh.scrappedUnit totalScrapUnit,                          \n" +
                "								null isTransit,                                 \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,                          \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,   \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					                          \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,                \n" +
                "								null packingSupplierName,                     \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId                 \n" +
                "					FROM 		component_sid_stock css   \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)   \n" +
                "						' else '' end),  \n" +
                "					\"                   \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id   \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id    \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id    \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case   \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')   \n" +
                "                            else ''   \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id   \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit    \n" +
                "								FROM 		component_sid_stock_history cssh    \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isCustom = 1  and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,   \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname	                    \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)                  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3                   \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                    \n" +
                "						INNER JOIN	component c ON k.assyID = c.id                    \n" +
                "						WHERE 		k.status = 'A'                \n" +
                "						GROUP BY 	k.refUIDId     \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')   \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')  \n" +
                "									end)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	# select @temp_component_sid_stock;  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for paremt documents    \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';    \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  CONCAT(ps.mfgCode, ps.packingSlipNumber) ,                \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),                     \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)   \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI')  \n" +
                "	and		(ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t   \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null   \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data                             \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',   \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(createdBy)   \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end)  \n" +
                "    order by s.id desc;  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                \n" +
                "	EXECUTE query1;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                \n" +
                "	EXECUTE query2;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE query2;                             \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);    \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                \n" +
                "	EXECUTE mainQuery;                                                                                                                                                \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1034,'1.00','V1','Refactor Procedure Sproc_GetReceivingMaterial  - Dharmishtha'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1034:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pWHId INT,    \n" +
                "	IN pBinId INT,    \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),    \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),    \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),    \n" +
                "	IN pAssyIDs VARCHAR(16383),    \n" +
                "	IN pRestrictPart TINYINT,    \n" +
                "	IN pExpireMaterial TINYINT,    \n" +
                "	IN pPartId INT,    \n" +
                "	IN pIsShowPackagingAlias TINYINT,    \n" +
                "	IN pStandardIDs VARCHAR(16383),    \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),    \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),    \n" +
                "	IN pDateCode VARCHAR(16383),    \n" +
                "	IN pIsAvailableToSell TINYINT,    \n" +
                "	IN pIsRestrictedUMID TINYINT,    \n" +
                "	IN pIsInternalStock TINYINT,    \n" +
                "	IN pIsCustomerStock TINYINT,    \n" +
                "	IN pdepartmentIDs VARCHAR(16383),    \n" +
                "	IN pwarehouseType VARCHAR(255),    \n" +
                "	IN pWarehouse VARCHAR(16383),    \n" +
                "	IN pExpiredDay INT,    \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),    \n" +
                "	IN pCustomerId INT,    \n" +
                "	IN pFromDate DATE,    \n" +
                "	IN pToDate DATE,    \n" +
                "	IN pSearchTextAttribute LONGTEXT,    \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),    \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),    \n" +
                "	IN pInventoryType VARCHAR(255),    \n" +
                "    In pInnerQueryWhereClause VARCHAR(16383)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	DECLARE attributeSearchString LONGTEXT;                                                      \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;                                                      \n" +
                "	DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                      \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                 \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);        \n" +
                "    DECLARE v_ExpiryDate datetime;    \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);    \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "	SET v_DescriptionWhereClause = '';    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "		SET pWhereClause = ' 1=1';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/*left join filter*/    \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');    \n" +
                "	END IF;    \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN    \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN    \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))    \n" +
                "            into	v_PartIDs    \n" +
                "			FROM 	component c    \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0    \n" +
                "			WHERE 	c.id = pPartId    \n" +
                "			AND 	c.isDeleted = 0;    \n" +
                "		ELSE    \n" +
                "			select pPartId into v_PartIDs;    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/*below query need to refactor*/    \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN    \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;    \n" +
                "		SET attributeSearchString = pSearchTextAttribute;    \n" +
                "		do_this:    \n" +
                "		LOOP    \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);    \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);    \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);    \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);    \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');    \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');    \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN    \n" +
                "				LEAVE do_this;    \n" +
                "			END IF;    \n" +
                "		END LOOP do_this;    \n" +
                "	END IF;    \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN    \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs    \n" +
                "		FROM 	kit_allocation_assy_detail    \n" +
                "		WHERE 	deletedAt IS NULL    \n" +
                "			AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);    \n" +
                "	END IF;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);    \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN    \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)    \n" +
                "		SELECT 	k.refUIDId    \n" +
                "		FROM 	kit_allocation k    \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)    \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)    \n" +
                "		AND	k.status = 'A';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;    \n" +
                "    CREATE temporary table temp_component_sid_stock(    \n" +
                "		   id int NOT NULL DEFAULT '0',    \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,    \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,    \n" +
                "		  uid varchar(15) DEFAULT NULL,    \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,    \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,    \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,    \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,    \n" +
                "		  fromUIDId int DEFAULT NULL,    \n" +
                "		  fromUID varchar(15) DEFAULT NULL,    \n" +
                "		  parentUIDId int DEFAULT NULL,    \n" +
                "		  parentUID varchar(15) DEFAULT NULL,    \n" +
                "		  mfgcodeID int NOT NULL,    \n" +
                "		  mfg text,    \n" +
                "		  refcompid int DEFAULT NULL,    \n" +
                "		  mfgPN varchar(100) NOT NULL,    \n" +
                "		  PIDCode varchar(109) NOT NULL,    \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,    \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,    \n" +
                "		  RoHSStatusID int NOT NULL,    \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,    \n" +
                "		  rohsName varchar(50) DEFAULT NULL,    \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',    \n" +
                "		  spq decimal(18,8) DEFAULT NULL,    \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,    \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,    \n" +
                "		  uom int DEFAULT NULL,    \n" +
                "		  uomName varchar(100) NOT NULL,    \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',    \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,    \n" +
                "		  packaginggroupID int DEFAULT NULL,    \n" +
                "		  packaging int DEFAULT NULL,    \n" +
                "		  packagingName varchar(100) NOT NULL,    \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',    \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',    \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,    \n" +
                "		  costCategoryID int DEFAULT NULL,    \n" +
                "		  costCategory varchar(147) DEFAULT NULL,    \n" +
                "		  lotCode varchar(255) DEFAULT NULL,    \n" +
                "		  dateCode varchar(10) DEFAULT NULL,    \n" +
                "		  UMIDrohsStatusID int NOT NULL,    \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,    \n" +
                "		  binID int DEFAULT NULL,    \n" +
                "		  location varchar(110) DEFAULT NULL,    \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',    \n" +
                "		  warehouseID int DEFAULT NULL,    \n" +
                "		  warehouse varchar(50) NOT NULL,    \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,    \n" +
                "		  department varchar(50) NOT NULL,    \n" +
                "		  departmentID int NOT NULL DEFAULT '0',    \n" +
                "		  fromBin int DEFAULT NULL,    \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,    \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',    \n" +
                "		  fromWarehouse int DEFAULT NULL,    \n" +
                "		  fromWHName varchar(50) NOT NULL,    \n" +
                "		  fromDepartment int DEFAULT NULL,    \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,    \n" +
                "		  orgRecBin int DEFAULT NULL,    \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,    \n" +
                "		  orgRecWarehouse int DEFAULT NULL,    \n" +
                "		  orgRecWHName varchar(50) NOT NULL,    \n" +
                "		  orgRecDepartment int DEFAULT NULL,    \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,    \n" +
                "		  expiryDate date DEFAULT NULL,    \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,    \n" +
                "		  pcbPerArray int DEFAULT NULL,    \n" +
                "		  nickName varchar(50) DEFAULT NULL,    \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,    \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,    \n" +
                "		  woNumber varchar(255) DEFAULT NULL,    \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,    \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,    \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',    \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',    \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,    \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,    \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,    \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,    \n" +
                "		  mountingTypeID int NOT NULL,    \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,    \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,    \n" +
                "		  partPackage varchar(50) DEFAULT NULL,    \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,    \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',    \n" +
                "		  detailDescription text,    \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',    \n" +
                "		  customerID int DEFAULT NULL,    \n" +
                "		  customer text,    \n" +
                "		  assyID int DEFAULT NULL,    \n" +
                "		  assembly varchar(109),    \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',    \n" +
                "		  cpnMFGCode text,    \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,    \n" +
                "		  cpnMFGPN varchar(100),    \n" +
                "		  refSupplierPartId int DEFAULT NULL,    \n" +
                "		  supplierMFGCode text,    \n" +
                "		  supplieMFGPN varchar(100),    \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,    \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,    \n" +
                "		  isTransit varchar(10) DEFAULT NULL,    \n" +
                "		  searchUser varchar(50) DEFAULT NULL,    \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,    \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,    \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,    \n" +
                "		  createdAt varchar(50) DEFAULT NULL,    \n" +
                "		  createdBy varchar(255) NOT NULL,    \n" +
                "		  createdByName varchar(50) DEFAULT NULL,    \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,    \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,    \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,    \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,    \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,    \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,    \n" +
                "		  allocatedToKit text,    \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,    \n" +
                "		  packingSupplierName text,    \n" +
                "		  packingSlipId int DEFAULT NULL,    \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,     \n" +
                "          cocDocumentCount int default 0,    \n" +
                "          parentCofCDocumentCount int default 0,    \n" +
                "          createByRoleId int default null,    \n" +
                "          updateByRoleId int default null    \n" +
                "		);    \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock    \n" +
                "					(id, scanlabel, umidPrefix, uid, receiveMaterialType, displayReceiveMaterialType, stockInventoryType, displayStockInventoryType, fromUIDId, fromUID, parentUIDId, parentUID, mfgcodeID, mfg, refcompid, mfgPN, PIDCode, packageQty, mslLevel, RoHSStatusID, rohsIcon, rohsName, mfgPNDescription, spq, pkgQty, pkgUnit, uom, uomName, orgPkgUnit, orgQty, packaginggroupID, packaging, packagingName, printStatus, tentativePrice, costScrapQty, costCategoryID, costCategory, lotCode, dateCode, UMIDrohsStatusID, UMIDrohsStatus, binID, location, side, warehouseID, warehouse, warehouseType, department, departmentID, fromBin, fromBinName, fromSide, fromWarehouse, fromWHName, fromDepartment, fromDepartmentName, orgRecBin, orgRecBinName, orgRecWarehouse, orgRecWHName, orgRecDepartment, orgRecDepartmentName, expiryDate, expiredStatus, pcbPerArray, nickName, specialNote, isinStk, woNumber, refRestrictUMIDId, isUMIDRestrict, UMIDRestricted, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, reasonUMIDRestricted, countOfRestrictUMID, mountingTypeID, mountingTypeName, externalPartPackage, partPackage, internalPartPackage, isCustom, detailDescription, pictureCount, customerID, customer, assyID, assembly, cpn, mfgAvailable, customerConsign, cpnMFGCode, refCPNMFGPNID, cpnMFGPN, refSupplierPartId, supplierMFGCode, supplieMFGPN, totalScrapUnit, perScrapQty, isTransit, searchUser, mfrDateCodeFormatID, mfrDateCode, mfrDateCodeFormat, createdAt, createdBy, createdByName, createdbyRole, createdUserCode, createByRoleId, updatedAt, updatedBy, umidModifiedBy, updatedbyRole, updateByRoleId, allocatedToKit, packingSlipName, packingSupplierName, packingSlipId, packingSlipSupplierId)    \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,    \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,    \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,    \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,    \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomName,				orgPkgUnit,    \n" +
                "							orgQty, 			packaginggroupID,	packaging,				packagingName,  		printStatus, 			tentativePrice,    \n" +
                "							costScrapQty,		costCategoryID,		costCategory,			lotCode,    \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,    	    \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin, 		     \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName, 	    \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,		    \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,	    \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,	                  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,	    \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,      \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly, 	    \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCode, 		 	refCPNMFGPNID,	       	cpnMFGPN, 		    \n" +
                "							refSupplierPartId,	supplierMFGCode,	supplieMFGPN,			totalScrapUnit,			perScrapQty,         \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt, 		     \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt, 		            \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,    	    \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId    \n" +
                "		FROM 		(		                                                                                                      \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,	    \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'                                                      \n" +
                "										WHEN css.receiveMaterialType = 'WC' THEN 'Customer Consigned (with CPN) Part'    \n" +
                "										WHEN css.receiveMaterialType = 'WOC' THEN 'Customer Consigned (without CPN) Part'    \n" +
                "										WHEN css.receiveMaterialType = 'PR' THEN 'Purchased & Reserved Part'    \n" +
                "										ELSE NULL    \n" +
                "								END) displayReceiveMaterialType,    \n" +
                "								css.stockInventoryType,                                                      \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Stock'    \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Existing Stock (Require to create UMID)'    \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Existing Assembly Stock'    \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'    \n" +
                "										ELSE NULL                                                      \n" +
                "								END) displayStockInventoryType,          \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,				    \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,					    \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,				    \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,					    \n" +
                "								css.pkgUnit,				css.uom,					u.unitName uomName,			IFNULL(css.orgPkgUnit, 0) orgPkgUnit,    \n" +
                "								css.orgQty,					c.packaginggroupID,			css.packaging,				cp.name packagingName,		css.printStatus,		    \n" +
                "								IFNULL(c.price, 0) tentativePrice,						((cssh.scrappedUnit/css.orgPkgUnit) * IFNULL(c.price, 0)) costScrapQty,    \n" +
                "                                ((cssh.scrappedUnit/css.orgPkgUnit) * 100) perScrapQty,      \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,    \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,    \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,    \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,    \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,    \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,    \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,       \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,    \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,    \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,    \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,    \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,    \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,    \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,    \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,    \n" +
                "								css.assyID,					assy.PIDCode assembly,    \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,                                                                                                                         \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,                                                                                                      \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,				                                                                                                                 \n" +
                "								css.refCPNMFGPNID,		CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,    \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,    \n" +
                "								cssh.scrappedUnit totalScrapUnit,                            \n" +
                "								null isTransit,                                   \n" +
                "								null searchUser,    \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,                            \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				    \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,     \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,    \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					                            \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,    \n" +
                "								kit.kitname allocatedToKit,    \n" +
                "								null packingSlipName,                  \n" +
                "								null packingSupplierName,                       \n" +
                "								null packingSlipId,    \n" +
                "								null packingSlipSupplierId                   \n" +
                "					FROM 		component_sid_stock css     \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",    \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),    \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),    \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),    \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),    \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN    \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')    \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN    \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')    \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN    \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')    \n" +
                "								else ''    \n" +
                "                        end),    \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),    \n" +
                "                        /*below query need to refactor*/    \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN    \n" +
                "							' AND not exists (    \n" +
                "									SELECT 	1    \n" +
                "									FROM 	rfq_lineitems_alternatepart a    \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id    \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0    \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)    \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0    \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)    \n" +
                "								)     \n" +
                "						' else '' end),    \n" +
                "					\"                     \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id     \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id      \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id      \n" +
                "					inner join uoms u on css.uom = u.id    \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id    \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id    \n" +
                "					inner join binmst b on css.binID = b.id \" ,    \n" +
                "						(Case     \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')    \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')    \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')     \n" +
                "                            else ''     \n" +
                "						end),    \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",    \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),    \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",    \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),    \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id    \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id    \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id    \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id    \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id    \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id    \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id    \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id     \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0    \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'    \n" +
                "					left join (    \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit      \n" +
                "								FROM 		component_sid_stock_history cssh      \n" +
                "								where 		cssh.scrappedUnit > 0    \n" +
                "								GROUP BY 	cssh.refUIDId    \n" +
                "					) cssh on css.id = cssh.refUIDId    \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0    \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0    \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isCustom = 1  and cpn_comp.isDeleted = 0    \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0    \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0    \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0    \n" +
                "					left join (    \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict    \n" +
                "						from (    \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,    \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict    \n" +
                "							from component_sid_stock_restrict_umid rest_umid    \n" +
                "						) css_rst where css_rst.rnk = 1    \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id    \n" +
                "					left join (    \n" +
                "						SELECT 		k.refUIDId,     \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname	                      \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)                    \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3                     \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id                      \n" +
                "						INNER JOIN	component c ON k.assyID = c.id                      \n" +
                "						WHERE 		k.status = 'A'                  \n" +
                "						GROUP BY 	k.refUIDId       \n" +
                "					) kit  ON kit.refUIDId = css.id    \n" +
                "					WHERE 	css.isdeleted = 0\",    \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN    \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')    \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN    \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')    \n" +
                "							  when (pCustomerId IS NOT NULL) then    \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')     \n" +
                "                            else ''    \n" +
                "						end),    \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),    \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),    \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),    \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),    \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),    \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),    \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),    \n" +
                "                        (case when (pExpireMaterial = 1) THEN    \n" +
                "									(case when (pExpiredDay = 0) THEN    \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() ')    \n" +
                "									ELSE    \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ', pExpiredDay,' DAY ')    \n" +
                "									end)    \n" +
                "							  else ''    \n" +
                "						end),    \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN    \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')    \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN    \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')    \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN    \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')    \n" +
                "							 else ''    \n" +
                "                        end),    \n" +
                "						v_DescriptionWhereClause,    \n" +
                "                        pInnerQueryWhereClause,    \n" +
                "				\") As tempUMID\"    \n" +
                "			);    \n" +
                "	# select @temp_component_sid_stock;    \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock ;    \n" +
                "	EXECUTE tempSQLQuery;    \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;    \n" +
                "  \n" +
                "    # Update count for self documents    \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g    \n" +
                "	set t.cocDocumentCount = g.cofcCount    \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';    \n" +
                "  \n" +
                "	# Update count for paremt documents      \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g    \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount    \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';   \n" +
                "  \n" +
                "    # Update CofC detail    \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps    \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)   \n" +
                "										else null  \n" +
                "								  end),                  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),                       \n" +
                "			t.packingSlipId = ps.packingSlipId,    \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)     \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');    \n" +
                "  \n" +
                "	# Update CofC detail    \n" +
                "	Update 	temp_component_sid_stock t     \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)    \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')    \n" +
                "	and		t.packingSlipId is null     \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);    \n" +
                "  \n" +
                "    # Update created by role    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join roles r on r.id = t.createByRoleId    \n" +
                "	set t.createdbyRole = r.name;    \n" +
                "  \n" +
                "    # Update updated by role    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join roles r on r.id = t.updateByRoleId    \n" +
                "	set t.updatedbyRole = r.name;    \n" +
                "  \n" +
                "    # Update created by name   \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join users u on u.id = t.createdBy    \n" +
                "    inner join employees emp on emp.id = u.employeeID    \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;    \n" +
                "  \n" +
                "    # Update updated by name    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "    inner join users u on  u.id = t.updatedBy    \n" +
                "    inner join employees emp  on emp.id = u.employeeID    \n" +
                "	set t.umidModifiedBy = emp.initialName ;    \n" +
                "  \n" +
                "    # Update MFR Date Code Format    \n" +
                "    Update temp_component_sid_stock t    \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID    \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;    \n" +
                "  \n" +
                "    # Update In Transit Data                               \n" +
                "	Update temp_component_sid_stock t    \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL    \n" +
                "	set t.isTransit = 'Yes',     \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)     \n" +
                "							when (messagetype = 1001) then 'Unauthorized'    \n" +
                "							else ''    \n" +
                "                        end);    \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                                  \n" +
                "	EXECUTE query1;                                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                                  \n" +
                "	EXECUTE query2;                                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query2;                               \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);      \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                                  \n" +
                "	EXECUTE mainQuery;                                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE mainQuery;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-06-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1035,'1.00','V1','Refactor Procedure Sproc_GetReceivingMaterial  - Dharmishtha'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1035:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "            	IN pStockDetail JSON,  \n" +
                "            	IN pRefSalesOrderDetID INT,                                   \n" +
                "            	IN pAssyID INT,   \n" +
                "            	IN pPartIds LONGTEXT,   \n" +
                "            	IN pUMIDs LONGTEXT,   \n" +
                "            	IN pUserId VARCHAR(50),   \n" +
                "            	IN pCheckForSameUmid BOOLEAN   \n" +
                "            )  \n" +
                "BEGIN                                \n" +
                "            	DECLARE v_CountSameUMIDFind INT;                                 \n" +
                "            	DECLARE v_ConcateUMID LONGTEXT;                              \n" +
                "            	DECLARE v_KitName LONGTEXT;                           \n" +
                "            	DECLARE v_UMIDForKitName LONGTEXT;    \n" +
                "				DECLARE v_KitIds LONGTEXT;                     \n" +
                "            	SET v_ConcateUMID = NULL;                                   \n" +
                "				/* create temp table for kit allocation details */    \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;                         \n" +
                "            	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS                                   \n" +
                "            	SELECT 	*                                    \n" +
                "            	FROM 	JSON_TABLE(                                   \n" +
                "            		pStockDetail,                                   \n" +
                "            		\"$[*]\" COLUMNS(                                   \n" +
                "            			refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",                                   \n" +
                "            			assyID INT PATH \"$.assyID\",                                   \n" +
                "            			uid VARCHAR(50) PATH \"$.uid\",                                   \n" +
                "            			refBOMLineID INT PATH \"$.refBOMLineID\",                                   \n" +
                "            			STATUS VARCHAR(50) PATH \"$.status\",                                   \n" +
                "            			refUIDId INT PATH \"$.refUIDId\",                                   \n" +
                "            			partId INT PATH \"$.partId\",                                   \n" +
                "            			allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",                                   \n" +
                "            			allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",                                   \n" +
                "            			allocatedUOM INT PATH \"$.allocatedUOM\",                                   \n" +
                "            			umidUnits INT PATH \"$.umidUnits\",                                 \n" +
                "            			kitAllocationId INT PATH \"$.kitAllocationId\",                              \n" +
                "            			PIDCode VARCHAR(100) PATH \"$.PIDCode\",                     \n" +
                "            			restricType VARCHAR(500) PATH \"$.restricType\",                     \n" +
                "            			transactionType VARCHAR(1000) PATH \"$.transactionType\",                     \n" +
                "            			refTableName VARCHAR(255) PATH \"$.refTableName\",                     \n" +
                "            			approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",                     \n" +
                "            			approvedBy VARCHAR(255) PATH \"$.approvedBy\",                     \n" +
                "            			approvalReason TEXT PATH \"$.approvalReason\",         \n" +
                "						confirmationType INT PATH \"$.confirmationType\",           \n" +
                "						roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",           \n" +
                "						allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"                                    \n" +
                "            		)                                   \n" +
                "            	) AS jt;      \n" +
                "  \n" +
                "                /* create temp table for response */    \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;                                                                                          \n" +
                "            	CREATE TEMPORARY TABLE temp_Validation_Error                                   \n" +
                "            	(                                                                                         \n" +
                "            		IsSuccess BOOLEAN,                                                                               \n" +
                "            		UMID VARCHAR(5000),                                 \n" +
                "            		KitName LONGTEXT,      \n" +
                "            		ErrorCode INT,                \n" +
                "					KitIds VARCHAR(1000)                                                                            \n" +
                "            	);                                    \n" +
                "  \n" +
                "            	IF (pCheckForSameUmid = TRUE) THEN                                 \n" +
                "            		SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID                                  \n" +
                "            		FROM 	kit_allocation                                  \n" +
                "            		WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = pAssyID  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);                                 \n" +
                "            	ELSE                                 \n" +
                "            		SET v_CountSameUMIDFind = 0;                                 \n" +
                "            	END IF;         \n" +
                "  \n" +
                "            	IF (v_CountSameUMIDFind = 0) THEN                                 \n" +
                "            		block1: BEGIN                                   \n" +
                "            			DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                     \n" +
                "            			DECLARE v_RefSalesOrderDetID INT;                                   \n" +
                "            			DECLARE v_AssyID INT;                                   \n" +
                "            			DECLARE v_Umid VARCHAR(50);                                   \n" +
                "            			DECLARE v_RefBOMLineID INT;                                   \n" +
                "            			DECLARE v_Status VARCHAR(50);                                   \n" +
                "            			DECLARE v_RefUIDId INT;                                   \n" +
                "            			DECLARE v_PartId INT;                                    \n" +
                "            			DECLARE v_AllocatedQty DECIMAL(18,8);                                    \n" +
                "            			DECLARE v_AllocatedUnit DECIMAL(18,8);                                    \n" +
                "            			DECLARE v_AllocatedUOM INT;                                   \n" +
                "            			DECLARE v_UMIDUnits DECIMAL(18,8);                                   \n" +
                "            			DECLARE v_countKitExist INT;                                   \n" +
                "            			DECLARE v_CountSameUMID INT;                                   \n" +
                "            			DECLARE	v_SameUMID VARCHAR(50);                                   \n" +
                "            			DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);                                   \n" +
                "            			DECLARE v_oldUMID VARCHAR(50);                                   \n" +
                "            			DECLARE v_CountSameAllocatedUnit INT;                                  \n" +
                "            			DECLARE v_KitAllocationId INT;                                  \n" +
                "            			DECLARE v_StringSameUMID VARCHAR(10000);                                 \n" +
                "            			DECLARE v_CountUMIDForSame INT;                            \n" +
                "            			DECLARE v_StringUMIDForKit VARCHAR(10000);                        \n" +
                "            			DECLARE v_CountSameSalesOrder INT;                          \n" +
                "            			DECLARE v_PIDCode VARCHAR(100);                     \n" +
                "            			DECLARE v_RestricType VARCHAR(500);                        \n" +
                "            			DECLARE v_TransactionType VARCHAR(1000);                     \n" +
                "            			DECLARE v_RefTableName VARCHAR(255);                        \n" +
                "            			DECLARE v_ApproveFromPage VARCHAR(255);                        \n" +
                "            			DECLARE v_ApprovedBy VARCHAR(255);                        \n" +
                "            			DECLARE v_ConfirmationType INT;                        \n" +
                "            			DECLARE v_ApprovalReason TEXT;                        \n" +
                "            			DECLARE v_RefID INT;             \n" +
                "						DECLARE v_RoHSApprovalReason VARCHAR(1000);          \n" +
                "						DECLARE v_AllocationRemark VARCHAR(1000);          \n" +
                "  \n" +
                "            			DECLARE KitAllocationDetail_Cursor CURSOR FOR                                   \n" +
                "            			SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,                     \n" +
                "            					PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark                     \n" +
                "            			FROM 	tempKitAllocationDetail;                                   \n" +
                "  \n" +
                "            			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                      \n" +
                "            			OPEN KitAllocationDetail_Cursor;                                     \n" +
                "  \n" +
                "            			KitAllocationDetail_Loop:LOOP                                   \n" +
                "							FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,                     \n" +
                "            									v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;                                   \n" +
                "						IF exit_loop THEN                                                                                    \n" +
                "							LEAVE KitAllocationDetail_Loop;                                                                              \n" +
                "						END IF;              \n" +
                "  \n" +
                "  \n" +
                "				IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN            \n" +
                "					UPDATE 	kit_allocation                                  \n" +
                "							SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),                                 \n" +
                "								allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)                                 \n" +
                "							WHERE	id = v_KitAllocationId;         \n" +
                "				ELSE           \n" +
                "					INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)                                   \n" +
                "							VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,							                                          \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),          \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),          \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),      \n" +
                "							(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));                  \n" +
                "							SET v_RefID = LAST_INSERT_ID();     \n" +
                "					IF(IFNULL(v_RefID, \"\") != \"\") THEN              \n" +
                "						SET v_KitIds = (            \n" +
                "								SELECT 	CASE             \n" +
                "										WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN             \n" +
                "											v_RefID              \n" +
                "										ELSE             \n" +
                "											(SELECT CONCAT(v_KitIds, \",\", v_RefID))              \n" +
                "									END            \n" +
                "								);              \n" +
                "					END IF;              \n" +
                "					IF (v_RestricType IS NOT NULL) THEN                     \n" +
                "						INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)                     \n" +
                "						VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);                     \n" +
                "					END IF;            \n" +
                "  \n" +
                "				END IF;            \n" +
                "					END LOOP KitAllocationDetail_Loop;                                     \n" +
                "					CLOSE KitAllocationDetail_Cursor;     \n" +
                "					END block1;      \n" +
                "  \n" +
                "					INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(1, NULL, NULL, 0, v_KitIds);                                \n" +
                "					SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;     \n" +
                "            	ELSE                                 \n" +
                "            		SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName                          \n" +
                "            		FROM 	vu_salesorder_shipped_report                          \n" +
                "            		WHERE 	SalesOrderDetailId IN (                         \n" +
                "            				SELECT 	refSalesOrderDetID                          \n" +
                "            				FROM 	kit_allocation                          \n" +
                "            				WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)                         \n" +
                "            			);                         \n" +
                "            		INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(0, v_ConcateUMID, v_KitName, 1, v_KitIds);                                   \n" +
                "            		SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;                                 \n" +
                "            	END IF;                               \n" +
                "            END;  \n" +
                /* **************************** New Script -> 16-06-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1036,'1.00','V1','Bug 34965: [Main branch] When user tries to Allocate to many UMIDs from Available stock then it shows error - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1036:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(      \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),      \n" +
                "	IN pAssyId INT,      \n" +
                "	IN pPartId VARCHAR(255),      \n" +
                "	IN pToUOM INT,      \n" +
                "	IN pRfqLineItemIds VARCHAR(255),      \n" +
                "	IN pCustomerId INT,       \n" +
                "	IN pType VARCHAR(255),      \n" +
                "	IN pStockType VARCHAR(20)      \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "	DECLARE v_WhareClause VARCHAR(255);      \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);      \n" +
                "	DECLARE v_AssyId INT;      \n" +
                "	DECLARE v_IsPurchase TINYINT;      \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);      \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;      \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);      \n" +
                "	SET SESSION group_concat_max_len = 500000;      \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p')      \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN      \n" +
                "	FROM 	kit_allocation_lineitems      \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID      \n" +
                "			AND partID = pAssyId      \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)      \n" +
                "			AND isDeleted = 0      \n" +
                "	LIMIT 	1;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS      \n" +
                "	SELECT 		IFNULL(cp.id, c.id) AS mfrPNId      \n" +
                "	FROM 		component c      \n" +
                "	LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0      \n" +
                "	WHERE 		FIND_IN_SET(c.id, pPartId)      \n" +
                "				AND c.isDeleted = 0      \n" +
                "	GROUP BY 	mfrPNId;      \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;      \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS      \n" +
                "		SELECT 	*      \n" +
                "		FROM 	(      \n" +
                "				SELECT  	*      \n" +
                "				FROM 		(      \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,	   \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					fun_getUnitNameByID(cst.uom) unitName,  		  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,    \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,	 				  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,   \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,			  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,		  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,				  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,	  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,      \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,	    \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,      \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,      \n" +
                "									(      \n" +
                "										CASE      \n" +
                "											WHEN c.connecterTypeID = -2 THEN      \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))      \n" +
                "											ELSE 0      \n" +
                "										END      \n" +
                "									) allocatedPins,      \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,      \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,      \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,      \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,                                                     \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,                                                   \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,                            \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,        \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,	                                      \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                      \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,          \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                          \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,         \n" +
                "									0 lineCleanStatus       \n" +
                "							FROM 		component_sid_stock cst        \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id      \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id                               \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id   \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id   \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id   \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0                \n" +
                "							LEFT JOIN 	(                        \n" +
                "										SELECT 		ka.refUIDId,                                       \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                           \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit                          \n" +
                "										FROM 		kit_allocation ka          \n" +
                "										WHERE 		ka.status = 'A'                   \n" +
                "										GROUP BY 	ka.refUIDId                      \n" +
                "									) AS ka ON ka.refUIDId = cst.id                          \n" +
                "							LEFT JOIN	(                 \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  		                             \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a                                           \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id                                   \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID                                    \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                           \n" +
                "													AND a.partID = pAssyId                              \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                         \n" +
                "													AND a.isDeleted = 0             \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		                                                        \n" +
                "										UNION          \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  		                             \n" +
                "										FROM 		kit_allocation_lineitems a                                           \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID                           \n" +
                "													AND a.partID = pAssyId                              \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)                         \n" +
                "													AND a.isDeleted = 0             \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  		        \n" +
                "									) d ON d.mfgPNID = cst.refcompid                          \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                          \n" +
                "										AND (                          \n" +
                "											CASE                          \n" +
                "												WHEN pStockType = 'IS' THEN                          \n" +
                "													cst.customerConsign = 0                          \n" +
                "												WHEN pStockType = 'CS' THEN                          \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId                          \n" +
                "												ELSE                          \n" +
                "													1 = 1                          \n" +
                "											END                          \n" +
                "											)                          \n" +
                "										AND cst.isDeleted = 0                          \n" +
                "						) a    \n" +
                "						WHERE 		FreeToShare > 0                           \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid                                    \n" +
                "			) b;    \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS       \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS                          \n" +
                "		SELECT 		0 AS id,			'-' AS uid,				refcompid,			0 AS pkgQty, 		                                      \n" +
                "				'-' AS dateCode,   		'-' AS internalDateCodeInDate,		0 AS customerID,		0 AS binID, 	                                    \n" +
                "				0 AS salesOrderDetailID,	0 AS assyID,				'-' AS receiveMaterialType, 	0 AS customerConsign,	                                      \n" +
                "				c.uom,				c.packagingID packaging,		fromBin,			b.Name fromBinName,                                    \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		                          \n" +
                "				w.parentWHID fromDepartment,	fun_getWarehouseNameByID(w.parentWHID) fromDepartmentName,                                    \n" +
                "				0 AS pkgUnit,			c.PIDCode,				'-' nickName,			'-' AS customer,		                                      \n" +
                "				'-' AS assembly,		c.RoHSStatusID	rohsID,                          \n" +
                "				'-' AS assyRohsName,		'-' AS assyRohsIcon,			                          \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		                                      \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                            			                      \n" +
                "				'-' AS binName,			'-' AS warehouseName, 			'-' AS warehouseType,		'-' AS departmentName,	                      \n" +
                "				fun_getUnitNameByID(c.uom) unitName,					c.mfgPN,			pendingUMIDQty,                    \n" +
                "				0 AS convertedUnit,		0 currentPin,				'-' AS allocatedToKit,		                          \n" +
                "				0 AS allocatedQty,		0 AS allocatedUnit,			0 AS allocatedPins,		0 AS scrapedPins,                                      \n" +
                "				0 AS FreeToShare,		0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,		'-' costCategory, 			                                      \n" +
                "				c.isGoodPart,			c.restrictUsePermanently,		c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently, 	                                      \n" +
                "				c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,		0 AS restrictUseInBOMWithPermission,	        \n" +
                "				1 AS restrictUseInBOMExcluding,	0 AS restrictUseInBOMExcludingAliasWithPermission,			v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,        \n" +
                "				0 AS isUMIDRestrict,		fun_convertUOM(c.uom,pToUOM,c.unit) unit,				'-' customerApproveStatus,		                                      \n" +
                "				v_CustomerApprovalCPN customerApproveStatusCPN,				0 UMIDRohsStatusID,			'-' UMIDRohsStatus, 		              \n" +
                "				v_IsPurchase isPurchase, 	0 AS lineCleanStatus           \n" +
                "		FROM 		(                          \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty                          \n" +
                "					FROM 		vu_umid_creation_pending vu      \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID                          \n" +
                "				) vu                                    \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid                                    \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0                           \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0                                  \n" +
                "		WHERE 		-- c.id IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart) AND   \n" +
                "					pendingUMIDQty > 0;	                                \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN                          \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;                          \n" +
                "		ELSE                          \n" +
                "			SELECT 	*		                                  \n" +
                "			FROM 	(                                  \n" +
                "					SELECT  id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                    \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                  \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                      \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                    \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                  \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                    \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                    \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                    \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                  \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                            \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                            \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                    \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                    \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock                          \n" +
                "					UNION ALL                      \n" +
                "					SELECT 	id,				CAST(uid AS CHAR) uid,		refcompid,				pkgQty,				CAST(dateCode AS CHAR) dateCode, 				CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		                    \n" +
                "						customerID,			binID,				salesOrderDetailID,			assyID,				CAST(receiveMaterialType AS CHAR) receiveMaterialType, 		customerConsign,	                                  \n" +
                "						uom,				packaging,			fromBin,				fromBinName,			fromWarehouse,							fromWarehouseName,		                      \n" +
                "						fromDepartment,			fromDepartmentName,		pkgUnit,				PIDCode,			CAST(nickName AS CHAR) nickName,			                    \n" +
                "						CAST(customer AS CHAR) customer,				CAST(assembly AS CHAR) assembly,	rohsID,  			CAST(assyRohsName AS CHAR) assyRohsName,			assyRohsIcon,					rohsName, 		                                  \n" +
                "						CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,		CAST(warehouseName AS CHAR) warehouseName, 							CAST(warehouseType AS CHAR) warehouseType,	CAST(departmentName AS CHAR) departmentName,				                    \n" +
                "						unitName,			mfgPN,				pendingUMIDQty,				convertedUnit,			currentPin,							CAST(allocatedToKit AS CHAR) allocatedToKit,	allocatedQty,		                    \n" +
                "						allocatedUnit,			allocatedPins,			scrapedPins,          			FreeToShare,			kitAllocationId,						noOfPosition,		                    \n" +
                "						CAST(costCategory AS CHAR) costCategory,			isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,					restrictPackagingUsePermanently, 	                                  \n" +
                "						restrictPackagingUseWithpermission,				restrictUseInBOM,			restrictUseInBOMWithPermission,	                                                            \n" +
                "						restrictUseInBOMExcluding,					restrictUseInBOMExcludingAliasWithPermission,				restrictUseCPNInBOM,                                                            \n" +
                "						isUMIDRestrict,			unit,				CAST(customerApproveStatus AS CHAR) customerApproveStatus,		customerApproveStatusCPN,					UMIDRohsStatusID,			                    \n" +
                "						CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus, 			isPurchase,				lineCleanStatus                     \n" +
                "					FROM 	temp_nonUmidAvailableStock                                    \n" +
                "				) d;                                  \n" +
                "				-- ORDER BY internalDateCodeInDate IS NULL, internalDateCodeInDate, costCategory, uid;                            \n" +
                "		END IF;            \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN                  \n" +
                "		SELECT 		cst.id,			cst.uid,		cst.refcompid,			cst.pkgQty,		cst.dateCode, 	                                  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,		                                      \n" +
                "				cst.customerID,		cst.binID,		cst.salesOrderDetailID, 	cst.assyID,		cst.receiveMaterialType,                          \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,					                          \n" +
                "				cst.fromBin,		fun_getBinNameByID(cst.fromBin) fromBinName,                                    \n" +
                "				cst.fromWarehouse,	fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,               \n" +
                "				cst.fromDepartment,	fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                                      \n" +
                "				fun_getBinNameByID(cst.binID) binName,		cst.pkgUnit,		cst.nickName,			                                      \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,	fun_getWareHouseTypeByBinID(cst.binID) warehouseType,                                              \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	fun_getDepartmentTypeByBinID(cst.binID) departmentType,                     \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			                                              \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	fun_getAssyPIDCodeByID(cst.assyID) assembly,	                                      \n" +
                "				c.PIDCode,		c.mfgPN, 			c.RoHSStatusID rohsID,				                                             \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                           \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,                          \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,                          \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,                          \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,                                      \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,                                         \n" +
                "				v_NumOfPosition bomPin,                          \n" +
                "				c.noOfPosition,            \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                             \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,                                                  \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,        \n" +
                "				c.isCustom,                            \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                                                            \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                                                      \n" +
                "				c.isCustom,	cst.rohsStatusID UMIDRohsStatusID,                                                      \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,                                                \n" +
                "				ka.roHSApprovalReason,                                                \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy                                                \n" +
                "		FROM 		component_sid_stock cst                        \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid                                                \n" +
                "		LEFT JOIN 	(                          \n" +
                "					SELECT 		b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,                           \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,                          \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy                             \n" +
                "					FROM 		(                          \n" +
                "								SELECT 		refUIDId, partID, allocatedUOM, consumeUOM,                           \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,                           \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,                            \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,                          \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit                          \n" +
                "								FROM 		kit_allocation                           \n" +
                "								WHERE 		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                          \n" +
                "								GROUP BY 	refUIDId, partID, allocatedUOM, consumeUOM                          \n" +
                "							) a                          \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId AND (CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)                          \n" +
                " 				) ka ON ka.refUIDId = cst.id                         \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                                   \n" +
                "					AND ka.assyID = IFNULL(pAssyId,ka.assyID)                                \n" +
                "					AND ka.partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)                                  \n" +
                "					AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)         \n" +
                "					AND (                          \n" +
                "						CASE   \n" +
                "							WHEN pType = 'AllocatedStock' THEN                           \n" +
                "								ka.`status` = 'A'                           \n" +
                "							ELSE                           \n" +
                "								ka.`status` = 'R'                           \n" +
                "						END                          \n" +
                "					)                          \n" +
                "					AND cst.isDeleted = 0                          \n" +
                "		ORDER BY 	internalDateCodeInDate, costCategory, cst.uid;                               \n" +
                "	END IF;                           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;                 \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1037,'1.00','V1','Procedure tuning for Sproc_GetStockAllocateList - Dharmishtha '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1037:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCheckPrintAndRemittanceReport;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(      \n" +
                "	IN pPaymentID int      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,      \n" +
                "				pip.paymentAmount,      \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,      \n" +
                "				pip.payToAddress,      \n" +
                "				pip.billToName supplierName,      \n" +
                "                pip.billToAddress supplierAddress,      \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,      \n" +
                "                pip.bankAccountNo,      \n" +
                "                g.gencCategoryName paymentType      \n" +
                "		  from packingslip_invoice_payment pip      \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1      \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType      \n" +
                "		 where pip.isDeleted = 0      \n" +
                "			and pip.refPaymentMode = 'P'      \n" +
                "		   and pip.id = pPaymentID;      \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,      \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "						WHEN p.`receiptType` = 'C' THEN      \n" +
                "							p.creditMemoNumber      \n" +
                "						ELSE      \n" +
                "							p.debitMemoNumber      \n" +
                "					END) invoiceNumber,      \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN      \n" +
                "							p.invoiceNumber      \n" +
                "				else      \n" +
                "					(SELECT 	ps.invoiceNumber      \n" +
                "					FROM 	packing_slip_material_receive ps      \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno      \n" +
                "							AND ps.isDeleted = 0  )      \n" +
                "				end                          \n" +
                "				) refInvoiceNumber,                          \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN                          \n" +
                "							p.invoiceDate                          \n" +
                "						WHEN p.`receiptType` = 'C' THEN                          \n" +
                "							p.creditMemoDate                          \n" +
                "						ELSE                          \n" +
                "							p.debitMemoDate                          \n" +
                "					END) invoiceDate,                          \n" +
                "  \n" +
                "				null `description`,                          \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/            \n" +
                "                pd.paymentAmount extendedPrice,            \n" +
                "				0 discount,                          \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN                          \n" +
                "							'Invoice'                          \n" +
                "						WHEN p.`receiptType` = 'C' THEN                          \n" +
                "							'Credit Memo'                          \n" +
                "						ELSE                          \n" +
                "							'Debit Memo'                          \n" +
                "					END) receiptMemoType                          \n" +
                "			FROM packing_slip_material_receive p                          \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id                      \n" +
                "			WHERE /*p.isDeleted =0                          \n" +
                "			and*/ p.receiptType in ('I','C','D')                      \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)          \n" +
                "			/*and p.`status` = 'P'*/                      \n" +
                "			and pd.refPayementid = pPaymentID              \n" +
                "            order by invoiceDate, invoiceNumber;         \n" +
                "  \n" +
                "		SELECT concat(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,                    \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,                    \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, (select `name` from company_info where isDeleted = 0 ) companyName                          \n" +
                "		FROM customer_addresses cua                                                    \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId                                                    \n" +
                "        join countrymst c ON c.countryID = cua.countryID                        \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;                                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1038,'1.00','V1','Sproc_GetCheckPrintAndRemittanceReport - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1038:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCompanyReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN            \n" +
                "	# Company detail for Report                          \n" +
                "	SELECT CONCAT('S & M Group, Inc. d/b/a,','<br/>',  \n" +
                "				(select `name` from company_info where isDeleted = 0) ,  \n" +
                "				'<br/>',cua.street1,'<br/>',cua.city,', ',cua.state,' ',cua.postcode,', ',IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',cua.email,'<br/>','Phone: ',        \n" +
                "				cua.contact,'<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(cua.faxNumber,''))AS address,              \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
                "				'' AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,            \n" +
                "		ci.ein, ci.remittanceAddress             \n" +
                "	FROM customer_addresses cua                                  \n" +
                "	JOIN mfgcodemst cu ON cu.id = cua.customerId            \n" +
                "	JOIN company_info ci ON ci.mfgCodeId = cu.id                 \n" +
                "	LEFT JOIN countrymst c ON cua.countryID=c.countryID                                 \n" +
                "	WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1      \n" +
                "	 AND cua.isDeleted = 0 AND ci.isDeleted=0 AND cu.isDeleted=0;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1039,'1.00','V1','Sproc_GetCompanyReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1039:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(                                                                                                            \n" +
                "	IN pPackingSlipNumber VARCHAR(100)                                    \n" +
                ")  \n" +
                "BEGIN                                           \n" +
                "	DECLARE v_CountOfPSRecord INT;                                     \n" +
                "        DECLARE v_CountOfSIRecord INT;                                    \n" +
                "        DECLARE v_StringOfMFGCode VARCHAR(255);                                    \n" +
                "        DECLARE Status_Check TINYINT;                                    \n" +
                "	DECLARE vPackingSlipId INT;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;                                                                                                               \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error                                                        \n" +
                "	(                                                                                                              \n" +
                "		IsSuccess BOOLEAN,                                    \n" +
                "		Error VARCHAR(1000)                                       \n" +
                "	);                                                         \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord                                         \n" +
                "	FROM 	customer_packingslip                                         \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber                                      \n" +
                "			AND transType = 'P'                                      \n" +
                "			AND deletedAt IS NULL;                                        \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN                                        \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));                                        \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                        \n" +
                "	ELSE                                      \n" +
                "  \n" +
                "		SELECT 	refCustInvoiceID, GROUP_CONCAT(fullCustCode),`subStatus` ,id                            \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId                                      \n" +
                "		FROM 	(                                        \n" +
                "				SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(customerID) fullCustCode,`subStatus`,refCustInvoiceID                                        \n" +
                "				FROM 	customer_packingslip                                         \n" +
                "				WHERE 	packingSlipNumber = pPackingSlipNumber                                     \n" +
                "						AND transType = 'P'                                     \n" +
                "						AND isDeleted =0                                     \n" +
                "		) a;                                     \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */                              \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));                                        \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                        \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN                                    \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));                                        \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                     \n" +
                "			ELSE                                    \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');                                        \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                     \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,                            \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,                            \n" +
                "                customerID,                            \n" +
                "                    id AS packingSlipID,                            \n" +
                "                    poNumber, poDate,poRevision,                                  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,                            \n" +
                "                    packingSlipType,                       \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,                      \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,                                          \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,                            \n" +
                "                    shipToId, billToId ,                            \n" +
                "                    freeOnBoardId,salesCommissionTo,                            \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,                            \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  						                          \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,                            \n" +
                "                    contactPersonId,                            \n" +
                "                    intermediateShipmentId ,                            \n" +
                "                    billingAddress,                            \n" +
                "                    shippingAddress,                            \n" +
                "                    intermediateAddress,                      \n" +
                "                    packingSlipComment,              \n" +
                "                    headerComment,      \n" +
                "                    revision packingSlipVersion      \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber                                     \n" +
                "						AND transType = 'P'                                    \n" +
                "						AND isDeleted = 0 ;                                       \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,        \n" +
                "						cpd.refSalesorderDetid,        \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,        \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,        \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,        \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,        \n" +
                "                        cpd.partId,cpd.refChargesTypeID,                                  \n" +
                "					(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,                                \n" +
                "						cpd.shipQty,        \n" +
                "						IF(cp.packingSlipType = 2 ,sod.price, cpd.unitPrice) unitPrice,              \n" +
                "						cpd.assyDescription,              \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,              \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,              \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,                        \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,                        \n" +
                "						(IFNULL(cpd.shipQty,0)* IF(cp.packingSlipType = 2 ,sod.price,IFNULL(cpd.unitPrice,0))) extPrice,                         \n" +
                "						cpd.otherCharges AS lineOtherCharges,                                \n" +
                "						0 totalExtPrice ,             \n" +
                "						1 isFromPackingSlip,            \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) quoteFrom,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,            \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,         \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,            \n" +
                "						(CASE 	WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 1 THEN 'From RFQ'         \n" +
                "								WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 3 THEN 'N/A'         \n" +
                "                                WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 2 THEN 'From Part Master' ELSE '' END) quoteFromText             \n" +
                "				 FROM customer_packingslip_det cpd         \n" +
                "                 LEFT JOIN customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and cp.isDeleted = 0  and cp.transType = 'P'      \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0        \n" +
                "                 WHERE cpd.isDeleted=0                        \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber      \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;                                   \n" +
                "  \n" +
                "                -- get other charges                        \n" +
                "                -- 1, Every 2 First 3 Last                        \n" +
                "			  SELECT dtl.refCustPackingSlipID ,                         \n" +
                "					 dtl.refSalesorderDetid,                                             \n" +
                "                     dtl.remainingQty,                         \n" +
                "                     sother.partID,                        \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,                        \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,                        \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,                         \n" +
                "                     sother.price ,                         \n" +
                "                     sother.qty,                        \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,                          \n" +
                "                     sother.frequency,           \n" +
                "                      sother.lineComment,           \n" +
                "                       sother.lineInternalComment,                        \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'                                                                                                           \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'                                 \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'                                 \n" +
                "							ELSE ''                                                                       \n" +
                "						END) AS frequencyName                           \n" +
                "				FROM (                        \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM                \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,                        \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'                        \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'                        \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'                         \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency                         \n" +
                "						FROM (                        \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,                         \n" +
                "								cpd2.remainingQty,cpd2.shippingId,                           \n" +
                "                                cpd2.partID,                        \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex                        \n" +
                "							FROM customer_packingslip_det cpd1                         \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0                        \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId                        \n" +
                "                            AND cpd1.isDeleted = 0                        \n" +
                "						) AS a                \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency                       \n" +
                "				) AS dtl                        \n" +
                "				JOIN salesorder_otherexpense_details sother                         \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0                        \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)                         \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;                        \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number                            \n" +
                "                SELECT trackNumber                             \n" +
                "                FROM customer_packing_slip_track_number                            \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId                            \n" +
                "                AND isDeleted = 0;                            \n" +
                "			END IF;                                    \n" +
                "	END IF;                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1040,'1.00','V1','Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1040:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCreditMemoReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                          \n" +
                "	IN cpID INT                          \n" +
                ")  \n" +
                "BEGIN	                          \n" +
                "   # Customer Invoice Master table details                           \n" +
                "   SELECT  cp.id,                           \n" +
                "			cp.invoiceNumber,                          \n" +
                "			cp.invoiceDate,              \n" +
                "            cp.creditMemoNumber,              \n" +
                "            cp.creditMemoDate,              \n" +
                "            cp.refDebitMemoNumber,              \n" +
                "            refDebitMemoDate,                              \n" +
                "			cp.poNumber,                                 \n" +
                "			cp.poDate,                \n" +
                "			mg.customerSystemID,                \n" +
                "			mg.accountRef,              \n" +
                "			cp.status,                       \n" +
                "			cp.billingAddress,               \n" +
                "			cp.shippingAddress,                \n" +
                "            cp.packingSlipComment,                \n" +
                "            cp.rmaNumber,              \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                            \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                  \n" +
                "			cp.systemID AS legalnumber,                  \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                    \n" +
                "			us.emailAddress,                \n" +
                "			emp.phExtension,    \n" +
                "            '1.00' docNumber    \n" +
                "		FROM customer_packingslip cp                 \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                          \n" +
                "                LEFT JOIN                                \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                           \n" +
                "        AND gcs.isDeleted = 0                               \n" +
                "           LEFT JOIN                                \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                           \n" +
                "        AND gcp.isDeleted = 0                             \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                           \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0     \n" +
                "    and transType='C'    \n" +
                "    LIMIT 1;                           \n" +
                "  \n" +
                "	# Customer Invoice line level details                           \n" +
                "	SELECT                            \n" +
                "		cpd.id,                                \n" +
                "		cpd.partId,                      \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                       \n" +
                "		cpd.lineID,               \n" +
                "        cpd.reflineID,            \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                             \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                          \n" +
                "		  WHEN (c.iscustom=1) THEN                           \n" +
                "			c.custAssyPN                          \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                           \n" +
                "			c.mfgPN                           \n" +
                "        ELSE                                                                   \n" +
                "			  ''                                                  \n" +
                "			END) AS mfgPN ,                          \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                               \n" +
                "			'Other Charges'                                \n" +
                "		ELSE                                                                   \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                  \n" +
                "			END) AS  mfgName,                          \n" +
                "		IFNULL(c.rev, '') AS revision,                          \n" +
                "		(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                             \n" +
                "			'EA'                          \n" +
                "		ELSE           \n" +
                "			fun_getUOMAbbreviationByID(c.uom)          \n" +
                "        END) AS uom,                          \n" +
                "		cpd.shipQty AS qty,                           \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                          \n" +
                "		IFNULL(cpd.extendedPrice,0) AS extPrice,                \n" +
                "		CONCAT(IFNULL(replace(cpd.assyDescription,'\n','<br/>'), ''),'<br/>',                               \n" +
                "            IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                 \n" +
                "            IFNULL(CONCAT(', ',                                  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                  \n" +
                "                    ''),                  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',        \n" +
                "            IFNULL(replace(cpd.shippingNotes,'\n','<br/>'),'')) AS description                 \n" +
                "  \n" +
                "	FROM                                \n" +
                "		customer_packingslip_det cpd                               \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                \n" +
                "	WHERE                                \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID ORDER BY reflineID ASC;                           \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                           \n" +
                "    SELECT                                        \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                           \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                       \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 AND cp.refChargesTypeID IS NULL) totalLinePrice,              \n" +
                "			(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                           \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice                          \n" +
                "		FROM customer_packingslip_det cpd                               \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                            \n" +
                "		AND cpd.isdeleted=0;             \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                  \n" +
                "                IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,        \n" +
                "                IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalCIOMiscPrice,0),0) totalCIPrice FROM tempTotalPrice LIMIT 1;             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1041,'1.00','V1','Sproc_GetCreditMemoReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1041:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(                                      \n" +
                "	IN cpID INT                                      \n" +
                ")  \n" +
                "BEGIN	                                      \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);            \n" +
                "    # Customer Invoice Master table details                                       \n" +
                "    SELECT  cp.id,                                      \n" +
                "		cp.invoiceNumber,                                      \n" +
                "        cp.invoiceDate,                                      \n" +
                "		cp.packingSlipNumber,                                            \n" +
                "		cp.packingSlipDate,                                            \n" +
                "		cp.poDate,                                            \n" +
                "		cp.poNumber,                      \n" +
                "        cp.poRevision,            \n" +
                "		mg.customerSystemID,                            \n" +
                "		mg.accountRef,                           \n" +
                "		cp.packingSlipComment,                                     \n" +
                "        cp.status,                                      \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '                          \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,                                    \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,                                      \n" +
                "        cp.billingAddress,                                      \n" +
                "        cp.shippingAddress,                            \n" +
                "        cp.intermediateAddress,                                      \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,                                      \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                        \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                       \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,                                      \n" +
                "        cp.systemID AS legalnumber,                    \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,                                      \n" +
                "		us.emailAddress,                                      \n" +
                "		emp.phExtension,          \n" +
                "        cp.revision invoiceVersion,      \n" +
                "        '1.00' AS docNumber,    \n" +
                "        subStatus    \n" +
                "		FROM customer_packingslip cp                             \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID                                      \n" +
                "                LEFT JOIN                                            \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId                                       \n" +
                "        AND gcs.isDeleted = 0                                           \n" +
                "           LEFT JOIN                                            \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID                                       \n" +
                "        AND gcp.isDeleted = 0                                         \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy                                              \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                                       \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;                                       \n" +
                "  \n" +
                "	# Customer Invoice line level details                                       \n" +
                "	SELECT                                        \n" +
                "		cpd.id,                                            \n" +
                "		cpd.partId,                                  \n" +
                "		cpd.id AS refCustomerPackingSlipDetID,                                   \n" +
                "		cpd.lineID,               \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,              \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,                                   \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                         \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                                      \n" +
                "		  WHEN (c.iscustom=1) THEN                                       \n" +
                "			c.custAssyPN                                      \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                                       \n" +
                "			c.mfgPN                                       \n" +
                "        ELSE                                                                               \n" +
                "			  ''                                                              \n" +
                "			END) AS mfgPN ,                                      \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN                                           \n" +
                "			'Other Charges'                                            \n" +
                "		ELSE                                                                               \n" +
                "			fun_getMfgNameByPartID(cpd.partId)                                                              \n" +
                "			END) AS  mfgName,                                      \n" +
                "		IFNULL(c.rev, '') AS revision,                                      \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,                                      \n" +
                "		cpd.shipQty AS qty,                                       \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,                                      \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,                            \n" +
                "		CONCAT(                      \n" +
                "		IFNULL(replace(cpd.assyDescription,'\n','<br/>'), ''),'<br/>',                                           \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                              \n" +
                "                IFNULL(CONCAT(', ',                                              \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),                                              \n" +
                "                    ''),                              \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                              \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),              \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,                          \n" +
                "            IFNULL(replace(cpd.shippingNotes,'\n','<br/>'),'')) AS DESCRIPTION                         \n" +
                "  \n" +
                "	FROM                                            \n" +
                "		customer_packingslip_det cpd               \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0                                               \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                             \n" +
                "	WHERE                                            \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;                                       \n" +
                "  \n" +
                "	SELECT  get_totalCustomerInvoiceReceivedAmountById(cpID) into vReceivedAmt;            \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                       \n" +
                "    SELECT                                                    \n" +
                "			(SELECT SUM(cp.shipQty * cp.unitPrice) FROM customer_packingslip_det cp                                       \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId                                       \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isdeleted=0 AND c.partType != 4 AND cp.refChargesTypeID IS NULL) totalLinePrice,                                            \n" +
                "			(SELECT SUM(cpod.qty * cpod.price) FROM customer_packingslip_otherexpense_details cpod WHERE cpod.refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipId = cpID AND isDeleted = 0) AND cpod.isdeleted=0) totalLineMiscPrice,                                                \n" +
                "			(SELECT SUM(cpp.shipQty * cpp.unitPrice) FROM customer_packingslip_det cpp                                       \n" +
                "				LEFT JOIN COMPONENT cm ON cm.id = cpp.partId                                       \n" +
                "				WHERE cpp.refCustPackingSlipID=cpID AND cpp.isdeleted=0 AND cm.partType = 4) totalCPMiscPrice,                                      \n" +
                "			(SELECT SUM(csp.shipQty * csp.unitPrice) FROM customer_packingslip_det csp                                       \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.isdeleted=0 AND csp.refChargesTypeID IS NOT NULL) totalCIOMiscPrice                                      \n" +
                "		FROM customer_packingslip_det cpd                                           \n" +
                "		WHERE cpd.refCustPackingSlipID= cpID                                        \n" +
                "		AND cpd.isdeleted=0;                                            \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                                        \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                                        \n" +
                "                IFNULL((IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIMiscPrice,                  \n" +
                "                IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) totalCIPrice,            \n" +
                "                vReceivedAmt totalRecvAmt,            \n" +
                "                (IFNULL((IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalCPMiscPrice,0)+IFNULL(totalCIOMiscPrice,0)),0) - ifnull(vReceivedAmt,0)) totalBalAmt            \n" +
                "                FROM tempTotalPrice LIMIT 1;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1042,'1.00','V1','Sproc_GetCustomerInvoiceReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1042:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(                                        \n" +
                "	IN cpid INT                                        \n" +
                ")  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	SELECT                                     \n" +
                "    cp.id,                                \n" +
                "    cp.status,                       \n" +
                "    cp.packingSlipType,                      \n" +
                "    cp.packingSlipNumber AS PackingSlip,                                    \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                                    \n" +
                "    cp.poDate AS PODate,                                    \n" +
                "    cp.soNumber AS SalesOrderNumber,                                    \n" +
                "    cp.poNumber AS PONumber,                \n" +
                "    cp.packingSlipComment,                                    \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,                                    \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,                                    \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,                                \n" +
                "    cp.soDate AS SODate,                                    \n" +
                "    cp.sorevision AS SORevision,                                    \n" +
                "	cp.billingAddress AS SoldToAddress,                              \n" +
                "	cp.shippingAddress AS ShippingAddress,                     \n" +
                "	cp.intermediateAddress AS IntermediateAddress,                       \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,                              \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,      \n" +
                "    cp.revision packingSlipVersion  ,    \n" +
                "    '1.00' docNumber    \n" +
                "FROM                                    \n" +
                "    customer_packingslip cp                           \n" +
                "        LEFT JOIN                                    \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID                                    \n" +
                "        AND sm.isDeleted = 0                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId                                    \n" +
                "        AND gc.isDeleted = 0                                    \n" +
                "        AND gc.categoryType = 'Shipping Methods'                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID                                    \n" +
                "        AND gcc.isDeleted = 0                                    \n" +
                "        AND gcc.categoryType = 'Payment Terms'                                  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy                                        \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID                                 \n" +
                "WHERE                                    \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid                                    \n" +
                "LIMIT 1;                                    \n" +
                "  \n" +
                "SELECT                                     \n" +
                "	cpd.lineID AS PSLine,                              \n" +
                "    cpd.id AS cpDetID,        \n" +
                "    ss.releaseNumber,                              \n" +
                "    cpd.refCustPackingSlipID AS cpID,                               \n" +
                "    cpd.partId,                              \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,                                \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,                                \n" +
                "    cpd.custPOLineID AS POLine,                        \n" +
                "    cpd.shippingNotes AS ShippingComment,                        \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN                              \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                              \n" +
                "		WHEN (c.iscustom = 1) THEN                              \n" +
                "		c.custAssyPN                              \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN                              \n" +
                "		c.mfgPN                              \n" +
                "		ELSE                              \n" +
                "		''                              \n" +
                "	END) AS PartNumber,                \n" +
                "	CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,                                 \n" +
                "    IFNULL(c.rev, '') AS Revision,                               \n" +
                "    c.partType,                              \n" +
                "    CONCAT(IFNULL(Replace(cpd.assyDescription,'\n','<br/>'), ''), '<br/>',                                 \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),                                    \n" +
                "            IFNULL(CONCAT(', ',                                    \n" +
                "                            cpd.standrads),                                    \n" +
                "                    ''),                                    \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),                                    \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                    \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton                                    \n" +
                "FROM                                    \n" +
                "    customer_packingslip_det cpd                              \n" +
                "        LEFT JOIN                                    \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id                                    \n" +
                "        AND cp.isDeleted = 0                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    component c ON c.id = cpd.partid                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID                                    \n" +
                "        AND sd.isDeleted = 0                                   \n" +
                "        LEFT JOIN                                   \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID         \n" +
                "    LEFT JOIN        \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId     	                              \n" +
                "        LEFT JOIN                                    \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                                    \n" +
                "        AND ra.partID = cpd.partId                                    \n" +
                "        LEFT JOIN                                    \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                               \n" +
                "WHERE                            \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID; 	 		                                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1043,'1.00','V1','Sproc_GetCustomerPackingslipReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1043:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetPackingSlipAssemblyDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(                        \n" +
                "	IN partID INT ,                            \n" +
                "	IN cpID INT                             \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "	# COFC Report Header details                    \n" +
                "	SELECT                                 \n" +
                "    cp.id,                    \n" +
                "    cp.packingSlipNumber AS PackingSlip,                              \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                              \n" +
                "    cp.soNumber AS SalesOrderNumber,                              \n" +
                "    cp.poNumber AS PONumber,                             \n" +
                "	 cp.soDate AS SODate,                                \n" +
                "    cp.sorevision AS SORevision,                            \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                              \n" +
                "    (select initialName from employees emp         \n" +
                "		join department dept on dept.deptMngrId = emp.id  and dept.isDeleted = 0 and dept.deptID = -1) AS DepartmentName,                              \n" +
                "    'Paul Khunt' AS ManagerName                              \n" +
                "FROM                              \n" +
                "    customer_packingslip cp                          \n" +
                "        LEFT JOIN                              \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                              \n" +
                "        AND mfg.isDeleted = 0                              \n" +
                "WHERE                              \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID                      \n" +
                "LIMIT 1;                              \n" +
                "  \n" +
                "  # COFC Report Table details                            \n" +
                "	SELECT                           \n" +
                "    cpd.id AS cpDetID,                        \n" +
                "	cpd.custPOLineID AS POLine,              \n" +
                "	ss.releaseNumber,                                 \n" +
                "	cpd.lineID AS PSLine,                            \n" +
                "    sum(CASE WHEN (c.partType = 3 or  (c.partType = 2 and cpd.componentStockType = 1)) THEN sa.shippedqty     \n" +
                "					ELSE cpd.shipQty END) AS ShippedQty,                               \n" +
                "    cpd.poQty AS OrderQty,                              \n" +
                "     (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                              \n" +
                "	WHEN (c.iscustom = 1) THEN c.custAssyPN                              \n" +
                "	WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN c.mfgPN                              \n" +
                "	ELSE '' END) AS PartNumber,                            \n" +
                "    IFNULL(c.rev, '') AS Revision,                              \n" +
                "    ifnull(sa.woNumber,'N/A') AS WorkOrderNumber,                                   \n" +
                "      (CASE WHEN sa.woNumber IS NOT NULL THEN fun_getCertificationByWoNumber(sa.woNumber) 		        \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) AND cpd.standrads IS NULL THEN 'N/A'        \n" +
                "        ELSE cpd.standrads END) AS Standards,        \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,    	                \n" +
                "     CONCAT(IFNULL(Replace(cpd.assyDescription,'\n','<br/>'), ''), '<br/>',                                   \n" +
                "            IFNULL(CONCAT(' ', rr.name), '')) AS Descripton ,                  \n" +
                "     c.partType,                                   \n" +
                "   (case when sa.woNumber is not null then (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1)         \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN 'Per Part Label'        \n" +
                "        else 'N/A'end) AS DateCode,       \n" +
                "     (case when sa.workorderID is not null then wo.dateCodeFormat         \n" +
                "		WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN ''        \n" +
                "        when sa.stockType = 'OS' then 'WWYY'                 \n" +
                "        else '' end) AS DateCodeFormat  ,      \n" +
                "        c.RoHSStatusID      \n" +
                "FROM  	customer_packingslip_det cpd                              \n" +
                "		INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0                \n" +
                "		LEFT JOIN  salesshippingmst ss ON ss.shippingID=cpd.shippingId                       \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0                      \n" +
                "        LEFT JOIN workorder wo ON wo.woID = sa.workorderID and sa.isDeleted = 0         \n" +
                "		LEFT JOIN  rfq_rohsmst rr ON rr.id = c.rohsStatusID and rr.isDeleted = 0      \n" +
                "WHERE                              \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID                       \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber,cpd.poQty;                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1044,'1.00','V1','Sproc_GetPackingSlipAssemblyDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1044:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetPurchaseOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(                        \n" +
                "	IN pid INT                        \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "  \n" +
                "    # Purchase Order Master details                        \n" +
                "    SELECT  po.id,                         \n" +
                "		po.status,                        \n" +
                "		po.poNumber,                        \n" +
                "        po.poRevision,                        \n" +
                "        po.poDate,         \n" +
                "        po.poWorkingStatus,                       \n" +
                "        po.supplierAddress,                        \n" +
                "		po.shippingAddress,                 \n" +
                "        po.intermediateAddress,                \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                          \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                        \n" +
                "        po.shippingInsurance,                        \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,                        \n" +
                "        po.poComment,                        \n" +
                "        po.serialNumber,                       \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                        \n" +
                "		us.emailAddress,                        \n" +
                "		emp.phExtension  ,    \n" +
                "        '1.00' AS docNumber    \n" +
                "	FROM purchase_order_mst po                        \n" +
                "         INNER JOIN                              \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID                              \n" +
                "        AND gcs.isDeleted = 0                              \n" +
                "        INNER JOIN                              \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID                              \n" +
                "        AND gcp.isDeleted = 0                        \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy                                \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID                          \n" +
                "        WHERE po.isDeleted = 0 AND po.id = pid;                        \n" +
                "  \n" +
                "	# Purchase Order Line details                        \n" +
                "    SELECT  pod.lineID,                        \n" +
                "		pod.id AS pODetID,                        \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,                \n" +
                "		(CASE WHEN (c.iscustom=1) THEN                             \n" +
                "			c.custAssyPN                            \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                             \n" +
                "			c.mfgPN                             \n" +
                "        ELSE ''  END) AS mfgPN ,                      \n" +
                "        IFNULL(c.rev, '') AS revision,                        \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,                        \n" +
                "		pod.supplierQuoteNumber,                        \n" +
                "        pod.internalRef,                        \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,                        \n" +
                "        pod.qty,                        \n" +
                "        'EA' uom,                        \n" +
                "        pod.price,      \n" +
                "        (SELECT SUM(IFNULL(pold.receivedQty,0)) FROM purchase_order_line_release_det pold WHERE pold.isdeleted=0 AND pold.refPurchaseOrderDetID=pod.id) receivedQty,         \n" +
                "       fun_getMFGPNByID(pod.supplierPartID) supplierPN,                         \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,               \n" +
                "        CONCAT(IFNULL(replace(pod.partDescription,'\n','<br/>'), ''),CASE WHEN (fun_getCertificationByPartID(pod.mfgPartID) IS NULL AND c.htsCode IS NULL AND c.countryOfOrigin IS NULL) THEN '' ELSE '<br/>' END,               \n" +
                "            IFNULL(CONCAT(                                        \n" +
                "                            fun_getCertificationByPartID(pod.mfgPartID)),                                        \n" +
                "                    ''),                        \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                        \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                      \n" +
                "        pod.lineComment                        \n" +
                "	 FROM purchase_order_det pod                        \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)                         \n" +
                "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid                         \n" +
                "	 ORDER BY pod.lineID ASC;	                        \n" +
                "  \n" +
                "	# Get purchase order Total Price table details                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS SELECT                                   \n" +
                "		(SELECT SUM(pud.qty * pud.price) FROM purchase_order_det pud                       \n" +
                "				INNER JOIN component cm ON cm.id = pud.mfgPartID                        \n" +
                "				WHERE pud.refPurchaseOrderID=pid AND pud.isdeleted=0 AND cm.partType <> 4) totalLinePrice ,                            \n" +
                "		(SELECT SUM(pod.qty * pod.price) FROM purchase_order_line_othercharges pod WHERE pod.refPurchaseOrderDetID IN (SELECT p.id FROM purchase_order_det p WHERE p.refPurchaseOrderID=pid AND p.isDeleted=0 ) AND pod.isdeleted=0) totalLineMiscPrice,                                \n" +
                "		(SELECT SUM(ppd.qty * ppd.price) FROM purchase_order_det ppd                         \n" +
                "				INNER JOIN component c ON c.id = ppd.mfgPartID                        \n" +
                "				WHERE ppd.refPurchaseOrderID=pid AND ppd.isdeleted=0 AND c.partType = 4) totalPOMiscPrice                                \n" +
                "		FROM purchase_order_det pd                           \n" +
                "		WHERE pd.refPurchaseOrderID= pid                        \n" +
                "		AND pd.isdeleted=0;                 \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                        \n" +
                "				IFNULL(totalLineMiscPrice,0) totalLineMiscPrice,                        \n" +
                "                IFNULL(totalPOMiscPrice,0) totalPOMiscPrice,                   \n" +
                "				IFNULL(IFNULL(totalLinePrice,0)+IFNULL(totalLineMiscPrice,0)+IFNULL(totalPOMiscPrice,0),0) totalPOPrice FROM tempTotalPrice LIMIT 1;                                 \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice; 	                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1045,'1.00','V1','Sproc_GetPurchaseOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1045:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-06-2021  *********************************** */
                "drop procedure if exists Sproc_GetSalesOrderReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(	                                                \n" +
                "	IN pid INT(11)                                      \n" +
                "    )  \n" +
                "BEGIN                                                \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,                                        \n" +
                "		sm.soDate,                                              \n" +
                "		sm.status,                  \n" +
                "		sm.shippingComment,                                              \n" +
                "		mfg.mfgName AS customer,                                              \n" +
                "		gctsm.gencCategoryName AS shippingMethod,                                              \n" +
                "		gctpm.gencCategoryName AS paymentMethod,                    \n" +
                "		-- get intermediate shipment address                    \n" +
                "		CASE                                               \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN                                                      \n" +
                "	(                                                      \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                              \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                           \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                   \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                   \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                          \n" +
                "	FROM customer_addresses ca                                                          \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                          \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0                                                       \n" +
                "	) END AS intermediateShippingAddress,                    \n" +
                "  \n" +
                "        -- get shipping detils of customer                                                       \n" +
                "        CASE                                               \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN                                                      \n" +
                "	(                                                      \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),                                              \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                           \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),                                   \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                   \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                          \n" +
                "	FROM customer_addresses ca                                                          \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID                                                          \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'                                                       \n" +
                "	) END AS shippingAddress,                                              \n" +
                "	-- get billing Address                                              \n" +
                "	CASE                                               \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN                                                      \n" +
                "	(                                                      \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                           \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),                                  \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),                                   \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),                                  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))                                                          \n" +
                "	FROM customer_addresses ca                                                          \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID                                                          \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'                                                     \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,                                 \n" +
                "    '1.00' docNumber    \n" +
                "  \n" +
                "	FROM salesordermst sm                                                \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)                                              \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)                                                \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0                                  \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId                                    \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo                                            \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);                                            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT                       \n" +
                "    sd.lineID,                      \n" +
                "    c.PIDCode,                      \n" +
                "    sd.id AS sDetID,                      \n" +
                "    (CONCAT(CASE                      \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN                      \n" +
                "        ELSE c.custAssyPN                      \n" +
                "    END)) mfgPN,                      \n" +
                "    c.rev revision,               \n" +
                "    CONCAT(IFNULL(replace(sd.partDescription,'\n','<br/>'), ''), '<br/>',                                 \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),                                    \n" +
                "            IFNULL(CONCAT(', ',                                    \n" +
                "                            fun_getCertificationByPartID(sd.partID)),                                    \n" +
                "                    ''),                                    \n" +
                "            IFNULL(CONCAT(', Quote#', CASE                      \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                      \n" +
                "        ELSE sd.quoteNumber                      \n" +
                "    END), ''),                                    \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                    \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,                     \n" +
                "    sd.qty,                      \n" +
                "    sd.price,                      \n" +
                "    sd.qty * sd.price AS extPrice,                      \n" +
                "    sd.materialTentitiveDocDate,                  \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,                     \n" +
                "    CASE                      \n" +
                "        WHEN sd.partCategory = 2 THEN NULL                      \n" +
                "        ELSE sd.shippingQty                      \n" +
                "    END shippingQty,                      \n" +
                "    ro.rohsIcon AS rohsIcon,                      \n" +
                "    ro.name AS rohsStatus,                      \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,                      \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,      \n" +
                "    su.emailAddress,                      \n" +
                "    sd.custPOLineNumber,                      \n" +
                "    CASE                      \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber                      \n" +
                "        ELSE sd.quoteNumber                      \n" +
                "    END quoteNumber,                      \n" +
                "    sd.remark,                      \n" +
                "    emp.phExtension,                \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser                      \n" +
                "FROM                      \n" +
                "    salesorderdet sd                      \n" +
                "        JOIN                      \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id                      \n" +
                "        AND sm.deletedAt IS NULL)                      \n" +
                "        JOIN                      \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)                      \n" +
                "        JOIN                      \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id                      \n" +
                "        AND ro.deletedAt IS NULL)                      \n" +
                "        LEFT JOIN                      \n" +
                "    users su ON su.id = sm.updatedBy                      \n" +
                "        LEFT JOIN                      \n" +
                "    employees emp ON emp.id = su.employeeID                      \n" +
                "        LEFT JOIN                      \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID                      \n" +
                "        LEFT JOIN                      \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id                      \n" +
                "        AND ra.partID = sd.partID                      \n" +
                "        LEFT JOIN                      \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id                      \n" +
                "WHERE                      \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)                      \n" +
                "        AND sm.id = pid                      \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;	                                  \n" +
                "  \n" +
                "        -- get salesorder level total details for                                  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                                  \n" +
                "	SELECT SUM(sd.qty * sd.price) totalLinePrice,                                  \n" +
                "	(SELECT SUM(sod.qty * sod.price) FROM salesorder_otherexpense_details sod WHERE sod.refSalesOrderDetID IN (SELECT s.id FROM salesorderdet s JOIN component c ON c.id=s.partID AND c.isdeleted=0 WHERE s.refsalesorderID=pid              \n" +
                "                	AND s.isDeleted=0 ) AND sod.isdeleted=0) totalLineMiscPrice,                                  \n" +
                "	(SELECT SUM(ssd.qty * ssd.price) FROM salesorderdet ssd JOIN component c ON c.id=ssd.partID AND c.isdeleted=0  WHERE ssd.refsalesorderID=pid AND c.partType=4 AND ssd.isdeleted=0) totalSOMiscPrice                                \n" +
                "                	FROM salesorderdet sd  JOIN component c ON c.id=sd.partID AND c.isdeleted=0                               \n" +
                "                	WHERE sd.refsalesorderID=pid AND c.partType IN (2,3) AND sd.isdeleted=0;                       \n" +
                "  \n" +
                "	SELECT                       \n" +
                "    IFNULL(totalLinePrice,0) totalLinePrice,                      \n" +
                "    IFNULL(totalLineMiscPrice, 0) totalLineMiscPrice,                      \n" +
                "    IFNULL(totalSOMiscPrice, 0) totalSOMiscPrice,                      \n" +
                "    (IFNULL(totalLinePrice,0) + IFNULL(totalLineMiscPrice, 0) + IFNULL(totalSOMiscPrice, 0)) totalSOPrice                      \n" +
                "FROM                      \n" +
                "    tempTotalPrice;                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-06-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1046,'1.00','V1','Sproc_GetSalesOrderReportDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1046:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-07-2021  *********************************** */
                "drop procedure if exists Sproc_GetSerialConfiguration;  \n" +
                "CREATE PROCEDURE `Sproc_GetSerialConfiguration`(                \n" +
                "       pNickname VARCHAR(50),      \n" +
                "       pPartId varchar(109)      \n" +
                "	)  \n" +
                "BEGIN                      \n" +
                "	SELECT sc.id      \n" +
                "		, sc.nickname      \n" +
                "        , sc.partId      \n" +
                "        , sc.configurationLevel      \n" +
                "        , sc.isConsecutiveNumber      \n" +
                "        , sc.prefix      \n" +
                "        , sc.prefixLock      \n" +
                "        , sc.noofDigits      \n" +
                "        , sc.lastMaxNumber      \n" +
                "        , sc.assyDateCode      \n" +
                "        , sc.assyDateCodeFormat      \n" +
                "        , sc.startNumber      \n" +
                "        , sc.suffix      \n" +
                "        , sc.suffixLock      \n" +
                "        , sc.barcodeSeparatorID  \n" +
                "        , sc.barcodeSeparatorLock  \n" +
                "        , gc.gencCategoryCode AS barcodeSepCode  \n" +
                "        , gc.gencCategoryName AS barcodeSepValue  \n" +
                "	FROM serial_number_configuration sc       \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = sc.barcodeSeparatorID and gc.isDeleted = 0  \n" +
                "		WHERE sc.isDeleted = 0 AND (sc.nickname = pNickname OR sc.partId =  pPartId);      \n" +
                "  \n" +
                "	select d.Used    \n" +
                "		,d.UnUsed    \n" +
                "        ,d.fromNo    \n" +
                "        ,d.toNo    \n" +
                "        ,d.woID    \n" +
                "        ,wo.woNumber    \n" +
                "        ,(select PIDCode from component where id=wo.partID) PID  from (    \n" +
                "	select sum(e.Used) Used, sum(e.UnUsed) UnUsed,e.woID, MIN(e.serialIntVal) fromNo,MAX(e.serialIntVal) toNo    \n" +
                "		from (    \n" +
                "			select a.woID,    \n" +
                "				CASE WHEN refMFGSerialNo is null THEN 0 ELSE 1 END Used,    \n" +
                "				CASE WHEN refMFGSerialNo is null THEN 1 ELSE 0 END UnUsed,    \n" +
                "				a.serialIntVal    \n" +
                "			from workorder_serialmst a     \n" +
                "			where a.configurationId in (select id FROM serial_number_configuration        \n" +
                "					WHERE isDeleted = 0 AND  (nickname = pNickname OR partId =  pPartId))    \n" +
                "				and a.isDeleted = 0    \n" +
                "	)e group by e.woId)    \n" +
                "d left join workorder wo on d.woId = wo.woID;           \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1047,'1.00','V1','Sproc_GetSerialConfiguration - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1047:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCustomerRefundByMstID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(            \n" +
                "	IN pCustRefundMstID INT ,    \n" +
                "    IN pRefPaymentMode VARCHAR(5)    \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                     \n" +
                "		DECLARE v_TimeZone VARCHAR(50);                                          	            \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;                                                            \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    	            \n" +
                "  \n" +
                "		SELECT 	psip.id,                                                                      \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,            \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,              \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,             \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,      \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,    \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,             \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,                                                                       \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,    \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) As updatedByEmp ,  \n" +
                "            fun_getEmployeeIDByUserID(psip.createdBy) As createdByEmp ,  \n" +
                "            fun_getUserNameByID(psip.updatedBy) updatedbyInitial,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,      \n" +
                "			fun_getUserNameByID(psip.createdBy) createdbyInitial      \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip                                             \n" +
                "		WHERE id = pCustRefundMstID            \n" +
                "		AND refPaymentMode = pRefPaymentMode     \n" +
                "		AND psip.isDeleted = 0                  \n" +
                "		;             \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 08-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1048,'1.00','V1',' Updated SP for Last Modified By and Created By hyperlink - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1048:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN      \n" +
                "  \n" +
                "	DECLARE vPurchaseOrderID INT;      \n" +
                "	DECLARE vStatus VARCHAR(5);       \n" +
                "	DECLARE vPOStatus VARCHAR(5);      \n" +
                "  \n" +
                "    SELECT refPurchaseOrderID INTO vPurchaseOrderID FROM purchase_order_det WHERE id= NEW.refPurchaseOrderDetID;      \n" +
                "	SELECT poWorkingStatus INTO vPOStatus FROM purchase_order_mst WHERE id= vPurchaseOrderID;      \n" +
                "  \n" +
                "	IF ((NEW.isDeleted = TRUE OR (IFNULL(NEW.poLineWorkingStatus,0)!=IFNULL(OLD.poLineWorkingStatus,0))OR (IFNULL(NEW.receivedQty,0)!=IFNULL(OLD.receivedQty,0))) AND (vPOStatus!='CA')) THEN      \n" +
                "		SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=vPurchaseOrderID AND poLineWorkingStatus='P' LIMIT 1;      \n" +
                "		SET vStatus=IFNULL(vStatus,'C');  \n" +
                "		IF(vStatus='P') THEN      \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus=vStatus WHERE id=vPurchaseOrderID;      \n" +
                "		ELSE       \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus=vStatus,poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=vPurchaseOrderID;      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1049,'1.00','V1',' Updated TRG_AU_purchase_order_line_release_det Trigger - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1049:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetDownloadHelpBlogDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetDownloadHelpBlogDetails`(        \n" +
                "    IN phelpBlogId INT,       \n" +
                "    IN phelpBlogDetailId VARCHAR(5000)     \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;         \n" +
                "  \n" +
                "	IF(phelpBlogDetailId IS NOT NULL OR phelpBlogDetailId !='') AND (phelpBlogId IS NULL OR phelpBlogId ='')THEN     \n" +
                "		SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT hbd.title,  \n" +
                "			hbd.description,  \n" +
                "			hbd.isSystemGenerated,      \n" +
                "			hbd.displayOrder,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,'\",v_TimeZone,\"','\",v_DateTimeDisplayFormat,\"') lastModified,               \n" +
                "			fun_getUserNameByID(hbd.updatedBy) lastModifiedBy,      \n" +
                "			hb.title AS menuTitle       \n" +
                "			FROM help_blog hb       \n" +
                "			INNER JOIN help_blog_det hbd       \n" +
                "				ON hbd.helpBlogId = hb.id       \n" +
                "			WHERE hb.id in (\",phelpBlogId,\")       \n" +
                "				AND hbd.isdeleted=0  \n" +
                "				order by hbd.displayorder\"  \n" +
                "		);      \n" +
                "	ELSE    \n" +
                "		SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT hbd.title,hbd.description,hbd.isSystemGenerated,      \n" +
                "			hbd.displayOrder,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(hbd.updatedAt,'\",v_TimeZone,\"','\",v_DateTimeDisplayFormat,\"') lastModified,                \n" +
                "			fun_getUserNameByID(hbd.updatedBy) lastModifiedBy,      \n" +
                "			hb.title AS menuTitle       \n" +
                "			FROM help_blog hb       \n" +
                "			INNER JOIN help_blog_det hbd       \n" +
                "				ON hbd.helpBlogId = hb.id       \n" +
                "			WHERE hb.id = \",phelpBlogId,\"       \n" +
                "				AND hbd.isdeleted=0      \n" +
                "				AND hbd.id in (\",phelpBlogDetailId,\")  \n" +
                "				order by hbd.displayorder\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    PREPARE query2 FROM @SQLStatement2;                     \n" +
                "	EXECUTE query2;                                   \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1050,'1.00','V1','Sproc_GetDownloadHelpBlogDetails - Vaibhav '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1050:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-06-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUOMDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUOMDetailForElastic`(        \n" +
                "	IN pId INT,  \n" +
                "    IN pMeasurementTypeID INT,  \n" +
                "    In pFromdate date,      \n" +
                "    In pTodate date,      \n" +
                "    IN pRequiredCount tinyint(1)          \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);             \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "  \n" +
                "	IF(pRequiredCount)       \n" +
                "	THEN      \n" +
                "		SELECT       \n" +
                "			count(1) totalCount      \n" +
                "		FROM uoms um        \n" +
                "		LEFT JOIN measurement_types mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0        \n" +
                "		WHERE  um.isdeleted = 0;        \n" +
                "    ELSE      \n" +
                "		SELECT um.id,      \n" +
                "			mt.name measurementtype,        \n" +
                "			um.abbreviation,        \n" +
                "			um.unitName,        \n" +
                "			CONCAT('1 ', um.abbreviation) AS 1UOM,     \n" +
                "            um.operator,       \n" +
                "			FUN_CONVERTUOMFORUOMLIST(um.id,        \n" +
                "					CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE)        \n" +
                "						AS SIGNED),        \n" +
                "					1) AS unitConvertValue,        \n" +
                "			(CASE WHEN (`um`.`isFormula` = 0)        \n" +
                "				THEN FUN_CONVERTUOMFORUOMLIST(um.id, CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE) AS SIGNED), 1)        \n" +
                "				ELSE NULL        \n" +
                "			END) AS baseEquivalent,        \n" +
                "			(SELECT GROUP_CONCAT(alias) AS aliaslist        \n" +
                "				FROM component_fields_genericalias_mst        \n" +
                "				WHERE isdeleted = 0        \n" +
                "					AND refTableName = 'Uoms'        \n" +
                "					AND refId = um.id        \n" +
                "				GROUP BY refId) AS aliaslist,        \n" +
                "			(CASE WHEN (um.defaultUOM = 1) THEN 'Yes'        \n" +
                "				ELSE 'No'        \n" +
                "			END) AS defaultUOMConvertedValue,        \n" +
                "			(CASE        \n" +
                "				WHEN (um.isFormula = 0) THEN 'No'        \n" +
                "				WHEN (um.isFormula = 1) THEN 'Yes'        \n" +
                "				ELSE ''        \n" +
                "			END) AS `isFormulaConvertedValue`,        \n" +
                "			um.description,        \n" +
                "			(CASE        \n" +
                "				WHEN (um.isSystemDefault = 0) THEN 'No'        \n" +
                "				WHEN (um.isSystemDefault = 1) THEN 'Yes'        \n" +
                "				ELSE ''        \n" +
                "			END) AS `isSystemDefaultConvertedValue`,        \n" +
                "			um.measurementTypeID,        \n" +
                "			um.ord AS displayOrder,        \n" +
                "			mt.displayOrder AS measurementTypeOrder,        \n" +
                "			FUN_GETBASEUNIT(um.measurementTypeID, TRUE) AS baseUnitValue        \n" +
                "            ,um.isDeleted      \n" +
                "		FROM uoms um        \n" +
                "		LEFT JOIN measurement_types mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0        \n" +
                "		WHERE um.id = IFNULL(pId, um.id)  AND  um.measurementTypeID = IFNULL(pMeasurementTypeID, um.measurementTypeID) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN      \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(um.createdAt,v_TimeZone)) between pFromdate and pTodate)       \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(um.updatedAt,v_TimeZone)) between pFromdate and pTodate)) OR      \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(mt.createdAt,v_TimeZone)) between pFromdate and pTodate)        \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(mt.updatedAt,v_TimeZone)) between pFromdate and pTodate))                      \n" +
                "                ELSE 1 = 1 END);     \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1051,'1.00','V1',' Bug 35336: - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1051:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(    \n" +
                "	IN pCustCreditMemoMstID INT ,    \n" +
                "	IN pCustomerPaymentMstID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "		DECLARE v_TimeZone VARCHAR(50);    \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate , cps.totalAmount , psip.paymentNumber ,    \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,    \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,    \n" +
                "			cps.agreedRefundAmt ,    \n" +
                "            fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,    \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN    \n" +
                "					(CASE WHEN (cps.paymentStatus = 'PE' ) THEN ''    \n" +
                "						  WHEN (cps.paymentStatus = 'RE' ) THEN 'Received & Applied'    \n" +
                "						  WHEN (cps.paymentStatus = 'PR' ) THEN 'Received' END)    \n" +
                "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,    \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby    \n" +
                "	FROM customer_packingslip AS cps    \n" +
                "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID    \n" +
                "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'    \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)    \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)    \n" +
                "	WHERE cps.id = pCustCreditMemoMstID    \n" +
                "	AND cps.isDeleted = 0    \n" +
                "		;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1052,'1.00','V1','Update Applied Credit memo Agreed Refund Amount - Heena'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        case 1052:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(    \n" +
                "	IN pSearch VARCHAR(300),    \n" +
                "	IN pId INT,    \n" +
                "	IN pMfgType VARCHAR(50),    \n" +
                "	IN pRoHSStatusID VARCHAR(100),    \n" +
                "	IN pMfgCodeId INT,    \n" +
                "	IN pCategoryID INT,    \n" +
                "	IN pIsContainCPN TINYINT,    \n" +
                "	IN prefSupplierMfgpnComponentID INT,    \n" +
                "	IN ppackagingID INT,    \n" +
                "	IN pstrictCustomPart TINYINT,    \n" +
                "	IN psupplierID INT,    \n" +
                "	IN pofftheself TINYINT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	IF (pstrictCustomPart=1) THEN    \n" +
                "		/*<===this logic is added to compare invert rohs category */    \n" +
                "		/* this logic used in purchase order when supplier is strictly custom part */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcomponent;    \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent    \n" +
                "			SELECT smm.refMfgCodeMstID    \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID    \n" +
                "			UNION    \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0    \n" +
                "			UNION    \n" +
                "			SELECT psupplierID AS refMfgCodeMstID;    \n" +
                "		ELSE    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent    \n" +
                "			SELECT psupplierID AS refMfgCodeMstID    \n" +
                "			UNION    \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0    \n" +
                "			UNION    \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0    \n" +
                "			UNION    \n" +
                "			SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;    \n" +
                "		END IF;    \n" +
                "		SELECT * FROM    \n" +
                "			(    \n" +
                "				SELECT `com`.`id`,    \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "					`com`.`mfgPN` orgMfgPN,    \n" +
                "					`com`.`packaginggroupID`,    \n" +
                "					`com`.`packagingID`,    \n" +
                "					`com`.`PIDCode`,    \n" +
                "					`com`.`isGoodPart`,    \n" +
                "					`com`.`RoHSStatusID`,    \n" +
                "					`com`.`rohsgroupID`,    \n" +
                "					`com`.`mfgcodeID`,    \n" +
                "					`mfgCodemst`.`mfgCode` AS `mfgCode`,    \n" +
                "					`mfgCodemst`.`mfgType` AS `mfgType`,    \n" +
                "					`mfgCodemst`.`mfgName` AS `mfgName`,    \n" +
                "					`com`.`category`,    \n" +
                "					`com`.`imageURL`,    \n" +
                "					`com`.`documentPath`,    \n" +
                "					`com`.`mfgPNDescription`,    \n" +
                "					`com`.`minOperatingTemp`,    \n" +
                "					`com`.`maxOperatingTemp`,    \n" +
                "					`com`.`value`,    \n" +
                "					`com`.`partPackage`,    \n" +
                "					`com`.`powerRating`,    \n" +
                "					`com`.`functionalCategoryID`,    \n" +
                "					`com`.`mountingTypeID`,    \n" +
                "					`com`.`connecterTypeID`,    \n" +
                "					`com`.`noOfPosition`,    \n" +
                "					`com`.`noOfRows`,    \n" +
                "					`com`.`pitch`,    \n" +
                "					`com`.`pitchMating`,    \n" +
                "					`com`.`length`,    \n" +
                "					`com`.`width`,    \n" +
                "					`com`.`height`,    \n" +
                "					`com`.`voltage`,    \n" +
                "					`com`.`weight`,    \n" +
                "					`com`.`feature`,    \n" +
                "					`com`.`color`,    \n" +
                "					`com`.`partStatus`,    \n" +
                "					`com`.`uom`,    \n" +
                "					`com`.`uomClassID`,    \n" +
                "					`com`.`unit`,    \n" +
                "					`com`.`restrictUsePermanently`,    \n" +
                "					`com`.`restrictUSEwithpermission`,    \n" +
                "					`com`.`restrictPackagingUsePermanently`,    \n" +
                "					`com`.`restrictPackagingUseWithpermission`,    \n" +
                "					`u`.`abbreviation` AS uomName,    \n" +
                "					`u`.`unitName` AS  unitName,    \n" +
                "					`r`.`rohsIcon`,    \n" +
                "					`r`.`name` AS rohsName,    \n" +
                "					`com`.`partPackageID`,    \n" +
                "					`com`.`bomLock`,    \n" +
                "					`com`.`businessRisk`,    \n" +
                "					`com`.`costCategoryID`,    \n" +
                "					`com`.`deviceMarking`,    \n" +
                "					`com`.`driverToolRequired`,    \n" +
                "					`com`.`eau`,    \n" +
                "					`com`.`epicorType`,    \n" +
                "					`com`.`functionalTestingRequired`,    \n" +
                "					`com`.`heightText`,    \n" +
                "					`com`.`isCPN`,    \n" +
                "					`com`.`isCustom`,    \n" +
                "					`com`.`leadTime`,    \n" +
                "					`com`.`matingPartRquired`,    \n" +
                "					`com`.`maxPriceLimit`,    \n" +
                "					`com`.`maxQtyonHand`,    \n" +
                "					`com`.`minimum`,    \n" +
                "					`com`.`mult`,    \n" +
                "					`com`.`packageQty`,    \n" +
                "					`com`.`partType`,    \n" +
                "					`com`.`pcbPerArray`,    \n" +
                "					`com`.`pickupPadRequired`,    \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,    \n" +
                "					`com`.`plannedValuePerBuild`,    \n" +
                "					`com`.`programingRequired`,    \n" +
                "					`com`.`rfqOnly`,    \n" +
                "					`com`.`saftyStock`,    \n" +
                "					`com`.`scrapRatePercentagePerBuild`,    \n" +
                "					`com`.`scrapValuePerBuild`,    \n" +
                "					`com`.`selfLifeDays`,    \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,    \n" +
                "					`com`.`temperatureCoefficient`,    \n" +
                "					`com`.`temperatureCoefficientUnit`,    \n" +
                "					`com`.`temperatureCoefficientValue`,    \n" +
                "					`com`.`trackSerialNumber`,    \n" +
                "					`com`.`refSupplierMfgpnComponentID`,    \n" +
                "					`com`.`refMfgPNMfgCodeId`,    \n" +
                "					`com`.`internalReference`,    \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,    \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,    \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode    \n" +
                "				FROM `component` AS `com`    \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`     \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`     \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0     \n" +
                "                        AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "				JOIN `rfq_rohsmst` AS `r`     \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`    \n" +
                "				JOIN  `uoms` AS `u`     \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0    \n" +
                "				WHERE `com`.`isdeleted`=0    \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)    \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)    \n" +
                "					AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)    \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)    \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)    \n" +
                "					AND `com`.`mfgcodeid` IN (SELECT refMfgCodeMstID FROM tempcomponent)    \n" +
                "					AND (`com`.`isGoodPart`=1)    \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a    \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)     \n" +
                "			OR (pSearch IS NOT NULL     \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')     \n" +
                "					OR pidcode LIKE CONCAT('%', pSearch , '%')    \n" +
                "					OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))    \n" +
                "		)    \n" +
                "		ORDER BY mfgPN;    \n" +
                "	ELSEIF (pofftheself=1 AND pstrictCustomPart=0) THEN    \n" +
                "		/* this logic used in purchase order    \n" +
                "		packing slip    \n" +
                "		UMID management    \n" +
                "		Component Master    \n" +
                "		Reserve Stock    \n" +
                "		Component Assy DFM    \n" +
                "		Reports    \n" +
                "		Price Break Update    \n" +
                "		Customer Part    \n" +
                "		Good-Bad Mapping Part    \n" +
                "		Supplier Quote    \n" +
                "		Supplier RMA */    \n" +
                "		SELECT * FROM    \n" +
                "			(    \n" +
                "				SELECT `com`.`id`,    \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "					`com`.`mfgPN` orgMfgPN,    \n" +
                "					`com`.`packaginggroupID`,    \n" +
                "					`com`.`packagingID`,    \n" +
                "					`com`.`PIDCode`,    \n" +
                "					`com`.`isGoodPart`,    \n" +
                "					`com`.`RoHSStatusID`,    \n" +
                "					`com`.`rohsgroupID`,    \n" +
                "					`com`.`mfgcodeID`,    \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,    \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,    \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,    \n" +
                "					`com`.`category`,    \n" +
                "					`com`.`imageURL`,    \n" +
                "					`com`.`documentPath`,    \n" +
                "					`com`.`mfgPNDescription`,    \n" +
                "					`com`.`minOperatingTemp`,    \n" +
                "					`com`.`maxOperatingTemp`,    \n" +
                "					`com`.`value`,    \n" +
                "					`com`.`partPackage`,    \n" +
                "					`com`.`powerRating`,    \n" +
                "					`com`.`functionalCategoryID`,    \n" +
                "					`com`.`mountingTypeID`,    \n" +
                "					`com`.`connecterTypeID`,    \n" +
                "					`com`.`noOfPosition`,    \n" +
                "					`com`.`noOfRows`,    \n" +
                "					`com`.`pitch`,    \n" +
                "					`com`.`pitchMating`,    \n" +
                "					`com`.`length`,    \n" +
                "					`com`.`width`,    \n" +
                "					`com`.`height`,    \n" +
                "					`com`.`voltage`,    \n" +
                "					`com`.`weight`,    \n" +
                "					`com`.`feature`,    \n" +
                "					`com`.`color`,    \n" +
                "					`com`.`partStatus`,    \n" +
                "					`com`.`uom`,    \n" +
                "					`com`.`uomClassID`,    \n" +
                "					`com`.`unit`,    \n" +
                "					`com`.`restrictUsePermanently`,    \n" +
                "					`com`.`restrictUSEwithpermission`,    \n" +
                "					`com`.`restrictPackagingUsePermanently`,    \n" +
                "					`com`.`restrictPackagingUseWithpermission`,    \n" +
                "					`u`.`abbreviation` AS uomName,    \n" +
                "					`u`.`unitName` AS unitName,    \n" +
                "					`r`.`rohsIcon`,    \n" +
                "					`r`.`name` AS rohsName,    \n" +
                "					`com`.`partPackageID`,    \n" +
                "					`com`.`bomLock`,    \n" +
                "					`com`.`businessRisk`,    \n" +
                "					`com`.`costCategoryID`,    \n" +
                "					`com`.`deviceMarking`,    \n" +
                "					`com`.`driverToolRequired`,    \n" +
                "					`com`.`eau`,    \n" +
                "					`com`.`epicorType`,    \n" +
                "					`com`.`functionalTestingRequired`,    \n" +
                "					`com`.`heightText`,    \n" +
                "					`com`.`isCPN`,    \n" +
                "					`com`.`isCustom`,    \n" +
                "					`com`.`leadTime`,    \n" +
                "					`com`.`matingPartRquired`,    \n" +
                "					`com`.`maxPriceLimit`,    \n" +
                "					`com`.`maxQtyonHand`,    \n" +
                "					`com`.`minimum`,    \n" +
                "					`com`.`mult`,    \n" +
                "					`com`.`packageQty`,    \n" +
                "					`com`.`partType`,    \n" +
                "					`com`.`pcbPerArray`,    \n" +
                "					`com`.`pickupPadRequired`,    \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,    \n" +
                "					`com`.`plannedValuePerBuild`,    \n" +
                "					`com`.`programingRequired`,    \n" +
                "					`com`.`rfqOnly`,    \n" +
                "					`com`.`saftyStock`,    \n" +
                "					`com`.`scrapRatePercentagePerBuild`,    \n" +
                "					`com`.`scrapValuePerBuild`,    \n" +
                "					`com`.`selfLifeDays`,    \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,    \n" +
                "					`com`.`temperatureCoefficient`,    \n" +
                "					`com`.`temperatureCoefficientUnit`,    \n" +
                "					`com`.`temperatureCoefficientValue`,    \n" +
                "					`com`.`trackSerialNumber`,    \n" +
                "					`com`.`refSupplierMfgpnComponentID`,    \n" +
                "					`com`.`refMfgPNMfgCodeId`,    \n" +
                "					`com`.`internalReference`,    \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,    \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,    \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode    \n" +
                "				FROM `component` AS `com`    \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`     \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`     \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0     \n" +
                "						AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "				JOIN `rfq_rohsmst` AS `r`    \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`    \n" +
                "				JOIN  `uoms` AS `u`     \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0    \n" +
                "				WHERE (`com`.`isdeleted`=0)    \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)    \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)     \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)    \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)    \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)    \n" +
                "					AND `com`.`iscustom`=0     \n" +
                "                    AND `com`.`category`=2     \n" +
                "                    AND `com`.`iscpn`=FALSE    \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a    \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)     \n" +
                "			OR (pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')     \n" +
                "				OR (pidcode LIKE CONCAT('%', pSearch , '%'))    \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))    \n" +
                "		)    \n" +
                "		ORDER BY mfgPN;    \n" +
                "	ELSE    \n" +
                "		/* this logic used in purchase order    \n" +
                "		packing slip    \n" +
                "		UMID management    \n" +
                "		Component Master    \n" +
                "		Reserve Stock    \n" +
                "		Component Assy DFM    \n" +
                "		Reports    \n" +
                "		Price Break Update    \n" +
                "		Customer Part    \n" +
                "		Good-Bad Mapping Part    \n" +
                "		Supplier Quote    \n" +
                "		Supplier RMA */    \n" +
                "		SELECT * FROM    \n" +
                "			(    \n" +
                "				SELECT `com`.`id`,    \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "					`com`.`mfgPN` orgMfgPN,    \n" +
                "					`com`.`packaginggroupID`,    \n" +
                "					`com`.`packagingID`,    \n" +
                "					`com`.`PIDCode`,    \n" +
                "					`com`.`isGoodPart`,     \n" +
                "					`com`.`RoHSStatusID`,    \n" +
                "					`com`.`rohsgroupID`,    \n" +
                "					`com`.`mfgcodeID`,    \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,    \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,    \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,    \n" +
                "					`com`.`tolerance`,    \n" +
                "					`com`.`category`,    \n" +
                "					`com`.`imageURL`,    \n" +
                "					`com`.`documentPath`,    \n" +
                "					`com`.`mfgPNDescription`,    \n" +
                "					`com`.`minOperatingTemp`,    \n" +
                "					`com`.`maxOperatingTemp`,    \n" +
                "					`com`.`value`,    \n" +
                "					`com`.`partPackage`,    \n" +
                "					`com`.`powerRating`,    \n" +
                "					`com`.`functionalCategoryID`,    \n" +
                "					`com`.`mountingTypeID`,    \n" +
                "					`com`.`connecterTypeID`,    \n" +
                "					`com`.`noOfPosition`,    \n" +
                "					`com`.`noOfRows`,    \n" +
                "					`com`.`pitch`,    \n" +
                "					`com`.`pitchMating`,    \n" +
                "					`com`.`length`,    \n" +
                "					`com`.`width`,    \n" +
                "					`com`.`height`,    \n" +
                "					`com`.`voltage`,    \n" +
                "					`com`.`weight`,    \n" +
                "					`com`.`feature`,    \n" +
                "					`com`.`color`,    \n" +
                "					`com`.`partStatus`,    \n" +
                "					`com`.`uom`,    \n" +
                "					`com`.`uomClassID`,    \n" +
                "					`com`.`unit`,    \n" +
                "					`com`.`restrictUsePermanently`,    \n" +
                "					`com`.`restrictUSEwithpermission`,    \n" +
                "					`com`.`restrictPackagingUsePermanently`,    \n" +
                "					`com`.`restrictPackagingUseWithpermission`,    \n" +
                "					`com`.`packaging`,    \n" +
                "					`u`.`abbreviation` AS uomName,    \n" +
                "					`u`.`unitName` AS unitName,    \n" +
                "					`r`.`rohsIcon`,    \n" +
                "					`r`.`name` AS rohsName,    \n" +
                "					`com`.`partPackageID`,    \n" +
                "					`com`.`bomLock`,    \n" +
                "					`com`.`businessRisk`,    \n" +
                "					`com`.`costCategoryID`,    \n" +
                "					`com`.`deviceMarking`,    \n" +
                "					`com`.`driverToolRequired`,    \n" +
                "					`com`.`eau`,    \n" +
                "					`com`.`epicorType`,    \n" +
                "					`com`.`functionalTestingRequired`,    \n" +
                "					`com`.`heightText`,    \n" +
                "					`com`.`isCPN`,    \n" +
                "					`com`.`isCustom`,    \n" +
                "					`com`.`leadTime`,    \n" +
                "					`com`.`matingPartRquired`,    \n" +
                "					`com`.`maxPriceLimit`,    \n" +
                "					`com`.`maxQtyonHand`,    \n" +
                "					`com`.`minimum`,    \n" +
                "					`com`.`mult`,    \n" +
                "					`com`.`packageQty`,    \n" +
                "					`com`.`partType`,    \n" +
                "					`com`.`pcbPerArray`,    \n" +
                "					`com`.`pickupPadRequired`,    \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,    \n" +
                "					`com`.`plannedValuePerBuild`,    \n" +
                "					`com`.`programingRequired`,    \n" +
                "					`com`.`rfqOnly`,    \n" +
                "					`com`.`saftyStock`,    \n" +
                "					`com`.`scrapRatePercentagePerBuild`,    \n" +
                "					`com`.`scrapValuePerBuild`,    \n" +
                "					`com`.`selfLifeDays`,    \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,    \n" +
                "					`com`.`temperatureCoefficient`,    \n" +
                "					`com`.`temperatureCoefficientUnit`,    \n" +
                "					`com`.`temperatureCoefficientValue`,    \n" +
                "					`com`.`trackSerialNumber`,    \n" +
                "					`com`.`refSupplierMfgpnComponentID`,    \n" +
                "					`com`.`refMfgPNMfgCodeId`,    \n" +
                "					`com`.`internalReference`,    \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,    \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,    \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode    \n" +
                "				FROM `component` AS `com`    \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`     \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`     \n" +
                "						AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))    \n" +
                "				JOIN `rfq_rohsmst` AS `r`     \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`    \n" +
                "				JOIN `uoms` AS `u`     \n" +
                "					ON `u`.`id`= `com`.`uom`     \n" +
                "						AND `u`.`isdeleted`=0    \n" +
                "				WHERE `com`.`isdeleted`=0    \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)    \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)     \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)    \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)    \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)    \n" +
                "					AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)    \n" +
                "					AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)    \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a    \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)     \n" +
                "			OR (pSearch IS NOT NULL     \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')     \n" +
                "                OR (pidcode LIKE CONCAT('%', pSearch , '%'))    \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))    \n" +
                "		)    \n" +
                "		ORDER BY mfgPN;    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1053,'1.00','V1',' Bug 35310: Purchase Order: MPN and PID for inactive part is not derived while doing edit - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1053:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_PackagingAlias_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_PackagingAlias_History` AFTER UPDATE ON `component_packagingalias` FOR EACH ROW BEGIN        \n" +
                "	DECLARE pOldValue TEXT;        \n" +
                "	DECLARE pNewValue TEXT;        \n" +
                "	IF IFNULL(OLD.aliasgroupID,0) != IFNULL(NEW.aliasgroupID,0) THEN          \n" +
                "		   INSERT INTO Component_History        \n" +
                "			(refComponentID,                tableName,                 	Colname,        \n" +
                "			Oldval, 			Newval, 			createdBy,        \n" +
                "			createdAt,  			updatedAt, 			Updatedby)        \n" +
                "	       VALUES(NEW.componentID,				'component_packagingalias',	'Part > Packaging Alias > Alias Group Id',        \n" +
                "			CAST(OLD.aliasgroupID AS CHAR), 	CAST(NEW.aliasgroupID AS CHAR),	 OLD.createdBy,        \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN        \n" +
                "		IF OLD.componentID IS NOT NULL THEN        \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`        \n" +
                "			FROM component        \n" +
                "			WHERE id =OLD.componentID        \n" +
                "			ORDER BY id DESC LIMIT 1;        \n" +
                "		END IF;        \n" +
                "		IF NEW.componentID IS NOT NULL THEN        \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`        \n" +
                "			FROM component        \n" +
                "			WHERE id =NEW.componentID        \n" +
                "			ORDER BY id DESC LIMIT 1;        \n" +
                "		END IF;        \n" +
                "		   INSERT INTO Component_History        \n" +
                "			(refComponentID,                tableName,                 	Colname,        \n" +
                "			Oldval, 			Newval, 			createdBy,        \n" +
                "			createdAt,  			updatedAt, 			Updatedby)        \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > MFG PN',        \n" +
                "			pOldValue, 			pNewValue,			OLD.createdBy,        \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN        \n" +
                "		IF OLD.componentID IS NOT NULL THEN        \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`        \n" +
                "			FROM component        \n" +
                "			WHERE id =OLD.componentID        \n" +
                "			ORDER BY id DESC LIMIT 1;        \n" +
                "		END IF;        \n" +
                "		   INSERT INTO Component_History        \n" +
                "			(refComponentID,                tableName,                 	Colname,        \n" +
                "			Oldval, 			Newval, 			createdBy,        \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		createByRoleId)        \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > Deleted',        \n" +
                "			NULL, 				CONCAT(pOldValue,' > Deleted'),	OLD.createdBy,        \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "END; \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_FunctionalTestingEquipment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_FunctionalTestingEquipment_History` AFTER UPDATE ON `component_functionaltestingequipment` FOR EACH ROW BEGIN      \n" +
                "	DECLARE pOldValue TEXT;      \n" +
                "	DECLARE pNewValue TEXT;      \n" +
                "	IF IFNULL(OLD.eqpID,0) != IFNULL(NEW.eqpID,0) THEN      \n" +
                "		IF OLD.eqpID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`      \n" +
                "			FROM equipment      \n" +
                "			WHERE eqpID =OLD.eqpID      \n" +
                "			ORDER BY eqpID DESC LIMIT 1;      \n" +
                "		END IF;      \n" +
                "		IF NEW.eqpID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pNewValue`      \n" +
                "			FROM equipment      \n" +
                "			WHERE eqpID =NEW.eqpID      \n" +
                "			ORDER BY eqpID DESC LIMIT 1;      \n" +
                "		END IF;     \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby)      \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Equipment',      \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN      \n" +
                "		IF OLD.eqpID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`      \n" +
                "			FROM equipment      \n" +
                "			WHERE eqpID =OLD.eqpID      \n" +
                "			ORDER BY eqpID DESC LIMIT 1;      \n" +
                "		END IF;      \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Deleted',      \n" +
                "			NULL, 				CONCAT(pOldValue,' > Delete'),	 		OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);  \n" +
                "	END IF;      \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_RohsAlternatePN_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_RohsAlternatePN_History` AFTER UPDATE ON `component_rohsalternatepn` FOR EACH ROW BEGIN      \n" +
                "	DECLARE pOldValue TEXT;      \n" +
                "	DECLARE pNewValue TEXT;      \n" +
                "	IF IFNULL(OLD.aliasgroupID,0) != IFNULL(NEW.aliasgroupID,0) THEN        \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby)          \n" +
                "	       VALUES(NEW.componentID,			'component_rohsalternatepn',	'Part > RoHS Replacement Parts > Alias Group Id',      \n" +
                "			CAST(OLD.aliasgroupID AS CHAR), CAST(NEW.aliasgroupID AS CHAR),	 OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN      \n" +
                "		IF OLD.componentID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`       \n" +
                "			FROM component      \n" +
                "			WHERE id =OLD.componentID      \n" +
                "			ORDER BY id DESC LIMIT 1;      \n" +
                "		END IF;      \n" +
                "		IF NEW.componentID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`       \n" +
                "			FROM component      \n" +
                "			WHERE id = NEW.componentID      \n" +
                "			ORDER BY id DESC LIMIT 1;      \n" +
                "		END IF;      \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby)          \n" +
                "	       VALUES(NEW.componentID,			'component_rohsalternatepn',	'Part > RoHS Replacement Parts > MFG PN',      \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN      \n" +
                "		IF OLD.componentID IS NOT NULL THEN      \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`       \n" +
                "			FROM component      \n" +
                "			WHERE id =OLD.componentID      \n" +
                "			ORDER BY id DESC LIMIT 1;      \n" +
                "		END IF;       \n" +
                "		   INSERT INTO Component_History      \n" +
                "			(refComponentID,                tableName,                 	Colname,      \n" +
                "			Oldval, 			Newval, 			createdBy,      \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)             \n" +
                "	       VALUES(NEW.componentID,				'component_rohsalternatepn',	'Part > RoHS Replacement Parts > Deleted',      \n" +
                "			NULL, 				CONCAT(pOldValue,' > Deleted'),	OLD.createdBy,      \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);  \n" +
                "	END IF;      \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Alternatepn_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Alternatepn_History` AFTER UPDATE ON `component_alternatepn` FOR EACH ROW BEGIN        \n" +
                "	DECLARE pOldValue TEXT;        \n" +
                "	DECLARE pNewValue TEXT;        \n" +
                "	DECLARE pTableDisplayName TEXT;        \n" +
                "	IF old.type=1 THEN        \n" +
                "		SET pTableDisplayName = 'Alternate Parts';        \n" +
                "	ELSEIF old.type=2 THEN        \n" +
                "		SET pTableDisplayName = 'Pickup Pad';        \n" +
                "	ELSEIF old.type=3 THEN        \n" +
                "		SET pTableDisplayName = 'Program';        \n" +
                "	ELSEIF old.type=4 THEN        \n" +
                "		SET pTableDisplayName = 'Functional Testing Tools';        \n" +
                "	ELSEIF old.type=5 THEN        \n" +
                "		SET pTableDisplayName = 'Require Mating Parts';        \n" +
                "    ELSEIF old.type=6 THEN        \n" +
                "		SET pTableDisplayName = 'RoHS Replacement Part';        \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF OLD.componentID IS NOT NULL THEN        \n" +
                "		SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`         \n" +
                "		FROM component        \n" +
                "		WHERE id =OLD.componentID        \n" +
                "		ORDER BY id DESC LIMIT 1;        \n" +
                "	END IF;        \n" +
                "	IF NEW.componentID IS NOT NULL THEN        \n" +
                "		SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`         \n" +
                "		FROM component        \n" +
                "		WHERE id =NEW.componentID        \n" +
                "		ORDER BY id DESC LIMIT 1;        \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN        \n" +
                "	       INSERT INTO Component_History        \n" +
                "			(refComponentID,                tableName,                 	Colname,        \n" +
                "			Oldval, 			Newval, 			createdBy,        \n" +
                "			createdAt,  			updatedAt, 			Updatedby)        \n" +
                "	       VALUES(NEW.refComponentID,		'component_alternatepn',	CONCAT(pTableDisplayName,' > MFG PN'),        \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,        \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN        \n" +
                "	       INSERT INTO Component_History        \n" +
                "			(refComponentID,                tableName,                 	Colname,        \n" +
                "			Oldval, 			Newval, 			createdBy,        \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)            \n" +
                "	       VALUES(NEW.refComponentID,		'component_alternatepn',	CONCAT(pTableDisplayName,' > Deleted'),          \n" +
                "			NULL, 				CONCAT(pOldValue,' > Deleted'),	 OLD.createdBy,       \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);        \n" +
                "	END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1054,'1.00','V1',' Bug 35304: - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1054:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2021  *********************************** */
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD COLUMN `holdUnholdId` INT NULL,  \n" +
                "ADD COLUMN `refParentCreditDebitInvoiceHoldUnholdId` INT NULL;  \n" +
                "  \n" +
                "ALTER TABLE `packing_slip_material_receive`     \n" +
                "  DROP INDEX `FK_packing_slip_material_receive_refPackingSlipNumberForInvoice`,  \n" +
                "  ADD  KEY `FK_packing_slip_material_receive_refPackingSlipNumberForInvoice` (`refPackingSlipNumberForInvoice` ASC, `receiptType` ASC) VISIBLE;  \n" +
                "  \n" +
                "ALTER TABLE `packing_slip_material_receive`   \n" +
                "DROP FOREIGN KEY `FK_packing_slip_material_receive_mfgCodeID`;  \n" +
                "ALTER TABLE `packing_slip_material_receive`   \n" +
                "CHANGE COLUMN `mfgCodeID` `mfgCodeID` INT NOT NULL ;  \n" +
                "ALTER TABLE `packing_slip_material_receive`   \n" +
                "ADD CONSTRAINT `FK_packing_slip_material_receive_mfgCodeID`  \n" +
                "  FOREIGN KEY (`mfgCodeID`)  \n" +
                "  REFERENCES `mfgcodemst` (`id`);  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`     \n" +
                "  ADD  INDEX `IDX_packingslip_invoice_payment_refPaymentMode` (`refPaymentMode`);  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`   \n" +
                "DROP INDEX `IDX_packingslip_invoice_payment_refPaymentMode` ,  \n" +
                "ADD INDEX `IDX_packingslip_invoice_payment_refPaymentMode` (`refPaymentMode` ASC, `isPaymentVoided` ASC) VISIBLE;  \n" +
                "  \n" +
                "ALTER TABLE `supplier_invoice_payment_history`   \n" +
                "ADD COLUMN `refPackingslipInvoiceID` INT NULL COMMENT 'Supplier invoice, CM,DM id to display invoice#, CM#, DM# in history popup',  \n" +
                "ADD INDEX `FK_packingslip_invoice_payment_history_refPackingslipInvoic_idx` (`refPackingslipInvoiceID` ASC) VISIBLE;  \n" +
                "  \n" +
                "ALTER TABLE `supplier_invoice_payment_history`   \n" +
                "ADD CONSTRAINT `FK_packingslip_invoice_payment_history_refPackingslipInvoiceID`  \n" +
                "  FOREIGN KEY (`refPackingslipInvoiceID`)  \n" +
                "  REFERENCES `packing_slip_material_receive` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1055,'1.00','V1','Task 35376: Supplier Invoice List Performance tuning - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1055:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2021  *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(    \n" +
                "	IN pPageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pReceiptType VARCHAR(30),    \n" +
                "	IN pMfgCodeIds LONGTEXT,    \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,    \n" +
                "	IN pDueDate DATE,    \n" +
                "	IN pAdditionalDays INT,    \n" +
                "	IN pTermsAndAboveDays INT,    \n" +
                "	IN pInvoiceNumber VARCHAR(50),    \n" +
                "	IN pIsExactSearch TINYINT,    \n" +
                "	IN pMfrPnId INT,    \n" +
                "    IN pInvoiceIds LONGTEXT,    \n" +
                "    IN pExactPaymentNumberSearch TINYINT,    \n" +
                "    IN pPaymentNumber VARCHAR(50),    \n" +
                "    IN pPaymentTermsIds LONGTEXT,    \n" +
                "    IN pInvoiceFromDate DATE,    \n" +
                "    IN pInvoiceToDate DATE    \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                                        \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                            \n" +
                "			SELECT 		p.id,                                          \n" +
                "					p.systemId,                                      \n" +
                "					p.poNumber,                                            \n" +
                "                    p.poDate,          \n" +
                "                    p.refPurchaseOrderID poId,                      \n" +
                "					p.mfgCodeID,                                            \n" +
                "					p.supplierSONumber,                                            \n" +
                "                    p.soDate,          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,                  \n" +
                "					p.packingSlipDate,                                            \n" +
                "					p.invoiceNumber,                                            \n" +
                "                    p.lockStatus invoiceLockStatus,                  \n" +
                "					p.invoiceDate,                                \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                                \n" +
                "					p.creditMemoNumber,                  \n" +
                "                    p.lockStatus creditMemoLockStatus,                  \n" +
                "					p.creditMemoDate,                                            \n" +
                "					p.debitMemoNumber,                                            \n" +
                "                    p.refSupplierCreditMemoNumber,          \n" +
                "                    p.lockStatus debitMemoLockStatus,                  \n" +
                "					p.debitMemoDate,                                            \n" +
                "					p.receiptDate,                                            \n" +
                "					p.description,                                            \n" +
                "					p.billToAddress,                                            \n" +
                "					p.shipToAddress,                                            \n" +
                "					p.poVersion,      \n" +
                "					p.isDeleted,      \n" +
                "					p.receiptType,      \n" +
                "					p.`status`,      \n" +
                "					p.applyDate,      \n" +
                "					p.refParentCreditDebitInvoiceno,      \n" +
                "					p.refPackingSlipNumberForInvoice,      \n" +
                "					p.invoiceTotalDue,      \n" +
                "					p.isTariffInvoice,      \n" +
                "					p.creditMemoType,      \n" +
                "                    (      \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN      \n" +
                "								'Invoice Credit Memo (Auto)'      \n" +
                "							WHEN p.creditMemoType = 'MC' THEN      \n" +
                "								'MISC Credit Memo'      \n" +
                "							WHEN p.creditMemoType = 'RC' THEN      \n" +
                "								'RMA Credit Memo'      \n" +
                "							WHEN p.creditMemoType = 'ID' THEN      \n" +
                "								'Invoice Debit Memo (Auto)'      \n" +
                "							WHEN p.creditMemoType = 'MD' THEN      \n" +
                "								'MISC Debit Memo'      \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN      \n" +
                "								'Invoice'      \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN      \n" +
                "								'MISC Invoice'      \n" +
                "						END      \n" +
                "					) subTypeValue,      \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,      \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,      \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,      \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                                       \n" +
                "                    m.mfgName supplierName,                        \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,                          \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(g.cnt,0)  \n" +
                "						FROM 	vu_genericfilescount g  \n" +
                "						WHERE 	g.refTransID = psm.id  \n" +
                "								AND g.entityID = -14  \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'  \n" +
                "					) packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "					psPay.paidAmount,  \n" +
                "					psPay.refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,    \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,    \n" +
                "					p.invoiceRequireManagementApproval,    \n" +
                "					(    \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN    \n" +
                "								'Yes'    \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN    \n" +
                "								'No'    \n" +
                "						END    \n" +
                "					) invoiceRequireManagementApprovalValue,    \n" +
                "					p.invoiceApprovalStatus,    \n" +
                "					(    \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN    \n" +
                "								'Approved'    \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN    \n" +
                "								'Pending'    \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN    \n" +
                "								'N/A'    \n" +
                "						END    \n" +
                "					) invoiceApprovalStatusValue,    \n" +
                "					p.invoiceApprovedBy,    \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,    \n" +
                "					p.invoiceApprovalDate,    \n" +
                "					p.invoiceApprovalComment,    \n" +
                "					p.internalRemark,    \n" +
                "                    p.remark,    \n" +
                "					p.lockStatus,    \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'    \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'    \n" +
                "						when p.lockStatus = 'LC' then 'Locked'    \n" +
                "						else null end    \n" +
                "					) lockStatusValue,    \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,    \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,    \n" +
                "                    case when p.receiptType = 'I' then    \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))              \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,            \n" +
                "					h1.refType as haltRefType,            \n" +
                "                    h1.status as haltStatus,            \n" +
                "                    (CASE WHEN h1.status = 'H' THEN            \n" +
                "								'Halted'        \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltStatusText,         \n" +
                "                    (CASE            \n" +
                "							WHEN h1.status = 'H' THEN            \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))            \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltReason,            \n" +
                "                    psh1.refType as haltRefTypeRefInv,            \n" +
                "                    psh1.status as haltStatusRefInv,            \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN            \n" +
                "								'Halted'        \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltReasonRefInvText,        \n" +
                "                    (CASE            \n" +
                "							WHEN psh1.status = 'H' THEN            \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))            \n" +
                "							ELSE ''            \n" +
                "						END            \n" +
                "					) AS haltReasonRefInv,    \n" +
                "                    p.markedForRefund,    \n" +
                "                    (case when p.markedForRefund = 1 then 'Yes'    \n" +
                "						else 'No' end    \n" +
                "					) markedForRefundValue,    \n" +
                "                    p.markedForRefundAmt    \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id            \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/          \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID                \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0            \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno            \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                                            \n" +
                "			left join (            \n" +
                "							select 	a.refPackingSlipMaterialRecID,            \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,            \n" +
                "								sum(a.itemReceived) itemReceived,            \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,            \n" +
                "								sum(a.itemDisapproved) itemDisapproved,            \n" +
                "								sum(a.approveLineCount) approveLineCount,            \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,            \n" +
                "                                sum(discount) totalDiscount,            \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice            \n" +
                "							from 	(              \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,            \n" +
                "										psm.packingSlipSerialNumber,            \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,            \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,            \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/                    \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,                    \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,                    \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                            \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                            \n" +
                "										extendedPrice,                              \n" +
                "                                        discount,              \n" +
                "										extendedReceivedPrice              \n" +
                "									FROM 	packing_slip_material_receive_det psm                                            \n" +
                "									WHERE 	psm.isDeleted = 0                                            \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                            \n" +
                "								) a                                                                                \n" +
                "							group by a.refPackingSlipMaterialRecID                                                                      \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (    \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,    \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,    \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,    \n" +
                "    									sum(paidAmount) totalPaidDebitCreditAmount,    \n" +
                "                                        sum(refundAmount) totalRefundDebitCreditAmount    \n" +
                "							from 		packing_slip_material_receive ps    \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')    \n" +
                "									and ps.isDeleted = 0    \n" +
                "									and pd.isDeleted = 0    \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno    \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id    \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",    \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),    \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)    \n" +
                "	);    \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN    \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"    \n" +
                "				and exists (select 1    \n" +
                "							  from packingslip_invoice_payment pm    \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id    \n" +
                "							 where pm.isPaymentVoided = 0    \n" +
                "							   and pm.refPaymentMode = 'P'    \n" +
                "							   and pd.refPackingslipInvoiceID = p.id    \n" +
                "							   and pm.isDeleted = 0    \n" +
                "                               and pd.isDeleted = 0    \n" +
                "							   and pm.paymentNumber \",    \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END    \n" +
                "                               ,\") \");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");    \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'    \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");    \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'    \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN    \n" +
                "		IF pIsExactSearch = 1 THEN    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"    \n" +
                "									AND (    \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'    \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"    \n" +
                "									  \" ) \"    \n" +
                "						);    \n" +
                "		ELSE    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"    \n" +
                "									AND (    \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'    \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"    \n" +
                "									  \" ) \"    \n" +
                "						);    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN    \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (    \n" +
                "				SELECT 1    \n" +
                "				  FROM packing_slip_material_receive_det x    \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0    \n" +
                "			)    \n" +
                "		\");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );    \n" +
                "    PREPARE query1 FROM @SQLStatement1;    \n" +
                "    EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"    \n" +
                "			SELECT 	c.*,    \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,    \n" +
                "				round(c.paidAmount,2) totalPaidAmount,    \n" +
                "                round(c.refundAmount,2) totalRefundAmount,    \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,    \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,    \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete    \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c    \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_Packingslip_Invoice_Payment_Det_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_Det_History` AFTER UPDATE ON `packingslip_invoice_payment_det` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment_det\";    \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE vRefPaymentMode VARCHAR(10);  \n" +
                "    DECLARE vReceiptType VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT refPaymentMode INTO vRefPaymentMode    \n" +
                "	FROM packingslip_invoice_payment    \n" +
                "	WHERE id = NEW.refPayementid ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId,								refPackingslipInvoiceID)    \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,  \n" +
                "					(CASE WHEN vRefPaymentMode = 'CA' THEN 'Credit Memo AMT. Applied in Detail'  \n" +
                "						WHEN vRefPaymentMode = 'WOFF' THEN 'Write Off Amount in Detail ($)'  \n" +
                "                        ELSE 'Payment ($) in line Detail' END),			FORMAT(OLD.paymentAmount,2),  \n" +
                "					FORMAT(NEW.paymentAmount,2),						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,										OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,		OLD.refPackingslipInvoiceID);  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (vRefPaymentMode = 'CA' AND (IFNULL(OLD.appliedDate, \"\") != IFNULL(NEW.appliedDate, \"\"))) THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,    \n" +
                "					'Applied Credit Memo Date in Detail',						CAST(DATE_FORMAT(OLD.appliedDate, '%m/%d/%y') AS CHAR),    \n" +
                "					CAST(DATE_FORMAT(NEW.appliedDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF vRefPaymentMode = 'RR' AND OLD.isDeleted = 0 AND NEW.isDeleted = 1 THEN  \n" +
                "		select a.receiptType  \n" +
                "          into vReceiptType  \n" +
                "		  from packing_slip_material_receive a  \n" +
                "		 where id = OLD.refPackingslipInvoiceID;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    		refPaymentDetID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId,								refPackingslipInvoiceID)    \n" +
                "		    VALUES (vTableName,								NEW.refPayementid,		NEW.id,  \n" +
                "					(CASE WHEN vReceiptType = 'C' THEN 'Credit Memo'  \n" +
                "						WHEN vReceiptType = 'D' THEN 'Debit Memo'  \n" +
                "                        ELSE '' END),							'',  \n" +
                "					'Deleted',									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,		OLD.refPackingslipInvoiceID);  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1056,'1.00','V1','Bug 35366: [Main Branch] Supplier Refund updating record is not working - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1056:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2021  *********************************** */
                "drop trigger if exists `Trg_AU_Packingslip_Invoice_Payment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";    \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"    \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"    \n" +
                "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,    \n" +
                "					NEW.paymentNumber,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"    \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"    \n" +
                "                        WHEN old.refPaymentMode = \"RR\" THEN \"Refund Date\"    \n" +
                "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),    \n" +
                "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "                        WHEN old.refPaymentMode = \"RR\" THEN \"Refund Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),  \n" +
                "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN    \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval    \n" +
                "		  FROM genericcategory    \n" +
                "		 WHERE gencCategoryID = OLD.paymentType    \n" +
                "		 LIMIT 1;    \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval    \n" +
                "		  FROM genericcategory    \n" +
                "		 WHERE gencCategoryID = NEW.paymentType    \n" +
                "		 LIMIT 1;    \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Payment Method\",								vOldval,    \n" +
                "					vNewval,									OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 		(vTableName,									NEW.id,    \n" +
                "					\"Account Reference\",								OLD.accountReference,    \n" +
                "					NEW.accountReference,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Bank Account Code\",								OLD.bankAccountNo,    \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,									NEW.id,    \n" +
                "					\"Bank Name\",								OLD.bankName,    \n" +
                "					NEW.bankName,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Comments\",									OLD.remark,    \n" +
                "					NEW.remark,									OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),    \n" +
                "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "			 VALUES 	(vTableName,									NEW.id,    \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),    \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN    \n" +
                "		IF NEW.isDeleted = TRUE THEN    \n" +
                "			SET vNewval = 'Deleted';    \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN    \n" +
                "			SET vNewval = 'Restored';    \n" +
                "		ELSE    \n" +
                "			SET vNewval = 'Unknown action on delete';    \n" +
                "        END IF;    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "                    Colname,									Oldval,    \n" +
                "                    Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,								NEW.id,    \n" +
                "                    vNewval,									NULL,    \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,    \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN    \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE    \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)    \n" +
                "				END;    \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE    \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)    \n" +
                "				END;    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Status\"    \n" +
                "						WHEN old.refPaymentMode = \"CA\" THEN \"Write Off Status\"    \n" +
                "						ELSE \"Payment Status\" END), 						vOldval,    \n" +
                "					vNewval,									OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "							(tableName,									refPaymentID,    \n" +
                "							Colname,									Oldval,    \n" +
                "							Newval,										createdAt,    \n" +
                "							createdBy,									createByRoleId,    \n" +
                "							updatedAt,									updatedBy,    \n" +
                "							updateByRoleId)    \n" +
                "				  VALUES 	(vTableName,										NEW.id,    \n" +
                "							\"Voided Date\",							'',    \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,    \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history    \n" +
                "							(tableName,									refPaymentID,    \n" +
                "							Colname,									Oldval,    \n" +
                "							Newval,										createdAt,    \n" +
                "							createdBy,									createByRoleId,    \n" +
                "							updatedAt,									updatedBy,    \n" +
                "							updateByRoleId)    \n" +
                "				  VALUES 	(vTableName,										NEW.id,    \n" +
                "							\"Voided By\",									'',    \n" +
                "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,    \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "		  END IF;    \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"    \n" +
                "					WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"    \n" +
                "                    WHEN old.refPaymentMode = \"RR\" THEN \"Void Refund Reason\"    \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,    \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN    \n" +
                "		INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,    \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'    \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),    \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'    \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'    \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Locked Date\",									'',    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN    \n" +
                "        INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,										NEW.id,    \n" +
                "					\"Locked By\",									'',    \n" +
                "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "    END IF;    \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'P' THEN    \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN    \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN    \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval    \n" +
                "				FROM mfgcodemst    \n" +
                "				WHERE id =OLD.mfgcodeID    \n" +
                "				ORDER BY id DESC LIMIT 1;    \n" +
                "			END IF;    \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN    \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval    \n" +
                "				FROM mfgcodemst    \n" +
                "				WHERE id =NEW.mfgcodeID    \n" +
                "				ORDER BY id DESC LIMIT 1;    \n" +
                "			END IF;    \n" +
                "			  INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Supplier\",									vOldval,    \n" +
                "						vNewval,												OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "		END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Pay To name\",									OLD.payToName,    \n" +
                "						NEW.payToName,									OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Pay To Address\",									OLD.payToAddress,    \n" +
                "						NEW.payToAddress,								OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Bill To Name\",									OLD.billToName,    \n" +
                "						NEW.billToName,									OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,									refPaymentID,    \n" +
                "						Colname,									Oldval,    \n" +
                "						Newval,										createdAt,    \n" +
                "						createdBy,									createByRoleId,    \n" +
                "						updatedAt,									updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,										NEW.id,    \n" +
                "						\"Bill To Address\",								OLD.billToAddress,    \n" +
                "						NEW.billToAddress,								OLD.updatedAt,    \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "  \n" +
                "    ELSEIF NEW.refPaymentMode IN ('R','RR') THEN    \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN    \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "						(tableName,						refPaymentID,    \n" +
                "						Colname,						Oldval,    \n" +
                "						Newval,							createdAt,    \n" +
                "						createdBy,						createByRoleId,    \n" +
                "						updatedAt,						updatedBy,    \n" +
                "						updateByRoleId)    \n" +
                "			  VALUES 	(vTableName,							NEW.id,    \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,    \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,    \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "    END IF;    \n" +
                "    IF NEW.refPaymentMode = 'RR' THEN  \n" +
                "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,									NEW.id,    \n" +
                "					\"Offset Refund Amount ($)\",						OLD.offsetAmount,    \n" +
                "					NEW.offsetAmount,								OLD.updatedAt,    \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/    \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/    \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history    \n" +
                "					(tableName,									refPaymentID,    \n" +
                "					Colname,									Oldval,    \n" +
                "					Newval,										createdAt,    \n" +
                "					createdBy,									createByRoleId,    \n" +
                "					updatedAt,									updatedBy,    \n" +
                "					updateByRoleId)    \n" +
                "		  VALUES 	(vTableName,								NEW.id,    \n" +
                "					\"COA\",											  \n" +
                "					(select concat('(',a.acct_code,') ', a.acct_name) from acct_acctmst a where a.acct_id = OLD.acctId),  \n" +
                "					(select concat('(',a.acct_code,') ', a.acct_name) from acct_acctmst a where a.acct_id = NEW.acctId),  \n" +
                "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
                "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
                "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId); /*updateByRoleId*/  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePaymentHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentHistory`(  \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pPaymentID INT,    \n" +
                "	IN pRefPaymentMode VARCHAR(5)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;    \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN    \n" +
                "		CREATE TEMPORARY TABLE temp_custInvListOfPayment AS    \n" +
                "			SELECT id, invoiceNumber    \n" +
                "			FROM customer_packingslip    \n" +
                "			WHERE id IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE refPayementid = pPaymentID)    \n" +
                "			AND transType = 'I'    \n" +
                "			AND isDeleted = 0 ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_custInvListOfPayment AS    \n" +
                "		SELECT id, invoiceNumber FROM customer_packingslip WHERE 1=0;    \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierInvoicePaymentHistory = CONCAT(\"    \n" +
                "			SELECT    \n" +
                "				id, tableName , refPaymentID ,    \n" +
                "				colName,    \n" +
                "				oldVal,    \n" +
                "				newVal,    \n" +
                "				(CASE WHEN ('\",pRefPaymentMode,\"' = 'R' OR '\",pRefPaymentMode,\"' = 'CA' OR '\",pRefPaymentMode,\"' = 'WOFF')    \n" +
                "						AND siph.refPaymentDetID IS NOT NULL    \n" +
                "						THEN (SELECT invoiceNumber FROM temp_custInvListOfPayment    \n" +
                "							WHERE id = (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det    \n" +
                "												WHERE id = siph.refPaymentDetID))    \n" +
                "				      WHEN '\",pRefPaymentMode,\"' IN ('P','RR') THEN   \n" +
                "						  (select ifnull(a.creditMemoNumber, a.debitMemoNumber)  \n" +
                "						     from packing_slip_material_receive a  \n" +
                "						    where a.id = siph.refPackingslipInvoiceID)  \n" +
                "                      ELSE '' END) AS invoiceNumber ,    \n" +
                "				fun_getUserNameByID(updatedBy) updatedBy,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole    \n" +
                "			FROM    supplier_invoice_payment_history siph    \n" +
                "			WHERE   refPaymentID =\",pPaymentID,\"    \n" +
                "	\");    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1057,'1.00','V1','Bug 35366: [Main Branch] Supplier Refund updating record is not working - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1057:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesshippingmst` AFTER UPDATE ON `salesshippingmst`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "  \n" +
                "    SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID       \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.sDetID AND cp.transType='P';      \n" +
                "  \n" +
                "	SELECT SUM(ss.qty) INTO @qty FROM salesshippingmst ss WHERE ss.sDetID=new.sDetID AND ss.isdeleted=0;      \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,1)) THEN          \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.sDetID;  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.sDetID;  \n" +
                "		END IF;      \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=new.sDetID AND isdeleted=0;      \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=new.sDetID;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip_det` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip_det` AFTER UPDATE ON `customer_packingslip_det`   \n" +
                "    FOR EACH ROW BEGIN                \n" +
                "  \n" +
                "	DECLARE v_trasType VARCHAR(5);            \n" +
                "  DECLARE vNewQuoteFrom VARCHAR(30);        \n" +
                "    DECLARE vOldQuoteFrom VARCHAR(30);        \n" +
                "  \n" +
                "	SELECT transType INTO v_trasType             \n" +
                "	FROM customer_packingslip             \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID ;            \n" +
                "  \n" +
                "    IF IFNULL(OLD.custPOLineID,0) != IFNULL(NEW.custPOLineID,0) THEN                          \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Cust PO Line#',CAST(OLD.custPOLineID AS CHAR),                          \n" +
                "       CAST(new.custPOLineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.poQty,0) != IFNULL(NEW.poQty,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Original PO Line Order Qty',CAST(OLD.poQty AS CHAR),                          \n" +
                "       CAST(new.poQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;               \n" +
                "  \n" +
                "        IF IFNULL(OLD.shipQty,0) != IFNULL(NEW.shipQty,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "        VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),            \n" +
                "		(CASE WHEN v_trasType='P' THEN 'Shipment Qty' ELSE 'Qty' END),	CAST(OLD.shipQty AS CHAR),                          \n" +
                "		CAST(new.shipQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);            \n" +
                "  \n" +
                "  \n" +
                "	END IF;                \n" +
                "  \n" +
                "    IF IFNULL(OLD.remainingQty,0) != IFNULL(NEW.remainingQty,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Remaining Qty',CAST(OLD.remainingQty AS CHAR),                          \n" +
                "       CAST(new.remainingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;                 \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippedQty,0) != IFNULL(NEW.shippedQty,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Shipped To Date',CAST(OLD.shippedQty AS CHAR),                          \n" +
                "       CAST(new.shippedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;                \n" +
                "  \n" +
                "     IF IFNULL(OLD.shippingNotes,0) != IFNULL(NEW.shippingNotes,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Shipping Comments',CAST(OLD.shippingNotes AS CHAR),                          \n" +
                "       CAST(new.shippingNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalComment AS CHAR),                          \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.standrads,0) != IFNULL(NEW.standrads,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Applicable Standards',CAST(OLD.standrads AS CHAR),                          \n" +
                "       CAST(new.standrads AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;                \n" +
                "  \n" +
                "     IF IFNULL(OLD.refChargesTypeID,0) != IFNULL(NEW.refChargesTypeID,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Other Charges Type',fun_getGenericCategoryNameByID(OLD.refChargesTypeID),                          \n" +
                "       fun_getGenericCategoryNameByID(NEW.refChargesTypeID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;               \n" +
                "  \n" +
                "    IF IFNULL(OLD.unitPrice,0) != IFNULL(NEW.unitPrice,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Unit Price ($)', CAST(OLD.unitPrice AS CHAR), CAST(NEW.unitPrice AS CHAR),             \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;               \n" +
                "  \n" +
                "      IF IFNULL(OLD.assyDescription,0) != IFNULL(NEW.assyDescription,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Assy/PID Description',CAST(OLD.assyDescription AS CHAR),                          \n" +
                "       CAST(NEW.assyDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;               \n" +
                "  \n" +
                "	 IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Ext. Price ($)',            \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.extendedPrice,2) AS CHAR) END,              \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.extendedPrice,2) AS CHAR) END,                          \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;               \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.otherCharges,0) != IFNULL(NEW.otherCharges,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Total Other Charges Price ($)',CAST(FORMAT(OLD.otherCharges,2) AS CHAR),                          \n" +
                "       CAST(FORMAT(new.otherCharges,2) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	 IF IFNULL(OLD.reflineID,0) != IFNULL(NEW.reflineID,0) THEN                          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                            \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'SO Line#',CAST(OLD.reflineID AS CHAR),                          \n" +
                "       CAST(NEW.reflineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                          \n" +
                "	END IF;              \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL)THEN          \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID     \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';    \n" +
                "  \n" +
                "	SELECT SUM(ss.qty) INTO @qty FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid AND ss.isdeleted=0;    \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN        \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;   \n" +
                "		ELSE    \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.refsalesorderdetid;       \n" +
                "		END IF;    \n" +
                "  END IF;          \n" +
                "  IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN                        \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                          \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote#',CAST(OLD.quoteNumber AS CHAR),                        \n" +
                "	   CAST(NEW.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                        \n" +
                "	END IF;         \n" +
                "   IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN         \n" +
                "		SELECT (CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ' WHEN OLD.quoteFrom = 2 THEN 'From Part Master' WHEN OLD.quoteFrom = 3 THEN 'N/A' END ) INTO vOldQuoteFrom ;        \n" +
                "        SELECT (CASE WHEN NEW.quoteFrom = 1 THEN 'From RFQ' WHEN NEW.quoteFrom = 2 THEN 'From Part Master' WHEN NEW.quoteFrom = 3 THEN 'N/A' END ) INTO vNewQuoteFrom ;        \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                          \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote From',vOldQuoteFrom,                        \n" +
                "	   vNewQuoteFrom,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                        \n" +
                "	END IF;         \n" +
                "     IF IFNULL(OLD.refRFQGroupID,0) != IFNULL(NEW.refRFQGroupID,0) THEN                        \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                          \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',CAST(OLD.refRFQGroupID AS CHAR),                        \n" +
                "	   CAST(NEW.refRFQGroupID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                        \n" +
                "	END IF;         \n" +
                "     IF IFNULL(OLD.refAssyQtyTurnTimeID,0) != IFNULL(NEW.refAssyQtyTurnTimeID,0) THEN                        \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                          \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,                        \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                        \n" +
                "	END IF;         \n" +
                "       IF IFNULL(OLD.refRFQQtyTurnTimeID,0) != IFNULL(NEW.refRFQQtyTurnTimeID,0) THEN                        \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                          \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,                        \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                        \n" +
                "	END IF;         \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN                        \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                          \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),                        \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                        \n" +
                "	END IF;         \n" +
                "  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1058,'1.00','V1',' Alter trigger Trg_AU_salesshippingmst-champak'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1058:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2021  *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pReceiptType VARCHAR(30),      \n" +
                "	IN pMfgCodeIds LONGTEXT,      \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "	IN pDueDate DATE,      \n" +
                "	IN pAdditionalDays INT,      \n" +
                "	IN pTermsAndAboveDays INT,      \n" +
                "	IN pInvoiceNumber VARCHAR(50),      \n" +
                "	IN pIsExactSearch TINYINT,      \n" +
                "	IN pMfrPnId INT,      \n" +
                "    IN pInvoiceIds LONGTEXT,      \n" +
                "    IN pExactPaymentNumberSearch TINYINT,      \n" +
                "    IN pPaymentNumber VARCHAR(50),      \n" +
                "    IN pPaymentTermsIds LONGTEXT,      \n" +
                "    IN pInvoiceFromDate DATE,      \n" +
                "    IN pInvoiceToDate DATE      \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "    DECLARE vCurrentDate DATE;    \n" +
                "    DECLARE vMfgCodeFormat INT;    \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;    \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;    \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;    \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                                          \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                              \n" +
                "			SELECT 		p.id,                                            \n" +
                "					p.systemId,                                        \n" +
                "					p.poNumber,                                              \n" +
                "                    p.poDate,            \n" +
                "                    p.refPurchaseOrderID poId,                        \n" +
                "					p.mfgCodeID,                                              \n" +
                "					p.supplierSONumber,                                              \n" +
                "                    p.soDate,            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                    \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,                    \n" +
                "					p.packingSlipDate,                                              \n" +
                "					p.invoiceNumber,                                              \n" +
                "                    p.lockStatus invoiceLockStatus,                    \n" +
                "					p.invoiceDate,                                  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                                  \n" +
                "					p.creditMemoNumber,                    \n" +
                "                    p.lockStatus creditMemoLockStatus,                    \n" +
                "					p.creditMemoDate,                                              \n" +
                "					p.debitMemoNumber,                                              \n" +
                "                    p.refSupplierCreditMemoNumber,            \n" +
                "                    p.lockStatus debitMemoLockStatus,                    \n" +
                "					p.debitMemoDate,                                              \n" +
                "					p.receiptDate,                                              \n" +
                "					p.description,                                              \n" +
                "					p.billToAddress,                                              \n" +
                "					p.shipToAddress,                                              \n" +
                "					p.poVersion,        \n" +
                "					p.isDeleted,        \n" +
                "					p.receiptType,        \n" +
                "					p.`status`,        \n" +
                "					p.applyDate,        \n" +
                "					p.refParentCreditDebitInvoiceno,        \n" +
                "					p.refPackingSlipNumberForInvoice,        \n" +
                "					p.invoiceTotalDue,        \n" +
                "					p.isTariffInvoice,        \n" +
                "					p.creditMemoType,        \n" +
                "                    (        \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN        \n" +
                "								'Invoice Credit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MC' THEN        \n" +
                "								'MISC Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'RC' THEN        \n" +
                "								'RMA Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'ID' THEN        \n" +
                "								'Invoice Debit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MD' THEN        \n" +
                "								'MISC Debit Memo'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN        \n" +
                "								'Invoice'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN        \n" +
                "								'MISC Invoice'        \n" +
                "						END        \n" +
                "					) subTypeValue,        \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,        \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,        \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                                         \n" +
                "                    m.mfgName supplierName,                          \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,                            \n" +
                "					m.mfgCode supplierCodeName,    \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,    \n" +
                "					(    \n" +
                "						SELECT 	IFNULL(g.cnt,0)    \n" +
                "						FROM 	vu_genericfilescount g    \n" +
                "						WHERE 	g.refTransID = psm.id    \n" +
                "								AND g.entityID = -14    \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'    \n" +
                "					) packingSlipDocCount,    \n" +
                "					pd.itemReceived,    \n" +
                "					pd.otherChargesItemReceived,    \n" +
                "					pd.itemDisapproved,    \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,    \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,    \n" +
                "					ps.status parentInvoiceStatus,    \n" +
                "					ps.invoiceNumber refInvoiceNumber,    \n" +
                "                    ps.lockStatus refInvoiceLockStatus,    \n" +
                "					ps.creditMemoType parentCreditMemoType,    \n" +
                "					pd.totalExtendedAmount,    \n" +
                "                    pd.totalDiscount,    \n" +
                "					pe.totalCreditAmount,    \n" +
                "					pe.totalDebitAmount,    \n" +
                "					(    \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)    \n" +
                "					) amountToPay,    \n" +
                "                    pd.totalExtendedReceivedPrice,    \n" +
                "					pd.packingDetailNote,    \n" +
                "					pd.approveLineCount,    \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN    \n" +
                "											p.debitMemoDate    \n" +
                "										WHEN p.receiptType = 'C' THEN    \n" +
                "											p.creditMemoDate    \n" +
                "										ELSE p.invoiceDate    \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,    \n" +
                "					g.gencCategoryName paymentTermName,    \n" +
                " 					m.paymentTermsID paymentTermsID,    \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,    \n" +
                "					psm.packingSlipModeStatus,    \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,    \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,    \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,      \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,      \n" +
                "					p.invoiceRequireManagementApproval,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN      \n" +
                "								'Yes'      \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN      \n" +
                "								'No'      \n" +
                "						END      \n" +
                "					) invoiceRequireManagementApprovalValue,      \n" +
                "					p.invoiceApprovalStatus,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN      \n" +
                "								'Approved'      \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN      \n" +
                "								'Pending'      \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN      \n" +
                "								'N/A'      \n" +
                "						END      \n" +
                "					) invoiceApprovalStatusValue,      \n" +
                "					p.invoiceApprovedBy,      \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,      \n" +
                "					p.invoiceApprovalDate,      \n" +
                "					p.invoiceApprovalComment,      \n" +
                "					p.internalRemark,      \n" +
                "                    p.remark,      \n" +
                "					p.lockStatus,      \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'      \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'      \n" +
                "						when p.lockStatus = 'LC' then 'Locked'      \n" +
                "						else null end      \n" +
                "					) lockStatusValue,      \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,      \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,      \n" +
                "                    case when p.receiptType = 'I' then      \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))                \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,              \n" +
                "					h1.refType as haltRefType,              \n" +
                "                    h1.status as haltStatus,              \n" +
                "                    (CASE WHEN h1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltStatusText,           \n" +
                "                    (CASE              \n" +
                "							WHEN h1.status = 'H' THEN              \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReason,              \n" +
                "                    psh1.refType as haltRefTypeRefInv,              \n" +
                "                    psh1.status as haltStatusRefInv,              \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInvText,          \n" +
                "                    (CASE              \n" +
                "							WHEN psh1.status = 'H' THEN              \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInv,      \n" +
                "                    p.markedForRefund,      \n" +
                "                    (case when p.markedForRefund = 1 then 'Yes'      \n" +
                "						else 'No' end      \n" +
                "					) markedForRefundValue,      \n" +
                "                    p.markedForRefundAmt      \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)    \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,    \n" +
                "							gFiles.gencFileOwnerType,    \n" +
                "							gFiles.refTransID,    \n" +
                "							gFiles.entityID    \n" +
                "						FROM genericfiles gFiles    \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0    \n" +
                "						and gFiles.entityID in (-13,-15,-16)    \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc    \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15    \n" +
                "																		WHEN p.receiptType = 'D' THEN -16    \n" +
                "																		ELSE -13    \n" +
                "																	END)    \n" +
                "				and psDoc.refTransID = p.id    \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id              \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where h2.refTransId = h1.refTransId    \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')    \n" +
                " 											  and h2.isDeleted = 0)*/            \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID                  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0              \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno              \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where psh1.refTransId = h2.refTransId    \n" +
                " 											  and h2.refType = 'SINV'    \n" +
                " 											  and h2.isDeleted = 0)*/    \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                                              \n" +
                "			left join (              \n" +
                "							select 	a.refPackingSlipMaterialRecID,              \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,              \n" +
                "								sum(a.itemReceived) itemReceived,              \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,              \n" +
                "								sum(a.itemDisapproved) itemDisapproved,              \n" +
                "								sum(a.approveLineCount) approveLineCount,              \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,              \n" +
                "                                sum(discount) totalDiscount,              \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice              \n" +
                "							from 	(                \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,              \n" +
                "										psm.packingSlipSerialNumber,              \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,              \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,              \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/                      \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,                      \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,                      \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                              \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                              \n" +
                "										extendedPrice,                                \n" +
                "                                        discount,                \n" +
                "										extendedReceivedPrice                \n" +
                "									FROM 	packing_slip_material_receive_det psm                                              \n" +
                "									WHERE 	psm.isDeleted = 0                                              \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                              \n" +
                "								) a                                                                                  \n" +
                "							group by a.refPackingSlipMaterialRecID                                                                        \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id    \n" +
                "				left join (select b.refPackingslipInvoiceID,    \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "							  from packingslip_invoice_payment a    \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "							 where a.refPaymentMode IN ('P','RR')    \n" +
                "							   and a.isPaymentVoided = 0    \n" +
                "							   and b.isDeleted = 0    \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id    \n" +
                "				left join (      \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,      \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,      \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,      \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,      \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount      \n" +
                "							from 		packing_slip_material_receive ps      \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID    \n" +
                "                            left join (select b.refPackingslipInvoiceID,    \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "										  from packingslip_invoice_payment a    \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "										 where a.refPaymentMode IN ('P','RR')    \n" +
                "										   and b.isPaymentVoided = 0    \n" +
                "										   and b.isDeleted = 0    \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID    \n" +
                "								  where ps.receiptType in ('C','D')      \n" +
                "									and ps.isDeleted = 0      \n" +
                "									and pd.isDeleted = 0      \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno      \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id      \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",      \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),      \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)      \n" +
                "	);      \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"      \n" +
                "				and exists (select 1      \n" +
                "							  from packingslip_invoice_payment pm      \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id      \n" +
                "							 where pm.isPaymentVoided = 0      \n" +
                "							   and pm.refPaymentMode = 'P'      \n" +
                "							   and pd.refPackingslipInvoiceID = p.id      \n" +
                "							   and pm.isDeleted = 0      \n" +
                "                               and pd.isDeleted = 0      \n" +
                "							   and pm.paymentNumber \",      \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END      \n" +
                "                               ,\") \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");      \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN      \n" +
                "		IF pIsExactSearch = 1 THEN      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		ELSE      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (      \n" +
                "				SELECT 1      \n" +
                "				  FROM packing_slip_material_receive_det x      \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0      \n" +
                "			)      \n" +
                "		\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );      \n" +
                "    PREPARE query1 FROM @SQLStatement1;      \n" +
                "    EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"      \n" +
                "			SELECT 	c.*,      \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,      \n" +
                "				round(c.paidAmount,2) totalPaidAmount,      \n" +
                "                round(c.refundAmount,2) totalRefundAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,      \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete      \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c      \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1059,'1.00','V1','Bug 35435: [Main Branch] When user try to update Supplier RMA Material line - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1059:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,      \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "	IN pDueDate DATE,      \n" +
                "	IN pAdditionalDays INT,      \n" +
                "	IN pTermsAndAboveDays INT,      \n" +
                "	IN pInvoiceNumber VARCHAR(50),      \n" +
                "	IN pIsExactSearch TINYINT,      \n" +
                "	IN pMfrPnId INT,      \n" +
                "    IN pInvoiceIds LONGTEXT,      \n" +
                "    IN pExactPaymentNumberSearch TINYINT,      \n" +
                "    IN pPaymentNumber VARCHAR(50),      \n" +
                "    IN pPaymentTermsIds LONGTEXT,      \n" +
                "    IN pInvoiceFromDate DATE,      \n" +
                "    IN pInvoiceToDate DATE      \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "    DECLARE vCurrentDate DATE;    \n" +
                "    DECLARE vMfgCodeFormat INT;    \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;    \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;    \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;    \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                                          \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                              \n" +
                "			SELECT 		p.id,                                            \n" +
                "					p.systemId,                                        \n" +
                "					p.poNumber,                                              \n" +
                "                    p.poDate,            \n" +
                "                    p.refPurchaseOrderID poId,                        \n" +
                "					p.mfgCodeID,                                              \n" +
                "					p.supplierSONumber,                                              \n" +
                "                    p.soDate,            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                    \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,                    \n" +
                "					p.packingSlipDate,                                              \n" +
                "					p.invoiceNumber,                                              \n" +
                "                    p.lockStatus invoiceLockStatus,                    \n" +
                "					p.invoiceDate,                                  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                                  \n" +
                "					p.creditMemoNumber,                    \n" +
                "                    p.lockStatus creditMemoLockStatus,                    \n" +
                "					p.creditMemoDate,                                              \n" +
                "					p.debitMemoNumber,                                              \n" +
                "                    p.refSupplierCreditMemoNumber,            \n" +
                "                    p.lockStatus debitMemoLockStatus,                    \n" +
                "					p.debitMemoDate,                                              \n" +
                "					p.receiptDate,                                              \n" +
                "					p.description,                                              \n" +
                "					p.billToAddress,                                              \n" +
                "					p.shipToAddress,                                              \n" +
                "					p.poVersion,        \n" +
                "					p.isDeleted,        \n" +
                "					p.receiptType,        \n" +
                "					p.`status`,        \n" +
                "					p.applyDate,        \n" +
                "					p.refParentCreditDebitInvoiceno,        \n" +
                "					p.refPackingSlipNumberForInvoice,        \n" +
                "					p.invoiceTotalDue,        \n" +
                "					p.isTariffInvoice,        \n" +
                "					p.creditMemoType,        \n" +
                "                    (        \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN        \n" +
                "								'Invoice Credit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MC' THEN        \n" +
                "								'MISC Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'RC' THEN        \n" +
                "								'RMA Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'ID' THEN        \n" +
                "								'Invoice Debit Memo (Auto)'        \n" +
                "							WHEN p.creditMemoType = 'MD' THEN        \n" +
                "								'MISC Debit Memo'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN        \n" +
                "								'Invoice'        \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN        \n" +
                "								'MISC Invoice'        \n" +
                "						END        \n" +
                "					) subTypeValue,        \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,        \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,        \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,        \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                                         \n" +
                "                    m.mfgName supplierName,                          \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,                            \n" +
                "					m.mfgCode supplierCodeName,    \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,    \n" +
                "					pg.packingSlipDocCount,    \n" +
                "					pd.itemReceived,    \n" +
                "					pd.otherChargesItemReceived,    \n" +
                "					pd.itemDisapproved,    \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,    \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,    \n" +
                "					ps.status parentInvoiceStatus,    \n" +
                "					ps.invoiceNumber refInvoiceNumber,    \n" +
                "                    ps.lockStatus refInvoiceLockStatus,    \n" +
                "					ps.creditMemoType parentCreditMemoType,    \n" +
                "					pd.totalExtendedAmount,    \n" +
                "                    pd.totalDiscount,    \n" +
                "					pe.totalCreditAmount,    \n" +
                "					pe.totalDebitAmount,    \n" +
                "					(    \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)    \n" +
                "					) amountToPay,    \n" +
                "                    pd.totalExtendedReceivedPrice,    \n" +
                "					pd.packingDetailNote,    \n" +
                "					pd.approveLineCount,    \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN    \n" +
                "											p.debitMemoDate    \n" +
                "										WHEN p.receiptType = 'C' THEN    \n" +
                "											p.creditMemoDate    \n" +
                "										ELSE p.invoiceDate    \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,    \n" +
                "					g.gencCategoryName paymentTermName,    \n" +
                " 					m.paymentTermsID paymentTermsID,    \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,    \n" +
                "					psm.packingSlipModeStatus,    \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,    \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,    \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,      \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,      \n" +
                "					p.invoiceRequireManagementApproval,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN      \n" +
                "								'Yes'      \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN      \n" +
                "								'No'      \n" +
                "						END      \n" +
                "					) invoiceRequireManagementApprovalValue,      \n" +
                "					p.invoiceApprovalStatus,      \n" +
                "					(      \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN      \n" +
                "								'Approved'      \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN      \n" +
                "								'Pending'      \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN      \n" +
                "								'N/A'      \n" +
                "						END      \n" +
                "					) invoiceApprovalStatusValue,      \n" +
                "					p.invoiceApprovedBy,      \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,      \n" +
                "					p.invoiceApprovalDate,      \n" +
                "					p.invoiceApprovalComment,      \n" +
                "					p.internalRemark,      \n" +
                "                    p.remark,      \n" +
                "					p.lockStatus,      \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'      \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'      \n" +
                "						when p.lockStatus = 'LC' then 'Locked'      \n" +
                "						else null end      \n" +
                "					) lockStatusValue,      \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,      \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,      \n" +
                "                    case when p.receiptType = 'I' then      \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))                \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,              \n" +
                "					h1.refType as haltRefType,              \n" +
                "                    h1.status as haltStatus,              \n" +
                "                    (CASE WHEN h1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltStatusText,           \n" +
                "                    (CASE              \n" +
                "							WHEN h1.status = 'H' THEN              \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReason,              \n" +
                "                    psh1.refType as haltRefTypeRefInv,              \n" +
                "                    psh1.status as haltStatusRefInv,              \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN              \n" +
                "								'Halted'          \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInvText,          \n" +
                "                    (CASE              \n" +
                "							WHEN psh1.status = 'H' THEN              \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))              \n" +
                "							ELSE ''              \n" +
                "						END              \n" +
                "					) AS haltReasonRefInv,      \n" +
                "                    p.markedForRefund,      \n" +
                "                    (case when p.markedForRefund = 1 then 'Yes'      \n" +
                "						else 'No' end      \n" +
                "					) markedForRefundValue,      \n" +
                "                    p.markedForRefundAmt      \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)    \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,    \n" +
                "							gFiles.gencFileOwnerType,    \n" +
                "							gFiles.refTransID,    \n" +
                "							gFiles.entityID    \n" +
                "						FROM genericfiles gFiles    \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0    \n" +
                "						and gFiles.entityID in (-13,-15,-16)    \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc    \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15    \n" +
                "																		WHEN p.receiptType = 'D' THEN -16    \n" +
                "																		ELSE -13    \n" +
                "																	END)    \n" +
                "				and psDoc.refTransID = p.id    \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id              \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where h2.refTransId = h1.refTransId    \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')    \n" +
                " 											  and h2.isDeleted = 0)*/            \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID                  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0              \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno              \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)    \n" +
                " 											 from holdunholdtrans h2    \n" +
                " 											where psh1.refTransId = h2.refTransId    \n" +
                " 											  and h2.refType = 'SINV'    \n" +
                " 											  and h2.isDeleted = 0)*/    \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0   \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14    \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'    \n" +
                "            ) pg on pg.refTransID = psm.id    \n" +
                "			left join (              \n" +
                "							select 	a.refPackingSlipMaterialRecID,              \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,              \n" +
                "								sum(a.itemReceived) itemReceived,              \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,              \n" +
                "								sum(a.itemDisapproved) itemDisapproved,              \n" +
                "								sum(a.approveLineCount) approveLineCount,              \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,              \n" +
                "                                sum(discount) totalDiscount,              \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice              \n" +
                "							from 	(                \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,              \n" +
                "										psm.packingSlipSerialNumber,              \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,              \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,              \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/                      \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,                      \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,                      \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                              \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                              \n" +
                "										extendedPrice,                                \n" +
                "                                        discount,                \n" +
                "										extendedReceivedPrice                \n" +
                "									FROM 	packing_slip_material_receive_det psm                                              \n" +
                "									WHERE 	psm.isDeleted = 0                                              \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                              \n" +
                "								) a                                                                                  \n" +
                "							group by a.refPackingSlipMaterialRecID                                                                        \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id    \n" +
                "				left join (select b.refPackingslipInvoiceID,    \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "							  from packingslip_invoice_payment a    \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "							 where a.refPaymentMode IN ('P','RR')    \n" +
                "							   and a.isPaymentVoided = 0    \n" +
                "							   and b.isDeleted = 0    \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id    \n" +
                "				left join (      \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,      \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,      \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,      \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,      \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount      \n" +
                "							from 		packing_slip_material_receive ps      \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID    \n" +
                "                            left join (select b.refPackingslipInvoiceID,    \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,    \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount    \n" +
                "										  from packingslip_invoice_payment a    \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id    \n" +
                "										 where a.refPaymentMode IN ('P','RR')    \n" +
                "										   and b.isPaymentVoided = 0    \n" +
                "										   and b.isDeleted = 0    \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID    \n" +
                "								  where ps.receiptType in ('C','D')      \n" +
                "									and ps.isDeleted = 0      \n" +
                "									and pd.isDeleted = 0      \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno      \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id      \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",      \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),      \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)      \n" +
                "	);      \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"      \n" +
                "				and exists (select 1      \n" +
                "							  from packingslip_invoice_payment pm      \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id      \n" +
                "							 where pm.isPaymentVoided = 0      \n" +
                "							   and pm.refPaymentMode = 'P'      \n" +
                "							   and pd.refPackingslipInvoiceID = p.id      \n" +
                "							   and pm.isDeleted = 0      \n" +
                "                               and pd.isDeleted = 0      \n" +
                "							   and pm.paymentNumber \",      \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END      \n" +
                "                               ,\") \");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");      \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'      \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN      \n" +
                "		IF pIsExactSearch = 1 THEN      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'      \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		ELSE      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"      \n" +
                "									AND (      \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'      \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"      \n" +
                "									  \" ) \"      \n" +
                "						);      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (      \n" +
                "				SELECT 1      \n" +
                "				  FROM packing_slip_material_receive_det x      \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0      \n" +
                "			)      \n" +
                "		\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );      \n" +
                "    PREPARE query1 FROM @SQLStatement1;      \n" +
                "    EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"      \n" +
                "			SELECT 	c.*,      \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,      \n" +
                "				round(c.paidAmount,2) totalPaidAmount,      \n" +
                "                round(c.refundAmount,2) totalRefundAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,      \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete      \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c      \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1060,'1.00','V1','Performance tuning of supplier invoice procedure - Dharmishtha'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1060:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2021  *********************************** */
                "drop procedure if exists `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(                                                    \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN precordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pIsMFG TINYINT,      \n" +
                "    IN pMfgCodeIDs LONGTEXT,      \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,      \n" +
                "    IN pPackagingIDs LONGTEXT,      \n" +
                "    IN pPackageIDs LONGTEXT,      \n" +
                "    IN pPartStatusIDs LONGTEXT,      \n" +
                "    IN pMountingTypeIDs LONGTEXT,      \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,      \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,      \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,      \n" +
                "    IN pAttributesSearchHeader LONGTEXT,      \n" +
                "    IN pAttributesSearch LONGTEXT,      \n" +
                "    IN pPackagingAlias TEXT,      \n" +
                "    IN pAlternatePart TEXT,      \n" +
                "    IN pRoHSAlternatePart TEXT,      \n" +
                "    IN pPartUsedInAssembly TEXT,      \n" +
                "    IN pMultiplePartNumbers LONGTEXT,      \n" +
                "    IN pStockQuantity TEXT,      \n" +
                "    IN pPartTypeIDs LONGTEXT,      \n" +
                "    IN pCertificateStandardsIds LONGTEXT,      \n" +
                "    IN pStandardsClassIds LONGTEXT,      \n" +
                "    IN pAssemblyIds LONGTEXT,      \n" +
                "    IN pAssemblyTypeIds LONGTEXT,      \n" +
                "    IN pRohsIds LONGTEXT,      \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,      \n" +
                "    IN pOperationalAttributeIds LONGTEXT,      \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,      \n" +
                "    IN pComponentOrdering TEXT,      \n" +
                "    IN pComponentUsageCriteria TEXT,      \n" +
                "    IN pIsRefreshMasterFilters TINYINT,      \n" +
                "    IN pFromDate DATE,      \n" +
                "    IN pToDate DATE,      \n" +
                "    IN pIsReversal TINYINT,      \n" +
                "    IN pIsBOMActivityStarted TINYINT,      \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,      \n" +
                "    IN pIsSearchFromHeader TINYINT,      \n" +
                "    IN pIsExportControl TINYINT,      \n" +
                "    IN pObsoleteDate DATE,      \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,      \n" +
                "    IN pFromCreatedOnDate DATE,      \n" +
                "    IN pToCreatedOnDate DATE,      \n" +
                "    IN pIsIdenticalMfrPN TINYINT,      \n" +
                "    IN pIsProductionPNEmpty TINYINT,      \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,      \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,      \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),      \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,      \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,      \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,      \n" +
                "    IN pIsRestrictUsePermanently TINYINT,      \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT      \n" +
                "    )  \n" +
                "BEGIN                                                    \n" +
                "	DECLARE pOffset INT;                                                     \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                \n" +
                "    DECLARE attributeSearchString LONGTEXT;                                                                \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;                                                                \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                                \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                                                                \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);                                                                \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);                                                                \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                   \n" +
                "    DECLARE vTimeZone VARCHAR(50);            \n" +
                "    DECLARE vCurrentSession datetime;      \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                          \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;        \n" +
                "  \n" +
                "  SET @SQLStatement1=\"                                                                        \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode      \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink      \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock      \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit      \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating      \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp      \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category    \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently      \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt      \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean      \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,                                                     \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,    \n" +
                "		gc.name AS partStatusValue,                                                    \n" +
                "        gc.displayOrder parStatusDisplayOrder,                                                    \n" +
                "		mf.mfgType \";                                                        \n" +
                "	IF pIsMFG = TRUE THEN                                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                        \n" +
                "			null AliasMFGPN,                                                        \n" +
                "			null AliasMFGCode,                                                    \n" +
                "			null AliasMFGCodeID,                                                    \n" +
                "			null AliascompID,                                                    \n" +
                "			null AliasMFGName,                                                    \n" +
                "            null AliasMFGDisplayOrder\");                                                     \n" +
                "    ELSE                                                    \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                        \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/                                                        \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,                                                    \n" +
                "        mfc.id AliasMFGCodeID,                                                    \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,                                                    \n" +
                "        mfc.mfgName as AliasMFGName,                                                    \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");                                                     \n" +
                "	END IF;                                                        \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                        \n" +
                "		ro.name AS `rohsComplientConvertedValue`,                                                      \n" +
                "        ro.displayOrder rohsDisplayOrder,                                                    \n" +
                "		ro.rohsIcon AS `rohsIcon`,                                                        \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'                                                        \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'                                                        \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'                                                        \n" +
                "					ELSE '' END) AS `isGoodPartValue`,                                                        \n" +
                "		case when co.isCustom = 1 then                                                    \n" +
                "				'Yes'                                                    \n" +
                "			else 'No' end as isCustomValue,                                                         \n" +
                "		case when co.isCPN = 1 then                                                    \n" +
                "				'Yes'                                                    \n" +
                "			else 'No' end as isCPNValue,                                                    \n" +
                "		pt.partTypeName functionalCategoryName,                                                        \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,                                                    \n" +
                "		mt.name mountingTypeName,                                                        \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,                                                    \n" +
                "		pc.categoryName,    \n" +
                "		rct.name connecterTypeName,                                                        \n" +
                "		u.unitName,                                                        \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,                                                        \n" +
                "		pck.name packagingName,                                                        \n" +
                "        pck.displayOrder packagingDisplayOrder,                                                    \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'                                                        \n" +
                "					ELSE 'No' END) AS `reversalPart`, 	          \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,          \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,      \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,       \n" +
                "		rc.name as createdbyRoleValue,      \n" +
                "		ru.name as updatedbyRoleValue,              \n" +
                "        co.createdAt,      \n" +
                " 		co.updatedAt,      \n" +
                "        co.updatedAtApi,           \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'                                                        \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,                                                        \n" +
                "        pct.name packageCaseTypeValue,                                                        \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,                                                        \n" +
                "		case when co.category = 3 then                                                        \n" +
                "			fun_getSamplePicturesUploadCount(co.id)                                                        \n" +
                "		end uploadedSamplePicturesCount,                                                        \n" +
                "		case when co.category = 3 then                                                        \n" +
                "			vurfass.count                                                       \n" +
                "		end assemblyCount,                                                        \n" +
                "		case when co.category = 3 then                                                        \n" +
                "			 vurline.lineCount                                                  \n" +
                "		end bomLineCount,                                                        \n" +
                "		case when co.category = 3 then                                                        \n" +
                "			vurfass.quoteProgress                                                        \n" +
                "		end quoteProgress,                                                  \n" +
                "		CASE when co.category = 3 then                                                        \n" +
                "		 	vurfass.id      \n" +
                "		END rfqAssyID,                                                    \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,                                                        \n" +
                "		case when co.isActivityStart=true then                                                        \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')                                                        \n" +
                "			else null end activityStartTime,                                                        \n" +
                "		rat.name assemblyTypeName,                              \n" +
                "		CASE when co.frequency = 1 then                                                        \n" +
                "		 	'Every' when    co.frequency = 2 then                                 \n" +
                "		 	'First' when  co.frequency = 3 then                               \n" +
                "		 	'Last' else ''                                                       \n" +
                "		END frequencyName,                                    \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,                            \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,                \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,              \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,              \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,        \n" +
                "        vucomstd.certificatelist\");                                                        \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN                                                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");                                                        \n" +
                "	ELSE                                  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");                                                        \n" +
                "	END IF;                                                        \n" +
                "    IF pComponentOrdering = 'USAGE' THEN                                                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");                                  \n" +
                "	ELSE                                  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");                                  \n" +
                "	END IF;                                                        \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN                                                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)                                                        \n" +
                "													  from eco_request ec                                                        \n" +
                "													 where ec.isdeleted = 0                                                        \n" +
                "													   and ec.finalstatus = 'P'                                                        \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");                                  \n" +
                "	ELSE                                  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");                                  \n" +
                "	END IF;                                                   \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN                                                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");                                  \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");                                  \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"                                                        \n" +
                "	FROM component co             \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType                                                        \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id                                                            \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus                                                            \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id                                                            \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                                                            \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                                                            \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID                                    \n" +
                " 		JOIN uoms u ON u.id = co.uom                                                        \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID                                                        \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID                                                        \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy                                                        \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType                                                        \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID               \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId              \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId                  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id      \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy      \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy                                                              \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId        \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId            \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id      \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");                                                     \n" +
                "    IF pIsMFG = FALSE THEN                                                  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId   \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");                                                  \n" +
                "	END IF;                                                  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                  \n" +
                "    WHERE co.isdeleted = 0 \");                                                  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN                                                  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');                                                  \n" +
                "    ELSE                                                  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');                                                  \n" +
                "    END IF;                                                  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')                      \n" +
                "    THEN                      \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')                      \n" +
                "        THEN                        \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');                      \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')                      \n" +
                "        THEN                      \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');                      \n" +
                "		ELSE                              \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');                      \n" +
                "        END IF;                      \n" +
                "    END IF;                          \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                  \n" +
                "		IF pComponentOrdering = 'MFG' THEN                                                  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);                                                  \n" +
                "            END IF;                                                  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN                                                  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);                                                  \n" +
                "			END IF;                                                  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN                                                  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);                                                  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN                                                  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);                                                  \n" +
                "		END IF;                                                  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                  \n" +
                "	ELSE                                                  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;                                                  \n" +
                "	END IF;                                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                        \n" +
                "		SET pWhereClause = '1=1' ;                                                                        \n" +
                "	END IF;                                                                        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                    \n" +
                "	ELSE                                                    \n" +
                "		SET rowNumWhere = '';                                                    \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN                                                    \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN                                                    \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');                                                    \n" +
                "    END IF;                                                    \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND packagingID in (', pPackagingIDs, ' )');                                                                        \n" +
                "    END IF;                        \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partPackageID in (', pPackageIDs, ' )');                                                                        \n" +
                "    END IF;                          \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partStatus in (', pPartStatusIDs, ' )');                                                                        \n" +
                "    END IF;                                                                        \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');                                                                        \n" +
                "    END IF;                                                                        \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeText in (', pExternalMountingTypeValues, ' )');                                                                        \n" +
                "    END IF;                                                                        \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');                                                                        \n" +
                "    END IF;                                                                        \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');                                                                        \n" +
                "    END IF;                                                                        \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN                                                                        \n" +
                "		IF pIsMFG = TRUE THEN                                                                        \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                                      \n" +
                "																OR exists (select 1 from component_otherpn cp                                                                      \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                      \n" +
                "																)');                                                                        \n" +
                "		ELSE                                                                        \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                                        \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID                                                      \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                      \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))                                                                      \n" +
                "                                                                OR exists (select 1 from component_otherpn cp                                                                      \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                      \n" +
                "                                                                )');                                                                        \n" +
                "        END IF;                                                                        \n" +
                "    END IF;                                                                        \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partType in (', pPartTypeIDs, ' )');                                                                        \n" +
                "    END IF;                                                                        \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND                                                                        \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                        \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');                                                                        \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                        \n" +
                "    END IF;                                                                        \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN                                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                            \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                            \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');                                                            \n" +
                "    END IF;                                                            \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN                                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');                                                            \n" +
                "    END IF;                                                            \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');                                                                        \n" +
                "    END IF;                                          \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');                                                                        \n" +
                "    END IF;                                          \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');                                                              \n" +
                "    END IF;                                          \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');                                                              \n" +
                "    END IF;                                          \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');                                          \n" +
                "    END IF;                                          \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN                                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");                                                                \n" +
                "    END IF;                                    \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');                                                              \n" +
                "    END IF;            \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                          \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');                                    \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                    \n" +
                "    END IF;                                    \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');                                  \n" +
                "    END IF;                                  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd                                                                       \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false                                                                       \n" +
                "														 and cd.deletedat is null                                                                       \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');                                                                      \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd                                \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false                                \n" +
                "														 and cd.deletedat is null                                \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');                                \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN                                                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca                                                                      \n" +
                "														  where ca.isdeleted = false                                                                      \n" +
                "															and ca.deletedat is null                                                                      \n" +
                "															and ca.refComponentID = co.id                                                                      \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');                                                                      \n" +
                "    END IF;                                                                        \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE || pIsRestrictPackagingUseWithpermission = true || pIsRestrictUsePermanently = true || pIsRestrictPackagingUsePermanently = true)        \n" +
                "    THEN              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');        \n" +
                "        set @restricStatement = '';        \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN                                                              \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN                                                              \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');        \n" +
                "		END IF;        \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN                                                              \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');        \n" +
                "		END IF;        \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN                                                              \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');                                                          \n" +
                "		END IF;        \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');        \n" +
                "    END IF;        \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');                                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                  \n" +
                "																		AND isdeleted = 0                                                                 \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');                                                                    \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                                  \n" +
                "																		AND isdeleted = 0                                                                \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfPosition like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfRows like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR length like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR width like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR height like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                                                                      \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          IF pIsMFG = FALSE THEN                                                              \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc                                                                       \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID                                                       \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                       \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )                                                                      \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))                                                                      \n" +
                "																		');                                                                        \n" +
                "          END IF;                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');                     \n" +
                "    END IF;                                                                \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                                                                \n" +
                "		SET attributeSearchString = pAttributesSearch;                                                                \n" +
                "       do_this:                                                                \n" +
                "	  LOOP                                                                \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);                          \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);                          \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);                          \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);                          \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                  \n" +
                "																		AND isdeleted = 0                          \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                          \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                                 \n" +
                "																		AND  isdeleted = 0                          \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                          \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');                          \n" +
                "          /*IF pIsMFG = FALSE THEN                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');                          \n" +
                "          END IF;  */                          \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN                          \n" +
                "		  LEAVE do_this;                          \n" +
                "		END IF;                          \n" +
                "	  END LOOP do_this;                          \n" +
                "    END IF;                          \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN                          \n" +
                "		IF (pPackagingAlias = '1') THEN                          \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');                          \n" +
                "		ELSE                          \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');                          \n" +
                "		END IF;                          \n" +
                "	END IF;                          \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN                          \n" +
                "			IF (pAlternatePart = '1') THEN                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');                          \n" +
                "			ELSE                                                                        \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');                          \n" +
                "			END IF;                          \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');                          \n" +
                "		END IF;                          \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN                          \n" +
                "			IF (pRoHSAlternatePart = '1') THEN                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');                          \n" +
                "			ELSE                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');                          \n" +
                "			END IF;                          \n" +
                "		END IF;                          \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN                          \n" +
                "			SET vPartUsedInAssemblyExists = \" \";                          \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";                          \n" +
                "			IF (pPartUsedInAssembly = '1') THEN                          \n" +
                "				SET vPartUsedInAssemblyExists = \" \";                          \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";                          \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN                          \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";                          \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";                          \n" +
                "            END IF;                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2                          \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                          \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                          \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');                          \n" +
                "  \n" +
                "		END IF;                                  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);                                  \n" +
                "	END IF;                                  \n" +
                "   IF pIsExportControl = 1 THEN                                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');                                  \n" +
                "   END IF;                                  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');                      \n" +
                "	END IF;      \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;      \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData      \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,          \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,                                                  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,                                                  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue          \n" +
                "									from ( \", @SQLStatement1,\" ) c                                  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);                                  \n" +
                "    /*main query create temp table*/       \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;         \n" +
                "  /* to get total count of rows */                                  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);                          \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");           \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                   \n" +
                "	DEALLOCATE PREPARE query2;  */         \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");                                  \n" +
                "    /*main query create temp table*/       \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;               \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN                                  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,                                  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                  \n" +
                "											partType,categoryName,                                  \n" +
                "											functionalCategoryText,                                  \n" +
                "											mountingTypeText,                                  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                  \n" +
                "											  rohsText,                                  \n" +
                "                                            AliasMFGCodeID,                                  \n" +
                "                                            AliasMFGCode,                                  \n" +
                "                                            AliasMFGName,                                  \n" +
                "                                            AliasMFGDisplayOrder,                                                                  \n" +
                "                                            packageCaseTypeValue,                      \n" +
                "                                            partPackageID                      \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"                                  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,                                  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                  \n" +
                "											partType,categoryName,                                  \n" +
                "											functionalCategoryText,                                  \n" +
                "											mountingTypeText,                                  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                  \n" +
                "											  rohsText,                                                    \n" +
                "                                            AliasMFGCodeID,                                                    \n" +
                "                                            AliasMFGCode,                                                    \n" +
                "                                            AliasMFGName,                                                    \n" +
                "                                            AliasMFGDisplayOrder,                      \n" +
                "                                            packageCaseTypeValue,                      \n" +
                "                                            partPackageID\");                                       \n" +
                "		 PREPARE query3 FROM @SQLStatement2;                                                        \n" +
                "		EXECUTE query3;                                                        \n" +
                "		DEALLOCATE PREPARE query3;                                              \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )                                                        \n" +
                "									select * from                                                        \n" +
                "										(select case when stdc.classID is not null then                                                        \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)                                                        \n" +
                "													else cs.certificateStandardID end certificateStandardID,                                                        \n" +
                "												case when stdc.classID is not null then                                                        \n" +
                "													concat(cs.fullName,' ',stdc.classname)                                                        \n" +
                "													else cs.fullName end fullName,                                                        \n" +
                "												cs.displayOrder                                                        \n" +
                "										  from certificate_standards cs                                                        \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID                                                        \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID                                                        \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)                                                        \n" +
                "										) a group by certificateStandardID, fullName, displayOrder                                                        \n" +
                "										order by displayOrder,fullName\");                                                        \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                        \n" +
                "		EXECUTE query3;                                                        \n" +
                "		DEALLOCATE PREPARE query3;  */                                                      \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName                                                        \n" +
                "					  from component_acceptable_shipping_countries casc                                                        \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid                                                        \n" +
                "					 where casc.isdeleted = false                                                        \n" +
                "					   and casc.deletedat is null                                                        \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                        \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )                                                        \n" +
                "                                    order by cm.countryName\");                                                        \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                        \n" +
                "		EXECUTE query3;                                                        \n" +
                "		DEALLOCATE PREPARE query3;  */                                                      \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName                                                        \n" +
                "					  from component_dynamic_attribute_mapping_part cdam                                                        \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID                                                        \n" +
                "					 where cdam.isdeleted = false                                                        \n" +
                "					   and cdam.deletedat is null                                                        \n" +
                "					   and cda.isdeleted = false                                                        \n" +
                "					   and cda.deletedat is null                                                        \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                        \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )                                                        \n" +
                "                                     order by cda.attributeName\");                                                        \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                        \n" +
                "		EXECUTE query3;                                                        \n" +
                "		DEALLOCATE PREPARE query3;  */                                                      \n" +
                "    END IF;                                                        \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN                                                        \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/                                                        \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,                                                        \n" +
                "											null groupNameText,                                                        \n" +
                "											functionalCategoryID, mountingTypeID,                                                        \n" +
                "											count(1) recCount                                                        \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,                                                        \n" +
                "										' group by functionalCategoryName,mountingTypeName,                                    \n" +
                "													functionalCategoryID, mountingTypeID                                                        \n" +
                "											order by groupName, groupNameText, recCount desc');                                                        \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;                                                        \n" +
                "			EXECUTE query3;                                                        \n" +
                "			DEALLOCATE PREPARE query3;                                                        \n" +
                "        END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1061,'1.00','V1','Bug 35440: Part Master: Supplier Part List page showing the incorrect date and time - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1061:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-07-2021  *********************************** */
                "drop procedure if exists `Sproc_ManageHoldResumeTrans`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageHoldResumeTrans`(  \n" +
                "IN pRefTransId INT,  \n" +
                "IN pRefType VARCHAR(10),  \n" +
                "IN pStatus VARCHAR(4),  \n" +
                "IN pReason VARCHAR(500),  \n" +
                "IN pResumeReason VARCHAR(500),  \n" +
                "IN pEmployeeID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_isValidationPassed tinyint default true;  \n" +
                "    DECLARE v_Count int;  \n" +
                "    DECLARE v_Status VARCHAR(10);  \n" +
                "	DECLARE v_UpdateId INT;  \n" +
                "    DECLARE v_HEmployeeId INT;  \n" +
                "    DECLARE v_REmployeeId INT;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS  temp_HoldUnholdTrans_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_HoldUnholdTrans_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		ErrorCode INT,  \n" +
                "		HRStatus VARCHAR(50),  \n" +
                "		EmpName VARCHAR(50),  \n" +
                "		insertUpdatePKID INT  \n" +
                "	);  \n" +
                "	if pRefType in ('SINV','SDM','SCM') then  \n" +
                "		  select count(1) into v_Count  \n" +
                "			from packing_slip_material_receive  \n" +
                "		   where id = pRefTransId  \n" +
                "             and status = 'P';  \n" +
                "		if (v_Count <> 0) then  \n" +
                "			set v_isValidationPassed = false;  \n" +
                "            INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "					 VALUES (FALSE, 2,'ALREADY_PAID',fun_getUserNameByEmployeID(v_HEmployeeId));  \n" +
                "		else  \n" +
                "			select count(1) into v_Count  \n" +
                "			 from packing_slip_material_receive  \n" +
                "		    where id = pRefTransId  \n" +
                "              and lockStatus = 'LC';  \n" +
                "              if (v_Count <> 0) then  \n" +
                "				set v_isValidationPassed = false;  \n" +
                "				INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "						 VALUES (FALSE, 2,'ALREADY_LOCKED',fun_getUserNameByEmployeID(v_HEmployeeId));  \n" +
                "			 end if;  \n" +
                "        end if;  \n" +
                "    end if;  \n" +
                "    if (v_isValidationPassed = true) then  \n" +
                "		SELECT hut.id,hut.status,hut.holdEmployeeId,hut.unHoldEmployeeId INTO v_UpdateId,v_Status,v_HEmployeeId,v_REmployeeId  \n" +
                "		  FROM holdunholdtrans hut  \n" +
                "		  WHERE hut.id= (SELECT MAX(ht.id)  \n" +
                "						   FROM holdunholdtrans ht  \n" +
                "						  WHERE hut.refTransId = ht.refTransId  \n" +
                "							AND ht.refType = pRefType  \n" +
                "							AND ht.isDeleted = 0)  \n" +
                "		  AND hut.refTransId=pRefTransId;  \n" +
                "  \n" +
                "		IF (v_Status = pStatus) THEN  \n" +
                "				IF(v_Status = 'H') THEN  \n" +
                "					INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "					 VALUES (FALSE, 1,'halted',fun_getUserNameByEmployeID(v_HEmployeeId));  \n" +
                "			 ELSE  \n" +
                "					INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,HRStatus,EmpName)  \n" +
                "					 VALUES (FALSE, 1,'resumed',fun_getUserNameByEmployeID(v_REmployeeId));  \n" +
                "			 END IF;  \n" +
                "		ELSE  \n" +
                "			IF (pStatus = 'H') THEN  \n" +
                "				INSERT INTO holdunholdtrans(refTransId,refType,STATUS,startDate,reason,holdEmployeeId,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "				VALUES (pRefTransId,pRefType,pStatus,fun_DatetimetoUTCDateTime(),pReason,pEmployeeID,pUserID,pUserID,pRoleID,pRoleID);  \n" +
                "                /*maintain hold resume transaction id to use on suppleir invoice list SP to display status*/  \n" +
                "                if pRefType in ('SINV','SDM','SCM') then  \n" +
                "					update packing_slip_material_receive  \n" +
                "                       set holdUnholdId = LAST_INSERT_ID()  \n" +
                "					 where id = pRefTransId  \n" +
                "                       and receiptType in ('I','C','D')  \n" +
                "                       and isDeleted = 0;  \n" +
                "                     if pRefType = 'SINV' then  \n" +
                "						update packing_slip_material_receive  \n" +
                "						   set refParentCreditDebitInvoiceHoldUnholdId = LAST_INSERT_ID()  \n" +
                "						 where refParentCreditDebitInvoiceno = pRefTransId  \n" +
                "                           and receiptType in ('C','D')  \n" +
                "                           and isDeleted = 0;  \n" +
                "                     end if;  \n" +
                "                end if;  \n" +
                "				INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,insertUpdatePKID) VALUES (TRUE, 0 , LAST_INSERT_ID());  \n" +
                "			ELSE  \n" +
                "					UPDATE holdunholdtrans  \n" +
                "					   SET STATUS = 'R',  \n" +
                "							endDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							unHoldEmployeeId = pEmployeeID,  \n" +
                "							resumeReason = pResumeReason,  \n" +
                "							updatedBy = pUserID,  \n" +
                "							updateByRoleId = pRoleID  \n" +
                "					  WHERE id = v_UpdateId;  \n" +
                "					INSERT INTO temp_HoldUnholdTrans_Error (IsSuccess, ErrorCode,insertUpdatePKID) VALUES (TRUE, 0 , v_UpdateId);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT IsSuccess, ErrorCode, HRStatus, EmpName, insertUpdatePKID  \n" +
                "	FROM temp_HoldUnholdTrans_Error;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1062,'1.00','V1','Bug 35477: Supplier Invoice: Halt Invoice button is not working - hotfix - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1062:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021  *********************************** */
                "drop procedure if exists `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(                                                      \n" +
                "	IN ppageIndex INT,        \n" +
                "	IN precordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pIsMFG TINYINT,        \n" +
                "    IN pMfgCodeIDs LONGTEXT,        \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,        \n" +
                "    IN pPackagingIDs LONGTEXT,        \n" +
                "    IN pPackageIDs LONGTEXT,        \n" +
                "    IN pPartStatusIDs LONGTEXT,        \n" +
                "    IN pMountingTypeIDs LONGTEXT,        \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,        \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,        \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,        \n" +
                "    IN pAttributesSearchHeader LONGTEXT,        \n" +
                "    IN pAttributesSearch LONGTEXT,        \n" +
                "    IN pPackagingAlias TEXT,        \n" +
                "    IN pAlternatePart TEXT,        \n" +
                "    IN pRoHSAlternatePart TEXT,        \n" +
                "    IN pPartUsedInAssembly TEXT,        \n" +
                "    IN pMultiplePartNumbers LONGTEXT,        \n" +
                "    IN pStockQuantity TEXT,        \n" +
                "    IN pPartTypeIDs LONGTEXT,        \n" +
                "    IN pCertificateStandardsIds LONGTEXT,        \n" +
                "    IN pStandardsClassIds LONGTEXT,        \n" +
                "    IN pAssemblyIds LONGTEXT,        \n" +
                "    IN pAssemblyTypeIds LONGTEXT,        \n" +
                "    IN pRohsIds LONGTEXT,        \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,        \n" +
                "    IN pOperationalAttributeIds LONGTEXT,        \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,        \n" +
                "    IN pComponentOrdering TEXT,        \n" +
                "    IN pComponentUsageCriteria TEXT,        \n" +
                "    IN pIsRefreshMasterFilters TINYINT,        \n" +
                "    IN pFromDate DATE,        \n" +
                "    IN pToDate DATE,        \n" +
                "    IN pIsReversal TINYINT,        \n" +
                "    IN pIsBOMActivityStarted TINYINT,        \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,        \n" +
                "    IN pIsSearchFromHeader TINYINT,        \n" +
                "    IN pIsExportControl TINYINT,        \n" +
                "    IN pObsoleteDate DATE,        \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,        \n" +
                "    IN pFromCreatedOnDate DATE,        \n" +
                "    IN pToCreatedOnDate DATE,        \n" +
                "    IN pIsIdenticalMfrPN TINYINT,        \n" +
                "    IN pIsProductionPNEmpty TINYINT,        \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,        \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,        \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),        \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,        \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,        \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,        \n" +
                "    IN pIsRestrictUsePermanently TINYINT,        \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT        \n" +
                "    )  \n" +
                "BEGIN                                                      \n" +
                "	DECLARE pOffset INT;                                                       \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                  \n" +
                "    DECLARE attributeSearchString LONGTEXT;                                                                  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;                                                                  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                                  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                                                                  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);                                                                  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);                                                                  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                     \n" +
                "    DECLARE vTimeZone VARCHAR(50);              \n" +
                "    DECLARE vCurrentSession datetime;        \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;             \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                            \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;          \n" +
                "  \n" +
                "  SET @SQLStatement1=\"                                                                          \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode        \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink        \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock        \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit        \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating        \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp        \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category      \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently        \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt        \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean        \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,                                                       \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,      \n" +
                "		gc.name AS partStatusValue,                                                      \n" +
                "        gc.displayOrder parStatusDisplayOrder,                                                      \n" +
                "		mf.mfgType \";                                                          \n" +
                "	IF pIsMFG = TRUE THEN                                                      \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                          \n" +
                "			null AliasMFGPN,                                                          \n" +
                "			null AliasMFGCode,                                                      \n" +
                "			null AliasMFGCodeID,                                                      \n" +
                "			null AliascompID,                                                      \n" +
                "			null AliasMFGName,                                                      \n" +
                "            null AliasMFGDisplayOrder\");                                                       \n" +
                "    ELSE                                                      \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                          \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/                                                          \n" +
                "         vu_co.MFGPN AliasMFGPN,    \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,                                                      \n" +
                "        mfc.id AliasMFGCodeID,                                                      \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,                                                      \n" +
                "        mfc.mfgName as AliasMFGName,                                                      \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");                                                       \n" +
                "	END IF;                                                          \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                                          \n" +
                "		ro.name AS `rohsComplientConvertedValue`,                                                        \n" +
                "        ro.displayOrder rohsDisplayOrder,                                                      \n" +
                "		ro.rohsIcon AS `rohsIcon`,                                                          \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'                                                          \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'                                                          \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'                                                          \n" +
                "					ELSE '' END) AS `isGoodPartValue`,                                                          \n" +
                "		case when co.isCustom = 1 then                                                      \n" +
                "				'Yes'                                                      \n" +
                "			else 'No' end as isCustomValue,                                                           \n" +
                "		case when co.isCPN = 1 then                                                      \n" +
                "				'Yes'                                                      \n" +
                "			else 'No' end as isCPNValue,                                                      \n" +
                "		pt.partTypeName functionalCategoryName,                                                          \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,                                                      \n" +
                "		mt.name mountingTypeName,                                                          \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,                                                      \n" +
                "		pc.categoryName,      \n" +
                "		rct.name connecterTypeName,                                                          \n" +
                "		u.unitName,                                                          \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,                                                          \n" +
                "		pck.name packagingName,                                                          \n" +
                "        pck.displayOrder packagingDisplayOrder,                                                      \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'                                                          \n" +
                "					ELSE 'No' END) AS `reversalPart`, 	            \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,            \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,        \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,         \n" +
                "		rc.name as createdbyRoleValue,        \n" +
                "		ru.name as updatedbyRoleValue,                \n" +
                "        co.createdAt,        \n" +
                " 		co.updatedAt,        \n" +
                "        co.updatedAtApi,             \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'                                                          \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,                                                          \n" +
                "        pct.name packageCaseTypeValue,                                                          \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			fun_getSamplePicturesUploadCount(co.id)                                                          \n" +
                "		end uploadedSamplePicturesCount,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			vurfass.count                                                         \n" +
                "		end assemblyCount,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			 vurline.lineCount                                                    \n" +
                "		end bomLineCount,                                                          \n" +
                "		case when co.category = 3 then                                                          \n" +
                "			vurfass.quoteProgress                                                          \n" +
                "		end quoteProgress,                                                    \n" +
                "		CASE when co.category = 3 then                                                          \n" +
                "		 	vurfass.id        \n" +
                "		END rfqAssyID,                                                      \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,                                                          \n" +
                "		case when co.isActivityStart=true then                                                          \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')                                                          \n" +
                "			else null end activityStartTime,                                                          \n" +
                "		rat.name assemblyTypeName,                                \n" +
                "		CASE when co.frequency = 1 then                                                          \n" +
                "		 	'Every' when    co.frequency = 2 then                                   \n" +
                "		 	'First' when  co.frequency = 3 then                                 \n" +
                "		 	'Last' else ''                                                         \n" +
                "		END frequencyName,                                      \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,                              \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,                  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,                \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,                \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,          \n" +
                "        vucomstd.certificatelist\");                                                          \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");                                                          \n" +
                "	ELSE                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");                                                          \n" +
                "	END IF;                                                          \n" +
                "    IF pComponentOrdering = 'USAGE' THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");                                    \n" +
                "	ELSE                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");                                    \n" +
                "	END IF;                                                          \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)                                                          \n" +
                "													  from eco_request ec                                                          \n" +
                "													 where ec.isdeleted = 0                                                          \n" +
                "													   and ec.finalstatus = 'P'                                                          \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");                                    \n" +
                "	ELSE                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");                                    \n" +
                "	END IF;                                                     \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN                                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");                                    \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                    \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");                                    \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"                                                          \n" +
                "	FROM component co               \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType                                                          \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id                                                              \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus                                                              \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id                                                              \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                                                              \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                                                              \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID                                      \n" +
                " 		JOIN uoms u ON u.id = co.uom                                                          \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID                                                          \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID                                                          \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy                                                          \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType                                                          \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID                 \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId                \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId                    \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id        \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy        \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy                                                                \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId          \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId              \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id        \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");                                                       \n" +
                "    IF pIsMFG = FALSE THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                    \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId     \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");                                                    \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                                    \n" +
                "    WHERE co.isdeleted = 0 \");                                                    \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN                                                    \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');                                                    \n" +
                "    ELSE                                                    \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');                                                    \n" +
                "    END IF;                                                    \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')                        \n" +
                "    THEN                        \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')                        \n" +
                "        THEN                          \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');                        \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')                        \n" +
                "        THEN                        \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');                        \n" +
                "		ELSE                                \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');                        \n" +
                "        END IF;                        \n" +
                "    END IF;                            \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                    \n" +
                "		IF pComponentOrdering = 'MFG' THEN                                                    \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                    \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);                                                    \n" +
                "            END IF;                                                    \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN                                                    \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                                    \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);                                                    \n" +
                "			END IF;                                                    \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN                                                    \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);                                                    \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN                                                    \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);                                                    \n" +
                "		END IF;                                                    \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                    \n" +
                "	ELSE                                                    \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;                                                    \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                          \n" +
                "		SET pWhereClause = '1=1' ;                                                                          \n" +
                "	END IF;                                                                          \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                      \n" +
                "	ELSE                                                      \n" +
                "		SET rowNumWhere = '';                                                      \n" +
                "	END IF;                                                      \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN                                                      \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');                                                      \n" +
                "    END IF;                                                      \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN                                                      \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');                                                      \n" +
                "    END IF;                                                      \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');                                                                          \n" +
                "    END IF;                          \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');                                                                          \n" +
                "    END IF;                            \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN                                                                          \n" +
                "		IF pIsMFG = TRUE THEN                                                                          \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )                                                                        \n" +
                "																OR exists (select 1 from component_otherpn cp                                                                        \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                        \n" +
                "																)');                                                                          \n" +
                "		ELSE                                                                          \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )                                                                          \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID                                                        \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                        \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))                                                                        \n" +
                "                                                                OR exists (select 1 from component_otherpn cp                                                                        \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                                        \n" +
                "                                                                )');                                                                          \n" +
                "        END IF;                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND                                                                          \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                          \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');                                                                          \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                                          \n" +
                "    END IF;                                                                          \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                              \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                              \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');                                                              \n" +
                "    END IF;                                                              \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');                                                                          \n" +
                "    END IF;                                            \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');                                                                          \n" +
                "    END IF;                                            \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN                                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');                                                                \n" +
                "    END IF;                                            \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN                                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');                                                                \n" +
                "    END IF;                                            \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN                                            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');                                            \n" +
                "    END IF;                                            \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN                                                                  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");                                                                  \n" +
                "    END IF;                                      \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN                                                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');                                                                \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                            \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');                                      \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                      \n" +
                "    END IF;                                      \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');                                    \n" +
                "    END IF;                                    \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd                                                                         \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false                                                                         \n" +
                "														 and cd.deletedat is null                                                                         \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');                                                                        \n" +
                "    END IF;                                  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN                                  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd                                  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false                                  \n" +
                "														 and cd.deletedat is null                                  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');                                  \n" +
                "    END IF;                                  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN                                                                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca                                                                        \n" +
                "														  where ca.isdeleted = false                                                                        \n" +
                "															and ca.deletedat is null                                                                        \n" +
                "															and ca.refComponentID = co.id                                                                        \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');                                                                        \n" +
                "    END IF;                                                                          \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE || pIsRestrictPackagingUseWithpermission = true || pIsRestrictUsePermanently = true || pIsRestrictPackagingUsePermanently = true)          \n" +
                "    THEN                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');          \n" +
                "        set @restricStatement = '';          \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN                                                                \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN                                                                \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');          \n" +
                "		END IF;          \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN                                                                \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');          \n" +
                "		END IF;          \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN                                                                \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');                                                            \n" +
                "		END IF;          \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');          \n" +
                "    END IF;          \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                    \n" +
                "																		AND isdeleted = 0                                                                   \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');                                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                                    \n" +
                "																		AND isdeleted = 0                                                                  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');                                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');                                                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                                                                        \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');                                                                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');                                                                  \n" +
                "          IF pIsMFG = FALSE THEN                                                                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc                                                                         \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID                                                         \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                                         \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )                                                                        \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))                                                                        \n" +
                "																		');                                                                          \n" +
                "          END IF;                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');                       \n" +
                "    END IF;                                                                  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                                                                  \n" +
                "		SET attributeSearchString = pAttributesSearch;                                                                  \n" +
                "       do_this:                                                                  \n" +
                "	  LOOP                                                                  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);                            \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);                            \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);                            \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);                            \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                                    \n" +
                "																		AND isdeleted = 0                            \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                            \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                                   \n" +
                "																		AND  isdeleted = 0                            \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                                  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                            \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');                            \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');                            \n" +
                "          /*IF pIsMFG = FALSE THEN                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');                            \n" +
                "          END IF;  */                            \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN                            \n" +
                "		  LEAVE do_this;                            \n" +
                "		END IF;                            \n" +
                "	  END LOOP do_this;                            \n" +
                "    END IF;                            \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN                            \n" +
                "		IF (pPackagingAlias = '1') THEN                            \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');                            \n" +
                "		ELSE                            \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');                            \n" +
                "		END IF;                            \n" +
                "	END IF;                            \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN                            \n" +
                "			IF (pAlternatePart = '1') THEN                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');                            \n" +
                "			ELSE                                                                          \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');                            \n" +
                "			END IF;                            \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');                            \n" +
                "		END IF;                            \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN                            \n" +
                "			IF (pRoHSAlternatePart = '1') THEN                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');                            \n" +
                "			ELSE                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');                            \n" +
                "			END IF;                            \n" +
                "		END IF;                            \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN                            \n" +
                "			SET vPartUsedInAssemblyExists = \" \";                            \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";                            \n" +
                "			IF (pPartUsedInAssembly = '1') THEN                            \n" +
                "				SET vPartUsedInAssemblyExists = \" \";                            \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";                            \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN                            \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";                            \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";                            \n" +
                "            END IF;                            \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2                            \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                            \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                            \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');                            \n" +
                "  \n" +
                "		END IF;                                    \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);                                    \n" +
                "	END IF;                                    \n" +
                "   IF pIsExportControl = 1 THEN                                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');                                    \n" +
                "   END IF;                                    \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');                        \n" +
                "	END IF;        \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;        \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData        \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,            \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,                                                    \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,                                                    \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue            \n" +
                "									from ( \", @SQLStatement1,\" ) c                                    \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);                                    \n" +
                "    /*main query create temp table*/         \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;           \n" +
                "  /* to get total count of rows */                                    \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);                            \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");             \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                     \n" +
                "	DEALLOCATE PREPARE query2;  */           \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");                                    \n" +
                "    /*main query create temp table*/         \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                 \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN                                    \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,                                    \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                    \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                    \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                    \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                    \n" +
                "											partType,categoryName,                                    \n" +
                "											functionalCategoryText,                                    \n" +
                "											mountingTypeText,                                    \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                    \n" +
                "											  rohsText,                                    \n" +
                "                                            AliasMFGCodeID,                                    \n" +
                "                                            AliasMFGCode,                                    \n" +
                "                                            AliasMFGName,                                    \n" +
                "                                            AliasMFGDisplayOrder,                                                                    \n" +
                "                                            packageCaseTypeValue,                        \n" +
                "                                            partPackageID                        \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"                                    \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,                                    \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                                    \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                                    \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                                    \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                                    \n" +
                "											partType,categoryName,                                    \n" +
                "											functionalCategoryText,                                    \n" +
                "											mountingTypeText,                                    \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                                    \n" +
                "											  rohsText,                                                      \n" +
                "                                            AliasMFGCodeID,                                                      \n" +
                "                                            AliasMFGCode,                                                      \n" +
                "                                            AliasMFGName,                                                      \n" +
                "                                            AliasMFGDisplayOrder,                        \n" +
                "                                            packageCaseTypeValue,                        \n" +
                "                                            partPackageID\");                                         \n" +
                "		 PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;                                                \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )                                                          \n" +
                "									select * from                                                          \n" +
                "										(select case when stdc.classID is not null then                                                          \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)                                                          \n" +
                "													else cs.certificateStandardID end certificateStandardID,                                                          \n" +
                "												case when stdc.classID is not null then                                                          \n" +
                "													concat(cs.fullName,' ',stdc.classname)                                                          \n" +
                "													else cs.fullName end fullName,                                                          \n" +
                "												cs.displayOrder                                                          \n" +
                "										  from certificate_standards cs                                                          \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID                                                          \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID                                                          \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)                                                          \n" +
                "										) a group by certificateStandardID, fullName, displayOrder                                                          \n" +
                "										order by displayOrder,fullName\");                                                          \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;  */                                                        \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName                                                          \n" +
                "					  from component_acceptable_shipping_countries casc                                                          \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid                                                          \n" +
                "					 where casc.isdeleted = false                                                          \n" +
                "					   and casc.deletedat is null                                                          \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                          \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )                                                          \n" +
                "                                    order by cm.countryName\");                                                          \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;  */                                                        \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName                                                          \n" +
                "					  from component_dynamic_attribute_mapping_part cdam                                                          \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID                                                          \n" +
                "					 where cdam.isdeleted = false                                                          \n" +
                "					   and cdam.deletedat is null                                                          \n" +
                "					   and cda.isdeleted = false                                                          \n" +
                "					   and cda.deletedat is null                                                          \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                                          \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )                                                          \n" +
                "                                     order by cda.attributeName\");                                                          \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "		EXECUTE query3;                                                          \n" +
                "		DEALLOCATE PREPARE query3;  */                                                        \n" +
                "    END IF;                                                          \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN                                                          \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/                                                          \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,                                                          \n" +
                "											null groupNameText,                                                          \n" +
                "											functionalCategoryID, mountingTypeID,                                                          \n" +
                "											count(1) recCount                                                          \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,                                                          \n" +
                "										' group by functionalCategoryName,mountingTypeName,                                      \n" +
                "													functionalCategoryID, mountingTypeID                                                          \n" +
                "											order by groupName, groupNameText, recCount desc');                                                          \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;                                                          \n" +
                "			EXECUTE query3;                                                          \n" +
                "			DEALLOCATE PREPARE query3;                                                          \n" +
                "        END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1063,'1.00','V1','Bug 35440: Part Master: Supplier Part List page showing the incorrect date and time - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1063:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
                "	IN pAssyID INT,              \n" +
                "	IN pRefSalesOrderDetID INT,   \n" +
                "	IN pkitAllocationLineItemId INT,  \n" +
                "    IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pKitqty INT DEFAULT 0;  \n" +
                "    DECLARE pCustomer VARCHAR(1000);   \n" +
                "    DECLARE pCustomerID INT;  \n" +
                "  \n" +
                "    IF(pAssyID = 0) THEN      \n" +
                "		SELECT 	IFNULL(s.kitQty,0),  \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID    \n" +
                "			INTO pKitqty, pCustomer, pCustomerID  \n" +
                "				FROM salesorderdet s   \n" +
                "				JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "				 WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  IFNULL(k.totalAssyBuildQty,0),   \n" +
                "				fun_getMfgCodeAndNameByID(sm.customerID),  \n" +
                "				sm.customerID  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID  \n" +
                "					FROM kit_allocation_assy_detail k   \n" +
                "					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID      \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "								AND k.partId = pAssyID      \n" +
                "								AND k.refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsConsolidated = 0) THEN  \n" +
                "		SELECT   \n" +
                "				c.id,			 refSalesOrderDetID,		partID,						PIDCode,  \n" +
                "				lineID,			 isCustom, 					pCustomer companyName, 		pCustomerID customerID,  \n" +
                "				FUN_GETUNITNAMEBYID(uomID) AS unitName, 	connecterTypeID,  \n" +
                "				fun_getRoHSNameByID(RoHSStatusID) rohsName,  numOfPosition,  \n" +
                "				fun_getRoHSIconByID(RoHSStatusID) rohsIcon,   \n" +
                "				allocatedQty,		allocatedUnit,			allocatedPins,   \n" +
                "                consumeUnits, 		consumePin,  \n" +
                "				(CASE  \n" +
                "					WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "				END) requiredQtyBuild,   \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(uomMismatchedStep = 0  \n" +
                "							OR connecterTypeID != - 2)  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "				END) requirePinsBuild,   \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						uomMismatchedStep = 0  \n" +
                "							OR isNotRequiredKitAllocation = 1  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE CASE  \n" +
                "						WHEN  \n" +
                "							connecterTypeID = - 2  \n" +
                "						THEN  \n" +
                "							CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "							END  \n" +
                "						ELSE CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "					END  \n" +
                "				END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(SELECT   \n" +
                "						k.id,	 		k.refSalesOrderDetID,	 k.partID,	  \n" +
                "						c.PIDCode,		c.isCustom,       		c.connecterTypeID,  \n" +
                "						c.RoHSStatusID,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "							THEN  \n" +
                "								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
                "									OR k.isBuyDNPQty = 'P'  \n" +
                "									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
                "								OR k.isBuyDNPQty = 'P'  \n" +
                "								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "						END) AS qpa,  \n" +
                "						k.lineID,			k.uomID,	 					k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "						k.numOfPosition,	k.isNotRequiredKitAllocation,	kal.uomMismatchedStep,  \n" +
                "						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "				FROM  \n" +
                "					kit_allocation_lineitems k  \n" +
                "				LEFT JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id  \n" +
                "				JOIN component c ON k.partID = c.id AND c.isGoodPart = 1  \n" +
                "				LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "					AND k.partID = ka.assyID  \n" +
                "					AND k.refRfqLineitem = ka.refBOMLineID  \n" +
                "				WHERE  \n" +
                "					k.id = pkitAllocationLineItemId) AS c  \n" +
                "			GROUP BY id, refSalesOrderDetID, partID, qpa, lineID, uomID, PIDCode,  \n" +
                "					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,   \n" +
                "					rfqLineItemsId, numOfPosition, connecterTypeID,	isCustom,  RoHSStatusID;  \n" +
                "		ELSE 	  \n" +
                "			SELECT   \n" +
                "					c.id,			 refSalesOrderDetID,		partID,					PIDCode,  \n" +
                "					lineID,			 isCustom, 					pCustomer companyName, 	pCustomerID customerID,  \n" +
                "					FUN_GETUNITNAMEBYID(uomID) AS unitName, 	connecterTypeID,  \n" +
                "					fun_getRoHSNameByID(RoHSStatusID) rohsName,  numOfPosition,  \n" +
                "					fun_getRoHSIconByID(RoHSStatusID) rohsIcon,   \n" +
                "					allocatedQty,		allocatedUnit,			allocatedPins,   \n" +
                "					consumeUnits, 		consumePin,  \n" +
                "					(CASE  \n" +
                "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,   \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(uomMismatchedStep = 0  \n" +
                "								OR connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,   \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							uomMismatchedStep = 0  \n" +
                "								OR isNotRequiredKitAllocation = 1  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE CASE  \n" +
                "							WHEN  \n" +
                "								connecterTypeID = - 2  \n" +
                "							THEN  \n" +
                "								CASE  \n" +
                "									WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "									ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "								END  \n" +
                "							ELSE CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "							END  \n" +
                "						END  \n" +
                "					END) shortagePerBuild  \n" +
                "				FROM  \n" +
                "					(SELECT   \n" +
                "							k.id,	 		k.refSalesOrderDetID,	 k.refAssyId partID,	  \n" +
                "							c.PIDCode,		c.isCustom,       		c.connecterTypeID,  \n" +
                "							c.RoHSStatusID,  \n" +
                "							k.kitQPAWithDNP AS qpa,  \n" +
                "							k.lineID,			k.uomID,	 					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
                "							k.numOfPosition,	k.isNotRequiredKitAllocation,	k.uomMismatchedStep,  \n" +
                "							IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "							IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "			FROM  \n" +
                "				kit_allocation_consolidate_line_detail k  \n" +
                "			LEFT JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id  \n" +
                "			JOIN component c ON k.refAssyId = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "				AND k.refAssyId = ka.assyID  \n" +
                "				AND k.rfqLineItemsId = ka.refBOMLineID  \n" +
                "			WHERE  \n" +
                "				k.id = pkitAllocationLineItemId) AS c  \n" +
                "		GROUP BY id, refSalesOrderDetID, partID, qpa, lineID, uomID, PIDCode,   \n" +
                "				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,   \n" +
                "				rfqLineItemsId, numOfPosition, connecterTypeID, isCustom,  RoHSStatusID;  \n" +
                "    END IF;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1064,'1.00','V1','Bug 35447: Kit allocation Stock pop-up issues given by DV 13/07/2021 [Main Branch] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1064:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveCustRefundedListByRefTrans`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustRefundedListByRefTrans`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),   \n" +
                "	IN pPayCMID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),    \n" +
                "    IN pTransModeType INT  )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);   \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "	IF (pTransModeType IS NOT NULL) THEN  \n" +
                "		IF (pTransModeType = -9) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "			JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM ,   \n" +
                "					  psipd.comment AS commentForPaymentCM , psipt.paymentAmount As paymentCMAmount,  \n" +
                "								psipt.paymentNumber as paymentCMNumber, psipt.id as paymentCMMstID, psipt.paymentDate as paymentCMDate	  \n" +
                "							FROM packingslip_invoice_payment_det psipd    \n" +
                "								JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "							WHERE psipd.refRefundPaymentID = \",pPayCMID,\" AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "							 ) payCMRefundDetTemp   \n" +
                "						ON psip.id = payCMRefundDetTemp.refPayementid    \n" +
                "			\");  \n" +
                "        ELSEIF (pTransModeType = -6) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "			JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM , psipd.comment AS commentForPaymentCM,     \n" +
                "						 cps.creditMemoNumber AS paymentCMNumber, cps.id as paymentCMMstID, cps.creditMemoDate As paymentCMDate ,  \n" +
                "                         cps.totalAmount AS paymentCMAmount   \n" +
                "					 FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
                "					WHERE psipd.refRefundCustCreditMemoID = \",pPayCMID,\" AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0    \n" +
                "					) payCMRefundDetTemp     \n" +
                "				ON psip.id = payCMRefundDetTemp.refPayementid   \n" +
                "			\");  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustAllRefundTransactionPopupList = CONCAT(\"  \n" +
                "	SELECT  psip.id,      \n" +
                "			psip.mfgcodeID , psip.accountReference,   \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,      \n" +
                "			psip.bankName,      \n" +
                "			psip.bankAccountNo,      \n" +
                "			psip.paymentType,      \n" +
                "			psip.bankAccountMasID,      \n" +
                "			psip.paymentDate AS refundDate,      \n" +
                "			psip.paymentAmount,    \n" +
                "			psip.remark,       \n" +
                "			psip.paymentNumber,    \n" +
                "			gc.gencCategoryName paymentMethod,      \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,     \n" +
                "            payCMRefundDetTemp.paymentCMAmount ,   \n" +
                "			payCMRefundDetTemp.paymentCMNumber ,   \n" +
                "			payCMRefundDetTemp.paymentCMMstID ,   \n" +
                "			payCMRefundDetTemp.paymentAmountForPaymentCM ,   \n" +
                "			payCMRefundDetTemp.commentForPaymentCM ,  \n" +
                "			payCMRefundDetTemp.paymentCMDate,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,      \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,      \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole     \n" +
                "		FROM packingslip_invoice_payment psip      \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0     \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0      \n" +
                "		      \",paymentCMJoin,\"   \n" +
                "		WHERE psip.refPaymentMode = '\", pRefPaymentMode ,\"'    \n" +
                "		AND refGencTransModeID = '\",pTransModeType,\"'  \n" +
                "		AND psip.isPaymentVoided = 0      \n" +
                "		AND psip.isDeleted = 0  \"  \n" +
                "    );  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id ASC\");    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	-- select @SQLStatement1;    \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	-- select @SQLStatement2;    \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1065,'1.00','V1',' User Story 33544: Customer Refund: Add/Update Screen - Amount Hyperlink popup - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1065:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop function if exists fun_getPaymentStatusByCustPackingSlipSubStatus ;  \n" +
                "CREATE FUNCTION `fun_getPaymentStatusByCustPackingSlipSubStatus`(  \n" +
                "	pSubStatus INT,  \n" +
                "    pTransType VARCHAR(2),  \n" +
                "    pPaymentStatus VARCHAR(2),  \n" +
                "    pReturnType VARCHAR(5)  \n" +
                ") RETURNS varchar(100) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(100);  \n" +
                "    IF  pReturnType = 'CODE' THEN  \n" +
                "		IF pTransType IN ( 'I' ,'P') THEN  \n" +
                "			Select case	when (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) and pPaymentStatus='PE' then 'NI'    \n" +
                "					when pSubStatus in (2,3) and pPaymentStatus='PE' then 'WP'    \n" +
                "					when pPaymentStatus='PR' then 'PR'    \n" +
                "					when pPaymentStatus='RE'then 'RE'    \n" +
                "                    when (pSubStatus IS NULL OR pSubStatus = '') and pTransType = 'P'  then 'PEN'  \n" +
                "				   else '' END as paymentStatusCode into vReturn;  \n" +
                "		ELSEIF pTransType = 'C' THEN  \n" +
                "			Select (CASE WHEN	pPaymentStatus='PE' then 'UC'    \n" +
                "						WHEN	pPaymentStatus='PR' THEN 'PCA'    \n" +
                "						WHEN	pPaymentStatus='RE' THEN 'FCA'   \n" +
                "						ELSE '' END)   AS creditAppliedStatus into vReturn;  \n" +
                "		END IF;  \n" +
                "    ELSE   \n" +
                "		IF pTransType IN ( 'I' ,'P') THEN  \n" +
                "			Select case	when (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) and pPaymentStatus='PE' then 'Not Invoiced'    \n" +
                "					when pSubStatus in (2,3) and pPaymentStatus='PE' then 'Waiting For Payment'    \n" +
                "					when pPaymentStatus='PR' then 'Partial Payment Received'    \n" +
                "					when pPaymentStatus='RE'then 'Payment Received'    \n" +
                "                    when (pSubStatus IS NULL OR pSubStatus = '') and pTransType = 'P'  then 'Pending'  \n" +
                "				   else '' END as paymentStatusCode into vReturn;  \n" +
                "		ELSEIF pTransType = 'C' THEN  \n" +
                "			Select (CASE WHEN	pPaymentStatus='PE' then 'Unapplied Credit'    \n" +
                "						WHEN	pPaymentStatus='PR' THEN 'Partial Credit Applied'    \n" +
                "						WHEN	pPaymentStatus='RE' THEN 'Full Credit Applied'   \n" +
                "						ELSE '' END)   AS creditAppliedStatus into vReturn;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "    RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1066,'1.00','V1','fun_getPaymentStatusByCustPackingSlipSubStatus - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1066:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop procedure if exists Sproc_GetCustomerInvoiceDetail ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(              \n" +
                "	IN invoiceID INT      ,              \n" +
                "    IN pTransType VARCHAR(5)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);              \n" +
                "	DECLARE vTimeZone VARCHAR(50);              \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;              \n" +
                "	                 SELECT inv.id,   inv.transType,              \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,              \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,              \n" +
                "                        cps.id packingSlipID,              \n" +
                "						inv.refSalesOrderId  ,              \n" +
                "                        inv.systemID,              \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,              \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,              \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,              \n" +
                "						inv.soNumber,inv.soDate,              \n" +
                "                        inv.packingSlipType,inv.`status`,              \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,              \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,              \n" +
                "						inv.invoiceNumber,inv.invoiceDate,              \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,              \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,              \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,              \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,              \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,              \n" +
                "                        inv.intermediateShipmentId ,              \n" +
                "						inv.billingAddress,              \n" +
                "						inv.shippingAddress,              \n" +
                "						inv.intermediateAddress,              \n" +
                "                        inv.isLocked,              \n" +
                "                        inv.subStatus,              \n" +
                "                        inv.paymentStatus,              \n" +
                "                        inv.packingSlipType,              \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,              \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,              \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,           \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,              \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,              \n" +
                "                        inv.isZeroValue,              \n" +
                "                        inv.revision,              \n" +
                "                        cps.subStatus packingSlipSubStatus,              \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))              \n" +
                "						ELSE '' END) materialStatus ,              \n" +
                "                        inv.isAlreadyPublished ,              \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,              \n" +
                "            cps.revision packingSlipVersion,            \n" +
                "            (CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)             \n" +
                "				WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)            \n" +
                "                ELSE NULL END) receivedAmount,        \n" +
                "                (SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'          \n" +
                "							AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,    \n" +
                "						fun_getUserNameByID(inv.updatedBy) updatedByInitial,    \n" +
                "						fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,    \n" +
                "						fun_getUserNameByID(inv.createdBy) createdByInitial,    \n" +
                "						fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,    \n" +
                "						inv.isAskForVersionConfirmation,    \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt,  \n" +
                "                        case when inv.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE') end paymentStatusCode  \n" +
                "						-- case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "		FROM customer_packingslip inv              \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'              \n" +
                "                 WHERE inv.id = invoiceID              \n" +
                "                 AND inv.transType = pTransType;              \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,              \n" +
                "					cpd.id,              \n" +
                "                    cpd.refCustPackingSlipID,              \n" +
                "					cpd.custPOLineID,              \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,              \n" +
                "                    cpd.lineID,              \n" +
                "                    co.PIDCode,              \n" +
                "                    co.mfgcodeID,              \n" +
                "                    ss.releaseNumber,              \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,              \n" +
                "					co.mfgpn,              \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,              \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,              \n" +
                "                    cpd.partId,              \n" +
                "                    cpd.refChargesTypeID,              \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,              \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,              \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,              \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,              \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,              \n" +
                "                    othercharges AS lineOtherCharges,              \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,              \n" +
                "					cpd.shippingNotes,              \n" +
                "                    cpd.internalComment,              \n" +
                "                    cpd.assyDescription,              \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,              \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,              \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,              \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,              \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,              \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,              \n" +
                "                    co.partType,              \n" +
                "                    vu.packingLineID,              \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,              \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,              \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert              \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID              \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,              \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,              \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,              \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'              \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'              \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )              \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn              \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0              \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,              \n" +
                "                    cpd.isZeroValue,              \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted              \n" +
                "				 FROM customer_packingslip_det cpd              \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0              \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0              \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId              \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0              \n" +
                "                 ORDER BY cpd.lineID ASC;              \n" +
                "  \n" +
                "                 SELECT cpOther.id,              \n" +
                "						cpOther.refCustomerPackingSlipDetID,              \n" +
                "						cpOther.partID,              \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,              \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,              \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,              \n" +
                "                        cpOther.qty,              \n" +
                "                        cpOther.price,              \n" +
                "                        cpOther.lineComment,              \n" +
                "                         cpOther.lineInternalComment,              \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,              \n" +
                "                        cpOther.frequency ,              \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'              \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'              \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'              \n" +
                "								ELSE ''              \n" +
                "						END) AS frequencyName              \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0              \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cpOther.isdeleted=0;              \n" +
                "  \n" +
                "                  --  Tracking Number              \n" +
                "                SELECT id,trackNumber              \n" +
                "                FROM customer_packing_slip_track_number              \n" +
                "                WHERE refCustPackingSlipID = invoiceID              \n" +
                "                AND isDeleted = 0;              \n" +
                "  \n" +
                "                -- sales commission attribute        \n" +
                "                SELECT cca.id,              \n" +
                "		    cca.refCustPackingSlipDetID,              \n" +
                "                    cca.unitPrice,           \n" +
                "                    cca.commissionPercentage,              \n" +
                "                    cca.commissionValue,              \n" +
                "                    cca.quoted_commissionPercentage,              \n" +
                "                    cca.quoted_commissionValue,              \n" +
                "                    cca.poQty,              \n" +
                "                    cca.partId,      \n" +
                "                    cca.quotedQty,      \n" +
                "                    cca.type,      \n" +
                "                    cca.rfqAssyID,      \n" +
                "                    cca.commissionCalculateFrom,      \n" +
                "                    cca.salesCommissionNotes,              \n" +
                "                    cca.refComponentSalesPriceBreakID,              \n" +
                "                    cca.quoted_unitPrice          \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0      \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cca.isdeleted=0;      \n" +
                "                 -- sales commission child attribute            \n" +
                "                SELECT cca.id,              \n" +
                "		    cca.refCustPackingSlipDetID,      \n" +
                "		    cca.refcustInvoiceCommissionID,              \n" +
                "                    cca.unitPrice,              \n" +
                "                    cca.refQuoteAttributeId,              \n" +
                "                    cca.commissionPercentage,              \n" +
                "                    cca.commissionValue,              \n" +
                "                    cca.org_commissionPercentage,              \n" +
                "                    cca.org_commissionValue,              \n" +
                "                    cca.category,              \n" +
                "                    cca.partId,              \n" +
                "                    cca.refComponentSalesPriceBreakID,              \n" +
                "                    cca.org_unitPrice,              \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,              \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,              \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName              \n" +
                "				FROM customer_packingslip_commission_attribute cca              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0              \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0              \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cca.isdeleted=0;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1067,'1.00','V1','Sproc_GetCustomerInvoiceDetail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1067:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop procedure if exists Sproc_RetrieveCustomerInvoiceDetails ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pFilterStatus LONGTEXT,    \n" +
                "    IN pDueDate DATE,    \n" +
                "    IN pAdditionalDays INT,    \n" +
                "    IN pTermsAndAboveDays INT,    \n" +
                "    IN pPoNumber VARCHAR(50),    \n" +
                "    IN pIsExactSearchPO TINYINT,    \n" +
                "    IN pMfgCodeIds LONGTEXT ,    \n" +
                "    IN pPaymentTermsIds LONGTEXT ,    \n" +
                "    IN pPartId INT,    \n" +
                "    IN pTransType VARCHAR(5) ,    \n" +
                "	IN pFromDate DATE,    \n" +
                "    IN pToDate DATE,    \n" +
                "    IN pPaymentStatusFilter VARCHAR(50) ,    \n" +
                "    IN pCreditAppliedStatusFilter  VARCHAR(100) ,    \n" +
                "    IN pZeroAmountFilter TINYINT    \n" +
                "    -- IN pChequeNumber  VARCHAR(50)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(100);    \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "	SET v_appliedCMPDJoin = '';    \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN    \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount , \");    \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'    \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");    \n" +
                "	ELSE    \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"    \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,    \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,    \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,    \n" +
                "        cp.invoiceNumber,cp.invoiceDate,    \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,    \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,    \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'    \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,    \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1    \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,    \n" +
                "        cp.soNumber,cp.soDate,    \n" +
                "		cp.sorevision,    \n" +
                "        cp.refSalesOrderID,    \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,    \n" +
                "        cp.refCustInvoiceID,    \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,    \n" +
                "		 cp.status,    \n" +
                "         cp.subStatus,    \n" +
                "         case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "         case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "         case when cp.transType = 'C' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end creditAppliedStatus,		   \n" +
                "		  cp.paymentStatus,    \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,    \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,    \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,    \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,    \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,    \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,    \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,    \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,    \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,    \n" +
                "		 m.mfgcode as customerCode,    \n" +
                "         cp.customerID,    \n" +
                "         cp.createdBy as createdById,    \n" +
                "		\",v_receivedAmtSF,\"    \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,    \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,    \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,    \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,    \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,    \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,    \n" +
                "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,    \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,    \n" +
                "         cp.termsDays termDays,    \n" +
                "         cp.freeOnBoardName,    \n" +
                "         cp.isLocked,    \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,    \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,    \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,    \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,    \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,    \n" +
                "         packingSlip.id packingSlipId,    \n" +
                "         (select group_concat(paymentNumber)    \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd    \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0    \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,    \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,    \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,    \n" +
                "  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,    \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,    \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,    \n" +
                "         m.paymentTermsID custPaymentTermsId,    \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,    \n" +
                "         gc.termsDays custTermsDays,    \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,    \n" +
                "         cp.revision    \n" +
                "	 FROM customer_packingslip cp    \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID    \n" +
                "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0    \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'    \n" +
                "		\" , v_appliedCMPDJoin ,\"    \n" +
                "	WHERE  cp.isDeleted=0    \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		IF pTransType = 'I' THEN    \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";    \n" +
                "        ELSE    \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";    \n" +
                "        END IF;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');    \n" +
                "    END IF;    \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN    \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');    \n" +
                "	# END IF;    \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");    \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN    \n" +
                "		IF pIsExactSearchPO = 1 THEN    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"    \n" +
                "						);    \n" +
                "		ELSE    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"    \n" +
                "						);    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;    \n" +
                "  IF pFromDate IS NOT NULL THEN    \n" +
                "        IF pTransType = 'I' THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");    \n" +
                "        ELSE    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");    \n" +
                "        END IF;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN    \n" +
                "        IF pTransType = 'I' THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");    \n" +
                "        ELSE    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");    \n" +
                "        END IF;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.creditAppliedStatus,''', pCreditAppliedStatusFilter ,''')');    \n" +
                "	END IF;    \n" +
                "    -- filter zero amount invoice    \n" +
                "    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,    \n" +
                "		 round((c.totalAmount),2) totalAmount,    \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,    \n" +
                "    				-- round((c.totalAmount - ifnull(c.receivedAmount,0)),2) pendingAmount,    \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)    \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,    \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)    \n" +
                "						else '' end) materialStatus from ( \",    \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "  \n" +
                "	--  select @SQLStatement2	;    \n" +
                "	PREPARE query1 FROM @SQLStatement2;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1068,'1.00','V1','Sproc_RetrieveCustomerInvoiceDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1068:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "drop procedure if exists Sproc_RetrieveCustomerPackingSlipDeatils ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(                                                                        \n" +
                "	IN ppageIndex INT,                                                                        \n" +
                "	IN precordPerPage INT,                                                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                                      \n" +
                "	IN pfilterStatus VARCHAR(1000),                              \n" +
                "	IN pmfgCodelist VARCHAR(16000),                              \n" +
                "	IN pmfgPartID  INT ,                              \n" +
                "	IN ppsSearchType VARCHAR(5),                              \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),                              \n" +
                "	IN pstatusIds VARCHAR(50),                              \n" +
                "	IN pfromDate DATE,                              \n" +
                "	IN ptoDate DATE                                                                     \n" +
                ")  \n" +
                "BEGIN                                                                        \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                        \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"                                                                    \n" +
                "		SELECT cd.id,                      \n" +
                "				cd.packingSlipNumber,                              \n" +
                "		       cd.packingslipDate,                              \n" +
                "		       cd.poNumber,                              \n" +
                "		       cd.soNumber,                              \n" +
                "		       cd.soDate,                              \n" +
                "		       cd.poDate,     \n" +
                "               cd.poRevision,    \n" +
                "		       ss.releaseNumber,                \n" +
                "		       ss.qty as releaseLineQty,                                \n" +
                "		       cd.customerID,                                                            \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,                                              \n" +
                "			cd.systemID,                                                         \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,                                                         \n" +
                "			cd.packingslipcomment,                              \n" +
                "			cd.refCustInvoiceID,                                \n" +
                "			cpd.internalComment,                                \n" +
                "			cd.headerComment,                               \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,                              \n" +
                "		cd.subStatus,                              \n" +
                "		cd.sorevision,                                              \n" +
                "              cpd.partId,                              \n" +
                "              fun_getRoHSNameByPartID(cpd.partId) rohsName,                              \n" +
                "              `cpd`.assyDescription,                                                             \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,                              \n" +
                "            c.mfgPN as assyName ,                              \n" +
                "            c.PIDCode as assyId,                              \n" +
                "            c.mfgCodeID,                              \n" +
                "            cd.termsID,                              \n" +
                "            cd.shippingmethodid,                          \n" +
                "            invoice.invoiceNumber,                          \n" +
                "            invoice.id as invoiceID,                                \n" +
                "            invoice.subStatus as invoiceSubstatus,                              \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,                  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,                             \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,                              \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,                                                    \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,                                                    \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,                      \n" +
                "            cd.refSalesOrderID,                                                            \n" +
                "cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,                                    \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,                                                            \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,                                                       \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,                                                    \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,                                                \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,                                              \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,                                            \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,                                                                \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,                                                                \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,                                                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,                                                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,                                                             \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt,                                                            \n" +
                "		 cd.isLocked,                                                  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,                                                  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,                                                  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,                                                  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,              \n" +
                "         (select group_concat(trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumber,       \n" +
                "         (select COUNT(trackNumber) from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumberCount,           \n" +
                "  \n" +
                "         cpd.quoteFrom,cpd.refAssyQtyTurnTimeID,cpd.assyQtyTurnTimeText,cpd.quoteNumber,cpd.refRFQGroupID,cpd.refRFQQtyTurnTimeID,            \n" +
                "		(case when cpd.quoteFrom = 1 then 'From RFQ' when cpd.quoteFrom = 3 then 'N/A' when cpd.quoteFrom = 2 then 'From Part Master' else '' end) quoteFromText,          \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))           \n" +
                "						else '' end) materialStatus,        \n" +
                "                        cd.revision        \n" +
                "		FROM customer_packingslip cd                                                   \n" +
                "		LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0                                                              \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid                  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId                                                   \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0                                \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0                                                               \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'                                                                      \n" +
                "	\");                                                                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                        \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";                                                              \n" +
                "	ELSE                                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                        \n" +
                "	END IF;	                                                                        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                        \n" +
                "		SET pWhereClause = '1=1' ;                                                                        \n" +
                "	END IF;	                                                      \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN                                                      \n" +
                "	SET pWhereClause=CONCAT(pWhereClause, ' and FIND_IN_SET(packingSlipStatusValue,''', pfilterStatus ,''')');                                                      \n" +
                "  END IF;                              \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN                                                      \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');                                                      \n" +
                "  END IF;                                  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN                                                      \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');                                                      \n" +
                "  END IF;                                \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN                                                      \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId= ',pmfgPartID);                                                      \n" +
                "  END IF;                               \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN                              \n" +
                "    IF(ppsSearchType='E')THEN                              \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',                              \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');                               \n" +
                "   ELSE                              \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',                              \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');                               \n" +
                "  END IF;                                                    \n" +
                "  END IF;                               \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN                              \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');                                         \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN                              \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');                                \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN                              \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');                                               \n" +
                "  END IF;                                 \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                        \n" +
                "	ELSE	                                                                        \n" +
                "		SET rowNumWhere = '';                                                                        \n" +
                "	END IF;	                                                                        \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                                           \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                                                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                          \n" +
                "	EXECUTE query2;                                                                          \n" +
                "	DEALLOCATE PREPARE query2;                                                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                          \n" +
                "	PREPARE query1 FROM @SQLStatement2;                          \n" +
                "	-- select @SQLStatement2;                                                                        \n" +
                "	EXECUTE query1;                                                                          \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1069,'1.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1069:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_OtherPN_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_OtherPN_History` AFTER UPDATE ON `component_otherpn` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.name,0) != IFNULL(NEW.name,0) THEN  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_otherpn',		'Part > Other Part Names',  \n" +
                "			CAST(OLD.name AS CHAR), 	CAST(NEW.name AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby, createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_otherpn',		'Part > Other Part Names > Deleted',  \n" +
                "			NULL, 				CAST(OLD.name AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Drivetools_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Drivetools_History` AFTER UPDATE ON `component_drivetools` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,			createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_drivetools',		'Part > Drive Tools > Deleted',  \n" +
                "			NULL, 				CONCAT(pOldValue,' is Deleted'),OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "		VALUES(NEW.refComponentID,		'component_drivetools',		'Part > Drive Tools',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_ProcessMaterial_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_ProcessMaterial_History` AFTER UPDATE ON `component_processmaterial` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,			createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_processmaterial',	'Part > Process Material > Deleted',  \n" +
                "			NULL, 				CONCAT(pOldValue,' > Deleted'),	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_processmaterial',	'Part > Process Material',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1070,'1.00','V1',' Bug 35304: - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1070:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetWhoBoughtWhoDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWhoBoughtWhoDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM `who_bought_who` wbw  \n" +
                "			JOIN users us ON wbw.createdBy = us.id AND us.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgBymst on wbw.buyBy = mfgBymst.id AND mfgBymst.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgTomst on wbw.buyTo = mfgTomst.id AND mfgTomst.deletedAt IS NULL  \n" +
                "			JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL  \n" +
                "		WHERE  \n" +
                "		IFNULL(wbw.isdeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			wbw.id,  \n" +
                "			wbw.buyBy,  \n" +
                "			mfgBymst.mfgCode AS mfgBy,  \n" +
                "			mfgBymst.isCustOrDisty mfgByIsCust,  \n" +
                "			mfgBymst.mfgType mfgByMfgType,  \n" +
                "			wbw.buyDate,  \n" +
                "			wbw.description,  \n" +
                "			wbw.createdAt,  \n" +
                "			wbw.buyTo,  \n" +
                "			mfgTomst.isCustOrDisty mfgToIsCust,  \n" +
                "			mfgTomst.mfgType mfgToMfgType,  \n" +
                "						mfgTomst.mfgCode AS mfgTo,  \n" +
                "			CONCAT(emp.firstName, ' ', emp.lastName) AS createdByEmp  \n" +
                "            ,wbw.isDeleted  \n" +
                "		FROM `who_bought_who` wbw  \n" +
                "			JOIN users us ON wbw.createdBy = us.id AND us.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgBymst on wbw.buyBy = mfgBymst.id AND mfgBymst.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgTomst on wbw.buyTo = mfgTomst.id AND mfgTomst.deletedAt IS NULL  \n" +
                "			JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL  \n" +
                "		WHERE  \n" +
                "		wbw.id = IFNULL(pId, wbw.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(wbw.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(wbw.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-07-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1071,'1.00','V1',' Bug 35304: - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1071:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForComponent`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForComponent`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pShowPackagingAlias TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vFromSQLQuery VARCHAR(16383);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY PIDCode, uid\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"' OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET vFromSQLQuery = CONCAT(\"  \n" +
                "		SELECT kitAllocationId,	id,		refSalesOrderDetID,	salesOrderNumber,	poNumber,  \n" +
                "			assyID,		nickname,		assyPIDCode,	        assyPN,  \n" +
                "			assyRohsId, 	assyRohsIcon,		assyRohsName,  \n" +
                "			kitName,  \n" +
                "			lineID,		refRfqLineitem, 	qpa,			kitQty,  \n" +
                "			requireUnitsForBuild,  \n" +
                "			partId,  \n" +
                "			mfgPart,  \n" +
                "			component,  \n" +
                "			mfgPN,  \n" +
                "			refUIDId,	uid,			pkgQty,			pkgUnit,		uom,  \n" +
                "			allocatedQty,	allocatedUnit,		allocatedUOM,		allocatedUOMID, 	allocatedPins  \n" +
                "		FROM 	(  \n" +
                "				select 	k.id kitAllocationId,	 kl.id,		k.refSalesOrderDetID,	s.salesOrderNumber,		s.poNumber,  \n" +
                "					k.assyID,		assy.nickname,		assy.PIDCode assyPIDCode,	assy.mfgPN assyPN,  \n" +
                "					assy.rohsStatusId assyRohsId,  \n" +
                "					fun_getRoHSIconByID(assy.rohsStatusId) assyRohsIcon,  \n" +
                "					fun_getRoHSNameByID(assy.rohsStatusId) assyRohsName,  \n" +
                "					kl.lineID,		kl.refRfqLineitem,	 kl.qpa,			ka.kitQty,  \n" +
                "					concat(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode) kitName,  \n" +
                "					(kl.qpa * ka.kitQty) requireUnitsForBuild,  \n" +
                "					k.partId,  \n" +
                "					-- (select GROUP_CONCAT(DISTINCT(kalt.mfgPNID)) from kit_allocation_lineitems_alternatepart kalt where kalt.partID = k.assyID AND kalt.mfgPNID = \", pPartID, \" AND kalt.refSalesOrderDetID = k.refSalesOrderDetID)  mfgPart,  \n" +
                "					(select GROUP_CONCAT(DISTINCT(p.mfgPNID))  \n" +
                "				from 	(  \n" +
                "						select 	kalt.mfgPNID  \n" +
                "						from 	kit_allocation_lineitems_alternatepart kalt  \n" +
                "						where 	kalt.partID =  k.assyID  \n" +
                "						AND  	kalt.refRfqLineitem = k.refBOMLineID  \n" +
                "						union  \n" +
                "						SELECT 	componentID as mfgPNID  \n" +
                "						FROM 	component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias  \n" +
                "							WHERE 	componentID in (  \n" +
                "								select 	kalt.mfgPNID  \n" +
                "								from 	kit_allocation_lineitems_alternatepart kalt  \n" +
                "								where 	kalt.partID = k.assyID  \n" +
                "										AND  kalt.refRfqLineitem = k.refBOMLineID  \n" +
                "							)  \n" +
                "							AND deletedAt IS NULL  \n" +
                "						) AND deletedAt IS NULL  \n" +
                "					) as p  \n" +
                "			)  mfgPart,  \n" +
                "			fun_getKitAllocationPIDsForComponent(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") component,  \n" +
                "			fun_getKitAllocationPIDsForMfgPN(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") mfgPN,  \n" +
                "			k.refUIDId,		csd.uid,		csd.pkgQty,			csd.pkgUnit,  \n" +
                "			fun_getUnitNameByID(csd.uom) uom,  \n" +
                "			k.allocatedQty,	k.allocatedUnit,  \n" +
                "			fun_getUnitNameByID(k.allocatedUOM) allocatedUOM,  \n" +
                "			k.allocatedUOM allocatedUOMID,  \n" +
                "			fun_getKitAllocatedPin(k.assyID, k.refSalesOrderDetID, k.refBOMLineID, NULL, kl.numOfPosition, FALSE) allocatedPins  \n" +
                "		from 	kit_allocation k  \n" +
                "		inner join	kit_allocation_lineitems kl on k.refBOMLineID = kl.refRfqLineitem and k.refSalesOrderDetID = kl.refSalesOrderDetID  \n" +
                "		inner join	kit_allocation_assy_detail ka on k.assyID = ka.partId and k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "		inner join 	salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "		inner join 	salesordermst s on sd.refSalesOrderID = s.id  \n" +
                "		inner join	component assy on k.assyID = assy.id  \n" +
                "		inner join	component c on k.partId = c.id  \n" +
                "		inner join	component_sid_stock csd on k.refUIDId = csd.id  \n" +
                "		where 		k.status = 'A'  \n" +
                "				AND	(  \n" +
                "					k.partId IN (  \n" +
                "							SELECT 	componentID  \n" +
                "							FROM 	component_packagingalias  \n" +
                "							WHERE 	aliasgroupID IN (  \n" +
                "									SELECT 	aliasgroupID  \n" +
                "									FROM 	component_packagingalias  \n" +
                "									WHERE 	componentID = \",pPartID,\"  \n" +
                "									AND 	deletedAt is null  \n" +
                "								      )  \n" +
                "							AND deletedAt is null  \n" +
                "						)  \n" +
                "				OR k.partId = \",pPartID,\"  \n" +
                "			)  \n" +
                "		 ) As tempUMID  where\", pWhereClause);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetAllocatedKitForComponent;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetAllocatedKitForComponent AS \", vFromSQLQuery, \" \" , rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM temp_Sproc_GetAllocatedKitForComponent \", pOrderBy);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-07-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1072,'1.00','V1','Bug 35447: Kit allocation Stock pop-up issues given by DV 13/07/2021 [Main Branch] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1072:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_FunctionalTestingEquipment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_FunctionalTestingEquipment_History` AFTER UPDATE ON `component_functionaltestingequipment` FOR EACH ROW BEGIN        \n" +
                "	DECLARE pOldValue TEXT;        \n" +
                "	DECLARE pNewValue TEXT;        \n" +
                "	IF IFNULL(OLD.eqpID,0) != IFNULL(NEW.eqpID,0) THEN        \n" +
                "		IF OLD.eqpID IS NOT NULL THEN        \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`        \n" +
                "			FROM equipment        \n" +
                "			WHERE eqpID =OLD.eqpID        \n" +
                "			ORDER BY eqpID DESC LIMIT 1;        \n" +
                "		END IF;        \n" +
                "		IF NEW.eqpID IS NOT NULL THEN        \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pNewValue`        \n" +
                "			FROM equipment        \n" +
                "			WHERE eqpID =NEW.eqpID        \n" +
                "			ORDER BY eqpID DESC LIMIT 1;        \n" +
                "		END IF;       \n" +
                "		   INSERT INTO Component_History        \n" +
                "			(refComponentID,                tableName,                 	Colname,        \n" +
                "			Oldval, 			Newval, 			createdBy,        \n" +
                "			createdAt,  			updatedAt, 			Updatedby)        \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Equipment',        \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,        \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN        \n" +
                "		IF OLD.eqpID IS NOT NULL THEN        \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`        \n" +
                "			FROM equipment        \n" +
                "			WHERE eqpID =OLD.eqpID        \n" +
                "			ORDER BY eqpID DESC LIMIT 1;        \n" +
                "		END IF;        \n" +
                "		   INSERT INTO Component_History        \n" +
                "			(refComponentID,                tableName,                 	Colname,        \n" +
                "			Oldval, 			Newval, 			createdBy,        \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)    \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Functional Testing Equipments > Deleted',        \n" +
                "			NULL, 				CONCAT(pOldValue,' > Delete'),	 		OLD.createdBy,        \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);    \n" +
                "	END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1073,'1.00','V1',' Bug 35304: Part Master: After update the part in mapping - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1073:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-07-2021  *********************************** */
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,  \n" +
                "				fun_getMfgCodeAndNameByID(inv.mfgcodeID) supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.refPaymentMode = 'P' and c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToAddress payToAddress,  \n" +
                "				inv.payToName,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1074,'1.00','V1','Resolved parameter length issue - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1074:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2021  *********************************** */
                "UPDATE systemconfigrations  \n" +
                "SET `description`= '1 - To view as demo application, Set Text \"DEMO\" below header icon, 0 - To view as live application',  \n" +
                "displayName = 'Demo Theme', isActive=1  \n" +
                "WHERE `key` IN ('DemoTheme');  \n" +
                "  \n" +
                "UPDATE systemconfigrations  \n" +
                "SET `description`= 'default - To set theme color as \"current(Blue)\", tealTheme - To set theme color as \"Teal\", pinkTheme - To set theme color as \"Pink\"',  \n" +
                "displayName = 'Default Theme', isActive=1  \n" +
                "WHERE `key` IN ('DefaultTheme');  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1075,'1.00','V1','Theme script updated - Vaibhav'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1075:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pUserId INT,    \n" +
                "	IN pRoleId INT,    \n" +
                "	IN isShowDefault INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;    \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;    \n" +
                "  \n" +
                " 	IF (isShowDefault = 1) THEN    \n" +
                " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS    \n" +
                " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,    \n" +
                " 			`rp`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`, `pd`.`paramDet`    \n" +
                " 			FROM `rolepagedetail` AS `rp`    \n" +
                " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`    \n" +
                " 			WHERE `rp`.`roleID` = pRoleId    \n" +
                " 			AND `rp`.`deletedAt` IS NULL    \n" +
                " 			AND `pd`.`deletedAt` IS NULL    \n" +
                " 			AND `pd`.`isActive` = 1;    \n" +
                "  \n" +
                " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet)    \n" +
                " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet      \n" +
                " 			FROM page_detail    \n" +
                " 			WHERE deletedAt IS NULL    \n" +
                " 			AND isActive = 1    \n" +
                " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail    \n" +
                " 			WHERE roleID = pRoleId AND deletedAt IS NULL);    \n" +
                " 	ELSE    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS    \n" +
                "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,    \n" +
                "			`up`.`IsShortcut` , `up`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`, `pd`.`paramDet`    \n" +
                "			FROM `userpagedetail` AS `up`    \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`    \n" +
                "			WHERE `up`.`userID` = pUserId    \n" +
                "			AND `up`.`roleID` = pRoleId    \n" +
                "			AND `up`.`deletedAt` IS NULL    \n" +
                "			AND `pd`.`deletedAt` IS NULL    \n" +
                "			AND `pd`.`isActive` = 1;    \n" +
                "  \n" +
                "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet)    \n" +
                "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet   \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);    \n" +
                " 	END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1076,'1.00','V1','Resolved Page Rights Navigation Issue - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1076:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_genericcategory`;    \n" +
                "CREATE TRIGGER `Trg_BI_genericcategory` BEFORE INSERT ON `genericcategory` FOR EACH ROW BEGIN         \n" +
                "    IF (SELECT COUNT(1) FROM genericcategory                             \n" +
                "       WHERE `categoryType` IN ('Printers','Label Templates','Document Type')         \n" +
                "        AND `categoryType` = NEW.categoryType                        \n" +
                "        AND `gencCategoryName`= NEW.gencCategoryName                 \n" +
                "        AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN                 \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';           \n" +
                "    ELSEIF (SELECT COUNT(1) FROM genericcategory                  \n" +
                "            WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',           \n" +
                "                    'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',                 \n" +
                "                    'Operation Types', 'Locations', 'Responsibilities', 'Shipping Methods',         \n" +
                "                    'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')        \n" +
                "            AND (`gencCategoryName`= NEW.gencCategoryName                 \n" +
                "            OR `gencCategoryCode` = NEW.gencCategoryCode)                 \n" +
                "            AND `categoryType` = NEW.categoryType                        \n" +
                "            AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN            \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';          \n" +
                "    END IF;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-07-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_genericcategory`;    \n" +
                "CREATE TRIGGER `Trg_BU_genericcategory` BEFORE UPDATE ON `genericcategory` FOR EACH ROW BEGIN               \n" +
                "        IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory              \n" +
                "                    WHERE `categoryType` IN ('Printers','Label Templates','Document Type')                         \n" +
                "                    AND `gencCategoryName` = NEW.gencCategoryName                                  \n" +
                "                    AND `categoryType` = NEW.categoryType                                         \n" +
                "                    AND isdeleted = 0 AND deletedAt IS NULL                                \n" +
                "                    AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN                       \n" +
                "                SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';                 \n" +
                "        ELSEIF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory                  \n" +
                "                WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',              \n" +
                "                        'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',                             \n" +
                "                        'Operation Types', 'Locations', 'Responsibilities', 'Shipping Methods',                       \n" +
                "                        'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')                                         \n" +
                "                AND (`gencCategoryName`= NEW.gencCategoryName                                                          \n" +
                "                OR `gencCategoryCode` = NEW.gencCategoryCode)                                                         \n" +
                "                AND `categoryType` = NEW.categoryType                                                                 \n" +
                "                AND isdeleted = 0 AND deletedAt IS NULL                                                               \n" +
                "                AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN                                                    \n" +
                "            SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';                                               \n" +
                "        END IF;                                                                                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1077,'1.00','V1','Added Trigger for Geenric category and removed unique key - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1077:
             allDbChangesArray.push(
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "ALTER TABLE supplier_invoice_payment_history    \n" +
            "ADD COLUMN refRefundPaymentID INT;  \n" +
            "  \n" +
            "ALTER TABLE supplier_invoice_payment_history    \n" +
            "ADD COLUMN refRefundCustCreditMemoID INT;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "ALTER TABLE `customer_packingslip`  \n" +
                "ADD COLUMN refundStatus VARCHAR(2) ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD COLUMN refundStatus VARCHAR(2) ;  \n" +
             /* **************************** Add Script Version -> 29-07-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1078,'1.00','V1',' add new column for payment history and refund status - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1078:
             allDbChangesArray.push(
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`,   \n" +
                " `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)    \n" +
                " VALUES ('Allow to Void Customer Refund', 1, 0, fun_DatetimetoUTCDateTime(),   \n" +
                " 1, fun_DatetimetoUTCDateTime(),1, 1, 1);  \n" +
             /* **************************** Add Script Version -> 29-07-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1079,'1.00','V1',' void customer refund feature master entry - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1079:
             allDbChangesArray.push(
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP FUNCTION IF EXISTS `fun_getCustRefundPaymentStatusTextByValue` ;  \n" +
                "CREATE FUNCTION `fun_getCustRefundPaymentStatusTextByValue`(      \n" +
                "	pRefundStatus VARCHAR(5)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE result VARCHAR(50);      \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pRefundStatus = 'NA') THEN 'Not Applicable'    \n" +
                "		WHEN (pRefundStatus = 'PE') THEN 'Pending Refund'     \n" +
                "		WHEN (pRefundStatus = 'PR') THEN 'Partial Payment Refunded'   \n" +
                "		WHEN (pRefundStatus = 'FR') THEN 'Full Payment Refunded'  \n" +
                "		ELSE '' END) INTO @result;      \n" +
                "  \n" +
                "      	SET result = @result;      \n" +
                "	RETURN result;      \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP FUNCTION IF EXISTS `fun_getCustCreditMemoRefundStatusTextByValue` ;  \n" +
                "CREATE FUNCTION `fun_getCustCreditMemoRefundStatusTextByValue`(      \n" +
                "	pRefundStatus VARCHAR(5)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE result VARCHAR(50);      \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pRefundStatus = 'NA') THEN 'Not Applicable'    \n" +
                "		WHEN (pRefundStatus = 'PE') THEN 'Pending Refund'     \n" +
                "		WHEN (pRefundStatus = 'PR') THEN 'Partial CM Refunded'   \n" +
                "		WHEN (pRefundStatus = 'FR') THEN 'Full CM Refunded'  \n" +
                "		ELSE '' END) INTO @result;      \n" +
                "  \n" +
                "      	SET result = @result;      \n" +
                "	RETURN result;      \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP FUNCTION IF EXISTS `fun_getCustCreditAppliedStatusTextByValue` ;  \n" +
                "CREATE FUNCTION `fun_getCustCreditAppliedStatusTextByValue`(      \n" +
                "	pCMPaymentStatus VARCHAR(5)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE result VARCHAR(50);      \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pCMPaymentStatus = 'PE') THEN 'Unapplied Credit'    \n" +
                "		WHEN (pCMPaymentStatus = 'PR') THEN 'Partial Credit Applied'     \n" +
                "		WHEN (pCMPaymentStatus = 'RE') THEN 'Full Credit Applied'   \n" +
                "		WHEN (pCMPaymentStatus = 'NP') THEN 'No Pending Credit'  \n" +
                "		ELSE '' END) INTO @result;      \n" +
                "  \n" +
                "      	SET result = @result;      \n" +
                "	RETURN result;      \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP FUNCTION IF EXISTS `fun_getPaymentStatusByCustPackingSlipSubStatus` ;  \n" +
                "CREATE FUNCTION `fun_getPaymentStatusByCustPackingSlipSubStatus`(    \n" +
                "	pSubStatus INT,    \n" +
                "    pTransType VARCHAR(2),    \n" +
                "    pPaymentStatus VARCHAR(2),    \n" +
                "    pReturnType VARCHAR(5)    \n" +
                ") RETURNS VARCHAR(100) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE vReturn VARCHAR(100);    \n" +
                "    IF  pReturnType = 'CODE' THEN    \n" +
                "		IF pTransType IN ( 'I' ,'P') THEN    \n" +
                "			SELECT CASE	WHEN (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) AND pPaymentStatus='PE' THEN 'NI'      \n" +
                "					WHEN pSubStatus IN (2,3) AND pPaymentStatus='PE' THEN 'WP'      \n" +
                "					WHEN pPaymentStatus='PR' THEN 'PR'      \n" +
                "					WHEN pPaymentStatus='RE'THEN 'RE'      \n" +
                "                    WHEN (pSubStatus IS NULL OR pSubStatus = '') AND pTransType = 'P'  THEN 'PEN'    \n" +
                "				   ELSE '' END AS paymentStatusCode INTO vReturn;    \n" +
                "		ELSEIF pTransType = 'C' THEN    \n" +
                "			SELECT (CASE WHEN	pPaymentStatus='PE' THEN 'UC'      \n" +
                "						WHEN	pPaymentStatus='PR' THEN 'PCA'      \n" +
                "						WHEN	pPaymentStatus='RE' THEN 'FCA'     \n" +
                "						ELSE '' END)   AS creditAppliedStatus INTO vReturn;    \n" +
                "		END IF;    \n" +
                "    ELSE     \n" +
                "		IF pTransType IN ( 'I' ,'P') THEN    \n" +
                "			SELECT CASE	WHEN (pSubStatus = 4 OR pSubStatus = 5 OR pSubStatus = 1) AND pPaymentStatus='PE' THEN 'Not Invoiced'      \n" +
                "					WHEN pSubStatus IN (2,3) AND pPaymentStatus='PE' THEN 'Waiting For Payment'      \n" +
                "					WHEN pPaymentStatus='PR' THEN 'Partial Payment Received'      \n" +
                "					WHEN pPaymentStatus='RE'THEN 'Payment Received'      \n" +
                "                    WHEN (pSubStatus IS NULL OR pSubStatus = '') AND pTransType = 'P'  THEN 'Pending'    \n" +
                "				   ELSE '' END AS paymentStatusCode INTO vReturn;    \n" +
                "		ELSEIF pTransType = 'C' THEN    \n" +
                "			SELECT (CASE WHEN	pPaymentStatus='PE' THEN 'Unapplied Credit'      \n" +
                "						WHEN	pPaymentStatus='PR' THEN 'Partial Credit Applied'      \n" +
                "						WHEN	pPaymentStatus='RE' THEN 'Full Credit Applied'  \n" +
                "						WHEN	pPaymentStatus='NP' THEN 'No Pending Credit'     \n" +
                "						ELSE '' END)   AS creditAppliedStatus INTO vReturn;    \n" +
                "		END IF;    \n" +
                "    END IF;    \n" +
                "    RETURN vReturn;    \n" +
                "END;  \n" +
             /* **************************** Add Script Version -> 29-07-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1080,'1.00','V1',' payment invoice functions  - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1080:
             allDbChangesArray.push(
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
            "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`   \n" +
            "    FOR EACH ROW BEGIN      \n" +
            "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";      \n" +
            "	DECLARE vOldval LONGTEXT DEFAULT '';      \n" +
            "	DECLARE vNewval LONGTEXT DEFAULT '';      \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
            "	DECLARE v_TimeZone VARCHAR(50);      \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
            "  \n" +
            "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN      \n" +
            "        INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"      \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"      \n" +
            "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,      \n" +
            "					NEW.paymentNumber,								OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"      \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"      \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"      \n" +
            "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),      \n" +
            "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	END IF;      \n" +
            "  \n" +
            "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"    \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"    \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"    \n" +
            "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),    \n" +
            "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	END IF;    \n" +
            "  \n" +
            "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN      \n" +
            "		SELECT IFNULL(gencCategoryName, '') INTO vOldval      \n" +
            "		  FROM genericcategory      \n" +
            "		 WHERE gencCategoryID = OLD.paymentType      \n" +
            "		 LIMIT 1;      \n" +
            "  \n" +
            "		SELECT IFNULL(gencCategoryName, '') INTO vNewval      \n" +
            "		  FROM genericcategory      \n" +
            "		 WHERE gencCategoryID = NEW.paymentType      \n" +
            "		 LIMIT 1;      \n" +
            "  \n" +
            "         INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					\"Payment Method\",								vOldval,      \n" +
            "					vNewval,									OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 		(vTableName,									NEW.id,      \n" +
            "					\"Account Reference\",								OLD.accountReference,      \n" +
            "					NEW.accountReference,								OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,   \n" +
            "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
            "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,      \n" +
            "					NEW.bankAccountNo,								OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,									NEW.id,      \n" +
            "					\"Bank Name\",								OLD.bankName,      \n" +
            "					NEW.bankName,								OLD.updatedAt,      \n" +
            "					OLD.updatedBy,								OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;    \n" +
            "  \n" +
            "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					\"Comments\",									OLD.remark,      \n" +
            "					NEW.remark,									OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),      \n" +
            "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	END IF;    \n" +
            "  \n" +
            "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "			 VALUES 	(vTableName,									NEW.id,      \n" +
            "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),      \n" +
            "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	END IF;    \n" +
            "  \n" +
            "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN      \n" +
            "		IF NEW.isDeleted = TRUE THEN      \n" +
            "			SET vNewval = 'Deleted';      \n" +
            "		ELSEIF NEW.isDeleted = FALSE THEN      \n" +
            "			SET vNewval = 'Restored';      \n" +
            "		ELSE      \n" +
            "			SET vNewval = 'Unknown action on delete';      \n" +
            "        END IF;      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "                    Colname,									Oldval,      \n" +
            "                    Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,								NEW.id,      \n" +
            "                    vNewval,									NULL,      \n" +
            "                    OLD.paymentNumber,							OLD.updatedAt,      \n" +
            "					OLD.updatedBy,								OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;    \n" +
            "  \n" +
            "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN      \n" +
            "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE      \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)      \n" +
            "				END;      \n" +
            "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE      \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)      \n" +
            "				END;      \n" +
            "        INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
            "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"      \n" +
            "						ELSE \"Payment Status\" END), 						vOldval,      \n" +
            "					vNewval,									OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "  \n" +
            "  \n" +
            "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN      \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "							(tableName,									refPaymentID,      \n" +
            "							Colname,									Oldval,      \n" +
            "							Newval,										createdAt,      \n" +
            "							createdBy,									createByRoleId,      \n" +
            "							updatedAt,									updatedBy,      \n" +
            "							updateByRoleId)      \n" +
            "				  VALUES 	(vTableName,										NEW.id,      \n" +
            "							\"Voided Date\",							'',      \n" +
            "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,      \n" +
            "							OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "							NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "  \n" +
            "  \n" +
            "			  INSERT INTO supplier_invoice_payment_history      \n" +
            "							(tableName,									refPaymentID,      \n" +
            "							Colname,									Oldval,      \n" +
            "							Newval,										createdAt,      \n" +
            "							createdBy,									createByRoleId,      \n" +
            "							updatedAt,									updatedBy,      \n" +
            "							updateByRoleId)      \n" +
            "				  VALUES 	(vTableName,										NEW.id,      \n" +
            "							\"Voided By\",									'',      \n" +
            "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,      \n" +
            "							OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "							NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "		  END IF;      \n" +
            "    END IF;    \n" +
            "  \n" +
            "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"      \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"      \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"      \n" +
            "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,      \n" +
            "					NEW.voidPaymentReason,								OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,      \n" +
            "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN      \n" +
            "        INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'      \n" +
            "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),      \n" +
            "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'      \n" +
            "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'      \n" +
            "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN      \n" +
            "        INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					\"Locked Date\",									'',      \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN      \n" +
            "        INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					\"Locked By\",									'',      \n" +
            "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "    END IF;      \n" +
            "  \n" +
            "  \n" +
            "    IF NEW.refPaymentMode = 'P' THEN      \n" +
            "  \n" +
            "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN      \n" +
            "			IF OLD.mfgcodeID IS NOT NULL THEN      \n" +
            "				SELECT IFNULL(`mfgCode`, '') INTO vOldval      \n" +
            "				FROM mfgcodemst      \n" +
            "				WHERE id =OLD.mfgcodeID      \n" +
            "				ORDER BY id DESC LIMIT 1;      \n" +
            "			END IF;      \n" +
            "			IF NEW.mfgcodeID IS NOT NULL THEN      \n" +
            "				SELECT IFNULL(`mfgCode`, '') INTO vNewval      \n" +
            "				FROM mfgcodemst      \n" +
            "				WHERE id =NEW.mfgcodeID      \n" +
            "				ORDER BY id DESC LIMIT 1;      \n" +
            "			END IF;      \n" +
            "			  INSERT INTO supplier_invoice_payment_history      \n" +
            "						(tableName,									refPaymentID,      \n" +
            "						Colname,									Oldval,      \n" +
            "						Newval,										createdAt,      \n" +
            "						createdBy,									createByRoleId,      \n" +
            "						updatedAt,									updatedBy,      \n" +
            "						updateByRoleId)      \n" +
            "			  VALUES 	(vTableName,										NEW.id,      \n" +
            "						\"Supplier\",									vOldval,      \n" +
            "						vNewval,												OLD.updatedAt,      \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "		END IF;      \n" +
            "  \n" +
            "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN      \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "						(tableName,									refPaymentID,      \n" +
            "						Colname,									Oldval,      \n" +
            "						Newval,										createdAt,      \n" +
            "						createdBy,									createByRoleId,      \n" +
            "						updatedAt,									updatedBy,      \n" +
            "						updateByRoleId)      \n" +
            "			  VALUES 	(vTableName,										NEW.id,      \n" +
            "						\"Pay To name\",									OLD.payToName,      \n" +
            "						NEW.payToName,									OLD.updatedAt,      \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	    END IF;      \n" +
            "  \n" +
            "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN      \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "						(tableName,									refPaymentID,      \n" +
            "						Colname,									Oldval,      \n" +
            "						Newval,										createdAt,      \n" +
            "						createdBy,									createByRoleId,      \n" +
            "						updatedAt,									updatedBy,      \n" +
            "						updateByRoleId)      \n" +
            "			  VALUES 	(vTableName,										NEW.id,      \n" +
            "						\"Pay To Address\",									OLD.payToAddress,      \n" +
            "						NEW.payToAddress,								OLD.updatedAt,      \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	    END IF;      \n" +
            "  \n" +
            "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN      \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "						(tableName,									refPaymentID,      \n" +
            "						Colname,									Oldval,      \n" +
            "						Newval,										createdAt,      \n" +
            "						createdBy,									createByRoleId,      \n" +
            "						updatedAt,									updatedBy,      \n" +
            "						updateByRoleId)      \n" +
            "			  VALUES 	(vTableName,										NEW.id,      \n" +
            "						\"Bill To Name\",									OLD.billToName,      \n" +
            "						NEW.billToName,									OLD.updatedAt,      \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	    END IF;      \n" +
            "  \n" +
            "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN      \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "						(tableName,									refPaymentID,      \n" +
            "						Colname,									Oldval,      \n" +
            "						Newval,										createdAt,      \n" +
            "						createdBy,									createByRoleId,      \n" +
            "						updatedAt,									updatedBy,      \n" +
            "						updateByRoleId)      \n" +
            "			  VALUES 	(vTableName,										NEW.id,      \n" +
            "						\"Bill To Address\",								OLD.billToAddress,      \n" +
            "						NEW.billToAddress,								OLD.updatedAt,      \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	    END IF;      \n" +
            "  \n" +
            "  \n" +
            "    ELSEIF NEW.refPaymentMode IN ('R','RR') THEN      \n" +
            "  \n" +
            "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN      \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "						(tableName,						refPaymentID,      \n" +
            "						Colname,						Oldval,      \n" +
            "						Newval,							createdAt,      \n" +
            "						createdBy,						createByRoleId,      \n" +
            "						updatedAt,						updatedBy,      \n" +
            "						updateByRoleId)      \n" +
            "			  VALUES 	(vTableName,							NEW.id,      \n" +
            "					\"Deposit Batch#\",						OLD.depositBatchNumber,      \n" +
            "					NEW.depositBatchNumber,						OLD.updatedAt,      \n" +
            "					OLD.updatedBy,							OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "	    END IF;      \n" +
            "  \n" +
            "    END IF;      \n" +
            "    IF NEW.refPaymentMode IN ('RR','CR') THEN    \n" +
            "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN    \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.id,      \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"   \n" +
            "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
            "						ELSE '' END),								OLD.offsetAmount,      \n" +
            "					NEW.offsetAmount,								OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "        END IF;    \n" +
            "  \n" +
            "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN    \n" +
            "			INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,								NEW.id,      \n" +
            "					\"COA\",											    \n" +
            "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),    \n" +
            "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),    \n" +
            "					OLD.updatedAt,   							OLD.updatedBy,    \n" +
            "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/    \n" +
            "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId); /*updateByRoleId*/    \n" +
            "        END IF;    \n" +
            "    END IF;    \n" +
            "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_Det_History` ;  \n" +
            "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_Det_History` AFTER UPDATE ON `packingslip_invoice_payment_det`   \n" +
            "    FOR EACH ROW BEGIN      \n" +
            "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment_det\";      \n" +
            "	DECLARE vOldval LONGTEXT DEFAULT '';      \n" +
            "	DECLARE vNewval LONGTEXT DEFAULT '';      \n" +
            "	DECLARE vRefPaymentMode VARCHAR(10);    \n" +
            "    DECLARE vReceiptType VARCHAR(10);    \n" +
            "  \n" +
            "	SELECT refPaymentMode INTO vRefPaymentMode      \n" +
            "	FROM packingslip_invoice_payment      \n" +
            "	WHERE id = NEW.refPayementid ;    \n" +
            "  \n" +
            "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN    \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId,								refPackingslipInvoiceID,  \n" +
            "					refRefundPaymentID,								refRefundCustCreditMemoID)      \n" +
            "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,    \n" +
            "					(CASE WHEN vRefPaymentMode = 'CA' THEN 'Credit Memo AMT. Applied in Detail'    \n" +
            "						WHEN vRefPaymentMode = 'WOFF' THEN 'Write Off Amount in Detail ($)'  \n" +
            "						WHEN vRefPaymentMode = 'CR' THEN 'Refund Amount in Detail ($)'  \n" +
            "						ELSE 'Payment ($) in line Detail' END),				FORMAT(OLD.paymentAmount,2),    \n" +
            "					FORMAT(NEW.paymentAmount,2),							OLD.updatedAt,    \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,    \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/    \n" +
            "					NEW.updateByRoleId /*updateByRoleId*/,						OLD.refPackingslipInvoiceID,  \n" +
            "					OLD.refRefundPaymentID,								OLD.refRefundCustCreditMemoID);    \n" +
            "	END IF;      \n" +
            "  \n" +
            "	IF (vRefPaymentMode = 'CA' AND (IFNULL(OLD.appliedDate, \"\") != IFNULL(NEW.appliedDate, \"\"))) THEN      \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,      \n" +
            "					'Applied Credit Memo Date in Detail',						CAST(DATE_FORMAT(OLD.appliedDate, '%m/%d/%y') AS CHAR),      \n" +
            "					CAST(DATE_FORMAT(NEW.appliedDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/      \n" +
            "  \n" +
            "	END IF;      \n" +
            "  \n" +
            "    IF vRefPaymentMode = 'RR' AND OLD.isDeleted = 0 AND NEW.isDeleted = 1 THEN    \n" +
            "		SELECT a.receiptType    \n" +
            "          INTO vReceiptType    \n" +
            "		  FROM packing_slip_material_receive a    \n" +
            "		 WHERE id = OLD.refPackingslipInvoiceID;    \n" +
            "  \n" +
            "         INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId,								refPackingslipInvoiceID)      \n" +
            "		    VALUES (vTableName,											NEW.refPayementid,		NEW.id,    \n" +
            "					(CASE WHEN vReceiptType = 'C' THEN 'Credit Memo'    \n" +
            "						WHEN vReceiptType = 'D' THEN 'Debit Memo'    \n" +
            "						ELSE '' END),							'',    \n" +
            "					'Deleted',									OLD.updatedAt,    \n" +
            "					OLD.updatedBy,								OLD.updateByRoleId,    \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/    \n" +
            "					NEW.updateByRoleId /*updateByRoleId*/,					OLD.refPackingslipInvoiceID);   \n" +
            "  \n" +
            "  \n" +
            "	IF vRefPaymentMode = 'CR' AND (IFNULL(OLD.comment, \"\") != IFNULL(NEW.comment, \"\")) THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history      \n" +
            "					(tableName,									refPaymentID,    		refPaymentDetID,      \n" +
            "					Colname,									Oldval,      \n" +
            "					Newval,										createdAt,      \n" +
            "					createdBy,									createByRoleId,      \n" +
            "					updatedAt,									updatedBy,      \n" +
            "					updateByRoleId)      \n" +
            "		  VALUES 	(vTableName,										NEW.refPayementid,		NEW.id,      \n" +
            "					'Reason',									OLD.comment,      \n" +
            "					NEW.comment,									OLD.updatedAt,      \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,      \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/      \n" +
            "					NEW.updateByRoleId /*updateByRoleId*/);      \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "    END IF;    \n" +
            "  \n" +
            "END;  \n" +
             /* **************************** Add Script Version -> 29-07-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1081,'1.00','V1',' payment triggers  - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1081:
             allDbChangesArray.push(
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierInvoicePaymentHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentHistory`(    \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN precordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pPaymentID INT,      \n" +
                "	IN pRefPaymentMode VARCHAR(5)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;      \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN      \n" +
                "		CREATE TEMPORARY TABLE temp_custInvListOfPayment AS      \n" +
                "			SELECT id, invoiceNumber      \n" +
                "			FROM customer_packingslip      \n" +
                "			WHERE id IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE refPayementid = pPaymentID)      \n" +
                "			AND transType = 'I'      \n" +
                "			AND isDeleted = 0 ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_custInvListOfPayment AS      \n" +
                "		SELECT id, invoiceNumber FROM customer_packingslip WHERE 1=0;      \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierInvoicePaymentHistory = CONCAT(\"      \n" +
                "			SELECT      \n" +
                "				id, tableName , refPaymentID ,      \n" +
                "				colName,      \n" +
                "				oldVal,      \n" +
                "				newVal,      \n" +
                "				(CASE WHEN ('\",pRefPaymentMode,\"' = 'R' OR '\",pRefPaymentMode,\"' = 'CA' OR '\",pRefPaymentMode,\"' = 'WOFF') AND siph.refPaymentDetID IS NOT NULL      \n" +
                "						THEN (SELECT invoiceNumber FROM temp_custInvListOfPayment      \n" +
                "							WHERE id = (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det WHERE id = siph.refPaymentDetID))  \n" +
                "					WHEN '\",pRefPaymentMode,\"' IN ('P','RR') THEN     \n" +
                "						  (select ifnull(a.creditMemoNumber, a.debitMemoNumber)    \n" +
                "						     from packing_slip_material_receive a    \n" +
                "						    where a.id = siph.refPackingslipInvoiceID)    \n" +
                "				    ELSE '' END) AS invoiceNumber ,   \n" +
                "				  (CASE WHEN '\",pRefPaymentMode,\"' = 'CR' AND siph.refRefundPaymentID IS NOT NULL THEN  \n" +
                "						(SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = siph.refRefundPaymentID)  \n" +
                "					ELSE '' END) AS custPaymentNumber ,  \n" +
                "				  (CASE WHEN '\",pRefPaymentMode,\"' = 'CR' AND siph.refRefundCustCreditMemoID IS NOT NULL THEN  \n" +
                "						(SELECT creditMemoNumber FROM customer_packingslip WHERE id = siph.refRefundCustCreditMemoID)   \n" +
                "					ELSE '' END) AS custCreditMemoNumber ,			  \n" +
                "				fun_getUserNameByID(updatedBy) updatedBy,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole      \n" +
                "			FROM    supplier_invoice_payment_history siph      \n" +
                "			WHERE   refPaymentID =\",pPaymentID,\"      \n" +
                "	\");      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierInvoicePaymentHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_custInvListOfPayment;      \n" +
                "  \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(                   \n" +
                "	IN pSystemId VARCHAR(20),                \n" +
                "	IN pRefVoidPaymentId INT,                          \n" +
                "	IN pAccountReference VARCHAR(50),                          \n" +
                "	IN pPaymentType INT,                          \n" +
                "	IN pPaymentNumber VARCHAR(50),                          \n" +
                "	IN pBankAccountMasID INT,                          \n" +
                "	IN pBankAccountNo VARCHAR(50),                          \n" +
                "	IN pBankName VARCHAR(255),                          \n" +
                "	IN pPaymentDate DATE,                          \n" +
                "	IN pRemark VARCHAR(255),                          \n" +
                "	IN pPayToName VARCHAR(255),                          \n" +
                "	IN pPayToAddress VARCHAR(255),                          \n" +
                "	IN pVoidPaymentReason VARCHAR(255),              \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),                       \n" +
                "	IN pMfgcodeID INT,              \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,             \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),                        \n" +
                "	IN pUserID INT,                          \n" +
                "	IN pRoleID INT                          \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE vCount INT;                            \n" +
                "	DECLARE vCountExistsCheckNo INT;                            \n" +
                "	DECLARE vNewPaymentID INT;                            \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);                            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                              \n" +
                "BEGIN                              \n" +
                "	ROLLBACK;                              \n" +
                "	RESIGNAL;                              \n" +
                "END;                              \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                              \n" +
                "  BEGIN                              \n" +
                "	ROLLBACK;                              \n" +
                "	RESIGNAL;                              \n" +
                "END;                              \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */              \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount                            \n" +
                "	FROM 	packingslip_invoice_payment                            \n" +
                "	WHERE 	id = pRefVoidPaymentId                            \n" +
                "	AND isPaymentVoided = 0                      \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;                            \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;	              \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN              \n" +
                "		/*check duplicate check number validation*/                  \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo                          \n" +
                "		FROM 	packingslip_invoice_payment                          \n" +
                "		WHERE 	isdeleted = 0                          \n" +
                "		AND paymentNumber = pPaymentNumber                          \n" +
                "		AND bankAccountMasID = pBankAccountMasID              \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                          \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN              \n" +
                "		/* check duplicate check number if confirmation not taken */                \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                        \n" +
                "		FROM packingslip_invoice_payment                        \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment               \n" +
                "		AND paymentNumber = pPaymentNumber                        \n" +
                "		AND mfgcodeID = pMfgcodeID               \n" +
                "		AND isdeleted = 0    ;              \n" +
                "	 END IF;                 \n" +
                "  \n" +
                "  \n" +
                "	IF vCount = 1 AND vCountExistsCheckNo = 0 THEN                            \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment                            \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,                            \n" +
                "			isPaymentVoided = 1,                            \n" +
                "			updatedBy = pUserID,                            \n" +
                "			updateByRoleId = pRoleID,                          \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                          \n" +
                "		WHERE 	id = pRefVoidPaymentId                            \n" +
                "		AND isDeleted = 0                      \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;             \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/                  \n" +
                "		INSERT INTO packingslip_invoice_payment                            \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,                            \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,                            \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,                    \n" +
                "				billToName, billToAddress, isZeroPayment, depositBatchNumber,             \n" +
                "				lockStatus, refundStatus)                            \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,                            \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,                            \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,                    \n" +
                "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,            \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)     \n" +
                "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL' 		           \n" +
                "					ELSE NULL END),  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END)	                   \n" +
                "		FROM 	packingslip_invoice_payment                            \n" +
                "		WHERE 	id = pRefVoidPaymentId                            \n" +
                "		AND isDeleted = 0                      \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                            \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();                            \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/                  \n" +
                "		UPDATE 	packingslip_invoice_payment_det                  \n" +
                "		SET 	isPaymentVoided = 1,                  \n" +
                "			updatedBy = pUserID,                  \n" +
                "			updateByRoleId = pRoleID,                  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                  \n" +
                "		AND isDeleted = 0;                  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/                  \n" +
                "		INSERT INTO packingslip_invoice_payment_det                            \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,               \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)                            \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,                             \n" +
                "			pUserID, pRoleID, paymentAmount,               \n" +
                "			FALSE, refCustPackingslipInvoiceID	                \n" +
                "		FROM 	packingslip_invoice_payment_det                            \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                            \n" +
                "		AND isDeleted = 0;                  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;                            \n" +
                "	ELSE                            \n" +
                "		IF vCountExistsCheckNo != 0 THEN                          \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;                          \n" +
                "		ELSEIF vCount = 0 THEN              \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId                \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN              \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;              \n" +
                "			ELSE              \n" +
                "				SELECT 'NOT_FOUND' AS message;                \n" +
                "			END IF;	                 \n" +
                "		ELSE                          \n" +
                "			SELECT 'NOT_FOUND' AS message;                          \n" +
                "		END IF;                          \n" +
                "	END IF;                            \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentDetForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(                                                                                                      \n" +
                "	IN pPaymentMstID INT,    \n" +
                "	IN pRefPaymentMode VARCHAR(5),    \n" +
                "	IN pFromdate DATE,    \n" +
                "	IN pTodate DATE,    \n" +
                "	IN pRequiredCount TINYINT     \n" +
                ")  \n" +
                "BEGIN                                                                                                      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                          \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "	IF (pRequiredCount) THEN    \n" +
                "		SELECT COUNT(1) totalCount    \n" +
                "		FROM packingslip_invoice_payment psip    \n" +
                "		WHERE psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)   \n" +
                "		AND psip.isDeleted = 0;    \n" +
                "  \n" +
                "	ELSE    \n" +
                "  \n" +
                "		SELECT 						                                                        \n" +
                "			psip.id,  \n" +
                "			psip.mfgcodeID, cps1.id AS custCreditMemoID , cps1.creditMemoNumber ,       \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cps1.creditMemoDate, v_TimeZone, v_DateTimeDisplayFormat) AS creditMemoDate ,                                           \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                   \n" +
                "			psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "			fun_getIntToText(psip.isPaymentVoided) AS isPaymentVoidedConvertedValue,  \n" +
                "			psip.voidPaymentReason,                \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,                 \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,                                  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)                \n" +
                "									ELSE NULL END) AS voidedAt,	                            \n" +
                "			psip.refVoidedPaymentNumber,                  \n" +
                "			psip.refVoidedPaymentId,                              \n" +
                "			psip.paymentNumber,       \n" +
                "			psip.bankName,                                                \n" +
                "			psip.bankAccountNo,                                                \n" +
                "			psip.paymentType,                                                \n" +
                "			psip.bankAccountMasID,               \n" +
                "			psip.systemId ,                                               \n" +
                "			gc.gencCategoryName paymentMethod,                                          \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,                                          \n" +
                "			psip.paymentDate,                                          \n" +
                "			psip.accountReference,                                          \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'           \n" +
                "			WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,	          \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                                  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,                                                                     \n" +
                "			invPayDetTemp.invoiceNumberList,            \n" +
                "			psip.remark  , psip.depositBatchNumber,    \n" +
                "			psip.isDeleted,  \n" +
                "			(CASE WHEN psip.refPaymentMode IN ('WOFF','CR') THEN (SELECT modeName FROM `generic_transmode_mst` WHERE id = psip.refGencTransModeID)  \n" +
                "				ELSE NULL END) transactionModeName,  \n" +
                "			payRefundDetTemp.paymentNumListAgainstRefund,  \n" +
                "			cmRefundDetTemp.CMNumListAgainstRefund		   \n" +
                "		FROM packingslip_invoice_payment psip         \n" +
                "			LEFT JOIN customer_packingslip cps1 ON cps1.id = refCustCreditMemoID AND cps1.transType = 'C' AND cps1.isDeleted = 0      \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0                        \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') AS invoiceNumberList                       \n" +
                "				    FROM packingslip_invoice_payment_det psipd                        \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND cps.isDeleted = 0                        \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                         \n" +
                "				     AND psipd.isDeleted = 0                        \n" +
                "				      GROUP BY psipd.refPayementid) invPayDetTemp                         \n" +
                "				ON psip.id = invPayDetTemp.refPayementid   \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber SEPARATOR ', ') AS paymentNumListAgainstRefund    \n" +
                "					FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0    \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL     \n" +
                "					AND psipd.isDeleted = 0      \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp     \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid     \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,  GROUP_CONCAT(cps.creditMemoNumber SEPARATOR ', ') AS CMNumListAgainstRefund    \n" +
                "					 FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL     \n" +
                "					AND psipd.isDeleted = 0      \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp     \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid   \n" +
                "  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)            \n" +
                "            AND psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)    \n" +
                "            AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN     \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)     \n" +
                "					OR (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))    \n" +
                "				ELSE 1 = 1 END);    \n" +
                "	END IF;    \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(    \n" +
                "	IN pPaymentMstID INT ,    \n" +
                "	IN pRefPaymentMode VARCHAR(10)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "		DECLARE v_TimeZone VARCHAR(50);    \n" +
                "		DECLARE v_PayRefundTblJoin VARCHAR(1000);    \n" +
                "		DECLARE v_FieldsForPayStatus VARCHAR(1000);   \n" +
                "		DECLARE v_FieldsForCustPayment VARCHAR(1000);   \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;   \n" +
                "		SET v_PayRefundTblJoin = '';    \n" +
                "		SET v_FieldsForPayStatus = '\"\"';   \n" +
                "		SET v_FieldsForCustPayment = '';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "									FROM packingslip_invoice_payment_det   \n" +
                "									WHERE refRefundPaymentID = ',pPaymentMstID,'   \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0					  \n" +
                "									GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "								ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');   \n" +
                "  \n" +
                "			SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =   \n" +
                "											(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN   \n" +
                "										(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "											ELSE \"No Pending Amount\" END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "										THEN \"Not Applied\"   \n" +
                "										ELSE \"Partially Applied\" END)  \n" +
                "								END) ') ;  \n" +
                "  \n" +
                "			SET v_FieldsForCustPayment = CONCAT(' psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');					  \n" +
                "  \n" +
                "		END IF;					  \n" +
                "  \n" +
                "  \n" +
                "		SET @v_querySt = CONCAT(\"    \n" +
                "		SELECT 	psip.id,    \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,    \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,    \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,    \n" +
                "			psip.refGencTransModeID ,    \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  psip.isMarkForRefund , psip.agreedRefundAmt ,    \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,    \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') AS lockedAt,    \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,    \n" +
                "			\", v_FieldsForCustPayment,\"   \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"   \n" +
                "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue ,    \n" +
                "			 (CASE WHEN psip.refPaymentID IS NULL THEN NULL    \n" +
                "				ELSE (SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = psip.refPaymentID AND isDeleted = 0)    \n" +
                "					END) AS refPaymentNumFromTransInitiate ,    \n" +
                "			psip.refPaymentID  ,    \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundPaymentID = psip.id  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedOfPayment ,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby    \n" +
                "		FROM packingslip_invoice_payment psip    \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,    \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount    \n" +
                "				    FROM packingslip_invoice_payment_det psipd    \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "											AND cps.isDeleted = 0    \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL    \n" +
                "				     AND psipd.isDeleted = 0    \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp    \n" +
                "				ON psip.id = invPayDetTemp.refPayementid    \n" +
                "			\", v_PayRefundTblJoin ,\"  	  \n" +
                "		WHERE psip.id = \",pPaymentMstID,\"    \n" +
                "		AND psip.refPaymentMode = '\",pRefPaymentMode,\"'    \n" +
                "		AND psip.isDeleted = 0    \n" +
                "		\");    \n" +
                "  \n" +
                "  \n" +
                "		PREPARE query1 FROM @v_querySt;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(              \n" +
                "	IN invoiceID INT      ,              \n" +
                "    IN pTransType VARCHAR(5)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);              \n" +
                "	DECLARE vTimeZone VARCHAR(50);              \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;              \n" +
                "	                 SELECT inv.id,   inv.transType,              \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,              \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,              \n" +
                "                        cps.id packingSlipID,              \n" +
                "						inv.refSalesOrderId  ,              \n" +
                "                        inv.systemID,              \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,              \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,              \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,              \n" +
                "						inv.soNumber,inv.soDate,              \n" +
                "                        inv.packingSlipType,inv.`status`,              \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,              \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,              \n" +
                "						inv.invoiceNumber,inv.invoiceDate,              \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,              \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,              \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,              \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,              \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,              \n" +
                "                        inv.intermediateShipmentId ,              \n" +
                "						inv.billingAddress,              \n" +
                "						inv.shippingAddress,              \n" +
                "						inv.intermediateAddress,              \n" +
                "                        inv.isLocked,              \n" +
                "                        inv.subStatus,              \n" +
                "                        inv.paymentStatus,              \n" +
                "                        inv.packingSlipType,              \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,              \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,              \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,           \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,              \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,              \n" +
                "                        inv.isZeroValue,              \n" +
                "                        inv.revision,              \n" +
                "                        cps.subStatus packingSlipSubStatus,              \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))              \n" +
                "						ELSE '' END) materialStatus ,              \n" +
                "                        inv.isAlreadyPublished ,              \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,              \n" +
                "			cps.revision packingSlipVersion,            \n" +
                "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)             \n" +
                "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)            \n" +
                "			ELSE NULL END) receivedAmount,        \n" +
                "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'          \n" +
                "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN					  \n" +
                "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
                "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,					    \n" +
                "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')   \n" +
                "				END) AS paymentStatusCode,  \n" +
                "			inv.refundStatus,	  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
                "				ELSE NULL END) AS creditMemoRefundStatusText ,		  \n" +
                "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,    \n" +
                "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,    \n" +
                "			fun_getUserNameByID(inv.createdBy) createdByInitial,    \n" +
                "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,    \n" +
                "			inv.isAskForVersionConfirmation,    \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt             \n" +
                "		FROM customer_packingslip inv              \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'              \n" +
                "                 WHERE inv.id = invoiceID              \n" +
                "                 AND inv.transType = pTransType;              \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,              \n" +
                "					cpd.id,              \n" +
                "                    cpd.refCustPackingSlipID,              \n" +
                "					cpd.custPOLineID,              \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,              \n" +
                "                    cpd.lineID,              \n" +
                "                    co.PIDCode,              \n" +
                "                    co.mfgcodeID,              \n" +
                "                    ss.releaseNumber,              \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,              \n" +
                "					co.mfgpn,              \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,              \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,              \n" +
                "                    cpd.partId,              \n" +
                "                    cpd.refChargesTypeID,              \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,              \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,              \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,              \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,              \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,              \n" +
                "                    othercharges AS lineOtherCharges,              \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,              \n" +
                "					cpd.shippingNotes,              \n" +
                "                    cpd.internalComment,              \n" +
                "                    cpd.assyDescription,              \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,              \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,              \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,              \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,              \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,              \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,              \n" +
                "                    co.partType,              \n" +
                "                    vu.packingLineID,              \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,              \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,              \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert              \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID              \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,              \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,              \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,              \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'              \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'              \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )              \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn              \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0              \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,              \n" +
                "                    cpd.isZeroValue,              \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted              \n" +
                "				 FROM customer_packingslip_det cpd              \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0              \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0              \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId              \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0              \n" +
                "                 ORDER BY cpd.lineID ASC;              \n" +
                "  \n" +
                "                 SELECT cpOther.id,              \n" +
                "						cpOther.refCustomerPackingSlipDetID,              \n" +
                "						cpOther.partID,              \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,              \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,              \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,              \n" +
                "                        cpOther.qty,              \n" +
                "                        cpOther.price,              \n" +
                "                        cpOther.lineComment,              \n" +
                "                         cpOther.lineInternalComment,              \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,              \n" +
                "                        cpOther.frequency ,              \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'              \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'              \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'              \n" +
                "								ELSE ''              \n" +
                "						END) AS frequencyName              \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0              \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cpOther.isdeleted=0;              \n" +
                "  \n" +
                "                  --  Tracking Number              \n" +
                "                SELECT id,trackNumber              \n" +
                "                FROM customer_packing_slip_track_number              \n" +
                "                WHERE refCustPackingSlipID = invoiceID              \n" +
                "                AND isDeleted = 0;              \n" +
                "  \n" +
                "                -- sales commission attribute        \n" +
                "                SELECT cca.id,              \n" +
                "		    cca.refCustPackingSlipDetID,              \n" +
                "                    cca.unitPrice,           \n" +
                "                    cca.commissionPercentage,              \n" +
                "                    cca.commissionValue,              \n" +
                "                    cca.quoted_commissionPercentage,              \n" +
                "                    cca.quoted_commissionValue,              \n" +
                "                    cca.poQty,              \n" +
                "                    cca.partId,      \n" +
                "                    cca.quotedQty,      \n" +
                "                    cca.type,      \n" +
                "                    cca.rfqAssyID,      \n" +
                "                    cca.commissionCalculateFrom,      \n" +
                "                    cca.salesCommissionNotes,              \n" +
                "                    cca.refComponentSalesPriceBreakID,              \n" +
                "                    cca.quoted_unitPrice          \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0      \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cca.isdeleted=0;      \n" +
                "                 -- sales commission child attribute            \n" +
                "                SELECT cca.id,              \n" +
                "		    cca.refCustPackingSlipDetID,      \n" +
                "		    cca.refcustInvoiceCommissionID,              \n" +
                "                    cca.unitPrice,              \n" +
                "                    cca.refQuoteAttributeId,              \n" +
                "                    cca.commissionPercentage,              \n" +
                "                    cca.commissionValue,              \n" +
                "                    cca.org_commissionPercentage,              \n" +
                "                    cca.org_commissionValue,              \n" +
                "                    cca.category,              \n" +
                "                    cca.partId,              \n" +
                "                    cca.refComponentSalesPriceBreakID,              \n" +
                "                    cca.org_unitPrice,              \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,              \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,              \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName              \n" +
                "				FROM customer_packingslip_commission_attribute cca              \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0              \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0              \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID              \n" +
                "                 AND cca.isdeleted=0;              \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_SaveCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                                          \n" +
                "	IN pTransType VARCHAR(5),                                                  \n" +
                "	IN pInvoiceType VARCHAR(1),                                                      \n" +
                "	IN pInvoiceID INT,              	                                                      \n" +
                "	IN pInvData JSON,                                                      \n" +
                "	IN pPackingSlipID INT,                                                      \n" +
                "	IN puserID INT,                                                                \n" +
                "	IN puserRoleID INT ,                                                            \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),                          \n" +
                "	IN pSystemId VARCHAR(20)  ,                        \n" +
                "	IN pPackingSlipType INT                        \n" +
                ")  \n" +
                "BEGIN                                                                       \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                                    \n" +
                "	DECLARE v_prefix VARCHAR(20);                                                            \n" +
                "	DECLARE vTermsDays INT ;           \n" +
                "	DECLARE v_incrementI INT;            \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);      \n" +
                "	DECLARE vTotRefundIssuedOfCreditMemo DECIMAL(18,8);   \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;      \n" +
                "  \n" +
                "  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                                  \n" +
                "	SELECT 	*                                                                                                   \n" +
                "	FROM 	JSON_TABLE(                                                           \n" +
                "			pInvData,                                                                                                  \n" +
                "			\"$[*]\" COLUMNS(    			                                                     \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                                      \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                                      \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                                       \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",                                                      \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                                                  \n" +
                "				`status` INT PATH \"$.status\",                                                      \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                                      \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                                  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                                  \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                                       \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                                  \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                                          \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                                        \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                                        \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                                        \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                                        \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                                        \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                                      \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                                      \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                                      \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                                      \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                                      \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                                      \n" +
                "				`billToId` INT PATH \"$.billToId\" ,                                                      \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                                      \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                                      \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                                      \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                                      \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                                      \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                                  \n" +
                "				`creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                                        \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                                   \n" +
                "				`refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                                        \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                                   \n" +
                "				`rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                                  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",                      \n" +
                "				`revision` VARCHAR(10) PATH \"$.revision\",                      \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",                    \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",                 \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,            \n" +
                "				`isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",            \n" +
                "				`agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",    \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\",  \n" +
                "				`refundStatus` VARCHAR(5) PATH \"$.refundStatus\"  \n" +
                "			)                                                        \n" +
                "		) AS CustInv_JT;                                \n" +
                "  \n" +
                "  \n" +
                "	SELECT  termsDays INTO 	vTermsDays                                                      \n" +
                "	FROM genericCategory gc                                                       \n" +
                "	WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                                      \n" +
                "	AND categoryType = 'Payment Terms';   \n" +
                "  \n" +
                "	IF (pInvoiceID IS NULL)THEN                        \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                                            \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                                            \n" +
                "			FROM `identity`                                                            \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                                           \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                            \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                            \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                            \n" +
                "				packingSlipComment,headerComment,sorevision,                                                            \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                                            \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                                          \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                                       \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                                          \n" +
                "				refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,                      \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation,  \n" +
                "				refundStatus)                                                                 \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                                            \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                                            \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                                       \n" +
                "					packingSlipComment,headerComment,sorevision,                                                            \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                                           \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                                          \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                                      \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                                          \n" +
                "					refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,                      \n" +
                "					contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0,  \n" +
                "					refundStatus                                   \n" +
                "			FROM temp_customerInvoice ;			                                                      \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                                              \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                                             \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                                             \n" +
                "		 WHERE id= pPackingSlipID;                                                                \n" +
                "  \n" +
                "	 IF pPackingSlipID IS NOT NULL THEN                     \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order                    \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                                            \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                                          \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                                            \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                                            \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,                      \n" +
                "		    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                                \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                                            \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,                  \n" +
                "		    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),                    \n" +
                "		    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                                         \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,                  \n" +
                "		    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                                          \n" +
                "					puserRoleID,puserRoleID,                  \n" +
                "		    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                                            \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,                  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),                  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),                  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),                  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),                      \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),                  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,                   \n" +
                "		    cpd.isZeroValue                                                          \n" +
                "			FROM customer_packingslip_det   cpd                          \n" +
                "	    LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0                  \n" +
                "	    LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0                  \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                                             \n" +
                "			AND cpd.isDeleted = 0;                              \n" +
                "  \n" +
                "	    IF pPackingSlipType = 2 THEN -- PO/SO INV            \n" +
                "	    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                            \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,                            \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,                            \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)                            \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,                          \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,                            \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes                             \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca                            \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                              \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;             \n" +
                "					-- child records                      \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                            \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                            \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                            \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                            \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,                            \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                            \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                             \n" +
                "					FROM salesorderdet_commission_attribute sca                            \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0                              \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;                              \n" +
                "  \n" +
                "	     ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV                   \n" +
                "					-- SP to generate line wise sales commission.                        \n" +
                "		    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);                        \n" +
                "		-- Sales Price details for Part master          \n" +
                "		    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                            \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                            \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                            \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                            \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,                            \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                            \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                             \n" +
                "					FROM temp_salesCommission sca                         \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                              \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;            \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ          \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;                                                                                        \n" +
                "			     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS            \n" +
                "			       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca           \n" +
                "			       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0                              \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;          \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;          \n" +
                "			SET v_incrementI=0;          \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO          \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;          \n" +
                "  \n" +
                "				SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;       \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM           \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;          \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN      \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));          \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,                            \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,                            \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,                            \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)                            \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,                            \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,                            \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID                             \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;          \n" +
                "					-- sales commission child details          \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;          \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,                            \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,                            \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,                            \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)                            \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,                            \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,                            \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,                            \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID                             \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;           \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;          \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;            \n" +
                "	     END IF;                               \n" +
                "	END IF;                                                      \n" +
                "  \n" +
                "	ELSE                         \n" +
                "  \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                                      \n" +
                "			UPDATE customer_packingslip cp                                                      \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                      \n" +
                "			SET cp.invoiceDate= tci.invoiceDate,                                                      \n" +
                "				cp.`status`= tci.status,  			                                                            \n" +
                "				cp.subStatus = tci.subStatus,                                                      \n" +
                "				cp.headerComment= tci.headerComment,                                                      \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                                      \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,                                            \n" +
                "				cp.updatedAt = fun_DatetimetoUTCDateTime(),                                            \n" +
                "				cp.updatedBy = puserID,                                            \n" +
                "				cp.updateByRoleId = puserRoleID  ,                                  \n" +
                "				cp.billingAddress= tci.billingAddress,                                                      \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                                      \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                  \n" +
                "				cp.contactPersonId = tci.contactPersonId,                                  \n" +
                "				cp.billToId = tci.billToId,                                        \n" +
                "				cp.shipToId  = tci.shipToId,                                        \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,                      \n" +
                "				cp.revision = LPAD(tci.revision,2,'0'),                      \n" +
                "				cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,                    \n" +
                "				cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),                \n" +
                "				cp.poRevision = tci.poRevision ,    \n" +
                "				cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation    \n" +
                "			WHERE cp.id=pInvoiceID                    \n" +
                "			AND cp.transType = pTransType;                                                         \n" +
                "  \n" +
                "		ELSE     \n" +
                "  \n" +
                "			IF (pTransType = 'C') THEN  \n" +
                "				/* get total refunded amount till now  */	  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pInvoiceID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "  \n" +
                "				/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "				IF (IFNULL((SELECT agreedRefundAmt FROM temp_customerInvoice),0) < vTotRefundIssuedOfCreditMemo) THEN  \n" +
                "					SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "				END IF;  \n" +
                "			END IF;	  \n" +
                "  \n" +
                "			IF (vIsAgreedRefundLessThanTotIssued = 0) THEN					  \n" +
                "				# in case of tariff invoice & credit memo update all other field                                                      \n" +
                "				UPDATE customer_packingslip  cp                                                        \n" +
                "					JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                                      \n" +
                "				SET	cp.status= tci.status,                                                      \n" +
                "					cp.subStatus= tci.subStatus,                                                      \n" +
                "					cp.poNumber= tci.poNumber,                                                      \n" +
                "					cp.poDate= tci.poDate,                                                      \n" +
                "					cp.soNumber= tci.soNumber,                                                      \n" +
                "					cp.soDate= tci.soDate,                                                      \n" +
                "					cp.packingSlipNumber= tci.packingSlipNumber,                                                      \n" +
                "					cp.packingSlipDate= tci.packingSlipDate,                                                      \n" +
                "					cp.invoiceDate= tci.invoiceDate,                                                      \n" +
                "					cp.shippingMethodID= tci.shippingMethodID,                                                      \n" +
                "					cp.headerComment= tci.headerComment,                                                      \n" +
                "					cp.packingSlipComment= tci.packingSlipComment,                                                      \n" +
                "					cp.billingAddress= tci.billingAddress,                                                      \n" +
                "					cp.shippingAddress= tci.shippingAddress,                                                      \n" +
                "					cp.intermediateAddress= tci.intermediateAddress,                                                      \n" +
                "					cp.totalAmount= IFNULL(tci.totalAmount,0),                                                      \n" +
                "					cp.freeOnBoardId= tci.freeOnBoardId,                                                      \n" +
                "					cp.termsId= tci.termsId,                       \n" +
                "					cp.termsDays = vTermsDays,                      \n" +
                "					cp.salesCommissionTo= tci.salesCommissionTo ,                                                  \n" +
                "					cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                                  \n" +
                "					cp.refDebitMemoDate = tci.refDebitMemoDate,                                            \n" +
                "					cp.updatedAt = fun_DatetimetoUTCDateTime(),                                            \n" +
                "					cp.updatedBy = puserID,                                            \n" +
                "					cp.updateByRoleId = puserRoleID,                                          \n" +
                "					cp.rmaNumber= tci.rmaNumber,                                        \n" +
                "					cp.billToId = tci.billToId,                                        \n" +
                "					cp.shipToId  = tci.shipToId,                                        \n" +
                "					cp.intermediateShipmentId = tci.intermediateShipmentId ,                                      \n" +
                "					cp.invoiceNumber = tci.invoiceNumber ,                                  \n" +
                "					cp.contactPersonId = tci.contactPersonId,                      \n" +
                "					cp.revision =  LPAD(tci.revision,2,'0'),                      \n" +
                "					cp.isZeroValue = IFNULL(tci.isZeroValue,0),                    \n" +
                "					cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),                \n" +
                "					cp.poRevision = tci.poRevision ,            \n" +
                "					cp.isMarkForRefund = tci.isMarkForRefund,             \n" +
                "					cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),    \n" +
                "					cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "					cp.refundStatus = (CASE WHEN pTransType = 'C' THEN  \n" +
                "								(CASE WHEN tci.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN vTotRefundIssuedOfCreditMemo = 0 THEN 'PE'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo < ABS(IFNULL(tci.totalAmount,0)) THEN 'PR'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo = ABS(IFNULL(tci.totalAmount,0)) THEN 'FR'  \n" +
                "									   END)	  \n" +
                "								ELSE 'NA' END)  \n" +
                "							ELSE NULL END)    \n" +
                "				 WHERE cp.id = pInvoiceID                    \n" +
                "				 AND cp.transType = pTransType;     \n" +
                "  \n" +
                "			 END IF;                                                      \n" +
                "  \n" +
                "		END IF;                                                      \n" +
                "  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  /* Resp[0] - created invoice/credit memo mst ID  */	  \n" +
                "	  SELECT pInvoiceID invoiceID;                                                                \n" +
                "	/* Resp[1] - detail Id  */   \n" +
                "	SELECT id  detId ,refSalesorderDetId , reflineID                                                        \n" +
                "	FROM customer_packingslip_det                                                         \n" +
                "	WHERE  refCustPackingSlipID = pInvoiceID                                                         \n" +
                "	AND isDeleted = 0;      \n" +
                "  \n" +
                "	/* Resp[2] - store procedure status  */  \n" +
                "	  IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;    \n" +
                "	  ELSE    \n" +
                "		SELECT 1 AS 'spStatus' ;    \n" +
                "	  END IF;    \n" +
                "  \n" +
                "	  /* Resp[3] -  Agreed Refund Amount Less Than Total Issued Amout */   \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN    \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;    \n" +
                "	ELSE    \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;    \n" +
                "	END IF;   \n" +
                "  \n" +
                "  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;                       \n" +
                "  \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pCustomerIDs VARCHAR(16383),    \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),    \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),    \n" +
                "	IN pExactPaymentNumberSearch TINYINT,    \n" +
                "	IN pPaymentNumber VARCHAR(1000),    \n" +
                "	IN pInvoiceNumber VARCHAR(1000),    \n" +
                "	IN pAmount VARCHAR(50),    \n" +
                "	IN pExactPaymentAmountSearch TINYINT,    \n" +
                "	IN pFromDate DATE,    \n" +
                "	IN pToDate DATE,    \n" +
                "	IN pFromAppliedDate DATE,    \n" +
                "	IN pToAppliedDate DATE,    \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,    \n" +
                "	IN pRefPaymentMode VARCHAR(10),    \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT ,  \n" +
                "	IN pPaymentRefundStatusFilter VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);    \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);    \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);    \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);    \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);    \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);    \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);    \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);    \n" +
                "	DECLARE v_PayRefundTblJoin VARCHAR(1000);    \n" +
                "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);   \n" +
                "	DECLARE v_FieldsForPayStatus VARCHAR(1000);   \n" +
                "	DECLARE v_PaymentRefundStatusWhereClause VARCHAR(500);   \n" +
                "  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';    \n" +
                "	SET v_JoinWithCPSForCM = '';    \n" +
                "	SET v_FieldsForAppliedCM = '';    \n" +
                "	SET v_AppliedDateWhereClause = '';    \n" +
                "	SET v_AppliedDateCon = '';    \n" +
                "	SET v_FieldsForAppliedWOFF = '';    \n" +
                "	SET v_TypeOfPaymentWhereClause = '';    \n" +
                "	SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "	SET v_PayRefundTblJoin = '';    \n" +
                "	SET v_FieldsForPayRefundTbl = '';  \n" +
                "	SET v_FieldsForPayStatus = '\"\"';  \n" +
                "	SET v_PaymentRefundStatusWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');    \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF pPaymentRefundStatusFilter IS NOT NULL THEN    \n" +
                "		SET v_PaymentRefundStatusWhereClause = CONCAT(' AND FIND_IN_SET(psip.refundStatus,''', pPaymentRefundStatusFilter ,''')');    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */    \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "								FROM packingslip_invoice_payment_det   \n" +
                "								WHERE refRefundPaymentID IS NOT NULL  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0					  \n" +
                "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');   \n" +
                "		SET v_FieldsForPayRefundTbl = CONCAT(' paymentTotRefundDetTemp.totRefundIssuedOfPayment ,   \n" +
                "						psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
                "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =   \n" +
                "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN   \n" +
                "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "										ELSE \"No Pending Amount\" END)  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "									THEN \"Not Applied\"   \n" +
                "									ELSE \"Partially Applied\" END)  \n" +
                "							END) ') ;  \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */    \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');    \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');    \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,    \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,    \n" +
                "			fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,    \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,   \n" +
                "			cps.paymentStatus AS CMPaymentStatus,   \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus, 	   \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,	  \n" +
                "			');    \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */    \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN    \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND    \n" +
                "             EXISTS(    \n" +
                "			SELECT  1    \n" +
                "			FROM packingslip_invoice_payment_det    \n" +
                "			WHERE refPayementid = psip.id    \n" +
                "			AND isDeleted=0    \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id    \n" +
                "								FROM customer_packingslip    \n" +
                "								WHERE transType = \"I\"    \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"    \n" +
                "								AND isDeleted=0)    \n" +
                "			 )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');    \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');    \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN    \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN    \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');    \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN    \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');    \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN    \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND    \n" +
                "			EXISTS(    \n" +
                "				SELECT  1    \n" +
                "				FROM packingslip_invoice_payment_det    \n" +
                "				WHERE refPayementid = psip.id    \n" +
                "				',v_AppliedDateCon,'    \n" +
                "				AND isDeleted=0    \n" +
                "			 )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN    \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"    \n" +
                "            SELECT    \n" +
                "		psip.id,    \n" +
                "                psip.mfgcodeID,    \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,    \n" +
                "                psip.isPaymentVoided,    \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,   \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,    \n" +
                "		psip.voidPaymentReason,    \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,    \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,    \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')    \n" +
                "										ELSE NULL END) AS voidedAt,    \n" +
                "                psip.refVoidedPaymentNumber,    \n" +
                "                psip.refVoidedPaymentId,    \n" +
                "                psip.paymentNumber,    \n" +
                "                psip.bankName,    \n" +
                "                psip.bankAccountNo,    \n" +
                "                psip.paymentType,    \n" +
                "                psip.bankAccountMasID,    \n" +
                "                psip.systemId ,    \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,    \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,    \n" +
                "                gc.gencCategoryName paymentMethod,    \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,    \n" +
                "		psip.paymentDate,    \n" +
                "                psip.paymentAmount,    \n" +
                "		psip.payToAddress payToAddress,    \n" +
                "                psip.accountReference,    \n" +
                "                psip.remark,    \n" +
                "                psip.lockStatus,    \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'    \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,    \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,    \n" +
                "                invPayDetTemp.invoiceNumberList,    \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,    \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,    \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'    \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)    \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'    \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)    \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'    \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)    \n" +
                "			ELSE NULL END) AS totalDocuments ,    \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" ,v_FieldsForPayRefundTbl ,\"  	  \n" +
                "		\" , v_FieldsForAppliedCM ,\"    \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"    \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,    \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,    \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole    \n" +
                "	   FROM packingslip_invoice_payment psip    \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0    \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,    \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount    \n" +
                "				    FROM packingslip_invoice_payment_det psipd    \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "											AND cps.isDeleted = 0    \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL    \n" +
                "				     AND psipd.isDeleted = 0    \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp    \n" +
                "				ON psip.id = invPayDetTemp.refPayementid   \n" +
                "			\", v_PayRefundTblJoin ,\"    \n" +
                "			\", v_JoinWithCPSForCM ,\"    \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'    \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause ,   \n" +
                "		v_IsIncludeVoidedTransWhereClause ,v_PaymentRefundStatusWhereClause , \"    \n" +
                "             AND psip.isDeleted = 0 \"    \n" +
                "             );    \n" +
                "  \n" +
                "  \n" +
                "	-- select @Sproc_RetrieveCustomerInvoicePayment ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pFilterStatus LONGTEXT,    \n" +
                "	IN pDueDate DATE,    \n" +
                "	IN pAdditionalDays INT,    \n" +
                "	IN pTermsAndAboveDays INT,    \n" +
                "	IN pPoNumber VARCHAR(50),    \n" +
                "	IN pIsExactSearchPO TINYINT,    \n" +
                "	IN pMfgCodeIds LONGTEXT ,    \n" +
                "	IN pPaymentTermsIds LONGTEXT ,    \n" +
                "	IN pPartId INT,    \n" +
                "	IN pTransType VARCHAR(5) ,    \n" +
                "	IN pFromDate DATE,    \n" +
                "	IN pToDate DATE,    \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,    \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,    \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)  \n" +
                "    -- IN pChequeNumber  VARCHAR(50)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);    \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "	SET v_appliedCMPDJoin = '';    \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN    \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,			  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");    \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'    \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");    \n" +
                "	ELSE    \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"    \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,    \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,    \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,    \n" +
                "        cp.invoiceNumber,cp.invoiceDate,    \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,    \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,    \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'    \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,    \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1    \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,    \n" +
                "        cp.soNumber,cp.soDate,    \n" +
                "		cp.sorevision,    \n" +
                "        cp.refSalesOrderID,    \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,    \n" +
                "        cp.refCustInvoiceID,    \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,    \n" +
                "		 cp.status,    \n" +
                "         cp.subStatus,    \n" +
                "           /* case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'NI'    \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'WP'    \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'PTR'    \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'PR'    \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusCode,    \n" +
                "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Not Invoiced'    \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'    \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'    \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'    \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusValue,   \n" +
                "		 case when cp.transType = 'C' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL')   \n" +
                "			end creditAppliedStatus,                  \n" +
                "                */  \n" +
                "                case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE')   \n" +
                "			end paymentStatusCode,   \n" +
                "		case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL')   \n" +
                "			end paymentStatusValue,   \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus , 	   \n" +
                "		  cp.paymentStatus,    \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,    \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,    \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,    \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,    \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,    \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,    \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,    \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,    \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,    \n" +
                "		 m.mfgcode as customerCode,    \n" +
                "         cp.customerID,    \n" +
                "         cp.createdBy as createdById,    \n" +
                "		\",v_receivedAmtSF,\"    \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,    \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,    \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,    \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,    \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,    \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,    \n" +
                "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,    \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,    \n" +
                "         cp.termsDays termDays,    \n" +
                "         cp.freeOnBoardName,    \n" +
                "         cp.isLocked,    \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,    \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,    \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,    \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,    \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,    \n" +
                "         packingSlip.id packingSlipId,    \n" +
                "         (select group_concat(paymentNumber)    \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd    \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0    \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,    \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,    \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,    \n" +
                "  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,    \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,    \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,    \n" +
                "         m.paymentTermsID custPaymentTermsId,    \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,    \n" +
                "         gc.termsDays custTermsDays,    \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,    \n" +
                "         cp.revision    \n" +
                "	 FROM customer_packingslip cp    \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID    \n" +
                "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0    \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'    \n" +
                "		\" , v_appliedCMPDJoin ,\"    \n" +
                "	WHERE  cp.isDeleted=0    \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		IF pTransType = 'I' THEN    \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";    \n" +
                "        ELSE    \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";    \n" +
                "        END IF;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');    \n" +
                "    END IF;    \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN    \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');    \n" +
                "	# END IF;    \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN    \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");    \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN    \n" +
                "		IF pIsExactSearchPO = 1 THEN    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'    \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"    \n" +
                "						);    \n" +
                "		ELSE    \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'    \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"    \n" +
                "						);    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;    \n" +
                "  IF pFromDate IS NOT NULL THEN    \n" +
                "        IF pTransType = 'I' THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");    \n" +
                "        ELSE    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");    \n" +
                "        END IF;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN    \n" +
                "        IF pTransType = 'I' THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");    \n" +
                "        ELSE    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");    \n" +
                "        END IF;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');    \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN    \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	    -- filter zero amount invoice    \n" +
                "	    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN    \n" +
                "			SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');    \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,    \n" +
                "		 round((c.totalAmount),2) totalAmount,    \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,    \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)    \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,    \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)    \n" +
                "						else '' end) materialStatus from ( \",    \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "  \n" +
                "	-- select @SQLStatement2	;    \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(      \n" +
                "	IN pCustCreditMemoMstID INT ,      \n" +
                "	IN pCustomerPaymentMstID INT      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
                "		DECLARE v_TimeZone VARCHAR(50);      \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate ,   \n" +
                "			cps.totalAmount ,  cps.agreedRefundAmt ,      \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,      \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,      \n" +
                "			psip.paymentNumber ,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,      \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN NULL ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
                "			cps.paymentStatus AS CMPaymentStatus,   \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,      \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby      \n" +
                "	FROM customer_packingslip AS cps      \n" +
                "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID      \n" +
                "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'      \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)      \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)      \n" +
                "	WHERE cps.id = pCustCreditMemoMstID      \n" +
                "	AND cps.isDeleted = 0      \n" +
                "		;       \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetAllCreditMemoOfCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllCreditMemoOfCustomerPayment`(        \n" +
                "	IN pCustomerID INT,        \n" +
                "	IN pCreditMemoTransType VARCHAR(5)        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	SELECT tempcmdet.*    \n" +
                "	FROM (    \n" +
                "		SELECT cps.id AS creditMemoMstID,         \n" +
                "			cps.creditMemoNumber, cps.creditMemoDate,        \n" +
                "			cps.refDebitMemoNumber, cps.refDebitMemoDate,         \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,        \n" +
                "			(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment      \n" +
                "				WHERE refCustCreditMemoID = cps.id     \n" +
                "				AND refPaymentMode = 'CA'      \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo 	      \n" +
                "		FROM customer_packingslip cps        \n" +
                "		WHERE cps.transType = pCreditMemoTransType  -- 'C' - credit memo        \n" +
                "		AND cps.customerID = pCustomerID        \n" +
                "		AND cps.`status` = 2        \n" +
                "		AND cps.isDeleted = 0    \n" +
                "		) tempcmdet    \n" +
                "	WHERE (ABS(originalCreditMemoAmount) - IFNULL(pastPaidAmountFromCreditMemo,0) > 0)	         \n" +
                "	;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(      \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pRequestType VARCHAR(5),      \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,      \n" +
                "	IN pDueDate DATE ,      \n" +
                "	IN pAdditionalDays INT,      \n" +
                "	IN pTermsAndAboveDays INT  ,      \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */      \n" +
                "	DECLARE vDueDate DATE;      \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);      \n" +
                "	DECLARE vTimeZone VARCHAR(50);      \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);      \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */      \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */      \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;      \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */      \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN      \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;      \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;      \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;      \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);      \n" +
                "		ELSE      \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);      \n" +
                "		END IF;      \n" +
                "  \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"      \n" +
                "	SELECT      \n" +
                "		temp_aged_details.customerID,      \n" +
                "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName,      \n" +
                "		temp_aged_details.termsDays AS custCurrTermDays,      \n" +
                "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,      \n" +
                "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,      \n" +
                "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,      \n" +
                "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,      \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,      \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,      \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,      \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,      \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,      \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,      \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,      \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,      \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,      \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,      \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,      \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,      \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,      \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (      \n" +
                "		SELECT      \n" +
                "				  `cid`.`customerID`                  AS `customerID`,      \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,      \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,      \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,      \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)      AS `dratftCreditMemoCount`,      \n" +
                "				  -- `cid`.`DocDate`                  AS `DocDate`,      \n" +
                "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,      \n" +
                "				  `cpt`.`termsDays`                   AS `termsDays`,      \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) AS `DueDaysDiff`,      \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,      \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,      \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,      \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,      \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,      \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,      \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,      \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),      \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,      \n" +
                "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,      \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,      \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,      \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,      \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,      \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,      \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,      \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount      \n" +
                "                  FROM      \n" +
                "(      \n" +
                "	SELECT      \n" +
                "					 `a`.`customerID`                     AS `customerID`,      \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,      \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,      \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,      \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,      \n" +
                "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,      \n" +
                "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,      \n" +
                "					0                                    AS `totalUnappliedAmount`,      \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,      \n" +
                "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,      \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,      \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`      \n" +
                "                       FROM `customer_packingslip` `a`      \n" +
                "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,      \n" +
                "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,      \n" +
                "										      0									  	AS `totalCreditMemoAppliedAmount`,      \n" +
                "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`      \n" +
                "										    FROM (`packingslip_invoice_payment` `a`      \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`      \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))      \n" +
                "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)      \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)      \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))      \n" +
                "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b      \n" +
                "										ON a.id = b.refCustPackingslipInvoiceID      \n" +
                "  \n" +
                "						LEFT JOIN 	(      \n" +
                "									SELECT      \n" +
                "											a.`refCustCreditMemoID` AS refCustCreditMemoID,      \n" +
                "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`      \n" +
                "									FROM `packingslip_invoice_payment` `a`      \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`      \n" +
                "											 ON (`b`.`refPayementid` = `a`.`id`)      \n" +
                "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)      \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)      \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA'))      \n" +
                "										    GROUP BY `a`.`refCustCreditMemoID`      \n" +
                "										    ) c  ON a.id = c.refCustCreditMemoID    \n" +
                "						LEFT JOIN (  \n" +
                "									SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundCustCreditMemoID  \n" +
                "									) d  ON a.id = d.refRefundCustCreditMemoID				        \n" +
                "					WHERE ((`a`.`transType` IN('I','C'))      \n" +
                "                -- AND a.paymentStatus <> 'RE'      \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)      \n" +
                "					      AND (`a`.`isDeleted` = 0))      \n" +
                "	UNION      \n" +
                "      SELECT      \n" +
                "			`a`.`mfgcodeID`                       					AS `customerID`,      \n" +
                "			NULL									AS `refCustPackingslipInvoiceID`,      \n" +
                "			0                                     					AS `invoiceCount`,      \n" +
                "			0                                     					AS `unInvoiceCount`,      \n" +
                "			0                                     					AS `dratftCreditMemoCount`,      \n" +
                "			`a`.`paymentDate`                     					AS `DocDate`,      \n" +
                "			0  									AS `totalRecievedAmount`,   \n" +
                "			((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "			0                                     					AS `totalUnappliedCreditMemoAmount`,      \n" +
                "			0									AS `totalCreditMemoAppliedAmount`,      \n" +
                "			0                                     					AS `totalInvoicedAmount`,      \n" +
                "			0                                     					AS `totalDraftAmount`      \n" +
                "			FROM (`packingslip_invoice_payment` `a`      \n" +
                "				LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))      \n" +
                "				LEFT JOIN (  \n" +
                "						SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID  \n" +
                "					     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "			WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)      \n" +
                "			AND (`a`.`isPaymentVoided` = 0)      \n" +
                "			AND (`a`.`refPaymentMode` = 'R'))      \n" +
                "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount`      \n" +
                "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0      \n" +
                "                ) AS  cid      \n" +
                "                INNER JOIN `vu_customer_payment_terms` `cpt`      \n" +
                "			     ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)      \n" +
                "                     GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cpt`.`termsDays`, (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY)))      \n" +
                "                ) AS temp_aged_details      \n" +
                "		GROUP BY temp_aged_details.customerID, fun_getMfgCodeAndNameByID(temp_aged_details.customerID), temp_aged_details.termsDays      \n" +
                "		HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)     \n" +
                "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0      \n" +
                "	\");      \n" +
                "  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"      \n" +
                "			SELECT 	c.*      \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c      \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);      \n" +
                "	-- SELECT @SQLStatement2;      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(                        \n" +
                "	IN pCustPaymentDetList JSON,     \n" +
                "	IN pCustCMDetList JSON,     \n" +
                "	IN pMfgcodeID INT,                        \n" +
                "	IN pPaymentNumber VARCHAR(50),                        \n" +
                "	IN pPaymentDate DATE,                        \n" +
                "	IN pPaymentAmount DECIMAL(18,8),                        \n" +
                "	IN pPaymentType INT,                        \n" +
                "	IN pAccountReference VARCHAR(50),                        \n" +
                "	IN pBankAccountMasID INT,                        \n" +
                "	IN pBankAccountNo VARCHAR(50),                        \n" +
                "	IN pBankName VARCHAR(255),                        \n" +
                "	IN pRemark VARCHAR(1000),                        \n" +
                "	IN pRefPaymentMode VARCHAR(10),                        \n" +
                "	IN pTotSelectedPayOfCust INT,       \n" +
                "	IN pTotSelectedCMOfCust INT,       \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,                     \n" +
                "	IN pSystemID VARCHAR(20),                    \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,     \n" +
                "	IN pUserID INT,                        \n" +
                "	IN pUserRoleID INT,    \n" +
                "	IN pRefGencTransModeID INT,    \n" +
                "	IN pOffsetAmount DECIMAL(18,8)    \n" +
                "    )  \n" +
                "BEGIN                        \n" +
                "	DECLARE insertedRefundMstID INT;                    \n" +
                "	DECLARE vCountExistsCheckNo INT;               \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;             \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'CR'  AND pisConfmTakenForDuplicateCheckNo = 0) THEN                    \n" +
                "		/* check duplicate check number if confirmation not taken >> CR - Customer Refund */                      \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                              \n" +
                "		FROM packingslip_invoice_payment                              \n" +
                "		WHERE refPaymentMode = pRefPaymentMode             \n" +
                "		AND paymentNumber = pPaymentNumber                              \n" +
                "		AND mfgcodeID = pMfgcodeID                    \n" +
                "		AND isPaymentVoided = 0                    \n" +
                "		AND isdeleted = 0    ;     \n" +
                "	END IF;                 \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedPayOfCust > 0                     \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN                        \n" +
                "  \n" +
                "		/* get/map all Customer payment Detail List send from UI */                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS                                                                    \n" +
                "		SELECT 	*                                                                     \n" +
                "		FROM 	JSON_TABLE(                             \n" +
                "			pCustPaymentDetList,                                                                    \n" +
                "				\"$[*]\" COLUMNS(                            \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",                                                             \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,     \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
                "				)                          \n" +
                "			) AS CustPaymentDetList_JT ;                         \n" +
                "  \n" +
                "		/* get all customer payment > against total payment list > available in data base */	                       \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS     \n" +
                "			SELECT psip.id AS paymentMstID,   \n" +
                "				psip.paymentAmount,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,                        \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundPaymentID = psip.id                     \n" +
                "					AND isPaymentVoided = 0                        \n" +
                "					AND isDeleted = 0) AS totalRefundIssuedAmount                        \n" +
                "			FROM packingslip_invoice_payment psip                        \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)                         \n" +
                "			AND psip.isDeleted = 0 ;    \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)                         \n" +
                "			> if selected payment not found from db                        \n" +
                "			> original Agreed Refund Amount Of Payment  mismatch                        \n" +
                "			> Total Refund Issued Amount mismatch                        \n" +
                "			*/	                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                         \n" +
                "			SELECT tucipl.*                        \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl                        \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID                        \n" +
                "			WHERE (                        \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))                          \n" +
                "				OR                        \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))	                        \n" +
                "				OR                        \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))                        \n" +
                "				)                        \n" +
                "			;        \n" +
                "  \n" +
                "	ELSEIF (vCountExistsCheckNo = 0 AND pTotSelectedCMOfCust > 0                     \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN     \n" +
                "             /* get/map all Customer CM Detail List send from UI */      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS                                                                    \n" +
                "		SELECT 	*                                                                     \n" +
                "		FROM 	JSON_TABLE(                             \n" +
                "			pCustCMDetList,                                                                    \n" +
                "				\"$[*]\" COLUMNS(                            \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",       \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",       \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,     \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
                "				)                          \n" +
                "			) AS CustCMDetList_JT ;                         \n" +
                "	 -- select * from temp_UI_CustCMDetList;    \n" +
                "  \n" +
                "	/* get all customer Refund > against total CM list > available in data base */	                       \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS     \n" +
                "			SELECT cps.id AS custCreditMemoMstID,     \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,     \n" +
                "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
                "				WHERE refCustCreditMemoID = cps.id       \n" +
                "				AND refPaymentMode = 'CA'        \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,    \n" +
                "			 cps.agreedRefundAmt AS agreedRefundAmount ,      \n" +
                "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "					FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id                      \n" +
                "					AND isPaymentVoided = 0                        \n" +
                "					AND isDeleted = 0    \n" +
                "                    ) totalRefundIssuedAmount     \n" +
                "		FROM customer_packingslip AS cps      \n" +
                "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)    \n" +
                "		AND cps.isDeleted = 0 ;    \n" +
                "         -- select * from temp_DB_Available_CustCMDetList;   \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)                         \n" +
                "			> if selected CM not found from db                        \n" +
                "			> original Agreed Refund Amount Of Refund mismatch                        \n" +
                "			> Total Refund Issued Amount mismatch                        \n" +
                "			*/	                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                         \n" +
                "			SELECT tucml.*                        \n" +
                "			FROM temp_UI_CustCMDetList tucml                        \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID                        \n" +
                "			WHERE (                        \n" +
                "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))                          \n" +
                "				OR                        \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))	                        \n" +
                "				OR                        \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))                        \n" +
                "				)                        \n" +
                "			;       \n" +
                "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;    \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	/* set up default temp table if not created */             \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                          \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;     \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                          \n" +
                "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;        \n" +
                "  \n" +
                "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))    \n" +
                "					AND (vCountExistsCheckNo = 0)) THEN     \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,                        \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,                        \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,                   \n" +
                "			`depositBatchNumber` ,      \n" +
                "			 `offsetAmount`,`refGencTransModeID`,           \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,              \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)                        \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,                        \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,                        \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,                        \n" +
                "			pDepositBatchNumber,       \n" +
                "			pOffsetAmount , pRefGencTransModeID ,    \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,               \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;          \n" +
                "  \n" +
                "		SET insertedRefundMstID = LAST_INSERT_ID();      \n" +
                "  \n" +
                "		IF(pTotSelectedPayOfCust > 0) THEN        \n" +
                "			/* add selected refund payment details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,             \n" +
                "					`comment` ,    \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,              \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)                        \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,            \n" +
                "				COMMENT ,          \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,               \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
                "			FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;                                                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS   \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details */    \n" +
                "			UPDATE packingslip_invoice_payment psip	  \n" +
                "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
                "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				updatedBy = pUserID,    \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0    \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(pTotSelectedCMOfCust > 0) THEN        \n" +
                "			/* add selected refund credit memo details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,             \n" +
                "					`comment` ,    \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,              \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)                        \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,            \n" +
                "				COMMENT ,          \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,               \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
                "			FROM temp_UI_CustCMDetList ;   \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;                                                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;                                                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;	  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "			UPDATE customer_packingslip cps    \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
                "					FROM packingslip_invoice_payment_det    \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
                "					FROM packingslip_invoice_payment    \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN    \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END    \n" +
                "						) ,   \n" +
                "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "						END) ,		   \n" +
                "				cps.updatedBy = pUserID,    \n" +
                "				cps.updateByRoleId = pUserRoleID ,    \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;   \n" +
                "  \n" +
                "		END IF;                        \n" +
                "	END IF;     \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */                          \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR (vCountExistsCheckNo > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN                                \n" +
                "		SELECT 0 AS 'spStatus' ;                          \n" +
                "	ELSE                          \n" +
                "		SELECT 1 AS 'spStatus' ;                          \n" +
                "	END IF;         \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted payment/CM */                          \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;                         \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;    \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted refund master id for Refund Transaction  */                         \n" +
                "	SELECT insertedRefundMstID AS insertedRefundMstID;                     \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */                      \n" +
                "	IF (vCountExistsCheckNo > 0) THEN                    \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                          \n" +
                "	ELSE                          \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                          \n" +
                "	END IF;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                           \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                           \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;    \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(                        \n" +
                "	IN pCustPaymentDetList JSON,      \n" +
                "	IN pCustCMDetList JSON,      \n" +
                "	IN pCustRefundMstID INT,                        \n" +
                "	IN pMfgcodeID INT,                        \n" +
                "	IN pPaymentNumber VARCHAR(50),                         \n" +
                "	IN pPaymentDate DATE,                        \n" +
                "	IN pPaymentAmount DECIMAL(18,8),                        \n" +
                "	IN pPaymentType INT,                        \n" +
                "	IN pAccountReference VARCHAR(50),                        \n" +
                "	IN pBankAccountMasID INT,                        \n" +
                "	IN pBankAccountNo VARCHAR(50),                        \n" +
                "	IN pBankName VARCHAR(255),                        \n" +
                "	IN pRemark VARCHAR(1000),                        \n" +
                "	IN pRefPaymentMode VARCHAR(10),                        \n" +
                "	IN pTotSelectedPayOfCust INT,     \n" +
                "	IN pTotSelectedCMOfCust INT,     \n" +
                "	IN pDeleteCustPaymentDetList JSON,       \n" +
                "	IN pDeleteCustCMDetList JSON,    \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,                      \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,              \n" +
                "	IN pUserID INT,                        \n" +
                "	IN pUserRoleID INT,    \n" +
                "	IN pOffsetAmount DECIMAL(18,8)	    \n" +
                "    )  \n" +
                "BEGIN                        \n" +
                "	DECLARE vCountExistsCheckNo INT;              \n" +
                "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;                     \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;                      \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN                      \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */                        \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                                \n" +
                "		FROM packingslip_invoice_payment                                \n" +
                "		WHERE refPaymentMode = pRefPaymentMode                       \n" +
                "		AND paymentNumber = pPaymentNumber                                \n" +
                "		AND mfgcodeID = pMfgcodeID                       \n" +
                "		AND id != pCustRefundMstID                      \n" +
                "		AND isPaymentVoided = 0                      \n" +
                "		AND isdeleted = 0    ;       \n" +
                "		-- select vCountExistsCheckNo ;    \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedPayOfCust > 0                       \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN                        \n" +
                "		/* get/map all Customer Payment Detail List send from UI */                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS                                                                    \n" +
                "		SELECT 	*                                                                     \n" +
                "		FROM 	JSON_TABLE(                             \n" +
                "			pCustPaymentDetList,                                                                    \n" +
                "				\"$[*]\" COLUMNS(    \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",    \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",                                                             \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,     \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
                "				)                          \n" +
                "			) AS CustPaymentDetList_JT ;       \n" +
                "		-- select * from temp_UI_CustPaymentDetList;    \n" +
                "  \n" +
                "		/* get all customer refund > against total payment list > available in data base */	                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS 	                        \n" +
                "			SELECT psip.id AS paymentMstID,     \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "				psipd.id AS paymentDetMstID,                     \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundPaymentID = psip.id   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount     \n" +
                "			FROM packingslip_invoice_payment psip     \n" +
                "				LEFT JOIN packingslip_invoice_payment_det psipd     \n" +
                "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0        \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0   \n" +
                "			AND psip.isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "            -- select * from temp_DB_Available_CustPaymentDetList;    \n" +
                "  \n" +
                "            /* get all mis match amount records (compare UI data and db available data)                         \n" +
                "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL                        \n" +
                "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL                        \n" +
                "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL                        \n" +
                "			*/	                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                         \n" +
                "			SELECT tucipl.*                        \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl                        \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID                        \n" +
                "			WHERE (                        \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))                          \n" +
                "				OR                        \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))	                        \n" +
                "				OR                        \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))                        \n" +
                "				)                        \n" +
                "			;                          \n" +
                "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;    \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Payment Detail List send from UI */                          \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;                                                          \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS                                                                    \n" +
                "				SELECT 	*                                                                     \n" +
                "				FROM 	JSON_TABLE(                             \n" +
                "					pDeleteCustPaymentDetList,                                                                    \n" +
                "						\"$[*]\" COLUMNS(                            \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",                        \n" +
                "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"                                                           \n" +
                "						)                          \n" +
                "				) AS DeleteCustPaymentDetList_JT ;       \n" +
                "  \n" +
                "				 /* get all deleted invoice payment det (passed from UI but not in db)                         \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;                                                          \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS                         \n" +
                "					SELECT id FROM packingslip_invoice_payment_det     \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)    \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);    \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;     \n" +
                "  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)                        \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN                        \n" +
                "  \n" +
                "			/* start - create/update/delete payment refund process */    \n" +
                "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN              \n" +
                "				/* delete those which are unselected(from UI) payment det */                        \n" +
                "				UPDATE packingslip_invoice_payment_det                         \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,                         \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()                         \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)                       \n" +
                "				AND isPaymentVoided = 0                        \n" +
                "				AND isDeleted = 0 ;   \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;                                                          \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS   \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "				/* update refund payment status details which are deleted (unselected from UI) */    \n" +
                "				UPDATE packingslip_invoice_payment psip	  \n" +
                "					JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "				SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					updatedBy = pUserID,    \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
                "				AND psip.isPaymentVoided = 0    \n" +
                "				AND psip.isDeleted = 0 ;   \n" +
                "  			END IF;   \n" +
                "  \n" +
                "  \n" +
                "			/* update all payment det amount whose amount is changed from UI */                        \n" +
                "			UPDATE packingslip_invoice_payment_det pipd                        \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT                      \n" +
                "					FROM temp_UI_CustPaymentDetList                        \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl                        \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID             \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),               \n" +
                "				pipd.comment = tucipdl.comment ,              \n" +
                "				pipd.updatedBy = pUserID,                           \n" +
                "				pipd.updateByRoleId = pUserRoleID ,                          \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID        \n" +
                "			AND pipd.isPaymentVoided = 0                       \n" +
                "			AND pipd.isDeleted = 0                         \n" +
                "			;                       \n" +
                "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;    \n" +
                "  \n" +
                "			/* insert newly selected payment det */                        \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,              \n" +
                "				`comment` ,    \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)                        \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,               \n" +
                "				COMMENT ,       \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID                        \n" +
                "			FROM temp_UI_CustPaymentDetList                         \n" +
                "			WHERE paymentDetMstID IS NULL                        \n" +
                "			;   \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;                                                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS   \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;	  \n" +
                "  \n" +
                "			/* update refund payment status details which are newly created/updated */    \n" +
                "			UPDATE packingslip_invoice_payment psip	  \n" +
                "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
                "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN	  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)   \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				updatedBy = pUserID,    \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0    \n" +
                "			AND psip.isDeleted = 0 ;   \n" +
                "  \n" +
                "  \n" +
                "		END IF;	    \n" +
                "  \n" +
                "	/* customer credit memo refund cases */        \n" +
                "	ELSEIF (vCountExistsCheckNo = 0 AND pTotSelectedCMOfCust > 0                     \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN     \n" +
                "  \n" +
                "	        /* get/map all Customer CM Detail List send from UI */      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS                                                                    \n" +
                "		SELECT 	*                                                                     \n" +
                "		FROM 	JSON_TABLE(                             \n" +
                "			pCustCMDetList,                                                                    \n" +
                "				\"$[*]\" COLUMNS(              \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",    \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",       \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",       \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",                                                                    \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,                        \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,     \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"     \n" +
                "				)                          \n" +
                "			) AS CustCMDetList_JT ;                         \n" +
                "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;    \n" +
                "  \n" +
                "		/* get all customer Refund > against total CM list > available in data base */	                       \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;                                                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS     \n" +
                "				SELECT cps.id AS custCreditMemoMstID,    \n" +
                "				 cps.agreedRefundAmt AS agreedRefundAmount ,      \n" +
                "		    (SELECT IFNULL(SUM(paymentAmount),0)    \n" +
                "						FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id                      \n" +
                "						AND isPaymentVoided = 0                        \n" +
                "						AND isDeleted = 0    \n" +
                "			    ) totalRefundIssuedAmount     \n" +
                "			FROM customer_packingslip AS cps     \n" +
                "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)    \n" +
                "			AND cps.isDeleted = 0 ;    \n" +
                "  \n" +
                "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;    \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)                         \n" +
                "			> if selected CM not found from db                        \n" +
                "			> original Agreed Refund Amount Of Refund mismatch                        \n" +
                "			> Total Refund Issued Amount mismatch                        \n" +
                "			*/	                          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;                                                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                         \n" +
                "			SELECT tucml.*                        \n" +
                "			FROM temp_UI_CustCMDetList tucml                        \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID                        \n" +
                "			WHERE (                     \n" +
                "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))                          \n" +
                "				OR     \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))	                        \n" +
                "				OR                        \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))                        \n" +
                "				)                        \n" +
                "			;       \n" +
                "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;     \n" +
                "  \n" +
                "			/* get/map all deleting customer CM Detail List send from UI */                          \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;                                                          \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS                                                                    \n" +
                "				SELECT 	*                                                                     \n" +
                "				FROM 	JSON_TABLE(                             \n" +
                "					pDeleteCustCMDetList,                                                                    \n" +
                "						\"$[*]\" COLUMNS(                            \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",                        \n" +
                "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"                                                           \n" +
                "						)                          \n" +
                "				) AS DeleteCustCMtDetList_JT ;       \n" +
                "				-- select * from temp_UI_Delete_CustCMDetList;    \n" +
                "  \n" +
                "			/* get all deleted invoice payment det (passed from UI but not in db)                         \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;                                                          \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS                         \n" +
                "					SELECT id FROM packingslip_invoice_payment_det     \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)    \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);    \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;      \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)                        \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN                        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN                         \n" +
                "				/* delete those which are unselected(from UI) CM det */                        \n" +
                "				UPDATE packingslip_invoice_payment_det                         \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,                         \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()                         \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)                       \n" +
                "				AND isPaymentVoided = 0                        \n" +
                "				AND isDeleted = 0 ;                      \n" +
                "				-- select 'deleted refund for CM list' ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;                                                          \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS                                                                    \n" +
                "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "				UPDATE customer_packingslip cps    \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
                "						FROM packingslip_invoice_payment_det    \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)   \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID	   \n" +
                "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "									END) 	  \n" +
                "							ELSE 'NA' END),			  \n" +
                "					cps.updatedBy = pUserID,    \n" +
                "					cps.updateByRoleId = pUserRoleID ,    \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
                "				AND cps.isDeleted = 0	;   \n" +
                "  \n" +
                "			END IF;                        \n" +
                "  \n" +
                "  \n" +
                "			/* update all CM det amount whose amount is changed from UI */                        \n" +
                "			UPDATE packingslip_invoice_payment_det pipd                        \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT                       \n" +
                "					FROM temp_UI_CustCMDetList                        \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl                        \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID                     \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),               \n" +
                "				pipd.comment = tucipdl.comment ,              \n" +
                "				pipd.updatedBy = pUserID,                           \n" +
                "				pipd.updateByRoleId = pUserRoleID ,                          \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID     \n" +
                "			AND pipd.isPaymentVoided = 0                       \n" +
                "			AND pipd.isDeleted = 0                         \n" +
                "			;                        \n" +
                "  \n" +
                "			/* insert newly selected CM det */                        \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,              \n" +
                "				`comment` ,    \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)                        \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,               \n" +
                "				COMMENT ,       \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID                        \n" +
                "			FROM temp_UI_CustCMDetList                         \n" +
                "			WHERE paymentDetMstID IS NULL                        \n" +
                "			;   \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;                                                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;                                                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;	  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and refund status   */  \n" +
                "			UPDATE customer_packingslip cps    \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
                "					FROM packingslip_invoice_payment_det    \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
                "					FROM packingslip_invoice_payment    \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN   \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END    \n" +
                "						) ,    \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "								END)  \n" +
                "						      ELSE 'NA' END),		  \n" +
                "				cps.updatedBy = pUserID,    \n" +
                "				cps.updateByRoleId = pUserRoleID ,    \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;   \n" +
                "  \n" +
                "  \n" +
                "		END IF;	                 \n" +
                "  \n" +
                "	END IF;                        \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0) THEN    \n" +
                "  \n" +
                "		/* update payment master details */        \n" +
                "		UPDATE packingslip_invoice_payment                        \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,                        \n" +
                "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,    \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,                        \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,                        \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,       \n" +
                "			updatedBy = pUserID, offsetAmount = pOffsetAmount,                         \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()                         \n" +
                "		WHERE id = pCustRefundMstID                      \n" +
                "		AND isPaymentVoided = 0	                      \n" +
                "		AND isDeleted = 0 ;              \n" +
                "  \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */                          \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS                          \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;    \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS                          \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS                          \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS                          \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;        \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */                          \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)                         \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)      \n" +
                "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)                         \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)    \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN                          \n" +
                "		SELECT 0 AS 'spStatus' ;                          \n" +
                "	ELSE                          \n" +
                "		SELECT 1 AS 'spStatus' ;                          \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted payment/CM det (passed from UI but not in db) */                          \n" +
                "	 SELECT * FROM temp_Deleted_CustPayDetList ;    \n" +
                "	SELECT * FROM temp_Deleted_CustCMDetList ;    \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted  */                          \n" +
                "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;                       \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;                       \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */                        \n" +
                "	IF (vCountExistsCheckNo > 0) THEN                      \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                            \n" +
                "	ELSE                            \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                            \n" +
                "	END IF;           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;                           \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;                         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;                                          \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(    \n" +
                "	IN pCustInvoicePaymentDetList JSON,    \n" +
                "	IN pMfgcodeID INT,    \n" +
                "	IN pPaymentNumber VARCHAR(50),    \n" +
                "	IN pPaymentDate DATE,    \n" +
                "	IN pPaymentAmount DECIMAL(18,8),    \n" +
                "	IN pPaymentType INT,    \n" +
                "	IN pAccountReference VARCHAR(50),    \n" +
                "	IN pBankAccountMasID INT,    \n" +
                "	IN pBankAccountNo VARCHAR(50),    \n" +
                "	IN pBankName VARCHAR(255),    \n" +
                "	IN pRemark VARCHAR(1000),    \n" +
                "	IN pRefPaymentMode VARCHAR(10),    \n" +
                "	IN pTotSelectedInvOfCust INT,    \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,    \n" +
                "	IN pSystemID VARCHAR(20),    \n" +
                "	IN pisZeroPayment INT,    \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,    \n" +
                "	IN pRefCustCreditMemoID INT,    \n" +
                "	IN pisMarkForRefund TINYINT,    \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),    \n" +
                "	IN pRefundStatus VARCHAR(5),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,    \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),    \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),    \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),    \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,    \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,    \n" +
                "	IN pRefGencTransModeID INT,    \n" +
                "	IN pWriteOffReason VARCHAR(1000),    \n" +
                "	IN pUserID INT,    \n" +
                "	IN pUserRoleID INT    \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;    \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;    \n" +
                "	DECLARE vCountExistsCheckNo INT;    \n" +
                "	DECLARE vCountSameCMApplied INT;    \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);    \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;    \n" +
                "	SET vCountSameCMApplied = 0;    \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN    \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */    \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo    \n" +
                "		FROM packingslip_invoice_payment    \n" +
                "		WHERE refPaymentMode = pRefPaymentMode    \n" +
                "		AND paymentNumber = pPaymentNumber    \n" +
                "		AND mfgcodeID = pMfgcodeID    \n" +
                "		AND isPaymentVoided = 0    \n" +
                "		AND isdeleted = 0    ;    \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN    \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */    \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied    \n" +
                "		FROM packingslip_invoice_payment    \n" +
                "		WHERE refPaymentMode = pRefPaymentMode    \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID    \n" +
                "		AND isPaymentVoided = 0    \n" +
                "		AND isdeleted = 0    ;    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0    \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN    \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS    \n" +
                "		SELECT 	*    \n" +
                "		FROM 	JSON_TABLE(    \n" +
                "			pCustInvoicePaymentDetList,    \n" +
                "				\"$[*]\" COLUMNS(    \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",    \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,    \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,    \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,    \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"    \n" +
                "				)    \n" +
                "			) AS CustInvoicePaymentDetList_JT ;    \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS    \n" +
                "			SELECT cps.id AS invoiceMstID,    \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,    \n" +
                "				cps.status,    \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det    \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id    \n" +
                "					AND isPaymentVoided = 0    \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet    \n" +
                "			FROM customer_packingslip cps    \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)    \n" +
                "			AND cps.isDeleted = 0    \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */    \n" +
                "		;    \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)    \n" +
                "			> if selected invoice not found from db    \n" +
                "			> original Payment Amount Of Invoice  mismatch    \n" +
                "			> invoice Total Paid Amount mismatch    \n" +
                "			*/    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
                "			SELECT tucipl.*    \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl    \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID    \n" +
                "			WHERE (    \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))    \n" +
                "				OR    \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))    \n" +
                "				OR    \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))    \n" +
                "				)    \n" +
                "			;    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* set up default temp table if not created */    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;    \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN    \n" +
                "		-- select 'create';    \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN    \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */    \n" +
                "			SET vLockStatusToBe = 'NA' ;    \n" +
                "			IF (pTotSelectedInvOfCust > 0) THEN    \n" +
                "				IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)    \n" +
                "								FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN    \n" +
                "					SET vLockStatusToBe = 'RL' ;    \n" +
                "				END IF;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,    \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,    \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,    \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,    \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  `refundStatus` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,    \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)    \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,    \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,    \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,    \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,    \n" +
                "				pisMarkForRefund, pAgreedRefundAmt, pRefundStatus,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;    \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */    \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN    \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN    \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
                "						`appliedDate` ,    \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,    \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)    \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,    \n" +
                "					appliedDate ,    \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;    \n" +
                "  \n" +
                "			END IF;    \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  		  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */   \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det   \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip    \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN    \n" +
                "									(CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							 WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'	  \n" +
                "							 ELSE 'PE' END    \n" +
                "							) ,    \n" +
                "					updatedBy = pUserID,    \n" +
                "					updateByRoleId = pUserRoleID ,    \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE id = pRefCustCreditMemoID    \n" +
                "				AND isDeleted = 0    \n" +
                "				;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0    \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */    \n" +
                "		IF (pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0    \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN    \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,    \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,    \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,    \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,    \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,    \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,    \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)    \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,    \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,    \n" +
                "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,    \n" +
                "				'NA',0, NULL,  NULL,    \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;    \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();    \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS    \n" +
                "			SELECT 	*    \n" +
                "			FROM 	JSON_TABLE(    \n" +
                "				pWriteOffCustInvoicePaymentDetList,    \n" +
                "					\"$[*]\" COLUMNS(    \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"    \n" +
                "					)    \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;    \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */    \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,    \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)    \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN    \n" +
                "			/* update invoice payment status */    \n" +
                "			UPDATE customer_packingslip cps    \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID    \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,    \n" +
                "				cps.updatedBy = pUserID,    \n" +
                "				cps.updateByRoleId = pUserRoleID ,    \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID    \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null    \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''    \n" +
                "			AND cps.isDeleted = 0	;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */    \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)    \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN    \n" +
                "		SELECT 0 AS 'spStatus' ;    \n" +
                "	ELSE    \n" +
                "		SELECT 1 AS 'spStatus' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */    \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;    \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */    \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN    \n" +
                "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;    \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN    \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */    \n" +
                "	IF (vCountExistsCheckNo > 0) THEN    \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;    \n" +
                "	ELSE    \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */    \n" +
                "	IF (vCountSameCMApplied > 0) THEN    \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;    \n" +
                "	ELSE    \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE   \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(    \n" +
                "	IN pCustInvoicePaymentDetList JSON,    \n" +
                "	IN pCustomerPaymentMstID INT,    \n" +
                "	IN pMfgcodeID INT,    \n" +
                "	IN pPaymentNumber VARCHAR(50),    \n" +
                "	IN pPaymentDate DATE,    \n" +
                "	IN pPaymentAmount DECIMAL(18,8),    \n" +
                "	IN pPaymentType INT,    \n" +
                "	IN pAccountReference VARCHAR(50),    \n" +
                "	IN pBankAccountMasID INT,    \n" +
                "	IN pBankAccountNo VARCHAR(50),    \n" +
                "	IN pBankName VARCHAR(255),    \n" +
                "	IN pRemark VARCHAR(1000),    \n" +
                "	IN pRefPaymentMode VARCHAR(10),    \n" +
                "	IN pTotSelectedInvOfCust INT,    \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,    \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,    \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,    \n" +
                "	IN pRefCustCreditMemoID INT,    \n" +
                "	IN pisMarkForRefund TINYINT,    \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),    \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,    \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),    \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),    \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),    \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,    \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,    \n" +
                "	IN pRefGencTransModeID INT,    \n" +
                "	IN pWriteOffReason VARCHAR(1000),    \n" +
                "	IN pUserID INT,    \n" +
                "	IN pUserRoleID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE vCountExistsCheckNo INT;    \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;    \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;    \n" +
                "	DECLARE vTotRefundIssuedOfPayment DECIMAL(18,8);   \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;    \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN    \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */    \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo    \n" +
                "		FROM packingslip_invoice_payment    \n" +
                "		WHERE refPaymentMode = pRefPaymentMode    \n" +
                "		AND paymentNumber = pPaymentNumber    \n" +
                "		AND mfgcodeID = pMfgcodeID    \n" +
                "		AND id != pCustomerPaymentMstID    \n" +
                "		AND isPaymentVoided = 0    \n" +
                "		AND isdeleted = 0    ;    \n" +
                "	END IF;   \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		/* get total refunded amount till now  */  \n" +
                "		SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfPayment  \n" +
                "		FROM packingslip_invoice_payment_det  \n" +
                "		WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "		/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "		IF (IFNULL(pAgreedRefundAmt,0) < vTotRefundIssuedOfPayment) THEN  \n" +
                "			SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0    \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN    \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS    \n" +
                "		SELECT 	*    \n" +
                "		FROM 	JSON_TABLE(    \n" +
                "			pCustInvoicePaymentDetList,    \n" +
                "				\"$[*]\" COLUMNS(    \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",    \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",    \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,    \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,    \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,    \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"    \n" +
                "				)    \n" +
                "			) AS CustInvoicePaymentDetList_JT ;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS    \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,    \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,    \n" +
                "				pipd.id invPaymentDetMstID,    \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det    \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id    \n" +
                "					AND isPaymentVoided = 0    \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet    \n" +
                "			FROM customer_packingslip cps    \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID    \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID    \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0    \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)    \n" +
                "			AND cps.isDeleted = 0    \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */    \n" +
                "		;    \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)    \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS    \n" +
                "			SELECT tucipl.*    \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl    \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID    \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL    \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)    \n" +
                "			;    \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)    \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL    \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL    \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL    \n" +
                "			*/    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
                "			SELECT tucipl.* ,    \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,    \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable    \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl    \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID    \n" +
                "			WHERE (    \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))    \n" +
                "				OR    \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))    \n" +
                "				OR    \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))    \n" +
                "				)    \n" +
                "			;    \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)    \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN    \n" +
                "			-- SELECT 'update';    \n" +
                "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN    \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS    \n" +
                "				SELECT 	*    \n" +
                "				FROM 	JSON_TABLE(    \n" +
                "					pDeleteCustInvPaymentDetList,    \n" +
                "						\"$[*]\" COLUMNS(    \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",    \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"    \n" +
                "						)    \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS    \n" +
                "					SELECT refCustPackingslipInvoiceID    \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;    \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */    \n" +
                "				UPDATE packingslip_invoice_payment_det    \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,    \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
                "				AND isPaymentVoided = 0    \n" +
                "				AND isDeleted = 0 ;    \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */    \n" +
                "				UPDATE customer_packingslip cps    \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet    \n" +
                "						 FROM packingslip_invoice_payment_det    \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet    \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID    \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'    \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'    \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'    \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END    \n" +
                "							) ,    \n" +
                "					cps.updatedBy = pUserID,    \n" +
                "					cps.updateByRoleId = pUserRoleID ,    \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)    \n" +
                "				AND cps.isDeleted = 0	;    \n" +
                "  \n" +
                "			END IF;    \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */    \n" +
                "			UPDATE packingslip_invoice_payment_det pipd    \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate    \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList    \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl    \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID    \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),    \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,    \n" +
                "				pipd.updatedBy = pUserID,    \n" +
                "				pipd.updateByRoleId = pUserRoleID ,    \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)    \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)    \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID    \n" +
                "			AND pipd.isPaymentVoided = 0    \n" +
                "			AND pipd.isDeleted = 0    \n" +
                "			;    \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */    \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
                "				`appliedDate` ,    \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)    \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,    \n" +
                "				appliedDate ,    \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID    \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList    \n" +
                "			WHERE invPaymentDetMstID IS NULL    \n" +
                "			;    \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */    \n" +
                "			UPDATE customer_packingslip cps    \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID    \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,    \n" +
                "				cps.updatedBy = pUserID,    \n" +
                "				cps.updateByRoleId = pUserRoleID ,    \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID    \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL    \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''    \n" +
                "			AND cps.isDeleted = 0	;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "	ELSE    \n" +
                "  \n" +
                "		IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN    \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS    \n" +
                "			SELECT 	*    \n" +
                "			FROM 	JSON_TABLE(    \n" +
                "				pDeleteCustInvPaymentDetList,    \n" +
                "					\"$[*]\" COLUMNS(    \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",    \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"    \n" +
                "					)    \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;    \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS    \n" +
                "				SELECT refCustPackingslipInvoiceID    \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;    \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */    \n" +
                "			UPDATE packingslip_invoice_payment_det    \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,    \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
                "			AND isPaymentVoided = 0    \n" +
                "			AND isDeleted = 0 ;    \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */    \n" +
                "			UPDATE customer_packingslip cps    \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet    \n" +
                "					 FROM packingslip_invoice_payment_det    \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)    \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet    \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID    \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'    \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'    \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'    \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END    \n" +
                "						) ,    \n" +
                "				cps.updatedBy = pUserID,    \n" +
                "				cps.updateByRoleId = pUserRoleID ,    \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)    \n" +
                "			AND cps.isDeleted = 0	;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created temp table from above */    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS    \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS    \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;    \n" +
                "  \n" +
                "  \n" +
                "	/* common update for all */    \n" +
                "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)    \n" +
                "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)    \n" +
                "		AND (vCountExistsCheckNo = 0) AND (vIsAgreedRefundLessThanTotIssued = 0)) THEN    \n" +
                "  \n" +
                "		/* update invoice payment master details */    \n" +
                "		UPDATE packingslip_invoice_payment    \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,    \n" +
                "			paymentType = pPaymentType,    \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,    \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,    \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,    \n" +
                "			isMarkForRefund = pisMarkForRefund ,    \n" +
                "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
                "			refundStatus = (CASE WHEN pRefPaymentMode = 'R' THEN  \n" +
                "						(CASE WHEN pisMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN vTotRefundIssuedOfPayment = 0 THEN 'PE'  \n" +
                "								WHEN vTotRefundIssuedOfPayment < pPaymentAmount THEN 'PR'  \n" +
                "								WHEN vTotRefundIssuedOfPayment = pPaymentAmount THEN 'FR'  \n" +
                "							   END)	  \n" +
                "						ELSE 'NA' END)  \n" +
                "					ELSE NULL END) ,  \n" +
                "			updatedBy = pUserID,    \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "		WHERE id = pCustomerPaymentMstID    \n" +
                "		AND isPaymentVoided = 0    \n" +
                "		AND isDeleted = 0 ;    \n" +
                "  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0 */    \n" +
                "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0    \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN    \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,    \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,    \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,    \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,    \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,    \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,    \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)    \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,    \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,    \n" +
                "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,    \n" +
                "				'NA',0, NULL,  NULL,    \n" +
                "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;    \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();    \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS    \n" +
                "			SELECT 	*    \n" +
                "			FROM 	JSON_TABLE(    \n" +
                "				pWriteOffCustInvoicePaymentDetList,    \n" +
                "					\"$[*]\" COLUMNS(    \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",    \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"    \n" +
                "					)    \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;    \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */    \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,    \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)    \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID    \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */    \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */    \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount    \n" +
                "			FROM packingslip_invoice_payment    \n" +
                "			WHERE id = pCustomerPaymentMstID    \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;    \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */    \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN    \n" +
                "				UPDATE packingslip_invoice_payment    \n" +
                "				SET paymentAmount = pPaymentAmount,    \n" +
                "					updatedBy = pUserID,    \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE id = pCustomerPaymentMstID    \n" +
                "				AND isPaymentVoided = 0    \n" +
                "				AND isDeleted = 0 ;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "			/* update customer credit memo - payment status */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN    \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det   \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip    \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN   \n" +
                "								    (CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							   WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'    \n" +
                "							   ELSE 'PE' END    \n" +
                "							) ,    \n" +
                "					updatedBy = pUserID,    \n" +
                "					updateByRoleId = pUserRoleID ,    \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "				WHERE id = pRefCustCreditMemoID    \n" +
                "				AND isDeleted = 0    \n" +
                "				;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */    \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */    \n" +
                "			UPDATE packingslip_invoice_payment psip    \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount    \n" +
                "						FROM packingslip_invoice_payment_det psipd    \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID    \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL    \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0    \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp    \n" +
                "				ON psip.id = invPayDetTemp.refPayementid    \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'    \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'    \n" +
                "						ELSE psip.lockStatus END    \n" +
                "			WHERE psip.id = pCustomerPaymentMstID    \n" +
                "			AND psip.lockStatus != 'LC'    \n" +
                "			AND psip.isPaymentVoided = 0    \n" +
                "			AND psip.isDeleted = 0    \n" +
                "			;   \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */    \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)    \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)    \n" +
                "		OR (vCountExistsCheckNo > 0) OR (vIsAgreedRefundLessThanTotIssued > 0)) THEN    \n" +
                "		SELECT 0 AS 'spStatus' ;    \n" +
                "	ELSE    \n" +
                "		SELECT 1 AS 'spStatus' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */    \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;    \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */    \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;    \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */    \n" +
                "	IF (vCountExistsCheckNo > 0) THEN    \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;    \n" +
                "	ELSE    \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;    \n" +
                "	END IF;   \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[4] -  Agreed Refund Amount Less Than Total Issued Amout */   \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN    \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;    \n" +
                "	ELSE    \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE   \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustInvoiceDetForVoidPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustInvoiceDetForVoidPayment`(    \n" +
                "	IN pVoidCustPaymentMstID INT,    \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(10),    \n" +
                "	IN pUserID VARCHAR(50),    \n" +
                "	IN pUserRoleID VARCHAR(50)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE vRefCustCreditMemoMstID INT;  \n" +
                "	DECLARE vRefGencTransModeID INT;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'R' OR pRefPaymentModeOfInvPayment = 'CA' OR pRefPaymentModeOfInvPayment = 'WOFF') THEN   \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs AS    \n" +
                "			SELECT refCustPackingslipInvoiceID    \n" +
                "			FROM packingslip_invoice_payment_det    \n" +
                "			WHERE refPayementid = pVoidCustPaymentMstID    \n" +
                "			AND isDeleted = 0 ;    \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy AS    \n" +
                "			SELECT refCustPackingslipInvoiceID    \n" +
                "			FROM temp_DB_ChangeStatus_CustInvoiceMstIDs ;    \n" +
                "  \n" +
                "  \n" +
                "		UPDATE customer_packingslip cps    \n" +
                "			LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet    \n" +
                "				 FROM packingslip_invoice_payment_det    \n" +
                "				WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs)    \n" +
                "				AND isPaymentVoided = 0    \n" +
                "				AND isDeleted = 0    \n" +
                "				GROUP BY refCustPackingslipInvoiceID ) invPaymentDet    \n" +
                "			 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID    \n" +
                "		SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'    \n" +
                "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
                "						cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'    \n" +
                "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND    \n" +
                "						cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'    \n" +
                "					   ELSE cps.paymentStatus END    \n" +
                "					) ,    \n" +
                "			cps.updatedBy = pUserID,    \n" +
                "			cps.updateByRoleId = pUserRoleID ,    \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "		WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy)    \n" +
                "		AND cps.isDeleted = 0	;    \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if Applied Credit Memo void then change Credit Memo payment status */    \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'CA') THEN    \n" +
                "  \n" +
                "		SELECT refCustCreditMemoID INTO vRefCustCreditMemoMstID  \n" +
                "		FROM packingslip_invoice_payment    \n" +
                "		WHERE id = pVoidCustPaymentMstID   \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		UPDATE customer_packingslip cps    \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
                "					FROM packingslip_invoice_payment_det    \n" +
                "					WHERE refRefundCustCreditMemoID = vRefCustCreditMemoMstID   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
                "					FROM packingslip_invoice_payment    \n" +
                "					WHERE refCustCreditMemoID = vRefCustCreditMemoMstID   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
                "		SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
                "  \n" +
                "					   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
                "					   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN     \n" +
                "								(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "					   ELSE cps.paymentStatus END    \n" +
                "					) ,    \n" +
                "			cps.updatedBy = pUserID,    \n" +
                "			cps.updateByRoleId = pUserRoleID ,    \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "		WHERE cps.id = vRefCustCreditMemoMstID  \n" +
                "		AND cps.isDeleted = 0	;    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	/* Update payment or credit memo payment status in case of customer refund voided */  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'CR') THEN  \n" +
                "  \n" +
                "		SELECT refGencTransModeID INTO vRefGencTransModeID  \n" +
                "		FROM packingslip_invoice_payment	  \n" +
                "		WHERE id = pVoidCustPaymentMstID ;  \n" +
                "  \n" +
                "		IF (vRefGencTransModeID = -9) THEN  /* Customer Payment Refund */  \n" +
                "			/* update refund payment status  */    \n" +
                "			UPDATE packingslip_invoice_payment psip	  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp   \n" +
                "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN	  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)   \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				updatedBy = pUserID,    \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE psip.id IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "			AND psip.isPaymentVoided = 0    \n" +
                "			AND psip.isDeleted = 0 ;   \n" +
                "  \n" +
                "		ELSEIF (vRefGencTransModeID = -6) THEN  /* Credit Memo Refund */  \n" +
                "			/* update customer credit memo - payment status and refund status  */   \n" +
                "			UPDATE customer_packingslip cps    \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo    \n" +
                "						FROM packingslip_invoice_payment_det    \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0    \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet    \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID   \n" +
                "				LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt    \n" +
                "						FROM packingslip_invoice_payment    \n" +
                "						WHERE refCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet    \n" +
                "					 ON cps.id = refCMAppliedDet.refCustCreditMemoID	   \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'    \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'    \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'RE'    \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END    \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < totalAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = totalAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "						     ELSE 'NA' END),		    \n" +
                "				cps.updatedBy = pUserID,    \n" +
                "				cps.updateByRoleId = pUserRoleID ,    \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()    \n" +
                "			WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "			AND cps.isDeleted = 0	;   \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerRefundByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(              \n" +
                "	IN pCustRefundMstID INT ,      \n" +
                "	IN pRefPaymentMode VARCHAR(5)      \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                       \n" +
                "		DECLARE v_TimeZone VARCHAR(50);                                          	              \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;                                                              \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    	              \n" +
                "  \n" +
                "		SELECT 	psip.id,                                                                        \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,              \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,                \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,               \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,        \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,     \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  'Paid' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,   \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,               \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,                                                                         \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,      \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmp ,    \n" +
                "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmp ,    \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedbyInitial,        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,        \n" +
                "			fun_getUserNameByID(psip.createdBy) createdbyInitial        \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip                                               \n" +
                "		WHERE id = pCustRefundMstID              \n" +
                "		AND refPaymentMode = pRefPaymentMode       \n" +
                "		AND psip.isDeleted = 0                    \n" +
                "		;               \n" +
                "	END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(    \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),       \n" +
                "	IN pCustomerIDs VARCHAR(16383),      \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),     \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),    \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),    \n" +
                "	IN pExactPaymentNumberSearch TINYINT,      \n" +
                "	IN pPaymentNumber VARCHAR(1000),     \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),    \n" +
                "	IN pAmount VARCHAR(50),       \n" +
                "	IN pExactRefundAmountSearch TINYINT,      \n" +
                "	IN pFromDate DATE,      \n" +
                "	IN pToDate DATE,      \n" +
                "	IN pFromCMPaymentDate DATE,      \n" +
                "	IN pToCMPaymentDate DATE,    \n" +
                "	IN pRefPaymentMode VARCHAR(10),    \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);      \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);      \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);      \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);    \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "        SET v_CMDateCon = '';      \n" +
                "        SET v_PaymentDateCon = '';      \n" +
                "        SET v_CMPaymentDateWhereClause = '';    \n" +
                "        SET v_IsIncludeVoidedTransWhereClause = '';   \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "  		SET pWhereClause = '1=1' ;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');      \n" +
                "		END IF;     \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');      \n" +
                "		END IF;      \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');      \n" +
                "		END IF;      \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');      \n" +
                "		END IF;      \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');      \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');      \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');      \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN      \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN      \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN      \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN      \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "		END IF;     \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('		    \n" +
                "			AND      \n" +
                "			(		    \n" +
                "				EXISTS(      \n" +
                "					SELECT  1      \n" +
                "					FROM packingslip_invoice_payment_det pipddt     \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0    \n" +
                "					WHERE pipddt.refPayementid = psip.id      \n" +
                "					',v_PaymentDateCon,'      \n" +
                "					AND pipddt.isDeleted=0      \n" +
                "				 )    \n" +
                "				 OR    \n" +
                "				 EXISTS(      \n" +
                "					SELECT  1      \n" +
                "					FROM packingslip_invoice_payment_det pipddt     \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0    \n" +
                "					WHERE pipddt.refPayementid = psip.id      \n" +
                "					',v_CMDateCon,'      \n" +
                "					AND pipddt.isDeleted=0      \n" +
                "				 )    \n" +
                "			)    \n" +
                "  \n" +
                "		');    \n" +
                "  \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN    \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"      \n" +
                "		SELECT  psip.id,      \n" +
                "			psip.mfgcodeID ,    \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,      \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,     \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,    \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  'Paid' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,      \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,      \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,      \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')      \n" +
                "									ELSE NULL END) AS voidedAt,     \n" +
                "			psip.bankName,      \n" +
                "			psip.bankAccountNo,      \n" +
                "			psip.paymentType,      \n" +
                "			psip.bankAccountMasID,      \n" +
                "			psip.systemId ,      \n" +
                "			psip.paymentDate AS refundDate,      \n" +
                "			psip.paymentAmount,      \n" +
                "			psip.accountReference,      \n" +
                "			psip.remark,     \n" +
                "			psip.paymentNumber,    \n" +
                "			gc.gencCategoryName paymentMethod,      \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,     \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList     \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList    \n" +
                "				ELSE NULL END) AS paymentCMList ,     \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList     \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList    \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,     \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'      \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,     \n" +
                "			psip.offsetAmount ,     \n" +
                "			psip.refGencTransModeID , gtmm.modeName,    \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,      \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,      \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole     \n" +
                "		FROM packingslip_invoice_payment psip      \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0      \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0      \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,    \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList    \n" +
                "					FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0    \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL     \n" +
                "					AND psipd.isDeleted = 0      \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp     \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid     \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,    \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList    \n" +
                "					 FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL     \n" +
                "					AND psipd.isDeleted = 0      \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp     \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid 		    \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'     \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)    \n" +
                "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"    \n" +
                "		AND psip.isDeleted = 0     \n" +
                "  \n" +
                "            \");    \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;    \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;               \n" +
                "  \n" +
                "			/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "	 -- select @SQLStatement1;    \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	-- select @SQLStatement2;    \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(    \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),       \n" +
                "	IN pCustomerIDs VARCHAR(16383),      \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),     \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),    \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),    \n" +
                "	IN pExactPaymentNumberSearch TINYINT,      \n" +
                "	IN pPaymentNumber VARCHAR(1000),     \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),    \n" +
                "	IN pAmount VARCHAR(50),       \n" +
                "	IN pExactRefundAmountSearch TINYINT,      \n" +
                "	IN pFromDate DATE,      \n" +
                "	IN pToDate DATE,      \n" +
                "	IN pFromCMPaymentDate DATE,      \n" +
                "	IN pToCMPaymentDate DATE,    \n" +
                "	IN pRefPaymentMode VARCHAR(10),    \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);      \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);      \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);      \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);      \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);    \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "        SET v_CMDateCon = '';      \n" +
                "        SET v_PaymentDateCon = '';      \n" +
                "        SET v_CMPaymentDateWhereClause = '';    \n" +
                "        SET v_IsIncludeVoidedTransWhereClause = '';   \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "  		SET pWhereClause = '1=1' ;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');      \n" +
                "		END IF;     \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');      \n" +
                "		END IF;      \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');      \n" +
                "		END IF;      \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN      \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');      \n" +
                "		END IF;      \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');      \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');      \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');      \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN      \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN      \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN      \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');      \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN      \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');      \n" +
                "		END IF;     \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('		    \n" +
                "			AND      \n" +
                "			(		    \n" +
                "				EXISTS(      \n" +
                "					SELECT  1      \n" +
                "					FROM packingslip_invoice_payment_det pipddt     \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0    \n" +
                "					WHERE pipddt.refPayementid = psip.id      \n" +
                "					',v_PaymentDateCon,'      \n" +
                "					AND pipddt.isDeleted=0      \n" +
                "				 )    \n" +
                "				 OR    \n" +
                "				 EXISTS(      \n" +
                "					SELECT  1      \n" +
                "					FROM packingslip_invoice_payment_det pipddt     \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0    \n" +
                "					WHERE pipddt.refPayementid = psip.id      \n" +
                "					',v_CMDateCon,'      \n" +
                "					AND pipddt.isDeleted=0      \n" +
                "				 )    \n" +
                "			)    \n" +
                "  \n" +
                "		');    \n" +
                "  \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN    \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"      \n" +
                "		SELECT  psip.id,      \n" +
                "			psip.mfgcodeID ,    \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,      \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,     \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,    \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  'Paid' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,      \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,      \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,      \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')      \n" +
                "									ELSE NULL END) AS voidedAt,     \n" +
                "			psip.bankName,      \n" +
                "			psip.bankAccountNo,      \n" +
                "			psip.paymentType,      \n" +
                "			psip.bankAccountMasID,      \n" +
                "			psip.systemId ,      \n" +
                "			psip.paymentDate AS refundDate,      \n" +
                "			psip.paymentAmount,      \n" +
                "			psip.accountReference,      \n" +
                "			psip.remark,     \n" +
                "			psip.paymentNumber,    \n" +
                "			gc.gencCategoryName paymentMethod,      \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,     \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList     \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList    \n" +
                "				ELSE NULL END) AS paymentCMList ,     \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList     \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList    \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,     \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'      \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,     \n" +
                "			psip.offsetAmount ,     \n" +
                "			psip.refGencTransModeID , gtmm.modeName,    \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,    \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,      \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,      \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole     \n" +
                "		FROM packingslip_invoice_payment psip      \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0      \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0      \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,    \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList    \n" +
                "					FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0    \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL     \n" +
                "					AND psipd.isDeleted = 0      \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp     \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid     \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,    \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList    \n" +
                "					 FROM packingslip_invoice_payment_det psipd      \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0     \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL     \n" +
                "					AND psipd.isDeleted = 0      \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp     \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid 		    \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'     \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)    \n" +
                "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"    \n" +
                "		AND psip.isDeleted = 0     \n" +
                "  \n" +
                "            \");    \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;    \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;               \n" +
                "  \n" +
                "			/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "	 -- select @SQLStatement1;    \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	-- select @SQLStatement2;    \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetAllCreditMemoOfCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllCreditMemoOfCustomerRefund`(      \n" +
                "	IN pCustomerID INT,    \n" +
                "	IN pCustRefundMstID INT,    \n" +
                "	IN pCreditMemoTransType VARCHAR(255),    \n" +
                "	IN pRefPaymentMode VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_isRefundPaymentVoided TINYINT ;   \n" +
                "	IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN  \n" +
                "  \n" +
                "		SELECT * FROM (     \n" +
                "			SELECT  NULL AS paymentDetMstID , cps.id  AS custCreditMemoMstID,     \n" +
                "				cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "				cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
                "				psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
                "				IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
                "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "						FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id                     \n" +
                "						AND isPaymentVoided = 0                        \n" +
                "						AND isDeleted = 0    \n" +
                "			    ) totalRefundIssuedAmount ,    \n" +
                "			     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
                "					WHERE refCustCreditMemoID = cps.id       \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
                "					FROM customer_packingslip cps    \n" +
                "			LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id AND psipd.isPaymentVoided = 0                        \n" +
                "						AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID    \n" +
                "			WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1    \n" +
                "			AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2   \n" +
                "			) tempCrditMemoList    \n" +
                "		WHERE (                \n" +
                "			( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0                  \n" +
                "					 /* get all peding for refund */	                \n" +
                "		    ) ;    \n" +
                "  \n" +
                "	ELSE    \n" +
                "  \n" +
                "		/* update customer payment case */    \n" +
                "		SELECT isPaymentVoided INTO v_isRefundPaymentVoided    \n" +
                "		FROM packingslip_invoice_payment    \n" +
                "		WHERE id = pCustRefundMstID    \n" +
                "		AND isDeleted = 0 ;   \n" +
                "  \n" +
                "		IF (v_isRefundPaymentVoided = 0) THEN  \n" +
                "				SELECT * FROM (    \n" +
                "					SELECT  psipd.id AS paymentDetMstID , cps.id  AS custCreditMemoMstID,      \n" +
                "						cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "						cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
                "						psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
                "						IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
                "						 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "								FROM packingslip_invoice_payment_det                        \n" +
                "								WHERE refRefundCustCreditMemoID = cps.id                    \n" +
                "								AND isPaymentVoided = 0                        \n" +
                "								AND isDeleted = 0    \n" +
                "						) totalRefundIssuedAmount ,    \n" +
                "						(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
                "							WHERE refCustCreditMemoID = cps.id       \n" +
                "							AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
                "							FROM customer_packingslip cps    \n" +
                "					LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0                        \n" +
                "								AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID    \n" +
                "					WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1    \n" +
                "					AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2   \n" +
                "					) tempCrditMemoList    \n" +
                "				WHERE                 \n" +
                "					(                \n" +
                "						(IFNULL(tempCrditMemoList.paymentAmountForSelectedCM,0) > 0)     \n" +
                "										 /* get  paid CM*/	                \n" +
                "					)  \n" +
                "  \n" +
                "				UNION    \n" +
                "  \n" +
                "  \n" +
                "				SELECT * FROM (    \n" +
                "						SELECT  NULL AS paymentDetMstID , cps.id  AS custCreditMemoMstID,   							  \n" +
                "							cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "							cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
                "							psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
                "							IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
                "							 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "									FROM packingslip_invoice_payment_det                        \n" +
                "									WHERE refRefundCustCreditMemoID = cps.id                     \n" +
                "									AND isPaymentVoided = 0                        \n" +
                "									AND isDeleted = 0    \n" +
                "						    ) totalRefundIssuedAmount ,    \n" +
                "						     (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
                "								WHERE refCustCreditMemoID = cps.id       \n" +
                "								AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
                "								FROM customer_packingslip cps    \n" +
                "						LEFT JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id  AND psipd.isPaymentVoided = 0                        \n" +
                "									AND psipd.isDeleted = 0 AND refPayementid = pCustRefundMstID    \n" +
                "								WHERE cps.isDeleted = 0 AND cps.isMarkForRefund = 1    \n" +
                "								AND cps.customerID = pCustomerID AND cps.transType = pCreditMemoTransType AND cps.`status` = 2 AND cps.id NOT IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det                \n" +
                "												WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0              \n" +
                "												AND isDeleted = 0 GROUP BY refPayementid)  \n" +
                "					) tempCrditMemoList     \n" +
                "				WHERE (                \n" +
                "						( IFNULL(tempCrditMemoList.agreedRefundAmount,0)  - IFNULL(tempCrditMemoList.totalRefundIssuedAmount,0)) > 0                  \n" +
                "								 /* get all peding for refund */	                \n" +
                "					)      \n" +
                "			    ;  \n" +
                "  \n" +
                "		ELSEIF(v_isRefundPaymentVoided = 1) THEN   \n" +
                "  \n" +
                "			SELECT  psipd.id AS paymentDetMstID , cps.id  AS custCreditMemoMstID,   				  \n" +
                "				cps.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "				cps.systemID , cps.creditMemoNumber , cps.creditMemoDate ,    \n" +
                "				psipd.paymentAmount AS paymentAmountForSelectedCM ,    \n" +
                "				IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount , psipd.comment ,    \n" +
                "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "						FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id                    \n" +
                "						AND isPaymentVoided = 0                        \n" +
                "						AND isDeleted = 0    \n" +
                "				) totalRefundIssuedAmount ,    \n" +
                "				(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment        \n" +
                "					WHERE refCustCreditMemoID = cps.id       \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo     \n" +
                "			FROM customer_packingslip cps    \n" +
                "				JOIN packingslip_invoice_payment_det psipd ON psipd.refRefundCustCreditMemoID = cps.id   \n" +
                "						AND psipd.isDeleted = 0 AND psipd.refPayementid = pCustRefundMstID    \n" +
                "			WHERE cps.customerID = pCustomerID   \n" +
                "			AND cps.`status` = 2   \n" +
                "			AND cps.transType = pCreditMemoTransType   \n" +
                "			AND cps.isDeleted = 0   \n" +
                "			 ;  \n" +
                "  \n" +
                "		END IF;	  \n" +
                "	END IF;   \n" +
                "  \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetAllPaymentOfCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllPaymentOfCustomerRefund`(    \n" +
                "IN pCustomerID INT,    \n" +
                "IN pCustRefundMstID INT,    \n" +
                "IN pRefPaymentMode VARCHAR(10)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_isRefundPaymentVoided TINYINT ;  \n" +
                "IF ( pCustRefundMstID IS NULL OR pCustRefundMstID = '') THEN                \n" +
                "	SELECT *       \n" +
                "	FROM (  \n" +
                "		SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,               \n" +
                "                psip.paymentNumber,                                                                       \n" +
                "                psip.systemId ,       \n" +
                "		psip.paymentDate,                                                \n" +
                "                psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "					FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundPaymentID = psip.id                     \n" +
                "					AND isPaymentVoided = 0                        \n" +
                "					AND isDeleted = 0    \n" +
                "                    )  AS totalRefundIssuedAmount ,    \n" +
                "				psip.paymentAmount AS totalPaymentAmount,     \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
                "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,               \n" +
                "                    (SELECT COMMENT    \n" +
                "					FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
                "					AND isPaymentVoided = 0                        \n" +
                "					AND isDeleted = 0    \n" +
                "                    ) COMMENT,    \n" +
                "                     (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "					FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
                "					AND isPaymentVoided = 0                        \n" +
                "					AND isDeleted = 0    \n" +
                "                    ) paymentAmountForSelectedPayment    \n" +
                "		FROM packingslip_invoice_payment psip     \n" +
                "		LEFT JOIN (SELECT psipd.refPayementid,     \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
                "				    FROM packingslip_invoice_payment_det psipd     \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
                "											AND cps.isDeleted = 0      \n" +
                "				     WHERE psipd.isDeleted = 0          \n" +
                "					 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
                "                     ON psip.id = payDetTemp.refPayementid      \n" +
                "             WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0     \n" +
                "             AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "             )  tempPay                \n" +
                "		WHERE                 \n" +
                "			(                \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0                  \n" +
                "						 /* get all peding to refund */	                \n" +
                "			)                \n" +
                "		;      \n" +
                "ELSE    \n" +
                "  \n" +
                "	/* update customer payment case */    \n" +
                "  \n" +
                "	SELECT isPaymentVoided INTO v_isRefundPaymentVoided    \n" +
                "	FROM packingslip_invoice_payment    \n" +
                "	WHERE id = pCustRefundMstID    \n" +
                "	AND isDeleted = 0 ;    \n" +
                "  \n" +
                "  \n" +
                "	IF(v_isRefundPaymentVoided = 0) THEN  \n" +
                "  \n" +
                "		SELECT *       \n" +
                "		FROM (  \n" +
                "			SELECT psip.id AS paymentMstID,     \n" +
                "						(SELECT id     \n" +
                "						FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
                "						AND isPaymentVoided = 0                        \n" +
                "						AND isDeleted = 0    \n" +
                "			    ) AS paymentDetMstID ,                                                                                      \n" +
                "			psip.paymentNumber,                                                                   \n" +
                "			psip.systemId ,       \n" +
                "			psip.paymentDate,                                                \n" +
                "		       psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "						FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundPaymentID = psip.id                     \n" +
                "						AND isPaymentVoided = 0                        \n" +
                "						AND isDeleted = 0    \n" +
                "			    ) AS totalRefundIssuedAmount ,    \n" +
                "					psip.paymentAmount AS totalPaymentAmount,     \n" +
                "					IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
                "					IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,                \n" +
                "			(SELECT COMMENT    \n" +
                "						FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
                "						AND isPaymentVoided = 0                        \n" +
                "						AND isDeleted = 0    \n" +
                "			    ) COMMENT,    \n" +
                "			    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "						FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
                "						AND isPaymentVoided = 0                        \n" +
                "						AND isDeleted = 0    \n" +
                "			    ) paymentAmountForSelectedPayment    \n" +
                "			FROM packingslip_invoice_payment psip     \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,     \n" +
                "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
                "					    FROM packingslip_invoice_payment_det psipd     \n" +
                "						JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
                "												AND cps.isDeleted = 0      \n" +
                "					     WHERE psipd.isDeleted = 0          \n" +
                "						 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
                "						ON psip.id = payDetTemp.refPayementid      \n" +
                "			WHERE psip.isMarkForRefund = 1 AND psip.mfgcodeID = pCustomerID AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0     \n" +
                "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "			)  tempPay                \n" +
                "			WHERE                 \n" +
                "				(                \n" +
                "					(tempPay.paymentAmountForSelectedPayment > 0)     \n" +
                "									 /* get all paid */	                \n" +
                "				)   \n" +
                "  \n" +
                "			UNION   \n" +
                "  \n" +
                "			SELECT *       \n" +
                "			FROM (  \n" +
                "				SELECT psip.id AS paymentMstID, NULL paymentDetMstID ,                                                              \n" +
                "				psip.paymentNumber,                                                                    \n" +
                "				psip.systemId ,       \n" +
                "				psip.paymentDate,                                                \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "						(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "							FROM packingslip_invoice_payment_det                        \n" +
                "							WHERE refRefundPaymentID = psip.id                     \n" +
                "							AND isPaymentVoided = 0                        \n" +
                "							AND isDeleted = 0    \n" +
                "				    )  AS totalRefundIssuedAmount ,    \n" +
                "						psip.paymentAmount AS totalPaymentAmount,     \n" +
                "						IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
                "						IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,                  \n" +
                "				(SELECT COMMENT    \n" +
                "							FROM packingslip_invoice_payment_det                        \n" +
                "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
                "							AND isPaymentVoided = 0                        \n" +
                "							AND isDeleted = 0    \n" +
                "				    ) COMMENT,    \n" +
                "				    (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "							FROM packingslip_invoice_payment_det                        \n" +
                "							WHERE refRefundPaymentID = psip.id AND refPayementid = pCustRefundMstID                  \n" +
                "							AND isPaymentVoided = 0                        \n" +
                "							AND isDeleted = 0    \n" +
                "				    ) paymentAmountForSelectedPayment    \n" +
                "				FROM packingslip_invoice_payment psip     \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid, psipd.id AS paymentDetMstID ,     \n" +
                "							IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
                "						    FROM packingslip_invoice_payment_det psipd     \n" +
                "							JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
                "													AND cps.isDeleted = 0      \n" +
                "						     WHERE psipd.isDeleted = 0          \n" +
                "							 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
                "				     ON psip.id = payDetTemp.refPayementid      \n" +
                "			     WHERE psip.isMarkForRefund = 1   \n" +
                "			     AND psip.mfgcodeID = pCustomerID   \n" +
                "			     AND psip.isDeleted = 0   \n" +
                "			     AND psip.isPaymentVoided = 0     \n" +
                "			     AND psip.refPaymentMode = pRefPaymentMode   \n" +
                "			     AND psip.id NOT IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det                \n" +
                "										WHERE refPayementid = pCustRefundMstID  AND isPaymentVoided = 0              \n" +
                "										AND isDeleted = 0 GROUP BY refPayementid)  \n" +
                "			) tempPay     \n" +
                "  \n" +
                "			WHERE                 \n" +
                "			(                \n" +
                "				(tempPay.agreedRefundAmount  - IFNULL(tempPay.totalRefundIssuedAmount,0)) > 0                  \n" +
                "						 /* get all peding to refund  */	                \n" +
                "			)                \n" +
                "			;  \n" +
                "  \n" +
                "	ELSEIF(v_isRefundPaymentVoided = 1) THEN   \n" +
                "  \n" +
                "			SELECT psip.id AS paymentMstID,     \n" +
                "				(SELECT id  FROM packingslip_invoice_payment_det                        \n" +
                "						WHERE refRefundPaymentID = psip.id   \n" +
                "						AND refPayementid = pCustRefundMstID AND isDeleted = 0) AS paymentDetMstID ,                   \n" +
                "				psip.paymentNumber,                                                                       \n" +
                "				psip.systemId ,       \n" +
                "				psip.paymentDate,                                                \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,     \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)     \n" +
                "					FROM packingslip_invoice_payment_det WHERE refRefundPaymentID = psip.id                     \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) AS totalRefundIssuedAmount ,    \n" +
                "				psip.paymentAmount AS totalPaymentAmount,     \n" +
                "				IFNULL(payDetTemp.paidPaymentAmount,0) AS paidPaymentAmount,                            \n" +
                "				IFNULL(psip.paymentAmount,0) - IFNULL(payDetTemp.paidPaymentAmount,0) - IFNULL(psip.agreedRefundAmt,0) AS paymentVariance ,               \n" +
                "				(SELECT COMMENT FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundPaymentID = psip.id   \n" +
                "					AND refPayementid = pCustRefundMstID AND isDeleted = 0) COMMENT,    \n" +
                "				 (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                        \n" +
                "					WHERE refRefundPaymentID = psip.id   \n" +
                "					AND refPayementid = pCustRefundMstID AND isDeleted = 0) paymentAmountForSelectedPayment    \n" +
                "			FROM packingslip_invoice_payment psip     \n" +
                "				JOIN (SELECT psipd.refPayementid,     \n" +
                "						IFNULL(SUM(psipd.paymentAmount),0) AS paidPaymentAmount     \n" +
                "					    FROM packingslip_invoice_payment_det psipd     \n" +
                "						JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id      \n" +
                "												AND cps.isDeleted = 0      \n" +
                "					     WHERE psipd.isDeleted = 0          \n" +
                "						 GROUP BY psipd.refPayementid ) payDetTemp    \n" +
                "						ON psip.id = payDetTemp.refPayementid      \n" +
                "			WHERE psip.mfgcodeID = pCustomerID   \n" +
                "			AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "			AND psip.isDeleted = 0    \n" +
                "			 ;  \n" +
                "  \n" +
                "	END IF;	   \n" +
                "  \n" +
                "   END IF;    \n" +
                "END;  \n" +
             /* **************************** New Script -> 29-07-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(                              \n" +
                "	IN cpID INT                              \n" +
                ")  \n" +
                "BEGIN	                    \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);    \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo  DECIMAL(18,6); 	  \n" +
                "  \n" +
                "	# Customer Invoice Master table details                               \n" +
                "		SELECT  cp.id,                               \n" +
                "			cp.invoiceNumber,                              \n" +
                "			cp.invoiceDate,                  \n" +
                "			cp.creditMemoNumber,                  \n" +
                "			cp.creditMemoDate,                  \n" +
                "			cp.refDebitMemoNumber,                  \n" +
                "			refDebitMemoDate,                                  \n" +
                "			cp.poNumber,                                     \n" +
                "			cp.poDate,                    \n" +
                "			mg.customerSystemID,                    \n" +
                "			mg.accountRef,                  \n" +
                "			cp.status,                           \n" +
                "			cp.billingAddress,                   \n" +
                "			cp.shippingAddress,                    \n" +
                "			cp.packingSlipComment,                    \n" +
                "			cp.rmaNumber,                  \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,                                                \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,                                      \n" +
                "			cp.systemID AS legalnumber,                      \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,                        \n" +
                "			us.emailAddress,                    \n" +
                "			emp.phExtension,        \n" +
                "			'1.00' docNumber ,      \n" +
                "			cp.revision creditMemoVersion      \n" +
                "		FROM customer_packingslip cp                     \n" +
                "			JOIN mfgcodemst mg ON mg.id=cp.customerID                              \n" +
                "			LEFT JOIN genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  AND gcs.isDeleted = 0                                   \n" +
                "			LEFT JOIN genericcategory gcp ON gcp.gencCategoryID = cp.termsID AND gcp.isDeleted = 0                                 \n" +
                "			LEFT JOIN users us ON us.id = cp.updatedBy                                      \n" +
                "			LEFT JOIN employees emp ON emp.id = us.employeeID                               \n" +
                "		WHERE cp.id=cpID AND cp.isDeleted = 0         \n" +
                "		AND transType='C'        \n" +
                "		LIMIT 1;                               \n" +
                "  \n" +
                "	# Customer Invoice line level details                               \n" +
                "		SELECT                                \n" +
                "			cpd.id,                                    \n" +
                "			cpd.partId,                          \n" +
                "			cpd.id AS refCustomerPackingSlipDetID,                           \n" +
                "			cpd.lineID,                   \n" +
                "			cpd.reflineID,                \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                              \n" +
                "				WHEN (c.iscustom=1) THEN  c.custAssyPN                              \n" +
                "				WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN                               \n" +
                "				ELSE  ''  END) AS mfgPN ,                              \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN 'Other Charges'                                    \n" +
                "				ELSE  fun_getMfgNameByPartID(cpd.partId)                                                      \n" +
                "				END) AS  mfgName,                              \n" +
                "			IFNULL(c.rev, '') AS revision,                              \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  'EA'                              \n" +
                "				ELSE  fun_getUOMAbbreviationByID(c.uom)              \n" +
                "				END) AS uom,                              \n" +
                "			cpd.shipQty AS qty,                               \n" +
                "			IFNULL(cpd.unitPrice,0) AS price,                              \n" +
                "			IFNULL(cpd.extendedPrice,0) AS extPrice,                    \n" +
                "			CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
                "					','<br/>'), ''),'<br/>',                                   \n" +
                "			IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),                                     \n" +
                "			IFNULL(CONCAT(', ',                                      \n" +
                "					fun_getCertificationByPartID(cpd.partid)),                                      \n" +
                "				''),                      \n" +
                "			IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),                                      \n" +
                "			IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',            \n" +
                "			IFNULL(REPLACE(cpd.shippingNotes,'  \n" +
                "			','<br/>'),'')) AS DESCRIPTION                     \n" +
                "  \n" +
                "		FROM  customer_packingslip_det cpd                                   \n" +
                "			LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)                                    \n" +
                "		WHERE                                    \n" +
                "		cpd.isDeleted = 0   \n" +
                "		AND cpd.refCustPackingSlipID = cpID   \n" +
                "		ORDER BY reflineID ASC;                               \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report                              \n" +
                "	SELECT  fun_getTotalCustomerCreditMemoAppliedAmountById(cpID) INTO vReceivedAmt;   \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "	FROM packingslip_invoice_payment_det   \n" +
                "	WHERE refRefundCustCreditMemoID = cpID  \n" +
                "	AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTotalPrice AS                               \n" +
                "		SELECT                                            \n" +
                "			(SELECT SUM(cp.extendedPrice) FROM customer_packingslip_det cp                               \n" +
                "				INNER JOIN COMPONENT c ON c.id = cp.partId AND c.isDeleted = 0                           \n" +
                "				WHERE cp.refCustPackingSlipID = cpID AND cp.isDeleted=0 ) totalLinePrice                  \n" +
                "			/*(SELECT SUM(csp.extendedPrice) FROM customer_packingslip_det csp                               \n" +
                "				WHERE csp.refCustPackingSlipID=cpID AND csp.refChargesTypeID IS NOT NULL AND csp.isDeleted = 0) totalCIOMiscPrice*/                              \n" +
                "		FROM customer_packingslip_det cpd                                   \n" +
                "		WHERE cpd.refCustPackingSlipID = cpID                                \n" +
                "		AND cpd.isdeleted=0;                 \n" +
                "  \n" +
                "		SELECT 	IFNULL(totalLinePrice,0)totalLinePrice,                    \n" +
                "				vReceivedAmt totalRecvAmt,      \n" +
                "			-- IFNULL(totalCIOMiscPrice,0) totalCIOMiscPrice,            \n" +
                "			IFNULL(totalLinePrice,0) totalCMAmount,      \n" +
                "			(IFNULL((IFNULL(totalLinePrice,0) + (IFNULL(vReceivedAmt,0) + vTotRefundIssuedAgainstCreditMemo)) ,0)) totalBalAmt ,  \n" +
                "			vTotRefundIssuedAgainstCreditMemo AS totalCMRefundedAmt      \n" +
                "                FROM tempTotalPrice LIMIT 1;                 \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempTotalPrice;                      \n" +
                "END;  \n" +
             /* **************************** Add Script Version -> 29-07-2021 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1082,'1.00','V1',' customer payment refund sps  - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1082:
                allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2021  *********************************** */
                    "ALTER TABLE assemblystock  \n" +
                    "ADD COLUMN poQty INT;  \n" +
                    "ALTER TABLE assemblystock  \n" +
                    "ADD COLUMN soNumber VARCHAR(20);  \n" +
                /* **************************** Add Script Version -> 30-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1083,'1.00','V1',' User Story 34837: Add fields in Initial stock - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1083:
                allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssyStockDetailByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyStockDetailByID`(    \n" +
                "	IN passyStockID INT    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "		SELECT s.id,s.openingStock,s.openingdate,    \n" +
                "			s.woNumber,s.serialNo,s.partID,s.`type`,    \n" +
                "			s.whID,s.binID,  s.dateCode, s.dateCodeFormat, s.poNumber, s.poQty , s.soNumber ,   \n" +
                "			(SELECT SUM(sh.shippedqty)  FROM shippedassembly sh WHERE sh.partID=s.partID    \n" +
                "				AND sh.woNumber=s.woNumber AND sh.isDeleted=0) shipQty    \n" +
                "		FROM assemblystock s    \n" +
                "		WHERE s.id=passyStockID    \n" +
                "		AND s.isDeleted=0;    \n" +
                "  \n" +
                "END;  \n" +
                
                /* **************************** New Script -> 30-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyStock`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyStock`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "    IN pWhereClause VARCHAR(16383)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SET @temp_Sproc_GetAssemblyStock = CONCAT(\" SELECT s.id, s.openingdate,    \n" +
                "			c.imageURL, c.documentPath, s.partID, c.mfgPN, c.PIDCode,    \n" +
                "			c.nickname, c.rev, c.custAssyPN, c.mfgPNDescription,    \n" +
                "			ro.rohsIcon, ro.name AS rohsName, s.woNumber, s.serialNo,    \n" +
                "			s.openingStock,fun_getWarehouseNameByID(s.whID) warehouse,fun_getBinNameByID(s.binID) binName,    \n" +
                "			fun_getDepartmentNameByBinID(s.binID) parentWarehouse,    \n" +
                "			(select count(1) from shippedassembly sh where sh.partID=s.partID and sh.woNumber=s.woNumber and sh.isdeleted=0) systemGeneratedsss,    \n" +
                "			fun_getStockType(s.type) typestock,    \n" +
                "			s.dateCode,s.dateCodeFormat, s.poNumber, s.poQty , s.soNumber ,  \n" +
                "			fun_getUserNameByID(s.updatedBy) updatedby,    \n" +
                "			fun_getUserNameByID(s.createdBy) createdby,    \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,    \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,    \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt    \n" +
                "			  ,(select sum(qtyPerBox) from workorder_boxserialno where assyStockId =  s.id) qtyBox    \n" +
                "		FROM assemblystock s    \n" +
                "		JOIN component c ON c.id = s.partID AND c.category = 3    \n" +
                "		LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id    \n" +
                "		WHERE s.isdeleted = 0 and s.type='OS'\");    \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NOT NULL) THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY PIDCode DESC\");    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1';    \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);    \n" +
                "		ELSE    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetAssemblyStock,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetAssemblyStock,\" ) c    \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query1 FROM @SQLStatement2;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "END;  \n" +
           
                /* **************************** New Script -> 30-07-2021  *********************************** */
                "ALTER VIEW `vu_salesorder_shipped_report` AS   \n" +
                "    SELECT   \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN ((IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) > 0) THEN 'In Progress'  \n" +
                "            ELSE 'Completed'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`  \n" +
                "    FROM  \n" +
                "        (SELECT   \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT   \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT   \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT   \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT   \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +

                /* **************************** New Script -> 30-07-2021  *********************************** */
                "ALTER VIEW `vu_customer_packing_slip_qty` AS  \n" +
                "    SELECT   \n" +
                "        `a`.`opStock` AS `opStock`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETLASTWOOPIDBYWONUMBER(`a`.`woNumber`) AS `lastWOOPID`,  \n" +
                "        `a`.`woNumber` AS `woNumber`,  \n" +
                "        `a`.`assyID` AS `assyID`,  \n" +
                "        `a`.`availableQty` AS `availableQty`,  \n" +
                "        `a`.`availableQtyWithUMIDStock` AS `availableQtyWithUMIDStock`,  \n" +
                "        `a`.`availableQty` AS `actualAvalilableQty`,  \n" +
                "        `a`.`partID` AS `partID`,  \n" +
                "        `a`.`rohsIcon` AS `rohsIcon`,  \n" +
                "        `a`.`rohsName` AS `rohsName`,  \n" +
                "        `a`.`mfgPN` AS `mfgPN`,  \n" +
                "        NULL AS `selectedQty`,  \n" +
                "        `a`.`warehouseName` AS `warehouseName`,  \n" +
                "        `a`.`binName` AS `binName`,  \n" +
                "        `a`.`binID` AS `binID`,  \n" +
                "        `a`.`totalUMIDCount` AS `totalUMIDCount`,  \n" +
                "        `a`.`totalUMIDCountAfterShipped` AS `totalUMIDCountAfterShipped`,  \n" +
                "        `a`.`departmentName` AS `departmentName`,  \n" +
                "        `a`.`stockType` AS `stockType`,  \n" +
                "        `a`.`stockTypeName` AS `stockTypeName`,  \n" +
                "        `a`.`poNumbers` AS `poNumbers`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`soNumber` AS `soNumbers`  \n" +
                "    FROM  \n" +
                "        (SELECT   \n" +
                "            (SUM(`atk`.`openingStock`) - (IFNULL(`css`.`pkgQty`, 0) + (SELECT   \n" +
                "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly` `ss`  \n" +
                "                    WHERE  \n" +
                "                        ((`ss`.`isDeleted` = 0)  \n" +
                "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                "                            AND (`ss`.`partID` = `atk`.`partID`)  \n" +
                "                            AND (`ss`.`stockType` = 'US'))))) AS `opStock`,  \n" +
                "                `atk`.`partID` AS `partID`,  \n" +
                "                `atk`.`woID` AS `woID`,  \n" +
                "                `atk`.`woNumber` AS `woNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`atk`.`type` = 'AS') THEN 'Adjustment Stock'  \n" +
                "                    WHEN (`atk`.`type` = 'WS') THEN 'Work Order Stock'  \n" +
                "                    WHEN (`atk`.`type` = 'OS') THEN 'Initial Stock'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `stockTypeName`,  \n" +
                "                `atk`.`type` AS `stockType`,  \n" +
                "                FUN_GETASSYPIDCODEBYID(`atk`.`partID`) AS `assyID`,  \n" +
                "                FUN_GETROHSICONBYPARTID(`atk`.`partID`) AS `rohsIcon`,  \n" +
                "                FUN_GETROHSNAMEBYPARTID(`atk`.`partID`) AS `rohsName`,  \n" +
                "                FUN_GETCOMPONENTNAMEBYID(`atk`.`partID`) AS `mfgPN`,  \n" +
                "                FUN_GETWAREHOUSENAMEBYID(`atk`.`whID`) AS `warehouseName`,  \n" +
                "                FUN_GETBINNAMEBYID(`atk`.`binID`) AS `binName`,  \n" +
                "                `atk`.`binID` AS `binID`,  \n" +
                "                IFNULL(`css`.`pkgQty`, 0) AS `totalUMIDCount`,  \n" +
                "                FUN_GETDEPARTMENTNAMEBYBINID(`atk`.`binID`) AS `departmentName`,  \n" +
                "                IFNULL(`css`.`pkgQty`, 0) AS `totalUMIDCountAfterShipped`,  \n" +
                "                (SUM(`atk`.`openingStock`) - (SELECT   \n" +
                "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly` `ss`  \n" +
                "                    WHERE  \n" +
                "                        ((`ss`.`isDeleted` = 0)  \n" +
                "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                "                            AND (`ss`.`partID` = `atk`.`partID`)))) AS `availableQtyWithUMIDStock`,  \n" +
                "                ((SUM(`atk`.`openingStock`) - (SELECT   \n" +
                "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly` `ss`  \n" +
                "                    WHERE  \n" +
                "                        ((`ss`.`isDeleted` = 0)  \n" +
                "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                "                            AND (`ss`.`partID` = `atk`.`partID`)))) - IFNULL(`css`.`pkgQty`, 0)) AS `availableQty`,  \n" +
                "                GROUP_CONCAT(DISTINCT `atk`.`poNumber`  \n" +
                "                    SEPARATOR ', ') AS `poNumbers`,  \n" +
                "                `atk`.`poQty` AS `poQty`,  \n" +
                "                `atk`.`soNumber` AS `soNumber`  \n" +
                "        FROM  \n" +
                "            (`assemblystock` `atk`  \n" +
                "        LEFT JOIN (SELECT   \n" +
                "            `css`.`woID` AS `woId`,  \n" +
                "                `css`.`woNumber` AS `woNumber`,  \n" +
                "                SUM(`css`.`pkgQty`) AS `pkgQty`  \n" +
                "        FROM  \n" +
                "            `component_sid_stock` `css`  \n" +
                "        WHERE  \n" +
                "            ((`css`.`isDeleted` = 0)  \n" +
                "                AND (`css`.`woNumber` IS NOT NULL))  \n" +
                "        GROUP BY `css`.`woID` , `css`.`woNumber`) `css` ON ((`css`.`woNumber` = `atk`.`woNumber`)))  \n" +
                "        WHERE  \n" +
                "            (`atk`.`isDeleted` = 0)  \n" +
                "        GROUP BY `atk`.`woNumber` , `atk`.`partID` , `atk`.`whID` , `atk`.`binID` , `atk`.`woID` , `atk`.`woNumber` , `css`.`pkgQty`) `a`  \n" +
                "    WHERE  \n" +
                "        (`a`.`availableQty` > 0) ; \n" +

                /* **************************** New Script -> 30-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_getCustomerPackingSlipTransferQty`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerPackingSlipTransferQty`(      \n" +
                "	IN pPartID INT      \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "  	SELECT vucp.opStock,      \n" +
                "		vucp.woID,      \n" +
                "		vucp.lastWOOPID,      \n" +
                "		vucp.woNumber,      \n" +
                "		vucp.assyID,      \n" +
                "		vucp.availableQty,       \n" +
                "		#get available qty - shipped qty only, no need to deduct package qty of work order again      \n" +
                "		-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `availableQty`,      \n" +
                "		vucp.actualAvalilableQty,      \n" +
                "		-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `actualAvalilableQty` ,      \n" +
                "		vucp.partID,      \n" +
                "		vucp.rohsIcon,      \n" +
                "		vucp.rohsName,      \n" +
                "		vucp.mfgPN,      \n" +
                "		vucp.selectedQty,      \n" +
                "		vucp.warehouseName,      \n" +
                "		vucp.binName,      \n" +
                "		vucp.binID,      \n" +
                "		vucp.totalUMIDCount,      \n" +
                "		vucp.departmentName,      \n" +
                "		vucp.stockType,      \n" +
                "		vucp.stockTypeName,      \n" +
                "		(CASE WHEN vucp.woID IS NULL THEN IFNULL(vucp.soNumbers,'')  \n" +
                "			ELSE GROUP_CONCAT(DISTINCT IFNULL(sm.salesorderNumber,'')) END) AS soNumbers,      \n" +
                "		(CASE WHEN vucp.woID IS NULL THEN IFNULL(vucp.poNumbers,'')  \n" +
                "			ELSE GROUP_CONCAT(DISTINCT IFNULL(sm.poNumber,'')) END) AS poNumbers,    \n" +
                "                w.buildQty,      \n" +
                "                NULL AS UMID,      \n" +
                "		NULL AS refsidid ,      \n" +
                "		(CASE WHEN vucp.woID IS NULL THEN (SELECT GROUP_CONCAT(dateCode SEPARATOR ', ') FROM AssemblyStock WHERE woNumber = `vucp`.`woNumber`      \n" +
                "								AND isDeleted = 0 AND `type` = 'OS')      \n" +
                "				ELSE w.dateCode END) woDateCode      \n" +
                "                FROM  vu_customer_packing_slip_qty  vucp      \n" +
                "			LEFT JOIN workorder w ON w.woID=vucp.woID      \n" +
                "			LEFT JOIN workorder_salesorder_details wsd ON wsd.woId=w.woID      \n" +
                "			LEFT JOIN salesorderdet sd ON sd.id=wsd.salesOrderDetailId AND sd.partCategory=3      \n" +
                "			LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID      \n" +
                "		WHERE vucp.partID=pPartID      \n" +
                "		GROUP BY vucp.opStock,      \n" +
                "		vucp.woID,      \n" +
                "		vucp.lastWOOPID,      \n" +
                "		vucp.woNumber,      \n" +
                "		vucp.assyID,      \n" +
                "		vucp.availableQty,      \n" +
                "		vucp.actualAvalilableQty,      \n" +
                "		vucp.partID,      \n" +
                "		vucp.rohsIcon,      \n" +
                "		vucp.rohsName,      \n" +
                "		vucp.mfgPN,      \n" +
                "		vucp.selectedQty,      \n" +
                "		vucp.warehouseName,      \n" +
                "		vucp.binName,      \n" +
                "		vucp.binID,      \n" +
                "		vucp.totalUMIDCount,      \n" +
                "		vucp.departmentName,      \n" +
                "		vucp.stockType,      \n" +
                "		vucp.stockTypeName,      \n" +
                "		w.buildQty,w.dateCode,  \n" +
                "        sm.salesorderNumber,vucp.poNumbers,  \n" +
                "        sm.poNumber , vucp.soNumbers  \n" +
                "  \n" +
                "		UNION     \n" +
                "  \n" +
                "		SELECT /*SUM(css.pkgQty) AS opStock,*/      \n" +
                "			SUM(css.orgQty) AS opStock,      \n" +
                "			css.woID,      \n" +
                "			NULL lastWOOPID,      \n" +
                "			css.woNumber,      \n" +
                "			 `fun_getAssyPIDCodeByID`(`css`.`refcompid`)  AS `assyID`,      \n" +
                "			/*((SUM(`css`.`pkgQty`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss`      \n" +
                "							WHERE `ss`.`isDeleted` = 0 AND `ss`.`woNumber` = `css`.`woNumber`      \n" +
                "							AND `ss`.`partID` = `css`.`refcompid`      \n" +
                "							AND `ss`.`refsidid` = `css`.`id` ))      \n" +
                "						) AS `availableQty` ,   */      \n" +
                "			SUM(`css`.`pkgQty`) AS `availableQty`  ,      \n" +
                "			SUM(`css`.`pkgQty`) AS actualAvalilableQty,      \n" +
                "			css.refcompid partID,      \n" +
                "			`fun_getRoHSIconByPartID`(`css`.`refcompid`)  AS `rohsIcon`,      \n" +
                "			`fun_getRoHSNameByPartID`(`css`.`refcompid`)  AS `rohsName`,      \n" +
                "			`fun_getComponentNameByID`(`css`.`refcompid`)  AS `mfgPN`,      \n" +
                "			0 AS selectedQty,      \n" +
                "			`fun_getWarehouseNameByBinID`(`css`.`binID`)  AS `warehouseName`,      \n" +
                "			`fun_getBinNameByID`(`css`.`binID`)  AS `binName`,      \n" +
                "			css.binID,      \n" +
                "			IFNULL(SUM(`css`.`pkgQty`),0) AS totalUMIDCount,      \n" +
                "			`fun_getDepartmentNameByBinID`(`css`.`binID`)  AS `departmentName` ,      \n" +
                "			'US' AS stockType,      \n" +
                "			'UMID Stock' AS stockTypeName,      \n" +
                "			vu_wsd.salesOrderNumber AS soNumbers,      \n" +
                "			vu_wsd.poNumber AS poNumbers,      \n" +
                "			wo.buildQty,      \n" +
                "			css.uid AS UMID,      \n" +
                "			css.id AS refsidid,      \n" +
                "			(CASE WHEN css.woID IS NULL THEN (SELECT dateCode FROM AssemblyStock WHERE woNumber = `css`.`woNumber`      \n" +
                "								AND isDeleted = 0 AND `type` = 'OS' LIMIT 1)      \n" +
                "				ELSE wo.dateCode END) woDateCode      \n" +
                "		FROM component_sid_stock css      \n" +
                "			LEFT JOIN workorder wo ON wo.woID=css.woID      \n" +
                "			LEFT JOIN vu_workorder_salesorder_details vu_wsd ON vu_wsd.woID=css.woID      \n" +
                "		WHERE css.refcompid = pPartID      \n" +
                "		AND css.stockInventoryType IN ( 'AI'  ,'SI')    \n" +
                "		AND IFNULL(css.pkgQty,0) > 0      \n" +
                "		AND css.isDeleted = 0      \n" +
                "		GROUP BY `css`.`woID` ,`css`.`woNumber` , `css`.`refcompid`, `css`.`binID`,      \n" +
                "				vu_wsd.salesOrderNumber, vu_wsd.poNumber, wo.buildQty,      \n" +
                "				css.uid, css.id, wo.dateCode  ;   \n" +
                "    END;  \n" +
                

                /* **************************** New Script -> 30-07-2021  *********************************** */
                "ALTER VIEW `vu_workorder_summary_stk` AS  \n" +
                "    SELECT   \n" +
                "        `a`.`woid` AS `woid`,  \n" +
                "        `a`.`woNumber` AS `woNumber`,  \n" +
                "        `a`.`woVersion` AS `woVersion`,  \n" +
                "        `a`.`partID` AS `partID`,  \n" +
                "        `a`.`buildQty` AS `buildQty`,  \n" +
                "        `a`.`customerID` AS `customerID`,  \n" +
                "        IFNULL(`a`.`excessQty`, 0) AS `buildOverageQty`,  \n" +
                "        IFNULL(SUM(`a`.`assignSoWoQty`), 0) AS `poQty`,  \n" +
                "        IFNULL(SUM(`a`.`initialStockPoQty`), 0) AS `initialStockPoQty`,  \n" +
                "        IFNULL(SUM(`a`.`ShippedQty`), 0) AS `shippedQty`,  \n" +
                "        IFNULL(SUM(`a`.`ScrapQty`), 0) AS `scrapQty`,  \n" +
                "        IFNULL(SUM(`a`.`readytoShipQty`), 0) AS `readytoShipQty`,  \n" +
                "        IFNULL(SUM(`a`.`stockAdjustmentQty`), 0) AS `stockAdjustmentQty`,  \n" +
                "        IFNULL(SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`),  \n" +
                "                0) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                "        (CASE  \n" +
                "            WHEN ((IFNULL(`a`.`buildQty`, 0) - ((IFNULL(SUM(`a`.`ScrapQty`), 0) + IFNULL(SUM(`a`.`ShippedQty`), 0)) + IFNULL(SUM(`a`.`readytoShipQty`), 0))) < 0) THEN 0  \n" +
                "            ELSE (IFNULL(`a`.`buildQty`, 0) - ((IFNULL(SUM(`a`.`ScrapQty`), 0) + IFNULL(SUM(`a`.`ShippedQty`), 0)) + IFNULL(SUM(`a`.`readytoShipQty`), 0)))  \n" +
                "        END) AS `wipQty`,  \n" +
                "        (SELECT   \n" +
                "                SUM(`workorder_trans_production`.`totalQty`)  \n" +
                "            FROM  \n" +
                "                `workorder_trans_production`  \n" +
                "            WHERE  \n" +
                "                `workorder_trans_production`.`woTransID` IN (SELECT   \n" +
                "                        `workorder_trans`.`woTransID`  \n" +
                "                    FROM  \n" +
                "                        `workorder_trans`  \n" +
                "                    WHERE  \n" +
                "                        ((`workorder_trans`.`woID` = `a`.`woid`)  \n" +
                "                            AND `workorder_trans`.`opID` IN (SELECT FUN_GETFIRSTOPERATIONID(`a`.`woid`))))) AS `firstOPtotalQty`  \n" +
                "    FROM  \n" +
                "        (SELECT   \n" +
                "            `wo`.`woID` AS `woid`,  \n" +
                "                `wo`.`woNumber` AS `woNumber`,  \n" +
                "                `wo`.`woVersion` AS `woVersion`,  \n" +
                "                `wo`.`partID` AS `partID`,  \n" +
                "                `wo`.`buildQty` AS `buildQty`,  \n" +
                "                `wo`.`customerID` AS `customerID`,  \n" +
                "                `wo`.`excessQty` AS `excessQty`,  \n" +
                "                0 AS `assignSoWoQty`,  \n" +
                "                0 AS `initialStockPoQty`,  \n" +
                "                0 AS `ScrapQty`,  \n" +
                "                0 AS `ShippedQty`,  \n" +
                "                0 AS `readytoShipQty`,  \n" +
                "                0 AS `stockAdjustmentQty`,  \n" +
                "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        FROM  \n" +
                "            `workorder` `wo`  \n" +
                "        WHERE  \n" +
                "            (`wo`.`isDeleted` = 0) UNION ALL SELECT   \n" +
                "            `wsd`.`woID` AS `woid`,  \n" +
                "                FUN_GETWORKORDERNUMBERBYID(`wsd`.`woID`) AS `woNumber`,  \n" +
                "                NULL AS `woVersion`,  \n" +
                "                NULL AS `partID`,  \n" +
                "                0 AS `buildQty`,  \n" +
                "                NULL AS `customerID`,  \n" +
                "                0 AS `excessQty`,  \n" +
                "                SUM(`wsd`.`poQty`) AS `assignSoWoQty`,  \n" +
                "                0 AS `initialStockPoQty`,  \n" +
                "                0 AS `ScrapQty`,  \n" +
                "                0 AS `ShippedQty`,  \n" +
                "                0 AS `readytoShipQty`,  \n" +
                "                0 AS `stockAdjustmentQty`,  \n" +
                "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `wsd`  \n" +
                "        WHERE  \n" +
                "            (`wsd`.`isDeleted` = 0)  \n" +
                "        GROUP BY `wsd`.`woID` UNION ALL SELECT   \n" +
                "            `wt`.`woID` AS `woid`,  \n" +
                "                FUN_GETWORKORDERNUMBERBYID(`wt`.`woID`) AS `woNumber`,  \n" +
                "                NULL AS `woVersion`,  \n" +
                "                NULL AS `partID`,  \n" +
                "                0 AS `buildQty`,  \n" +
                "                NULL AS `customerID`,  \n" +
                "                0 AS `excessQty`,  \n" +
                "                0 AS `assignSoWoQty`,  \n" +
                "                0 AS `initialStockPoQty`,  \n" +
                "                SUM(`wp`.`scrapQty`) AS `ScrapQty`,  \n" +
                "                0 AS `ShippedQty`,  \n" +
                "                0 AS `readytoShipQty`,  \n" +
                "                0 AS `stockAdjustmentQty`,  \n" +
                "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        FROM  \n" +
                "            (`workorder_trans` `wt`  \n" +
                "        JOIN `workorder_trans_production` `wp` ON ((`wt`.`woTransID` = `wp`.`woTransID`)))  \n" +
                "        WHERE  \n" +
                "            ((`wt`.`isDeleted` = 0)  \n" +
                "                AND (`wp`.`isDeleted` = 0))  \n" +
                "        GROUP BY `wt`.`woID` UNION ALL SELECT   \n" +
                "            `sh`.`workorderID` AS `woid`,  \n" +
                "                `sh`.`woNumber` AS `woNumber`,  \n" +
                "                NULL AS `woVersion`,  \n" +
                "                `sh`.`partID` AS `partID`,  \n" +
                "                0 AS `buildQty`,  \n" +
                "                NULL AS `customerID`,  \n" +
                "                0 AS `excessQty`,  \n" +
                "                0 AS `assignSoWoQty`,  \n" +
                "                0 AS `initialStockPoQty`,  \n" +
                "                0 AS `ScrapQty`,  \n" +
                "                SUM(`sh`.`shippedqty`) AS `ShippedQty`,  \n" +
                "                0 AS `readytoShipQty`,  \n" +
                "                0 AS `stockAdjustmentQty`,  \n" +
                "                0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        FROM  \n" +
                "            `shippedassembly` `sh`  \n" +
                "        WHERE  \n" +
                "            ((`sh`.`isDeleted` = 0)  \n" +
                "                AND (`sh`.`isDeleted` = 0))  \n" +
                "        GROUP BY `sh`.`woNumber` UNION ALL SELECT   \n" +
                "            `astock`.`woID` AS `woid`,  \n" +
                "                `astock`.`woNumber` AS `woNumber`,  \n" +
                "                NULL AS `woVersion`,  \n" +
                "                `astock`.`partID` AS `partID`,  \n" +
                "                0 AS `buildQty`,  \n" +
                "                NULL AS `customerID`,  \n" +
                "                0 AS `excessQty`,  \n" +
                "                0 AS `assignSoWoQty`,  \n" +
                "                SUM(`astock`.`poQty`) AS `initialStockPoQty`,  \n" +
                "                0 AS `ScrapQty`,  \n" +
                "                0 AS `ShippedQty`,  \n" +
                "                (IFNULL(SUM(`astock`.`openingStock`), 0) - (SELECT   \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND (`shippedassembly`.`partID` = `astock`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`woNumber` = `astock`.`woNumber`)))) AS `readytoShipQty`,  \n" +
                "                0 AS `stockAdjustmentQty`,  \n" +
                "                IFNULL(SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        FROM  \n" +
                "            `assemblystock` `astock`  \n" +
                "        WHERE  \n" +
                "            ((IFNULL(`astock`.`isDeleted`, 0) = 0)  \n" +
                "                AND (`astock`.`type` <> 'AS'))  \n" +
                "        GROUP BY `astock`.`woNumber` UNION ALL SELECT   \n" +
                "            `astock`.`woID` AS `woid`,  \n" +
                "                `astock`.`woNumber` AS `woNumber`,  \n" +
                "                NULL AS `woVersion`,  \n" +
                "                `astock`.`partID` AS `partID`,  \n" +
                "                0 AS `buildQty`,  \n" +
                "                NULL AS `customerID`,  \n" +
                "                0 AS `excessQty`,  \n" +
                "                0 AS `assignSoWoQty`,  \n" +
                "                0 AS `initialStockPoQty`,  \n" +
                "                0 AS `ScrapQty`,  \n" +
                "                0 AS `ShippedQty`,  \n" +
                "                0 AS `readytoShipQty`,  \n" +
                "                IFNULL(SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQty`,  \n" +
                "                IFNULL(SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        FROM  \n" +
                "            `assemblystock` `astock`  \n" +
                "        WHERE  \n" +
                "            ((IFNULL(`astock`.`isDeleted`, 0) = 0)  \n" +
                "                AND (`astock`.`type` = 'AS'))  \n" +
                "        GROUP BY `astock`.`woNumber`) `a`  \n" +
                "    GROUP BY `a`.`woNumber`  ;\n" +
            
                /* **************************** Add Script Version -> 30-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1084,'1.00','V1',' User Story 34837: Initial Stock and View Assembly Stock Changes Suggested by Client - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1084:
                allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyWOStockDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(      \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "	IN pPartID INT,    \n" +
                "	IN pWoID INT ,  \n" +
                "    IN pPONumber VARCHAR(255),  \n" +
                "    IN pIsShowAllWO tinyint)  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "	DECLARE whereClause1 VARCHAR(500);    \n" +
                "	SET whereClause1 = \"where 1=1\";    \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN    \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);    \n" +
                "	END IF;   \n" +
                "  \n" +
                "    IF pWoID IS NOT NULL THEN    \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);    \n" +
                "	END IF;   \n" +
                "  \n" +
                "    IF (pPONumber IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPONumber,'\",replace(c.poNumber,'\"', ',','\"'))');    \n" +
                "	end if;   \n" +
                "  \n" +
                "     IF (!pIsShowAllWO)  THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,    \n" +
                "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,    \n" +
                "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,    \n" +
                "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,    \n" +
                "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,    \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN    \n" +
                "							(SELECT GROUP_CONCAT(DISTINCT poNumber SEPARATOR ', ') FROM `assemblystock`  WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')    \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)    \n" +
                "						   END) poNumber,    \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN   \n" +
                "							(SELECT GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ') FROM `assemblystock` WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
                "                            END) soNumbers,   \n" +
                "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,    \n" +
                "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,    \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
                "					FROM vu_workorder_summary_stk vu_wss    \n" +
                "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo    \n" +
                "								ON vu_wss.woid = wo.woMstID    \n" +
                "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID    \n" +
                "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID    \n" +
                "					\", whereClause1);    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "	-- select @SQLStatement1;      \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	-- select @SQLStatement2;      \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;   \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-07-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyPOStockDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(      \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "	IN pPartID INT ,  \n" +
                "    IN pIsShowAllPO tinyint)  \n" +
                "BEGIN     \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);    \n" +
                "    DECLARE whereClause1 VARCHAR(500);    \n" +
                "	SET whereClause1 = \"where 1=1\";    \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN    \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");    \n" +
                "	END IF;   \n" +
                "  \n" +
                "    IF !pIsShowAllPO THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");    \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");    \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"    \n" +
                "	select a.salesOrderDetailId,    \n" +
                "		a.soID,  \n" +
                "		a.poNumber,    \n" +
                "		a.poDate,    \n" +
                "		a.soNumber,    \n" +
                "		a.PartID,   \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,    \n" +
                "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,    \n" +
                "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN    \n" +
                "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))    \n" +
                "			ELSE 0 END) AS excessShipQty,    \n" +
                "		a.buildQty from (SELECT    \n" +
                "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,    \n" +
                "				vu_ssr.`Sales Order ID` soID,   \n" +
                "				vu_ssr.`Po Number` poNumber,    \n" +
                "				vu_ssr.`Po Date` poDate,    \n" +
                "				vu_ssr.`Sales Order` soNumber,    \n" +
                "				vu_ssr.`PO Qty` poQty,    \n" +
                "				vu_ssr.`Shipped Qty` shippedQty,    \n" +
                "				vu_ssr.`Balanced Due Qty` backOrderQty,    \n" +
                "				vu_ssr.`PartID` PartID,    \n" +
                "				ka.perAssyBuildQty AS    qpa,    \n" +
                "                vu_ssr.`Status` status,  \n" +
                "				vu_ssr.`lineID` lineID,  \n" +
                "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
                "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0) FROM workorder_salesorder_details wsd    \n" +
                "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0    \n" +
                "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty    \n" +
                "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`    \n" +
                "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0 ) a \", whereClause1);    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "	-- select @SQLStatement1;      \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	-- select @SQLStatement2;      \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-07-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1085,'1.00','V1',' User Story 34837: SP Changes - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1085:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-07-2021  *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
            "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN                         \n" +
            "	DECLARE v_PackingSlipReceiptType VARCHAR(5);                     \n" +
            "	DECLARE v_CreditMemoType VARCHAR(5);                     \n" +
            "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);                     \n" +
            "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);                     \n" +
            "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);                     \n" +
            "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);                \n" +
            "	DECLARE PORLINE_OTY INT;                    \n" +
            "	DECLARE vTotalQty INT;               \n" +
            "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;                      \n" +
            "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;           \n" +
            "  \n" +
            "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN                        \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';                      \n" +
            "	ELSE                         \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;                   \n" +
            "	END IF;                \n" +
            "  \n" +
            "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),                      \n" +
            "		(                     \n" +
            "			CASE                     \n" +
            "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'                     \n" +
            "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'                     \n" +
            "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'                     \n" +
            "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'                     \n" +
            "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'                     \n" +
            "				ELSE NULL                     \n" +
            "			END                     \n" +
            "		),                     \n" +
            "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),                      \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN                      \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                     \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),                     \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                     \n" +
            "		END IF;                     \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN                       \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                     \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),                     \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                     \n" +
            "		END IF;                     \n" +
            "  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN                           \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                     \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),                      \n" +
            "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),                     \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                        \n" +
            "		END IF;                            \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),                      \n" +
            "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN                         \n" +
            "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN                     \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),                     \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "		END IF;                     \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN                       \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                     \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),                     \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "		END IF;                     \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',                     \n" +
            "		CAST(                     \n" +
            "			(                     \n" +
            "				CASE                      \n" +
            "					WHEN old.`status` = 'P' THEN 'Pending'                     \n" +
            "					WHEN old.`status` = 'A' THEN 'Approved'                     \n" +
            "					WHEN old.`status` = 'D' THEN 'Disapproved'                      \n" +
            "				END                     \n" +
            "			)                     \n" +
            "		AS CHAR),                     \n" +
            "		CAST(                     \n" +
            "			(                     \n" +
            "				CASE                      \n" +
            "					WHEN new.`status` = 'P' THEN 'Pending'                     \n" +
            "					WHEN new.`status` = 'A' THEN 'Approved'                     \n" +
            "					WHEN new.`status` = 'D' THEN 'Disapproved'                      \n" +
            "				END                     \n" +
            "			)                     \n" +
            "		AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN                          \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                     \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),                      \n" +
            "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
            "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "		END IF;                     \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',                  \n" +
            "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
            "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),                 \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',                     \n" +
            "		CAST(                     \n" +
            "			(                     \n" +
            "				CASE                      \n" +
            "					WHEN old.receivedStatus = 'P' THEN 'Pending'                     \n" +
            "					WHEN old.receivedStatus = 'A' THEN 'Accepted'                     \n" +
            "					WHEN old.receivedStatus = 'R' THEN 'Rejected'                      \n" +
            "				END                     \n" +
            "			)                     \n" +
            "		AS CHAR),                     \n" +
            "		CAST(                     \n" +
            "			(                     \n" +
            "				CASE                      \n" +
            "					WHEN new.receivedStatus = 'P' THEN 'Pending'                     \n" +
            "					WHEN new.receivedStatus = 'A' THEN 'Accepted'                     \n" +
            "					WHEN new.receivedStatus = 'R' THEN 'Rejected'                      \n" +
            "				END                     \n" +
            "			)                     \n" +
            "		AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF v_PackingSlipReceiptType = 'R' THEN                     \n" +
            "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN                     \n" +
            "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;                     \n" +
            "		ELSE                     \n" +
            "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;                     \n" +
            "		END IF;                     \n" +
            "  \n" +
            "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN                     \n" +
            "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;                     \n" +
            "		ELSE                     \n" +
            "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;                     \n" +
            "		END IF;                     \n" +
            "  \n" +
            "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN                     \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;                     \n" +
            "		ELSE                     \n" +
            "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;                     \n" +
            "		END IF;                     \n" +
            "  \n" +
            "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN                     \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;                     \n" +
            "		ELSE                     \n" +
            "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;                     \n" +
            "		END IF;                     \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN                               \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),                     \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "		END IF;                     \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN                               \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),                     \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "		END IF;                     \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN                               \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                                 \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,                      \n" +
            "		CONCAT(                     \n" +
            "			(                     \n" +
            "				CASE                     \n" +
            "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '                     \n" +
            "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '                     \n" +
            "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '                     \n" +
            "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '                     \n" +
            "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '                     \n" +
            "					ELSE 'Line# '                     \n" +
            "				END                     \n" +
            "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'                     \n" +
            "		),                     \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                               \n" +
            "	END IF;                     \n" +
            "  \n" +
            "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN                             \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),                   \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
            "	END IF;                 \n" +
            "  \n" +
            "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN                             \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),                   \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
            "	END IF;                 \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version ->  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (1086,'1.00','V1','Bug 35835: [Main Branch] When user do make any changes in RMA Credit memo then the status of CM in RMA Packing slip shows as Draft. - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1086:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                "CREATE TRIGGER `Trg_BI_component_sid_stock` BEFORE INSERT ON `component_sid_stock` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWarehouseID INT;  \n" +
                "    DECLARE vParentWHID INT;  \n" +
                "  \n" +
                "    SELECT 	b.warehouseID, 	w.parentWHID  \n" +
                "		INTO vWarehouseID,	vParentWHID  \n" +
                "    FROM binmst b  \n" +
                "    JOIN warehousemst w ON b.warehouseID = w.id AND w.isDeleted = 0  \n" +
                "    AND b.id = NEW.fromBin;  \n" +
                "  \n" +
                "	IF (NEW.fromWarehouse IS NULL OR NEW.fromDepartment IS NULL) THEN  \n" +
                "		SET NEW.fromWarehouse = vWarehouseID ,  \n" +
                "			NEW.fromDepartment = vParentWHID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1087,'1.00','V1','Bug 36111: [Main Branch] From Warehouse is showing NULL data in UMID - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1087:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                "CREATE TRIGGER `Trg_BI_component_sid_stock` BEFORE INSERT ON `component_sid_stock` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWarehouseID INT;  \n" +
                "   DECLARE vParentWHID INT;  \n" +
                "  \n" +
                "	IF (NEW.fromWarehouse IS NULL OR NEW.fromDepartment IS NULL) THEN  \n" +
                "    SELECT 	b.warehouseID, 	w.parentWHID  \n" +
                "		INTO vWarehouseID,	vParentWHID  \n" +
                "    FROM binmst b  \n" +
                "    JOIN warehousemst w ON b.warehouseID = w.id AND w.isDeleted = 0  \n" +
                "    AND b.id = NEW.fromBin;  \n" +
                "  \n" +
                "		SET NEW.fromWarehouse = vWarehouseID ,  \n" +
                "			NEW.fromDepartment = vParentWHID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1088,'1.00','V1','Review changes given by DV for Bug #36111 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1088:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL)THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL )THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY BinID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL)THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL)THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN LIKE \"%', pScanMPNPID ,'%\" OR pidCode LIKE \"%', pScanMPNPID ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( mfgPN = \"', pScanMPNPID ,'\" OR pidCode = \"', pScanMPNPID ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                supplierCodeName,					packagingType,  		packingSlipDate,   		packingSlipNumber,  supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						fun_getPackagingNameByID(vucp.packagingID) packagingType,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        fun_getMfgCodeAndNameByPartID(vucp.PartId) mfgName,  \n" +
                "                        fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierCodeName,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1089,'1.00','V1','Bug 36111: [Main Branch] From Warehouse is showing NULL data in UMID - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1089:
  allDbChangesArray.push(
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetSoRequestedPromisedDatefromDockDate` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetSoRequestedPromisedDatefromDockDate`(  \n" +
      "	IN pdockDate DATE  \n" +
      "  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "		DECLARE vUnitOfTime VARCHAR(5);  \n" +
      "		DECLARE vPromisedShipDateDays INT;  \n" +
      "		DECLARE vPromisedShipDate DATE;  \n" +
      "  \n" +
      "		SELECT unitOfTime INTO vUnitOfTime  FROM company_info WHERE isdeleted=0;  \n" +
      "  \n" +
      "		SELECT `values` INTO vPromisedShipDateDays FROM systemconfigrations WHERE `key`='DefaultSOPromisedShipDateDays' AND isactive=1;  \n" +
      "  \n" +
      "		SET vPromisedShipDateDays=IFNULL(vPromisedShipDateDays,7);  \n" +
      "  \n" +
      "		IF(vUnitOfTime='D' OR vUnitOfTime IS NULL)THEN  \n" +
      "			SELECT DATE_SUB(pdockDate, INTERVAL vPromisedShipDateDays DAY) INTO vPromisedShipDate;  \n" +
      "  \n" +
      "		ELSE  \n" +
      "			SET vPromisedShipDate=pdockDate;  \n" +
      "				WHILE(vPromisedShipDateDays>0) DO  \n" +
      "					IF (WEEKDAY(vPromisedShipDate) < 4 OR WEEKDAY(vPromisedShipDate)=6) THEN  \n" +
      "						SELECT  DATE_SUB(vPromisedShipDate, INTERVAL 1 DAY) INTO vPromisedShipDate;  \n" +
      "						SET vPromisedShipDateDays=vPromisedShipDateDays-1;  \n" +
      "					ELSE  \n" +
      "						SELECT  DATE_SUB(vPromisedShipDate, INTERVAL 1 DAY) INTO vPromisedShipDate;  \n" +
      "					END IF;  \n" +
      "  \n" +
      "				END WHILE;  \n" +
      "  \n" +
      "		END IF;  \n" +
      "  \n" +
      "		SELECT vPromisedShipDate;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version ->  *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (1090,'1.00','V1',' Alter Procedure Sproc_GetSoRequestedPromisedDatefromDockDate-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
  );
break;
        case 1090:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-08-2021  *********************************** */
                "ALTER TABLE salesordermst ADD COLUMN isRmaPO TINYINT DEFAULT 0;  \n" +
                "ALTER TABLE salesorderdet ADD COLUMN originalPOQty INT;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN originalPODate DATE;  \n" +

                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1091,'1.00','V1',' Alter salesordermst table - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
case 1091:
  allDbChangesArray.push(
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesordermst` ;  \n" +
      "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst`  \n" +
      "    FOR EACH ROW BEGIN  \n" +
      "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) THEN  \n" +
      "       UPDATE customer_packingslip SET soNumber=NEW.salesOrderNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
      "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SALESORDERNUMBER',CAST(OLD.salesOrderNumber AS CHAR),  \n" +
      "       CAST(new.salesOrderNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
      "    UPDATE customer_packingslip SET poNumber=NEW.poNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR),  \n" +
      "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
      "    UPDATE customer_packingslip SET poDate=NEW.poDate,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR),  \n" +
      "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CUSTOMERID', CAST(OLD.customerID AS CHAR),  \n" +
      "       CAST(new.customerID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CONTACTPERSONID', CAST(OLD.contactPersonID AS CHAR),  \n" +
      "       CAST(new.contactPersonID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BILLINGADDRESSID', CAST(OLD.billingAddressID AS CHAR),  \n" +
      "       CAST(new.billingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESSID', CAST(OLD.shippingAddressID AS CHAR),  \n" +
      "       CAST(new.shippingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHODID', CAST(OLD.shippingMethodID AS CHAR),  \n" +
      "       CAST(new.shippingMethodID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISION', CAST(OLD.revision AS CHAR),  \n" +
      "       CAST(new.revision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCOMMENT', CAST(OLD.shippingComment AS CHAR),  \n" +
      "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "     IF IFNULL(OLD.internalComment ,0) != IFNULL(NEW.internalComment ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'INTERNALCOMMENT', CAST(OLD.internalComment AS CHAR),  \n" +
      "       CAST(new.internalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'TERMSID', CAST(OLD.termsID AS CHAR),  \n" +
      "       CAST(new.termsID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'STATUS', CAST(OLD.status AS CHAR),  \n" +
      "       CAST(new.status AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SODATE', CAST(OLD.soDate AS CHAR),  \n" +
      "       CAST(new.soDate AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISIONCHANGENOTE', CAST(OLD.revisionChangeNote AS CHAR),  \n" +
      "       CAST(new.revisionChangeNote AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CASE WHEN old.isBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
      "      CASE WHEN new.isBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR),  \n" +
      "      CAST(NEW.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'', CAST(OLD.isDeleted AS CHAR),  \n" +
      "       CAST(new.isDeleted AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.isRmaPO ,0) != IFNULL(NEW.isRmaPO ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMAPO', CASE WHEN old.isRmaPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
      "       CASE WHEN new.isRmaPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.isLegacyPO ,0) != IFNULL(NEW.isLegacyPO ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LEGACYPO', CASE WHEN old.isLegacyPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
      "       CASE WHEN new.isLegacyPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    IF IFNULL(OLD.originalPODate ,0) != IFNULL(NEW.originalPODate ,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPODATE', CAST(DATE_FORMAT(OLD.originalPODate, \"%m/%d/%Y\") AS CHAR),  \n" +
      "       CAST(DATE_FORMAT(new.originalPODate, \"%m/%d/%Y\") AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "    END IF;  \n" +
      "    END;  \n" +
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesorderdet` ;  \n" +
      "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet`  \n" +
      "    FOR EACH ROW BEGIN  \n" +
      "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN  \n" +
      "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),  \n" +
      "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
      "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(CAST(OLD.price AS DECIMAL(15,5)) AS CHAR),  \n" +
      "      CAST(CAST(new.price AS DECIMAL(15,5)) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),  \n" +
      "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),  \n" +
      "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),  \n" +
      "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.internalComment AS CHAR),  \n" +
      "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),  \n" +
      "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),  \n" +
      "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),  \n" +
      "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),  \n" +
      "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
      "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),  \n" +
      "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
      "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),  \n" +
      "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN  \n" +
      "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),  \n" +
      "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(old.custPOLineNumber,\"\")!=IFNULL(NEW.custPOLineNumber,\"\")THEN  \n" +
      "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',OLD.custPOLineNumber,  \n" +
      "       new.custPOLineNumber,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "  \n" +
      "       END IF;  \n" +
      "       IF IFNULL(old.salesOrderDetStatus,0)!=IFNULL(NEW.salesOrderDetStatus,0)THEN  \n" +
      "		   INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "		   VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'Status',CASE  WHEN OLD.salesOrderDetStatus=1 THEN 'InProgress' WHEN OLD.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END ,  \n" +
      "		   CASE WHEN NEW.salesOrderDetStatus=1 THEN 'InProgress' WHEN NEW.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "       END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.isSkipKitCreation,0) != IFNULL(NEW.isSkipKitCreation,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISKIPKITCREATION',CASE WHEN OLD.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,  \n" +
      "       CASE WHEN new.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
      "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTENUMBER',CAST(OLD.quoteNumber AS CHAR),  \n" +
      "       CAST(new.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF IFNULL(OLD.frequency,0) != IFNULL(NEW.frequency,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'FREQUENCY',CAST(CASE WHEN OLD.frequency=1 THEN 'Every' WHEN OLD.frequency=2 THEN 'First' WHEN OLD.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),  \n" +
      "       CAST(CASE WHEN new.frequency=1 THEN 'Every' WHEN new.frequency=2 THEN 'First' WHEN new.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF IFNULL(OLD.originalPOQty,0) != IFNULL(NEW.originalPOQty,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ORGPOQTY',CAST(OLD.originalPOQty  AS CHAR),  \n" +
      "       CAST(NEW.originalPOQty  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
      "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
      "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTEFROM',  \n" +
      "       CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ'  \n" +
      "			WHEN OLD.quoteFrom = 2 THEN 'From Part Master'  \n" +
      "            WHEN OLD.quoteFrom = 3 THEN 'N/A'  \n" +
      "            ELSE '' END,  \n" +
      "		CASE WHEN new.quoteFrom = 1 THEN 'From RFQ'  \n" +
      "			WHEN new.quoteFrom = 2 THEN 'From Part Master'  \n" +
      "            WHEN new.quoteFrom = 3 THEN 'N/A'  \n" +
      "            ELSE '' END,  \n" +
      "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "END;  \n" +
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
      "	IN ppageIndex INT(11),  \n" +
      "	IN precordPerPage INT(11),  \n" +
      "	IN pOrderBy VARCHAR(255),  \n" +
      "	IN pWhereClause VARCHAR(16383),  \n" +
      "	IN pfilterStatus VARCHAR(100),  \n" +
      "	IN pcustomerIds VARCHAR(16000),  \n" +
      "	IN pshippingMethodId VARCHAR(16000),  \n" +
      "	IN ptermsIds VARCHAR(16000),  \n" +
      "	IN psearchposotext VARCHAR(1000),  \n" +
      "	IN psearchposotype VARCHAR(10),  \n" +
      "	IN pfromDate DATE,  \n" +
      "	IN ptoDate DATE,  \n" +
      "	IN psearchextPricetext VARCHAR(1000),  \n" +
      "	IN psearchextPricetype VARCHAR(10)  \n" +
      "	)  \n" +
      "BEGIN  \n" +
      "  \n" +
      "		DECLARE pOffset INT(11);  \n" +
      "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
      "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
      "		DECLARE v_TimeZone VARCHAR(50);  \n" +
      "  \n" +
      "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
      "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
      "  \n" +
      "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
      "       s.salesOrderNumber,  \n" +
      "       s.poNumber,  \n" +
      "       s.poDate,  \n" +
      "       s.customerID,  \n" +
      "       s.contactPersonID,  \n" +
      "       s.billingAddressID,  \n" +
      "       s.shippingAddressID,  \n" +
      "       s.shippingMethodID,  \n" +
      "       s.revision,  \n" +
      "       s.shippingComment,  \n" +
      "       s.termsID,  \n" +
      "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
      "       s.status,  \n" +
      "       s.soDate,  \n" +
      "       s.revisionChangeNote,  \n" +
      "       s.salesCommissionTo,  \n" +
      "       s.intermediateShipmentId,  \n" +
      "       s.freeOnBoardId,  \n" +
      "       s.internalComment as internalCommentSo,  \n" +
      "       s.serialNumber,  \n" +
      "       s.carrierID,  \n" +
      "       s.carrierAccountNumber,  \n" +
      "       s.originalPODate,  \n" +
      "       s.isLegacyPO,  \n" +
      "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
      "       s.isRmaPO,  \n" +
      "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
      "       s.poRevision,  \n" +
      "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
      "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
      "       mg.mfgName,  \n" +
      "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
      "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
      "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
      "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
      "       fb.name freeOnBoardName,  \n" +
      "       fun_getTotalSOLines(s.id) AS totalSOLines,  \n" +
      "       fun_getTotalCompletedSOLines(s.id) AS totalCompletedSOLines,  \n" +
      "       fun_getSOCompletedPercentage(s.id) AS soCompletionPercentage,  \n" +
      "      fun_getSOCompletedSummaryStatus(s.id) AS salesOrderDetStatusConvertedValues,  \n" +
      "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
      "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
      "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
      "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
      "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
      "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
      "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
      "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
      "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
      "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
      "			WHERE s.isdeleted=0  \n" +
      "			\");  \n" +
      "  \n" +
      "  \n" +
      "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
      "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
      "		ELSE  \n" +
      "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
      "		END IF;  \n" +
      "  \n" +
      "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
      "			SET pWhereClause = '1=1' ;  \n" +
      "		END IF;  \n" +
      "  \n" +
      "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
      "  \n" +
      "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
      "	        END IF;  \n" +
      "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
      "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
      "		END IF;  \n" +
      "  \n" +
      "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
      "			SET pWhereClause = '1=1' ;  \n" +
      "		END IF;  \n" +
      "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
      "		END IF;  \n" +
      "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
      "		END IF;  \n" +
      "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
      "			IF(psearchposotype='C')THEN  \n" +
      "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
      "			ELSE  \n" +
      "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
      "			END IF;  \n" +
      "		END IF;  \n" +
      "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
      "			IF(psearchextPricetype='C')THEN  \n" +
      "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
      "			ELSE  \n" +
      "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
      "			END IF;  \n" +
      "		END IF;  \n" +
      "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
      "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
      "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
      "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
      "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
      "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
      "		END IF;  \n" +
      "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
      "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
      "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
      "		ELSE  \n" +
      "			SET rowNumWhere = '';  \n" +
      "		END IF;  \n" +
      "  \n" +
      "		/* to get total count of rows */  \n" +
      "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
      "  \n" +
      "			PREPARE query2 FROM @SQLStatement2;  \n" +
      "  \n" +
      "			 EXECUTE query2;  \n" +
      "			 DEALLOCATE PREPARE query2;  \n" +
      "  \n" +
      "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
      "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
      "  \n" +
      "			PREPARE query1 FROM @SQLStatement1;  \n" +
      "  \n" +
      "			 EXECUTE query1;  \n" +
      "		       DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "END;  \n" +
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
      "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
      "    SELECT  \n" +
      "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
      "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
      "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
      "        `a`.`poNumber` AS `Po Number`,  \n" +
      "        `a`.`poDate` AS `Po Date`,  \n" +
      "        `a`.`customerID` AS `Customer ID`,  \n" +
      "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
      "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
      "        `a`.`status` AS `Sales Order Status`,  \n" +
      "        `a`.`revision` AS `Revision`,  \n" +
      "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
      "        `a`.`termsID` AS `Terms ID`,  \n" +
      "        `a`.`soDate` AS `So Date`,  \n" +
      "        `a`.`partID` AS `PartID`,  \n" +
      "        `a`.`PIDCode` AS `Assy ID`,  \n" +
      "        `a`.`mfgPN` AS `Assy Name`,  \n" +
      "        `a`.`rev` AS `Assy Revision`,  \n" +
      "        `a`.`nickName` AS `NickName`,  \n" +
      "        `a`.`liveVersion` AS `liveVersion`,  \n" +
      "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
      "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
      "        `a`.`qty` AS `PO Qty`,  \n" +
      "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
      "        `a`.`shippingQty` AS `shippingQty`,  \n" +
      "        `a`.`companyName` AS `Company Name`,  \n" +
      "        `a`.`internalPO` AS `internalPO`,  \n" +
      "        `a`.`mfgCode` AS `mfgCode`,  \n" +
      "        `a`.`fullName` AS `Full Name`,  \n" +
      "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
      "        `a`.`isCancle` AS `isCancle`,  \n" +
      "        `a`.`cancleReason` AS `cancleReason`,  \n" +
      "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
      "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
      "        `a`.`shippingDate` AS `shippingDate`,  \n" +
      "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
      "        `a`.`remark` AS `remark`,  \n" +
      "        `a`.`price` AS `price`,  \n" +
      "        `a`.`mrpQty` AS `mrpQty`,  \n" +
      "        `a`.`kitQty` AS `kitQty`,  \n" +
      "        `a`.`isHotJob` AS `isHotJob`,  \n" +
      "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
      "        `a`.`RoHSName` AS `RoHSName`,  \n" +
      "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
      "        `a`.`lineID` AS `lineID`,  \n" +
      "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
      "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
      "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
      "        (CASE  \n" +
      "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
      "            WHEN  \n" +
      "                ((`a`.`salesOrderDetStatus` = 1)  \n" +
      "                    OR (`a`.`salesOrderDetailId` IS NULL))  \n" +
      "            THEN  \n" +
      "                'In Progress'  \n" +
      "            ELSE 'Completed'  \n" +
      "        END) AS `Status`,  \n" +
      "        `a`.`modifyDate` AS `modifyDate`,  \n" +
      "        `a`.`createdDate` AS `createdDate`,  \n" +
      "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
      "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
      "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
      "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
      "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
      "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
      "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
      "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
      "        `a`.`kitnumber` AS `kitnumber`,  \n" +
      "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
      "        `a`.`partDescription` AS `partDescription`,  \n" +
      "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
      "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
      "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
      "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
      "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
      "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
      "        `a`.`internalComment` AS `internalComment`,  \n" +
      "        `a`.`partCategory` AS `partCategory`,  \n" +
      "        `a`.`serialNumber` AS `serialNumber`,  \n" +
      "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
      "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
      "        `a`.`poRevision` AS `poRevision`,  \n" +
      "        `a`.`partType` AS `partType`,  \n" +
      "        (CASE  \n" +
      "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
      "            ELSE `a`.`salesOrderDetStatus`  \n" +
      "        END) AS `salesOrderDetStatus`,  \n" +
      "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
      "        `a`.`frequency` AS `frequency`,  \n" +
      "        `a`.`refSODetID` AS `refSODetID`,  \n" +
      "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
      "        `a`.`originalPODate` AS `originalPODate`,  \n" +
      "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
      "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
      "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
      "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
      "        `a`.`originalPOQty` AS `originalPOQty`  \n" +
      "    FROM  \n" +
      "        (SELECT  \n" +
      "            `sm`.`id` AS `salesOrderId`,  \n" +
      "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
      "                `sm`.`poNumber` AS `poNumber`,  \n" +
      "                `sm`.`poDate` AS `poDate`,  \n" +
      "                `sm`.`customerID` AS `customerID`,  \n" +
      "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
      "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
      "                `sm`.`status` AS `status`,  \n" +
      "                `sm`.`revision` AS `revision`,  \n" +
      "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
      "                `sm`.`termsID` AS `termsID`,  \n" +
      "                `sm`.`soDate` AS `soDate`,  \n" +
      "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
      "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
      "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
      "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
      "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
      "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
      "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
      "                    ELSE 'No'  \n" +
      "                END) AS `blanketPOText`,  \n" +
      "                `sm`.`poRevision` AS `poRevision`,  \n" +
      "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
      "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
      "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
      "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
      "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
      "                `co`.`PIDCode` AS `PIDCode`,  \n" +
      "                `co`.`mfgPN` AS `mfgPN`,  \n" +
      "                `co`.`rev` AS `rev`,  \n" +
      "                `co`.`nickName` AS `nickName`,  \n" +
      "                `co`.`liveVersion` AS `liveVersion`,  \n" +
      "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
      "                `co`.`isCustom` AS `isCustomPart`,  \n" +
      "                `co`.`partType` AS `partType`,  \n" +
      "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
      "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
      "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
      "                `cu`.`isCompany` AS `internalPO`,  \n" +
      "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
      "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
      "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
      "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
      "                `roh`.`name` AS `RoHSName`,  \n" +
      "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
      "                `a`.`qty` AS `qty`,  \n" +
      "                `a`.`id` AS `salesOrderDetailId`,  \n" +
      "                `a`.`kitNumber` AS `kitnumber`,  \n" +
      "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
      "                `a`.`partDescription` AS `partDescription`,  \n" +
      "                `a`.`partID` AS `partID`,  \n" +
      "                `a`.`isCancle` AS `isCancle`,  \n" +
      "                `a`.`isHotJob` AS `isHotJob`,  \n" +
      "                `a`.`cancleReason` AS `cancleReason`,  \n" +
      "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
      "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
      "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
      "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
      "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
      "                `a`.`remark` AS `remark`,  \n" +
      "                `a`.`price` AS `price`,  \n" +
      "                `a`.`mrpQty` AS `mrpQty`,  \n" +
      "                `a`.`kitQty` AS `kitQty`,  \n" +
      "                `a`.`shippingQty` AS `shippingQty`,  \n" +
      "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
      "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
      "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
      "                `a`.`internalComment` AS `internalComment`,  \n" +
      "                `a`.`partCategory` AS `partCategory`,  \n" +
      "                `a`.`lineID` AS `lineID`,  \n" +
      "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
      "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
      "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
      "                    ELSE 'NO'  \n" +
      "                END) AS `rmaPOText`,  \n" +
      "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
      "                    ELSE 'NO'  \n" +
      "                END) AS `legacyPOText`,  \n" +
      "                (CASE  \n" +
      "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
      "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
      "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
      "                    ELSE ''  \n" +
      "                END) AS `frequency`,  \n" +
      "                `a`.`refSODetID` AS `refSODetID`,  \n" +
      "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
      "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
      "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
      "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
      "        FROM  \n" +
      "            (((((((((((`salesordermst` `sm`  \n" +
      "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
      "            AND (`a`.`isDeleted` = 0)  \n" +
      "            AND (`sm`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
      "            AND (`cu`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
      "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
      "            AND (`mg`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
      "            AND (`roh`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
      "            AND (`cc`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
      "            AND (`gc`.`isDeleted` = 0))))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
      "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
      "        FROM  \n" +
      "            (`customer_packingslip_det` `cpd`  \n" +
      "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
      "        WHERE  \n" +
      "            ((`cps`.`transType` = 'P')  \n" +
      "                AND (`cpd`.`isDeleted` = 0))  \n" +
      "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
      "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
      "        FROM  \n" +
      "            `workorder_salesorder_details` `x`  \n" +
      "        WHERE  \n" +
      "            (`x`.`isDeleted` = 0)  \n" +
      "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `ssm`.`sDetID` AS `sDetID`,  \n" +
      "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
      "        FROM  \n" +
      "            `salesshippingmst` `ssm`  \n" +
      "        WHERE  \n" +
      "            (`ssm`.`isDeleted` = 0)  \n" +
      "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
      "        LEFT JOIN (SELECT  \n" +
      "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
      "                `s`.`refAssyId` AS `refAssyId`,  \n" +
      "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
      "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
      "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
      "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
      "        FROM  \n" +
      "            (`salesorder_plan_detailsmst` `s`  \n" +
      "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
      "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
      "        WHERE  \n" +
      "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
      "	IN ppageIndex INT,  \n" +
      "	IN precordPerPage INT,  \n" +
      "	IN pOrderBy VARCHAR(255),  \n" +
      "	IN pWhereClause VARCHAR(16383),  \n" +
      "	IN pIsKitList TINYINT,  \n" +
      "	IN pPlannedStatus VARCHAR(10),  \n" +
      "	IN pSalesOrderDetailId INT,  \n" +
      "	IN pIsPendingWOCreationList TINYINT,  \n" +
      "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
      "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
      "	IN pfilterStatus VARCHAR(100),  \n" +
      "	IN pcustomerIds VARCHAR(16000),  \n" +
      "	IN pshippingMethodId VARCHAR(16000),  \n" +
      "	IN ptermsIds VARCHAR(16000),  \n" +
      "	IN psearchposotext VARCHAR(1000),  \n" +
      "	IN psearchposotype VARCHAR(10),  \n" +
      "	IN pfromDate DATE,  \n" +
      "	IN ptoDate DATE,  \n" +
      "	IN prushJob TINYINT,  \n" +
      "	IN ppartIds VARCHAR(16000),  \n" +
      "	IN pworkorders VARCHAR(16000),  \n" +
      "	IN psearchextPricetext VARCHAR(1000),  \n" +
      "	IN psearchextPricetype VARCHAR(10),  \n" +
      "	IN pkitreturnStatus VARCHAR(100),  \n" +
      "	IN pkitReleaseStatus VARCHAR(100)  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "	DECLARE pOffset INT;  \n" +
      "	DECLARE rowNumWhere VARCHAR(255);  \n" +
      "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
      "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
      "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
      "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
      "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
      "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
      "	SET v_PendingWOWhereClause='';  \n" +
      "  \n" +
      "	IF(pIsKitList=1) THEN  \n" +
      "		SET v_DynamicColumns = CONCAT(\",  \n" +
      "			hu.refType as refTypeKR,  \n" +
      "			hu.status as haltStatusKR,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hu.status = 'H' THEN  \n" +
      "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonKR,  \n" +
      "			hutt.refType as refTypePO,  \n" +
      "			hutt.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hutt.status = 'H' THEN  \n" +
      "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO,  \n" +
      "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin = CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
      "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
      "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
      "	ELSE  \n" +
      "		SET v_DynamicColumns=CONCAT(\",  \n" +
      "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hut.status = 'H' THEN  \n" +
      "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin =CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
      "				SELECT 	MAX(ht.id)  \n" +
      "				FROM 	holdunholdtrans ht  \n" +
      "				WHERE 	hut.refTransId = ht.refTransId  \n" +
      "						AND ht.refType='PO'  \n" +
      "						AND ht.isdeleted=0  \n" +
      "					)  \n" +
      "				\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
      "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
      "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
      "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
      "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
      "						co.mfgPN AS mfgPN,  \n" +
      "						co.nickname AS nickName,  \n" +
      "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
      "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
      "						vusalesorderdet.poNumber,  \n" +
      "						vusalesorderdet.salesOrderNumber  \n" +
      "				FROM 		workorder wo  \n" +
      "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
      "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
      "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
      "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
      "		\");  \n" +
      "	END IF;  \n" +
      "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
      "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
      "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
      "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
      "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
      "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
      "        IF pOrderBy IS NULL THEN  \n" +
      "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
      "        END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
      "		SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
      "			(  \n" +
      "				CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
      "						'No'  \n" +
      "					WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
      "						'Yes'  \n" +
      "					ELSE  \n" +
      "						''  \n" +
      "				END  \n" +
      "			) AS `isHotJobValue`,  \n" +
      "            `vuss`.`isHotJob`,  \n" +
      "			`vuss`.`Sales Order ID` AS id,  \n" +
      "			`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
      "			`vuss`.`Balanced Due Qty` as openQty,  \n" +
      "			`vuss`.frequency as frequencyName,  \n" +
      "			case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
      "			 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
      "			`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
      "			`vuss`.`Po Number` AS poNumber,  \n" +
      "			`vuss`.`Po Date` AS poDate,  \n" +
      "			`vuss`.`Customer ID` AS customerID,  \n" +
      "			`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
      "			`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
      "			`vuss`.`Sales Order Status` AS `status`,  \n" +
      "			`vuss`.`Revision` AS revision,  \n" +
      "			`vuss`.`Shipping Comment` AS shippingComment,  \n" +
      "			`vuss`.`Terms ID` AS termsID,  \n" +
      "			`vuss`.`So Date` AS soDate,  \n" +
      "			`vuss`.`Company Name` AS companyName,  \n" +
      "			`vuss`.`internalPO` AS internalPO,  \n" +
      "			`vuss`.`mfgCode` AS mfgCode,  \n" +
      "			`vuss`.`Full Name` AS fullName,  \n" +
      "			`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
      "			`vuss`.`PO Qty` AS qty,  \n" +
      "			ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
      "			ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
      "			`vuss`.`mrpQty` AS mrpQty,  \n" +
      "			`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
      "			`vuss`.`kitQty` AS kitQty, \",  \n" +
      "			IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
      "			\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
      "			`vuss`.`materialDueDate` AS materialDueDate,  \n" +
      "			`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
      "			`vuss`.`shippingQty` AS shippingQty,  \n" +
      "			`vuss`.`remark` AS remark,  \n" +
      "			`vuss`.`Assy ID` AS PIDCode,  \n" +
      "			`vuss`.`Assy Name` AS mfgPN,  \n" +
      "			`vuss`.`NickName` AS nickName,  \n" +
      "			`vuss`.`liveVersion` AS liveVersion,  \n" +
      "			`vuss`.`partDescription` AS partDescription,  \n" +
      "			`vuss`.`cancleReason` AS cancleReason,  \n" +
      "			`vuss`.`Status` AS completedStatus,  \n" +
      "			`vuss`.`modifyDate` AS modifyDate,  \n" +
      "			`vuss`.`createdDate` AS createdDate,  \n" +
      "			`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
      "			`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
      "			`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
      "			`vuss`.`createdbyRole` AS createdbyRole,  \n" +
      "			vuss.isBlanketPO,  \n" +
      "			vuss.blanketPOText,  \n" +
      "			vuss.poRevision,  \n" +
      "			vuss.partType,  \n" +
      "			vuss.isCancle,  \n" +
      "			vuss.mfgcodeID,  \n" +
      "			vuss.manufacturerName,  \n" +
      "			`vuss`.`PartID` AS partID,  \n" +
      "			`vuss`.`isCustomPart` AS isCustomPart,  \n" +
      "			`vuss`.`kitNumber` AS kitNumber,  \n" +
      "			`vuss`.`serialNumber` AS serialNumber,  \n" +
      "			`vuss`.partCategory,  \n" +
      "			vuss.lineID,  \n" +
      "			vuss.internalCommentSo,  \n" +
      "			vuss.internalComment,  \n" +
      "			vuss.originalPODate,  \n" +
      "			vuss.isRmaPO,  \n" +
      "			vuss.rmaPOText,  \n" +
      "			vuss.isLegacyPO,  \n" +
      "			vuss.legacyPOText,  \n" +
      "			vuss.originalPOQty,  \n" +
      "			ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
      "			vuss.Status as salesOrderDetStatusConvertedValues,  \n" +
      "			`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
      "			fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
      "			 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
      "			fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
      "			fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
      "			fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
      "			fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
      "			`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
      "			(  \n" +
      "				CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
      "						'Draft'  \n" +
      "					WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
      "						'Published'  \n" +
      "					ELSE  \n" +
      "						''  \n" +
      "				END  \n" +
      "			) AS `statusConvertedValue`,  \n" +
      "			hutkit.refType as refTypeKA,  \n" +
      "			hutkit.status as haltStatusKA,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN 	hutkit.status = 'H' THEN  \n" +
      "							CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
      "					ELSE 	''  \n" +
      "				END  \n" +
      "			) AS reasonKA,  \n" +
      "			ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
      "			ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
      "						'Unplanned'  \n" +
      "					WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
      "						'Partially Planned'  \n" +
      "					WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
      "						'Fully Planned'  \n" +
      "					ELSE  \n" +
      "						NULL  \n" +
      "				END  \n" +
      "			) as kitPlanStatus,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN 	ka.kitReturnStatus is null then  \n" +
      "						'N/A'  \n" +
      "					ELSE  \n" +
      "						ka.kitReturnStatus  \n" +
      "				END  \n" +
      "			) as kitReturnStatus,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN ka.kitReleaseStatus is null then  \n" +
      "						'Not Released'  \n" +
      "					else  \n" +
      "						ka.kitReleaseStatus  \n" +
      "				END  \n" +
      "			) as kitReleaseStatus,  \n" +
      "			`vuss`.`Shipped Qty` AS shippedQty,  \n" +
      "            (CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
      "				ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
      "			p.nextReleaseDate,  \n" +
      "			fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,  \n" +
      "			CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
      "			p.releasedPlanCount totalkitRelease,  \n" +
      "			ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
      "            IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
      "            IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
      "			fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
      "			vuss.releasedWorkorder,  \n" +
      "			vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
      "	FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
      "	LEFT JOIN  	(  \n" +
      "				SELECT  salesOrderDetID,  \n" +
      "					refAssyId,  \n" +
      "					count(1) totalPlan,  \n" +
      "                    SUM(poQty) totalPOQty,  \n" +
      "                    SUM(kitReleaseQty) totalKitQty,  \n" +
      "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
      "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
      "				FROM 	salesorder_plan_detailsmst  \n" +
      "				WHERE 	isDeleted=0  \n" +
      "						AND subAssyID is null  \n" +
      "				GROUP BY salesOrderDetID, refAssyId  \n" +
      "			) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
      "	LEFT JOIN 	(  \n" +
      "					SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "					`k`.`assyID` AS `assyID`,  \n" +
      "					(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
      "					`k`.`shortageLine` AS `shortageLine`,  \n" +
      "					allocPermainAssy allocPerComponent,  \n" +
      "					`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
      "					Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
      "					fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
      "					fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
      "					FROM (  \n" +
      "						SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "							mainAssy AS `assyID`,  \n" +
      "							COUNT(1) AS `totalLine`,  \n" +
      "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
      "							 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
      "							sum( k.shortageline) shortageline,  \n" +
      "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
      "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
      "					      FROM (  \n" +
      "  \n" +
      "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
      "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
      "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
      "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
      "									(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
      "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
      "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
      "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
      "								FROM  	`vu_kit_allocation_detail` vk  \n" +
      "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
      "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
      "							) `k`  \n" +
      "						GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
      "					) `k`  \n" +
      "				) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
      "		LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
      "		LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
      "	\");  \n" +
      "  \n" +
      "    IF(pIsKitList = 1) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pOrderBy IS NOT NULL) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
      "	ELSE  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
      "		SET pWhereClause = '1=1' ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
      "		IF(pIsKitList=1)THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
      "	  IF(psearchposotype='C')THEN  \n" +
      "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
      "          ELSE  \n" +
      "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
      "          END IF;  \n" +
      "        END IF;  \n" +
      "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
      "	  IF(psearchextPricetype='C')THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(prushJob = 1) THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pworkorders IS NOT NULL)THEN  \n" +
      "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
      "	END IF;  \n" +
      "	IF(ppartIds IS NOT NULL)THEN  \n" +
      "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
      "	END IF;  \n" +
      "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	-- from date to date filter  \n" +
      "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
      "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
      "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
      "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
      "    END IF;  \n" +
      "  \n" +
      "  	IF(pIsKitList = 1) THEN  \n" +
      "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
      "  	ELSE  \n" +
      "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
      "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
      "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
      "		END IF;  \n" +
      "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pSalesOrderDetailId != 0) THEN  \n" +
      "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "  \n" +
      "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
      "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
      "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
      "	ELSE  \n" +
      "		SET rowNumWhere = '';  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	/* to get total count of rows */  \n" +
      "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
      "    PREPARE query1 FROM @SQLStatement1;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
      "	PREPARE query2 FROM @SQLStatement2;  \n" +
      "	EXECUTE query2;  \n" +
      "	DEALLOCATE PREPARE query2;  \n" +
      "  \n" +
      "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query3 FROM @SQLStatement3;  \n" +
      "	EXECUTE query3;  \n" +
      "	DEALLOCATE PREPARE query3;  \n" +
      "  \n" +
      "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query4 FROM @SQLStatement4;  \n" +
      "	EXECUTE query4;  \n" +
      "	DEALLOCATE PREPARE query4;  \n" +
      "END;  \n" +
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesorderDetails` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
      "	IN psoposearch LONGTEXT,  \n" +
      "	IN salesorderID INT  \n" +
      "    )  \n" +
      "BEGIN  \n" +
      "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
      "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
      "       SELECT som.id FROM salesordermst som  \n" +
      "     WHERE som.id IN  \n" +
      "          (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
      "	       EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.isdeleted=0 AND sm.id=sd.refSalesOrderID) AND sd.isdeleted=0  \n" +
      "	       AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
      "							JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
      "							WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
      "                       )) OR som.id=salesorderID;  \n" +
      "  \n" +
      " SET @pWhereClause=\"1=1\";  \n" +
      "  \n" +
      " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
      "	select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,  \n" +
      "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
      "		so.termsID , so.shippingAddressID,  \n" +
      "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
      "		so.poDate,  \n" +
      "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
      "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
      "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
      "		concat('(',m.mfgcode,') ',m.mfgName, ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
      "		m.mfgName,  \n" +
      "		so.status,so.isLegacyPO,so.isRmaPO  \n" +
      "	from salesordermst so  \n" +
      "		join mfgcodemst m on m.id=so.customerID  \n" +
      "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
      "  \n" +
      "  IF(salesorderID IS NOT NULL)THEN  \n" +
      "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
      "  END IF;  \n" +
      "	IF(psoposearch IS NOT NULL)THEN  \n" +
      "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
      "  \n" +
      "	PREPARE query1 FROM @SQLStatement1;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
      "END;  \n" +
  /* **************************** New Script -> 16-08-2021  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
      "	IN psalesorderDetID INT ,  \n" +
      "	IN packingSlipID INT,  \n" +
      "	IN ppackingslipDetID INT  \n" +
      "    )  \n" +
      "BEGIN  \n" +
      "      SELECT ss.shippingID,  \n" +
      "        ss.sDetId,  \n" +
      "	IFNULL(sd.custPOLineNumber ,1)   custPOLineNumber,  \n" +
      "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
      "        ss.qty,  \n" +
      "        ss.shippingDate,  \n" +
      "        ss.releaseNotes,  \n" +
      "        sd.tentativeBuild,  \n" +
      "        sd.qty AS poQty,  \n" +
      "        sd.partID,  \n" +
      "        sd.price,  \n" +
      "        sd.lineID,  \n" +
      "        sd.internalComment,  \n" +
      "        sd.partDescription,  \n" +
      "        sd.remark,  \n" +
      "        c.iscustom,  \n" +
      "         c.mfgpn,  \n" +
      "         c.mfgpndescription,  \n" +
      "         c.pidcode,  \n" +
      "         fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
      "         c.nickName,  \n" +
      "         c.mfgcodeID,  \n" +
      "         sd.originalPOQty,  \n" +
      "         fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
      "	(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
      "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
      "	(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
      "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
      "	fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
      "	fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
      "	fun_getCertificationByPartID(sd.partID)standards,  \n" +
      "	CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
      "	(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
      "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
      "		AND cpd.isdeleted=0) shippedQty ,  \n" +
      "	(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
      "		ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
      "		c.partType,  \n" +
      "        (SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
      "        sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID, sd.refRFQGroupID, sd.refRFQQtyTurnTimeID  ,  \n" +
      "        IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
      "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
      "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
      "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
      "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
      "                    WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
      "						c.category partCategory  \n" +
      "        FROM salesshippingmst ss  \n" +
      "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
      "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
      "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
      "  \n" +
      "WHERE sd.id=psalesorderDetID  \n" +
      "AND  sd.isDeleted = 0 AND  \n" +
      "(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
      "	ss.qty > (SELECT  \n" +
      "	IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
      "		AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  \n" +
      "		SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
      "ELSE  \n" +
      "	ss.qty=ss.qty  \n" +
      "END)  \n" +
      "AND ss.isdeleted=0  \n" +
      "ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
      "-- all list of shipping line with other charges  \n" +
      "SELECT NULL AS shippingID,  \n" +
      "		 sDetId,  \n" +
      "		custPOLineNumber,  \n" +
      "		NULL releaseNumber,  \n" +
      "		qty,  \n" +
      "		NULL shippingDate,  \n" +
      "		NULL releaseNotes,  \n" +
      "		tentativeBuild,  \n" +
      "		poQty,  \n" +
      "		partID,  \n" +
      "		price,  \n" +
      "		lineID,  \n" +
      "		partDescription,  \n" +
      "		 mfgPN,  \n" +
      "		 mfgPNDescription,  \n" +
      "		 unitMeaser,  \n" +
      "		 nickName,  \n" +
      "                  pidcode,  \n" +
      "		 NULL shippingMethodID,  \n" +
      "		NULL shippingAddressID,  \n" +
      "		mfgcodeID,  \n" +
      "		mfgName,  \n" +
      "		rohsIcon,  \n" +
      "		rohsName,  \n" +
      "        rohsStatusID,  \n" +
      "		standards,  \n" +
      "		shippedQty   ,  \n" +
      "        remark,  \n" +
      "        internalcomment,  \n" +
      "        mfgPnwihLineId,  \n" +
      "        refSODetID,  \n" +
      "        refSOReleaseLineID,  \n" +
      "        frequency,  \n" +
      "        originalPOQty  \n" +
      "    FROM (SELECT  \n" +
      "			NULL AS shippingID,  \n" +
      "			sd.id AS sDetId,  \n" +
      "			sd.custPOLineNumber custPOLineNumber,  \n" +
      "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
      "			NULL releaseNumber,  \n" +
      "			sd.qty,  \n" +
      "			NULL shippingDate,  \n" +
      "			NULL releaseNotes,  \n" +
      "			sd.tentativeBuild,  \n" +
      "			sd.qty AS poQty,  \n" +
      "			sd.partID,  \n" +
      "			sd.price,  \n" +
      "			sd.lineID,  \n" +
      "			sd.partDescription,  \n" +
      "			 c.mfgPN,  \n" +
      "			 c.mfgPNDescription,  \n" +
      "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
      "			 c.nickName,  \n" +
      "			 c.pidcode,  \n" +
      "			 sd.refSODetID,  \n" +
      "			 sd.refSOReleaseLineID,  \n" +
      "			 sd.frequency,  \n" +
      "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
      "			 NULL shippingMethodID,  \n" +
      "			NULL shippingAddressID,  \n" +
      "			c.mfgcodeID,  \n" +
      "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
      "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
      "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
      "			c.rohsStatusID,  \n" +
      "			sd.originalPOQty,  \n" +
      "			fun_getCertificationByPartID(c.id)standards,  \n" +
      "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
      "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
      "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
      "				sd.remark,  \n" +
      "				sd.internalcomment  \n" +
      "		FROM salesorderdet sd  \n" +
      "			LEFT JOIN component c ON c.id=sd.partid  \n" +
      "		WHERE sd.refSODetID=psalesorderDetID  \n" +
      "		AND sd.isdeleted=0  \n" +
      "    ) a;  \n" +
      "  \n" +
      "END;  \n" +
      /* **************************** New Script -> 16-08-2021  *********************************** */

      "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceDetail` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
      "	IN invoiceID INT      ,  \n" +
      "    IN pTransType VARCHAR(5)  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
      "	DECLARE vTimeZone VARCHAR(50);  \n" +
      "  \n" +
      "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
      "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
      "	                 SELECT inv.id,   inv.transType,  \n" +
      "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
      "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
      "                        cps.id packingSlipID,  \n" +
      "						inv.refSalesOrderId  ,  \n" +
      "                        inv.systemID,  \n" +
      "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,  \n" +
      "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
      "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
      "						inv.soNumber,inv.soDate,  \n" +
      "                        inv.packingSlipType,inv.`status`,  \n" +
      "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
      "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
      "						inv.invoiceNumber,inv.invoiceDate,  \n" +
      "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
      "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
      "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
      "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
      "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
      "                        inv.intermediateShipmentId ,  \n" +
      "						inv.billingAddress,  \n" +
      "						inv.shippingAddress,  \n" +
      "						inv.intermediateAddress,  \n" +
      "                        inv.isLocked,  \n" +
      "                        inv.subStatus,  \n" +
      "                        inv.paymentStatus,  \n" +
      "                        inv.packingSlipType,  \n" +
      "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
      "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
      "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
      "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
      "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
      "                        inv.isZeroValue,  \n" +
      "                        inv.revision,  \n" +
      "                        cps.subStatus packingSlipSubStatus,  \n" +
      "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
      "						ELSE '' END) materialStatus ,  \n" +
      "                        inv.isAlreadyPublished ,  \n" +
      "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
      "			cps.revision packingSlipVersion,  \n" +
      "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
      "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
      "			ELSE NULL END) receivedAmount,  \n" +
      "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
      "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
      "			(CASE WHEN inv.transType = 'C' THEN  \n" +
      "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
      "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
      "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
      "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
      "				END) AS paymentStatusCode,  \n" +
      "			inv.refundStatus,  \n" +
      "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
      "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
      "				sm.isRmaPO,  \n" +
      "				sm.isLegacyPO,  \n" +
      "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
      "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
      "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
      "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
      "			inv.isAskForVersionConfirmation,  \n" +
      "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
      "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  \n" +
      "		FROM customer_packingslip inv  \n" +
      "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
      "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
      "                 WHERE inv.id = invoiceID  \n" +
      "                 AND inv.transType = pTransType;  \n" +
      "  \n" +
      "  \n" +
      "				 SELECT cpd.refSalesorderDetid,  \n" +
      "					cpd.id,  \n" +
      "                    cpd.refCustPackingSlipID,  \n" +
      "					cpd.custPOLineID,  \n" +
      "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
      "                    cpd.lineID,  \n" +
      "                    co.PIDCode,  \n" +
      "                    co.mfgcodeID,  \n" +
      "                    ss.releaseNumber,  \n" +
      "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
      "					co.mfgpn,  \n" +
      "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
      "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
      "                    cpd.partId,  \n" +
      "                    cpd.refChargesTypeID,  \n" +
      "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
      "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
      "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
      "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
      "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
      "                    othercharges AS lineOtherCharges,  \n" +
      "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
      "					cpd.shippingNotes,  \n" +
      "                    cpd.internalComment,  \n" +
      "                    cpd.assyDescription,  \n" +
      "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
      "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
      "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
      "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
      "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
      "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
      "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
      "                    co.partType,  \n" +
      "                    vu.packingLineID,  \n" +
      "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
      "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
      "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
      "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
      "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
      "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
      "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
      "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
      "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
      "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
      "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
      "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
      "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
      "                    cpd.isZeroValue,  \n" +
      "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
      "				 FROM customer_packingslip_det cpd  \n" +
      "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
      "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
      "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
      "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
      "                 ORDER BY cpd.lineID ASC;  \n" +
      "  \n" +
      "                 SELECT cpOther.id,  \n" +
      "						cpOther.refCustomerPackingSlipDetID,  \n" +
      "						cpOther.partID,  \n" +
      "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
      "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
      "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
      "                        cpOther.qty,  \n" +
      "                        cpOther.price,  \n" +
      "                        cpOther.lineComment,  \n" +
      "                         cpOther.lineInternalComment,  \n" +
      "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
      "                        cpOther.frequency ,  \n" +
      "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
      "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
      "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
      "								ELSE ''  \n" +
      "						END) AS frequencyName  \n" +
      "                 FROM customer_packingslip_otherexpense_details cpOther  \n" +
      "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
      "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
      "                 AND cpOther.isdeleted=0;  \n" +
      "  \n" +
      "                  --  Tracking Number  \n" +
      "                SELECT id,trackNumber  \n" +
      "                FROM customer_packing_slip_track_number  \n" +
      "                WHERE refCustPackingSlipID = invoiceID  \n" +
      "                AND isDeleted = 0;  \n" +
      "  \n" +
      "                -- sales commission attribute  \n" +
      "                SELECT cca.id,  \n" +
      "		    cca.refCustPackingSlipDetID,  \n" +
      "                    cca.unitPrice,  \n" +
      "                    cca.commissionPercentage,  \n" +
      "                    cca.commissionValue,  \n" +
      "                    cca.quoted_commissionPercentage,  \n" +
      "                    cca.quoted_commissionValue,  \n" +
      "                    cca.poQty,  \n" +
      "                    cca.partId,  \n" +
      "                    cca.quotedQty,  \n" +
      "                    cca.type,  \n" +
      "                    cca.rfqAssyID,  \n" +
      "                    cca.commissionCalculateFrom,  \n" +
      "                    cca.salesCommissionNotes,  \n" +
      "                    cca.refComponentSalesPriceBreakID,  \n" +
      "                    cca.quoted_unitPrice  \n" +
      "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
      "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
      "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
      "                 AND cca.isdeleted=0;  \n" +
      "                 -- sales commission child attribute  \n" +
      "                SELECT cca.id,  \n" +
      "		    cca.refCustPackingSlipDetID,  \n" +
      "		    cca.refcustInvoiceCommissionID,  \n" +
      "                    cca.unitPrice,  \n" +
      "                    cca.refQuoteAttributeId,  \n" +
      "                    cca.commissionPercentage,  \n" +
      "                    cca.commissionValue,  \n" +
      "                    cca.org_commissionPercentage,  \n" +
      "                    cca.org_commissionValue,  \n" +
      "                    cca.category,  \n" +
      "                    cca.partId,  \n" +
      "                    cca.refComponentSalesPriceBreakID,  \n" +
      "                    cca.org_unitPrice,  \n" +
      "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
      "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
      "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
      "				FROM customer_packingslip_commission_attribute cca  \n" +
      "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
      "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
      "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
      "                 AND cca.isdeleted=0;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version ->  *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (1092,'1.00','V1',' Sales Order Changes: Legacy PO provision - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
  );
break;
case 1092:
    allDbChangesArray.push(
    /* **************************** New Script -> 17-06-2021  *********************************** */
    "update page_detail  \n" +
    "   set pageName = 'Supplier RMA & RMA Packing Slip',  \n" +
    "		menuName = 'Supplier RMA & RMA Packing Slip',  \n" +
    "		displayMenuName = 'Supplier RMA & RMA Packing Slip'  \n" +
    " where pageName = 'Supplier RMA';  \n" +
    "update page_detail  \n" +
    "   set pageName = 'RMA & RMA Packing Slip',  \n" +
    "		menuName = 'RMA & RMA Packing Slip',  \n" +
    "		displayMenuName = 'Supplier RMA & RMA Packing Slip'  \n" +
    " where pageName = 'Invoice Supplier RMA';  \n" +
    "update page_detail  \n" +
    "   set pageName = 'Manage Supplier RMA & RMA Packing Slip',  \n" +
    "		menuName = 'Add Supplier RMA & RMA Packing Slip',  \n" +
    "        displayMenuName = 'Supplier RMA & RMA Packing Slip'  \n" +
    "where pageName = 'Manage Supplier RMA';  \n" +
    /* **************************** Add Script Version ->  *********************************** */
    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
    "VALUES (1093,'1.00','V1','User Story 35335: [Main Branch] Supplier RMA Improvement Points - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
 );
break;
case 1093:
    allDbChangesArray.push(
    /* **************************** New Script -> 17-06-2021  *********************************** */
    "drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
"CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
"	IN pPageIndex INT,  \n" +
"	IN pRecordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"	IN pPackingSlipID INT,  \n" +
"    IN pInvoiceLineId INT  \n" +
")  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
"	DECLARE v_ParentPackingSlipId INT;  \n" +
"	DECLARE v_InvoiceSlipId INT;  \n" +
"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
"	DECLARE v_TimeZone VARCHAR(50);  \n" +
"  \n" +
"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
"  \n" +
"	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
"  \n" +
"	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
"  \n" +
"	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
"	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
"	SELECT 	*,  \n" +
"		(  \n" +
"			CASE  \n" +
"				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
"				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
"				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
"                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
"				ELSE NULL  \n" +
"			END  \n" +
"		) AS receivedStatusValue,  \n" +
"        (  \n" +
"			CASE  \n" +
"				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
"				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
"				ELSE False  \n" +
"			END  \n" +
"		) AS isPendingUMIDDisable  \n" +
"	FROM 	(  \n" +
"		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
"				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
"				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
"				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
"				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
"				p.invoicePrice, 				p.disputedPrice,  \n" +
"				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
"				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
"				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
"				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
"				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
"				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
"				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
"				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
"				p.discount,  \n" +
"				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
"				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
"				p.refCreditDebitInvoiceNo,  \n" +
"				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
"				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
"				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
"				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
"				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
"				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
"				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
"				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
"				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
"				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
"				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
"				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
"				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
"				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
"				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
"				(  \n" +
"					CASE  \n" +
"						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
"							p.receivedStatus  \n" +
"						ELSE  \n" +
"							(SELECT receivedStatus  \n" +
"							FROM 	packing_slip_material_receive_det  \n" +
"							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
"									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
"									AND isDeleted = 0 LIMIT 1)  \n" +
"					END  \n" +
"				) receivedStatus,  \n" +
"				p.remark,  \n" +
"				p.internalRemark,  \n" +
"				p.comment,  \n" +
"				p.internalRef,  \n" +
"				p.purchaseInspectionComment,  \n" +
"				(  \n" +
"					CASE  \n" +
"						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
"							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
"						ELSE  \n" +
"							(SELECT COUNT(1)  \n" +
"							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
"							WHERE EXISTS (  \n" +
"									SELECT 	1  \n" +
"									FROM 	packing_slip_material_receive_det pslip  \n" +
"									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
"											AND 	pslip.id = psmp.lineId  \n" +
"											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
"											AND	pslip.isDeleted = 0)  \n" +
"								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
"					END  \n" +
"				) AS purchaseRequirementCount,  \n" +
"				(  \n" +
"					CASE  \n" +
"						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
"							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
"						ELSE  \n" +
"							(SELECT COUNT(1)  \n" +
"							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
"							WHERE 	EXISTS (  \n" +
"									SELECT 	1  \n" +
"									FROM 	packing_slip_material_receive_det psmr  \n" +
"									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
"										AND	psmr.id = psm.lineId  \n" +
"										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
"										AND 	psmr.isDeleted = 0  \n" +
"									)  \n" +
"								AND psm.inspectionStatus = 'R'  \n" +
"								AND psm.isDeleted = 0  \n" +
"								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
"					END  \n" +
"				) AS rejectedPurchaseRequirementCount,  \n" +
"				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
"				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
"				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
"				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
"				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
"				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
"				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
"				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
"				ps.refInvoiceIdForMemo,  \n" +
"				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
"				ps.refInvoiceNumberForMemo,  \n" +
"				(  \n" +
"					CASE  \n" +
"						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
"						ELSE  \n" +
"							(SELECT `status`  \n" +
"							FROM 	packing_slip_material_receive_det  \n" +
"							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
"									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
"									AND isDeleted = 0)  \n" +
"					END  \n" +
"				) invoiceStatus,  \n" +
"				(  \n" +
"					CASE  \n" +
"						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
"						ELSE  \n" +
"							(SELECT refCreditDebitInvoiceNo  \n" +
"							FROM 	packing_slip_material_receive_det  \n" +
"							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
"									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
"									AND isDeleted = 0)  \n" +
"					END  \n" +
"				) invoiceLineHasMemo,  \n" +
"				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
"				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
"				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
"					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
"					AND pd.partId = p.partID) commentCount,  \n" +
"				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
"				p.refPackingSlipIdForRma,  \n" +
"				p.refPackingSlipDetIdForRMA,  \n" +
"				p.refInvoiceIdForRma,  \n" +
"				p.refPackingSlipForRma,  \n" +
"				p.refInvoiceForRma,  \n" +
"				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
"				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
"				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
"				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,  \n" +
"				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,  \n" +
"				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId,  \n" +
"                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty  \n" +
"		FROM		packing_slip_material_receive_det p  \n" +
"        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
"		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
"		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
"		LEFT JOIN	(  \n" +
"					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
"					FROM 	packing_slip_material_receive_det ps  \n" +
"					WHERE 	ps.isDeleted = 0  \n" +
"				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
"		LEFT JOIN 	(  \n" +
"					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
"					FROM 	packing_slip_material_receive_det det  \n" +
"					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
"				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
"		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
"		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
"		AND 		p.isDeleted = 0  \n" +
"	) a;  \n" +
"  \n" +
"	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
"	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
"	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
"	FROM		packing_slip_material_receive_det psm  \n" +
"	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
"					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
"	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
"	AND			ps.receiptType = 'P'  \n" +
"	AND			psm.isDeleted = 0  \n" +
"	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
"  \n" +
"	-- Set received qty detail  \n" +
"	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
"	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
"		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
"	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
"  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"  \n" +
"    IF pInvoiceLineId IS NOT NULL THEN  \n" +
"		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
"    END IF;  \n" +
"  \n" +
"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
"	PREPARE query1 FROM @SQLStatement1;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query2 FROM @SQLStatement2;  \n" +
"	EXECUTE query2;  \n" +
"	DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
"											invoiceTotalDue As invoiceTotalDue,  \n" +
"									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
"										  from packingslip_invoice_payment a  \n" +
"										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
"										 where b.refPackingslipInvoiceID = c.id  \n" +
"                                           and a.refPaymentMode = 'P'  \n" +
"                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
"									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
"	PREPARE query3 FROM @SQLStatement3;  \n" +
"	EXECUTE query3;  \n" +
"	DEALLOCATE PREPARE query3;  \n" +
"  \n" +
"END;  \n" +
"drop function if exists `fun_getPackingSlipDetailStatusByKey`;  \n" +
"CREATE FUNCTION `fun_getPackingSlipDetailStatusByKey`(  \n" +
"	pKey VARCHAR(2)  \n" +
") RETURNS varchar(100) CHARSET utf8mb4  \n" +
"BEGIN  \n" +
"	DECLARE v_status VARCHAR(100);  \n" +
"	IF pKey='P' THEN  \n" +
"		SET v_status='Pending';  \n" +
"	ELSEIF pKey='A' THEN  \n" +
"		SET v_status='Accepted';  \n" +
"	ELSEIF pKey='R' THEN  \n" +
"		SET v_status='Rejected';  \n" +
"	ELSEIF pKey='AD' THEN  \n" +
"		SET v_status='Accepted with Deviation';  \n" +
"	ELSE  \n" +
"		SET v_status=NULL;  \n" +
"	END IF;  \n" +
"	RETURN v_status;  \n" +
"END;  \n" +
    /* **************************** Add Script Version ->  *********************************** */
    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
    "VALUES (1094,'1.00','V1','User Story 35335: [Main Branch] Supplier RMA Improvement Points - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
 );
break;
case 1094:
    allDbChangesArray.push(
    /* **************************** New Script -> 17-06-2021  *********************************** */
    "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
"CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
"	IN pPageIndex INT,  \n" +
"	IN pRecordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"	IN pReceiptType VARCHAR(10),  \n" +
"	IN pMfgCodeIds VARCHAR(16383),  \n" +
"	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
"	IN pMfrPnId INT,  \n" +
"    IN pPackingslipWithRejectedLines tinyint  \n" +
")  \n" +
"BEGIN  \n" +
"  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255);  \n" +
"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
"	DECLARE v_TimeZone VARCHAR(50);  \n" +
"	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
"	SET SESSION group_concat_max_len = 500000;  \n" +
"  \n" +
"	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
"  \n" +
"	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
"	END IF;  \n" +
"  \n" +
"	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
"		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
"											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
"										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
"										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
"										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
"									  \" )  \n" +
"					\");  \n" +
"	END IF;  \n" +
"  \n" +
"	IF (pMfrPnId IS NOT NULL) THEN  \n" +
"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
"				SELECT 	refPackingSlipMaterialRecID  \n" +
"				FROM 	packing_slip_material_receive_det  \n" +
"				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
"			)  \n" +
"		\");  \n" +
"	END IF;  \n" +
"  \n" +
"	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
"			SELECT  *  \n" +
"			FROM	(  \n" +
"					SELECT 		p.id,  \n" +
"							p.systemId,  \n" +
"							p.poNumber,  \n" +
"                            p.poDate,  \n" +
"							p.refPurchaseOrderID poId,  \n" +
"							p.mfgCodeID,  \n" +
"							p.supplierSONumber,  \n" +
"                            p.soDate,  \n" +
"							p.packingSlipNumber,  \n" +
"							p.packingSlipDate,  \n" +
"							p.invoiceNumber,  \n" +
"							p.invoiceDate,  \n" +
"							p.creditMemoNumber,  \n" +
"							p.creditMemoDate,  \n" +
"							p.debitMemoNumber,  \n" +
"							p.debitMemoDate,  \n" +
"							p.receiptDate,  \n" +
"							p.description,  \n" +
"							p.billToAddress,  \n" +
"							p.shipToAddress,  \n" +
"							p.poVersion,  \n" +
"							p.isDeleted,  \n" +
"							p.receiptType,  \n" +
"							p.`status`,  \n" +
"							p.packingSlipModeStatus,  \n" +
"							p.chequeNumber,  \n" +
"							p.chequeDate,  \n" +
"							p.chequeAmount,  \n" +
"							p.applyDate,  \n" +
"							p.refParentCreditDebitInvoiceno,  \n" +
"							p.refPackingSlipNumberForInvoice,  \n" +
"							p.invoiceTotalDue,  \n" +
"							p.isTariffInvoice,  \n" +
"							p.bankName,  \n" +
"							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
"							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
"							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
"							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
"							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
"							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
"							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
"							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
"							(  \n" +
"								CASE  \n" +
"									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
"									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
"									ELSE NULL  \n" +
"								END  \n" +
"							) packingSlipModeStatusValue,  \n" +
"							ps.id invoiceId,  \n" +
"							ps.invoiceNumber refInvoiceNumber,  \n" +
"                            ps.lockStatus refInvoiceLockStatus,  \n" +
"							ps.invoiceDate refInvoiceDate,  \n" +
"							(  \n" +
"								CASE  \n" +
"									WHEN p.status = 'I' THEN 'Investigate'  \n" +
"									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
"									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
"									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
"									WHEN p.status = 'P' THEN 'Paid'  \n" +
"									ELSE NULL  \n" +
"								END  \n" +
"							) statusValue,  \n" +
"							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
"							psm.totalDetailLine itemReceived,  \n" +
"							psm.totalRejectLine totalRejectedLine,  \n" +
"                            p.lockStatus,  \n" +
"                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
"								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
"                                when p.lockStatus = 'LC' then 'Locked'  \n" +
"                                else null end  \n" +
"                            ) lockStatusValue,  \n" +
"                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
"                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
"                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
"					FROM		packing_slip_material_receive p  \n" +
"					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
"					LEFT JOIN 	(  \n" +
"								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine, SUM(IF(psm.receivedStatus = 'R', 1, 0)) AS totalRejectLine  \n" +
"								FROM 		packing_slip_material_receive_det psm  \n" +
"								WHERE 		isDeleted = 0  \n" +
"								GROUP BY 	refPackingSlipMaterialRecID  \n" +
"							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
"					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
"					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')  \",  \n" +
"			case when pPackingslipWithRejectedLines = true then  \n" +
"					\" and exists (select 1 from packing_slip_material_receive_det d where d.refPackingSlipMaterialRecID = p.id and d.receivedStatus = 'R') \"  \n" +
"				else ' ' end,  \n" +
"			\"	) a  \n" +
"			WHERE \", v_advanceFilterWhereClause  \n" +
"		);  \n" +
"  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
"	PREPARE query1 FROM @SQLStatement1;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query2 FROM @SQLStatement2;  \n" +
"	EXECUTE query2;  \n" +
"	DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"    END;  \n" +
"drop procedure if exists `Sproc_RetriveSupplierRMAList`;  \n" +
"CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(  \n" +
"	IN pPageIndex INT,  \n" +
"	IN pRecordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"	IN pMfgCodeIds VARCHAR(16383),  \n" +
"	IN pAdvanceSearchNumbers VARCHAR(50),  \n" +
"	IN pSearchType VARCHAR(10),  \n" +
"	IN pMfrPnId INT  \n" +
")  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255);  \n" +
"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
"	DECLARE v_TimeZone VARCHAR(50);  \n" +
"	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
"  \n" +
"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
"	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
"  \n" +
"	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
"	END IF;  \n" +
"  \n" +
"	IF (pAdvanceSearchNumbers IS NOT NULL) THEN  \n" +
"		IF (pSearchType = 'contains') THEN  \n" +
"			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
"												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
"											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
"											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"  \n" +
"										  \" )  \n" +
"									\");  \n" +
"		ELSE  \n" +
"			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
"												rmaNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
"											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
"											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"  \n" +
"										  \" )  \n" +
"									\");  \n" +
"		END IF;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF (pMfrPnId IS NOT NULL) THEN  \n" +
"		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
"				SELECT 	refPackingSlipMaterialRecID  \n" +
"				FROM 	packing_slip_material_receive_det  \n" +
"				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
"			)  \n" +
"		\");  \n" +
"	END IF;  \n" +
"  \n" +
"	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"  \n" +
"		SELECT	*  \n" +
"		FROM 	(  \n" +
"				SELECT 		p.id,  \n" +
"						p.systemId,  \n" +
"						p.receiptType,  \n" +
"						p.packingSlipModeStatus rmaModeStatus,  \n" +
"						(  \n" +
"							CASE  \n" +
"								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
"								WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
"								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
"								ELSE NULL  \n" +
"							END  \n" +
"						) rmaModeStatusValue,  \n" +
"						p.`status`,  \n" +
"						(  \n" +
"							CASE  \n" +
"								WHEN p.status = 'D' THEN 'Draft'  \n" +
"								WHEN p.status = 'WS' THEN 'Waiting For Shipment'  \n" +
"								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'  \n" +
"								WHEN p.status = 'CR' THEN 'Credit Memo Received'  \n" +
"								WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
"								WHEN p.status = 'P' THEN 'Paid'  \n" +
"								ELSE NULL  \n" +
"							END  \n" +
"						) statusValue,  \n" +
"						p.mfgCodeID,  \n" +
"						fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
"						fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
"						p.poNumber rmaNumber,  \n" +
"						p.poDate rmaDate,  \n" +
"						p.packingSlipNumber,  \n" +
"						p.packingSlipDate,  \n" +
"						p.receiptDate shippedDate,  \n" +
"						IFNULL(g.cnt,0) rmaDocCount,  \n" +
"						psm.totalDetailLine itemReturn,  \n" +
"						ps.id refCreditMemoId,  \n" +
"						ps.creditMemoNumber refCreditMemoNumber,  \n" +
"                        ps.lockStatus  refCreditMemoLockStatus,  \n" +
"						ps.creditMemoDate refCreditMemoDate,  \n" +
"						p.remark,  \n" +
"						p.internalRemark,  \n" +
"						p.shippingMethodId,  \n" +
"						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,  \n" +
"						p.carrierId,  \n" +
"						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,  \n" +
"						p.carrierAccountNumber,  \n" +
"						p.shippingInsurance,  \n" +
"						(  \n" +
"							CASE  \n" +
"								WHEN p.shippingInsurance = 1 THEN 'Yes'  \n" +
"								WHEN p.shippingInsurance = 0 THEN 'No'  \n" +
"								ELSE NULL  \n" +
"							END  \n" +
"						) shippingInsuranceValue,  \n" +
"						p.rmaShippingAddress,  \n" +
"						fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
"						fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
"						fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
"						fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
"						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
"						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
"                        p.lockStatus,  \n" +
"						(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
"							when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
"							when p.lockStatus = 'LC' then 'Locked'  \n" +
"							else null end  \n" +
"						) lockStatusValue,  \n" +
"						fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
"						fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
"						fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
"				FROM 		packing_slip_material_receive p  \n" +
"				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
"				LEFT JOIN 	(  \n" +
"							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine  \n" +
"							FROM 		packing_slip_material_receive_det psm  \n" +
"							WHERE 		isDeleted = 0  \n" +
"							GROUP BY 	refPackingSlipMaterialRecID  \n" +
"						) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
"				LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id  \n" +
"						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id  \n" +
"				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0  \n" +
"			) AS a  \n" +
"		WHERE \", v_advanceFilterWhereClause  \n" +
"	);  \n" +
"  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = ' 1=1 ' ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
"	PREPARE query1 FROM @SQLStatement1;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query2 FROM @SQLStatement2;  \n" +
"	EXECUTE query2;  \n" +
"	DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"END;  \n" +
    /* **************************** Add Script Version ->  *********************************** */
    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
    "VALUES (1095,'1.00','V1','User Story 35335: [Main Branch] Supplier RMA Improvement Points - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
 );
break;
        case 1095:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateKitAllocationAssyDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateKitAllocationAssyDetail`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pSalesOrderDetailID INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "	IN pMrpQty INT,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pActionStatus VARCHAR(50),  \n" +
                "	IN pRoleID INT,  \n" +
                "    IN pIsOnlyQtyChange TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_assyDataCount INT;  \n" +
                "	DECLARE v_KitAssyDetailPIDs VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineitemsIds VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineItemIdsForDeallocate VARCHAR(10000);  \n" +
                "	DECLARE v_AssyIdsForDeallocate VARCHAR(10000);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS  \n" +
                "	SELECT 	ps.prPerPartID,  \n" +
                "			c.liveInternalVersion,  \n" +
                "			c.liveVersion,  \n" +
                "			max(ps.level) level  \n" +
                "	FROM 		part_sub_assy_relationship ps  \n" +
                "	JOIN		component c ON c.id = ps.prPerPartID  \n" +
                "	WHERE 		ps.PartID = pPartID  \n" +
                "	AND 		c.liveInternalVersion IS NOT NULL  \n" +
                "	AND 		ps.isDeleted = 0  \n" +
                "	GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion;  \n" +
                "  \n" +
                "	SELECT 	COUNT(1)  \n" +
                "	INTO 	v_assyDataCount  \n" +
                "	FROM 	tempSubAmmseblyData  \n" +
                "	WHERE 	prPerPartID = pPartID;  \n" +
                "  \n" +
                "	IF (v_assyDataCount > 0) THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS  \n" +
                "		SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId, isDeleted  \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail  \n" +
                "		WHERE 	refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "				AND isAssembly = 1  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForUpdate AS  \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID,  \n" +
                "				pSalesOrderDetailID AS salesOrderDetailID,  \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,  \n" +
                "				pKitQty AS kitQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,  \n" +
                "				pMrpQty AS mrpQty,  \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,  \n" +
                "				tsd.liveVersion AS liveVersion,  \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel,  \n" +
                "				pUserID AS updatedBy,  \n" +
                "				pUserID AS createdBy,  \n" +
                "				pRoleID AS createByRoleId,  \n" +
                "				pRoleID AS updateByRoleId  \n" +
                "		FROM 		tempSubAmmseblyData tsd  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 		rla.mfgPNID, a.qpa  \n" +
                "					FROM 		tempAssyConsolidateDetail a  \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0  \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs) AND a.isDeleted = 0  \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID  \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level  \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItem AS  \n" +
                "		SELECT 		pSalesOrderDetailID AS refSalesOrderDetID,  		id,  \n" +
                "				lineID, 	qpa, 		dnpQty,		    	isInstall,  \n" +
                "				isPurchase,	isBuyDNPQty,	custPN,			custPNID,  \n" +
                "				uomID, 		partID,		numOfPosition, 		description,  \n" +
                "				restrictCPNUseWithPermissionStep,	restrictCPNUsePermanentlyStep,  \n" +
                "				restrictCPNUseInBOMStep,		customerApprovalCPN,  \n" +
                "				isNotRequiredKitAllocation,  \n" +
                "				fun_getApprovalCommentOfBOMLine(19, rl.id) notRequiredKitAllocationReason,  \n" +
                "				isDeleted,      deleteByRoleId,		refDesig,	customerRev,  \n" +
                "                customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep,  duplicateCPNStep,  \n" +
                "				requireMountingTypeStep, requireFunctionalTypeStep, refDesigCount, isObsoleteLine,  \n" +
                "				customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount,  \n" +
                "				requireMountingTypeError, requireFunctionalTypeError, dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep,  \n" +
                "				customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "		FROM 		rfq_lineitems rl  \n" +
                "		WHERE 	 	/*FIND_IN_SET(PartId, v_KitAssyDetailPIDs) */  \n" +
                "				EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "										WHERE temp.prPerPartid = partid)  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItemAlternatePart AS  \n" +
                "		SELECT 	pSalesOrderDetailID AS refSalesOrderDetID,		rfqLineItemsID, 		id,  \n" +
                "			distributor, 			distMfgCodeID, 		distPN, 	    		distMfgPNID,  \n" +
                "			mfgCode,			mfgCodeID, 		mfgPN, 				mfgPNID,  \n" +
                "			description,		RoHSStatusID,  \n" +
                "			parttypeID, 		    	mountingtypeID,		partcategoryID, 	    	partID,  \n" +
                "			customerApproval,		customerApprovalBy,	customerApprovalDate,		restrictUsePermanentlyStep,  \n" +
                "			restrictUseWithPermissionStep, 	restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep,  \n" +
                "			mismatchMountingTypeStep,	approvedMountingType, 	mismatchFunctionalCategoryStep,  \n" +
                "			uomMismatchedStep,		restrictUseInBOMExcludingAliasStep,	    		restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "			restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,		isDeleted,  \n" +
                "			deleteByRoleId,mfgVerificationStep, mfgDistMappingStep, mfgCodeStep, distVerificationStep, distCodeStep,  \n" +
                "			getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep, mfgPNStep, distPNStep,  \n" +
                "			badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep, duplicateMPNInSameLineStep,  \n" +
                "			pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep, functionalTestingRequiredStep,  \n" +
                "			mismatchValueStep, mismatchPackageStep, mismatchToleranceStep, mismatchTempratureStep, mismatchPowerStep,  \n" +
                "			programingRequiredStep, mismatchColorStep, isCustomerUnAppoval, customerUnAppovalBy,  \n" +
                "			customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep,  \n" +
                "			tbdPartStep, exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep,  \n" +
                "			suggestedGoodPartStep, suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep,  \n" +
                "			mismatchCustomPartStep, suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "		FROM 	rfq_lineitems_alternatepart rla  \n" +
                "		WHERE 	EXISTS  ( SELECT 1 FROM rfq_LineItems rl  \n" +
                "									WHERE EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "															WHERE temp.prPerPartid = partid)  \n" +
                "									AND rl.id =  rla.rfqLineItemsID  \n" +
                "    AND rl.isdeleted = 0)  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		/* Delete any line detail (delete any kit) from sales order */  \n" +
                "		IF (pActionStatus = 'DELETE')  \n" +
                "        THEN  \n" +
                "			/* Delete from kit_allocation_assy_detail */  \n" +
                "			UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "			SET 	kasd.updatedBy = pUserID,  \n" +
                "				kasd.isDeleted = 1,  \n" +
                "				kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kasd.deletedBy = pUserId,  \n" +
                "				kasd.updateByRoleId = pRoleID,  \n" +
                "				kasd.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems */  \n" +
                "			UPDATE 	kit_allocation_lineitems kal  \n" +
                "			SET 	kal.updatedBy = pUserID,  \n" +
                "				kal.isDeleted = 1,  \n" +
                "				kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kal.deletedBy = pUserId,  \n" +
                "				kal.updateByRoleId = pRoleID,  \n" +
                "				kal.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems_alternatepart */  \n" +
                "			UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "			SET 	kala.updatedBy = pUserID,  \n" +
                "				kala.isDeleted = 1,  \n" +
                "				kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kala.deletedBy = pUserId,  \n" +
                "				kala.updateByRoleId = pRoleID,  \n" +
                "				kala.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "			UPDATE 	kit_allocation ka  \n" +
                "			SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "				ka.returnUnit = ka.allocatedUnit,  \n" +
                "				ka.returnUOM = ka.allocatedUOM,  \n" +
                "				ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "				ka.updatedBy = pUserID,  \n" +
                "				ka.updateByRoleId = pRoleID,  \n" +
                "				ka.`status` = 'D',  \n" +
                "				ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "			WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND ka.`status` = 'A';  \n" +
                "  \n" +
                "			-- Delete release plan detail  \n" +
                "			UPDATE 	salesorder_plan_detailsmst  \n" +
                "			SET 	isDeleted = 1,  \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				deletedBy = pUserId  \n" +
                "			WHERE 	salesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* Insert data in kit allocation table when any new sales order line detail add in sales order */  \n" +
                "		IF (pActionStatus != 'DELETE') THEN  \n" +
                "			IF (pActionStatus = 'UPDATE')  \n" +
                "            THEN  \n" +
                "				/* Delete kit_allocation_assy_detail if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "				SET 	kasd.updatedBy = pUserID,  \n" +
                "					kasd.isDeleted = 1,  \n" +
                "					kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kasd.deletedBy = pUserId,  \n" +
                "					kasd.updateByRoleId = pRoleID,  \n" +
                "					kasd.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems kal  \n" +
                "				SET 	kal.updatedBy = pUserID,  \n" +
                "					kal.isDeleted = 1,  \n" +
                "					kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kal.deletedBy = pUserId,  \n" +
                "					kal.updateByRoleId = pRoleID,  \n" +
                "					kal.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems_alternatepart if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "				SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "				-- In this case assembly was change on sales order line detail so internally we do deallocate UMID which contail old assembly (Old Kit)  \n" +
                "				IF(pIsOnlyQtyChange = 0) THEN  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "						ka.updatedBy = pUserID,  \n" +
                "						ka.updateByRoleId = pRoleID,  \n" +
                "						ka.`status` = 'D',  \n" +
                "						ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "					WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND ka.`status` = 'A';  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (pActionStatus = 'UPDATE' OR pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "            THEN  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "                THEN  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_assy_detail if any sub assembly line delete from BOM */  \n" +
                "					UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "					SET 	kasd.updatedBy = pUserID,  \n" +
                "							kasd.isDeleted = 1,  \n" +
                "							kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "							kasd.deletedBy = pUserId,  \n" +
                "							kasd.updateByRoleId = pRoleID,  \n" +
                "							kasd.deleteByRoleId = pRoleID  \n" +
                "						WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND NOT EXISTS (SELECT 	1  \n" +
                "													FROM 	tempResultForUpdate r  \n" +
                "													WHERE 	r.salesOrderDetailID = kasd.refSalesOrderDetID  \n" +
                "															AND r.prPerPartID = kasd.partId)  \n" +
                "								AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal  \n" +
                "					SET 	kal.updatedBy = pUserID,  \n" +
                "						kal.isDeleted = 1,  \n" +
                "						kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kal.deletedBy = pUserId,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "						kal.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kal.partID = pPartID  \n" +
                "							AND NOT EXISTS ( 	SELECT 	1  \n" +
                "								FROM 	tempResultForLineItem r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kal.refSalesOrderDetID  \n" +
                "										AND r.partID = kal.partID  \n" +
                "										AND r.id = kal.refRfqLineitem  	)  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any line delete from BOM*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kala.partID = pPartID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "												FROM 	tempResultForLineItemAlternatePart r  \n" +
                "												WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "														AND r.partID = kala.partID  \n" +
                "														AND r.mfgPNID = kala.mfgPNID  \n" +
                "														AND r.rfqLineitemsID = kala.refRfqLineitem)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems_alternatepart if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.rfqLineitemsID = kala.refRfqLineitem  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  )  \n" +
                "						AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate */  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				/* Update kit_allocation_assy_detail if any change in sales order detail line or any change in kit */  \n" +
                "				/* In case of pActionStatus = 'UPDATE' we have to update only kit_allocation_assy_detail table becuse we only update qty, mrpqty, kitqty and update assy case cover in above query*/  \n" +
                "				UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd  \n" +
                "				SET 	ka.partId = tsd.prPerPartID,  \n" +
                "					ka.refSalesOrderDetID = tsd.salesOrderDetailID,  \n" +
                "					ka.perAssyBuildQty = tsd.perAssyBuildQty,  \n" +
                "					ka.totalAssyBuildQty = tsd.totalAssyBuildQty,  \n" +
                "					ka.kitQty = tsd.kitQty,  \n" +
                "					ka.totalAssyMrpQty = tsd.totalAssyMrpQty,  \n" +
                "					ka.mrpQty = tsd.mrpQty,  \n" +
                "					ka.bomInternalVersion = tsd.liveInternalVersion,  \n" +
                "					ka.bomInternalVersionString = tsd.liveVersion,  \n" +
                "					ka.bomAssyLevel = tsd.bomAssyLevel,  \n" +
                "					ka.updatedBy = tsd.updatedBy,  \n" +
                "					ka.updateByRoleId = tsd.updateByRoleId  \n" +
                "				WHERE	ka.id IS NOT NULL  \n" +
                "						AND ka.partId = tsd.prPerPartID  \n" +
                "						AND ka.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND ka.isDeleted = 0;  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                " THEN  \n" +
                "  \n" +
                "					/* Update kit_allocation_lineitems table if any change in BOM line */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal, tempResultForLineItem tlt  \n" +
                "					SET 	kal.refSalesOrderDetID = tlt.refSalesOrderDetID,  \n" +
                "						kal.refRfqLineitem = tlt.id,  \n" +
                "						kal.lineID = tlt.lineID,  \n" +
                "						kal.qpa = tlt.qpa,  \n" +
                "						kal.dnpQty = tlt.dnpQty,  \n" +
                "						kal.isInstall = tlt.isInstall,  \n" +
                "						kal.isPurchase = tlt.isPurchase,  \n" +
                "						kal.isBuyDNPQty = tlt.isBuyDNPQty,  \n" +
                "						kal.custPN = tlt.custPN,  \n" +
                "						kal.custPNID = tlt.custPNID,  \n" +
                "						kal.uomID = tlt.uomID,  \n" +
                "						kal.partID = tlt.partID,  \n" +
                "						kal.numOfPosition = tlt.numOfPosition,  \n" +
                "						kal.description = tlt.description,  \n" +
                "						kal.restrictCPNUseWithPermissionStep = tlt.restrictCPNUseWithPermissionStep,  \n" +
                "						kal.restrictCPNUsePermanentlyStep = tlt.restrictCPNUsePermanentlyStep,  \n" +
                "						kal.restrictCPNUseInBOMStep = tlt.restrictCPNUseInBOMStep,  \n" +
                "						kal.customerApprovalCPN = tlt.customerApprovalCPN,  \n" +
                "						kal.isNotRequiredKitAllocation = tlt.isNotRequiredKitAllocation,  \n" +
                "						kal.notRequiredKitAllocationReason = tlt.notRequiredKitAllocationReason,  \n" +
                "						kal.updatedBy = pUserID,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "                        kal.refDesig = tlt.refDesig,  \n" +
                "                        kal.customerRev = tlt.customerRev,  \n" +
                "                        kal.customerDescription = tlt.customerDescription,  \n" +
                "                        kal.dnpDesig = tlt.dnpDesig,  \n" +
                "                        kal.programingStatus = tlt.programingStatus,  \n" +
                "                        kal.cust_lineID = tlt.cust_lineID,  \n" +
                "                        kal.substitutesAllow = tlt.substitutesAllow,  \n" +
                "                        kal.numOfRows = tlt.numOfRows,  \n" +
                "                        kal.customerPartDesc = tlt.customerPartDesc,  \n" +
                "                        kal.qpaDesignatorStep = tlt.qpaDesignatorStep,  \n" +
                "						kal.mergeLines = tlt.mergeLines,  \n" +
                "						kal.lineMergeStep = tlt.lineMergeStep,  \n" +
                "						kal.duplicateCPNStep = tlt.duplicateCPNStep,  \n" +
                "						kal.requireMountingTypeStep = tlt.requireMountingTypeStep,  \n" +
                "						kal.requireFunctionalTypeStep = tlt.requireFunctionalTypeStep,  \n" +
                "						kal.refDesigCount = tlt.refDesigCount,  \n" +
                "						kal.isObsoleteLine = tlt.isObsoleteLine,  \n" +
                "						kal.customerApprovalForQPAREFDESStep = tlt.customerApprovalForQPAREFDESStep,  \n" +
                "						kal.customerApprovalForBuyStep = tlt.customerApprovalForBuyStep,  \n" +
                "						kal.customerApprovalForPopulateStep = tlt.customerApprovalForPopulateStep,  \n" +
                "						kal.customerApprovalCPNBy = tlt.customerApprovalCPNBy,  \n" +
                "						kal.customerApprovalCPNDate = tlt.customerApprovalCPNDate,  \n" +
                "						kal.dnpDesigCount = tlt.dnpDesigCount,  \n" +
                "						kal.requireMountingTypeError = tlt.requireMountingTypeError,  \n" +
                "						kal.requireFunctionalTypeError = tlt.requireFunctionalTypeError,  \n" +
                "						kal.dnpQPARefDesStep = tlt.dnpQPARefDesStep,  \n" +
                "						kal.customerApprovalForDNPQPAREFDESStep = tlt.customerApprovalForDNPQPAREFDESStep,  \n" +
                "						kal.customerApprovalForDNPBuyStep = tlt.customerApprovalForDNPBuyStep,  \n" +
                "						kal.isSupplierToBuy = tlt.isSupplierToBuy  \n" +
                "					WHERE	kal.id IS NOT NULL  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any change in MFR PN on particular line*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  \n" +
                "										AND kala.id IS NOT NULL  \n" +
                "							)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala, tempResultForLineItemAlternatePart tlia  \n" +
                "					SET 	kala.refSalesOrderDetID = tlia.refSalesOrderDetID,  \n" +
                "						kala.refRfqLineitem = tlia.rfqLineItemsID,  \n" +
                "						kala.refRfqLineItemAlternatePartId = tlia.id,  \n" +
                "						kala.distributor = tlia.distributor,  \n" +
                "						kala.distMfgCodeID = tlia.distMfgCodeID,  \n" +
                "						kala.distPN = tlia.distPN,  \n" +
                "						kala.distMfgPNID = tlia.distMfgPNID,  \n" +
                "						kala.mfgCode = tlia.mfgCode,  \n" +
                "						kala.mfgCodeID = tlia.mfgCodeID,  \n" +
                "						kala.mfgPN = tlia.mfgPN,  \n" +
                "						kala.mfgPNID = tlia.mfgPNID,  \n" +
                "						kala.description = tlia.description,  \n" +
                "						kala.RoHSStatusID = tlia.RoHSStatusID,  \n" +
                "						kala.parttypeID = tlia.parttypeID,  \n" +
                "						kala.mountingtypeID = tlia.mountingtypeID,  \n" +
                "						kala.partcategoryID = tlia.partcategoryID,  \n" +
                "						kala.partID = tlia.partID,  \n" +
                "						kala.customerApproval = tlia.customerApproval,  \n" +
                "						kala.customerApprovalBy = tlia.customerApprovalBy,  \n" +
                "						kala.customerApprovalDate = tlia.customerApprovalDate,  \n" +
                "						kala.restrictUsePermanentlyStep = tlia.restrictUsePermanentlyStep,  \n" +
                "						kala.restrictUseWithPermissionStep = tlia.restrictUseWithPermissionStep,  \n" +
                "						kala.restrictUseInBOMStep = tlia.restrictUseInBOMStep,  \n" +
                "						kala.restrictUseInBOMWithPermissionStep = tlia.restrictUseInBOMWithPermissionStep,  \n" +
                "						kala.mismatchMountingTypeStep = tlia.mismatchMountingTypeStep,  \n" +
                "						kala.approvedMountingType = tlia.approvedMountingType,  \n" +
                "						kala.mismatchFunctionalCategoryStep = tlia.mismatchFunctionalCategoryStep,  \n" +
                "						kala.uomMismatchedStep = tlia.uomMismatchedStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasStep = tlia.restrictUseInBOMExcludingAliasStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasWithPermissionStep = tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						kala.restrictUseExcludingAliasStep = tlia.restrictUseExcludingAliasStep,  \n" +
                "						kala.restrictUseExcludingAliasWithPermissionStep = tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "						kala.updatedBy = pUserID,  \n" +
                "						kala.updateByRoleId=pRoleID,  \n" +
                "						kala.deleteByRoleId=tlia.deleteByRoleId,  \n" +
                "                        kala.mfgVerificationStep = tlia.mfgVerificationStep,  \n" +
                "						kala.mfgDistMappingStep = tlia.mfgDistMappingStep,  \n" +
                "						kala.mfgCodeStep = tlia.mfgCodeStep,  \n" +
                "						kala.distVerificationStep = tlia.distVerificationStep,  \n" +
                "						kala.distCodeStep = tlia.distCodeStep,  \n" +
                "						kala.getMFGPNStep = tlia.getMFGPNStep,  \n" +
                "						kala.obsoletePartStep = tlia.obsoletePartStep,  \n" +
                "						kala.mfgGoodPartMappingStep = tlia.mfgGoodPartMappingStep,  \n" +
                "						kala.mfgPNStep = tlia.mfgPNStep,  \n" +
                "						kala.distPNStep = tlia.distPNStep,  \n" +
                "						kala.badMfgPN = tlia.badMfgPN,  \n" +
                "						kala.distGoodPartMappingStep = tlia.distGoodPartMappingStep,  \n" +
                "						kala.nonRohsStep = tlia.nonRohsStep,  \n" +
                "						kala.epoxyStep = tlia.epoxyStep,  \n" +
                "						kala.invalidConnectorTypeStep = tlia.invalidConnectorTypeStep,  \n" +
                "						kala.duplicateMPNInSameLineStep = tlia.duplicateMPNInSameLineStep,  \n" +
                "						kala.pickupPadRequiredStep = tlia.pickupPadRequiredStep,  \n" +
                "						kala.matingPartRquiredStep = tlia.matingPartRquiredStep,  \n" +
                "						kala.driverToolsRequiredStep = tlia.driverToolsRequiredStep,  \n" +
                "						kala.functionalTestingRequiredStep = tlia.functionalTestingRequiredStep,  \n" +
                "						kala.mismatchValueStep = tlia.mismatchValueStep,  \n" +
                "						kala.mismatchPackageStep = tlia.mismatchPackageStep,  \n" +
                "						kala.mismatchToleranceStep = tlia.mismatchToleranceStep,  \n" +
                "						kala.mismatchTempratureStep = tlia.mismatchTempratureStep,  \n" +
                "						kala.mismatchPowerStep = tlia.mismatchPowerStep,  \n" +
                "						kala.programingRequiredStep = tlia.programingRequiredStep,  \n" +
                "						kala.mismatchColorStep = tlia.mismatchColorStep,  \n" +
                "						kala.isCustomerUnAppoval = tlia.isCustomerUnAppoval,  \n" +
                "						kala.customerUnAppovalBy = tlia.customerUnAppovalBy,  \n" +
                "						kala.customerUnAppovalDate = tlia.customerUnAppovalDate,  \n" +
                "						kala.mismatchNumberOfRowsStep = tlia.mismatchNumberOfRowsStep,  \n" +
                "						kala.partPinIsLessthenBOMPinStep = tlia.partPinIsLessthenBOMPinStep,  \n" +
                "						kala.tbdPartStep = tlia.tbdPartStep,  \n" +
                "						kala.exportControlledStep = tlia.exportControlledStep,  \n" +
                "						kala.isUnlockApprovedPart = tlia.isUnlockApprovedPart,  \n" +
                "						kala.unknownPartStep = tlia.unknownPartStep,  \n" +
                "						kala.defaultInvalidMFRStep = tlia.defaultInvalidMFRStep,  \n" +
                "						kala.suggestedGoodPartStep = tlia.suggestedGoodPartStep,  \n" +
                "						kala.suggestedGoodDistPartStep = tlia.suggestedGoodDistPartStep,  \n" +
                "						kala.mismatchRequiredProgrammingStep = tlia.mismatchRequiredProgrammingStep,  \n" +
                "						kala.mappingPartProgramStep = tlia.mappingPartProgramStep,  \n" +
                "						kala.mismatchCustomPartStep = tlia.mismatchCustomPartStep,  \n" +
                "						kala.suggestedByApplicationMsg = tlia.suggestedByApplicationMsg,  \n" +
                "						kala.suggestedByApplicationStep = tlia.suggestedByApplicationStep,  \n" +
                "						kala.mismatchProgrammingStatusStep = tlia.mismatchProgrammingStatusStep  \n" +
                "					WHERE	kala.id IS NOT NULL  \n" +
                "							AND kala.refSalesOrderDetID = tlia.refSalesOrderDetID  \n" +
                "							AND kala.refRfqLineitem = tlia.rfqLineItemsID  \n" +
                "							AND kala.mfgPNID = tlia.mfgPNID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate*/  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/*SELECT * from tempResultForUpdate;  \n" +
                "			 SELECT 	ts.prPerPartID,		ts.salesOrderDetailID,		ts.perAssyBuildQty, 		ts.totalAssyBuildQty,  \n" +
                "				ts.kitQty,			ts.totalAssyMrpQty,		ts.mrpQty,			ts.liveInternalVersion,  \n" +
                "				ts.liveVersion,		ts.bomAssyLevel,		ts.updatedBy, 			ts.createdBy,  \n" +
                "				ts.createByRoleId, 		ts.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate ts  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = ts.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = ts.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL; */  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_assy_detail */  \n" +
                "			INSERT INTO kit_allocation_assy_detail (  \n" +
                "				partId, 		refSalesOrderDetID, 		perAssyBuildQty, 		totalAssyBuildQty,  \n" +
                "				kitQty,     		totalAssyMrpQty,     		mrpQty,     			bomInternalVersion,  \n" +
                "				bomInternalVersionString,     				bomAssyLevel,     		createdBy,  \n" +
                "				updatedBy,		createByRoleId,    		updateByRoleId  \n" +
                "			)  \n" +
                "			SELECT 	tsd.prPerPartID,		tsd.salesOrderDetailID,		tsd.perAssyBuildQty, 		tsd.totalAssyBuildQty,  \n" +
                "				tsd.kitQty,			tsd.totalAssyMrpQty,		tsd.mrpQty,			tsd.liveInternalVersion,  \n" +
                "				tsd.liveVersion,		tsd.bomAssyLevel,		tsd.updatedBy, 			tsd.createdBy,  \n" +
                "				tsd.createByRoleId, 		tsd.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate tsd  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = tsd.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems */  \n" +
                "			INSERT INTO kit_allocation_lineitems (  \n" +
                "				refSalesOrderDetID, 		refRfqLineitem, 		lineID, 		qpa,  \n" +
                "				dnpQty,     			isInstall,     			isPurchase,     	isBuyDNPQty,  \n" +
                "				custPN,     			custPNID,     			uomID,     		partID,  \n" +
                "				numOfPosition,  		description,     		restrictCPNUseWithPermissionStep,  \n" +
                "				restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,     	customerApprovalCPN,    isNotRequiredKitAllocation,  \n" +
                "				notRequiredKitAllocationReason, createdBy,     			updatedBy,    		createByRoleId,  \n" +
                "				updateByRoleId,		refDesig,	customerRev,	customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep, duplicateCPNStep, requireMountingTypeStep, requireFunctionalTypeStep,  \n" +
                "				refDesigCount, isObsoleteLine, customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount, requireMountingTypeError, requireFunctionalTypeError,  \n" +
                "				dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep, customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "			)  \n" +
                "			SELECT 	tlt.refSalesOrderDetID,	    		tlt.id,			tlt.lineID,			tlt.qpa,  \n" +
                "				tlt.dnpQty,				tlt.isInstall,		tlt.isPurchase, 	    	tlt.isBuyDNPQty,  \n" +
                "				tlt.custPN, 	      	    		tlt.custPNID,	    	tlt.uomID, 		    	tlt.partID,  \n" +
                "				tlt.numOfPosition,			tlt.description,	tlt.restrictCPNUseWithPermissionStep,  \n" +
                "				tlt.restrictCPNUsePermanentlyStep,	tlt.restrictCPNUseInBOMStep,				tlt.customerApprovalCPN,  \n" +
                "				tlt.isNotRequiredKitAllocation,		tlt.notRequiredKitAllocationReason,    		pUserID,  \n" +
                "				pUserID,				pRoleID,     		pRoleID,	tlt.refDesig,	tlt.customerRev,	tlt.customerDescription,  \n" +
                "                tlt.dnpDesig,	tlt.programingStatus,	tlt.cust_lineID,	tlt.substitutesAllow,	tlt.numOfRows, tlt.customerPartDesc,  \n" +
                "                tlt.qpaDesignatorStep, 	tlt.mergeLines, 	tlt.lineMergeStep, 		tlt.duplicateCPNStep, 		tlt.requireMountingTypeStep,  \n" +
                "                tlt.requireFunctionalTypeStep, 	tlt.refDesigCount, 		tlt.isObsoleteLine, 	tlt.customerApprovalForQPAREFDESStep,  \n" +
                "                tlt.customerApprovalForBuyStep, 	tlt.customerApprovalForPopulateStep, 	tlt.customerApprovalCPNBy,  \n" +
                "                tlt.customerApprovalCPNDate, 	tlt.dnpDesigCount, 		tlt.requireMountingTypeError, 	tlt.requireFunctionalTypeError,  \n" +
                "				tlt.dnpQPARefDesStep, 		tlt.customerApprovalForDNPQPAREFDESStep, 		tlt.customerApprovalForDNPBuyStep, 	tlt.isSupplierToBuy  \n" +
                "			FROM 	tempResultForLineItem tlt  \n" +
                "			LEFT JOIN kit_allocation_lineitems kal ON kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.partID = tlt.partID  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.isDeleted = 0  \n" +
                "			WHERE 	kal.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems_alternatepart */  \n" +
                "			INSERT INTO kit_allocation_lineitems_alternatepart (  \n" +
                "				refSalesOrderDetID,		refKitAllocationLineItemId,     	refRfqLineitem,     		refRfqLineItemAlternatePartId,  \n" +
                "				distributor,     		distMfgCodeID,     			distPN,     			distMfgPNID,  \n" +
                "				mfgCode,     			mfgCodeID,     				mfgPN,     			mfgPNID,  \n" +
                "				description,    		RoHSStatusID,  \n" +
                "				parttypeID,     		mountingtypeID,     			partcategoryID,     		partID,  \n" +
                "				customerApproval,     		customerApprovalBy,     		customerApprovalDate,   	restrictUsePermanentlyStep,  \n" +
                "				restrictUseWithPermissionStep, 	restrictUseInBOMStep,     		restrictUseInBOMWithPermissionStep,  \n" +
                "				mismatchMountingTypeStep,     	approvedMountingType,     		mismatchFunctionalCategoryStep,	uomMismatchedStep,  \n" +
                "				restrictUseInBOMExcludingAliasStep,	    				restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,                          	createdBy,  \n" +
                "				updatedBy,    createByRoleId,    	updateByRoleId,   mfgVerificationStep, 	mfgDistMappingStep,  \n" +
                "				mfgCodeStep, distVerificationStep, distCodeStep, getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep,  \n" +
                "				mfgPNStep, distPNStep, badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep,  \n" +
                "				duplicateMPNInSameLineStep, pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep,  \n" +
                "				functionalTestingRequiredStep, mismatchValueStep, mismatchPackageStep, mismatchToleranceStep,  \n" +
                "				mismatchTempratureStep, mismatchPowerStep, programingRequiredStep, mismatchColorStep, isCustomerUnAppoval,  \n" +
                "				customerUnAppovalBy, customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep, tbdPartStep,  \n" +
                "				exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep, suggestedGoodPartStep,  \n" +
                "				suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep, mismatchCustomPartStep,  \n" +
                "				suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "			)  \n" +
                "			SELECT 	tlia.refSalesOrderDetID, 	fun_getKitLineItemPKIdForKitAlternate(tlia.rfqLineItemsID, pSalesOrderDetailID) refKitAllocationLineItemId,  \n" +
                "				tlia.rfqLineItemsID,		tlia.id,			tlia.distributor,		tlia.distMfgCodeID,  \n" +
                "				tlia.distPN, 	    		tlia.distMfgPNID,		tlia.mfgCode,			tlia.mfgCodeID,  \n" +
                "				tlia.mfgPN,			tlia.mfgPNID,			tlia.description,  \n" +
                "                tlia.RoHSStatusID,		tlia.parttypeID, 		tlia.mountingtypeID,  \n" +
                "				tlia.partcategoryID,		tlia.partID,			tlia.customerApproval,		tlia.customerApprovalBy,  \n" +
                "				tlia.customerApprovalDate,	tlia.restrictUsePermanentlyStep,				tlia.restrictUseWithPermissionStep,  \n" +
                "				tlia.restrictUseInBOMStep,	tlia.restrictUseInBOMWithPermissionStep, 	    		tlia.mismatchMountingTypeStep,  \n" +
                "				tlia.approvedMountingType,	tlia.mismatchFunctionalCategoryStep,		    		tlia.uomMismatchedStep,  \n" +
                "				tlia.restrictUseInBOMExcludingAliasStep,	    		tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				tlia.restrictUseExcludingAliasStep,		    		tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "				pUserID, pUserID,    pRoleID,     pRoleID, tlia.mfgVerificationStep, 	tlia.mfgDistMappingStep,  \n" +
                "				tlia.mfgCodeStep, tlia.distVerificationStep, tlia.distCodeStep, tlia.getMFGPNStep, tlia.obsoletePartStep, tlia.mfgGoodPartMappingStep,  \n" +
                "				tlia.mfgPNStep, tlia.distPNStep, tlia.badMfgPN, tlia.distGoodPartMappingStep, tlia.nonRohsStep, tlia.epoxyStep, tlia.invalidConnectorTypeStep,  \n" +
                "				tlia.duplicateMPNInSameLineStep, tlia.pickupPadRequiredStep, tlia.matingPartRquiredStep, tlia.driverToolsRequiredStep,  \n" +
                "				tlia.functionalTestingRequiredStep, tlia.mismatchValueStep, tlia.mismatchPackageStep, tlia.mismatchToleranceStep,  \n" +
                "				tlia.mismatchTempratureStep, tlia.mismatchPowerStep, tlia.programingRequiredStep, tlia.mismatchColorStep, tlia.isCustomerUnAppoval,  \n" +
                "				tlia.customerUnAppovalBy, tlia.customerUnAppovalDate, tlia.mismatchNumberOfRowsStep, tlia.partPinIsLessthenBOMPinStep, tlia.tbdPartStep,  \n" +
                "				tlia.exportControlledStep, tlia.isUnlockApprovedPart, tlia.unknownPartStep, tlia.defaultInvalidMFRStep, tlia.suggestedGoodPartStep,  \n" +
                "				tlia.suggestedGoodDistPartStep, tlia.mismatchRequiredProgrammingStep, tlia.mappingPartProgramStep, tlia.mismatchCustomPartStep,  \n" +
                "				tlia.suggestedByApplicationMsg, tlia.suggestedByApplicationStep, tlia.mismatchProgrammingStatusStep  \n" +
                "			FROM 	tempResultForLineItemAlternatePart tlia  \n" +
                "			LEFT JOIN kit_allocation_lineitems_alternatepart kala ON tlia.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "							AND tlia.partID = kala.partID  \n" +
                "							AND tlia.rfqLineItemsID = kala.refRfqLineitem  \n" +
                "							AND tlia.mfgPNID = kala.mfgPNID  \n" +
                "							AND kala.isDeleted = 0  \n" +
                "			WHERE 	kala.id IS NULL;  \n" +
                "  \n" +
                "			CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT 1 AS IsSuccess, NULL AS ErrorCode;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS IsSuccess, 'ERR_KIT01' AS ErrorCode;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1096,'1.00','V1','Bug 36052: [Main Branch] Getting Multiple tabs for same Assembly should not be there in kit allocation - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1096:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveSplitUMIDDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSplitUMIDDetail`(  \n" +
                "	IN pUIDID INT,  \n" +
                "    IN pSplitUID VARCHAR(20),  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "    IN pPackaging INT,  \n" +
                "    IN pInventoryType VARCHAR(10),  \n" +
                "	IN pSplitCount DECIMAL(18,8),  \n" +
                "	IN pSplitUnit DECIMAL(18,8),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "    IN pIsKitAllocation TINYINT,  \n" +
                "    IN pUOM INT,  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "	IN pCountApprovalHistoryData JSON  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDHistoryID INT;  \n" +
                "    DECLARE v_newSplitUID INT;  \n" +
                "    DECLARE v_maxKitList INT;  \n" +
                "    DECLARE v_consumedQtyDiff INT;  \n" +
                "    DECLARE v_kitID INT;  \n" +
                "    DECLARE v_kitAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_totalAllocatedUnits DECIMAL(18,8);  \n" +
                "  \n" +
                "    IF(pSplitUID IS NOT NULL) THEN  \n" +
                "			#Insert split umid into component_sid_stock table  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSidStk AS  \n" +
                "			SELECT id,uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus,  \n" +
                "						costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "						mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "						sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "						customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "						rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays  \n" +
                "			FROM component_sid_stock WHERE id = pUIDID;  \n" +
                "			INSERT INTO component_sid_stock  \n" +
                "			(  \n" +
                "					uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, stockInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID,  \n" +
                "					mfrDateCode, rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID,  \n" +
                "					pkgQty, orgQty, pkgUnit, orgPkgUnit, binID, packaging, fromBin, orgRecBin, fromWarehouse, fromDepartment,  \n" +
                "					orgRecWarehouse, orgRecDepartment, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    isDeleted, createdBy, createByRoleId, createdAt, updatedBy, updateByRoleId, updatedAt  \n" +
                "			)  \n" +
                "			SELECT 	pSplitUID, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, pInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "					rohsStatusID, woID, woNumber, id, uid, IFNULL(parentUIDId,id), IFNULL(parentUID,uid),  \n" +
                "					pSplitCount, pSplitCount, pSplitUnit, pSplitUnit, pToBinID, pPackaging, pFromBinID, pFromBinID,  \n" +
                "					pFromWHID, pFromParentWH, pFromWHID, pFromParentWH, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    0 , pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime()  \n" +
                "			FROM tempComponentSidStk;  \n" +
                "			SET v_newSplitUID = LAST_INSERT_ID();  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "			# have to update count/unit into parent umid after split  \n" +
                "			IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "				UPDATE 	component_sid_stock  \n" +
                "				SET 	pkgUnit = pPkgUnit,  \n" +
                "						pkgQty = pPkgCount,  \n" +
                "						isinStk = 1,  \n" +
                "						updatedBy = pUserID,  \n" +
                "						updateByRoleId = pUserRoleID,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = pUIDID;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			# If parent UMID is allocated to kit then remove allocation if remaining qty is less than allocated qty  \n" +
                "			IF(pIsKitAllocation = 1) THEN  \n" +
                "					#Insert current kit allocated id into table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "					#Insert other kit detail in temp table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "					CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "					SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "							rp.promiseShipDate,  \n" +
                "							fun_convertUOM(k.allocatedUOM, pUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "					FROM 	kit_allocation k  \n" +
                "					LEFT JOIN (  \n" +
                "						SELECT 	salesOrderDetID,  \n" +
                "							(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "							MIN(poDueDate) promiseShipDate  \n" +
                "							FROM 	vu_release_plan_detail  \n" +
                "							GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "					WHERE 	k.status = 'A'  \n" +
                "					AND		k.refuidid = pUIDID  \n" +
                "					ORDER BY rp.promiseShipDate DESC;  \n" +
                "  \n" +
                "					SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO v_totalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "					#Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "					IF(v_totalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						SET v_consumedQtyDiff = v_totalAllocatedUnits - pSplitUnit;  \n" +
                "						WHILE v_consumedQtyDiff > 0 DO  \n" +
                "							IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "								SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "								INTO 	v_kitID,	v_kitAllocatedUnit  \n" +
                "								FROM 	tempOtherSharedKit tk  \n" +
                "								WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "								IF(v_kitID IS NOT NULL) THEN  \n" +
                "									UPDATE tempOtherSharedKit tk  \n" +
                "									SET 	tk.status = 'D'  \n" +
                "									WHERE 	tk.id = v_kitID;  \n" +
                "  \n" +
                "									UPDATE 	kit_allocation k  \n" +
                "									SET 	k.status = 'D',  \n" +
                "										k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "										k.returnQty = pSplitCount,  \n" +
                "										k.returnUnit = pSplitUnit,  \n" +
                "										k.returnUOM = pUOM,  \n" +
                "										k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "										k.updatedBy = pUserID,  \n" +
                "										k.updateByRoleId = pUserRoleID,  \n" +
                "										k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "									WHERE 	k.id = v_kitID;  \n" +
                "  \n" +
                "									INSERT INTO tempKitID (tempKitId) VALUES (v_kitID);  \n" +
                "  \n" +
                "									SET v_consumedQtyDiff = v_consumedQtyDiff - v_kitAllocatedUnit;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END WHILE;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			# Manage deallocation approval history data  \n" +
                "			IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "				#Insert selected count approval records in temp table to return count approval Data  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM JSON_TABLE(  \n" +
                "						pCountApprovalHistoryData,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "							approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "							approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "							deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "							approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "							isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "					)  \n" +
                "				) AS countApproval;  \n" +
                "				SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "						INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "				FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            # Insert log in UMID history page  for parent umid  \n" +
                "			INSERT INTO component_sid_stock_history  \n" +
                "				(  \n" +
                "					transType, 			actionPerformed, 	refUIDId, 			uid,  \n" +
                "					splitUIDId,			splitUID,			fromUIDId, 			fromUID,  \n" +
                "					parentUIDId, 		parentUID,  		refcompid, 			binID,  \n" +
                "					warehouseID, 		deptWHID, 			currentQty,		 	currentUnit,  \n" +
                "					splitQty,		 	splitUnit,			uom,  \n" +
                "					isDeleted,			createdBy, 			createdAt, 		  	createByRoleId,  \n" +
                "					updatedBy,			updatedAt,		 	updateByRoleId,		approvedDate,  \n" +
                "					approvalReason,	  	approvedBy,			deallocatedKitDesc, 	approvedByRoleId,  \n" +
                "					isApproved,			orgQty,				orgUnit  \n" +
                "				)  \n" +
                "			SELECT  \n" +
                "					'Split UMID',		'Split UMID',		pUIDID,		css.uid,		v_newSplitUID, 		pSplitUID,  \n" +
                "					css.fromUIDId, 		css.fromUID,		css.parentUIDId, 		css.parentUID, 			css.refcompid,  \n" +
                "					css.binID,			b.warehouseID,		w.parentWHID deptWHID,			pPkgCount,			pPkgUnit,  \n" +
                "					pSplitCount,		pSplitUnit,	  		css.uom,		  		0,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),      		pUserRoleID,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),	   pUserRoleID,			v_approvedDate,  \n" +
                "					v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,  \n" +
                "					v_isApproved,       css.orgQty,		css.orgPkgUnit  \n" +
                "			FROM  	component_sid_stock   css  \n" +
                "			JOIN 	binmst b ON css.binID = b.id  \n" +
                "			JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "			WHERE   css.isdeleted = 0  \n" +
                "			AND 	css.id = pUIDID;  \n" +
                "  \n" +
                "            IF(pIsKitAllocation = 1) THEN  \n" +
                "				/* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "				SET v_newUIDHistoryID = LAST_INSERT_ID();  \n" +
                "				UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDHistoryID WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "			END IF;  \n" +
                "    END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "    SELECT cs.* FROM component_sid_stock cs WHERE cs.id = v_newSplitUID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentCPNAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCPNAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT * FROM (  \n" +
                "				SELECT 		`com`.`id`,  \n" +
                "						CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "						`com`.`mfgPN` orgMfgPN,  \n" +
                "						`com`.`PIDCode`,  \n" +
                "						`com`.`isGoodPart`,  \n" +
                "						`mfgCodemst`.`id` AS `mfgcodeID`,  \n" +
                "						`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "						`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "                        `mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
                "						`com`.`restrictUsePermanently`,  \n" +
                "						`com`.`restrictUSEwithpermission`,  \n" +
                "						`com`.`restrictPackagingUsePermanently`,  \n" +
                "						`com`.`restrictPackagingUseWithpermission`  \n" +
                "				FROM 		`component` AS `com`  \n" +
                "				INNER JOIN 	`mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND `mfgCodemst`.`deletedAt` IS NULL  \n" +
                "				WHERE 		`com`.`deletedAt` IS NULL  \n" +
                "							AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`)  \n" +
                "							AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)  \n" +
                "							AND `com`.`isCPN` = TRUE  \n" +
                "		) AS a  \n" +
                "	WHERE 	(  \n" +
                "			(pSearch IS NULL AND 1=1)  \n" +
                "			OR (  \n" +
                "				pSearch IS NOT NULL AND (  \n" +
                "					mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "						OR EXISTS (  \n" +
                "								SELECT 	1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = `a` .`id`  \n" +
                "										AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "							)  \n" +
                "				)  \n" +
                "			)  \n" +
                "	)  \n" +
                "	ORDER BY mfgPN;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			salesOrderDetailID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "   SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");             \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;  \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match  \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "				 END IF;  \n" +
                "				-- insert all values after seprator split  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "				IF (pCategory = 'P') THEN  \n" +
                "					-- create dynamic query to insert in packing slip  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
                "				ELSE  \n" +
                "					-- create dynamic query to insert in recieving material  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template  \n" +
                "				barcodeMatch_loop:LOOP  \n" +
                "					-- get all five selected values  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
                "					-- exit loop if no record found for barcode match  \n" +
                "					IF exit_loop THEN  \n" +
                "						CLOSE barcodeMatch_cursor;  \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;  \n" +
                "					-- dynamic query to get dellimeter string with values from string  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
                "					EXECUTE stmtdelimiter;  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
                "  \n" +
                "					-- get delimiter values from string  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
                "					-- check for field type is static or dynamic  \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN  \n" +
                "						-- component_sid_stock  \n" +
                "						-- get static field name from barcode table delimiter data element id  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "							SET MFG_Part_No = delimiter_value_data;  \n" +
                "							/* If component id is not found */  \n" +
                "							IF(pComponentID = 0)  \n" +
                "                            THEN  \n" +
                "								/* Get component data */  \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
                "								) a  \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN  \n" +
                "									/* If component is more that one then remove supplier from list */  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;  \n" +
                "									ELSE  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
                "											SET v_componentCount=0;  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
                "										ELSE  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* If component id is found */  \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */  \n" +
                "							IF v_componentCount > 1 THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If bad part found */  \n" +
                "							IF (v_isGoodPart != 1) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (@MFGType = 'DIST') THEN  \n" +
                "								SET v_SupplierID = v_componentId;  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check kit allocation */  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(  \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												GROUP BY 	custPNID, rla.partID  \n" +
                "											) b  \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										GROUP BY b.lineID, b.assyId  \n" +
                "									) a;  \n" +
                "  \n" +
                "								/* BOM line not found  */  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE  \n" +
                "									/* Restrict use bom */  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									/* BOM line contain any error */  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */  \n" +
                "							IF  v_componentCount = 1 THEN  \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
                "								ELSE  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Not in use */  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
                "							ELSE  \n" +
                "								SET exit_loop = FALSE;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for binid */  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for po number */  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for so number */  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						/* Set dynamic query for other than system generated */  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					IF (v_isGoodPart = 2) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					IF (v_isCPNFlag = 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
                "					IF @Mfgmatched = 0  THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF @mfgCount = 0 THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pCPN = 1) THEN  \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN  \n" +
                "					/* If not fire any validation */  \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "  \n" +
                "						-- must call statements in sequence  \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
                "  \n" +
                "						IF (pprefix IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
                "                        END IF;  \n" +
                "  \n" +
                "						IF (pnickName IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "						DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "						/* Add success result in save error table */  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "						ELSE  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
                "						END IF;  \n" +
                "						/* Add data in table of delimeter table */  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
                "						END IF;  \n" +
                "						/* select detail of error table */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
                "  \n" +
                "						/* Select data of component */  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,  \n" +
                "							csup.minimum AS supplierMinimum,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
                "						/* select data of cpn */  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;  \n" +
                "  \n" +
                "						/* select detail of bom */  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						/* Found any error then select error  */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					END IF;  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					/* Add success data in temp error table */  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
                "					IF (pCategory = 'M') THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.id AS supplierMFGPNID,  \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "				SELECT 1;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "				SELECT 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END block2;  \n" +
                "	ELSE  \n" +
                "		IF (pIsFromUID = 1) THEN  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;  \n" +
                "		ELSE  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "			SELECT 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1097,'1.00','V1','Bug 36139: [Main Branch] UMID Creation issues for CPN and Without CPN - Need to discuss with DV for few issues - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1097:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
                "	pUMIDId INT,  \n" +
                "    pKitAllocationId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	Select  \n" +
                "		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        u.measurementTypeID as uomClassID,  \n" +
                "		FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(rp.kitReleaseDate) kitReleaseDate,  \n" +
                "        rp.promiseShipDate,  \n" +
                "        fun_getKitReleaseStatus(ka.refSalesOrderDetID, NULL, ka.assyID, k.allocPerWithSubAssy, false) AS kitReleaseStatus  \n" +
                "	From (  \n" +
                "			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
                "					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
                "					k.allocatedUOM allocatedUOMID  \n" +
                "			FROM 	kit_allocation k  \n" +
                "			WHERE 	k.id = IFNULL(pKitAllocationId, k.id)  \n" +
                "			AND 	k.refUIDId = pUMIDId  \n" +
                "			AND 	k.status = 'A'  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
                "		) ka  \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3  \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id  \n" +
                "	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID  \n" +
                "	LEFT JOIN (  \n" +
                "				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "				FROM  \n" +
                "					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "									FROM  		vu_kit_allocation_detail vk  \n" +
                "									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    	vk.isNotRequiredKitAllocation != 1  \n" +
                "									GROUP BY 	vk.refSalesorderdetid, vk.assyID  \n" +
                "					) as k  \n" +
                "			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
                "	LEFT JOIN (  \n" +
                "		SELECT 	salesOrderDetID,  \n" +
                "				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,  \n" +
                "				MIN(poDueDate) promiseShipDate  \n" +
                "		FROM 	vu_kit_plans  \n" +
                "		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
                "	ORDER BY (rp.kitReleaseDate IS NULL),  rp.kitReleaseDate ASC, ka.id ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_kit_plans`; \n" +
                "CREATE VIEW `vu_kit_plans` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        `a`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`poQty` AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "                `s`.`releasedBy` AS `releasedBy`,  \n" +
                "                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`woID` AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                `s`.`releasedNote` AS `releasedNote`,  \n" +
                "                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "                `s`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `actualKitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseTimeFeasibility`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedNote`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseKitNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND (`s`.`subAssyID` IS NULL))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND EXISTS( SELECT  \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE)) `a`  \n" +
                "    WHERE  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_detail`;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        (SELECT  \n" +
                "                (CASE  \n" +
                "                        WHEN  \n" +
                "                            (`k`.`connecterTypeID` = -(2))  \n" +
                "                        THEN  \n" +
                "                            IFNULL(MIN((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`))),  \n" +
                "                                    0)  \n" +
                "                        ELSE IFNULL(MIN((`k`.`allocatedunit` / `k`.`qpaWithDnp`)),  \n" +
                "                                0)  \n" +
                "                    END)  \n" +
                "            FROM  \n" +
                "                `vu_kit_allocation_detail` `k`  \n" +
                "            WHERE  \n" +
                "                ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "                    AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`, `a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "        FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`a`.`actualKitReleaseDate`) AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((`a`.`kitStatus` = 'P')  \n" +
                "                    AND (`a`.`kitReleaseDate` <= STR_TO_DATE(FUN_CONVERTUTCDATETODATAKEYTIMEZONE(FUN_DATETIMETOUTCDATETIME()),  \n" +
                "                        '%m/%d/%Y')))  \n" +
                "            THEN  \n" +
                "                TRUE  \n" +
                "            ELSE FALSE  \n" +
                "        END) AS `rushJob`,  \n" +
                "        FUNC_MISMATCHITEMFORKIT(`a`.`salesOrderDetID`,  \n" +
                "                IFNULL(`a`.`subAssyID`, `a`.`refAssyId`),  \n" +
                "                'M',  \n" +
                "                NULL,  \n" +
                "                NULL) AS `mismatchItem`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
                "        FUN_GETWORKORDERSTATUSIDBYWOID(`a`.`woID`) AS `woStatusID`,  \n" +
                "        FUN_GETWORKORDERSUBSTATUSIDBYWOID(`a`.`woID`) AS `woSubStatusID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`a`.`kitReturnDate`) AS `kitReturnDate`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)))  \n" +
                "        END) AS `subAssyReleaseCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)  \n" +
                "                        AND (`sassy`.`kitStatus` = 'R')))  \n" +
                "        END) AS `subAssyReleasedCount`  \n" +
                "    FROM  \n" +
                "        `vu_kit_plans` `a`;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveSplitUMIDDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_saveSplitUMIDDetail`(  \n" +
                "	IN pUIDID INT,  \n" +
                "    IN pSplitUID VARCHAR(20),  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "    IN pPackaging INT,  \n" +
                "    IN pInventoryType VARCHAR(10),  \n" +
                "	IN pSplitCount DECIMAL(18,8),  \n" +
                "	IN pSplitUnit DECIMAL(18,8),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "    IN pIsKitAllocation TINYINT,  \n" +
                "    IN pUOM INT,  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "	IN pCountApprovalHistoryData JSON  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDHistoryID INT;  \n" +
                "    DECLARE v_newSplitUID INT;  \n" +
                "    DECLARE v_maxKitList INT;  \n" +
                "    DECLARE v_consumedQtyDiff INT;  \n" +
                "    DECLARE v_kitID INT;  \n" +
                "    DECLARE v_kitAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_totalAllocatedUnits DECIMAL(18,8);  \n" +
                "  \n" +
                "    IF(pSplitUID IS NOT NULL) THEN  \n" +
                "			#Insert split umid into component_sid_stock table  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSidStk AS  \n" +
                "			SELECT id,uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus,  \n" +
                "						costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "						mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "						sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "						customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "						rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays  \n" +
                "			FROM component_sid_stock WHERE id = pUIDID;  \n" +
                "			INSERT INTO component_sid_stock  \n" +
                "			(  \n" +
                "					uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, stockInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID,  \n" +
                "					mfrDateCode, rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID,  \n" +
                "					pkgQty, orgQty, pkgUnit, orgPkgUnit, binID, packaging, fromBin, orgRecBin, fromWarehouse, fromDepartment,  \n" +
                "					orgRecWarehouse, orgRecDepartment, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    isDeleted, createdBy, createByRoleId, createdAt, updatedBy, updateByRoleId, updatedAt  \n" +
                "			)  \n" +
                "			SELECT 	pSplitUID, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, pInventoryType,  \n" +
                "					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
                "					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, BestBefore, bestBeforeDurationType,  \n" +
                "					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
                "					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
                "					rohsStatusID, woID, woNumber, id, uid, IFNULL(parentUIDId,id), IFNULL(parentUID,uid),  \n" +
                "					pSplitCount, pSplitCount, pSplitUnit, pSplitUnit, pToBinID, pPackaging, pFromBinID, pFromBinID,  \n" +
                "					pFromWHID, pFromParentWH, pFromWHID, pFromParentWH, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
                "                    0 , pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime()  \n" +
                "			FROM tempComponentSidStk;  \n" +
                "			SET v_newSplitUID = LAST_INSERT_ID();  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "			# have to update count/unit into parent umid after split  \n" +
                "			IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "				UPDATE 	component_sid_stock  \n" +
                "				SET 	pkgUnit = pPkgUnit,  \n" +
                "						pkgQty = pPkgCount,  \n" +
                "						isinStk = 1,  \n" +
                "						updatedBy = pUserID,  \n" +
                "						updateByRoleId = pUserRoleID,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = pUIDID;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			# If parent UMID is allocated to kit then remove allocation if remaining qty is less than allocated qty  \n" +
                "			IF(pIsKitAllocation = 1) THEN  \n" +
                "					#Insert current kit allocated id into table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "					#Insert other kit detail in temp table  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "					CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "					SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "							rp.promiseShipDate,  \n" +
                "							fun_convertUOM(k.allocatedUOM, pUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "					FROM 	kit_allocation k  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT 	salesOrderDetID,  \n" +
                "									(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "									MIN(poDueDate) promiseShipDate  \n" +
                "							FROM 	vu_kit_plans  \n" +
                "							GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "					WHERE 	k.status = 'A'  \n" +
                "					AND		k.refuidid = pUIDID  \n" +
                "					ORDER BY rp.promiseShipDate DESC;  \n" +
                "  \n" +
                "					SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO v_totalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "					#Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "					IF(v_totalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						SET v_consumedQtyDiff = v_totalAllocatedUnits - pSplitUnit;  \n" +
                "						WHILE v_consumedQtyDiff > 0 DO  \n" +
                "							IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "								SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "								INTO 	v_kitID,	v_kitAllocatedUnit  \n" +
                "								FROM 	tempOtherSharedKit tk  \n" +
                "								WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "								IF(v_kitID IS NOT NULL) THEN  \n" +
                "									UPDATE tempOtherSharedKit tk  \n" +
                "									SET 	tk.status = 'D'  \n" +
                "									WHERE 	tk.id = v_kitID;  \n" +
                "  \n" +
                "									UPDATE 	kit_allocation k  \n" +
                "									SET 	k.status = 'D',  \n" +
                "										k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "										k.returnQty = pSplitCount,  \n" +
                "										k.returnUnit = pSplitUnit,  \n" +
                "										k.returnUOM = pUOM,  \n" +
                "										k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "										k.updatedBy = pUserID,  \n" +
                "										k.updateByRoleId = pUserRoleID,  \n" +
                "										k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "									WHERE 	k.id = v_kitID;  \n" +
                "  \n" +
                "									INSERT INTO tempKitID (tempKitId) VALUES (v_kitID);  \n" +
                "  \n" +
                "									SET v_consumedQtyDiff = v_consumedQtyDiff - v_kitAllocatedUnit;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END WHILE;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			# Manage deallocation approval history data  \n" +
                "			IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "				#Insert selected count approval records in temp table to return count approval Data  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM JSON_TABLE(  \n" +
                "						pCountApprovalHistoryData,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "							approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "							approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "							deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "							approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "							isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "					)  \n" +
                "				) AS countApproval;  \n" +
                "				SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "						INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "				FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            # Insert log in UMID history page  for parent umid  \n" +
                "			INSERT INTO component_sid_stock_history  \n" +
                "				(  \n" +
                "					transType, 			actionPerformed, 	refUIDId, 			uid,  \n" +
                "					splitUIDId,			splitUID,			fromUIDId, 			fromUID,  \n" +
                "					parentUIDId, 		parentUID,  		refcompid, 			binID,  \n" +
                "					warehouseID, 		deptWHID, 			currentQty,		 	currentUnit,  \n" +
                "					splitQty,		 	splitUnit,			uom,  \n" +
                "					isDeleted,			createdBy, 			createdAt, 		  	createByRoleId,  \n" +
                "					updatedBy,			updatedAt,		 	updateByRoleId,		approvedDate,  \n" +
                "					approvalReason,	  	approvedBy,			deallocatedKitDesc, 	approvedByRoleId,  \n" +
                "					isApproved,			orgQty,				orgUnit  \n" +
                "				)  \n" +
                "			SELECT  \n" +
                "					'Split UMID',		'Split UMID',		pUIDID,		css.uid,		v_newSplitUID, 		pSplitUID,  \n" +
                "					css.fromUIDId, 		css.fromUID,		css.parentUIDId, 		css.parentUID, 			css.refcompid,  \n" +
                "					css.binID,			b.warehouseID,		w.parentWHID deptWHID,			pPkgCount,			pPkgUnit,  \n" +
                "					pSplitCount,		pSplitUnit,	  		css.uom,		  		0,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),      		pUserRoleID,  \n" +
                "					pUserID,			fun_DatetimetoUTCDateTime(),	   pUserRoleID,			v_approvedDate,  \n" +
                "					v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,  \n" +
                "					v_isApproved,       css.orgQty,		css.orgPkgUnit  \n" +
                "			FROM  	component_sid_stock   css  \n" +
                "			JOIN 	binmst b ON css.binID = b.id  \n" +
                "			JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "			WHERE   css.isdeleted = 0  \n" +
                "			AND 	css.id = pUIDID;  \n" +
                "  \n" +
                "            IF(pIsKitAllocation = 1) THEN  \n" +
                "				/* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "				SET v_newUIDHistoryID = LAST_INSERT_ID();  \n" +
                "				UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDHistoryID WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "			END IF;  \n" +
                "    END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "	SELECT cs.* FROM component_sid_stock cs WHERE cs.id = v_newSplitUID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(  \n" +
                "	IN pTransferType VARCHAR(100),  \n" +
                "	IN pFromWHID INT,  \n" +
                "	IN pToWHID INT,  \n" +
                "	IN pFromBinID INT,  \n" +
                "	IN pToBinID INT,  \n" +
                "	IN pUIDID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pKitSalesOrderDetID INT,  \n" +
                "	IN pKitAssyID INT,  \n" +
                "	IN pFromParentWH INT,  \n" +
                "	IN pToParentWH INT,  \n" +
                "	IN pParentWHType VARCHAR(10),  \n" +
                "	IN pPkgCount DECIMAL(18,8),  \n" +
                "	IN pPkgUnit DECIMAL(18,8),  \n" +
                "	IN pAdjustCount DECIMAL(18,8),  \n" +
                "	IN pAdjustUnit DECIMAL(18,8),  \n" +
                "	IN pKitReturnDetail json,  \n" +
                "	IN pTransferStockType VARCHAR(50),  \n" +
                "	IN pTransType VARCHAR(100),  \n" +
                "	IN pActionPerformed VARCHAR(100),  \n" +
                "	IN pWOTransID INT,  \n" +
                "	IN pIsKitSelected TINYINT(1),  \n" +
                "	IN pNotes VARCHAR(16383),  \n" +
                "	IN pUserInputDetail json,  \n" +
                "    IN punallocatedXferHistoryData JSON,  \n" +
                "    IN pCountApprovalHistoryData JSON  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vTotalAllocatedUnits DECIMAL(18,8);  \n" +
                "	DECLARE vConsumedQtyDiff DECIMAL(18,8);  \n" +
                "	DECLARE vKitID INT;  \n" +
                "	DECLARE vRrefEqpID INT;  \n" +
                "	DECLARE vKitAllocatedUnit DECIMAL(18,8);  \n" +
                "	DECLARE vUmidUOM INT;  \n" +
                "	DECLARE vPrevPkgUnit DECIMAL(18,8);  \n" +
                "	DECLARE vPrevPkgQty DECIMAL(18,8);  \n" +
                "    DECLARE v_approvalReason VARCHAR(1000);  \n" +
                "    DECLARE v_approvedBy VARCHAR(255);  \n" +
                "    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
                "    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
                "    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
                "    DECLARE v_approvedDate DATETIME;  \n" +
                "    DECLARE v_newUIDId INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "		-- select * from temp111;  \n" +
                "		SET @vWhareClause = \" 1 = 1 \", 		@vFromBinID = 0,  \n" +
                "			@vFromWHID = 0, 		@vToWHID = 0,  \n" +
                "			@vFromWHBinCount = 0, 		@vToWHBinCount = 0,  \n" +
                "			@vFromWHUIDCount = 0,		@vToWHUIDCount  = 0,  \n" +
                "			@vFromBinUIDCount = 0, 		@vToBinUIDCount = 0,  \n" +
                "			@vFromBinPIDCount = 0, 		@vToBinPIDCount = 0,  \n" +
                "			@vFromKitBinCount = 0;  \n" +
                "  \n" +
                "		#Insert current kit allocated id into table  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
                "  \n" +
                "		#Get UMID detail of selected kit for transfer kit  \n" +
                "		IF(pTransferType = \"Kit Transfer\" OR pTransferType = \"Department Transfer\") THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS transferKitDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS transferKitDetail  \n" +
                "			SELECT 		k.refUIDId, csd.binID, b.warehouseID  \n" +
                "			FROM 		kit_allocation k  \n" +
                "			INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "			INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "			INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "			INNER JOIN 	warehousemst pw ON pw.id = w.parentWHID  \n" +
                "			WHERE 		k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "						AND	k.assyID = pKitAssyID  \n" +
                "						AND 	k.status = 'A'  \n" +
                "						AND	csd.isDeleted = 0  \n" +
                "						AND     (  \n" +
                "								CASE  \n" +
                "									WHEN pParentWHType IS NOT NULL THEN  \n" +
                "										pw.parentWHType = pParentWHType  \n" +
                "									ELSE  \n" +
                "										w.parentWHID = IFNULL(pFromParentWH, w.parentWHID)  \n" +
                "								END  \n" +
                "							);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		#Set where clause based on transfer type to retrive data of material to be transfer  \n" +
                "		#UMID to Bin  \n" +
                "		IF(pUIDID IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);  \n" +
                "		#Bin to BiN/Warehouse  \n" +
                "		ELSEIF(pFromBinID IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);  \n" +
                "		#Warehouse to Warehouse  \n" +
                "		ELSEIF(pFromWHID IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst WHERE isdeleted = 0 AND isActive = 1 AND  WarehouseID = \", pFromWHID,\")\");  \n" +
                "		#Department to Department  \n" +
                "		ELSEIF(pTransferType = \"Department Transfer\" AND pToParentWH IS NOT NULL) THEN  \n" +
                "			SET @vWhareClause = CONCAT(@vWhareClause, \" AND id IN (SELECT refUIDId FROM  transferKitDetail)\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentSIDStockIDs;  \n" +
                "		SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSIDStockIDs AS  \n" +
                "										SELECT 	csd.id  \n" +
                "										FROM 	component_sid_stock   csd  \n" +
                "										WHERE   csd.isdeleted = 0 AND \", @vWhareClause );  \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		#transfer material from warehouse to department  \n" +
                "		IF(pFromWHID IS NOT NULL AND pToParentWH IS NOT NULL) THEN  \n" +
                "			SET @vFromWHID = pFromWHID;  \n" +
                "			UPDATE 	warehousemst w  \n" +
                "			SET 	w.parentWHID = pToParentWH, w.updatedBy = pCreatedBy, w.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	w.id = pFromWHID;  \n" +
                "		ELSEIF(IFNULL(pFromWHID, pFromBinID) IS NOT NULL AND pToWHID IS NOT NULL) THEN   -- transfer material from warehouse/bin to warehouse  \n" +
                "			SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst WHERE id = pFromBinID AND isDeleted = 0));  \n" +
                "			SET @vToWHID = pToWHID;  \n" +
                "			IF(pFromWHID IS NOT NULL) THEN  \n" +
                "				UPDATE 	binmst b  \n" +
                "				SET 	b.WarehouseID = pToWHID,  \n" +
                "					b.updatedBy = pCreatedBy,  \n" +
                "					b.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	b.WarehouseID = pFromWHID AND b.isDeleted = 0;  \n" +
                "			ELSEIF (pFromBinID IS NOT NULL) THEN  \n" +
                "				UPDATE 	binmst b  \n" +
                "				SET	b.WarehouseID = pToWHID,  \n" +
                "					b.updatedBy = pCreatedBy,  \n" +
                "					b.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	b.ID = pFromBinID AND b.isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			UPDATE warehousemst SET slotCount =(SELECT COUNT(1)  FROM binmst WHERE WarehouseID=pFromWHID AND isActive = 1 AND deletedAt IS NULL) WHERE ID = pFromWHID;  \n" +
                "			UPDATE warehousemst SET slotCount =(SELECT COUNT(1)  FROM binmst WHERE WarehouseID=pToWHID AND isActive = 1  AND deletedAt IS NULL) WHERE ID = pToWHID;  \n" +
                "		ELSEIF(pFromBinID  IS NOT NULL AND pToBinID IS NOT NULL) THEN -- transfer material from bin to bin  \n" +
                "			SET @vFromBinID = pFromBinID;  \n" +
                "			IF(pTransferType = \"Stock Transfer\" OR pTransferType = \"Stock Transfer To Other Department\") THEN  \n" +
                "				UPDATE 	component_sid_stock css  \n" +
                "				SET 	css.binID = pToBinID,  \n" +
                "					css.updatedBy = pCreatedBy,  \n" +
                "					css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	css.binID = pFromBinID AND css.isDeleted = 0;  \n" +
                "			ELSEIF(pTransferType = \"Kit Transfer\" OR pTransferType = \"Department Transfer\") THEN  \n" +
                "				UPDATE 	component_sid_stock css  \n" +
                "				SET 	css.binID = pToBinID,  \n" +
                "					css.updatedBy = pCreatedBy,  \n" +
                "					css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				-- WHERE 	css.id IN (SELECT k.refUIDId FROM transferKitDetail k WHERE k.binID = pFromBinID)  \n" +
                "				WHERE 	css.binID IN (SELECT k.binID FROM transferKitDetail k WHERE k.binID = pFromBinID)  \n" +
                "						AND 	css.isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "		ELSEIF(pUIDID  IS NOT NULL AND pToBinID IS NOT NULL) THEN  \n" +
                "			SELECT 		css.binid,	w.refEqpID, 	uom,		pkgUnit,	pkgQty  \n" +
                "			INTO 		@vFromBinID, 	vRrefEqpID, 	vUmidUOM,  	vPrevPkgUnit, 	vPrevPkgQty  \n" +
                "			FROM 		component_sid_stock css  \n" +
                "			INNER JOIN 	binmst b ON b.id = css.binID  \n" +
                "			INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "			WHERE 		css.id = pUIDID;  \n" +
                "  \n" +
                "			UPDATE 	component_sid_stock css  \n" +
                "			SET 	css.binID = pToBinID, css.updatedBy = pCreatedBy, css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	css.id = pUIDID AND css.isDeleted = 0;  \n" +
                "  \n" +
                "			#Update workorder_trans_umid_details If From Location is Equipment  \n" +
                "			IF (vRrefEqpID IS NOT NULL AND vRrefEqpID > 0) THEN  \n" +
                "				UPDATE 	workorder_trans_umid_details  \n" +
                "				SET 	reelStatus = 'C',  \n" +
                "					changedBy = pCreatedBy,  \n" +
                "					changedOn = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	refsidid = pUIDID AND reelStatus = 'P' AND transactionType=\"F\";  \n" +
                "			END IF;  \n" +
                "		ELSEIF(pTransferType = \"Department Transfer\" AND pToParentWH IS NOT NULL) THEN  \n" +
                "			UPDATE 	warehousemst  \n" +
                "			SET 	parentWHID = pToParentWH, updatedBy = pCreatedBy, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	id IN (SELECT warehouseID FROM transferKitDetail) AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
                "			UPDATE 	component_sid_stock  \n" +
                "			SET 	pkgUnit = pPkgUnit,  \n" +
                "					pkgQty = pPkgCount,  \n" +
                "					isinStk = CASE WHEN pPkgCount = 0 THEN 0 ELSE 1 END,  \n" +
                "                    updatedBy = pCreatedBy,  \n" +
                "                    updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE 	id = pUIDID;  \n" +
                "  \n" +
                "			#Insert selected kit records in temp table to return UMID  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempKitDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDetail AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM	JSON_TABLE(  \n" +
                "						pKitReturnDetail,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "						id INT PATH \"$.id\",  \n" +
                "						consumeQty DECIMAL(18,8) PATH \"$.consumeQty\",  \n" +
                "						consumeUnit DECIMAL(18,8) PATH \"$.consumeUnit\",  \n" +
                "						returnQty DECIMAL(18,8) PATH \"$.returnQty\",  \n" +
                "						returnUnit DECIMAL(18,8) PATH \"$.returnUnit\",  \n" +
                "                        scrapExpiredQty DECIMAL(18,8) PATH \"$.scrapExpiredQty\",  \n" +
                "						scrapExpiredUnit DECIMAL(18,8) PATH \"$.scrapExpiredUnit\",  \n" +
                "						umidUOM INT PATH \"$.umidUOM\"  \n" +
                "				)  \n" +
                "			) AS kit;  \n" +
                "  \n" +
                "			IF(pKitReturnDetail IS NOT NULL) THEN  \n" +
                "				#Update selected kit status to 'Return' and update consumed and return qty  \n" +
                "				UPDATE 	kit_allocation k, tempKitDetail tk  \n" +
                "				SET 	k.consumeQty = tk.consumeQty,  \n" +
                "					k.consumeUnit = fun_convertUOM(tk.umidUOM, k.allocatedUOM, tk.consumeUnit),  \n" +
                "					k.consumeUOM = k.allocatedUOM,  \n" +
                "					k.returnQty = tk.returnQty,  \n" +
                "					k.returnUnit = fun_convertUOM(tk.umidUOM, k.allocatedUOM, tk.returnUnit),  \n" +
                "					k.returnUOM = k.allocatedUOM,  \n" +
                "					k.scrapExpiredQty = tk.scrapExpiredQty,  \n" +
                "					k.scrapExpiredUnit = fun_convertUOM(tk.umidUOM, k.allocatedUOM, tk.scrapExpiredUnit),  \n" +
                "					k.scrapExpiredUOM = k.allocatedUOM,  \n" +
                "					k.status = 'R',  \n" +
                "					k.remark = 'Auto Return from Count Material.',  \n" +
                "					k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "					k.updatedBy = pCreatedBy,  \n" +
                "					k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	k.id = tk.id;  \n" +
                "                INSERT INTO tempKitID (tempKitId) SELECT tkd.id FROM tempKitDetail tkd;  \n" +
                "			END IF;  \n" +
                "		    #If there is other kit in which that UMID is shared then remove allocation if remaining qty is less than allocted qty  \n" +
                "			IF(pTransferStockType IS NOT NULL) THEN  \n" +
                "  \n" +
                "                #Insert other kit detail in temp table  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
                "				CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
                "				SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
                "						rp.promiseShipDate,  \n" +
                "                        fun_convertUOM(k.allocatedUOM, vUmidUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
                "				FROM 	kit_allocation k  \n" +
                "				LEFT JOIN (  \n" +
                "							SELECT 	salesOrderDetID,  \n" +
                "								(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "								MIN(poDueDate) promiseShipDate  \n" +
                "						FROM 	vu_kit_plans  \n" +
                "						GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "					) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
                "				WHERE 	k.status = 'A'  \n" +
                "				AND		k.refuidid = pUIDID  \n" +
                "				AND 	NOT EXISTS (SELECT 1 FROM tempKitDetail tk WHERE tk.id = k.id)  \n" +
                "				ORDER BY rp.promiseShipDate DESC;  \n" +
                "				SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO vTotalAllocatedUnits FROM tempOtherSharedKit;  \n" +
                "                #Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
                "				IF(vTotalAllocatedUnits > pPkgUnit) THEN  \n" +
                "						-- IF(pKitReturnDetail IS NOT NULL) THEN  \n" +
                "						-- 	SELECT 	(IFNULL(SUM(k.consumeUnit),0) - IFNULL(SUM(k.allocatedUnit), 0))  \n" +
                "						-- 	into 	vConsumedQtyDiff  \n" +
                "						-- 	FROM	kit_allocation k  \n" +
                "						-- 	where 	exists (select 1 from tempKitDetail tk where tk.id = k.id);  \n" +
                "						-- ELSE  \n" +
                "							SET vConsumedQtyDiff = vTotalAllocatedUnits - pPkgUnit;  \n" +
                "                        -- END IF;  \n" +
                "					WHILE vConsumedQtyDiff > 0 DO  \n" +
                "						IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
                "  \n" +
                "							SELECT 	tk.id, 	tk.allocatedUnit  \n" +
                "							INTO 	vKitID,	vKitAllocatedUnit  \n" +
                "							FROM 	tempOtherSharedKit tk  \n" +
                "							WHERE 	tk.status = 'A' LIMIT 1;  \n" +
                "  \n" +
                "							IF(vKitID IS NOT NULL) THEN  \n" +
                "								UPDATE tempOtherSharedKit tk  \n" +
                "								SET 	tk.status = 'D'  \n" +
                "								WHERE 	tk.id = vKitID;  \n" +
                "								UPDATE 	kit_allocation k  \n" +
                "								SET 	k.status = 'D',  \n" +
                "									k.remark = 'Auto Deallocated from Count Material.',  \n" +
                "									k.returnQty = pPkgCount,  \n" +
                "									k.returnUnit = pPkgUnit,  \n" +
                "									k.returnUOM = vUmidUOM,  \n" +
                "									k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "									k.updatedBy = pCreatedBy,  \n" +
                "									k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "								WHERE 	k.id = vKitID;  \n" +
                "  \n" +
                "                                INSERT INTO tempKitID (tempKitId) VALUES (vKitID);  \n" +
                "  \n" +
                "                                SET vConsumedQtyDiff = vConsumedQtyDiff - vKitAllocatedUnit;  \n" +
                "							ELSE  \n" +
                "								SET vConsumedQtyDiff = 0;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							SET vConsumedQtyDiff = 0;  \n" +
                "						END IF;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempStockDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS  \n" +
                "		SELECT 	csd.id,			csd.uid,			csd.refcompid,  \n" +
                "				csd.binID,		b.warehouseID,		w.parentWHID deptWHID,  \n" +
                "				csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,  \n" +
                "				csd.pkgUnit,	csd.uom,			csd.createdAt  \n" +
                "		FROM 	component_sid_stock   csd  \n" +
                "		JOIN 	binmst b ON csd.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE   csd.isdeleted = 0  \n" +
                "		AND 	csd.id IN (SELECT t.id FROM tempComponentSIDStockIDs t);  \n" +
                "	IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
                "			#Insert selected count approval records in temp table to return count approval Data  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM JSON_TABLE(  \n" +
                "					pCountApprovalHistoryData,  \n" +
                "                \"$[*]\" COLUMNS(  \n" +
                "                        approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
                "						approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "						deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
                "						approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
                "						isApproved TINYINT PATH \"$.isApproved\"  \n" +
                "				)  \n" +
                "			) AS countApproval;  \n" +
                "  \n" +
                "			SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
                "					INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
                "			FROM   tempCountApprovalHistoryDetail ap;  \n" +
                "	END IF;  \n" +
                "				-- Insert log in UMID history page  \n" +
                "				INSERT INTO component_sid_stock_history  \n" +
                "					(  \n" +
                "						transType, 			actionPerformed, 	refUIDId, 	uid, 			refcompid,  \n" +
                "						binID, 				warehouseID, 		deptWHID, 	orgQty, 		orgUnit,  \n" +
                "						currentQty, 		currentUnit, 		uom,  \n" +
                "						scrappedQty, 		scrappedUnit,  \n" +
                "						consumedQty,		consumedUnit,		adjustQty,	adjustUnit,  \n" +
                "						refTrans, 			refTransID, 		reason,  \n" +
                "						refSalesOrderDetID,	assyID,  \n" +
                "						woTransID,			userInputDetail,	isDeleted, 	createdBy, 		createdAt,  \n" +
                "						updatedBy, 			updatedAt,				approvedDate,			approvalReason,  \n" +
                "                        approvedBy,			deallocatedKitDesc, 	approvedByRoleId,		isApproved  \n" +
                "					)  \n" +
                "				SELECT  \n" +
                "						pTransType,			pActionPerformed,	id,			uid,			refcompid,  \n" +
                "						binID,				warehouseID,		deptWHID,	orgQty,			orgPkgUnit,  \n" +
                "						pkgQty,				pkgUnit,			uom,  \n" +
                "						(CASE WHEN pTransferStockType IN ('Scrapped Material', 'Expired Material') THEN (IFNULL(vPrevPkgQty,0) - IFNULL(pPkgCount,0)) ELSE NULL END),	-- scrappedQty  \n" +
                "						(CASE WHEN pTransferStockType IN ('Scrapped Material', 'Expired Material') THEN (IFNULL(vPrevPkgUnit,0) - IFNULL(pPkgUnit,0)) ELSE NULL END), -- scrappedUnit  \n" +
                "						(CASE WHEN (pPkgCount IS NOT NULL AND (pTransferStockType NOT IN ('Scrapped Material', 'Expired Material', 'Adjust Material'))) THEN (IFNULL(vPrevPkgQty,0) - IFNULL(pPkgCount,0)) ELSE NULL END), -- consumedQty  \n" +
                "						(CASE WHEN (pPkgUnit IS NOT NULL AND (pTransferStockType NOT IN ('Scrapped Material', 'Expired Material', 'Adjust Material'))) THEN (IFNULL(vPrevPkgUnit,0) - IFNULL(pPkgUnit,0)) ELSE NULL END), -- consumedUnit  \n" +
                "						pAdjustCount,		pAdjustUnit,  \n" +
                "						NULL,				NULL,				pNotes,		NULL,				NULL,  \n" +
                "						pWOTransID,   		pUserInputDetail,	0,			pCreatedBy,		fun_DatetimetoUTCDateTime(),  \n" +
                "						pCreatedBy,			fun_DatetimetoUTCDateTime(),	v_approvedDate,  \n" +
                "                        v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,		 v_isApproved  \n" +
                "				FROM tempStockDetail;  \n" +
                "  \n" +
                "        /* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
                "        SET v_newUIDId = LAST_INSERT_ID();  \n" +
                "		UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDId WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
                "  \n" +
                "		IF((pTransferType = \"Stock Transfer\"  OR pTransferType = \"Stock Transfer To Other Department\") AND (IFNULL(pFromBinID, pUIDID) IS NOT NULL AND pToBinID IS NOT NULL)) THEN  \n" +
                "			SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst WHERE id = @vFromBinID AND isDeleted = 0));  \n" +
                "			SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst WHERE id = pToBinID AND isDeleted = 0));  \n" +
                "  \n" +
                "			SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID AND c.isdeleted = 0;  \n" +
                "			SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID  AND c.isdeleted = 0;  \n" +
                "  \n" +
                "            SELECT COUNT(1) refcompid INTO @vFromBinPIDCount FROM (SELECT  DISTINCT c.refcompid FROM component_sid_stock c WHERE c.binid = @vFromBinID AND c.isdeleted = 0 GROUP BY refcompid) AS a;  \n" +
                "			SELECT COUNT(1) refcompid INTO @vToBinPIDCount FROM (SELECT  DISTINCT c.refcompid FROM component_sid_stock c WHERE c.binid = pToBinID  AND c.isdeleted = 0 GROUP BY refcompid) AS a;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(@vFromWHID != 0) THEN  \n" +
                "			SELECT COUNT(1) uidCount INTO @vFromWHUIDCount FROM component_sid_stock c, binmst b  \n" +
                "			WHERE b.id = c.binid AND b.warehouseID = @vFromWHID  AND c.isdeleted = 0  \n" +
                "			AND b.isdeleted = 0 AND b.isActive = 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b  \n" +
                "			WHERE b.warehouseID = @vFromWHID AND b.isdeleted = 0 AND b.isActive = 1 ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(@vFromWHID != 0) THEN  \n" +
                "			SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b  \n" +
                "			WHERE b.id = c.binid AND b.warehouseID =  @vToWHID  AND c.isdeleted = 0  \n" +
                "			AND b.isdeleted = 0 AND b.isActive = 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b  \n" +
                "			WHERE b.warehouseID =  @vToWHID  AND b.isdeleted = 0 AND  b.isActive = 1 ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "			#Insert selected xfer records in temp table to return Unallocated UMID Xfer History data  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempunallocatedXferHistoryDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempunallocatedXferHistoryDetail AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM JSON_TABLE(  \n" +
                "					punallocatedXferHistoryData,  \n" +
                "                \"$[*]\" COLUMNS(  \n" +
                "                        reason TEXT PATH \"$.reason\",  \n" +
                "						transferFrom VARCHAR(100) PATH \"$.transferFrom\",  \n" +
                "						transferTo VARCHAR(100) PATH \"$.transferTo\",  \n" +
                "						createdBy VARCHAR(255) PATH \"$.createdBy\",  \n" +
                "						updatedBy VARCHAR(255) PATH \"$.updatedBy\",  \n" +
                "						updateByRoleId INT PATH \"$.updateByRoleId\",  \n" +
                "						createByRoleId INT PATH \"$.createByRoleId\",  \n" +
                "						transactionType VARCHAR(255) PATH \"$.transactionType\",  \n" +
                "						category VARCHAR(100) PATH \"$.category\"  \n" +
                "				)  \n" +
                "			) AS xfer;  \n" +
                "  \n" +
                "            IF (punallocatedXferHistoryData IS NOT NULL) THEN  \n" +
                "  \n" +
                "				INSERT INTO unallocted_umid_transfer_history (reason, transferFrom, transferTo, createdBy, updatedBy, updateByRoleId, createByRoleId, transactionType, category)  \n" +
                "				SELECT  xh.reason, xh.transferFrom, xh.transferTo, xh.createdBy, xh.updatedBy, xh.updateByRoleId, xh.createByRoleId, xh.transactionType, xh.category  \n" +
                "					FROM tempunallocatedXferHistoryDetail xh;  \n" +
                "            END IF;  \n" +
                "  \n" +
                "		SELECT 	pTransferType transferType, 				pFromWHID fromWHID, 			pToWHID toWHID,  \n" +
                "				pFromBinID fromBinID, 						pToBinID toBinID, 				pUIDID uidID,  \n" +
                "				@vFromWHBinCount fromWHBinCount,			@vToWHBinCount toWHBinCount,  \n" +
                "				@vFromWHUIDCount fromWHUIDCount,			@vToWHUIDCount toWHUIDCount,  \n" +
                "				@vFromBinUIDCount fromBinUIDCount,			@vToBinUIDCount toBinUIDCount,  \n" +
                "				@vFromBinPIDCount fromBinPIDCount,			@vToBinPIDCount toBinPIDCount,  \n" +
                "				pKitSalesOrderDetID refSalesOrderDetID,		pKitAssyID assyID,				pToParentWH toParentWH,  \n" +
                "				@vFromKitBinCount fromKitBinCount;  \n" +
                "	COMMIT;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
                "     DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-08-2021  ********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalKitPlannAndReleasedCount` ;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getKitAllocationPercentageForReleasedPlan` ;  \n" +
				/* **************************** New Script -> 20-08-2021  ********************************** */                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1098,'1.00','V1','Task 36240: Tunnig of SP for Count material performance - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1098:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-08-2021  *********************************** */
            "drop function if exists `fun_getDueDateEOM`;  \n" +
            "CREATE FUNCTION `fun_getDueDateEOM`(  \n" +
            "	  pDate DATE,  \n" +
            "      pTermsDays int,  \n" +
            "      ptermsID INT  \n" +
            ") RETURNS date  \n" +
            "BEGIN  \n" +
            "	DECLARE vIsEOM tinyint;  \n" +
            "    DECLARE vDate DATE;  \n" +
            "    DECLARE vDueDate DATE;  \n" +
            "    /*getting EOM flag from master*/  \n" +
            "	SELECT gc.isEOM INTO vIsEOM  \n" +
            "      FROM genericcategory gc  \n" +
            "	 WHERE gc.gencCategoryID = ptermsID  \n" +
            "       AND gc.categoryType = 'Payment Terms'  \n" +
            "       AND gc.isDeleted = 0;  \n" +
            "  \n" +
            "	if vIsEOM = true then  \n" +
            "		/*setting last date of month in case if EOM*/  \n" +
            "		SET vDueDate = LAST_DAY(pDate);  \n" +
            "	else  \n" +
            "		SET vDate = pDate;  \n" +
            "		SET vDueDate = DATE_ADD(vDate, INTERVAL IFNULL(pTermsDays,0) DAY);  \n" +
            "    end if;  \n" +
            "  \n" +
            "	RETURN vDueDate;  \n" +
            "END;  \n" +
            "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pReceiptType VARCHAR(30),  \n" +
            "	IN pMfgCodeIds LONGTEXT,  \n" +
            "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
            "	IN pDueDate DATE,  \n" +
            "	IN pAdditionalDays INT,  \n" +
            "	IN pTermsAndAboveDays INT,  \n" +
            "	IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pIsExactSearch TINYINT,  \n" +
            "	IN pMfrPnId INT,  \n" +
            "    IN pInvoiceIds LONGTEXT,  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "    IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvoiceFromDate DATE,  \n" +
            "    IN pInvoiceToDate DATE,  \n" +
            "    IN pMarkedForRefundStatus LONGTEXT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "    DECLARE vCurrentDate DATE;  \n" +
            "    DECLARE vMfgCodeFormat INT;  \n" +
            "  \n" +
            "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
            "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
            "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
            "			SELECT 		p.id,  \n" +
            "					p.systemId,  \n" +
            "					p.poNumber,  \n" +
            "                    p.poDate,  \n" +
            "                    p.refPurchaseOrderID poId,  \n" +
            "					p.mfgCodeID,  \n" +
            "					p.supplierSONumber,  \n" +
            "                    p.soDate,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
            "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
            "					p.packingSlipDate,  \n" +
            "					p.invoiceNumber,  \n" +
            "                    p.lockStatus invoiceLockStatus,  \n" +
            "					p.invoiceDate,  \n" +
            "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
            "					p.creditMemoNumber,  \n" +
            "                    p.lockStatus creditMemoLockStatus,  \n" +
            "					p.creditMemoDate,  \n" +
            "					p.debitMemoNumber,  \n" +
            "                    p.refSupplierCreditMemoNumber,  \n" +
            "                    p.lockStatus debitMemoLockStatus,  \n" +
            "					p.debitMemoDate,  \n" +
            "					p.receiptDate,  \n" +
            "					p.description,  \n" +
            "					p.billToAddress,  \n" +
            "					p.shipToAddress,  \n" +
            "					p.poVersion,  \n" +
            "					p.isDeleted,  \n" +
            "					p.receiptType,  \n" +
            "					p.`status`,  \n" +
            "					p.applyDate,  \n" +
            "					p.refParentCreditDebitInvoiceno,  \n" +
            "					p.refPackingSlipNumberForInvoice,  \n" +
            "					p.invoiceTotalDue,  \n" +
            "					p.isTariffInvoice,  \n" +
            "					p.creditMemoType,  \n" +
            "                    (  \n" +
            "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
            "								'Invoice Credit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MC' THEN  \n" +
            "								'MISC Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'RC' THEN  \n" +
            "								'RMA Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'ID' THEN  \n" +
            "								'Invoice Debit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MD' THEN  \n" +
            "								'MISC Debit Memo'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
            "								'Invoice'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
            "								'MISC Invoice'  \n" +
            "						END  \n" +
            "					) subTypeValue,  \n" +
            "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
            "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "                    m.mfgName supplierName,  \n" +
            "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
            "					m.mfgCode supplierCodeName,  \n" +
            "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
            "					pg.packingSlipDocCount,  \n" +
            "					pd.itemReceived,  \n" +
            "					pd.otherChargesItemReceived,  \n" +
            "					pd.itemDisapproved,  \n" +
            "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
            "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
            "					ps.status parentInvoiceStatus,  \n" +
            "					ps.invoiceNumber refInvoiceNumber,  \n" +
            "                    ps.lockStatus refInvoiceLockStatus,  \n" +
            "					ps.creditMemoType parentCreditMemoType,  \n" +
            "					pd.totalExtendedAmount,  \n" +
            "                    pd.totalDiscount,  \n" +
            "					pe.totalCreditAmount,  \n" +
            "					pe.totalDebitAmount,  \n" +
            "					(  \n" +
            "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
            "					) amountToPay,  \n" +
            "                    pd.totalExtendedReceivedPrice,  \n" +
            "					pd.packingDetailNote,  \n" +
            "					pd.approveLineCount,  \n" +
            "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
            "											p.debitMemoDate  \n" +
            "										WHEN p.receiptType = 'C' THEN  \n" +
            "											p.creditMemoDate  \n" +
            "										ELSE p.invoiceDate  \n" +
            "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
            "					g.gencCategoryName paymentTermName,  \n" +
            " 					m.paymentTermsID paymentTermsID,  \n" +
            "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
            "                    p.paymentTermsID invPaymentTermsID,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
            "					psm.packingSlipModeStatus,  \n" +
            "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
            "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
            "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
            "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
            "					p.invoiceRequireManagementApproval,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
            "								'Yes'  \n" +
            "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
            "								'No'  \n" +
            "						END  \n" +
            "					) invoiceRequireManagementApprovalValue,  \n" +
            "					p.invoiceApprovalStatus,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
            "								'Approved'  \n" +
            "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
            "								'Pending'  \n" +
            "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
            "								'N/A'  \n" +
            "						END  \n" +
            "					) invoiceApprovalStatusValue,  \n" +
            "					p.invoiceApprovedBy,  \n" +
            "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
            "					p.invoiceApprovalDate,  \n" +
            "					p.invoiceApprovalComment,  \n" +
            "					p.internalRemark,  \n" +
            "                    p.remark,  \n" +
            "					p.lockStatus,  \n" +
            "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "						when p.lockStatus = 'LC' then 'Locked'  \n" +
            "						else null end  \n" +
            "					) lockStatusValue,  \n" +
            "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
            "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
            "                    case when p.receiptType = 'I' then  \n" +
            "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
            "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
            "					h1.refType as haltRefType,  \n" +
            "                    h1.status as haltStatus,  \n" +
            "                    (CASE WHEN h1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltStatusText,  \n" +
            "                    (CASE  \n" +
            "							WHEN h1.status = 'H' THEN  \n" +
            "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReason,  \n" +
            "                    psh1.refType as haltRefTypeRefInv,  \n" +
            "                    psh1.status as haltStatusRefInv,  \n" +
            "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInvText,  \n" +
            "                    (CASE  \n" +
            "							WHEN psh1.status = 'H' THEN  \n" +
            "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInv,  \n" +
            "                    p.markedForRefund,  \n" +
            "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
            "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
            "										'Waiting for Refund'  \n" +
            "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
            "										'Partially Refunded'  \n" +
            "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
            "										'Fully Refunded'  \n" +
            "								else '' end  \n" +
            "						end  \n" +
            "					) markedForRefundValue,  \n" +
            "                    p.markedForRefundAmt  \n" +
            "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
            "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
            "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
            "							gFiles.gencFileOwnerType,  \n" +
            "							gFiles.refTransID,  \n" +
            "							gFiles.entityID  \n" +
            "						FROM genericfiles gFiles  \n" +
            "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
            "						and gFiles.entityID in (-13,-15,-16)  \n" +
            "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
            "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
            "																		WHEN p.receiptType = 'D' THEN -16  \n" +
            "																		ELSE -13  \n" +
            "																	END)  \n" +
            "				and psDoc.refTransID = p.id  \n" +
            "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
            "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where h2.refTransId = h1.refTransId  \n" +
            " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
            "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
            "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
            "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
            "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where psh1.refTransId = h2.refTransId  \n" +
            " 											  and h2.refType = 'SINV'  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
            "            left join (  \n" +
            "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
            "				FROM 	vu_genericfilescount g  \n" +
            "				WHERE 	g.entityID = -14  \n" +
            "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
            "            ) pg on pg.refTransID = psm.id  \n" +
            "			left join (  \n" +
            "							select 	a.refPackingSlipMaterialRecID,  \n" +
            "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
            "								sum(a.itemReceived) itemReceived,  \n" +
            "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
            "								sum(a.itemDisapproved) itemDisapproved,  \n" +
            "								sum(a.approveLineCount) approveLineCount,  \n" +
            "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
            "                                sum(discount) totalDiscount,  \n" +
            "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
            "							from 	(  \n" +
            "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
            "										psm.packingSlipSerialNumber,  \n" +
            "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
            "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
            "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
            "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
            "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
            "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
            "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
            "										extendedPrice,  \n" +
            "                                        discount,  \n" +
            "										extendedReceivedPrice  \n" +
            "									FROM 	packing_slip_material_receive_det psm  \n" +
            "									WHERE 	psm.isDeleted = 0  \n" +
            "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
            "								) a  \n" +
            "							group by a.refPackingSlipMaterialRecID  \n" +
            "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
            "				left join (select b.refPackingslipInvoiceID,  \n" +
            "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
            "							  from packingslip_invoice_payment a  \n" +
            "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "							 where a.refPaymentMode IN ('P','RR')  \n" +
            "							   and a.isPaymentVoided = 0  \n" +
            "							   and b.isDeleted = 0  \n" +
            "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
            "				left join (  \n" +
            "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
            "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
            "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
            "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
            "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
            "							from 		packing_slip_material_receive ps  \n" +
            "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
            "                            left join (select b.refPackingslipInvoiceID,  \n" +
            "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
            "										  from packingslip_invoice_payment a  \n" +
            "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "										 where a.refPaymentMode IN ('P','RR')  \n" +
            "										   and b.isPaymentVoided = 0  \n" +
            "										   and b.isDeleted = 0  \n" +
            "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
            "								  where ps.receiptType in ('C','D')  \n" +
            "									and ps.isDeleted = 0  \n" +
            "									and pd.isDeleted = 0  \n" +
            "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
            "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
            "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
            "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
            "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
            "				and exists (select 1  \n" +
            "							  from packingslip_invoice_payment pm  \n" +
            "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
            "							 where pm.isPaymentVoided = 0  \n" +
            "							   and pm.refPaymentMode = 'P'  \n" +
            "							   and pd.refPackingslipInvoiceID = p.id  \n" +
            "							   and pm.isDeleted = 0  \n" +
            "                               and pd.isDeleted = 0  \n" +
            "							   and pm.paymentNumber \",  \n" +
            "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
            "                               ,\") \");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pDueDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
            "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
            "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
            "		IF pIsExactSearch = 1 THEN  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
            "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
            "				SELECT 1  \n" +
            "				  FROM packing_slip_material_receive_det x  \n" +
            "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
            "			)  \n" +
            "		\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "    EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"  \n" +
            "			SELECT 	c.*,  \n" +
            "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
            "				round(c.paidAmount,2) totalPaidAmount,  \n" +
            "                round(c.refundAmount,2) totalRefundAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
            "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
            "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
            "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version ->  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (1099,'1.00','V1','User Story 35371: [Main Branch] Supplier Invoice, CM, DM: Improvement Related to Refund Transaction and in Advance filter - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1099:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-08-2021  *********************************** */
            "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
            "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
            "	IN pPOID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE vStatus VARCHAR(50);  \n" +
            "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
            "	SET vStatus=IFNULL(vStatus,'C');  \n" +
            "	IF(vStatus='P') THEN  \n" +
            "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end) WHERE id=pPOID;  \n" +
            "	ELSE  \n" +
            "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=pPOID;  \n" +
            "	END IF;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version ->  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (1100,'1.00','V1','Purchase order auto complete while duplicate single line completed po - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1100:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-08-2021  *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
            "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
            "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
            "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
            "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
            "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
            "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
            "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
            "	DECLARE PORLINE_OTY INT;  \n" +
            "	DECLARE vTotalQty INT;  \n" +
            "    DECLARE vPOID INT;  \n" +
            "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
            "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
            "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
            "  \n" +
            "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';  \n" +
            "	ELSE  \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(vPOID IS NOT NULL) THEN  \n" +
            "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
            "		(  \n" +
            "			CASE  \n" +
            "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
            "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
            "				ELSE NULL  \n" +
            "			END  \n" +
            "		),  \n" +
            "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
            "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
            "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
            "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
            "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
            "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
            "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
            "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
            "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
            "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
            "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
            "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedPrice*-1), 2) AS CHAR), ')') END),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
            "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((OLD.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
            "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST(FORMAT((new.extendedReceivedPrice*-1), 2) AS CHAR), ')') END),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
            "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
            "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		CAST(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
            "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
            "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
            "				END  \n" +
            "			)  \n" +
            "		AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
            "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
            "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
            "		ELSE  \n" +
            "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
            "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
            "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
            "		CONCAT(  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
            "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
            "					ELSE 'Line# '  \n" +
            "				END  \n" +
            "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
            "		),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
            "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)  \n" +
            "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
            "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 23-08-2021  *********************************** */
            "DROP TRIGGER IF EXISTS `TRG_AI_packing_slip_material_receive_det`;  \n" +
            "CREATE TRIGGER `TRG_AI_packing_slip_material_receive_det` AFTER INSERT ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
            "	DECLARE PORLINE_OTY INT;  \n" +
            "	DECLARE vTotalQty INT;  \n" +
            "    DECLARE vPOID INT;  \n" +
            "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
            "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
            "	select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
            "	IF (NEW.isDeleted = TRUE)THEN  \n" +
            "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',poLineCompleteType=(NULL),poLineCompleteReason=(NULL),receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
            "	ELSEIF( NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND  \n" +
            "		PORLINE_OTY <= vTotalQty) THEN  \n" +
            "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto', receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
            "		ELSE  \n" +
            "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
            "	END IF;  \n" +
            "    IF(vPOID IS NOT NULL) THEN  \n" +
            "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
            "	END IF;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 23-08-2021  *********************************** */
            "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
            /* **************************** Add Script Version ->  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (1101,'1.00','V1','Purchase order auto complete while duplicate single line completed po - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1101:
            allDbChangesArray.push(
            /* **************************** New Script -> 24-08-2021  *********************************** */
            "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
            "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pReceiptType VARCHAR(30),  \n" +
            "	IN pMfgCodeIds LONGTEXT,  \n" +
            "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
            "	IN pDueDate DATE,  \n" +
            "	IN pAdditionalDays INT,  \n" +
            "	IN pTermsAndAboveDays INT,  \n" +
            "	IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pIsExactSearch TINYINT,  \n" +
            "	IN pMfrPnId INT,  \n" +
            "    IN pInvoiceIds LONGTEXT,  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "    IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
            "    IN pInvoiceFromDate DATE,  \n" +
            "    IN pInvoiceToDate DATE,  \n" +
            "    IN pMarkedForRefundStatus LONGTEXT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "    DECLARE vCurrentDate DATE;  \n" +
            "    DECLARE vMfgCodeFormat INT;  \n" +
            "  \n" +
            "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
            "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
            "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
            "  \n" +
            "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
            "			SELECT 		p.id,  \n" +
            "					p.systemId,  \n" +
            "					p.poNumber,  \n" +
            "                    p.poDate,  \n" +
            "                    p.refPurchaseOrderID poId,  \n" +
            "					p.mfgCodeID,  \n" +
            "					p.supplierSONumber,  \n" +
            "                    p.soDate,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
            "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
            "					p.packingSlipDate,  \n" +
            "					p.invoiceNumber,  \n" +
            "                    p.lockStatus invoiceLockStatus,  \n" +
            "					p.invoiceDate,  \n" +
            "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
            "					p.creditMemoNumber,  \n" +
            "                    p.lockStatus creditMemoLockStatus,  \n" +
            "					p.creditMemoDate,  \n" +
            "					p.debitMemoNumber,  \n" +
            "                    p.refSupplierCreditMemoNumber,  \n" +
            "                    p.lockStatus debitMemoLockStatus,  \n" +
            "					p.debitMemoDate,  \n" +
            "					p.receiptDate,  \n" +
            "					p.description,  \n" +
            "					p.billToAddress,  \n" +
            "					p.shipToAddress,  \n" +
            "					p.poVersion,  \n" +
            "					p.isDeleted,  \n" +
            "					p.receiptType,  \n" +
            "					p.`status`,  \n" +
            "					p.applyDate,  \n" +
            "					p.refParentCreditDebitInvoiceno,  \n" +
            "					p.refPackingSlipNumberForInvoice,  \n" +
            "					p.invoiceTotalDue,  \n" +
            "					p.isTariffInvoice,  \n" +
            "					p.creditMemoType,  \n" +
            "                    (  \n" +
            "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
            "								'Invoice Credit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MC' THEN  \n" +
            "								'MISC Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'RC' THEN  \n" +
            "								'RMA Credit Memo'  \n" +
            "							WHEN p.creditMemoType = 'ID' THEN  \n" +
            "								'Invoice Debit Memo (Auto)'  \n" +
            "							WHEN p.creditMemoType = 'MD' THEN  \n" +
            "								'MISC Debit Memo'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
            "								'Invoice'  \n" +
            "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
            "								'MISC Invoice'  \n" +
            "						END  \n" +
            "					) subTypeValue,  \n" +
            "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
            "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
            "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
            "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "                    m.mfgName supplierName,  \n" +
            "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
            "					m.mfgCode supplierCodeName,  \n" +
            "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
            "					pg.packingSlipDocCount,  \n" +
            "					pd.itemReceived,  \n" +
            "					pd.otherChargesItemReceived,  \n" +
            "					pd.itemDisapproved,  \n" +
            "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
            "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
            "					ps.status parentInvoiceStatus,  \n" +
            "					ps.invoiceNumber refInvoiceNumber,  \n" +
            "                    ps.lockStatus refInvoiceLockStatus,  \n" +
            "					ps.creditMemoType parentCreditMemoType,  \n" +
            "					pd.totalExtendedAmount,  \n" +
            "                    pd.totalDiscount,  \n" +
            "					pe.totalCreditAmount,  \n" +
            "					pe.totalDebitAmount,  \n" +
            "					(  \n" +
            "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
            "					) amountToPay,  \n" +
            "                    pd.totalExtendedReceivedPrice,  \n" +
            "					pd.packingDetailNote,  \n" +
            "					pd.approveLineCount,  \n" +
            "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
            "											p.debitMemoDate  \n" +
            "										WHEN p.receiptType = 'C' THEN  \n" +
            "											p.creditMemoDate  \n" +
            "										ELSE p.invoiceDate  \n" +
            "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
            "					g.gencCategoryName paymentTermName,  \n" +
            " 					m.paymentTermsID paymentTermsID,  \n" +
            "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
            "                    p.paymentTermsID invPaymentTermsID,  \n" +
            "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
            "					psm.packingSlipModeStatus,  \n" +
            "                    psPay.paymentDate,  \n" +
            "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
            "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
            "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
            "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
            "					p.invoiceRequireManagementApproval,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
            "								'Yes'  \n" +
            "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
            "								'No'  \n" +
            "						END  \n" +
            "					) invoiceRequireManagementApprovalValue,  \n" +
            "					p.invoiceApprovalStatus,  \n" +
            "					(  \n" +
            "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
            "								'Approved'  \n" +
            "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
            "								'Pending'  \n" +
            "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
            "								'N/A'  \n" +
            "						END  \n" +
            "					) invoiceApprovalStatusValue,  \n" +
            "					p.invoiceApprovedBy,  \n" +
            "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
            "					p.invoiceApprovalDate,  \n" +
            "					p.invoiceApprovalComment,  \n" +
            "					p.internalRemark,  \n" +
            "                    p.remark,  \n" +
            "					p.lockStatus,  \n" +
            "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "						when p.lockStatus = 'LC' then 'Locked'  \n" +
            "						else null end  \n" +
            "					) lockStatusValue,  \n" +
            "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
            "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
            "                    case when p.receiptType = 'I' then  \n" +
            "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
            "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
            "					h1.refType as haltRefType,  \n" +
            "                    h1.status as haltStatus,  \n" +
            "                    (CASE WHEN h1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltStatusText,  \n" +
            "                    (CASE  \n" +
            "							WHEN h1.status = 'H' THEN  \n" +
            "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReason,  \n" +
            "                    psh1.refType as haltRefTypeRefInv,  \n" +
            "                    psh1.status as haltStatusRefInv,  \n" +
            "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
            "								'Halted'  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInvText,  \n" +
            "                    (CASE  \n" +
            "							WHEN psh1.status = 'H' THEN  \n" +
            "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
            "							ELSE ''  \n" +
            "						END  \n" +
            "					) AS haltReasonRefInv,  \n" +
            "                    p.markedForRefund,  \n" +
            "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
            "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
            "										'Waiting for Refund'  \n" +
            "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
            "										'Partially Refunded'  \n" +
            "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
            "										'Fully Refunded'  \n" +
            "								else '' end  \n" +
            "						end  \n" +
            "					) markedForRefundValue,  \n" +
            "                    p.markedForRefundAmt  \n" +
            "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
            "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
            "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
            "							gFiles.gencFileOwnerType,  \n" +
            "							gFiles.refTransID,  \n" +
            "							gFiles.entityID  \n" +
            "						FROM genericfiles gFiles  \n" +
            "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
            "						and gFiles.entityID in (-13,-15,-16)  \n" +
            "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
            "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
            "																		WHEN p.receiptType = 'D' THEN -16  \n" +
            "																		ELSE -13  \n" +
            "																	END)  \n" +
            "				and psDoc.refTransID = p.id  \n" +
            "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
            "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where h2.refTransId = h1.refTransId  \n" +
            " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
            "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
            "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
            "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
            "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
            " 											 from holdunholdtrans h2  \n" +
            " 											where psh1.refTransId = h2.refTransId  \n" +
            " 											  and h2.refType = 'SINV'  \n" +
            " 											  and h2.isDeleted = 0)*/  \n" +
            "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
            "            left join (  \n" +
            "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
            "				FROM 	vu_genericfilescount g  \n" +
            "				WHERE 	g.entityID = -14  \n" +
            "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
            "            ) pg on pg.refTransID = psm.id  \n" +
            "			left join (  \n" +
            "							select 	a.refPackingSlipMaterialRecID,  \n" +
            "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
            "								sum(a.itemReceived) itemReceived,  \n" +
            "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
            "								sum(a.itemDisapproved) itemDisapproved,  \n" +
            "								sum(a.approveLineCount) approveLineCount,  \n" +
            "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
            "                                sum(discount) totalDiscount,  \n" +
            "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
            "							from 	(  \n" +
            "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
            "										psm.packingSlipSerialNumber,  \n" +
            "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
            "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
            "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
            "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
            "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
            "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
            "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
            "										extendedPrice,  \n" +
            "                                        discount,  \n" +
            "										extendedReceivedPrice  \n" +
            "									FROM 	packing_slip_material_receive_det psm  \n" +
            "									WHERE 	psm.isDeleted = 0  \n" +
            "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
            "								) a  \n" +
            "							group by a.refPackingSlipMaterialRecID  \n" +
            "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
            "				left join (select b.refPackingslipInvoiceID,  \n" +
            "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
            "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
            "							  from packingslip_invoice_payment a  \n" +
            "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "							 where a.refPaymentMode IN ('P','RR')  \n" +
            "							   and a.isPaymentVoided = 0  \n" +
            "							   and b.isDeleted = 0  \n" +
            "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
            "				left join (  \n" +
            "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
            "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
            "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
            "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
            "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
            "							from 		packing_slip_material_receive ps  \n" +
            "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
            "                            left join (select b.refPackingslipInvoiceID,  \n" +
            "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
            "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
            "										  from packingslip_invoice_payment a  \n" +
            "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
            "										 where a.refPaymentMode IN ('P','RR')  \n" +
            "										   and b.isPaymentVoided = 0  \n" +
            "										   and b.isDeleted = 0  \n" +
            "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
            "								  where ps.receiptType in ('C','D')  \n" +
            "									and ps.isDeleted = 0  \n" +
            "									and pd.isDeleted = 0  \n" +
            "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
            "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
            "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",  \n" +
            "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
            "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
            "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
            "				and exists (select 1  \n" +
            "							  from packingslip_invoice_payment pm  \n" +
            "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
            "							 where pm.isPaymentVoided = 0  \n" +
            "							   and pm.refPaymentMode = 'P'  \n" +
            "							   and pd.refPackingslipInvoiceID = p.id  \n" +
            "							   and pm.isDeleted = 0  \n" +
            "                               and pd.isDeleted = 0  \n" +
            "							   and pm.paymentNumber \",  \n" +
            "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
            "                               ,\") \");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF pDueDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
            "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
            "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
            "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
            "		IF pIsExactSearch = 1 THEN  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
            "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
            "									AND (  \n" +
            "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
            "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
            "									  \" ) \"  \n" +
            "						);  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
            "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
            "				SELECT 1  \n" +
            "				  FROM packing_slip_material_receive_det x  \n" +
            "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
            "			)  \n" +
            "		\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "    EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"  \n" +
            "			SELECT 	c.*,  \n" +
            "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
            "				round(c.paidAmount,2) totalPaidAmount,  \n" +
            "                round(c.refundAmount,2) totalRefundAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
            "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
            "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
            "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
            "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version ->  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (1102,'1.00','V1','Task 36283: Add Paid Date in supplier invoice list page - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1102:
             allDbChangesArray.push(
             /* **************************** New Script -> 25-08-2021  *********************************** */
             "ALTER TABLE packingslip_invoice_payment  \n" +
                "ADD COLUMN isMarkAsPaid TINYINT ;  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment  \n" +
                "MODIFY `paymentNumber` VARCHAR(50) ;  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment  \n" +
                "ADD COLUMN status INT ;  \n" +
                "  \n" +
                "ALTER TABLE packingslip_invoice_payment  \n" +
                "ADD COLUMN subStatus INT ;  \n" +
             /* **************************** Add Script Version ->  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1103,'1.00','V1',' new status field for packingslip_invoice_payment table - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1103:
             allDbChangesArray.push(
             /* **************************** New Script -> 25-08-2021  *********************************** */
             "CALL Sproc_GenerateIncrementalNumber('ChartOfAccountsSystemID',TRUE) ;  \n" +
                "  \n" +
                "INSERT INTO `acct_acctmst`  \n" +
                "	( `systemid`, `acct_code`, `acct_name`, `sub_class_id`, `class_id`,  \n" +
                "	`description`, `disp_order`, `isSubAccount`, `parent_acct_id`, `tax_acct_id`, `m3_acct_id`,  \n" +
                "	`createdBy`, `createdAt`, `createByRoleId`, `updatedBy`, `updatedAt`, `updateByRoleId`  \n" +
                "	)  \n" +
                "	VALUES  \n" +
                "	((SELECT systemID FROM temp_serialNumber),  \n" +
                "	'5456124579', 'Credit Card Expense',  \n" +
                "	(SELECT class_id FROM acct_classmst WHERE class_id = -5 AND isDeleted = 0)  ,  \n" +
                "	(SELECT class_id FROM acct_classmst WHERE class_id = -5 AND isDeleted = 0),  \n" +
                "	NULL, NULL, 0, NULL, NULL, NULL,  \n" +
                "	1, fun_DatetimetoUTCDateTime(), 1, 1, fun_DatetimetoUTCDateTime(), 1  \n" +
                "	);  \n" +
             /* **************************** Add Script Version ->  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1104,'1.00','V1',' ChartOfAccountsSystemID new systemID - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1104:
             allDbChangesArray.push(
             /* **************************** New Script -> 25-08-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
            "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(  \n" +
            "	IN pCustPaymentDetList JSON,  \n" +
            "	IN pCustCMDetList JSON,  \n" +
            "	IN pMfgcodeID INT,  \n" +
            "	IN pPaymentNumber VARCHAR(50),  \n" +
            "	IN pPaymentDate DATE,  \n" +
            "	IN pPaymentAmount DECIMAL(18,8),  \n" +
            "	IN pPaymentType INT,  \n" +
            "	IN pAccountReference VARCHAR(50),  \n" +
            "	IN pBankAccountMasID INT,  \n" +
            "	IN pBankAccountNo VARCHAR(50),  \n" +
            "	IN pBankName VARCHAR(255),  \n" +
            "	IN pRemark VARCHAR(1000),  \n" +
            "	IN pRefPaymentMode VARCHAR(10),  \n" +
            "	IN pTotSelectedPayOfCust INT,  \n" +
            "	IN pTotSelectedCMOfCust INT,  \n" +
            "	IN pSystemID VARCHAR(20),  \n" +
            "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
            "	IN pUserID INT,  \n" +
            "	IN pUserRoleID INT,  \n" +
            "	IN pRefGencTransModeID INT,  \n" +
            "	IN pOffsetAmount DECIMAL(18,8),  \n" +
            "	IN pBillToName VARCHAR(100) ,  \n" +
            "	IN pBillToAddress VARCHAR(255),  \n" +
            "	IN pIsMarkAsPaid TINYINT  \n" +
            "  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE insertedRefundMstID INT;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	IF(pTotSelectedPayOfCust > 0 AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
            "  \n" +
            "		/* get/map all Customer payment Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustPaymentDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustPaymentDetList_JT ;  \n" +
            "  \n" +
            "		/* get all customer payment > against total payment list > available in data base */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
            "			SELECT psip.id AS paymentMstID,  \n" +
            "				psip.paymentAmount,  \n" +
            "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID = psip.id  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0) AS totalRefundIssuedAmount  \n" +
            "			FROM packingslip_invoice_payment psip  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "			AND psip.isDeleted = 0 ;  \n" +
            "  \n" +
            "		/* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected payment not found from db  \n" +
            "			> original Agreed Refund Amount Of Payment  mismatch  \n" +
            "			> Total Refund Issued Amount mismatch  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "			SELECT tucipl.*  \n" +
            "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
            "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
            "			WHERE (  \n" +
            "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "  \n" +
            "	ELSEIF (pTotSelectedCMOfCust > 0  \n" +
            "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
            "             /* get/map all Customer CM Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustCMDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustCMDetList_JT ;  \n" +
            "	 -- select * from temp_UI_CustCMDetList;  \n" +
            "  \n" +
            "	/* get all customer Refund > against total CM list > available in data base */  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
            "			SELECT cps.id AS custCreditMemoMstID,  \n" +
            "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,  \n" +
            "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
            "				WHERE refCustCreditMemoID = cps.id  \n" +
            "				AND refPaymentMode = 'CA'  \n" +
            "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
            "			 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundCustCreditMemoID = cps.id  \n" +
            "					AND isPaymentVoided = 0  \n" +
            "					AND isDeleted = 0  \n" +
            "                    ) totalRefundIssuedAmount  \n" +
            "		FROM customer_packingslip AS cps  \n" +
            "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "		AND cps.isDeleted = 0 ;  \n" +
            "         -- select * from temp_DB_Available_CustCMDetList;  \n" +
            "  \n" +
            "		/* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected CM not found from db  \n" +
            "			> original Agreed Refund Amount Of Refund mismatch  \n" +
            "			> Total Refund Issued Amount mismatch  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "			SELECT tucml.*  \n" +
            "			FROM temp_UI_CustCMDetList tucml  \n" +
            "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
            "			WHERE (  \n" +
            "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* set up default temp table if not created */  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))  \n" +
            "					) THEN  \n" +
            "  \n" +
            "  \n" +
            "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
            "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
            "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
            "			`depositBatchNumber` ,  `offsetAmount`,`refGencTransModeID`,  \n" +
            "			`payToName` , `payToAddress`, `billToAddress` , `billToName` ,  \n" +
            "			`isMarkAsPaid` , `status` , `subStatus` ,  \n" +
            "			`createdAt`, `createdBy`, `createByRoleId`,  \n" +
            "			`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
            "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
            "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
            "			pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
            "			pDepositBatchNumber, pOffsetAmount , pRefGencTransModeID ,  \n" +
            "			pBillToName, pBillToAddress , pBillToAddress , pBillToName ,  \n" +
            "			pIsMarkAsPaid , 1 , 1 ,  \n" +
            "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
            "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
            "  \n" +
            "		SET insertedRefundMstID = LAST_INSERT_ID();  \n" +
            "  \n" +
            "		IF(pTotSelectedPayOfCust > 0) THEN  \n" +
            "			/* add selected refund payment details data */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
            "					`comment` ,  \n" +
            "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
            "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,  \n" +
            "				COMMENT ,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustPaymentDetList ;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
            "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
            "  \n" +
            "			/* update refund payment status details */  \n" +
            "			UPDATE packingslip_invoice_payment psip  \n" +
            "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
            "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
            "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
            "			SET psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
            "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
            "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
            "						END) ,  \n" +
            "				updatedBy = pUserID,  \n" +
            "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
            "			AND psip.isPaymentVoided = 0  \n" +
            "			AND psip.isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "		ELSEIF(pTotSelectedCMOfCust > 0) THEN  \n" +
            "			/* add selected refund credit memo details data */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
            "					`comment` ,  \n" +
            "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
            "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,  \n" +
            "				COMMENT ,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
            "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
            "			UPDATE customer_packingslip cps  \n" +
            "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
            "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
            "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
            "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
            "					FROM packingslip_invoice_payment  \n" +
            "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
            "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
            "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
            "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
            "  \n" +
            "						   ELSE cps.paymentStatus END  \n" +
            "						) ,  \n" +
            "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
            "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
            "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
            "						END) ,  \n" +
            "				cps.updatedBy = pUserID,  \n" +
            "				cps.updateByRoleId = pUserRoleID ,  \n" +
            "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "			AND cps.isDeleted = 0	;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Resp[0] - store procedure status */  \n" +
            "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN  \n" +
            "		SELECT 0 AS 'spStatus' ;  \n" +
            "	ELSE  \n" +
            "		SELECT 1 AS 'spStatus' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Resp[1] - get all mis match amount records or deleted payment */  \n" +
            "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
            "  \n" +
            "	/* Resp[2] - get all mis match amount records or deleted CM */  \n" +
            "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "  \n" +
            "	/* Resp[3] - newly inserted refund master id for Refund Transaction  */  \n" +
            "	SELECT insertedRefundMstID AS insertedRefundMstID;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
            "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(  \n" +
            "	IN pCustPaymentDetList JSON,  \n" +
            "	IN pCustCMDetList JSON,  \n" +
            "	IN pCustRefundMstID INT,  \n" +
            "	IN pMfgcodeID INT,  \n" +
            "	IN pPaymentNumber VARCHAR(50),  \n" +
            "	IN pPaymentDate DATE,  \n" +
            "	IN pPaymentAmount DECIMAL(18,8),  \n" +
            "	IN pPaymentType INT,  \n" +
            "	IN pAccountReference VARCHAR(50),  \n" +
            "	IN pBankAccountMasID INT,  \n" +
            "	IN pBankAccountNo VARCHAR(50),  \n" +
            "	IN pBankName VARCHAR(255),  \n" +
            "	IN pRemark VARCHAR(1000),  \n" +
            "	IN pRefPaymentMode VARCHAR(10),  \n" +
            "	IN pTotSelectedPayOfCust INT,  \n" +
            "	IN pTotSelectedCMOfCust INT,  \n" +
            "	IN pDeleteCustPaymentDetList JSON,  \n" +
            "	IN pDeleteCustCMDetList JSON,  \n" +
            "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
            "	IN pUserID INT,  \n" +
            "	IN pUserRoleID INT,  \n" +
            "	IN pOffsetAmount DECIMAL(18,8) ,  \n" +
            "	IN pBillToName VARCHAR(100) ,  \n" +
            "	IN pBillToAddress VARCHAR(255) ,  \n" +
            "	IN pIsMarkAsPaid TINYINT,  \n" +
            "	IN pSubStatus INT,  \n" +
            "	IN pStatus INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;  \n" +
            "	IF(pTotSelectedPayOfCust > 0  \n" +
            "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
            "		/* get/map all Customer Payment Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustPaymentDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustPaymentDetList_JT ;  \n" +
            "		-- select * from temp_UI_CustPaymentDetList;  \n" +
            "  \n" +
            "		/* get all customer refund > against total payment list > available in data base */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
            "			SELECT psip.id AS paymentMstID,  \n" +
            "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "				psipd.id AS paymentDetMstID,  \n" +
            "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID = psip.id  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount  \n" +
            "			FROM packingslip_invoice_payment psip  \n" +
            "				LEFT JOIN packingslip_invoice_payment_det psipd  \n" +
            "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "			AND psip.isDeleted = 0  \n" +
            "			AND psip.isPaymentVoided = 0 ;  \n" +
            "  \n" +
            "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
            "  \n" +
            "            /* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL  \n" +
            "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL  \n" +
            "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "			SELECT tucipl.*  \n" +
            "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
            "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
            "			WHERE (  \n" +
            "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "  \n" +
            "  \n" +
            "				/* get/map all deleting customer Payment Detail List send from UI */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS  \n" +
            "				SELECT 	*  \n" +
            "				FROM 	JSON_TABLE(  \n" +
            "					pDeleteCustPaymentDetList,  \n" +
            "						\"$[*]\" COLUMNS(  \n" +
            "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"  \n" +
            "						)  \n" +
            "				) AS DeleteCustPaymentDetList_JT ;  \n" +
            "  \n" +
            "				 /* get all deleted invoice payment det (passed from UI but not in db)  \n" +
            "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
            "					SELECT id FROM packingslip_invoice_payment_det  \n" +
            "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
            "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
            "  \n" +
            "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
            "  \n" +
            "  \n" +
            "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)  \n" +
            "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN  \n" +
            "  \n" +
            "			/* start - create/update/delete payment refund process */  \n" +
            "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN  \n" +
            "				/* delete those which are unselected(from UI) payment det */  \n" +
            "				UPDATE packingslip_invoice_payment_det  \n" +
            "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
            "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
            "				AND isPaymentVoided = 0  \n" +
            "				AND isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS  \n" +
            "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
            "  \n" +
            "				/* update refund payment status details which are deleted (unselected from UI) */  \n" +
            "				UPDATE packingslip_invoice_payment psip  \n" +
            "					JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
            "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
            "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
            "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
            "				SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
            "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
            "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
            "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
            "								END)  \n" +
            "							ELSE 'NA' END),  \n" +
            "					updatedBy = pUserID,  \n" +
            "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
            "				AND psip.isPaymentVoided = 0  \n" +
            "				AND psip.isDeleted = 0 ;  \n" +
            "  			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			/* update all payment det amount whose amount is changed from UI */  \n" +
            "			UPDATE packingslip_invoice_payment_det pipd  \n" +
            "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT  \n" +
            "					FROM temp_UI_CustPaymentDetList  \n" +
            "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
            "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
            "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),  \n" +
            "				pipd.comment = tucipdl.comment ,  \n" +
            "				pipd.updatedBy = pUserID,  \n" +
            "				pipd.updateByRoleId = pUserRoleID ,  \n" +
            "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
            "			AND pipd.isPaymentVoided = 0  \n" +
            "			AND pipd.isDeleted = 0  \n" +
            "			;  \n" +
            "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
            "  \n" +
            "			/* insert newly selected payment det */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
            "				`comment` ,  \n" +
            "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,  \n" +
            "				COMMENT ,  \n" +
            "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustPaymentDetList  \n" +
            "			WHERE paymentDetMstID IS NULL  \n" +
            "			;  \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
            "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
            "  \n" +
            "			/* update refund payment status details which are newly created/updated */  \n" +
            "			UPDATE packingslip_invoice_payment psip  \n" +
            "				JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
            "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
            "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
            "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
            "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
            "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
            "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
            "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
            "							END)  \n" +
            "						ELSE 'NA' END) ,  \n" +
            "				updatedBy = pUserID,  \n" +
            "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
            "			AND psip.isPaymentVoided = 0  \n" +
            "			AND psip.isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	/* customer credit memo refund cases */  \n" +
            "	ELSEIF (pTotSelectedCMOfCust > 0 AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
            "  \n" +
            "	        /* get/map all Customer CM Detail List send from UI */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
            "		SELECT 	*  \n" +
            "		FROM 	JSON_TABLE(  \n" +
            "			pCustCMDetList,  \n" +
            "				\"$[*]\" COLUMNS(  \n" +
            "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
            "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
            "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
            "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
            "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
            "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
            "				)  \n" +
            "			) AS CustCMDetList_JT ;  \n" +
            "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
            "  \n" +
            "		/* get all customer Refund > against total CM list > available in data base */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
            "				SELECT cps.id AS custCreditMemoMstID,  \n" +
            "				 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "		    (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
            "						AND isPaymentVoided = 0  \n" +
            "						AND isDeleted = 0  \n" +
            "			    ) totalRefundIssuedAmount  \n" +
            "			FROM customer_packingslip AS cps  \n" +
            "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "			AND cps.isDeleted = 0 ;  \n" +
            "  \n" +
            "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
            "  \n" +
            "		/* get all mis match amount records (compare UI data and db available data)  \n" +
            "			> if selected CM not found from db  \n" +
            "			> original Agreed Refund Amount Of Refund mismatch  \n" +
            "			> Total Refund Issued Amount mismatch  \n" +
            "			*/  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "			SELECT tucml.*  \n" +
            "			FROM temp_UI_CustCMDetList tucml  \n" +
            "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
            "			WHERE (  \n" +
            "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
            "				OR  \n" +
            "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
            "				)  \n" +
            "			;  \n" +
            "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
            "  \n" +
            "			/* get/map all deleting customer CM Detail List send from UI */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS  \n" +
            "				SELECT 	*  \n" +
            "				FROM 	JSON_TABLE(  \n" +
            "					pDeleteCustCMDetList,  \n" +
            "						\"$[*]\" COLUMNS(  \n" +
            "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
            "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"  \n" +
            "						)  \n" +
            "				) AS DeleteCustCMtDetList_JT ;  \n" +
            "				-- select * from temp_UI_Delete_CustCMDetList;  \n" +
            "  \n" +
            "			/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
            "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
            "					SELECT id FROM packingslip_invoice_payment_det  \n" +
            "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
            "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
            "  \n" +
            "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
            "  \n" +
            "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)  \n" +
            "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN  \n" +
            "				/* delete those which are unselected(from UI) CM det */  \n" +
            "				UPDATE packingslip_invoice_payment_det  \n" +
            "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
            "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
            "				AND isPaymentVoided = 0  \n" +
            "				AND isDeleted = 0 ;  \n" +
            "				-- select 'deleted refund for CM list' ;  \n" +
            "  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS  \n" +
            "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
            "				UPDATE customer_packingslip cps  \n" +
            "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
            "						FROM packingslip_invoice_payment_det  \n" +
            "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)  \n" +
            "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
            "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
            "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
            "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
            "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
            "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
            "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
            "									END)  \n" +
            "							ELSE 'NA' END),  \n" +
            "					cps.updatedBy = pUserID,  \n" +
            "					cps.updateByRoleId = pUserRoleID ,  \n" +
            "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
            "				AND cps.isDeleted = 0	;  \n" +
            "  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			/* update all CM det amount whose amount is changed from UI */  \n" +
            "			UPDATE packingslip_invoice_payment_det pipd  \n" +
            "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT  \n" +
            "					FROM temp_UI_CustCMDetList  \n" +
            "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
            "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
            "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),  \n" +
            "				pipd.comment = tucipdl.comment ,  \n" +
            "				pipd.updatedBy = pUserID,  \n" +
            "				pipd.updateByRoleId = pUserRoleID ,  \n" +
            "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
            "			AND pipd.isPaymentVoided = 0  \n" +
            "			AND pipd.isDeleted = 0  \n" +
            "			;  \n" +
            "  \n" +
            "			/* insert newly selected CM det */  \n" +
            "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
            "				`comment` ,  \n" +
            "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
            "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,  \n" +
            "				COMMENT ,  \n" +
            "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
            "			FROM temp_UI_CustCMDetList  \n" +
            "			WHERE paymentDetMstID IS NULL  \n" +
            "			;  \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
            "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
            "  \n" +
            "			/* update customer credit memo - payment status and refund status   */  \n" +
            "			UPDATE customer_packingslip cps  \n" +
            "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
            "					FROM packingslip_invoice_payment_det  \n" +
            "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
            "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
            "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
            "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
            "					FROM packingslip_invoice_payment  \n" +
            "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
            "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
            "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
            "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
            "  \n" +
            "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
            "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
            "  \n" +
            "						   ELSE cps.paymentStatus END  \n" +
            "						) ,  \n" +
            "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
            "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
            "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
            "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
            "								END)  \n" +
            "						      ELSE 'NA' END),  \n" +
            "				cps.updatedBy = pUserID,  \n" +
            "				cps.updateByRoleId = pUserRoleID ,  \n" +
            "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
            "			AND cps.isDeleted = 0	;  \n" +
            "  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "		/* update payment master details */  \n" +
            "		UPDATE packingslip_invoice_payment  \n" +
            "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
            "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
            "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
            "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
            "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
            "			payToName = pBillToName , payToAddress = pBillToAddress,  \n" +
            "			billToAddress = pBillToAddress, billToName = pBillToName,  \n" +
            "			isMarkAsPaid = pIsMarkAsPaid ,  \n" +
            "			subStatus = pSubStatus , `status` = pStatus ,  \n" +
            "			updatedBy = pUserID, offsetAmount = pOffsetAmount,  \n" +
            "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "		WHERE id = pCustRefundMstID  \n" +
            "		AND isPaymentVoided = 0  \n" +
            "		AND isDeleted = 0 ;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	/* set up default temp table if not created */  \n" +
            "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
            "  \n" +
            "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
            "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
            "  \n" +
            "  \n" +
            "	/* Resp[0] - store procedure status */  \n" +
            "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)  \n" +
            "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)  \n" +
            "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)  \n" +
            "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
            "		) THEN  \n" +
            "		SELECT 0 AS 'spStatus' ;  \n" +
            "	ELSE  \n" +
            "		SELECT 1 AS 'spStatus' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Resp[1] - get all deleted payment det (passed from UI but not in db) */  \n" +
            "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
            "  \n" +
            "	/* Resp[2] - get all deleted CM det (passed from UI but not in db) */  \n" +
            "	SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
            "  \n" +
            "	/* Resp[3] - get all mis match payment amount records or deleted  */  \n" +
            "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
            "  \n" +
            "	/*  Resp[4] - get all mis match credit memo amount records or deleted  */  \n" +
            "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;  \n" +
            "  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerRefundByMstID` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(  \n" +
            "	IN pCustRefundMstID INT ,  \n" +
            "	IN pRefPaymentMode VARCHAR(5)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "		DECLARE v_TimeZone VARCHAR(50);  \n" +
            "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "		SELECT 	psip.id,  \n" +
            "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
            "			psip.paymentType,  gc.gencCategoryName AS paymentMethodName,  \n" +
            "			psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
            "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
            "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  \n" +
            "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,  \n" +
            "			(CASE WHEN psip.isPaymentVoided = 0 THEN  '' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,  \n" +
            "			psip.status , psip.subStatus , psip.isMarkAsPaid ,  \n" +
            "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
            "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
            "				ELSE '' END) AS refundSubStatusText,  \n" +
            "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,  \n" +
            "			psip.billToName, psip.billToAddress,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
            "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmp ,  \n" +
            "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmp ,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) updatedbyInitial,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
            "			fun_getUserNameByID(psip.createdBy) createdbyInitial  \n" +
            "  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "			JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
            "		WHERE id = pCustRefundMstID  \n" +
            "		AND refPaymentMode = pRefPaymentMode  \n" +
            "		AND psip.isDeleted = 0  \n" +
            "		;  \n" +
            "	END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCustSuppRefundListByPaymentNum` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustSuppRefundListByPaymentNum`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pPaymentNumber VARCHAR(100),  \n" +
            "	IN pCustRefundMstID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_refundMstIDWhrClause VARCHAR(50);  \n" +
            "  \n" +
            "	SET v_refundMstIDWhrClause = '';  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "  \n" +
            "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pCustRefundMstID IS NULL AND pCustRefundMstID != '') THEN  \n" +
            "  		SET v_refundMstIDWhrClause = CONCAT(\" AND psip.id = \", pRefundMstID );  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	SET @Sproc_GetCustSuppRefundListByPaymentNum = CONCAT(\"  \n" +
            "		SELECT  psip.id,  \n" +
            "			psip.mfgcodeID ,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS customerCodeName,  \n" +
            "			psip.bankName,  \n" +
            "			psip.bankAccountNo,  \n" +
            "			psip.paymentType,  \n" +
            "			psip.bankAccountMasID,  \n" +
            "			psip.systemId ,  \n" +
            "			psip.paymentDate AS refundDate,  \n" +
            "			psip.paymentAmount,  \n" +
            "			psip.accountReference,  \n" +
            "			psip.remark,  \n" +
            "			psip.paymentNumber,  \n" +
            "			gc.gencCategoryName AS paymentMethod,  \n" +
            "			gc.systemGenerated AS systemGeneratedPaymentMethod,  \n" +
            "			psip.refGencTransModeID , gtmm.modeName,  \n" +
            "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
            "			psip.refPaymentMode ,  \n" +
            "			(CASE WHEN psip.refPaymentMode = 'CR' THEN 'Customer Refund'  \n" +
            "				WHEN psip.refPaymentMode = 'P' THEN 'Supplier Payment' ELSE ''  \n" +
            "				END) AS entityNameInApplied,  \n" +
            "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
            "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
            "		     LEFT JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
            "		WHERE psip.paymentNumber = '\", pPaymentNumber ,\"'  \n" +
            "		\",v_refundMstIDWhrClause,\"  \n" +
            "		AND psip.refPaymentMode IN ('CR','P')  \n" +
            "		AND psip.isPaymentVoided = 0  \n" +
            "		AND psip.isDeleted = 0  \n" +
            "  \n" +
            "            \");  \n" +
            "  \n" +
            "      --  select @Sproc_GetCustSuppRefundListByPaymentNum;  \n" +
            "  \n" +
            "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "			/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	 -- select @SQLStatement1;  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
            "	IN pPageIndex INT,  \n" +
            "	IN pRecordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pCustomerIDs VARCHAR(16383),  \n" +
            "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
            "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
            "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
            "	IN pRefundSubStatusIDs VARCHAR(16383),  \n" +
            "	IN pExactPaymentNumberSearch TINYINT,  \n" +
            "	IN pPaymentNumber VARCHAR(1000),  \n" +
            "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
            "	IN pAmount VARCHAR(50),  \n" +
            "	IN pExactRefundAmountSearch TINYINT,  \n" +
            "	IN pFromDate DATE,  \n" +
            "	IN pToDate DATE,  \n" +
            "	IN pFromCMPaymentDate DATE,  \n" +
            "	IN pToCMPaymentDate DATE,  \n" +
            "	IN pRefPaymentMode VARCHAR(10),  \n" +
            "	IN pTransModeType INT,  \n" +
            "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
            "	DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
            "	DECLARE v_CMDateCon VARCHAR(1000);  \n" +
            "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
            "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "        SET v_CMDateCon = '';  \n" +
            "        SET v_PaymentDateCon = '';  \n" +
            "        SET v_CMPaymentDateWhereClause = '';  \n" +
            "        SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
            "  \n" +
            "  \n" +
            "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pRefundSubStatusIDs IS NOT NULL AND pRefundSubStatusIDs != '') THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, ' AND subStatus in (',pRefundSubStatusIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pPaymentNumber IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pAmount IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
            "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
            "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN  \n" +
            "  \n" +
            "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
            "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
            "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
            "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
            "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
            "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "		SET v_CMPaymentDateWhereClause = CONCAT('  \n" +
            "			AND  \n" +
            "			(  \n" +
            "				EXISTS(  \n" +
            "					SELECT  1  \n" +
            "					FROM packingslip_invoice_payment_det pipddt  \n" +
            "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
            "					WHERE pipddt.refPayementid = psip.id  \n" +
            "					',v_PaymentDateCon,'  \n" +
            "					AND pipddt.isDeleted=0  \n" +
            "				 )  \n" +
            "				 OR  \n" +
            "				 EXISTS(  \n" +
            "					SELECT  1  \n" +
            "					FROM packingslip_invoice_payment_det pipddt  \n" +
            "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
            "					WHERE pipddt.refPayementid = psip.id  \n" +
            "					',v_CMDateCon,'  \n" +
            "					AND pipddt.isDeleted=0  \n" +
            "				 )  \n" +
            "			)  \n" +
            "  \n" +
            "		');  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
            "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
            "		SELECT  psip.id,  \n" +
            "			psip.mfgcodeID ,  \n" +
            "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
            "			psip.isPaymentVoided,  psip.voidPaymentReason,  \n" +
            "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
            "			(CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
            "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
            "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
            "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
            "									ELSE NULL END) AS voidedAt,  \n" +
            "			psip.bankName,  \n" +
            "			psip.bankAccountNo,  \n" +
            "			psip.paymentType,  \n" +
            "			psip.bankAccountMasID,  \n" +
            "			psip.systemId ,  \n" +
            "			psip.paymentDate AS refundDate,  \n" +
            "			psip.paymentAmount,  \n" +
            "			psip.accountReference,  \n" +
            "			psip.remark,  \n" +
            "			psip.paymentNumber,  \n" +
            "			gc.gencCategoryName paymentMethod,  \n" +
            "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
            "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
            "				ELSE NULL END) AS paymentCMList ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
            "				ELSE NULL END) AS paymentCMNumWithOutIDList ,  \n" +
            "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'  \n" +
            "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,  \n" +
            "			psip.offsetAmount ,  \n" +
            "			psip.refGencTransModeID , gtmm.modeName,  \n" +
            "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
            "			psip.status , psip.subStatus ,  \n" +
            "			(CASE WHEN psip.subStatus = 1 THEN 'Draft' WHEN psip.subStatus = 2 THEN 'Published'  \n" +
            "				WHEN psip.subStatus = 3 THEN 'Ready to Print Check' WHEN psip.subStatus = 4 THEN 'Refunded'  \n" +
            "				ELSE '' END) AS refundSubStatusText,  \n" +
            "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
            "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
            "				ELSE '' END) AS refundSubStatusLogicalText,  \n" +
            "			psip.isMarkAsPaid,  \n" +
            "			(CASE WHEN psip.isMarkAsPaid = 0 THEN 'No'  WHEN psip.isMarkAsPaid = 1 THEN 'Yes'  \n" +
            "				ELSE 'Not Applicable' END) AS isMarkAsPaidBooleanConverted,  \n" +
            "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
            "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
            "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
            "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
            "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList  \n" +
            "					FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
            "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  \n" +
            "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
            "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
            "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList  \n" +
            "					 FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
            "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  \n" +
            "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
            "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		WHERE psip.refPaymentMode = 'CR'  \n" +
            "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
            "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"  \n" +
            "		AND psip.isDeleted = 0  \n" +
            "  \n" +
            "            \");  \n" +
            "  \n" +
            "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
            "  \n" +
            "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "			/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "	 -- select @SQLStatement1;  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCheckPrintAndRemittanceCustRefundReport` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
            "	IN pPaymentID INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "		/* Refund master details */  \n" +
            "		SELECT pip.id, pip.accountReference,  \n" +
            "			pip.paymentDate, pip.paymentNumber,  \n" +
            "			pip.paymentAmount,  \n" +
            "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
            "			pip.payToName ,   pip.payToAddress,  \n" +
            "			 pip.billToName AS customerName,  \n" +
            "			 pip.billToAddress AS customerAddress,  \n" +
            "			ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
            "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
            "			g.gencCategoryName AS paymentType ,  \n" +
            "			pip.remark  \n" +
            "		FROM packingslip_invoice_payment pip  \n" +
            "			LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
            "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
            "		WHERE pip.id = pPaymentID  \n" +
            "		AND pip.refPaymentMode = 'CR'  \n" +
            "		AND pip.isDeleted = 0  ;  \n" +
            "  \n" +
            "  \n" +
            "		/* get refunded payment or refunded credit memo details */  \n" +
            "		SELECT  \n" +
            "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
            "				ELSE NULL END) AS paymentCMNumber ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
            "				ELSE NULL END) AS paymentCMDate ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
            "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
            "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
            "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
            "				ELSE NULL END) AS commentForPaymentCM  \n" +
            "  \n" +
            "		FROM packingslip_invoice_payment psip  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
            "					FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
            "					WHERE psipd.refPayementid = pPaymentID  \n" +
            "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
            "					 ) payRefundDetTemp  \n" +
            "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
            "					 FROM packingslip_invoice_payment_det psipd  \n" +
            "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
            "					WHERE psipd.refPayementid = pPaymentID  \n" +
            "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
            "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
            "					) cmRefundDetTemp  \n" +
            "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
            "  \n" +
            "		WHERE psip.id = pPaymentID  \n" +
            "		AND psip.refPaymentMode = 'CR'  \n" +
            "		AND psip.isDeleted = 0  ;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "		/* Default set company (isCompany = 1) address details  */  \n" +
            "		SELECT CONCAT(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,  \n" +
            "			cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
            "			cu.email AS companyEmail,cu.primaryContactName AS companyContactName,  \n" +
            "			(SELECT `name` FROM company_info WHERE isDeleted = 0) companyName  \n" +
            "		FROM customer_addresses cua  \n" +
            "			JOIN mfgcodemst cu ON cu.id = cua.customerId AND cu.isDeleted = 0  \n" +
            "			JOIN countrymst c ON c.countryID = cua.countryID AND c.isDeleted = 0  \n" +
            "		WHERE cua.addressType = 'B'  \n" +
            "		AND cu.isCompany = 1  \n" +
            "		AND cua.isDefault = 1  \n" +
            "		AND cua.isDeleted = 0;  \n" +
            "  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
            "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
            "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
            "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
            "						ELSE \"Payment# or Check#\" END),						OLD.paymentNumber,  \n" +
            "					NEW.paymentNumber,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
            "						ELSE \"Payment Date\" END), 						CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),  \n" +
            "					CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),				OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
            "					   ELSE \"Payment Amount ($)\" END),  						CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),  \n" +
            "					CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),					OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
            "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
            "		  FROM genericcategory  \n" +
            "		 WHERE gencCategoryID = OLD.paymentType  \n" +
            "		 LIMIT 1;  \n" +
            "  \n" +
            "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
            "		  FROM genericcategory  \n" +
            "		 WHERE gencCategoryID = NEW.paymentType  \n" +
            "		 LIMIT 1;  \n" +
            "  \n" +
            "         INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Payment Method\",								vOldval,  \n" +
            "					vNewval,									OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 		(vTableName,									NEW.id,  \n" +
            "					\"Account Reference\",								OLD.accountReference,  \n" +
            "					NEW.accountReference,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
            "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
            "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,									NEW.id,  \n" +
            "					\"Bank Name\",								OLD.bankName,  \n" +
            "					NEW.bankName,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Comments\",									OLD.remark,  \n" +
            "					NEW.remark,									OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Agreed Refund Amount ($)\",							CAST(FORMAT(OLD.agreedRefundAmt,2) AS CHAR),  \n" +
            "					CAST(FORMAT(NEW.agreedRefundAmt,2) AS CHAR),					OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "			 VALUES 	(vTableName,									NEW.id,  \n" +
            "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
            "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
            "		IF NEW.isDeleted = TRUE THEN  \n" +
            "			SET vNewval = 'Deleted';  \n" +
            "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
            "			SET vNewval = 'Restored';  \n" +
            "		ELSE  \n" +
            "			SET vNewval = 'Unknown action on delete';  \n" +
            "        END IF;  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "                    Colname,									Oldval,  \n" +
            "                    Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,								NEW.id,  \n" +
            "                    vNewval,									NULL,  \n" +
            "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
            "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
            "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
            "				END;  \n" +
            "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
            "				END;  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
            "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
            "						ELSE \"Payment Status\" END), 						vOldval,  \n" +
            "					vNewval,									OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "  \n" +
            "  \n" +
            "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "							(tableName,									refPaymentID,  \n" +
            "							Colname,									Oldval,  \n" +
            "							Newval,										createdAt,  \n" +
            "							createdBy,									createByRoleId,  \n" +
            "							updatedAt,									updatedBy,  \n" +
            "							updateByRoleId)  \n" +
            "				  VALUES 	(vTableName,										NEW.id,  \n" +
            "							\"Voided Date\",							'',  \n" +
            "							fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),  OLD.updatedAt,  \n" +
            "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "  \n" +
            "  \n" +
            "			  INSERT INTO supplier_invoice_payment_history  \n" +
            "							(tableName,									refPaymentID,  \n" +
            "							Colname,									Oldval,  \n" +
            "							Newval,										createdAt,  \n" +
            "							createdBy,									createByRoleId,  \n" +
            "							updatedAt,									updatedBy,  \n" +
            "							updateByRoleId)  \n" +
            "				  VALUES 	(vTableName,										NEW.id,  \n" +
            "							\"Voided By\",									'',  \n" +
            "							fun_getUserNameByID(NEW.updatedBy),						OLD.updatedAt,  \n" +
            "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "							fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "							NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "		  END IF;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
            "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
            "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
            "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
            "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
            "		INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
            "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "				\"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
            "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
            "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
            "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
            "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Locked Date\",									'',  \n" +
            "					fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat), OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
            "        INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					\"Locked By\",									'',  \n" +
            "					fun_getUserNameByID(NEW.lockedBy),						OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "    END IF;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
            "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
            "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
            "				FROM mfgcodemst  \n" +
            "				WHERE id =OLD.mfgcodeID  \n" +
            "				ORDER BY id DESC LIMIT 1;  \n" +
            "			END IF;  \n" +
            "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
            "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
            "				FROM mfgcodemst  \n" +
            "				WHERE id =NEW.mfgcodeID  \n" +
            "				ORDER BY id DESC LIMIT 1;  \n" +
            "			END IF;  \n" +
            "			  INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Supplier\",									vOldval,  \n" +
            "						vNewval,												OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "		END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Pay To name\",									OLD.payToName,  \n" +
            "						NEW.payToName,									OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Pay To Address\",									OLD.payToAddress,  \n" +
            "						NEW.payToAddress,								OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Bill To Name\",									OLD.billToName,  \n" +
            "						NEW.billToName,									OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,									refPaymentID,  \n" +
            "						Colname,									Oldval,  \n" +
            "						Newval,										createdAt,  \n" +
            "						createdBy,									createByRoleId,  \n" +
            "						updatedAt,									updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,										NEW.id,  \n" +
            "						\"Bill To Address\",								OLD.billToAddress,  \n" +
            "						NEW.billToAddress,								OLD.updatedAt,  \n" +
            "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
            "						NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "  \n" +
            "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
            "  \n" +
            "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "						(tableName,						refPaymentID,  \n" +
            "						Colname,						Oldval,  \n" +
            "						Newval,							createdAt,  \n" +
            "						createdBy,						createByRoleId,  \n" +
            "						updatedAt,						updatedBy,  \n" +
            "						updateByRoleId)  \n" +
            "			  VALUES 	(vTableName,							NEW.id,  \n" +
            "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
            "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
            "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "	    END IF;  \n" +
            "  \n" +
            "    END IF;  \n" +
            "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
            "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,										NEW.id,  \n" +
            "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
            "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
            "						ELSE '' END),								OLD.offsetAmount,  \n" +
            "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
            "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
            "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
            "					NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "        END IF;  \n" +
            "  \n" +
            "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
            "			INSERT INTO supplier_invoice_payment_history  \n" +
            "					(tableName,									refPaymentID,  \n" +
            "					Colname,									Oldval,  \n" +
            "					Newval,										createdAt,  \n" +
            "					createdBy,									createByRoleId,  \n" +
            "					updatedAt,									updatedBy,  \n" +
            "					updateByRoleId)  \n" +
            "		  VALUES 	(vTableName,								NEW.id,  \n" +
            "					\"COA\",  \n" +
            "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
            "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
            "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
            "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
            "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId); /*updateByRoleId*/  \n" +
            "        END IF;  \n" +
            "    END IF;  \n" +
            "END;  \n" +             
            /* **************************** Add Script Version ->  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1105,'1.00','V1',' customer refund sps - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
        case 1105:
            allDbChangesArray.push(
            /* **************************** New Script -> 25-08-2021  *********************************** */
            "ALTER TABLE `bank_mst`  \n" +
                "MODIFY `typeOfAccount` VARCHAR(2) ;  \n" +
            /* **************************** Add Script Version ->  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (1106,'1.00','V1',' updated field data type for typeOfAccount in bank_mst - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1106:
                allDbChangesArray.push(
                /* **************************** New Script -> 26-08-2021  *********************************** */
                "select pageId into @pageId from page_detail where pageName = 'Manage Parts Opening Stock';  \n" +
                "  \n" +
                "UPDATE `page_detail`  \n" +
                "SET `pageName` = 'Manage Parts Assembly Stock',  \n" +
                "`pageRoute` = 'app.component.managecomponent.assemblystockdetail',  \n" +
                "`pageURL` = '/assemblystock/:mfgType/:coid',  \n" +
                "`menuName` = 'Manage Parts Assembly Stock'  \n" +
                "WHERE (`pageID` =  @pageId);  \n" +
                /* **************************** Add Script Version -> 26-08-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1107,'1.00','V1','Update page detail entry for Assembly Stock route in Part master - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break;
        case 1107:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-08-2021  *********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyStock;  \n" +
            "CREATE PROCEDURE `Sproc_GetAssemblyStock`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "    IN pWhereClause VARCHAR(16383),  \n" +
            "    IN pStockType VARCHAR(50)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "  \n" +
            "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	SET @temp_Sproc_GetAssemblyStock = CONCAT(\" Select ass.id ,ass.openingdate,  \n" +
            "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
            "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
            "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.woID, ass.serialNo,  \n" +
            "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
            "			ass.parentWarehouse,  \n" +
            "			ass.systemGeneratedsss,ass.typestock,  \n" +
            "			ass.dateCode, ifnull(ass.dateCodeFormat, wo.dateCodeFormat) dateCodeFormat,  \n" +
            "			ass.updatedby,ass.createdby,  \n" +
            "			ass.createdbyRole, ass.updatedbyRole,  \n" +
            "			ass.createdAt, ass.updatedAt,  \n" +
            "			ass.qtyBox,  \n" +
            "            ifnull(ass.poQty, SUM(`wsd`.`poQty`)) AS `totalPOQty`,  \n" +
            "			ifnull(ass.poNumber, GROUP_CONCAT(`so`.`poNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `poNumber`,  \n" +
            "			ifnull(ass.soNumber, GROUP_CONCAT(`so`.`salesOrderNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `salesOrderNumber`  \n" +
            "			from (SELECT s.id, s.openingdate,  \n" +
            "				c.imageURL, c.documentPath, s.partID, c.mfgPN, c.PIDCode,  \n" +
            "				c.nickname, c.rev, c.custAssyPN, c.mfgPNDescription,  \n" +
            "				ro.rohsIcon, ro.name AS rohsName, s.woNumber, s.serialNo,  \n" +
            "				s.openingStock,fun_getWarehouseNameByID(s.whID) warehouse,fun_getBinNameByID(s.binID) binName,  \n" +
            "				fun_getDepartmentNameByBinID(s.binID) parentWarehouse,  \n" +
            "				(select count(1) from shippedassembly sh where sh.partID=s.partID and sh.woNumber=s.woNumber and sh.isdeleted=0) systemGeneratedsss,  \n" +
            "				fun_getStockType(s.type) typestock,  \n" +
            "				s.dateCode,s.dateCodeFormat,  \n" +
            "				fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
            "				fun_getUserNameByID(s.createdBy) createdby,  \n" +
            "				fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
            "				fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
            "				  ,(select sum(qtyPerBox) from workorder_boxserialno where assyStockId =  s.id) qtyBox,  \n" +
            "				   s.poQty,s.poNumber,s.soNumber,  \n" +
            "				  s.type,s.woID  \n" +
            "			FROM assemblystock s  \n" +
            "			JOIN component c ON c.id = s.partID AND c.category = 3  \n" +
            "			LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
            "			WHERE s.isdeleted = 0  \n" +
            "		) ass  \n" +
            "        LEFT JOIN workorder_salesorder_details wsd ON wsd.woID = ass.woID and wsd.partID = ass.partID and wsd.isDeleted = 0  \n" +
            "        LEFT JOIN workorder wo ON wo.woID = ass.woID and wo.isDeleted = 0  \n" +
            "        LEFT JOIN salesorderdet sod ON sod.id = wsd.salesOrderDetailID and wsd.partID = sod.partID and sod.isDeleted = 0  \n" +
            "        LEFT JOIN salesordermst so ON so.id = sod.refSalesOrderID and so.isDeleted = 0  \n" +
            "        where FIND_IN_SET(ass.type,'\",pStockType,\"')  \n" +
            "        group by ass.id ,ass.openingdate,  \n" +
            "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
            "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
            "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.serialNo,  \n" +
            "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
            "			ass.parentWarehouse,  \n" +
            "			ass.systemGeneratedsss,ass.typestock,  \n" +
            "			ass.dateCode,ass.dateCodeFormat,  \n" +
            "			ass.updatedby,ass.createdby,  \n" +
            "			ass.createdbyRole, ass.updatedbyRole,  \n" +
            "			ass.createdAt, ass.updatedAt,  \n" +
            "			ass.qtyBox\");  \n" +
            "  \n" +
            "		IF (pOrderBy IS NOT NULL) THEN  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
            "		ELSE  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY PIDCode DESC\");  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "			SET pWhereClause = '1=1';  \n" +
            "		END IF;  \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
            "		ELSE  \n" +
            "			SET rowNumWhere = '';  \n" +
            "		END IF;  \n" +
            "  \n" +
            "		/* to get total count of rows */  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetAssemblyStock,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "		PREPARE query2 FROM @SQLStatement2;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetAssemblyStock,\" ) c  \n" +
            "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "		PREPARE query1 FROM @SQLStatement2;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "END;  \n" +	
            /* **************************** Add Script Version -> 26-08-2021  *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (1108,'1.00','V1','Sproc_GetAssemblyStock - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1108:
  allDbChangesArray.push(
  /* **************************** New Script -> 26-08-2021  *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
      "	IN ppageIndex INT,  \n" +
      "	IN precordPerPage INT,  \n" +
      "	IN pOrderBy VARCHAR(255),  \n" +
      "	IN pWhereClause VARCHAR(16383),  \n" +
      "	IN pIsKitList TINYINT,  \n" +
      "	IN pPlannedStatus VARCHAR(10),  \n" +
      "	IN pSalesOrderDetailId INT,  \n" +
      "	IN pIsPendingWOCreationList TINYINT,  \n" +
      "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
      "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
      "	IN pfilterStatus VARCHAR(100),  \n" +
      "	IN pcustomerIds VARCHAR(16000),  \n" +
      "	IN pshippingMethodId VARCHAR(16000),  \n" +
      "	IN ptermsIds VARCHAR(16000),  \n" +
      "	IN psearchposotext VARCHAR(1000),  \n" +
      "	IN psearchposotype VARCHAR(10),  \n" +
      "	IN pfromDate DATE,  \n" +
      "	IN ptoDate DATE,  \n" +
      "	IN prushJob TINYINT,  \n" +
      "	IN ppartIds VARCHAR(16000),  \n" +
      "	IN pworkorders VARCHAR(16000),  \n" +
      "	IN psearchextPricetext VARCHAR(1000),  \n" +
      "	IN psearchextPricetype VARCHAR(10),  \n" +
      "	IN pkitreturnStatus VARCHAR(100),  \n" +
      "	IN pkitReleaseStatus VARCHAR(100)  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "	DECLARE pOffset INT;  \n" +
      "	DECLARE rowNumWhere VARCHAR(255);  \n" +
      "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
      "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
      "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
      "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
      "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
      "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
      "	SET v_PendingWOWhereClause='';  \n" +
      "  \n" +
      "	IF(pIsKitList=1) THEN  \n" +
      "		SET v_DynamicColumns = CONCAT(\",  \n" +
      "			hu.refType as refTypeKR,  \n" +
      "			hu.status as haltStatusKR,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hu.status = 'H' THEN  \n" +
      "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonKR,  \n" +
      "			hutt.refType as refTypePO,  \n" +
      "			hutt.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hutt.status = 'H' THEN  \n" +
      "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO,  \n" +
      "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin = CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
      "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
      "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
      "	ELSE  \n" +
      "		SET v_DynamicColumns=CONCAT(\",  \n" +
      "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
      "			(  \n" +
      "				CASE  \n" +
      "					WHEN hut.status = 'H' THEN  \n" +
      "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
      "					ELSE ''  \n" +
      "				END  \n" +
      "			) AS reasonPO  \n" +
      "		\");  \n" +
      "  \n" +
      "		SET v_DynamicJoin =CONCAT(\"  \n" +
      "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
      "				SELECT 	MAX(ht.id)  \n" +
      "				FROM 	holdunholdtrans ht  \n" +
      "				WHERE 	hut.refTransId = ht.refTransId  \n" +
      "						AND ht.refType='PO'  \n" +
      "						AND ht.isdeleted=0  \n" +
      "					)  \n" +
      "				\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
      "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
      "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
      "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
      "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
      "						co.mfgPN AS mfgPN,  \n" +
      "						co.nickname AS nickName,  \n" +
      "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
      "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
      "						vusalesorderdet.poNumber,  \n" +
      "						vusalesorderdet.salesOrderNumber  \n" +
      "				FROM 		workorder wo  \n" +
      "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
      "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
      "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
      "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
      "		\");  \n" +
      "	END IF;  \n" +
      "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
      "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
      "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
      "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
      "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
      "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
      "        IF pOrderBy IS NULL THEN  \n" +
      "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
      "        END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
      "		SELECT  a.*,  \n" +
      "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
      "		FROM  \n" +
      "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
      "				(  \n" +
      "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
      "							'No'  \n" +
      "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
      "							'Yes'  \n" +
      "						ELSE  \n" +
      "							''  \n" +
      "					END  \n" +
      "				) AS `isHotJobValue`,  \n" +
      "				`vuss`.`isHotJob`,  \n" +
      "				`vuss`.`Sales Order ID` AS id,  \n" +
      "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
      "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
      "				`vuss`.frequency as frequencyName,  \n" +
      "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
      "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
      "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
      "				`vuss`.`Po Number` AS poNumber,  \n" +
      "				`vuss`.`Po Date` AS poDate,  \n" +
      "				`vuss`.`Customer ID` AS customerID,  \n" +
      "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
      "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
      "				`vuss`.`Sales Order Status` AS `status`,  \n" +
      "				`vuss`.`Revision` AS revision,  \n" +
      "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
      "				`vuss`.`Terms ID` AS termsID,  \n" +
      "				`vuss`.`So Date` AS soDate,  \n" +
      "				`vuss`.`Company Name` AS companyName,  \n" +
      "				`vuss`.`internalPO` AS internalPO,  \n" +
      "				`vuss`.`mfgCode` AS mfgCode,  \n" +
      "				`vuss`.`Full Name` AS fullName,  \n" +
      "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
      "				`vuss`.`PO Qty` AS qty,  \n" +
      "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
      "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
      "				`vuss`.`mrpQty` AS mrpQty,  \n" +
      "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
      "				`vuss`.`kitQty` AS kitQty, \",  \n" +
      "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
      "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
      "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
      "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
      "				`vuss`.`shippingQty` AS shippingQty,  \n" +
      "				`vuss`.`remark` AS remark,  \n" +
      "				`vuss`.`Assy ID` AS PIDCode,  \n" +
      "				`vuss`.`Assy Name` AS mfgPN,  \n" +
      "				`vuss`.`NickName` AS nickName,  \n" +
      "				`vuss`.`liveVersion` AS liveVersion,  \n" +
      "				`vuss`.`partDescription` AS partDescription,  \n" +
      "				`vuss`.`cancleReason` AS cancleReason,  \n" +
      "                \",  IF(pIsKitList = 0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
      "				`vuss`.`modifyDate` AS modifyDate,  \n" +
      "				`vuss`.`createdDate` AS createdDate,  \n" +
      "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
      "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
      "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
      "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
      "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
      "				vuss.isBlanketPO,  \n" +
      "				vuss.blanketPOText,  \n" +
      "				vuss.poRevision,  \n" +
      "				vuss.partType,  \n" +
      "				vuss.isCancle,  \n" +
      "				vuss.mfgcodeID,  \n" +
      "				vuss.manufacturerName,  \n" +
      "				`vuss`.`PartID` AS partID,  \n" +
      "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
      "				`vuss`.`kitNumber` AS kitNumber,  \n" +
      "				`vuss`.`serialNumber` AS serialNumber,  \n" +
      "				`vuss`.partCategory,  \n" +
      "				vuss.lineID,  \n" +
      "				vuss.internalCommentSo,  \n" +
      "				vuss.internalComment,  \n" +
      "				vuss.originalPODate,  \n" +
      "				vuss.isRmaPO,  \n" +
      "				vuss.rmaPOText,  \n" +
      "				vuss.isLegacyPO,  \n" +
      "				vuss.legacyPOText,  \n" +
      "				vuss.originalPOQty,  \n" +
      "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
      "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
      "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
      "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
      "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
      "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
      "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
      "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
      "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
      "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
      "				(  \n" +
      "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
      "							'Draft'  \n" +
      "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
      "							'Published'  \n" +
      "						ELSE  \n" +
      "							''  \n" +
      "					END  \n" +
      "				) AS `statusConvertedValue`,  \n" +
      "				hutkit.refType as refTypeKA,  \n" +
      "				hutkit.status as haltStatusKA,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN 	hutkit.status = 'H' THEN  \n" +
      "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
      "						ELSE 	''  \n" +
      "					END  \n" +
      "				) AS reasonKA,  \n" +
      "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
      "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
      "				(  \n" +
      "				CASE  \n" +
      "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
      "						TRUE  \n" +
      "					ELSE  \n" +
      "						FALSE  \n" +
      "				END  \n" +
      "				) as isKitPlanningRequired,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
      "							'Unplanned'  \n" +
      "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
      "							'Partially Planned'  \n" +
      "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
      "							'Fully Planned'  \n" +
      "						ELSE  \n" +
      "							NULL  \n" +
      "					END  \n" +
      "				) as kitPlanStatus,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN 	ka.kitReturnStatus is null then  \n" +
      "							'N/A'  \n" +
      "						ELSE  \n" +
      "							ka.kitReturnStatus  \n" +
      "					END  \n" +
      "				) as kitReturnStatus,  \n" +
      "				(  \n" +
      "					CASE  \n" +
      "						WHEN ka.kitReleaseStatus is null then  \n" +
      "							'Not Released'  \n" +
      "						else  \n" +
      "							ka.kitReleaseStatus  \n" +
      "					END  \n" +
      "				) as kitReleaseStatus,  \n" +
      "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
      "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
      "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
      "				p.nextReleaseDate,  \n" +
      "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
      "				p.releasedPlanCount totalkitRelease,  \n" +
      "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
      "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
      "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
      "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
      "				vuss.releasedWorkorder,  \n" +
      "                ka.shortagePer,  \n" +
      "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
      "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
      "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
      "		LEFT JOIN  	(  \n" +
      "					SELECT  salesOrderDetID,  \n" +
      "						refAssyId,  \n" +
      "						count(1) totalPlan,  \n" +
      "						SUM(poQty) totalPOQty,  \n" +
      "						SUM(kitReleaseQty) totalKitQty,  \n" +
      "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
      "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
      "					FROM 	salesorder_plan_detailsmst  \n" +
      "					WHERE 	isDeleted=0  \n" +
      "							AND subAssyID is null  \n" +
      "					GROUP BY salesOrderDetID, refAssyId  \n" +
      "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
      "		LEFT JOIN 	(  \n" +
      "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "						`k`.`assyID` AS `assyID`,  \n" +
      "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
      "						`k`.`shortageLine` AS `shortageLine`,  \n" +
      "						allocPermainAssy allocPerComponent,  \n" +
      "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
      "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
      "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
      "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
      "						FROM (  \n" +
      "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
      "								mainAssy AS `assyID`,  \n" +
      "								COUNT(1) AS `totalLine`,  \n" +
      "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
      "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
      "								sum( k.shortageline) shortageline,  \n" +
      "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
      "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
      "							  FROM (  \n" +
      "  \n" +
      "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
      "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
      "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
      "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
      "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
      "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
      "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
      "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
      "									FROM  	`vu_kit_allocation_detail` vk  \n" +
      "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
      "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
      "								) `k`  \n" +
      "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
      "						) `k`  \n" +
      "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
      "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
      "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
      "		) AS a  \n" +
      "    \");  \n" +
      "  \n" +
      "    IF(pIsKitList = 1) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pOrderBy IS NOT NULL) THEN  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
      "	ELSE  \n" +
      "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
      "		SET pWhereClause = '1=1' ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
      "		IF(pIsKitList = 1)THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
      "	  IF(psearchposotype='C')THEN  \n" +
      "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
      "          ELSE  \n" +
      "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
      "          END IF;  \n" +
      "        END IF;  \n" +
      "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
      "	  IF(psearchextPricetype='C')THEN  \n" +
      "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
      "		ELSE  \n" +
      "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(prushJob = 1) THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pworkorders IS NOT NULL)THEN  \n" +
      "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
      "	END IF;  \n" +
      "	IF(ppartIds IS NOT NULL)THEN  \n" +
      "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
      "	END IF;  \n" +
      "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	-- from date to date filter  \n" +
      "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
      "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
      "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
      "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
      "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
      "    END IF;  \n" +
      "  \n" +
      "  	IF(pIsKitList = 1) THEN  \n" +
      "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
      "  	ELSE  \n" +
      "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
      "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
      "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
      "		END IF;  \n" +
      "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
      "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
      "		END IF;  \n" +
      "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF (pSalesOrderDetailId != 0) THEN  \n" +
      "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "  \n" +
      "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
      "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
      "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
      "	ELSE  \n" +
      "		SET rowNumWhere = '';  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	/* to get total count of rows */  \n" +
      "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
      "    PREPARE query1 FROM @SQLStatement1;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
      "    PREPARE query2 FROM @SQLStatement2;  \n" +
      "	EXECUTE query2;  \n" +
      "	DEALLOCATE PREPARE query2;  \n" +
      "  \n" +
      "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query3 FROM @SQLStatement3;  \n" +
      "	EXECUTE query3;  \n" +
      "	DEALLOCATE PREPARE query3;  \n" +
      "  \n" +
      "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
      "	PREPARE query4 FROM @SQLStatement4;  \n" +
      "	EXECUTE query4;  \n" +
      "	DEALLOCATE PREPARE query4;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version ->  *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (1109,'1.00','V1',' Alter procedure Sproc_GetSalesorderList--CC '," + userid + ", '" + requiredDet.ipAddress + "');"
  );
break;
        case 1109:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(16383),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "    DECLARE v_custPNID INT;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p'), custPNID  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN , v_custPNID  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.salesOrderDetailID, 0) salesOrderDetailID,	IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "													AND (CASE WHEN (v_custPNID IS NOT NULL) THEN c.id != v_custPNID ELSE 1 = 1 END)  \n" +
                "                                        GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate, costCategory, uid  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS salesOrderDetailID,		0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.PartId, vu.BinID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            salesOrderDetailID,		assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.salesOrderDetailID,					cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate, costCategory, cst.uid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1110,'1.00','V1','Bug 36350: [Hot Fix - Main Branch] Duplicate UMID showing in kit while CPN added in CPN and MPN cell at Bill of material - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1110:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-08-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetBOMPartAndPackagingAliasByAssembly`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMPartAndPackagingAliasByAssembly`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pSalesOrderDetailId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_BOMAssyIds VARCHAR(10000);  \n" +
                "		SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailId;  \n" +
                "  \n" +
                "		SELECT 		*  \n" +
                "		FROM 		(  \n" +
                "			SELECT 		rml.rfqLineItemsID, 		cp.componentID AS mfgPNID, 		fun_getMFGPNByID(cp.componentID) AS mfgPN, 		rml.partID, rml.mfgPNID AS cpnID,  \n" +
                "					fun_getAssyPIDCodeByID(cp.componentID) AS PIDCode, 			rml.restrictUseInBOMStep, 				rml.restrictUseInBOMWithPermissionStep,  \n" +
                "					rml.restrictUseInBOMExcludingAliasStep, 				rml.restrictUseInBOMExcludingAliasWithPermissionStep, 	rl.restrictCPNUseInBOMStep,  \n" +
                "					fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,  \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,        c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,  \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description, 							rml.customerApproval,  \n" +
                "					rl.customerApprovalCPN, 	TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 						fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,  \n" +
                "					rml.id AS lineitemAlternatePartId, 					rml.partID AS assyId,    				rml.mismatchMountingTypeStep,  \n" +
                "					rml.uomMismatchedStep, 		rml.mismatchFunctionalCategoryStep, rml.approvedMountingType  \n" +
                "			FROM 		component_packagingalias cp  \n" +
                "			LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "			LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid = c.id  \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "			WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "			UNION  \n" +
                "			SELECT 		rla.rfqLineItemsID, 		rla.mfgPNID, 				rla.mfgPN, 						rla.partID,     rla.mfgPNID AS cpnID,  \n" +
                "					c.PIDCode, 			rla.restrictUseInBOMStep, 		rla.restrictUseInBOMWithPermissionStep, 		rla.restrictUseInBOMExcludingAliasStep,  \n" +
                "					rla.restrictUseInBOMExcludingAliasWithPermissionStep, 			rl.restrictCPNUseInBOMStep, 				fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,  \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,      c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,  \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,  \n" +
                "					rla.customerApproval, 		rl.customerApprovalCPN, 		TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 	fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,  \n" +
                "					rla.id AS lineitemAlternatePartId,  rla.partID AS assyId,  \n" +
                "					rla.mismatchMountingTypeStep, 	rla.uomMismatchedStep, 			rla.mismatchFunctionalCategoryStep ,rla.approvedMountingType  \n" +
                "			FROM 		rfq_lineitems_alternatepart rla  \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "			INNER JOIN	component c ON c.id = rla.mfgPNID  \n" +
                "			WHERE 	 	FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "			UNION  \n" +
                "			SELECT 		rla.rfqLineItemsID, 		custPNID AS mfgPNID, 			custPN AS mfgPN, 					rla.partID,  	rla.mfgPNID AS cpnID,  \n" +
                "					c.PIDCode, 			rla.restrictUseInBOMStep, 		rla.restrictUseInBOMWithPermissionStep, 		rla.restrictUseInBOMExcludingAliasStep,  \n" +
                "					rla.restrictUseInBOMExcludingAliasWithPermissionStep, 			rl.restrictCPNUseInBOMStep, 				fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 2) AS bomLineCleanStatus,  \n" +
                "					rl.isInstall, 			rl.isPurchase, 				rl.isBuyDNPQty,           c.mountingTypeID, 		c.RoHSStatusID, 		c.partType,  \n" +
                "					CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description, 							rla.customerApproval,  \n" +
                "					rl.customerApprovalCPN, 	TRIM(IFNULL(rl.lineID, ''))+0 AS bomLineItemId, 						fun_getAssyPIDCodeByID(pPartID) AS assyPIDCode,  \n" +
                "					rla.id AS lineitemAlternatePartId, 					rla.partID AS assyId,  \n" +
                "					rla.mismatchMountingTypeStep, 	rla.uomMismatchedStep, 			rla.mismatchFunctionalCategoryStep, rla.approvedMountingType  \n" +
                "			FROM 		rfq_lineitems_alternatepart rla  \n" +
                "			INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "			INNER JOIN	component c ON c.id = rla.mfgPNID  \n" +
                "			WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND custPNID IS NOT NULL AND rla.isDeleted = 0  \n" +
                "			GROUP BY 	custPNID, rla.partID  \n" +
                "		) a GROUP BY a.bomLineItemId, a.assyId, a.mfgPN;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-08-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1111,'1.00','V1','Bug 36350: [Hot Fix - Main Branch] Duplicate UMID showing in kit while CPN added in CPN and MPN cell at Bill of material - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1111:
            allDbChangesArray.push(
            /* **************************** New Script -> 01-09-2021  *********************************** */
             "ALTER TABLE component ADD COLUMN frequencyType INT COMMENT '1-Release,2-Shipment';  \n" +
             "ALTER TABLE salesorderdet ADD COLUMN frequencyType INT COMMENT '1-Release,2-Shipment';  \n" +
             "ALTER TABLE salesorder_otherexpense_details ADD COLUMN frequencyType INT COMMENT '1-Release,2-Shipment';  \n" +
             "ALTER TABLE salesorder_otherexpense_details ADD COLUMN refReleaseLineID INT;  \n" +
             "ALTER TABLE customer_packingslip_otherexpense_details ADD COLUMN frequencyType INT COMMENT '1-Release,2-Shipment';  \n" +
             "ALTER TABLE salesorderdet ADD COLUMN refBlanketPOID INT;  \n" +
            /* **************************** Add Script Version ->  *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (1112,'1.00','V1',' Other Charges Changes - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
         );
            break;
        case 1112:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllOtherComponentList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      DECLARE pmfgCodeID INT;  \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
                "  \n" +
                "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
                "      FROM supplier_mapping_mst  \n" +
                "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 ;  \n" +
                "  \n" +
                "      #get component having mfg as iscompany and part type other  \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
                "      cp.name AS packagingName,  \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
                "      c.frequencyType  \n" +
                "      FROM component c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
                "      WHERE c.partType=4  \n" +
                "      AND c.isdeleted=0  \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
                "      AND c.isGoodPart  = 1;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       fun_getTotalSOLines(s.id) AS totalSOLines,  \n" +
                "       fun_getTotalCompletedSOLines(s.id) AS totalCompletedSOLines,  \n" +
                "       fun_getSOCompletedPercentage(s.id) AS soCompletionPercentage,  \n" +
                "      fun_getSOCompletedSummaryStatus(s.id) AS salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "	IFNULL(sd.custPOLineNumber ,1)   custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        ss.releaseNotes,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "         c.mfgpn,  \n" +
                "         c.mfgpndescription,  \n" +
                "         c.pidcode,  \n" +
                "         fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "         c.nickName,  \n" +
                "         c.mfgcodeID,  \n" +
                "         sd.originalPOQty,  \n" +
                "         fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "	(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "	fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "	fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "	fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "	CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "	(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
                "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
                "		AND cpd.isdeleted=0) shippedQty ,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "		ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "        (SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "        sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID, sd.refRFQGroupID, sd.refRFQQtyTurnTimeID  ,  \n" +
                "        IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "						c.category partCategory  \n" +
                "        FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "  \n" +
                "WHERE sd.id=psalesorderDetID  \n" +
                "AND  sd.isDeleted = 0 AND  \n" +
                "(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
                "	ss.qty > (SELECT  \n" +
                "	IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
                "		AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  \n" +
                "		SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
                "ELSE  \n" +
                "	ss.qty=ss.qty  \n" +
                "END)  \n" +
                "AND ss.isdeleted=0  \n" +
                "ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "-- all list of shipping line with other charges  \n" +
                "SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		NULL releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "                  pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        refSODetID,  \n" +
                "        refSOReleaseLineID,  \n" +
                "        frequency,  \n" +
                "        originalPOQty,  \n" +
                "        frequencyType  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			NULL releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 sd.refSODetID,  \n" +
                "			 sd.refSOReleaseLineID,  \n" +
                "			 sd.frequency,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "			LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
                "	IN invoiceID INT      ,  \n" +
                "    IN pTransType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	                 SELECT inv.id,   inv.transType,  \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "                        cps.id packingSlipID,  \n" +
                "						inv.refSalesOrderId  ,  \n" +
                "                        inv.systemID,  \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,  \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
                "						inv.soNumber,inv.soDate,  \n" +
                "                        inv.packingSlipType,inv.`status`,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
                "						inv.invoiceNumber,inv.invoiceDate,  \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
                "                        inv.intermediateShipmentId ,  \n" +
                "						inv.billingAddress,  \n" +
                "						inv.shippingAddress,  \n" +
                "						inv.intermediateAddress,  \n" +
                "                        inv.isLocked,  \n" +
                "                        inv.subStatus,  \n" +
                "                        inv.paymentStatus,  \n" +
                "                        inv.packingSlipType,  \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
                "                        inv.isZeroValue,  \n" +
                "                        inv.revision,  \n" +
                "                        cps.subStatus packingSlipSubStatus,  \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
                "						ELSE '' END) materialStatus ,  \n" +
                "                        inv.isAlreadyPublished ,  \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
                "			cps.revision packingSlipVersion,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
                "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
                "			ELSE NULL END) receivedAmount,  \n" +
                "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
                "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN  \n" +
                "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
                "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
                "				END) AS paymentStatusCode,  \n" +
                "			inv.refundStatus,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
                "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
                "				sm.isRmaPO,  \n" +
                "				sm.isLegacyPO,  \n" +
                "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
                "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
                "			inv.isAskForVersionConfirmation,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  \n" +
                "		FROM customer_packingslip inv  \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
                "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
                "                 WHERE inv.id = invoiceID  \n" +
                "                 AND inv.transType = pTransType;  \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,  \n" +
                "					cpd.id,  \n" +
                "                    cpd.refCustPackingSlipID,  \n" +
                "					cpd.custPOLineID,  \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                    cpd.lineID,  \n" +
                "                    co.PIDCode,  \n" +
                "                    co.mfgcodeID,  \n" +
                "                    ss.releaseNumber,  \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
                "					co.mfgpn,  \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                    cpd.partId,  \n" +
                "                    cpd.refChargesTypeID,  \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "                    othercharges AS lineOtherCharges,  \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "					cpd.shippingNotes,  \n" +
                "                    cpd.internalComment,  \n" +
                "                    cpd.assyDescription,  \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
                "                    co.partType,  \n" +
                "                    vu.packingLineID,  \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "                    cpd.isZeroValue,  \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
                "                 ORDER BY cpd.lineID ASC;  \n" +
                "  \n" +
                "                 SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                         cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName,  \n" +
                "			cpOther.frequencyType,  \n" +
                "			  (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
                "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "                 FROM  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "                   customer_packingslip_otherexpense_details cpOther  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cpOther.isdeleted=0;  \n" +
                "  \n" +
                "                  --  Tracking Number  \n" +
                "                SELECT id,trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = invoiceID  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- sales commission attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.quoted_commissionPercentage,  \n" +
                "                    cca.quoted_commissionValue,  \n" +
                "                    cca.poQty,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.quotedQty,  \n" +
                "                    cca.type,  \n" +
                "                    cca.rfqAssyID,  \n" +
                "                    cca.commissionCalculateFrom,  \n" +
                "                    cca.salesCommissionNotes,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.quoted_unitPrice  \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "                 -- sales commission child attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.refQuoteAttributeId,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.org_commissionPercentage,  \n" +
                "                    cca.org_commissionValue,  \n" +
                "                    cca.category,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.org_unitPrice,  \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
                "				FROM customer_packingslip_commission_attribute cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "END;  \n" +
            /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCustomerPackingSlipOtherExpensesByDetailId` ;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerPackingSlipOtherExpensesByDetailId`(  \n" +
                "    pDetailId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "                 SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                          cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName,  \n" +
                "			    cpOther.frequencyType,  \n" +
                "			                   (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
                "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther  \n" +
                "                 WHERE cpOther.refCustomerPackingSlipDetID = pDetailId  \n" +
                "                 AND cpOther.isdeleted=0;  \n" +
                "END;  \n" +
            /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "        DECLARE v_CountOfSIRecord INT;  \n" +
                "        DECLARE v_StringOfMFGCode VARCHAR(255);  \n" +
                "        DECLARE Status_Check TINYINT;  \n" +
                "	DECLARE vPackingSlipId INT;  \n" +
                "	DECLARE vrefSalesOrderID INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		Error VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	customer_packingslip  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND transType = 'P'  \n" +
                "			AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));  \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT 	refCustInvoiceID, GROUP_CONCAT(fullCustCode),`subStatus` ,id ,refSalesOrderID  \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId ,vrefSalesOrderID  \n" +
                "		FROM 	(  \n" +
                "				SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(customerID) fullCustCode,`subStatus`,refCustInvoiceID,refSalesOrderID  \n" +
                "				FROM 	customer_packingslip  \n" +
                "				WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND transType = 'P'  \n" +
                "						AND isDeleted =0  \n" +
                "		) a;  \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,  \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,  \n" +
                "                customerID,  \n" +
                "                    id AS packingSlipID,  \n" +
                "                    poNumber, poDate,poRevision,  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,  \n" +
                "                    packingSlipType,  \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,  \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,  \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,  \n" +
                "                    shipToId, billToId ,  \n" +
                "                    freeOnBoardId,salesCommissionTo,  \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,  \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,  \n" +
                "                    contactPersonId,  \n" +
                "                    intermediateShipmentId ,  \n" +
                "                    billingAddress,  \n" +
                "                    shippingAddress,  \n" +
                "                    intermediateAddress,  \n" +
                "                    packingSlipComment,  \n" +
                "                    headerComment,  \n" +
                "                    revision packingSlipVersion  \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND transType = 'P'  \n" +
                "						AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,  \n" +
                "						cpd.refSalesorderDetid,  \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,  \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                        cpd.partId,cpd.refChargesTypeID,  \n" +
                "                        cpd.shippingId,  \n" +
                "					(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,  \n" +
                "						cpd.shipQty,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.price, cpd.unitPrice) unitPrice,  \n" +
                "						cpd.assyDescription,  \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,  \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,  \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,  \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "						(IFNULL(cpd.shipQty,0)* IF(cp.packingSlipType = 2 ,sod.price,IFNULL(cpd.unitPrice,0))) extPrice,  \n" +
                "						cpd.otherCharges AS lineOtherCharges,  \n" +
                "						0 totalExtPrice ,  \n" +
                "						1 isFromPackingSlip,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "						(CASE 	WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 1 THEN 'From RFQ'  \n" +
                "								WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 3 THEN 'N/A'  \n" +
                "                                WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 2 THEN 'From Part Master' ELSE '' END) quoteFromText  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  AND cp.transType = 'P'  \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "                 WHERE cpd.isDeleted=0  \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;  \n" +
                "  \n" +
                "                -- get other charges  \n" +
                "                -- 1, Every 2 First 3 Last  \n" +
                "			  SELECT dtl.refCustPackingSlipID ,  \n" +
                "					 dtl.refSalesorderDetid,  \n" +
                "                     dtl.remainingQty,  \n" +
                "                     sother.partID,  \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,  \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,  \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,  \n" +
                "                     sother.price ,  \n" +
                "                     sother.qty,  \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,  \n" +
                "                     sother.frequency,  \n" +
                "                      sother.lineComment,  \n" +
                "                       sother.lineInternalComment,  \n" +
                "                       sother.frequencyType,  \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'  \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'  \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyName ,  \n" +
                "						(CASE  WHEN (sother.frequencyType = 1) THEN 'Release'  \n" +
                "							WHEN (sother.frequencyType = 2) THEN 'Shipment'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "				FROM (  \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM  \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,  \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'  \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency  \n" +
                "						FROM (  \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,  \n" +
                "								cpd2.remainingQty,cpd2.shippingId,  \n" +
                "                                cpd2.partID,  \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex  \n" +
                "							FROM customer_packingslip_det cpd1  \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0  \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId  \n" +
                "                            AND cpd1.isDeleted = 0  \n" +
                "						) AS a  \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency  \n" +
                "				) AS dtl  \n" +
                "				JOIN salesorder_otherexpense_details sother  \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0  \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)  \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;  \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number  \n" +
                "                SELECT trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- other charges  \n" +
                "                SELECT cpd.partId,cpd.shipQty,cpd.poQty,cpd.refSalesorderDetid,cpd.shippingId  \n" +
                "		FROM customer_packingslip cp JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID=cp.id  \n" +
                "			WHERE transType='I' AND cp.refSalesOrderID=vrefSalesOrderID AND cp.isdeleted=0  ;  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOAssyList` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOAssyList`(  \n" +
                "pCustomerID INT,  \n" +
                "pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          c.mfgPN,  \n" +
                "		  c.PIDCode,  \n" +
                "		  c.id partID,  \n" +
                "		  sd.qty,  \n" +
                "		  IFNULL(bp.assignPOQty,0) assignPOQty,  \n" +
                "		  (sd.qty - IFNULL(bp. assignPOQty,0))AS pendingToAssign,  \n" +
                "		  sm.salesOrderNumber,  \n" +
                "		  sm.poNumber,  \n" +
                "		  sm.id AS soID,  \n" +
                "		   sd.id,  \n" +
                "		 CONCAT('(',mg.mfgcode,') ',c.mfgPN) blanketAssy  \n" +
                "	         FROM salesorderdet sd  \n" +
                "	         JOIN component c ON c.id=sd.partID AND c.isdeleted=0  \n" +
                "	         JOIN mfgcodemst mg ON mg.id=c.mfgcodeid AND mg.isdeleted=0  \n" +
                "	         JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "	         LEFT JOIN (  \n" +
                "	         SELECT  \n" +
                "			SUM(qty) AS assignPOQty,  \n" +
                "			sd.partID compID,sd.refBlanketPOID FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "			WHERE sm.isBlanketPO=0 AND sd.refBlanketPOID IS NOT NULL AND sm.customerID=pCustomerID AND sd.partID=pPartID AND sd.isdeleted=0 GROUP BY sd.partID,sd.refBlanketPOID  \n" +
                "	         ) bp ON bp.refBlanketPOID=sd.id  \n" +
                "	         WHERE sm.customerID=pCustomerID AND sd.partID=pPartID AND sm.isBlanketPO=1 AND sd.isdeleted=0 AND (sd.qty - IFNULL(bp. assignPOQty,0))>0;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 01-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOUsedQty` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOUsedQty`(  \n" +
                "pSdetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          sd.qty,  \n" +
                "	          sm.id,  \n" +
                "	          sm.salesOrderNumber,  \n" +
                "	          sm.poNumber,  \n" +
                "	          sd.custPOLineNumber  \n" +
                "  \n" +
                "	          FROM salesorderdet sd JOIN salesordermst sm ON sm.id= sd.refsalesOrderID  \n" +
                "	          WHERE sd.refBlanketPOID=pSdetID AND sd.isdeleted=0;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1113,'1.00','V1',' Blanket PO Changes - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

            case 1113:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                 "alter table rfq_lineitems  \n" +
                 "add column programmingMappingPendingRefdesCount int default 0;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "UPDATE `rfq_lineitems_filter` SET `displayName` = 'QPA vs REF DES Mismatch' WHERE (`filterCode` = 'QPAREFDES');  \n" +
                "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Other than Each (UOM) Parts' WHERE (`filterCode` = 'NONEACHPART');  \n" +
                "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with Mismatched Pins' WHERE (`filterCode` = 'MISMATCHEDPIN');  \n" +
                "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts Require Drive Tools' WHERE (`filterCode` = 'DRIVETOOLSPARTS');  \n" +
                "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with Mismatched Pitch' WHERE (`filterCode` = 'MISMATCHPITCH');  \n" +
                "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with TBD (Correct/Incorrect) Status' WHERE (`filterCode` = 'UNKNOWNPART');  \n" +
                "UPDATE `rfq_lineitems_filter` SET `displayName` = 'Parts with Kit Allocation Not Required' WHERE (`filterCode` = 'KITALLOCNOTREQUIRED');  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "UPDATE `rfq_lineitems_errorcode` SET  \n" +
                "`description` = '<% MFR %> <% MPN %> is not mapped to <% CPN %> Rev <% CPN Rev %>',  \n" +
                "`org_description` = '<% MFR %> <% MPN %> is not mapped to <% CPN %> Rev <% CPN Rev %>',  \n" +
                "`systemVariable` = '<% MFR %>,<% MPN %>,<% CPN %>,<% CPN Rev %>'  \n" +
                "WHERE (`errorCode` = 'MPNNOTADDEDINCPN');  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1114,'1.00','V1','User Story 36114: Demo improvement point suggested by jaybhai [12-08-2021] - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break;
            case 1114:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
                "IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;  \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS  \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,  \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,  \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'  \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust Will Program'  \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                "        WHEN a.programingStatus = 5 THEN 'Who Will Program'  \n" +
                "        ELSE 'N/A' END) AS programingStatus,  \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,  \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,  \n" +
                "a.description, a.numOfPosition, a.numOfRows, a.customerRev,  \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,  \n" +
                "a.customerDescription, a.customerPartDesc, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,  \n" +
                "a.isSupplierToBuy, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,  \n" +
                "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,  \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.requireMountingTypeError,  \n" +
                "a.requireFunctionalTypeError, a.mergeLines, a.lineMergeStep,  \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,  \n" +
                "a.isObsoleteLine,  \n" +
                "a.customerApprovalForQPAREFDESStep,  \n" +
                "a.customerApprovalForBuyStep,  \n" +
                "a.customerApprovalForPopulateStep,  \n" +
                "a.dnpQPARefDesStep,  \n" +
                "a.customerApprovalForDNPQPAREFDESStep,  \n" +
                "a.customerApprovalForDNPBuyStep,  \n" +
                "a.customerApprovalCPN,  \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,  \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,  \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,  \n" +
                "ac.description AS additionalComment,  \n" +
                "ac.id AS additionalCommentId,  \n" +
                "a.programmingMappingPendingRefdesCount,  \n" +
                "a.refDesigCount,  \n" +
                "a.dnpDesigCount  \n" +
                "FROM rfq_lineitems a  \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND b.isDeleted = 0  \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                "WHERE a.isDeleted = 0 AND a.partID = ppartID;  \n" +
                "  \n" +
                "SELECT b.id,  \n" +
                "b.lineID,  \n" +
                "b.cust_lineID,  \n" +
                "b.qpa,  \n" +
                "b.refDesig,  \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,  \n" +
                "a.mfgCodeID,  \n" +
                "mcm.acquisitionDetail,  \n" +
                "a.mfgPN,  \n" +
                "a.mfgPNID,  \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,  \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
                "a.distMfgCodeID,  \n" +
                "a.distPN,  \n" +
                "a.distMfgPNID,  \n" +
                "b.custPN,  \n" +
                "b.custPNID,  \n" +
                "b.isCustPN,  \n" +
                "b.uomID,  \n" +
                "b.programingStatus,  \n" +
                "b.substitutesAllow,  \n" +
                "b.allocatedInKit,  \n" +
                "a.description descriptionAlternate,  \n" +
                "b.description,  \n" +
                "b.numOfPosition,  \n" +
                "b.numOfRows,  \n" +
                "b.customerRev,  \n" +
                "b.isCustPNProgrammingRequire,  \n" +
                "b.customerDescription,  \n" +
                "b.customerPartDesc,  \n" +
                "b.isInstall,  \n" +
                "b.isPurchase,  \n" +
                "b.isNotRequiredKitAllocation,  \n" +
                "b.isSupplierToBuy,  \n" +
                "b.dnpQty,  \n" +
                "b.dnpDesig,  \n" +
                "a.id AS rfqAlternatePartID,  \n" +
                "b.qpaDesignatorStep,  \n" +
                "b.duplicateCPNStep,  \n" +
                "b.restrictCPNUseWithPermissionStep,  \n" +
                "b.restrictCPNUsePermanentlyStep,  \n" +
                "b.restrictCPNUseInBOMStep,  \n" +
                "b.requireMountingTypeStep,  \n" +
                "b.requireFunctionalTypeStep,  \n" +
                "b.requireMountingTypeError,  \n" +
                "b.requireFunctionalTypeError,  \n" +
                "b.isBuyDNPQty,  \n" +
                "b.isObsoleteLine,  \n" +
                "b.customerApprovalForQPAREFDESStep,  \n" +
                "b.customerApprovalForBuyStep,  \n" +
                "b.customerApprovalForPopulateStep,  \n" +
                "b.dnpQPARefDesStep,  \n" +
                "b.customerApprovalForDNPQPAREFDESStep,  \n" +
                "b.customerApprovalForDNPBuyStep,  \n" +
                "b.customerApprovalCPN,  \n" +
                "b.qpaCustomerApprovalComment,  \n" +
                "b.dnpqpaCustomerApprovalComment,  \n" +
                "b.buyCustomerApprovalComment,  \n" +
                "b.buyDNPCustomerApprovalComment,  \n" +
                "b.populateCustomerApprovalComment,  \n" +
                "b.cpnCustomerApprovalComment,  \n" +
                "b.isCustomerApprovedQPA,  \n" +
                "b.isCustomerApprovedBuy,  \n" +
                "b.isCustomerApprovedDNPQPA,  \n" +
                "b.isCustomerApprovedBuyDNP,  \n" +
                "b.isCustomerApprovedPopulate,  \n" +
                "b.isCustomerApprovedCPN,  \n" +
                "b.kitAllocationNotRequiredComment,  \n" +
                "b.isNotRequiredKitAllocationApproved,  \n" +
                "a.mfgVerificationStep,  \n" +
                "a.mfgDistMappingStep,  \n" +
                "a.mfgCodeStep,  \n" +
                "a.customerApproval,  \n" +
                "a.isCustomerUnAppoval,  \n" +
                "a.org_mfgCode,  \n" +
                "a.org_mfgPN,  \n" +
                "a.org_distributor,  \n" +
                "a.org_distPN,  \n" +
                "a.distVerificationStep,  \n" +
                "a.distCodeStep,  \n" +
                "a.getMFGPNStep,  \n" +
                "a.obsoletePartStep,  \n" +
                "a.mfgGoodPartMappingStep,  \n" +
                "a.mfgPNStep,  \n" +
                "a.distPNStep,  \n" +
                "a.badMfgPN,  \n" +
                "a.distGoodPartMappingStep,  \n" +
                "a.nonRohsStep,  \n" +
                "a.epoxyStep,  \n" +
                "a.invalidConnectorTypeStep,  \n" +
                "a.duplicateMPNInSameLineStep,  \n" +
                "a.mismatchMountingTypeStep,  \n" +
                "a.mismatchFunctionalCategoryStep,  \n" +
                "a.mismatchFunctionalCategoryStep,  \n" +
                "a.restrictUseWithPermissionStep,  \n" +
                "a.restrictUsePermanentlyStep,  \n" +
                "a.partPinIsLessthenBOMPinStep,  \n" +
                "a.mismatchRequiredProgrammingStep,  \n" +
                "a.mappingPartProgramStep,  \n" +
                "a.exportControlledStep,  \n" +
                "a.tbdPartStep,  \n" +
                "a.userData1,  \n" +
                "a.userData2,  \n" +
                "a.userData3,  \n" +
                "a.userData4,  \n" +
                "a.userData5,  \n" +
                "a.userData6,  \n" +
                "a.userData7,  \n" +
                "a.userData8,  \n" +
                "a.userData9,  \n" +
                "a.userData10,  \n" +
                "a.pickupPadRequiredStep,  \n" +
                "a.matingPartRquiredStep,  \n" +
                "a.suggestedGoodPartStep,  \n" +
                "a.suggestedGoodDistPartStep,  \n" +
                "a.driverToolsRequiredStep,  \n" +
                "a.functionalTestingRequiredStep,  \n" +
                "a.mismatchCustomPartStep,  \n" +
                "a.mismatchValueStep,  \n" +
                "a.approvedMountingType,  \n" +
                "a.mismatchPackageStep,  \n" +
                "a.mismatchPowerStep,  \n" +
                "a.mismatchToleranceStep,  \n" +
                "a.mismatchTempratureStep,  \n" +
                "a.mismatchNumberOfRowsStep,  \n" +
                "a.uomMismatchedStep,  \n" +
                "a.programingRequiredStep,  \n" +
                "a.mismatchProgrammingStatusStep,  \n" +
                "a.mismatchColorStep,  \n" +
                "a.restrictUseInBOMStep,  \n" +
                "a.restrictUseInBOMWithPermissionStep,  \n" +
                "a.restrictUseInBOMExcludingAliasStep,  \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "a.restrictUseExcludingAliasStep,  \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "a.unknownPartStep,  \n" +
                "a.defaultInvalidMFRStep,  \n" +
                "a.isUnlockApprovedPart,  \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                "cpnPart.partTypeName  \n" +
                "ELSE  \n" +
                "part.partTypeName END) AS parttypeID,  \n" +
                "a.parttypeID AS functionalID,  \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN  \n" +
                "cpnMount.name  \n" +
                "ELSE  \n" +
                "mount.name END) AS mountingtypeID,  \n" +
                "a.mountingtypeID AS mountingID,  \n" +
                "cat.categoryname partcategoryID,  \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,  \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,  \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,  \n" +
                "CASE WHEN  \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)  \n" +
                "THEN 1 ELSE 0 END isObsolete,  \n" +
                "co.PIDCode,  \n" +
                "co.mfgPNDescription,  \n" +
                "co.pitch,  \n" +
                "co.noOfRows,  \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,  \n" +
                "co.value,  \n" +
                "co.tolerance,  \n" +
                "co.voltage,  \n" +
                "co.isCustom,  \n" +
                "co.packaging,  \n" +
                "co.deviceMarking,  \n" +
                "co.powerRating,  \n" +
                "co.minOperatingTemp,  \n" +
                "co.maxOperatingTemp,  \n" +
                "co.connecterTypeID,  \n" +
                "co.driverToolRequired,  \n" +
                "co.matingPartRquired,  \n" +
                "co.pickupPadRequired,  \n" +
                "co.programingRequired,  \n" +
                "co.dataSheetLink,  \n" +
                "co.isCPN,  \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,  \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,  \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
                "co.isTemperatureSensitive,  \n" +
                "co.noOfPosition AS componentLead,  \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,  \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,  \n" +
                "co.createdBy,  \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,  \n" +
                "co.color,  \n" +
                "co.uom AS partUOMID,  \n" +
                "co.serialNumber,  \n" +
                "CASE WHEN  \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c  \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,  \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                "b.additionalComment ,  \n" +
                "b.additionalCommentId,  \n" +
                "a.suggestedByApplicationMsg,  \n" +
                "a.suggestedByApplicationStep,  \n" +
                "a.isMPNAddedinCPN, co.rev as  mfgPNrev ,  \n" +
                "a.mismatchPitchStep,  \n" +
                "b.programmingMappingPendingRefdesCount,  \n" +
                "b.refDesigCount,  \n" +
                "b.dnpDesigCount,co.feature  \n" +
                "FROM rfq_lineitems_alternatepart a  \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id  \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0  \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id  \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id  \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id  \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id  \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0  \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id  \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id  \n" +
                "WHERE a.isDeleted = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMIconList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMIconList`(  \n" +
                "IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE totalCount INT DEFAULT 0;  \n" +
                "	DECLARE vDriveToolTotalCount INT DEFAULT 0;  \n" +
                "	DECLARE vPickUpPadTotalCount INT DEFAULT 0;  \n" +
                "	DECLARE vMattingTotalCount INT DEFAULT 0;  \n" +
                "	DECLARE vObsoleteTotalCount INT DEFAULT 0;  \n" +
                "	DECLARE vCustomPartTotalCount INT DEFAULT 0;  \n" +
                "	DECLARE vProgrammingPartTotalCount INT DEFAULT 0;  \n" +
                "	DECLARE vBadPartTotalCount INT DEFAULT 0;  \n" +
                "	DECLARE vBadSupplierPartTotalCount INT DEFAULT 0;  \n" +
                "    DECLARE vFullyMapedwithprogramCount INT DEFAULT 0;  \n" +
                "	DECLARE vPartiallyMapedwithprogramCount INT DEFAULT 0;  \n" +
                "	DECLARE vPendingMapedwithprogramCount INT DEFAULT 0;  \n" +
                "	DECLARE vMappingNotRequireCount INT DEFAULT 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_IconList;  \n" +
                "	CREATE TEMPORARY TABLE temp_IconList(iconType VARCHAR(200), icon VARCHAR(500), tooltip VARCHAR(500));  \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)  \n" +
                "	select 'RoHS', IFNULL(ro.rohsIcon, 'noimage.png'), ro.`name`  \n" +
                "	from rfq_lineitems_alternatepart rla  \n" +
                "	Inner join component com on com.id = rla.mfgPNID and com.isdeleted = 0  \n" +
                "	Inner Join rfq_rohsmst ro on ro.id = com.RoHsStatusID and ro.isdeleted = 0  \n" +
                "	where rla.partID = pPartID and rla.mfgPNID is not null and rla.isDeleted = 0  \n" +
                "	group by ro.rohsIcon,ro.`name`;  \n" +
                "  \n" +
                "	select COUNT(cs.isExportControlled) INTO totalCount from rfq_lineitems_alternatepart rla  \n" +
                "    Inner join component c on c.id = rla.mfgPNID and c.isdeleted = 0  \n" +
                "    Inner Join component_standard_details csd ON csd.componentID = c.id AND csd.isDeleted = 0  \n" +
                "    Inner JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                "    WHERE rla.partID = pPartID AND rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0;  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ExportControl', NULL, 'Export Conrolled');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;  \n" +
                "  \n" +
                "			select sum(com.driverToolRequired), sum(com.pickupPadRequired), sum(com.matingPartRquired),  \n" +
                "					sum(com.programingRequired),sum((case when com.isCustom = 1 or ifnull(disCom.isCustom,0) = 1 then 1 else 0 end)),  \n" +
                "					sum((case when (com.eolDate IS NOT NULL AND com.eolDate < fun_DatetimetoUTCDateTime()) OR cps.name <> 'Active' then 1 else 0 end)),  \n" +
                "					sum((case when com.isGoodPart = 2  then 1 else 0 end)),  \n" +
                "                    sum((case when disCom.isGoodPart = 2 then 1 else 0 end))  \n" +
                "					INTO vDriveToolTotalCount, vPickUpPadTotalCount, vMattingTotalCount, vProgrammingPartTotalCount,  \n" +
                "						vCustomPartTotalCount, vObsoleteTotalCount, vBadPartTotalCount ,vBadSupplierPartTotalCount  \n" +
                "            from rfq_lineitems_alternatepart rla  \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0  \n" +
                "			join component_partstatusmst cps on cps.id = com.partStatus  \n" +
                "			left join component disCom on disCom.id = rla.distMfgPNID and disCom.isdeleted = 0  \n" +
                "			where rla.partID = pPartID and rla.isdeleted = 0;  \n" +
                "  \n" +
                "	IF(vBadPartTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadPart', NULL, 'Incorrect Part');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(vBadSupplierPartTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadSupplierPart', NULL, 'Incorrect Supplier Part');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(vDriveToolTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('DriverTool', NULL, 'Require Drive Tools');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vMattingTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('matingPart', NULL, 'Require Mating Part');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPickUpPadTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('pickupPad', NULL, 'Require Pickup Pad');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vProgrammingPartTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('programing', NULL, 'Require Programing');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND (mismatchMountingTypeStep = 0)) ;  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchMountingType', NULL, 'Mismatched Mounting Type');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mismatchFunctionalCategoryStep = 0 AND mfgPNID IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchFunctionalType', NULL, 'Mismatched Functional Type');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SET totalCount = 0;  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND isMPNAddedinCPN = 0 AND mfgPNID IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MPNNotMappedInCPN', NULL, 'MPN not Mapped in CPN');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND  approvedMountingType = 1) ;  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ApproveMountingType', NULL, 'Approved Mounting Type');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* SET totalCount = 0;  \n" +
                "	SELECT MAX(CASE WHEN (co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
                "		EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name <> 'Active' AND cp.isDeleted = 0)  \n" +
                "		THEN 1 ELSE 0 END) INTO totalCount  \n" +
                "	FROM component co WHERE co.id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);  \n" +
                "  */  \n" +
                "	IF(vObsoleteTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('obsolete', NULL, 'Obsolete');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (  \n" +
                "		SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0  \n" +
                "	) AND id NOT IN (  \n" +
                "		SELECT c.refComponentID FROM component_temperature_sensitive_data c WHERE c.deletedAt IS NULL AND c.refComponentID IN (  \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0  \n" +
                "			)  \n" +
                "		) AND functionalCategoryID IN (SELECT id FROM rfq_parttypemst WHERE isTemperatureSensitive = 1);  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxWarn', NULL, 'Tmax is not Defined');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component_temperature_sensitive_data WHERE deletedAt IS NULL AND refComponentID IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxRed', NULL, 'Tmax');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vCustomPartTotalCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('CustomPart', NULL, 'Custom Part');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;  \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)  \n" +
                "	SELECT 'OperationalAttribute', IFNULL(icon, 'noimage.png'), `description` FROM component_dynamic_attribute WHERE id IN (  \n" +
                "		SELECT attributeID FROM component_dynamic_attribute_mapping_part WHERE mfgPNID IN (  \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0  \n" +
                "			)  AND deletedAt IS NULL	) ;  \n" +
                "  \n" +
                "    select sum(case  when programmingMappingStatus = 1 then 1 else 0 end) PendingMapping,  \n" +
                "	sum(case when programmingMappingStatus = 2 then 1 else 0 end) PartialMapping,  \n" +
                "	sum(case when programmingMappingStatus = 3 then 1 else 0 end) FullyMapping,  \n" +
                "	sum(case when programmingMappingStatus = 4 then 1 else 0 end) MappingNotrequire  \n" +
                "    INTO vPendingMapedwithprogramCount, vPartiallyMapedwithprogramCount, vFullyMapedwithprogramCount, vMappingNotRequireCount  \n" +
                "	from(  \n" +
                "	select (case when c.programingRequired and (rl.programingStatus = 1 or rl.programingStatus = 2) then  \n" +
                "			(case when rl.isBuyDNPQty = 'P' then  \n" +
                "				(case when (rl.refDesigCount + rl.dnpDesigCount) = rl.programmingMappingPendingRefdesCount then 1  \n" +
                "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount <> 0 then 2  \n" +
                "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount = 0 then 3  \n" +
                "					end)  \n" +
                "				else  \n" +
                "					(case when rl.refDesigCount = rl.programmingMappingPendingRefdesCount then 1  \n" +
                "						when rl.refDesigCount > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount <> 0 then 2  \n" +
                "						when rl.refDesigCount > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount = 0 then 3  \n" +
                "					end)  \n" +
                "			end)  \n" +
                "		  when (c.functionalCategoryID = -2 or c.mountingTypeID = -2) then  \n" +
                "				(case when (rl.refDesigCount + rl.dnpDesigCount) = rl.programmingMappingPendingRefdesCount then 1  \n" +
                "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount <> 0 then 2  \n" +
                "						when (rl.refDesigCount + rl.dnpDesigCount) > rl.programmingMappingPendingRefdesCount and rl.programmingMappingPendingRefdesCount = 0 then 3  \n" +
                "					end)  \n" +
                "		when c.programingRequired and (rl.programingStatus <> 1 and rl.programingStatus <> 2) then 4  \n" +
                "		else 0  \n" +
                "	 end ) programmingMappingStatus  \n" +
                "	 from rfq_lineitems_alternatepart rla  \n" +
                "	 join component c on c.id = rla.mfgPNID  \n" +
                "	 Join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isdeleted = 0  \n" +
                "	 where rla.partID = pPartID and rla.isdeleted = 0  \n" +
                "	 )a where programmingMappingStatus>0 ;  \n" +
                "  \n" +
                "	IF(vPendingMapedwithprogramCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('PendingtoMapPartwithProgram', NULL, 'Pending to Mapping Part with Program');  \n" +
                "	END IF;  \n" +
                "	IF(vPartiallyMapedwithprogramCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('PartiallyMapPartwithProgram', NULL, 'Partially Mapped Part with Program');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vFullyMapedwithprogramCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('FullyMapPartwithProgram', NULL, 'Fully Mapped Part with Program');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(vMappingNotRequireCount > 0) THEN  \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('NotRequiretoMapPartwithProgram', NULL, 'Not Require to Mapping Part with Program');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT * FROM temp_IconList;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RemoveMPNFromCPNMapping`;  \n" +
                "CREATE PROCEDURE `Sproc_RemoveMPNFromCPNMapping`(  \n" +
                "	IN prefCompID INT,  \n" +
                "	IN prefCPNID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT,  \n" +
                "    IN pDeleteRequest tinyint,  \n" +
                "    IN pDeleteMPNFrom tinyint,  \n" +
                "    IN preason varchar(1200)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vLiveInternalVersion INT;  \n" +
                "DECLARE vLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE vLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE vInternalVersion VARCHAR(100);  \n" +
                "DECLARE vMFGPN VARCHAR(100);  \n" +
                "DECLARE subAssyType INT;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "    SET  subAssyType = 3;  \n" +
                "	# get Internal version format  \n" +
                "		 SELECT  `values` INTO vLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "			IF vLiveInternalVersionMethod = \"P\" THEN  \n" +
                "				SELECT `values` INTO vInternalVersion FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "			ELSE  \n" +
                "				SELECT `values` INTO vLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "				IF vLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO vInternalVersion;  \n" +
                "				ELSE  \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO vInternalVersion;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		SELECT IFNULL(k.liveInternalVersion, 0) INTO vLiveInternalVersion FROM component k WHERE k.id = prefCPNID;  \n" +
                "        SET vLiveInternalVersion  = vLiveInternalVersion  + 1;  \n" +
                "  \n" +
                "  	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                "	SELECT  rl.partID  \n" +
                "	FROM rfq_lineitems AS rl  \n" +
                "	WHERE rl.custPNID = prefCPNID AND rl.isDeleted = 0  \n" +
                "	GROUP BY rl.partID;  \n" +
                "  \n" +
                "		UPDATE component  \n" +
                "		SET  \n" +
                "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(id),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) AS CHAR))  \n" +
                "		WHERE id IN(  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "		(  \n" +
                "		  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM component c  \n" +
                "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                "  \n" +
                "		  UNION ALL  \n" +
                "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM rfq_lineitems rlp  \n" +
                "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
                "          INNER JOIN component cp ON cp.id = rlap.mfgPNID  \n" +
                "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                "		)  \n" +
                "		SELECT DISTINCT partId FROM cte);  \n" +
                "  \n" +
                "		SELECT  j.mfgPN INTO vMFGPN FROM component j WHERE j.id = prefCompID;  \n" +
                "        INSERT INTO rfq_assembly_history  \n" +
                "		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion,description, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "		VALUES (\"component\", prefCPNID, NULL,NULL, prefCPNID, \"MFR PN\",  vMFGPN ,NULL, CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR)),  \n" +
                "        concat('Delete Request From: ',(case when pDeleteRequest = 1 then 'Internal Error' when pDeleteRequest = 2 then 'Customer Request' end), '<br/> Reason: ', preason),  \n" +
                "        fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "  \n" +
                "    UPDATE component  \n" +
                "	SET liveInternalVersion = vLiveInternalVersion, liveVersion = CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR))  \n" +
                "    WHERE id = prefCPNID;  \n" +
                "  \n" +
                "	# remove CPN entry from CPN mapping  \n" +
                "        update component_cust_alias_rev_pn  \n" +
                "        set isdeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "        where refComponentID = prefCompID and refCPNPartID = prefCPNID and isdeleted = 0;  \n" +
                "  \n" +
                "	# Manage History for Change  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    if pDeleteMPNFrom = 1 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0  \n" +
                "        set rla.isMPNAddedinCPN = 0,  \n" +
                "			rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.updatedBy = pUserID,  \n" +
                "            rla.updateByRoleId = pRoleID  \n" +
                "        where rla.mfgPNID = prefCompID and rl.custPNID = prefCPNID and rla.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	elseif pDeleteMPNFrom = 2 then  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        update rfq_lineitems_alternatepart rla  \n" +
                "        Join  ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 )a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set rla.isDeleted = 1,  \n" +
                "			rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.deletedBy = pUserID,  \n" +
                "            rla.deleteByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount>1 and a.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		update rfq_lineitems_alternatepart rla  \n" +
                "        Join ( select count(1) over(partition by rla.rfqLineItemsID) alternatepartCount, rla.* from rfq_lineitems_alternatepart rla where  rla.isdeleted = 0 ) a on a.id = rla.id  \n" +
                "		join rfq_lineitems rl on rl.id = a.rfqLineItemsID and a.isDeleted = 0  \n" +
                "        set  \n" +
                "			rla.distributor = null, rla.distMfgCodeID = null, rla.distPN = null, rla.distMfgPNID = null, rla.mfgCode = null, rla.mfgCodeID = null,  \n" +
                "            rla.mfgPN = null, rla.mfgPNID = null, rla.description = null, rla.RoHSStatusID = null, rla.customerApproval = 'P',  \n" +
                "            rla.customerApprovalBy  = null, rla.customerApprovalDate = null, rla.badMfgPN = null, rla.userData1 = null, rla.userData2 = null,  \n" +
                "			rla.userData3 = null, rla.userData4 = null, rla.userData5 = null, rla.userData6 = null, rla.userData7 = null, rla.userData8 = null,  \n" +
                "            rla.userData9 = null, rla.userData10 = null, rla.updatedAt = fun_DatetimetoUTCDateTime(), rla.updatedBy  = pUserID, rla.updateByRoleId = pRoleID  \n" +
                "        where a.mfgPNID = prefCompID and rl.custPNID = prefCPNID and a.alternatepartCount = 1 and rla.isdeleted = 0;  \n" +
                "  \n" +
                "	end if;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "Commit;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN`;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE totalCount INT DEFAULT 0;  \n" +
                "DECLARE currIndex INT DEFAULT 0;  \n" +
                "DECLARE prevLineID INT;  \n" +
                "DECLARE currCustPNID INT;  \n" +
                "DECLARE currMFGPNID INT;  \n" +
                "DECLARE currLineID INT;  \n" +
                "DECLARE mountingTypeID INT;  \n" +
                "DECLARE functionalCategoryID INT;  \n" +
                "DECLARE rohsStatusID INT;  \n" +
                "DECLARE categoryID INT;  \n" +
                "DECLARE partTypeID INT;  \n" +
                "DECLARE statusID INT;  \n" +
                "DECLARE mfgPNID INT;  \n" +
                "DECLARE currCustRev VARCHAR(10);  \n" +
                "DECLARE currCustPN VARCHAR(500);  \n" +
                "DECLARE currCustomerPartDesc TEXT;  \n" +
                "DECLARE mfgPN VARCHAR(500);  \n" +
                "DECLARE mfgPID VARCHAR(500);  \n" +
                "DECLARE maxDisplayOrder DECIMAL;  \n" +
                "DECLARE pLiveInternalVersion INT;  \n" +
                "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE pCompanyName VARCHAR(100);  \n" +
                "DECLARE pMFGPN VARCHAR(100);  \n" +
                "DECLARE pEpicoreType VARCHAR(100);  \n" +
                "DECLARE vSerialNumer VARCHAR(20);  \n" +
                "DECLARE v_message VARCHAR(20);  \n" +
                "DECLARE maxPartId INT;  \n" +
                "SET categoryID = 2;  \n" +
                "SET partTypeID = 2;  \n" +
                "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
                "		rla.mfgPNID,    c.RoHSStatusID  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
                "	JOIN component c ON c.id = rla.mfgPNID  \n" +
                "	WHERE rl.custPN IS NOT NULL AND rl.custPN <> \"\" AND rla.mfgPNID IS NOT NULL  \n" +
                "	AND rl.partID = pPartID  \n" +
                "	AND rla.isdeleted = 0 and rla.isMPNAddedinCPN = 1  \n" +
                "	AND rl.duplicateCPNStep = 1  \n" +
                "    );  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
                "    IF totalCount > 0 THEN  \n" +
                "		SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
                "		IF functionalCategoryID IS NULL THEN  \n" +
                "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF mountingTypeID IS NULL THEN  \n" +
                "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "		END IF;  \n" +
                "		SET prevLineID = 0;  \n" +
                "		WHILE currIndex < totalCount DO  \n" +
                "			SET currCustPN = NULL;  \n" +
                "			SET currCustRev = NULL;  \n" +
                "			SET currCustomerPartDesc = NULL;  \n" +
                "  \n" +
                "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc  \n" +
                "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc  \n" +
                "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "            SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
                "				IF (currCustPNID IS NOT NULL) THEN  \n" +
                "					IF (currMFGPNID > 0 and currMFGPNID <> currCustPNID AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "  \n" +
                "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;  \n" +
                "  \n" +
                "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                "  \n" +
                "                        SELECT  j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFR PN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (currCustPNID IS NULL) THEN  \n" +
                "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                "						SET rohsStatusID = 0;  \n" +
                "					ELSE  \n" +
                "						SET rohsStatusID = 1;  \n" +
                "					END IF;  \n" +
                "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
                "						SET currCustRev = \"-\";  \n" +
                "					END IF;  \n" +
                "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                "					SET mfgPNID = NULL;  \n" +
                "  \n" +
                "                    SELECT  d.id INTO mfgPNID FROM component d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM component WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "					IF mfgPNID IS NULL THEN  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "                        call Sproc_GenerateIncrementalNumber(case when @mfgType = 'MFG' then   'MPNSystemID'   else 'SPNSystemID' end,   true);  \n" +
                "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
                "                        INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "							createdAt,liveInternalVersion, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription)  \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "							fun_DatetimetoUTCDateTime(), 0, partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'));  \n" +
                "						SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "						IF(currMFGPNID > 0 ) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						END IF;  \n" +
                "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = maxPartId;  \n" +
                "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
                "						SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = maxPartId;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,changeVersion,  \n" +
                "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MFR PN\",  \n" +
                "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
                "					ELSE  \n" +
                "						IF (currMFGPNID > 0 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							SET currCustPNID = mfgPNID;  \n" +
                "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;  \n" +
                "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "							SELECT  t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;  \n" +
                "							INSERT INTO rfq_assembly_history  \n" +
                "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,  \n" +
                "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFR PN\",  \n" +
                "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "						ELSE  \n" +
                "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "			UPDATE component  \n" +
                "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                "			 WHERE id IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "		SELECT  * FROM temp_new_cpn_id;  \n" +
                "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateRFQ_LineItems_AlternatePart_CPN`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateRFQ_LineItems_AlternatePart_CPN`(  \n" +
                "	IN pRefCPNPartID INT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pReturnResult TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE totalCount INT DEFAULT 0;  \n" +
                "	DECLARE currIndex INT DEFAULT 0;  \n" +
                "	DECLARE totalMFGPNCount INT DEFAULT 0;  \n" +
                "	DECLARE currMFGPNIndex INT DEFAULT 0;  \n" +
                "	DECLARE currLineID INT;  \n" +
                "	DECLARE currPartID INT;  \n" +
                "	DECLARE currMFGPNID INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_update_bom;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_update_bom (partId INT);  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS existBOMResult AS  \n" +
                "	SELECT  rl.id id,  rl.partID  \n" +
                "	FROM rfq_lineitems AS rl  \n" +
                "	WHERE rl.custPNID =  pRefCPNPartID AND rl.deletedAt IS NULL ;  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM existBOMResult;  \n" +
                "	IF totalCount > 0 THEN  \n" +
                "		WHILE currIndex < totalCount DO  \n" +
                "			SELECT  a.id,		a.partID  \n" +
                "			INTO 	currLineID	,currPartID  \n" +
                "			FROM 	existBOMResult a LIMIT currIndex, 1;  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS existCPNResult AS  \n" +
                "			SELECT refComponentID FROM component_cust_alias_rev_pn WHERE  \n" +
                "			refCPNPartID = pRefCPNPartID AND  \n" +
                "			refComponentID NOT IN(SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineID AND deletedAt IS NULL) AND  \n" +
                "			deletedAt IS NULL;  \n" +
                "			SELECT COUNT(1) INTO totalMFGPNCount FROM existCPNResult;  \n" +
                "			IF totalMFGPNCount > 0 THEN  \n" +
                "			SET currMFGPNIndex = 0;  \n" +
                "			WHILE currMFGPNIndex < totalMFGPNCount DO  \n" +
                "				SELECT  a.refComponentID  \n" +
                "				INTO 	currMFGPNID  \n" +
                "				FROM 	existCPNResult a LIMIT currMFGPNIndex, 1;  \n" +
                "				IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineID AND mfgPNID = currMFGPNID AND deletedAt IS NULL) = 0 THEN  \n" +
                "					CALL Sproc_UpdatePartInternalVersion (currPartID);  \n" +
                "					INSERT INTO `rfq_lineitems_alternatepart`(	`rfqLineItemsID`,	`mfgCode`,	`mfgCodeID`,		`mfgPN`,  \n" +
                "											`mfgPNID`,		`RoHSStatusID`,  \n" +
                "											`createdBy`,	`createdAt`,	`partID`,  \n" +
                "											`customerApproval`, `restrictUsePermanentlyStep`)  \n" +
                "					SELECT currLineID `rfqLineItemsID`, (SELECT mfgName FROM mfgcodemst WHERE id = c.mfgCodeId)  `mfgCode`, c.mfgCodeID `mfgCodeID`, c.`mfgPN` `mfgPN`,  \n" +
                "					c.id mfgPNID, 	c.`RoHSStatusID` `RoHSStatusID`,  \n" +
                "					pUserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, currPartID `partID`,  \n" +
                "					'P' `customerApproval` , 1 `restrictUsePermanentlyStep`  \n" +
                "					FROM component c WHERE c.id = currMFGPNID AND c.deletedAt IS NULL;  \n" +
                "					INSERT INTO temp_component_update_bom(partId) VALUES (currPartID);  \n" +
                "				/*else IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineID AND mfgPNID = currMFGPNID and isMPNAddedinCPN = 0 AND deletedAt IS NULL) = 1 THEN  \n" +
                "					CALL Sproc_UpdatePartInternalVersion (currPartID);  \n" +
                "						update rfq_lineitems_alternatepart  \n" +
                "                        set isMPNAddedinCPN = 1  \n" +
                "                        WHERE rfqLineItemsID = currLineID AND mfgPNID = currMFGPNID and isMPNAddedinCPN = 0 AND isdeleted = 0;  \n" +
                "                        INSERT INTO temp_component_update_bom(partId) VALUES (currPartID);  \n" +
                "					end if;*/  \n" +
                "                END IF;  \n" +
                "				SET currMFGPNIndex = currMFGPNIndex + 1;  \n" +
                "			END WHILE;  \n" +
                "			END IF;  \n" +
                "			DROP TEMPORARY TABLE existCPNResult;  \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "		END WHILE;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE existBOMResult;  \n" +
                "	IF pReturnResult THEN  \n" +
                "		SELECT DISTINCT * FROM temp_component_update_bom;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                "	IN pJobTypeIds VARCHAR(16383),  \n" +
                "	IN pAssyIds VARCHAR(16383),  \n" +
                "	IN pAssyNicknameIds LONGTEXT,  \n" +
                "	IN pIsExportControlled TINYINT,  \n" +
                "	IN pIsQuoteOverdue TINYINT,  \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pOlderThenDays INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "        DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		   (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		 (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                "        (CASE  \n" +
                "        WHEN rfq_statusID = 1 THEN  \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                "				quoteSubmitDate > quoteDueDate  \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				quoteClosedDate	> quoteDueDate  \n" +
                "            END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF; */  \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "            ra.isCustomPartDetShowInReport,  \n" +
                "            ra.quoteValidTillDate,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN concat(assyusr.firstName, ' ', assyusr.lastName) ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') activityStartAt,  \n" +
                "			part.activityStartAt activityStartAtDateTime,  \n" +
                "            ra.isActivityStart as isCostingActivityStart,  \n" +
                "            (CASE WHEN ra.isActivityStart THEN concat(rfqusr.firstName, ' ', rfqusr.lastName) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') costingActivityStartAt,  \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "        LEFT JOIN users rfqusr ON rfqusr.id = ra.activityStartBy  \n" +
                "        LEFT JOIN users assyusr ON assyusr.id = part.activityStartBy  \n" +
                "		WHERE rf.isdeleted = 0  \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                "		else 1=1 end)  \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                "	EXECUTE RFQquery1;  \n" +
                "	DEALLOCATE PREPARE RFQquery1;  \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                "	EXECUTE RFQquery2;  \n" +
                "	DEALLOCATE PREPARE RFQquery2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
            
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1115,'1.00','V1','User Story 36114: Demo improvement point suggested by jaybhai [12-08-2021] - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1115:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT(11);  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT(1);  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item\",  \n" +
                "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer BOM Line Number\",  \n" +
                "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
                "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"REF DES\",  \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
                "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
                "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Kit Allocation not Required\",  \n" +
                "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
                "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Rev\",  \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Lead\",  \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN QTY\",  \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN DES\",  \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.uomID IS NOT NULL  \n" +
                "				THEN  \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "				ELSE  \n" +
                "					SET newUOM = '';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSE  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "			IF newSubstitutesAllow != '' THEN  \n" +
                "				SET pIsUpdateRequired = TRUE;  \n" +
                "				INSERT INTO rfq_assembly_history  \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "					oldValue,newValue,changeVersion,  \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
                "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post';  \n" +
                "			ELSE  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Programing\",  \n" +
                "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP Qty Buy\",  \n" +
                "				NULL, CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"Yes\" WHEN NEW.isBuyDNPQty = \"N\" THEN \"No\" ELSE \"Customer Consigned\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.isDeleted != NEW.isDeleted THEN  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MFR PN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",  \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, -1) != IFNULL(NEW.getMFGPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, -1) != IFNULL(NEW.uomMismatchedStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, -1) != IFNULL(NEW.restrictUseInBOMStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, -1) != IFNULL(NEW.mismatchNumberOfRowsStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, -1) != IFNULL(NEW.isUnlockApprovedPart, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MFR PN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",  \n" +
                "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",  \n" +
                "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),  \n" +
                "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  # Mismatch Programming required step  \n" +
                "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "      # Part and Program ref des mapping required step  \n" +
                "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approvedMountingType, 0) != IFNULL(NEW.approvedMountingType, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF IFNULL(NEW.approvedMountingType, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- if New.org_mfgCode is null then  \n" +
                "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;  \n" +
                "			-- end if;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL AND NEW.description <> '' THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- IF New.org_mfgPN IS NULL THEN  \n" +
                "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;  \n" +
                "			-- END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "        # mismatch programming require step  \n" +
                "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # part program ref des mapping require step  \n" +
                "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "        # Mismatch Programming Statue step  \n" +
                "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	 # MPN Mapping Pengin in CPN  \n" +
                "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                /* **************************** Add Script Version -> 01-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1116,'1.00','V1','User Story 36114: Demo improvement point suggested by jaybhai [12-08-2021] - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;            
            case 1116:
                allDbChangesArray.push(
                /* **************************** Add Script Version -> 02-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item\",  \n" +
                "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer BOM Line Number\",  \n" +
                "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
                "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"REF DES\",  \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
                "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
                "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Kit Allocation not Required\",  \n" +
                "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
                "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Rev\",  \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Lead\",  \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN QTY\",  \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DPN DES\",  \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.uomID IS NOT NULL  \n" +
                "				THEN  \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "				ELSE  \n" +
                "					SET newUOM = '';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "			IF newSubstitutesAllow != '' THEN  \n" +
                "				SET pIsUpdateRequired = TRUE;  \n" +
                "				INSERT INTO rfq_assembly_history  \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "					oldValue,newValue,changeVersion,  \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
                "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Requires Programming\",  \n" +
                "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy DNP Qty\",  \n" +
                "				NULL, (CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.isDeleted != NEW.isDeleted THEN  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MFR PN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",  \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, '') != IFNULL(NEW.badMfgPN, '') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, 0) != IFNULL(NEW.getMFGPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, 0) != IFNULL(NEW.uomMismatchedStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, 0) != IFNULL(NEW.restrictUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, 0) != IFNULL(NEW.mismatchNumberOfRowsStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, 0) != IFNULL(NEW.isUnlockApprovedPart, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MFR PN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",  \n" +
                "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",  \n" +
                "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),  \n" +
                "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  # Mismatch Programming required step  \n" +
                "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "      # Part and Program ref des mapping required step  \n" +
                "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approvedMountingType, 0) != IFNULL(NEW.approvedMountingType, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF IFNULL(NEW.approvedMountingType, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier PN\",  \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- if New.org_mfgCode is null then  \n" +
                "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;  \n" +
                "			-- end if;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL AND NEW.description <> '' THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR PN\",  \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- IF New.org_mfgPN IS NULL THEN  \n" +
                "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;  \n" +
                "			-- END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MFR PN\",  \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "        # mismatch programming require step  \n" +
                "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # part program ref des mapping require step  \n" +
                "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "        # Mismatch Programming Statue step  \n" +
                "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	 # MPN Mapping Pengin in CPN  \n" +
                "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-09-2021 *********************************** */
                "DROP TRIGGER IF EXISTS  `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE oldUOM VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;  \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item\",  \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer BOM Line Number\",  \n" +
                "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"REF DES\",  \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Kit Allocation not Required\",  \n" +
                "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
                "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Rev\",  \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per REF DES on PCB\",  \n" +
                "			CAST(trim(OLD.numOfPosition)+0 AS CHAR), CAST(trim(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DPN QTY\",  \n" +
                "			CAST(trim(OLD.dnpQty)+0 AS CHAR), CAST(trim(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DPN DES\",  \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
                "		IF OLD.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
                "			ELSE  \n" +
                "				SET oldUOM = '';  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "			ELSE  \n" +
                "				SET newUOM = '';  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
                "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF OLD.substitutesAllow = 3 THEN  \n" +
                "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
                "				SET oldSubstitutesAllow = 'No';  \n" +
                "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
                "				SET oldSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
                "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
                "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
                "			IF OLD.programingStatus = 1 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
                "				SET oldProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
                "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
                "				SET oldProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
                "				SET oldProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
                "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
                "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
                "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
                "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                " 			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Approved comments of QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or REF DES\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Approved comments of Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Approved comments of Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1117,'1.00','V1','Bug 36373: BOM : Internal version History is showing wrong in BOM while adding new line in BOM. - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
                );
                break;
                case 1117:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 03-09-2021  *********************************** */
                    "ALTER TABLE `component`  \n" +
                    "ADD COLUMN `isReceiveBulkItem` TINYINT(1) NULL DEFAULT 0 ;  \n" +
                    /* **************************** Add Script Version -> 03-09-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (1118,'1.00','V1',' Task 36507: Configure checkbox for Receive as Bulk Item for Other part type - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
                    );
                break;
                case 1118:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 03-09-2021  *********************************** */
                    "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                    "	IN pGoodPart VARCHAR(100),  \n" +
                    "	IN pSearch VARCHAR(500),  \n" +
                    "	IN pId INT,  \n" +
                    "	IN pMfgType VARCHAR(50),  \n" +
                    "	IN pRoHSStatusID VARCHAR(100),  \n" +
                    "	IN pMfgCodeId INT,  \n" +
                    "	IN pMountingType VARCHAR(50),  \n" +
                    "	IN pMountingTypeId INT,  \n" +
                    "	IN pCategoryID INT,  \n" +
                    "	IN pIsContainCPN TINYINT,  \n" +
                    "	IN pRohsMainCategoryID INT,  \n" +
                    "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                    "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                    "	IN ppackagingID INT,  \n" +
                    "	IN pstrictCustomPart TINYINT,  \n" +
                    "	IN psupplierID INT,  \n" +
                    "    IN pPartType int,  \n" +
                    "    IN pExcludeStatus INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "	DECLARE vRohsMainCategoryID INT;  \n" +
                    "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                    "	/*===>this logic is added to compare invert rohs category*/  \n" +
                    "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                    "		IF pRohsMainCategoryID = -1 THEN  \n" +
                    "			SET vRohsMainCategoryID = -2;  \n" +
                    "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                    "			SET vRohsMainCategoryID = -1;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "	/*<===this logic is added to compare invert rohs category*/  \n" +
                    "	/* this logic used in purchase order when supplier is strictly custom part */  \n" +
                    "	IF(pstrictCustomPart = 1)THEN  \n" +
                    "		SELECT *  \n" +
                    "		FROM  \n" +
                    "		(  \n" +
                    "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                    "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                    "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                    "					c.mfgcodeID,          					c.rev,  \n" +
                    "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                    "					c.category,								c.imageURL,						c.documentPath,  \n" +
                    "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                    "					c.value,								c.partPackage,					c.powerRating,  \n" +
                    "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                    "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                    "					c.pitchMating,							c.length,						c.width,  \n" +
                    "					c.height,								c.voltage,						c.weight,  \n" +
                    "					c.feature,								c.color,						c.partStatus,  \n" +
                    "					c.uom,									c.uomClassID,					c.unit,  \n" +
                    "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                    "					c.restrictPackagingUseWithpermission,  \n" +
                    "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                    "					r.rohsIcon,								r.name AS rohsName,  \n" +
                    "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                    "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                    "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                    "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                    "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                    "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                    "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                    "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                    "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                    "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                    "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                    "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                    "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                    "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                    "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                    "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                    "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                    "			FROM 	component c  \n" +
                    "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                    "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                    "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                    "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                    "			WHERE 	c.isdeleted = 0  \n" +
                    "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                    "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                    "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                    "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                    "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                    "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                    "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                    "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                    "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                    "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                    "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                    "									FROM supplier_mapping_mst smm  \n" +
                    "									WHERE smm.isdeleted = 0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                    "					c.mfgcodeid IN (SELECT mc.id  \n" +
                    "										FROM mfgcodemst mc  \n" +
                    "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                    "					c.mfgcodeid IN (SELECT mc.id  \n" +
                    "										FROM mfgcodemst mc  \n" +
                    "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                    "			)  \n" +
                    "			AND c.category != 3  \n" +
                    "			AND c.iscustom = 1  \n" +
                    "		) AS a  \n" +
                    "		WHERE (  \n" +
                    "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                    "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                    "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                    "													WHERE opn.refcomponentid = a.id  \n" +
                    "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                    "											)  \n" +
                    "										)  \n" +
                    "				)  \n" +
                    "		)  \n" +
                    "		ORDER BY mfgPN;  \n" +
                    "  \n" +
                    "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  \n" +
                    "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                    "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
                    "		SELECT * FROM  \n" +
                    "		(  \n" +
                    "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                    "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
                    "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
                    "					c.mfgcodeID,					    c.rev,  \n" +
                    "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
                    "					c.category,							c.imageURL,								c.documentPath,  \n" +
                    "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                    "					c.value,							c.partPackage,							c.powerRating,  \n" +
                    "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                    "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                    "					c.pitchMating,        				c.length,								c.width,  \n" +
                    "					c.height,        					c.voltage,								c.weight,  \n" +
                    "					c.feature,        					c.color,								c.partStatus,  \n" +
                    "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
                    "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
                    "					c.restrictPackagingUseWithpermission,  \n" +
                    "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
                    "					r.rohsIcon,							r.name AS rohsName,  \n" +
                    "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
                    "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
                    "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
                    "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
                    "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
                    "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
                    "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
                    "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
                    "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
                    "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
                    "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
                    "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
                    "					c.refMfgPNMfgCodeId,  \n" +
                    "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
                    "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
                    "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                    "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                    "			FROM 	component c  \n" +
                    "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
                    "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
                    "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                    "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                    "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                    "			WHERE 	c.isdeleted = 0  \n" +
                    "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                    "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                    "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                    "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                    "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                    "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                    "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                    "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                    "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                    "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                    "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                    "		) AS a  \n" +
                    "		WHERE (  \n" +
                    "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                    "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                    "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                    "													WHERE opn.refcomponentid = a.id  \n" +
                    "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                    "											)  \n" +
                    "										)  \n" +
                    "				)  \n" +
                    "		)  \n" +
                    "		ORDER BY mfgPN;  \n" +
                    "  \n" +
                    "	ELSE  \n" +
                    "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                    "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                    "  \n" +
                    "		select *  \n" +
                    "		from  \n" +
                    "		(  \n" +
                    "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                    "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                    "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                    "					c.mfgcodeID,          		c.rev,  \n" +
                    "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                    "					c.tolerance,				c.category,							c.imageURL,  \n" +
                    "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                    "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                    "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                    "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                    "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                    "					c.width,            		c.height,							c.voltage,  \n" +
                    "					c.weight,            		c.feature,            				c.color,  \n" +
                    "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                    "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                    "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                    "					c.packagingID,				c.packaging,  \n" +
                    "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                    "					r.rohsIcon,					r.name AS rohsName,  \n" +
                    "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                    "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                    "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                    "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                    "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                    "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                    "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                    "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                    "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                    "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                    "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
                    "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                    "					c.refMfgPNMfgCodeId,  \n" +
                    "					vu.mfgName  supplierPartMfgName,  \n" +
                    "					vu.mfgPN supplierPartMfgPn,  \n" +
                    "					vu.mfgCode supplierPartMfgCode,  \n" +
                    "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                    "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                    "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
                    "			from component c  \n" +
                    "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                    "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                    "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                    "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                    "			WHERE 	c.isdeleted = 0  \n" +
                    "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                    "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                    "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                    "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                    "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                    "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                    "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                    "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                    "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                    "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                    "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                    "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                    "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                    "		) AS a  \n" +
                    "		WHERE (  \n" +
                    "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                    "				(pSearch IS NOT NULL AND  \n" +
                    "					(  \n" +
                    "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                    "						EXISTS( SELECT  1  \n" +
                    "								FROM 	component_otherpn opn  \n" +
                    "								WHERE 	opn.refcomponentid = a.id  \n" +
                    "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                    "					)  \n" +
                    "				)  \n" +
                    "			)  \n" +
                    "		ORDER BY mfgPN;  \n" +
                    "	END IF;  \n" +
                    "END;  \n" +

                    "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
                    "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
                    "	DECLARE pOldValue TEXT;  \n" +
                    "	DECLARE pNewValue TEXT;  \n" +
                    "    DECLARE pLabelValue TEXT;  \n" +
                    "  \n" +
                    "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                    "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                    "		FROM mfgcodemst  \n" +
                    "		WHERE id =NEW.mfgcodeID  \n" +
                    "		ORDER BY id DESC LIMIT 1;  \n" +
                    "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                    "  \n" +
                    "       INSERT INTO Component_History  \n" +
                    "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                    "		Oldval, 			Newval, 			createdBy,  \n" +
                    "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                    "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                    "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                    "       INSERT INTO Component_History  \n" +
                    "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                    "		Oldval, 			Newval, 			createdBy,  \n" +
                    "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                    "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                    "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                    "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                    "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                    "		FROM mfgcodemst  \n" +
                    "		WHERE id =OLD.mfgcodeID  \n" +
                    "		ORDER BY id DESC LIMIT 1;  \n" +
                    "	END IF;  \n" +
                    "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                    "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                    "		FROM mfgcodemst  \n" +
                    "		WHERE id =NEW.mfgcodeID  \n" +
                    "		ORDER BY id DESC LIMIT 1;  \n" +
                    "	END IF;  \n" +
                    "       INSERT INTO Component_History  \n" +
                    "		(refComponentID,                tableName,                 	Colname,  \n" +
                    "		Oldval, 			Newval, 			createdBy,  \n" +
                    "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                    "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                    "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'SPQ',  \n" +
                    "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                    "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                    "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_rohsmst  \n" +
                    "			WHERE id =OLD.RoHSStatusID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "			FROM rfq_rohsmst  \n" +
                    "			WHERE id =NEW.RoHSStatusID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                    "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                    "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                    "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                    "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                    "										'Correct Part'  \n" +
                    "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                    "										'Incorrect Part'  \n" +
                    "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                    "										'TBD Part'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                    "										'Correct Part'  \n" +
                    "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                    "										'Incorrect Part'  \n" +
                    "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                    "										'TBD Part'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                    "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                    "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                    "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                    "	END IF;*/  \n" +
                    "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
                    "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                    "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                    "		IF OLD.uom IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                    "			FROM uoms  \n" +
                    "			WHERE id =OLD.uom  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.uom IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                    "			FROM uoms  \n" +
                    "			WHERE id =NEW.uom  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                    "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_mountingtypemst  \n" +
                    "			WHERE id =OLD.mountingTypeID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "  \n" +
                    "			FROM rfq_mountingtypemst  \n" +
                    "			WHERE id =NEW.mountingTypeID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                    "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                    "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_packagecasetypemst  \n" +
                    "			WHERE id =OLD.partPackageID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "			FROM rfq_packagecasetypemst  \n" +
                    "			WHERE id =NEW.partPackageID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                    "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                    "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                    "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                    "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                    "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                    "		IF OLD.category IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_partcategory  \n" +
                    "			WHERE id =OLD.category  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.category IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                    "			FROM rfq_partcategory  \n" +
                    "			WHERE id =NEW.category  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                    "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Data Sheet Link',  \n" +
                    "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                    "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                    "			FROM component  \n" +
                    "			WHERE id =OLD.replacementPartID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                    "			FROM component  \n" +
                    "			WHERE id =NEW.replacementPartID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                    "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                    "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                    "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                    "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                    "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                    "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                    "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_parttypemst  \n" +
                    "			WHERE id =OLD.functionalCategoryID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                    "			FROM rfq_parttypemst  \n" +
                    "			WHERE id =NEW.functionalCategoryID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                    "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                    "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                    "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                    "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
                    "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Special Note',  \n" +
                    "			CAST(OLD.specialNote AS CHAR),	CAST(NEW.specialNote AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                    "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                    "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM component_partstatusmst  \n" +
                    "			WHERE id = OLD.partStatus  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "			FROM component_partstatusmst  \n" +
                    "			WHERE id = NEW.partStatus  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Status',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                    "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                    "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                    "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                    "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
                    "			CAST(OLD.updatedAtApi AS CHAR),	CAST(NEW.updatedAtApi AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
                    "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                    "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                    "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                    "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                    "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.isCustom = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isCustom = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                    "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                    "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                    "		IF OLD.mslID IS NOT NULL THEN  \n" +
                    "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                    "			FROM component_mslmst  \n" +
                    "			WHERE id =OLD.mslID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.mslID IS NOT NULL THEN  \n" +
                    "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                    "			FROM component_mslmst  \n" +
                    "			WHERE id =NEW.mslID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                    "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_connectertypemst  \n" +
                    "			WHERE id =OLD.connecterTypeID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "			FROM rfq_connectertypemst  \n" +
                    "			WHERE id =NEW.connecterTypeID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                    "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                    "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                    "			FROM cost_category  \n" +
                    "			WHERE id =OLD.costCategoryID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                    "			FROM cost_category  \n" +
                    "			WHERE id =NEW.costCategoryID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                    "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                    "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                    "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                    "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                    "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                    "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                    "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                    "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
                    "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                    "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                    "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.bomLock = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.bomLock = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'BOM Lock',  \n" +
                    "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                    "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                    "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                    "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                    "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                    "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                    "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                    "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                    "		IF OLD.customerID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                    "			FROM mfgcodemst  \n" +
                    "			WHERE id =OLD.customerID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.customerID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                    "			FROM mfgcodemst  \n" +
                    "			WHERE id =NEW.customerID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                    "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                    "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                    "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                    "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                    "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                    "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                    "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                    "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.isCPN = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isCPN = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                    "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                    "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                    "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                    "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                    "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                    "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.programingRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.programingRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                    "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                    "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                    "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                    "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                    "		IF OLD.partType IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_partcategory  \n" +
                    "			WHERE id =OLD.partType  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.partType IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                    "			FROM rfq_partcategory  \n" +
                    "			WHERE id =NEW.partType  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                    "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                    "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                    "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                    "											'Yes'  \n" +
                    "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                    "											'No'  \n" +
                    "									ELSE '' END;  \n" +
                    "			END IF;  \n" +
                    "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                    "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                    "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                    "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                    "											'Yes'  \n" +
                    "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                    "											'No'  \n" +
                    "									ELSE '' END;  \n" +
                    "			END IF;  \n" +
                    "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                    "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                    "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                    "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                    "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                    "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                    "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                    "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                    "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                    "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                    "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                    "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                    "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                    "		INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                    "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                    "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                    "		IF OLD.partType IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                    "				FROM component  \n" +
                    "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.partType IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                    "				FROM component  \n" +
                    "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                    "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                    "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                    "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                    "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                    "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                    "											'Yes'  \n" +
                    "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                    "											'No'  \n" +
                    "									ELSE '' END;  \n" +
                    "			END IF;  \n" +
                    "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                    "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                    "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM component_packagingmst  \n" +
                    "			WHERE id =OLD.packagingID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "			FROM component_packagingmst  \n" +
                    "			WHERE id =NEW.packagingID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                    "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                    "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                    "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                    "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                    "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Packaging Weight',  \n" +
                    "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                    "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                    "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                    "			FROM uoms  \n" +
                    "			WHERE id =OLD.grossWeightUom  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                    "			FROM uoms  \n" +
                    "			WHERE id =NEW.grossWeightUom  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                    "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                    "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                    "			FROM uoms  \n" +
                    "			WHERE id =OLD.packagingWeightUom  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                    "			FROM uoms  \n" +
                    "			WHERE id =NEW.packagingWeightUom  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                    "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Price',  \n" +
                    "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                    "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                    "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM measurement_types  \n" +
                    "			WHERE id =OLD.uomClassID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "			FROM measurement_types  \n" +
                    "			WHERE id =NEW.uomClassID  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                    "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,        tableName,          Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                    "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                    "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                    "										'No'  \n" +
                    "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                    "										'With Approval'  \n" +
                    "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                    "										'Yes'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                    "										'No'  \n" +
                    "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                    "										'With Approval'  \n" +
                    "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                    "										'Yes'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,        tableName,          Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                    "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                    "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                    "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                    "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                    "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                    "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                    "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                    "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                    "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                    "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                    "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                    "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                    "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                    "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                    "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                    "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 				Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,			'component',		'Auto Verification(Assembly Parts)',  \n" +
                    "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Purchasing Comment',  \n" +
                    "			CAST(OLD.purchasingComment AS CHAR),	CAST(NEW.purchasingComment AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                    "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                    "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Detailed Description',  \n" +
                    "			CAST(OLD.detailDescription AS CHAR),	CAST(NEW.detailDescription AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                    "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                    "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                    "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                    "			FROM rfq_assy_typemst  \n" +
                    "			WHERE id =OLD.assemblyType  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                    "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                    "			FROM rfq_assy_typemst  \n" +
                    "			WHERE id =NEW.assemblyType  \n" +
                    "			ORDER BY id DESC LIMIT 1;  \n" +
                    "		END IF;  \n" +
                    "       INSERT INTO Component_History  \n" +
                    "		(refComponentID,                tableName,                 	Colname,  \n" +
                    "		Oldval, 			Newval, 			createdBy,  \n" +
                    "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                    "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                    "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                    "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                    "    THEN  \n" +
                    "		-- Create string for Old configure value for Flux Type  \n" +
                    "		set pOldValue = '';  \n" +
                    "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                    "			set pOldValue = 'Not Applicable';  \n" +
                    "		END IF;  \n" +
                    "        IF(OLD.isNoClean = 1) THEN  \n" +
                    "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                    "		END IF;  \n" +
                    "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                    "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "        -- Create string for New configure value for Flux Type  \n" +
                    "        set pNewValue = '';  \n" +
                    "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                    "			set pNewValue = 'Not Applicable';  \n" +
                    "		END IF;  \n" +
                    "        IF(NEW.isNoClean = 1) THEN  \n" +
                    "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                    "		END IF;  \n" +
                    "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                    "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "       INSERT INTO Component_History  \n" +
                    "		(refComponentID,                tableName,                 	Colname,  \n" +
                    "		Oldval, 			Newval, 			createdBy,  \n" +
                    "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                    "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                    "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                    "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                    "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
                    "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
                    "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
                    "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
                    "										'Yes'  \n" +
                    "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
                    "										'No'  \n" +
                    "								ELSE '' END;  \n" +
                    "		END IF;  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
                    "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
                    "	       INSERT INTO Component_History  \n" +
                    "			(refComponentID,                tableName,                 	Colname,  \n" +
                    "			Oldval, 			Newval, 			createdBy,  \n" +
                    "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                    "        createByRoleId,		updateByRoleId)  \n" +
                    "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
                    "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
                    "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                    "        OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "END;  \n" +

                    "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                    "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                    "	IN pFromPartID INT,  \n" +
                    "    IN pNewEpicorType varchar(50),  \n" +
                    "    IN pNewAssemblyType INT,  \n" +
                    "    IN pNewMfgcodeID INT,  \n" +
                    "    IN pNewCustAssyPN varchar(500),  \n" +
                    "    IN pNewPartRev varchar(50),  \n" +
                    "    IN pNewMfgPN varchar(100),  \n" +
                    "    IN pNewAssyCode varchar(50),  \n" +
                    "    IN pNewNickName varchar(50),  \n" +
                    "    IN pNewPIDCode varchar(109),  \n" +
                    "    IN pIsCPN tinyint,  \n" +
                    "    IN pIsCustom tinyInt,  \n" +
                    "    IN pUserID Int,  \n" +
                    "    IN pUserRoleId Int,  \n" +
                    "    IN pIsAttribute tinyint,  \n" +
                    "    IN pIsSettings tinyint,  \n" +
                    "    IN pIsAdditionalAttibute tinyint,  \n" +
                    "    IN pIsPackagingDetail tinyint,  \n" +
                    "    IN pIsStandards tinyint,  \n" +
                    "    IN pIsRequiredFunctionalType tinyint,  \n" +
                    "    IN pIsRequiredMountingType tinyint,  \n" +
                    "    IN pIsPackagingAliasPart tinyint,  \n" +
                    "    IN pIsOtherPartName tinyint,  \n" +
                    "    IN pIsAlternatePart tinyint,  \n" +
                    "    IN pIsRoHSReplacementPart tinyint,  \n" +
                    "    IN pIsDriveTool tinyint,  \n" +
                    "    IN pIsProcessMaterial tinyint,  \n" +
                    "    IN pIsRequiredMattingParts tinyint,  \n" +
                    "    IN pIsPickupPad tinyint,  \n" +
                    "    IN pIsFunctionalTesingTool tinyint,  \n" +
                    "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                    "    IN pIsBOM tinyint,  \n" +
                    "    IN pIsFluxType tinyInt,  \n" +
                    "    IN pIsComments tinyInt,  \n" +
                    "    IN pIsCopyImages tinyInt,  \n" +
                    "    IN pIsCopyDatasheet tinyInt,  \n" +
                    "    IN pIsCopyDocument tinyInt,  \n" +
                    "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                    "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                    "    IN pIsTrackSNumber tinyInt,  \n" +
                    "    IN pMfgPNDescription varchar(2000),  \n" +
                    "    IN pDetailDescription varchar(2000)  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DECLARE vValidationPassed tinyint;  \n" +
                    "DECLARE vFromPartCategory tinyint;  \n" +
                    "DECLARE vFromMfgType varchar(5);  \n" +
                    "DECLARE vCount INT;  \n" +
                    "DECLARE vToPartID INT;  \n" +
                    "DECLARE vUserRoleId INT;  \n" +
                    "DECLARE vMisMatchFields longtext;  \n" +
                    "DECLARE vSerialNumber varchar(20);  \n" +
                    "DECLARE vMessage varchar(20);  \n" +
                    "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                    "BEGIN  \n" +
                    "	ROLLBACK;  \n" +
                    "	RESIGNAL;  \n" +
                    "END;  \n" +
                    "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                    "  BEGIN  \n" +
                    "	ROLLBACK;  \n" +
                    "	RESIGNAL;  \n" +
                    "END;  */  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                    "    select * from component where 1 = 2;  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                    "    select * from component where 1 = 2;  \n" +
                    "  \n" +
                    "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                    "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                    "  \n" +
                    "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                    "  	set vCount = 0;  \n" +
                    "    select co.category, m.mfgType, count(co.id)  \n" +
                    "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                    "	  from component co  \n" +
                    "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                    "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                    "  \n" +
                    "	if vCount = 0 then  \n" +
                    "		set vValidationPassed = 0;  \n" +
                    "		select 'PART_NOT_FOUND' as message;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                    "		set pIsAttribute = 1;  \n" +
                    "        set pIsAdditionalAttibute = 1;  \n" +
                    "    end if;  \n" +
                    "  \n" +
                    "	set vCount = 0;  \n" +
                    "    if (vFromPartCategory = 3) then # check category  \n" +
                    "	   select count(1) into vCount  \n" +
                    "		 from component co  \n" +
                    "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                    "          and co.category = 3  \n" +
                    "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                    "		  and co.rev = pNewPartRev  \n" +
                    "          and co.isDeleted = 0  \n" +
                    "		  and co.deletedAt is null;  \n" +
                    "		if vCount > 0 then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "            select 'DUPLICATE_REV' as message;  \n" +
                    "        end if;  \n" +
                    "  \n" +
                    "         set vCount = 0;  \n" +
                    "		 select count(1) into vCount  \n" +
                    "			 from component co  \n" +
                    "			where co.nickName != pNewNickName  \n" +
                    "              and co.category = 3  \n" +
                    "              and co.custAssyPN = pNewCustAssyPN  \n" +
                    "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "			  and co.isDeleted = 0  \n" +
                    "			  and co.deletedAt is null;  \n" +
                    "		  if vCount > 0 then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                    "						concat('(',m.mfgCode,') ',m.mfgName) mfrName  \n" +
                    "				 from component co  \n" +
                    "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                    "				where co.nickName != pNewNickName  \n" +
                    "				  and co.category = 3  \n" +
                    "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                    "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "				  and co.isDeleted = 0  \n" +
                    "				  and co.deletedAt is null  \n" +
                    "				  limit 1;  \n" +
                    "		  end if;  \n" +
                    "  \n" +
                    "		set vCount = 0;  \n" +
                    "		 select count(1) into vCount  \n" +
                    "			 from component co  \n" +
                    "			where co.nickName = pNewNickName  \n" +
                    "              and co.category = 3  \n" +
                    "              and co.custAssyPN != pNewCustAssyPN  \n" +
                    "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "			  and co.isDeleted = 0  \n" +
                    "			  and co.deletedAt is null;  \n" +
                    "		 if vCount > 0 then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                    "                        custAssyPN  \n" +
                    "				 from component co  \n" +
                    "				where co.nickName = pNewNickName  \n" +
                    "				  and co.category = 3  \n" +
                    "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                    "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                    "				  and co.isDeleted = 0  \n" +
                    "				  and co.deletedAt is null  \n" +
                    "				  limit 1;  \n" +
                    "		  end if;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "    set vCount = 0;  \n" +
                    "		select count(1) into vCount  \n" +
                    "		 from component co  \n" +
                    "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                    "		  and co.mfgPN = pNewMfgPN  \n" +
                    "          and co.isDeleted = 0  \n" +
                    "		  and co.deletedAt is null;  \n" +
                    "	 if vCount > 0 then  \n" +
                    "		set vValidationPassed = 0;  \n" +
                    "        select 'DUPLICATE_MFGPN' as message;  \n" +
                    "     end if;  \n" +
                    "  \n" +
                    "    set vCount = 0;  \n" +
                    "		select count(1) into vCount  \n" +
                    "		 from component co  \n" +
                    "		where co.PIDCode = pNewPIDCode  \n" +
                    "		  and co.isDeleted = 0  \n" +
                    "		  and co.deletedAt is null;  \n" +
                    "    if vCount > 0 then  \n" +
                    "		set vValidationPassed = 0;  \n" +
                    "        select 'DUPLICATE_PID' as message;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                    "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                    "													'MPNSystemID'  \n" +
                    "												else 'SPNSystemID' end,  \n" +
                    "											 true);  \n" +
                    "		  select systemID, message into vSerialNumber, vMessage  \n" +
                    "		  from temp_serialNumber;  \n" +
                    "        if vMessage is not null and vMessage != '' then  \n" +
                    "			set vValidationPassed = 0;  \n" +
                    "			select vMessage as message;  \n" +
                    "		end if;  \n" +
                    "	end if;  \n" +
                    "  \n" +
                    "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                    "		-- START TRANSACTION;  \n" +
                    "		insert into component(  \n" +
                    "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                    "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                    "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                    "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                    "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                    "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                    "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                    "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                    "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                    "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference)  \n" +
                    "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                    "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                    "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                    "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                    "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                    "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                    "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                    "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                    "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                    "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                    "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                    "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                    "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                    "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                    "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                    "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                    "                internalReference  \n" +
                    "		 from component  \n" +
                    "		where id = pFromPartID;  \n" +
                    "		set vToPartID = LAST_INSERT_ID();  \n" +
                    "  \n" +
                    "		IF pIsAttribute  then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                    "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                    "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                    "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                    "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                    "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                    "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                    "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                    "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                    "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                    "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                    "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                    "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                    "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                    "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                    "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                    "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                    "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                    "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                    "			toPart.`pitch` = fromPart.pitch,  \n" +
                    "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                    "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                    "			toPart.`length` = fromPart.length,  \n" +
                    "			toPart.`width` = fromPart.width,  \n" +
                    "			toPart.`heightText` = fromPart.heightText,  \n" +
                    "			toPart.`height` = fromPart.height,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "		end if;  \n" +
                    "		IF pIsSettings then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                    "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                    "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
                    "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                    "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                    "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                    "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                    "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                    "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                    "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                    "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                    "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                    "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                    "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                    "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                    "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                    "			toPart.`eau` = fromPart.eau,  \n" +
                    "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                    "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                    "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
                    "			toPart.`bomLock` = fromPart.bomLock,  \n" +
                    "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                    "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                    "		end if;  \n" +
                    "		IF pIsAdditionalAttibute then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                    "			from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`tolerance` = fromPart.tolerance,  \n" +
                    "			toPart.`voltage` = fromPart.voltage,  \n" +
                    "			toPart.`value` = fromPart.value,  \n" +
                    "			toPart.`partPackage` = fromPart.partPackage,  \n" +
                    "			toPart.`powerRating` = fromPart.powerRating,  \n" +
                    "			toPart.`weight` = fromPart.weight,  \n" +
                    "			toPart.`feature` = fromPart.feature,  \n" +
                    "			toPart.`color` = fromPart.color,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "		end if;  \n" +
                    "		IF pIsPackagingDetail then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                    "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                    "			toPart.`packagingID` = fromPart.packagingID,  \n" +
                    "			toPart.`minimum` = fromPart.minimum,  \n" +
                    "			toPart.`mult` = fromPart.mult,  \n" +
                    "			toPart.`packageQty` = fromPart.packageQty,  \n" +
                    "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                    "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                    "			toPart.`uom` = fromPart.uom,  \n" +
                    "			toPart.`uomText` = fromPart.uomText,  \n" +
                    "			toPart.`unit` = fromPart.unit,  \n" +
                    "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                    "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                    "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                    "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                    "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                    "            toPart.`isReceiveBulkItem` = fromPart.isReceiveBulkItem,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "		end if;  \n" +
                    "		if pIsStandards then  \n" +
                    "			UPDATE `component` toPart,  \n" +
                    "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                    "			SET  \n" +
                    "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                    "			toPart.`htsCode` = fromPart.htsCode,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = vToPartID;  \n" +
                    "			INSERT INTO `component_standard_details`  \n" +
                    "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                    "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                    "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                    "			and not exists (select 1 from component_standard_details csd  \n" +
                    "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                    "		end if;  \n" +
                    "		if pIsRequiredMountingType then  \n" +
                    "			INSERT INTO `component_requiremountingtype`  \n" +
                    "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "			and not exists (select 1 from component_requiremountingtype  \n" +
                    "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                    "		end if;  \n" +
                    "		if pIsRequiredFunctionalType then  \n" +
                    "			INSERT INTO `component_requirefunctionaltype`  \n" +
                    "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                    "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                    "		end if;  \n" +
                    "		IF pIsAcceptableShippinCountry then  \n" +
                    "			INSERT INTO component_acceptable_shipping_countries  \n" +
                    "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                    "			SELECT  \n" +
                    "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                    "			FROM  \n" +
                    "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                    "		end if;  \n" +
                    "  \n" +
                    "		IF(pIsPackagingAliasPart)  \n" +
                    "		THEN  \n" +
                    "			set vMisMatchFields  = '';  \n" +
                    "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                    "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                    "		END IF;  \n" +
                    "		IF(vValidationPassed = 0)  \n" +
                    "		THEN  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                    "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                    "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                    "		ELSE  \n" +
                    "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                    "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                    "  \n" +
                    "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                    "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                    "			THEN  \n" +
                    "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                    "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                    "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                    "			end if;  \n" +
                    "            IF(vValidationPassed = 0)  \n" +
                    "			THEN  \n" +
                    "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                    "			ELSE  \n" +
                    "				if pIsPackagingAliasPart then  \n" +
                    "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                    "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                    "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                    "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                    "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                    "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                    "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                    "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                    "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                    "					# Insert data in packaging alias table for ToPartID  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "					# Update data for packaging alias group id for  ToPartID  \n" +
                    "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                    "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                    "					# Insert data in packaging alias table for ToPartID  \n" +
                    "						INSERT INTO `component_packagingalias`  \n" +
                    "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "						values  \n" +
                    "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "					# Update data for packaging alias group id for  FromPartID  \n" +
                    "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                    "					end if;  \n" +
                    "				end if;  \n" +
                    "				if pIsOtherPartName then  \n" +
                    "					INSERT INTO `component_otherpn`  \n" +
                    "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "					and not exists (select 1 from component_otherpn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                    "				end if;  \n" +
                    "				If pIsAlternatePart then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                    "				end if;  \n" +
                    "				if pIsRoHSReplacementPart then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                    "				end if;  \n" +
                    "				if pIsDriveTool then  \n" +
                    "					INSERT INTO `component_drivetools`  \n" +
                    "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                    "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                    "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_drivetools  \n" +
                    "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                    "				end if;  \n" +
                    "				if pIsProcessMaterial then  \n" +
                    "					INSERT INTO `component_processmaterial`  \n" +
                    "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                    "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                    "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_processmaterial  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                    "				end if;  \n" +
                    "				if pIsRequiredMattingParts then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                    "				end if;  \n" +
                    "				if pIsPickupPad then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                    "				end if;  \n" +
                    "				if pIsFunctionalTesingTool then  \n" +
                    "					INSERT INTO `component_alternatepn`  \n" +
                    "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                    "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                    "					and not exists (select 1 from component_alternatepn  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                    "				end if;  \n" +
                    "				if pIsFinctionalRestingEquipment then  \n" +
                    "					INSERT INTO `component_functionaltestingequipment`  \n" +
                    "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                    "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                    "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                    "				end if;  \n" +
                    "				if (vFromPartCategory = 3) then  \n" +
                    "					if pIsBOM then  \n" +
                    "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                    "					end if;  \n" +
                    "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                    "				end if;  \n" +
                    "				if(pIsComments = 1) THEN  \n" +
                    "						INSERT INTO componenet_inspection_requirement_det  \n" +
                    "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                    "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                    "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                    "						INSERT INTO assembly_revision_comments  \n" +
                    "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                    "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                    "							partID = pFromPartID;  \n" +
                    "				END IF;  \n" +
                    "  \n" +
                    "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                    "				IF pIsCopyImages  then  \n" +
                    "					insert into component_images  \n" +
                    "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                    "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                    "					 from component_images  \n" +
                    "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                    "				end if;  \n" +
                    "				IF pIsCopyDatasheet  then  \n" +
                    "					insert into component_datasheets  \n" +
                    "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                    "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                    "					from component_datasheets  \n" +
                    "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                    "				end if;  \n" +
                    "				IF pIsOperationalAttirbutes  then  \n" +
                    "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                    "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                    "					SELECT  \n" +
                    "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                    "					FROM  \n" +
                    "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                    "				end if;  \n" +
                    "				IF pIsCopyDocument then  \n" +
                    "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                    "					INSERT INTO generic_folder  \n" +
                    "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                    "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                    "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                    "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                    "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                    "					FROM generic_folder a  \n" +
                    "					WHERE a.refTransID = pFromPartID  \n" +
                    "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                    "  \n" +
                    "					UPDATE generic_folder gf1,  \n" +
                    "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                    "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                    "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                    "					) gf2  \n" +
                    "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                    "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                    "					AND gf1.refTransID = vToPartID  \n" +
                    "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                    "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                    "  \n" +
                    "					INSERT INTO genericfiles  \n" +
                    "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                    "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                    "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                    "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                    "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                    "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                    "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                    "  \n" +
                    "					UPDATE genericfiles gf1,  \n" +
                    "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                    "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                    "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                    "					) gf2  \n" +
                    "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                    "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                    "					AND gf1.refTransID = vToPartID  \n" +
                    "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                    "				end if;  \n" +
                    "  \n" +
                    "				-- commit;  \n" +
                    "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                    "				IF(@documentPathOfFromPart is null)  \n" +
                    "				THEN  \n" +
                    "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                    "				END IF;  \n" +
                    "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                    "			END IF;  \n" +
                    "		END IF;  \n" +
                    "	end if;  \n" +
                    "END;  \n" +

                    "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                    "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                    "	IN pFromPartID INT(11),  \n" +
                    "    IN pToPartID INT(11),  \n" +
                    "    IN pUserID Int(11),  \n" +
                    "    IN pIsAttribute tinyint(1),  \n" +
                    "    IN pIsSettings tinyint(1),  \n" +
                    "    IN pIsAdditionalAttibute tinyint(1),  \n" +
                    "    IN pIsPackagingDetail tinyint(1),  \n" +
                    "    IN pIsStandards tinyint(1),  \n" +
                    "    IN pIsRequiredFunctionalType tinyint(1),  \n" +
                    "    IN pIsRequiredMountingType tinyint(1),  \n" +
                    "    IN pIsPackagingAliasPart tinyint(1),  \n" +
                    "    IN pIsOtherPartName tinyint(1),  \n" +
                    "    IN pIsAlternatePart tinyint(1),  \n" +
                    "    IN pIsRoHSReplacementPart tinyint(1),  \n" +
                    "    IN pIsDriveTool tinyint(1),  \n" +
                    "    IN pIsProcessMaterial tinyint(1),  \n" +
                    "    IN pIsRequiredMattingParts tinyint(1),  \n" +
                    "    IN pIsPickupPad tinyint(1),  \n" +
                    "    IN pIsProgram tinyint(1),  \n" +
                    "    IN pIsFunctionalTesingTool tinyint(1),  \n" +
                    "    IN pIsFinctionalRestingEquipment tinyint(1)  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "DECLARE vValidationPassed tinyint;  \n" +
                    "DECLARE vMisMatchFields longtext;  \n" +
                    "DECLARE vMessage varchar(20);  \n" +
                    "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                    "BEGIN  \n" +
                    "	ROLLBACK;  \n" +
                    "	RESIGNAL;  \n" +
                    "END;  \n" +
                    "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                    "  BEGIN  \n" +
                    "	ROLLBACK;  \n" +
                    "	RESIGNAL;  \n" +
                    "END;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                    "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                    "    select * from component where 1 = 2;  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                    "    select * from component where 1 = 2;  \n" +
                    "  \n" +
                    "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                    "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                    "  \n" +
                    "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                    "  \n" +
                    "	START TRANSACTION;  \n" +
                    "	IF pIsAttribute  then  \n" +
                    "		UPDATE `component` toPart,  \n" +
                    "		(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                    "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                    "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                    "		`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                    "		SET  \n" +
                    "		toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                    "		toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                    "		toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                    "		toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                    "		toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                    "		toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                    "		toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                    "		toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                    "		toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                    "		toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                    "		toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                    "		toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                    "		toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                    "		toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                    "		toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                    "		toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                    "		toPart.`pitch` = fromPart.pitch,  \n" +
                    "		toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                    "		toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                    "		toPart.`length` = fromPart.length,  \n" +
                    "		toPart.`width` = fromPart.width,  \n" +
                    "		toPart.`heightText` = fromPart.heightText,  \n" +
                    "		toPart.`height` = fromPart.height,  \n" +
                    "		toPart.`updatedBy` = pUserID,  \n" +
                    "		toPart.`updatedAt` = current_timestamp()  \n" +
                    "		WHERE toPart.`id` = pToPartID;  \n" +
                    "	end if;  \n" +
                    "	IF pIsSettings then  \n" +
                    "		UPDATE `component` toPart,  \n" +
                    "		(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                    "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                    "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                    "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`  \n" +
                    "        from component where id = pFromPartID) fromPart  \n" +
                    "		SET  \n" +
                    "		toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                    "		toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                    "		toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                    "		toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                    "		toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                    "		toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                    "		toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                    "        toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                    "		toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                    "        toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                    "		toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                    "		toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                    "		toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                    "		toPart.`eau` = fromPart.eau,  \n" +
                    "		toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                    "		toPart.`driverToolRequired` = fromPart.driverToolRequired,  \n" +
                    "		toPart.`matingPartRquired` = fromPart.matingPartRquired,  \n" +
                    "		toPart.`pickupPadRequired` = fromPart.pickupPadRequired,  \n" +
                    "		toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                    "		toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,  \n" +
                    "		toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,  \n" +
                    "		toPart.`bomLock` = fromPart.bomLock,  \n" +
                    "		toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,  \n" +
                    "		toPart.`updatedBy` = pUserID,  \n" +
                    "		toPart.`updatedAt` = current_timestamp()  \n" +
                    "		WHERE toPart.`id` = pToPartID;  \n" +
                    "		INSERT INTO `component_temperature_sensitive_data`  \n" +
                    "		(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "		select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                    "		from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                    "	end if;  \n" +
                    "	IF pIsAdditionalAttibute then  \n" +
                    "		UPDATE `component` toPart,  \n" +
                    "		(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                    "		from component where id = pFromPartID) fromPart  \n" +
                    "		SET  \n" +
                    "		toPart.`tolerance` = fromPart.tolerance,  \n" +
                    "		toPart.`voltage` = fromPart.voltage,  \n" +
                    "		toPart.`value` = fromPart.value,  \n" +
                    "		toPart.`partPackage` = fromPart.partPackage,  \n" +
                    "		toPart.`powerRating` = fromPart.powerRating,  \n" +
                    "		toPart.`weight` = fromPart.weight,  \n" +
                    "		toPart.`feature` = fromPart.feature,  \n" +
                    "		toPart.`color` = fromPart.color,  \n" +
                    "		toPart.`updatedBy` = pUserID,  \n" +
                    "		toPart.`updatedAt` = current_timestamp()  \n" +
                    "		WHERE toPart.`id` = pToPartID;  \n" +
                    "	end if;  \n" +
                    "	IF pIsPackagingDetail then  \n" +
                    "		UPDATE `component` toPart,  \n" +
                    "		(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                    "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem` from component where id = pFromPartID) fromPart  \n" +
                    "		SET  \n" +
                    "		toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                    "		toPart.`packagingID` = fromPart.packagingID,  \n" +
                    "		toPart.`minimum` = fromPart.minimum,  \n" +
                    "		toPart.`mult` = fromPart.mult,  \n" +
                    "		toPart.`packageQty` = fromPart.packageQty,  \n" +
                    "        toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                    "		toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                    "		toPart.`uom` = fromPart.uom,  \n" +
                    "		toPart.`uomText` = fromPart.uomText,  \n" +
                    "		toPart.`unit` = fromPart.unit,  \n" +
                    "		toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                    "		toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                    "		toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                    "		toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                    "		toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                    "        toPart.`isReceiveBulkItem` = (CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END),  \n" +
                    "		toPart.`updatedBy` = pUserID,  \n" +
                    "		toPart.`updatedAt` = current_timestamp()  \n" +
                    "		WHERE toPart.`id` = pToPartID;  \n" +
                    "	end if;  \n" +
                    "	if pIsStandards then  \n" +
                    "		UPDATE `component` toPart,  \n" +
                    "		(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                    "		SET  \n" +
                    "		toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                    "		toPart.`htsCode` = fromPart.htsCode,  \n" +
                    "		toPart.`updatedBy` = pUserID,  \n" +
                    "		toPart.`updatedAt` = current_timestamp()  \n" +
                    "		WHERE toPart.`id` = pToPartID;  \n" +
                    "		INSERT INTO `component_standard_details`  \n" +
                    "		(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                    "		select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                    "		from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                    "		and not exists (select 1 from component_standard_details csd  \n" +
                    "		where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                    "	end if;  \n" +
                    "	if pIsRequiredMountingType then  \n" +
                    "		INSERT INTO `component_requiremountingtype`  \n" +
                    "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "		SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                    "		FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "		and not exists (select 1 from component_requiremountingtype  \n" +
                    "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                    "		set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                    "		if @requiredMountingTypecount>0 then  \n" +
                    "			UPDATE `component` toPart  \n" +
                    "			SET  \n" +
                    "			toPart.`mountingTypePartRequired` = true,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = pToPartID;  \n" +
                    "		end if;  \n" +
                    "	end if;  \n" +
                    "	if pIsRequiredFunctionalType then  \n" +
                    "		INSERT INTO `component_requirefunctionaltype`  \n" +
                    "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "		SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                    "		FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "		and not exists (select 1 from component_requirefunctionaltype  \n" +
                    "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                    "		set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                    "		if @requiredFunctionalTypecount>0 then  \n" +
                    "			UPDATE `component` toPart  \n" +
                    "			SET  \n" +
                    "			toPart.`functionalTypePartRequired` = true,  \n" +
                    "			toPart.`updatedBy` = pUserID,  \n" +
                    "			toPart.`updatedAt` = current_timestamp()  \n" +
                    "			WHERE toPart.`id` = pToPartID;  \n" +
                    "		end if;  \n" +
                    "	end if;  \n" +
                    "	IF(pIsPackagingAliasPart)  \n" +
                    "	THEN  \n" +
                    "		set vMisMatchFields  = '';  \n" +
                    "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID, pFromPartID, vMisMatchFields);  \n" +
                    "		set vValidationPassed = (select CASE WHEN (vMisMatchFields != '') THEN 0 ELSE 1 END);  \n" +
                    "	END IF;  \n" +
                    "	IF(vValidationPassed = 0)  \n" +
                    "	THEN  \n" +
                    "		ROLLBACK;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                    "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                    "		select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                    "	ELSE  \n" +
                    "		set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                    "		set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);  \n" +
                    "  \n" +
                    "		if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                    "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                    "		THEN  \n" +
                    "			call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                    "			select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                    "			set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                    "		end if;  \n" +
                    "  \n" +
                    "        IF(vValidationPassed = 0)  \n" +
                    "		THEN  \n" +
                    "			ROLLBACK;  \n" +
                    "			select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                    "		ELSE  \n" +
                    "			if pIsPackagingAliasPart then  \n" +
                    "				if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                    "					# update alias group id as new packaging alias group id in packaging alias table  \n" +
                    "					update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                    "					# update packaging alias group id as new packaging alias group id in component table  \n" +
                    "					update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                    "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                    "					# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                    "					INSERT INTO `component_packagingalias`  \n" +
                    "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "					values  \n" +
                    "					(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "					INSERT INTO `component_packagingalias`  \n" +
                    "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "					values  \n" +
                    "					(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "  \n" +
                    "					# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                    "					update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);  \n" +
                    "				elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                    "  \n" +
                    "				# Insert data in packaging alias table for ToPartID  \n" +
                    "					INSERT INTO `component_packagingalias`  \n" +
                    "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "					values  \n" +
                    "					(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "				# Update data for packaging alias group id for  ToPartID  \n" +
                    "					update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;  \n" +
                    "  \n" +
                    "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                    "  \n" +
                    "				# Insert data in packaging alias table for ToPartID  \n" +
                    "					INSERT INTO `component_packagingalias`  \n" +
                    "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                    "					values  \n" +
                    "					(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                    "				# Update data for packaging alias group id for  FromPartID  \n" +
                    "					update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                    "  \n" +
                    "				end if;  \n" +
                    "			end if;  \n" +
                    "			if pIsOtherPartName then  \n" +
                    "				INSERT INTO `component_otherpn`  \n" +
                    "				(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "				SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                    "				FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "				and not exists (select 1 from component_otherpn  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                    "			end if;  \n" +
                    "			If pIsAlternatePart then  \n" +
                    "				INSERT INTO `component_alternatepn`  \n" +
                    "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                    "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_alternatepn  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                    "			end if;  \n" +
                    "			if pIsRoHSReplacementPart then  \n" +
                    "				INSERT INTO `component_alternatepn`  \n" +
                    "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                    "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_alternatepn  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                    "			end if;  \n" +
                    "			if pIsDriveTool then  \n" +
                    "				INSERT INTO `component_drivetools`  \n" +
                    "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                    "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                    "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_drivetools  \n" +
                    "				where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                    "  \n" +
                    "				set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                    "				if @DriveToolcount>0 then  \n" +
                    "					UPDATE `component` toPart  \n" +
                    "					SET  \n" +
                    "					toPart.`driverToolRequired` = true,  \n" +
                    "					toPart.`updatedBy` = pUserID,  \n" +
                    "					toPart.`updatedAt` = current_timestamp()  \n" +
                    "					WHERE toPart.`id` = pToPartID;  \n" +
                    "				end if;  \n" +
                    "			end if;  \n" +
                    "			if pIsProcessMaterial then  \n" +
                    "				INSERT INTO `component_processmaterial`  \n" +
                    "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                    "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                    "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_processmaterial  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                    "			end if;  \n" +
                    "			if pIsRequiredMattingParts then  \n" +
                    "				INSERT INTO `component_alternatepn`  \n" +
                    "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                    "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_alternatepn  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                    "  \n" +
                    "				set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                    "				if @mattingpartcount>0 then  \n" +
                    "					UPDATE `component` toPart  \n" +
                    "					SET  \n" +
                    "					toPart.`matingPartRquired` = true,  \n" +
                    "					toPart.`updatedBy` = pUserID,  \n" +
                    "					toPart.`updatedAt` = current_timestamp()  \n" +
                    "					WHERE toPart.`id` = pToPartID;  \n" +
                    "				end if;  \n" +
                    "  \n" +
                    "			end if;  \n" +
                    "			if pIsPickupPad then  \n" +
                    "			INSERT INTO `component_alternatepn`  \n" +
                    "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                    "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_alternatepn  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                    "  \n" +
                    "				set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                    "				if @PickupPadcount>0 then  \n" +
                    "					UPDATE `component` toPart  \n" +
                    "					SET  \n" +
                    "					toPart.`pickupPadRequired` = true,  \n" +
                    "					toPart.`updatedBy` = pUserID,  \n" +
                    "					toPart.`updatedAt` = current_timestamp()  \n" +
                    "					WHERE toPart.`id` = pToPartID;  \n" +
                    "				end if;  \n" +
                    "			end if;  \n" +
                    "			if pIsProgram then  \n" +
                    "				INSERT INTO `component_alternatepn`  \n" +
                    "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                    "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 3 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_alternatepn  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 3);  \n" +
                    "  \n" +
                    "				set @Programcount =  (select count(1) from component_alternatepn where type = '3' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                    "				if @Programcount>0 then  \n" +
                    "					UPDATE `component` toPart  \n" +
                    "					SET  \n" +
                    "					toPart.`programingRequired` = true,  \n" +
                    "					toPart.`updatedBy` = pUserID,  \n" +
                    "					toPart.`updatedAt` = current_timestamp()  \n" +
                    "					WHERE toPart.`id` = pToPartID;  \n" +
                    "				end if;  \n" +
                    "			end if;  \n" +
                    "			if pIsFunctionalTesingTool then  \n" +
                    "				INSERT INTO `component_alternatepn`  \n" +
                    "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                    "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                    "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                    "				and not exists (select 1 from component_alternatepn  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                    "  \n" +
                    "				set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                    "				if @FunctionalTesingToolcount>0 then  \n" +
                    "					UPDATE `component` toPart  \n" +
                    "					SET  \n" +
                    "					toPart.`functionalTestingRequired` = true,  \n" +
                    "					toPart.`updatedBy` = pUserID,  \n" +
                    "					toPart.`updatedAt` = current_timestamp()  \n" +
                    "					WHERE toPart.`id` = pToPartID;  \n" +
                    "				end if;  \n" +
                    "			end if;  \n" +
                    "			if pIsFinctionalRestingEquipment then  \n" +
                    "				INSERT INTO `component_functionaltestingequipment`  \n" +
                    "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                    "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                    "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                    "				and not exists (select 1 from component_functionaltestingequipment  \n" +
                    "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                    "			end if;  \n" +
                    "			commit;  \n" +
                    "			select * from component where id = pToPartID;  \n" +
                    "		END IF;  \n" +
                    "	END IF;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 03-09-2021 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (1119,'1.00','V1',' Task 36507: Configure checkbox for Receive as Bulk Item for Other part type - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
                    );
                break;
                
        case 1119:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-09-2021  *********************************** */
            "drop function if exists fun_getDesignatorList;  \n" +
            "CREATE FUNCTION `fun_getDesignatorList`(  \n" +
            "	pRefDesig TEXT  \n" +
            ") RETURNS text CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "  DECLARE vReturn,refDesigArr TEXT DEFAULT '';  \n" +
            "  DECLARE startPos,endPos,maxLength INT DEFAULT 1;  \n" +
            "  DECLARE item VARCHAR(200);  \n" +
            "  DECLARE delim CHAR(1) ;  \n" +
            "  DECLARE vGetRange VARCHAR(2000);  \n" +
            "  SET delim = ',';  \n" +
            "  If pRefDesig IS NOT NULL Then  \n" +
            "    -- Replace space with comma, as we consider space as a seperator too  \n" +
            "    SET refDesigArr = trim(pRefDesig);  \n" +
            "    SET refDesigArr = replace(refDesigArr,' ', '');  \n" +
            "   -- SET refDesigArr = refDesigArr.replace('/ /g', ',');  \n" +
            "    set maxLength = length(refDesigArr);  \n" +
            "	REPEAT  \n" +
            "		SET endPos = LOCATE(delim,refDesigArr,startPos);  \n" +
            "        IF endPos = 0 THEN  \n" +
            "			SET item = SUBSTR(refDesigArr,startPos);  \n" +
            "        ELSE  \n" +
            "			SET item = SUBSTR(refDesigArr,startPos,endPos-startPos);  \n" +
            "        END IF;  \n" +
            "		IF item <>'' OR item IS NOT NULL THEN  \n" +
            "			IF (instr(item,'-') > 0) THEN  \n" +
            "				SET vGetRange = fun_getRangeFromString(item,'-');  \n" +
            "			ELSE  \n" +
            "				SET vGetRange = item;  \n" +
            "			END IF;  \n" +
            "			IF startpos >  1 AND  endPos = 0 THEN  \n" +
            "				SET vReturn = concat(vReturn,vGetRange);  \n" +
            "				SET startPos = maxLength ;  \n" +
            "			ELSE  \n" +
            "				SET vReturn = concat(vReturn,vGetRange,',');  \n" +
            "				SET startPos = endPos + 1;  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "	UNTIL startPos>= maxLength END REPEAT;  \n" +
            "  END IF;  \n" +
            "  return vReturn;  \n" +
            "end;  \n" +
            /* **************************** Add Script Version -> 06-09-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1120,'1.00','V1','fun_getDesignatorList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        break;
        case 1120:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-09-2021  *********************************** */
                "alter table packing_slip_material_receive_det  \n" +
                "Add column pendingLines INT,  \n" +
                "Add column acceptedWithDeviationLines INT,  \n" +
                "Add column totalLines INT,  \n" +
                "Add column rejectedLines INT,  \n" +
                "Add column acceptedLines INT;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1121,'1.00','V1',' User Story 36002: [Main Branch] Material Receipt: Give provision to add line summary and related changes in advance filter - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1121:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \"AND isPaymentVoided=0 AND paymentNumber \",CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = '\", pPaymentNumber ,\"' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
                "							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            pip.paymentNumber,  \n" +
                "                            pipd.isPaymentVoided  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "					LEFT JOIN packingslip_invoice_payment_det pipd ON pipd.refPackingslipInvoiceID = p.refPackingSlipNumberForInvoice AND pipd.isDeleted = 0  \n" +
                "					LEFT JOIN packingslip_invoice_payment pip ON pip.id = pipd.refPayementid AND pip.isDeleted = 0  \n" +
                "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1122,'1.00','V1',' User Story 36002: [Main Branch] Material Receipt: Give provision to add line summary and related changes in advance filter - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//case 748:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 10-06-2021  *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version ->  *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (749,'1.00','V1',' Sample entry - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
//  );
//break;