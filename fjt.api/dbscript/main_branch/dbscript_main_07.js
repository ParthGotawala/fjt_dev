(function (maxBuildNumber, userid) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 1122:
            /* **************************** New Script -> 09-09-2021  *********************************** */
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */

                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1123,'1.00','V1',' Sample entry - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1123:
            /* **************************** New Script -> 09-09-2021  *********************************** */
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  */  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsAttribute  then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,  \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,  \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,  \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,  \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,  \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,  \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,  \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,  \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,  \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,  \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,  \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,  \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,  \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,  \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,  \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,  \n" +
                "			toPart.`pitch` = fromPart.pitch,  \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,  \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,  \n" +
                "			toPart.`length` = fromPart.length,  \n" +
                "			toPart.`width` = fromPart.width,  \n" +
                "			toPart.`heightText` = fromPart.heightText,  \n" +
                "			toPart.`height` = fromPart.height,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsSettings then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "			`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "            `shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`programingRequired`,`restrictUSEwithpermission`,`bomLock`,  \n" +
                "            `restrictUsePermanently` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,  \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,  \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,  \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,  \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,  \n" +
                "			toPart.`shelfLifeAcceptanceDays` = fromPart.shelfLifeAcceptanceDays,  \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,  \n" +
                "            toPart.`maxShelfLifeAcceptanceDays` = fromPart.maxShelfLifeAcceptanceDays,  \n" +
                "			toPart.`maxShelfListDaysThresholdPercentage` = fromPart.maxShelfListDaysThresholdPercentage,  \n" +
                "            toPart.`shelfLifeDateType` = fromPart.shelfLifeDateType,  \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,  \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,  \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,  \n" +
                "			toPart.`eau` = fromPart.eau,  \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,  \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,  \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),  \n" +
                "			toPart.`bomLock` = fromPart.bomLock,  \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "		IF pIsAdditionalAttibute then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`  \n" +
                "			from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`tolerance` = fromPart.tolerance,  \n" +
                "			toPart.`voltage` = fromPart.voltage,  \n" +
                "			toPart.`value` = fromPart.value,  \n" +
                "			toPart.`partPackage` = fromPart.partPackage,  \n" +
                "			toPart.`powerRating` = fromPart.powerRating,  \n" +
                "			toPart.`weight` = fromPart.weight,  \n" +
                "			toPart.`feature` = fromPart.feature,  \n" +
                "			toPart.`color` = fromPart.color,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		IF pIsPackagingDetail then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,  \n" +
                "			toPart.`packagingID` = fromPart.packagingID,  \n" +
                "			toPart.`minimum` = fromPart.minimum,  \n" +
                "			toPart.`mult` = fromPart.mult,  \n" +
                "			toPart.`packageQty` = fromPart.packageQty,  \n" +
                "			toPart.`umidSPQ` = fromPart.umidSPQ,  \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,  \n" +
                "			toPart.`uom` = fromPart.uom,  \n" +
                "			toPart.`uomText` = fromPart.uomText,  \n" +
                "			toPart.`unit` = fromPart.unit,  \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,  \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,  \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,  \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,  \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,  \n" +
                "            toPart.`isReceiveBulkItem` = fromPart.isReceiveBulkItem,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "		end if;  \n" +
                "		if pIsStandards then  \n" +
                "			UPDATE `component` toPart,  \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "			SET  \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "			toPart.`htsCode` = fromPart.htsCode,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = vToPartID;  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if pIsPackagingAliasPart then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If pIsAlternatePart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if pIsRoHSReplacementPart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if pIsDriveTool then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsProcessMaterial then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsRequiredMattingParts then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if pIsPickupPad then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if pIsFunctionalTesingTool then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if pIsFinctionalRestingEquipment then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				-- commit;  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1124,'1.00','V1',' Bug 36769: [Main Branch] When user tries to Create Duplicate part then it shows Error message - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1124:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_uti_generatekitConsolidateData`;  \n" +
                "CREATE PROCEDURE `Sproc_uti_generatekitConsolidateData`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE finished INTEGER DEFAULT 0;  \n" +
                "	DECLARE vsalesorderid int;  \n" +
                "	DECLARE vpartID int;  \n" +
                "    declare vTotalCount int  DEFAULT 0;  \n" +
                "    declare vcurrentCount int  DEFAULT 0;  \n" +
                "  DEClARE cursalesorder  \n" +
                "		CURSOR FOR  \n" +
                "			select sod.id, sod.partID from salesorderdet sod  \n" +
                "			join component c on c.id = sod.partID and c.category = 3  \n" +
                "			where sod.isdeleted = 0;  \n" +
                "	-- declare NOT FOUND handler  \n" +
                "	DECLARE CONTINUE HANDLER  \n" +
                "	FOR NOT FOUND SET finished = 1;  \n" +
                "		select id into @vuserID from users where `username` = 'ADMIN';  \n" +
                "		select id into @vroleID from roles where `name` = 'Super Admin';  \n" +
                "	OPEN cursalesorder;  \n" +
                "  \n" +
                "    getSalesorder: LOOP  \n" +
                "    IF finished = 1 THEN  \n" +
                "			LEAVE getSalesorder;  \n" +
                "            END IF;  \n" +
                "    	FETCH cursalesorder INTO vsalesorderid,vpartID;  \n" +
                "		CALL `Sproc_CreateKitAllocationConsolidateLine`(vsalesorderid, vpartID, @vuserID, @vroleID);  \n" +
                "	END LOOP getSalesorder;  \n" +
                "	CLOSE cursalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1125,'1.00','V1','Sproc_uti_generatekitConsolidateData - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1125:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_uti_generatekitConsolidateData`;  \n" +
                "CREATE PROCEDURE `Sproc_uti_generatekitConsolidateData`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE finished INTEGER DEFAULT 0;  \n" +
                "	DECLARE vsalesorderid int;  \n" +
                "	DECLARE vpartID int;  \n" +
                "    declare vTotalCount int  DEFAULT 0;  \n" +
                "    declare vcurrentCount int  DEFAULT 0;  \n" +
                "  DEClARE cursalesorder  \n" +
                "		CURSOR FOR  \n" +
                "			select sod.id, sod.partID from salesorderdet sod  \n" +
                "			join component c on c.id = sod.partID and c.category = 3  \n" +
                "			where sod.isdeleted = 0;  \n" +
                "	-- declare NOT FOUND handler  \n" +
                "	DECLARE CONTINUE HANDLER  \n" +
                "	FOR NOT FOUND SET finished = 1;  \n" +
                "		select id into @vuserID from users where `username` = 'ADMIN';  \n" +
                "		select id into @vroleID from roles where `name` = 'Super Admin';  \n" +
                "	OPEN cursalesorder;  \n" +
                "  \n" +
                "    getSalesorder: LOOP  \n" +
                "    IF finished = 1 THEN  \n" +
                "			LEAVE getSalesorder;  \n" +
                "            END IF;  \n" +
                "    	FETCH cursalesorder INTO vsalesorderid,vpartID;  \n" +
                "        if (select count(1) from kit_allocation_consolidate_line_alternatepart where refSalesOrderDetId = vsalesorderid and refAssyId = vpartID and isdeleted = 0) = 0 then  \n" +
                "			CALL `Sproc_CreateKitAllocationConsolidateLine`(vsalesorderid, vpartID, @vuserID, @vroleID);  \n" +
                "        end if;  \n" +
                "	END LOOP getSalesorder;  \n" +
                "	CLOSE cursalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1126,'1.00','V1','Sproc_uti_generatekitConsolidateData - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1126:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-09-2021  *********************************** */
                "drop procedure if exists `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuild > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = - 2 THEN  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "											ELSE  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) END  \n" +
                "										END  \n" +
                "								END  \n" +
                "							) shortagePerBuild,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END  \n" +
                "											ELSE  \n" +
                "												CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "													ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "										END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailable,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    #SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  #SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "   #SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1127,'1.00','V1','kit allocation list SP Performance tuning by DP - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1127:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "							c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "							c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore  \n" +
                "		FROM	(  \n" +
                "			SELECT 		sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "					p.actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.mismatchItem,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1128,'1.00','V1',' Bug 36840: [Main Branch] When user do choose Xfer kit option on Xfer Bulk material page then it shows Something Went Wrong message - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1128:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;   \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);     \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;   \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "	SELECT  (  \n" +
                "			CASE  \n" +
                "				WHEN connecterTypeID = -2 THEN  \n" +
                "					IFNULL(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)),0)  \n" +
                "				ELSE  \n" +
                "					IFNULL(MIN(allocatedunit/qpaWithDnp),0)  \n" +
                "			END  \n" +
                "		)  \n" +
                "	INTO 	vFeasibilityWithAllocatedQty  \n" +
                "	FROM 	vu_kit_allocation_detail  \n" +
                "	WHERE 	refSalesorderdetid = pRefSalesOrderDetID  \n" +
                "			AND assyID = IFNULL(pSubAssyID, pAssyID);  \n" +
                "  \n" +
                "	SELECT 		id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			vFeasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (kitReleaseQty - buildFeasibility) ELSE kitReleaseQty END) AS Shortage,  \n" +
                "			func_getTotalShortageLineForKit(pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), FALSE, calculatedKitQty) shortageLines,  \n" +
                "			calculatedKitQty,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(kitReturnDate,v_TimeZone,v_DateTimeDisplayFormat) kitReturnDate, \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  vFeasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - vFeasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "									CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE deletedAt IS NULL AND sDetID = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_detail`;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        (SELECT  \n" +
                "                (CASE  \n" +
                "                        WHEN  \n" +
                "                            (`k`.`connecterTypeID` = -(2))  \n" +
                "                        THEN  \n" +
                "                            IFNULL(MIN((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`))),  \n" +
                "                                    0)  \n" +
                "                        ELSE IFNULL(MIN((`k`.`allocatedunit` / `k`.`qpaWithDnp`)),  \n" +
                "                                0)  \n" +
                "                    END)  \n" +
                "            FROM  \n" +
                "                `vu_kit_allocation_detail` `k`  \n" +
                "            WHERE  \n" +
                "                ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "                    AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`, `a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((`a`.`kitStatus` = 'P')  \n" +
                "                    AND (`a`.`kitReleaseDate` <= STR_TO_DATE(FUN_CONVERTUTCDATETODATAKEYTIMEZONE(FUN_DATETIMETOUTCDATETIME()),  \n" +
                "                        '%m/%d/%Y')))  \n" +
                "            THEN  \n" +
                "                TRUE  \n" +
                "            ELSE FALSE  \n" +
                "        END) AS `rushJob`,  \n" +
                "        FUNC_MISMATCHITEMFORKIT(`a`.`salesOrderDetID`,  \n" +
                "                IFNULL(`a`.`subAssyID`, `a`.`refAssyId`),  \n" +
                "                'M',  \n" +
                "                NULL,  \n" +
                "                NULL) AS `mismatchItem`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
                "        FUN_GETWORKORDERSTATUSIDBYWOID(`a`.`woID`) AS `woStatusID`,  \n" +
                "        FUN_GETWORKORDERSUBSTATUSIDBYWOID(`a`.`woID`) AS `woSubStatusID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)))  \n" +
                "        END) AS `subAssyReleaseCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)  \n" +
                "                        AND (`sassy`.`kitStatus` = 'R')))  \n" +
                "        END) AS `subAssyReleasedCount`  \n" +
                "    FROM  \n" +
                "        `vu_kit_plans` `a`;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                             fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore  \n" +
                "		FROM	(  \n" +
                "			SELECT 		sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "                     fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.mismatchItem,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_updateKitMrpQty`;  \n" +
                "CREATE PROCEDURE `Sproc_updateKitMrpQty`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT,  \n" +
                "    IN pMrpQty INT,  \n" +
                "    IN pPOQty INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "    IN IsUpdateKitMrp TINYINT,  \n" +
                "    IN pFromPageName VARCHAR(250)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalPOQty INT;  \n" +
                "    DECLARE v_TotalKitQty INT;  \n" +
                "    DECLARE v_RemainPOQty INT;  \n" +
                "    DECLARE v_RemainKitQty INT;  \n" +
                "    DECLARE v_responseMessage VARCHAR(100);  \n" +
                "    DECLARE v_LatestPlanDetsilID INT;  \n" +
                "  \n" +
                "    SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R';  \n" +
                "  \n" +
                "    IF(IsUpdateKitMrp = 0) THEN  \n" +
                "		IF(IFNULL(v_TotalKitQty,0) > pKitQty) THEN  \n" +
                "			SET v_responseMessage =  'ReleasedKitQtyValidation';  \n" +
                "		ELSE  \n" +
                "			 # Get total PO Qty and Kit Qty of Kit Plan  \n" +
                "			SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL;  \n" +
                "			SET v_RemainPOQty =  IFNULL(pPOQty - IFNULL(v_TotalPOQty,0),0);  \n" +
                "			SET v_RemainKitQty =  IFNULL(pKitQty - IFNULL(v_TotalKitQty,0),0);  \n" +
                "  \n" +
                "			# Check TBD Qty mismatch validation for plan kit details  \n" +
                "			IF(v_RemainKitQty > 0|| v_RemainPOQty > 0) THEN  \n" +
                "				SET v_responseMessage =  'MisMatchTBDQty';  \n" +
                "			ELSE  \n" +
                "				SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "                SET v_responseMessage = 'SUCCESS';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "		SET v_responseMessage = 'SUCCESS';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(v_responseMessage = 'SUCCESS') THEN  \n" +
                "		IF(IsUpdateKitMrp = 1) THEN  \n" +
                "			# Update Mrp and Kit Qty of sales-order detail table  \n" +
                "			UPDATE salesorderdet  \n" +
                "			SET  	mrpQty = pMrpQty,  \n" +
                "					kitQty = pKitQty,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime() WHERE id = pSalesOrderDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE salesorder_plan_detailsmst  \n" +
                "		SET  	kitReleaseQty = kitReleaseQty + (pKitQty - IFNULL(v_TotalKitQty,0)),  \n" +
                "				poQty = poQty + (pPOQty - IFNULL(v_TotalPOQty,0)),  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID,  \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R'  \n" +
                "			ORDER BY plannKitNumber DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT v_responseMessage AS responseMessage, IFNULL(v_TotalKitQty,0) AS totalKitReleasedQty, IsUpdateKitMrp AS isUpdateKitMrp;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1129,'1.00','V1','Bug 36554: [Main Branch] When user changes the MRP or KIT qty after Kit Release is done then need to set validation for TBD Qty must be greater than 0. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1129:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "	SELECT  (  \n" +
                "			CASE  \n" +
                "				WHEN connecterTypeID = -2 THEN  \n" +
                "					IFNULL(MIN(allocatedpin/(qpaWithDnp * bomNumOfPosition)),0)  \n" +
                "				ELSE  \n" +
                "					IFNULL(MIN(allocatedunit/qpaWithDnp),0)  \n" +
                "			END  \n" +
                "		)  \n" +
                "	INTO 	vFeasibilityWithAllocatedQty  \n" +
                "	FROM 	vu_kit_allocation_detail  \n" +
                "	WHERE 	refSalesorderdetid = pRefSalesOrderDetID  \n" +
                "			AND assyID = IFNULL(pSubAssyID, pAssyID);  \n" +
                "  \n" +
                "	SELECT 		id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			vFeasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (kitReleaseQty - buildFeasibility) ELSE kitReleaseQty END) AS Shortage,  \n" +
                "			func_getTotalShortageLineForKit(pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), FALSE, calculatedKitQty) shortageLines,  \n" +
                "			calculatedKitQty,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(actualKitReleaseDate,v_TimeZone,v_DateTimeDisplayFormat) actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "           fun_ApplyCommonDateTimeFormatByParaValue(kitReturnDate,v_TimeZone,v_DateTimeDisplayFormat) kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  vFeasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - vFeasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "									CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE deletedAt IS NULL AND sDetID = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    SELECT 	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "	FROM 	salesorder_plan_detailsmst  \n" +
                "	WHERE 	deletedAt IS NULL  \n" +
                "			AND salesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND refAssyId = pAssyID AND subAssyID IS NULL;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1130,'1.00','V1','Bug 36554: [Main Branch] When user changes the MRP or KIT qty after Kit Release is done then need to set validation for TBD Qty must be greater than 0. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1130:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_updateKitMrpQty`;  \n" +
                "CREATE PROCEDURE `Sproc_updateKitMrpQty`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT,  \n" +
                "    IN pMrpQty INT,  \n" +
                "    IN pPOQty INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "    IN IsUpdateKitMrp TINYINT,  \n" +
                "    IN pFromPageName VARCHAR(250)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalPOQty INT;  \n" +
                "    DECLARE v_TotalKitQty INT;  \n" +
                "    DECLARE v_RemainPOQty INT;  \n" +
                "    DECLARE v_RemainKitQty INT;  \n" +
                "    DECLARE v_responseMessage VARCHAR(100);  \n" +
                "    DECLARE v_LatestPlanDetsilID INT;  \n" +
                "  \n" +
                "    SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R';  \n" +
                "  \n" +
                "    IF(IsUpdateKitMrp = 0) THEN  \n" +
                "		IF(IFNULL(v_TotalKitQty,0) > pKitQty) THEN  \n" +
                "			SET v_responseMessage =  'ReleasedKitQtyValidation';  \n" +
                "		ELSE  \n" +
                "			SET v_RemainPOQty =  IFNULL(pPOQty - IFNULL(v_TotalPOQty,0),0);  \n" +
                "			SET v_RemainKitQty =  IFNULL(pKitQty - IFNULL(v_TotalKitQty,0),0);  \n" +
                "  \n" +
                "			# Check TBD Qty mismatch validation for plan kit details  \n" +
                "			IF(v_RemainKitQty > 0|| v_RemainPOQty > 0) THEN  \n" +
                "				SET v_responseMessage =  'MisMatchTBDQty';  \n" +
                "			ELSE  \n" +
                "				SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "                SET v_responseMessage = 'SUCCESS';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "		SET v_responseMessage = 'SUCCESS';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(v_responseMessage = 'SUCCESS') THEN  \n" +
                "		IF(IsUpdateKitMrp = 1) THEN  \n" +
                "			# Update Mrp and Kit Qty of sales-order detail table  \n" +
                "			UPDATE salesorderdet  \n" +
                "			SET  	mrpQty = pMrpQty,  \n" +
                "					kitQty = pKitQty,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime() WHERE id = pSalesOrderDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE salesorder_plan_detailsmst  \n" +
                "		SET  	kitReleaseQty = kitReleaseQty + (pKitQty - IFNULL(v_TotalKitQty,0)),  \n" +
                "				poQty = poQty + (pPOQty - IFNULL(v_TotalPOQty,0)),  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID,  \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R'  \n" +
                "			ORDER BY plannKitNumber DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT v_responseMessage AS responseMessage, IFNULL(v_TotalKitQty,0) AS totalKitReleasedQty, IsUpdateKitMrp AS isUpdateKitMrp;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 15-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1131,'1.00','V1','Bug 36554: [Main Branch] When user changes the MRP or KIT qty after Kit Release is done then need to set validation for TBD Qty must be greater than 0. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1131:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021  *********************************** */
                "drop procedure if exists sproc_getLegacySalesOrderList;  \n" +
                "CREATE PROCEDURE `sproc_getLegacySalesOrderList`(  \n" +
                "	pPartId INT,  \n" +
                "    pSearchPO Varchar(2000),  \n" +
                "    pSalesOrderDetId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @temp_sproc_getLegacySalesOrderList = concat(\"SELECT so.poNumber SOPONumber,  \n" +
                "			so.salesOrderNumber soNumber,  \n" +
                "			so.poNumber,  \n" +
                "            so.customerId,  \n" +
                "            sod.id salesOrderDetID,  \n" +
                "            sod.partId,  \n" +
                "            sum(sod.originalPOQty) originalPOQty,  \n" +
                "            sum(sod.qty) POQty,  \n" +
                "            so.isLegacyPO,  \n" +
                "            so.id salesOrderID  \n" +
                "		FROM Salesordermst so  \n" +
                "		JOIN Salesorderdet sod on sod.refSalesOrderID = so.id and sod.isDeleted = 0  \n" +
                "		-- JOIN component co on co.id = sod.partId and co.isDeleted = 0  \n" +
                "		WHERE so.isDeleted = 0  \n" +
                "		AND so.status = 1  \n" +
                "		AND so.isLegacyPO = 1  \n" +
                "		AND sod.partId = \", pPartID ,  \n" +
                "	  \" AND (so.salesOrderNumber like '%\", pSearchPO ,\"%' or so.poNumber like '%\", pSearchPO ,\"%' )\"  \n" +
                "    );  \n" +
                "  -- SELECT  @temp_sproc_getLegacySalesOrderList;  \n" +
                "    IF(pSalesOrderDetId IS NOT NULL) THEN  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" and sod.id = \",pSalesOrderDetId);  \n" +
                "    END IF;  \n" +
                "    	SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" group by so.salesOrderNumber, so.poNumber,  \n" +
                "										so.customerId,sod.id,sod.partId,so.isLegacyPO,so.id\");  \n" +
                "    SET @temp_sproc_getLegacySalesOrderList = CONCAT(\" SELECT * FROM ( \",@temp_sproc_getLegacySalesOrderList,\" ) c\");  \n" +
                "    PREPARE query1 FROM @temp_sproc_getLegacySalesOrderList;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-09-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1132,'1.00','V1','sproc_getLegacySalesOrderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1132:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCustRefundSubStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getCustRefundSubStatusNameByID`(  \n" +
                "	pRefundSubStatusID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pRefundSubStatusID = 1) THEN 'Draft'  \n" +
                "		WHEN (pRefundSubStatusID = 2) THEN 'Published'  \n" +
                "		WHEN (pRefundSubStatusID = 3) THEN 'Ready to Print Check'  \n" +
                "		WHEN (pRefundSubStatusID = 4) THEN 'Refunded'  \n" +
                "			ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getIntToText` ;  \n" +
                "CREATE FUNCTION `fun_getIntToText`(  \n" +
                "	p_number INT) RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT '';  \n" +
                "  \n" +
                "	IF p_number = 0 THEN  \n" +
                "		SET result  = 'No';  \n" +
                "	ELSEIF p_number = 1 THEN  \n" +
                "		SET result  = 'Yes';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1133,'1.00','V1',' converted NVARCHAR to VARCHAR in function - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1133:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID, c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                             fun_ApplyCommonDateTimeFormatByParaValue(c.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID,c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "            FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem  \n" +
                "		FROM	(  \n" +
                "			SELECT 	sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_updateKitMrpQty`;  \n" +
                "CREATE PROCEDURE `Sproc_updateKitMrpQty`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT,  \n" +
                "    IN pMrpQty INT,  \n" +
                "    IN pPOQty INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleID INT,  \n" +
                "    IN IsUpdateKitMrp TINYINT,  \n" +
                "    IN pFromPageName VARCHAR(250)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TotalPOQty INT;  \n" +
                "    DECLARE v_TotalKitQty INT;  \n" +
                "    DECLARE v_RemainPOQty INT;  \n" +
                "    DECLARE v_RemainKitQty INT;  \n" +
                "    DECLARE v_responseMessage VARCHAR(100);  \n" +
                "    DECLARE v_LatestPlanDetsilID INT;  \n" +
                "  \n" +
                "    SELECT	SUM(poQty) totalPOQty, SUM(kitReleaseQty) totalKitQty  \n" +
                "					INTO v_TotalPOQty, v_TotalKitQty  \n" +
                "				FROM salesorder_plan_detailsmst  \n" +
                "				WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R';  \n" +
                "  \n" +
                "    IF(IsUpdateKitMrp = 0) THEN  \n" +
                "		IF(IFNULL(v_TotalKitQty,0) > pKitQty) THEN  \n" +
                "			SET v_responseMessage =  'ReleasedKitQtyValidation';  \n" +
                "		ELSE  \n" +
                "			SET v_RemainPOQty = IF(IFNULL(v_TotalPOQty,0), IFNULL(pPOQty - IFNULL(v_TotalPOQty,0),0), 0);   \n" +
                "			SET v_RemainKitQty = IF(IFNULL(v_TotalKitQty,0), IFNULL(pKitQty - IFNULL(v_TotalKitQty,0),0), 0);   \n" +
                "  \n" +
                "			# Check TBD Qty mismatch validation for plan kit details  \n" +
                "			IF(v_RemainKitQty > 0|| v_RemainPOQty > 0) THEN  \n" +
                "				SET v_responseMessage =  'MisMatchTBDQty';  \n" +
                "			ELSE  \n" +
                "				SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "                SET v_responseMessage = 'SUCCESS';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET IsUpdateKitMrp = IF(pFromPageName = 'Sales Order', FALSE, TRUE);  \n" +
                "		SET v_responseMessage = 'SUCCESS';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(v_responseMessage = 'SUCCESS') THEN  \n" +
                "		IF(IsUpdateKitMrp = 1) THEN  \n" +
                "			# Update Mrp and Kit Qty of sales-order detail table  \n" +
                "			UPDATE salesorderdet  \n" +
                "			SET  	mrpQty = pMrpQty,  \n" +
                "					kitQty = pKitQty,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime() WHERE id = pSalesOrderDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE salesorder_plan_detailsmst  \n" +
                "		SET  	kitReleaseQty = kitReleaseQty + (pKitQty - IFNULL(v_TotalKitQty,0)),  \n" +
                "				poQty = poQty + (pPOQty - IFNULL(v_TotalPOQty,0)),  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID,  \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE isDeleted = 0	AND salesOrderDetID = pSalesOrderDetID	AND refAssyId = pRefAssyId AND subAssyID IS NULL AND kitStatus = 'R'  \n" +
                "			ORDER BY plannKitNumber DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT v_responseMessage AS responseMessage, IFNULL(v_TotalKitQty,0) AS totalKitReleasedQty, IsUpdateKitMrp AS isUpdateKitMrp;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1134,'1.00','V1','Task 36918: Refactor SP, Functiona nad View changes given by DP for get kit release plan tunning - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1134:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 	DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID, c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MIN(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'P'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "					SELECT 		DISTINCT c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "							c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							FUNC_MISMATCHITEMFORKIT(c.salesOrderDetID, IFNULL(c.subAssyID,c.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		MAX(id) AS id,  \n" +
                "										salesOrderDetID,  \n" +
                "										refAssyId,  \n" +
                "										subAssyID,  \n" +
                "										MAX(kitReleaseDate) AS minKitReleaseDate  \n" +
                "								FROM 		vu_release_plan_detail  \n" +
                "								WHERE 		kitStatus = 'R'  \n" +
                "								GROUP BY      	salesOrderDetID, refAssyId, subAssyID  \n" +
                "							) AS b  \n" +
                "					INNER JOIN	vu_release_plan_detail AS c ON 	c.id = b.id  \n" +
                "								AND c.salesOrderDetID = b.salesOrderDetID  \n" +
                "								AND c.refAssyId = b.refAssyId  \n" +
                "								AND (CASE WHEN (b.subAssyID IS NULL) THEN c.subAssyID IS NULL ELSE c.subAssyID = b.subAssyID END)  \n" +
                "								AND c.kitReleaseDate = b.minKitReleaseDate  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	deletedAt IS NULL  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	deletedAt IS NULL  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "            FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem  \n" +
                "		FROM	(  \n" +
                "			SELECT 	sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(fun_DatetimetoUTCDateTime()), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,fun_DatetimetoUTCDateTime()), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND deletedAt IS NULL  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1135,'1.00','V1','Refactor SP, Functiona nad View changes given by DP for get kit release plan tunning - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1135:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "    DECLARE vKitQty DECIMAL(18,8);  \n" +
                "	DECLARE vCustomerId INT;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "    SELECT 		customerID  ,kitQty  \n" +
                "	INTO		vCustomerId ,vKitQty  \n" +
                "	FROM 		salesorderdet sd  \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
                "	(  \n" +
                "		mountingTypeID INT(11),  \n" +
                "		mountingType VARCHAR(50),  \n" +
                "		connecterTypeID INT(11),  \n" +
                "		connecterType VARCHAR(50),  \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
                "		shortageLine DECIMAL(18,8),  \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
                "		shortageForInputQty DECIMAL(18,8),  \n" +
                "		releasedQty DECIMAL(18,8),  \n" +
                "		pendingQty DECIMAL(18,8),  \n" +
                "		releasePercentage DECIMAL(18,8),  \n" +
                "		totalLine INT  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "			END  \n" +
                "		) AS kitQPAWithDNP,  \n" +
                "		kl.uomMismatchedStep,  \n" +
                "		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "					(  \n" +
                "						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
                "								THEN  MIN(c.mountingTypeID)  \n" +
                "							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
                "								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "							ELSE  -1  \n" +
                "						END  \n" +
                "					) mountingTypeID,  \n" +
                "					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
                "			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "			JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "			AND 		kal.partID =  pAssyID  \n" +
                "			AND 		kal.isDeleted = 0  \n" +
                "			AND			c.isDeleted = 0  \n" +
                "			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "	) AS kl  \n" +
                "	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
                "  \n" +
                "	/* Get available and allocated stock for selected assembly*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
                "                    AND ks.assyID =  pAssyID  \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;  \n" +
                "  \n" +
                "    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
                "	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
                "			count(1) TotalLine ,  \n" +
                "			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
                "			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
                "	FROM  \n" +
                "	(  \n" +
                "			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
                "					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
                "                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
                "                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
                "                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
                "							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAllocation,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
                "							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAvailableAndAllocatedStock,  \n" +
                "					(CASE  \n" +
                "						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN r.connecterTypeID = -2 THEN  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
                "									END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
                "									END)  \n" +
                "							END  \n" +
                "					END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
                "                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "								END  \n" +
                "							) AS kitQPAWithDNP,  \n" +
                "							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "					FROM 	(  \n" +
                "								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "											(  \n" +
                "												CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "														THEN  MIN(c.mountingTypeID)  \n" +
                "													WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "													ELSE  -1  \n" +
                "												END  \n" +
                "											) mountingTypeID,  \n" +
                "											IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "									JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "									LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "									AND 		kal.isDeleted = 0  \n" +
                "									AND			c.isDeleted = 0  \n" +
                "									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "							) AS kl  \n" +
                "							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
                "				) r  \n" +
                "				INNER JOIN (  \n" +
                "							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
                "									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  \n" +
                "                            ) b  \n" +
                "				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
                "		) a  \n" +
                "		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
                "  \n" +
                "	SELECT 	id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			b.kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
                "            c.shortageLines,  \n" +
                "			b.calculatedKitQty,  \n" +
                "			actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "			kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "				 					CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b           inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_detail` ;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        (SELECT  \n" +
                "                (CASE  \n" +
                "                        WHEN  \n" +
                "                            (`k`.`connecterTypeID` = -(2))  \n" +
                "                        THEN  \n" +
                "                            IFNULL(MIN((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`))),  \n" +
                "                                    0)  \n" +
                "                        ELSE IFNULL(MIN((`k`.`allocatedunit` / `k`.`qpaWithDnp`)),  \n" +
                "                                0)  \n" +
                "                    END)  \n" +
                "            FROM  \n" +
                "                `vu_kit_allocation_detail` `k`  \n" +
                "            WHERE  \n" +
                "                ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "                    AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`, `a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((`a`.`kitStatus` = 'P')  \n" +
                "                    AND (`a`.`kitReleaseDate` <= STR_TO_DATE(FUN_CONVERTUTCDATETODATAKEYTIMEZONE(FUN_DATETIMETOUTCDATETIME()),  \n" +
                "                        '%m/%d/%Y')))  \n" +
                "            THEN  \n" +
                "                TRUE  \n" +
                "            ELSE FALSE  \n" +
                "        END) AS `rushJob`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `w`.`woNumber` AS `workorderNumber`,  \n" +
                "        `w`.`woStatus` AS `woStatusID`,  \n" +
                "        `w`.`woSubStatus` AS `woSubStatusID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)))  \n" +
                "        END) AS `subAssyReleaseCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)  \n" +
                "                        AND (`sassy`.`kitStatus` = 'R')))  \n" +
                "        END) AS `subAssyReleasedCount`  \n" +
                "    FROM  \n" +
                "        (`vu_kit_plans` `a`  \n" +
                "        LEFT JOIN `workorder` `w` ON ((`a`.`woID` = `w`.`woID`)));  \n" +
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "DROP function IF EXISTS `func_MismatchItemForKit`;  \n" +
                "CREATE FUNCTION `func_MismatchItemForKit`(  \n" +
                "	pRefSalesOrderDetID INT,  \n" +
                "	pAssyID INT,  \n" +
                "	pParentWHType VARCHAR(10),  \n" +
                "	pWarehouseId INT,  \n" +
                "	pBinId INT  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE vMismatchCount INT;  \n" +
                "  \n" +
                "	SELECT (IF(a.isPermanentWH = 1, 1, 0) + IFNULL(SUM(a.unallocatedUMIDCount), 0) +  IFNULL(SUM(a.emptyBinCount), 0) + IFNULL(SUM(a.pendingUMIDBinCount), 0))  \n" +
                "	INTO 	vMismatchCount  \n" +
                "	FROM 	(  \n" +
                "			SELECT 	DISTINCT 	w.parentWHID,  \n" +
                "						w.parentWHType,  \n" +
                "						pw.name parentWarehouseName,  \n" +
                "						b.warehouseID,  \n" +
                "						w.name warehouseName,  \n" +
                "						w.isPermanentWH,  \n" +
                "						w.warehouseType,  \n" +
                "						w.allMovableBin,  \n" +
                "						(  \n" +
                "							SELECT 		COUNT(1)  \n" +
                "							FROM 		component_sid_stock css2  \n" +
                "							INNER JOIN 	binmst b1 ON css2.binid = b1.id AND b1.isdeleted = 0   and css2.isinstk = 1  \n" +
                "							WHERE NOT 	EXISTS (SELECT 1 FROM kit_allocation k2 WHERE   k2.refUIDId = css2.id AND k2.status = 'A' )  \n" +
                "										AND css2.isdeleted = 0  \n" +
                "										AND b1.WarehouseID = w.id  \n" +
                "										AND  css2.binid = IFNULL(pBinId, css2.binid)  \n" +
                "						) unallocatedUMIDCount,  \n" +
                "						(  \n" +
                "							SELECT 	COUNT(1) FROM binmst b1  \n" +
                "							WHERE  	b1.warehouseid = w.ID  AND b1.isactive = 1 AND b1.isdeleted = 0 AND b1.isPermanentBin = 0  \n" +
                "									AND NOT EXISTS (SELECT 1 FROM component_sid_stock css1 WHERE css1.binid = b1.id AND css1.isdeleted = 0)  \n" +
                "									AND NOT EXISTS (SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = b1.id AND BalanceQty > 0)  \n" +
                "									AND b1.id = IFNULL(pBinId, b1.id)  \n" +
                "						) emptyBinCount,  \n" +
                "						(  \n" +
                "							SELECT 	COUNT(1)  \n" +
                "							FROM 	binmst b1  \n" +
                "							WHERE  	b1.warehouseid = w.ID  \n" +
                "									AND b1.isactive = 1  \n" +
                "									AND b1.isdeleted = 0  \n" +
                "									AND b1.isPermanentBin = 0  \n" +
                "									AND EXISTS (SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = b1.id AND BalanceQty > 0)  \n" +
                "									AND b1.id = IFNULL(pBinId, b1.id)  \n" +
                "						) pendingUMIDBinCount  \n" +
                "			FROM kit_allocation k  \n" +
                "			INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "			INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "			INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "			INNER JOIN warehousemst pw ON pw.id = w.parentWHID  \n" +
                "			WHERE 	k.status = 'A'  \n" +
                "					AND 	k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "					AND	k.assyID = pAssyID  \n" +
                "					AND     pw.parentWHType = IFNULL(pParentWHType, pw.parentWHType)  \n" +
                "					AND	csd.isDeleted = 0  \n" +
                "					AND	b.isDeleted = 0  \n" +
                "					AND	w.isDeleted = 0  \n" +
                "					AND 	b.warehouseID = IFNULL(pWarehouseId, b.warehouseID)  \n" +
                "			ORDER BY w.name  \n" +
                "		)	AS a  \n" +
                "	WHERE 	a.isPermanentWH = 1  \n" +
                "			OR (a.unallocatedUMIDCount + a.emptyBinCount+ a.pendingUMIDBinCount) > 0;  \n" +
                "  \n" +
                "    RETURN vMismatchCount;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-09-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1136,'1.00','V1','Refactor SP, Functiona nad View changes given by DP for get kit release plan tunning - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1136:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId \",v_DynamicColumns,\"  \n" +
                "		FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-09-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1137,'1.00','V1','Sproc_GetSalesorderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1137:
            /* **************************** New Script -> 17-09-2021  *********************************** */
            allDbChangesArray.push(
                /* **************************** New Script -> 17-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "   IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				(SELECT SUM(css.orgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0  \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1138,'1.00','V1',' Bug 36965: [Main Branch] In UMID created column need to show the Initial Counts instead of Current Count - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1138:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetWorkorderEmployeeDetailsByEmpCode;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(  \n" +
                "    IN pcodeDigest VARCHAR(1000),  \n" +
                "    IN pisUserAdmin INT)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;  \n" +
                "DECLARE whereClause2 VARCHAR(255) ;  \n" +
                "DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "DECLARE vTimeZone VARCHAR(50);  \n" +
                "SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat ;  \n" +
                "	/************************ Save Employee Details in Temp Table ************************************/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (  \n" +
                "			employeeID INT,		firstName VARCHAR(255),		lastName VARCHAR(255),  \n" +
                "			profileImg VARCHAR(255),deptName VARCHAR(255),		titleName VARCHAR(255)  \n" +
                "	);  \n" +
                "	INSERT INTO temp_sproc_employeedetails  \n" +
                "	SELECT 	emp.id, 	emp.firstname, emp.lastname,  \n" +
                "		emp.profileimg, dep.deptName,  gc.gencCategoryName  \n" +
                "	FROM employees emp  \n" +
                "		LEFT JOIN employee_department empdep ON emp.id = empdep.employeeID AND (empdep.isDeleted=0 AND empdep.isdefault = 1)  \n" +
                "		LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.isDeleted=0  -- ?  \n" +
                "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.isDeleted=0)  -- ?  \n" +
                "	WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1 AND emp.isDeleted=0;  \n" +
                "	/************************ Create Temp Table for Workorder Details ************************************/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (  \n" +
                "		woID INT,			woNumber VARCHAR(255),			woVersion VARCHAR(255),  \n" +
                "		buildQty INT,			woStatus INT,			isClusterApplied VARCHAR(255),  \n" +
                "		isStopWorkorder INT,		createdAt VARCHAR(255),  \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(50),  \n" +
                "		nickName VARCHAR(50),		liveVersion VARCHAR(100),		imageURL VARCHAR(1000),  \n" +
                "		documentPath VARCHAR(500),  	isCustom INT,  \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			woAllStandardsWithClass VARCHAR(5000),  \n" +
                "		poQty INT,			poNumber VARCHAR(1000), 		partID INT,  \n" +
                "		isAssigned INT, 		woSubStatus INT,			totalPOQty INT,  \n" +
                "		soPOQty VARCHAR(1000),		totalMRPQty INT,			soMRPQty VARCHAR(1000),  \n" +
                "		salesOrderNumber VARCHAR(1000),  \n" +
                "		lineID VARCHAR(1000),		salesOrderMstIDs VARCHAR(1000),		SOPOQtyValues VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/************************ save all workorder details in temp table for further use ************************************/  \n" +
                "	INSERT INTO temp_sproc_workorderdetails  \n" +
                "	SELECT 	wo.woID,		wo.woNumber,	 									wo.woVersion,  \n" +
                "		wo.buildQty,		wo.woStatus,										wo.isClusterApplied,  \n" +
                "		wo.isStopWorkorder,	fun_ApplyCommonDateTimeFormatByParaValue(wo.createdAt,vTimeZone,vDateTimeDisplayFormat),  \n" +
                "		c.mfgPN, 		c.PIDCode, 										c.rev,  \n" +
                "		c.nickName,		c.liveVersion,										c.imageURL,  \n" +
                "		c.documentPath,  	c.isCustom,  \n" +
                "		rohs.name, 		rohs.rohsIcon,										NULL,  \n" +
                "		NULL,                   NULL,											wo.partID,  \n" +
                "		(SELECT COUNT(*) FROM workorder_operation_employee woemp WHERE woemp.woID = wo.woID AND woemp.isDeleted=0  \n" +
                "			AND woemp.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)),  \n" +
                "					wo.woSubStatus  ,									vusalesorderdet.totalPOQty,  \n" +
                "		vusalesorderdet.POQtyValues soPOQty, vusalesorderdet.totalMRPQty,						vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "		-- CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,    vusalesorderdet.salesOrderMstIDs, 							vusalesorderdet.SOPOQtyValues  \n" +
                "	FROM workorder wo  \n" +
                "	INNER JOIN component c ON wo.partID = c.id  \n" +
                "	INNER JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id  \n" +
                "	  LEFT JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "	  LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "	WHERE c.isDeleted=0 AND rohs.isDeleted=0 AND wo.isDeleted=0 AND wo.woStatus IN (1, 6);    -- 1 - Published, --2 - Under Terminate  \n" +
                "  \n" +
                "  \n" +
                "	/************************ 1. Get all employee details ************************************/  \n" +
                "	SELECT * FROM temp_sproc_employeedetails;  \n" +
                "	/************************ 1. Get all employee details ************************************/  \n" +
                "  \n" +
                "	/************************ save all salesorder details in temp table for further use ************************************/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (  \n" +
                "			poQty INT,		refPONumber VARCHAR(10000), 		woID INT  \n" +
                "	);  \n" +
                "	INSERT INTO temp_sproc_workordersalesorderdetails  \n" +
                "	SELECT  \n" +
                "		SUM(poQty),  \n" +
                "		GROUP_CONCAT(fun_getPONumber(salesOrderDetailID)), -- GROUP_CONCAT(refPONumber),  \n" +
                "		wosd.woID  \n" +
                "	FROM workorder_salesorder_details wosd  \n" +
                "	WHERE wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)  \n" +
                "	AND wosd.isDeleted=0  \n" +
                "	GROUP BY wosd.woID;  \n" +
                "	/************************ save all certificate details in temp table for further use ************************************/  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (  \n" +
                "		woAllStandardsWithClass VARCHAR(10000),		woID INT  \n" +
                "	);  \n" +
                "  \n" +
                "	INSERT INTO temp_sproc_certificatedetails  \n" +
                "	SELECT GROUP_CONCAT(cs.fullName ,' ' ,  \n" +
                "			CASE WHEN wc.classIDs IS NULL THEN ''  \n" +
                "			ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))  \n" +
                "				FROM standard_class WHERE classID = wc.classIDs)  \n" +
                "			END  \n" +
                "			ORDER BY cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@') AS woAllStandardsWithClass,  \n" +
                "		tempWO.woID  \n" +
                "	FROM temp_sproc_workorderdetails tempWO  \n" +
                "	INNER JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.isDeleted=0  \n" +
                "	INNER JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.isDeleted=0  \n" +
                "	GROUP BY tempWO.woID;  \n" +
                "  \n" +
                "	/************************ 2.1 Update details in workorder details from certificate tables ************************************/  \n" +
                "	UPDATE temp_sproc_workorderdetails tempWO1,  \n" +
                "	(SELECT * FROM temp_sproc_certificatedetails) AS result  \n" +
                "	SET tempWO1.woAllStandardsWithClass = result.woAllStandardsWithClass  \n" +
                "	WHERE tempWO1.woID = result.woID;  \n" +
                "	/************************ 2.2 Update details in workorder details from sales order tables ************************************/  \n" +
                "	UPDATE temp_sproc_workorderdetails tempWO1,  \n" +
                "	(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1  \n" +
                "	SET tempWO1.poQty = result1.poQty,  \n" +
                "	tempWO1.poNumber = result1.refPONumber  \n" +
                "	WHERE tempWO1.woID = result1.woID;  \n" +
                "	/************************ 2. Get all workroder list ************************************/  \n" +
                "	/************************ If user is not admin than whereclause ************************************/  \n" +
                "	IF pisUserAdmin = 1 THEN  \n" +
                "		SET whereClause1 = '';  \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = ' AND isAssigned > 0';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"SELECT * FROM temp_sproc_workorderdetails where 1=1 \", whereClause1);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	/************************ 2. Get all workroder list ************************************/  \n" +
                "	/************************ 3. Get all active operation list ************************************/  \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			wte.woTransinoutID,  \n" +
                "			wte.woID,  \n" +
                "			wte.woOPID,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(wte.checkinTime,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') checkinTime,  \n" +
                "			wte.isPaused,  \n" +
                "			wtep.woTransemppausedID,  \n" +
                "			fun_getwoAvailableRackDetails(wte.woOPID,wte.woID) totalAvailable,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(wtep.pausedTime,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') pausedTime,  \n" +
                "			woop.opNumber,  \n" +
                "			woop.opName,  \n" +
                "			woop.opStatus,  \n" +
                "			woop.opVersion,  \n" +
                "			woop.isStopOperation,  \n" +
                "			woop.isTeamOperation  ,  \n" +
                "            (SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))  \n" +
                "							FROM standard_class WHERE classID = wc.classIDs) END  \n" +
                "							ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')  \n" +
                "				   FROM `workorder_certification` wc  \n" +
                "					   JOIN certificate_standards cs ON  wc.certificateStandardID = cs.certificateStandardID  \n" +
                "				   WHERE wc.deletedAt IS NULL AND wc.woID = `woop`.`woID`) AS `wocerti`  \n" +
                "		FROM workorder_trans_empinout wte  \n" +
                "		INNER JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.isDeleted=0  \n" +
                "		LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID AND wtep.resumeTime IS NULL AND wtep.isDeleted=0  \n" +
                "		WHERE wte.isDeleted=0 AND wte.checkoutTime IS NULL  \n" +
                "	 \", whereClause2, \" GROUP BY  \n" +
                "		wte.woTransinoutID,  \n" +
                "		wte.woID,  \n" +
                "		wte.woOPID,  \n" +
                "		wte.isPaused,  \n" +
                "		wtep.woTransemppausedID,  \n" +
                "		woop.opNumber,  \n" +
                "		woop.opName,  \n" +
                "		woop.opStatus,  \n" +
                "		woop.opVersion,  \n" +
                "		woop.isStopOperation,  \n" +
                "		woop.isTeamOperation\");  \n" +
                "	 /************************ 3. Get all active operation list ************************************/  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-09-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1139,'1.00','V1','Sproc_GetWorkorderEmployeeDetailsByEmpCode - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1139:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-09-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentDetForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(  \n" +
                "	IN pPaymentMstID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(5),  \n" +
                "	IN pFromdate DATE,  \n" +
                "	IN pTodate DATE,  \n" +
                "	IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	IF (pRequiredCount) THEN  \n" +
                "		SELECT COUNT(1) totalCount  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		WHERE psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "		AND psip.isDeleted = 0;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT  \n" +
                "			psip.id,  \n" +
                "			psip.mfgcodeID, cps1.id AS custCreditMemoID , cps1.creditMemoNumber ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cps1.creditMemoDate, v_TimeZone, v_DateTimeDisplayFormat) AS creditMemoDate ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "			psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "			fun_getIntToText(psip.isPaymentVoided) AS isPaymentVoidedConvertedValue,  \n" +
                "			psip.voidPaymentReason,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.refVoidedPaymentNumber,  \n" +
                "			psip.refVoidedPaymentId,  \n" +
                "			psip.paymentNumber,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "			psip.paymentDate,  \n" +
                "			psip.accountReference,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "			invPayDetTemp.invoiceNumberList,  \n" +
                "			psip.remark  , psip.depositBatchNumber,  \n" +
                "			psip.isDeleted,  \n" +
                "			(CASE WHEN psip.refPaymentMode IN ('WOFF','CR') THEN (SELECT modeName FROM `generic_transmode_mst` WHERE id = psip.refGencTransModeID)  \n" +
                "				ELSE NULL END) transactionModeName,  \n" +
                "			payRefundDetTemp.paymentNumListAgainstRefund,  \n" +
                "			cmRefundDetTemp.CMNumListAgainstRefund  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN customer_packingslip cps1 ON cps1.id = refCustCreditMemoID AND cps1.transType = 'C' AND cps1.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') AS invoiceNumberList  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				      GROUP BY psipd.refPayementid) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber SEPARATOR ', ') AS paymentNumListAgainstRefund  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,  GROUP_CONCAT(cps.creditMemoNumber SEPARATOR ', ') AS CMNumListAgainstRefund  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)  \n" +
                "            AND (CASE WHEN pRefPaymentMode IS NULL THEN (psip.refPaymentMode IN ('R','CA','WOFF','CR'))  \n" +
                "			ELSE psip.refPaymentMode = pRefPaymentMode END)  \n" +
                "            AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "					OR (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1140,'1.00','V1',' Sproc_GetCustomerPaymentDetForElastic - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1140:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('workorder_serialmst', 'Work Order Serial');  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_genericcategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as  \n" +
                "  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_workstation_groups\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentTermsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"document\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND fileGroupBy IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"shipping_method\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"payable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Payable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"receivable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Receivable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"inspection_mst\" else \"\" end as msg FROM inspection_mst WHERE isDeleted=0 AND partRequirementCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE isDeleted=0 AND barcodeSeparatorID IN(',IDs,') LIMIT 1)  \n" +
                "	     ');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempGenericCategory t)=0 THEN  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			  SELECT * FROM tempGenericCategory WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempGenericCategory t;  \n" +
                "		END IF;  \n" +
                "ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "                                   FROM tempGenericCategory t1  \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "                                    ORDER BY t2.display_page_name;  \n" +
                "END IF;  \n" +
                "    DROP TEMPORARY TABLE tempGenericCategory;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1141,'1.00','V1','Resolved Delete case - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1141:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "ALTER VIEW `vu_workorder_summary_stk` AS  \n" +
                "SELECT `a`.`woid` AS `woid`,`a`.`woNumber` AS `woNumber`,`a`.`woVersion` AS `woVersion`,`a`.`partID` AS `partID`,`a`.`buildQty` AS `buildQty`,`a`.`customerID` AS `customerID`,IFNULL(SUM(`a`.`buildOverageQty`),0) AS `buildOverageQty`,IFNULL(SUM(`a`.`POQty`),0) AS `poQty`,IFNULL(SUM(`a`.`initialStockPoQty`),0) AS `initialStockPoQty`,IFNULL(SUM(`a`.`ShippedQty`),0) AS `shippedQty`,IFNULL(SUM(`a`.`ScrapQty`),0) AS `scrapQty`,IFNULL(SUM(`a`.`readytoShipQty`),0) - IFNULL(SUM(`a`.`stockAdjustmentQty`),0) AS `readytoShipQty`,IFNULL(SUM(`a`.`readytoShipQty`),0) AS `readytoShipQtyWithStockAdjustment`,IFNULL(SUM(`a`.`stockAdjustmentQty`),0) AS `stockAdjustmentQty`,IFNULL(SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`),0) AS `stockAdjustmentQtyWithFinalAdjustment`,SUM(`a`.`wipQty`) AS `wipQty`,SUM(`a`.`firstOPtotalQty`) AS `firstOPtotalQty` FROM (SELECT `wo`.`woID` AS `woid`,`wo`.`woNumber` AS `woNumber`,`wo`.`woVersion` AS `woVersion`,`wo`.`partID` AS `partID`,`wo`.`buildQty` AS `buildQty`,`wo`.`customerID` AS `customerID`,SUM(`wo`.`excessQty`) AS `buildOverageQty`,IFNULL(SUM(`wsd`.`Poqty`),0) AS `POQty`,0 AS `initialStockPoQty`,IFNULL(SUM(`scrp`.`ScrapQty`),0) AS `ScrapQty`,IFNULL(SUM(`sh`.`shippedqty`),0) AS `ShippedQty`,(IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0) - IFNULL(SUM(`sh`.`shippedqty`),0)) AS `readytoShipQty`,IFNULL(SUM(`res`.`openingstock`),0) AS `stockAdjustmentQty`,IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0) AS `stockAdjustmentQtyWithFinalAdjustment`,IFNULL(SUM(`fpq`.`firstOPtotalQty`),0) AS `firstOPtotalQty`,(CASE WHEN ((IFNULL(`wo`.`buildQty`,0) - (IFNULL(SUM(`scrp`.`ScrapQty`),0) + IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0))) < 0) THEN 0 ELSE (IFNULL(`wo`.`buildQty`,0) - (IFNULL(SUM(`scrp`.`ScrapQty`),0) + IFNULL(SUM(`res`.`stockAdjustmentQtyWithFinalAdjustment`),0))) END) AS `wipQty` FROM (((((`workorder` `wo` LEFT JOIN (SELECT `workorder_salesorder_details`.`woID` AS `woid`,SUM(`workorder_salesorder_details`.`poQty`) AS `Poqty` FROM `workorder_salesorder_details` WHERE (`workorder_salesorder_details`.`isDeleted` = 0) GROUP BY `workorder_salesorder_details`.`woID`) `wsd` ON((`wsd`.`woid` = `wo`.`woID`))) LEFT JOIN (SELECT `wt`.`woID` AS `woid`,SUM(`wp`.`scrapQty`) AS `ScrapQty` FROM (`workorder_trans` `wt` JOIN `workorder_trans_production` `wp` ON((`wt`.`woTransID` = `wp`.`woTransID`))) WHERE ((`wt`.`isDeleted` = 0) AND (`wp`.`isDeleted` = 0)) GROUP BY `wt`.`woID`) `scrp` ON((`scrp`.`woid` = `wo`.`woID`))) LEFT JOIN (SELECT `shippedassembly`.`workorderID` AS `workorderid`,SUM(`shippedassembly`.`shippedqty`) AS `shippedqty` FROM `shippedassembly` WHERE (`shippedassembly`.`isDeleted` = 0) GROUP BY `shippedassembly`.`workorderID`) `sh` ON((`sh`.`workorderid` = `wo`.`woID`))) LEFT JOIN (SELECT `astock`.`woID` AS `woid`,IFNULL(SUM((CASE WHEN (`astock`.`type` = 'AS') THEN `astock`.`openingStock` ELSE 0 END)),0) AS `openingstock`,IFNULL(SUM(`astock`.`openingStock`),0) AS `stockAdjustmentQtyWithFinalAdjustment` FROM `assemblystock` `astock` WHERE ((`astock`.`isDeleted` = 0) AND (`astock`.`woID` IS NOT NULL)) GROUP BY `astock`.`woID`,`astock`.`woNumber`,`astock`.`partID`) `res` ON((`res`.`woid` = `wo`.`woID`))) LEFT JOIN (SELECT `workorder_trans`.`woID` AS `woID`,SUM(`workorder_trans_production`.`totalQty`) AS `firstOPtotalQty` FROM (`workorder_trans_production` JOIN `workorder_trans` ON(((`workorder_trans_production`.`woTransID` = `workorder_trans`.`woTransID`) AND `workorder_trans`.`opID` IN (SELECT `FUN_GETFIRSTOPERATIONID`(`workorder_trans`.`woID`))))) WHERE ((`workorder_trans_production`.`isDeleted` = 0) AND (`workorder_trans`.`isDeleted` = 0)) GROUP BY `workorder_trans`.`woID`) `fpq` ON((`fpq`.`woID` = `wo`.`woID`))) WHERE (`wo`.`isDeleted` = 0) GROUP BY `wo`.`woID`,`wo`.`woNumber`,`wo`.`woVersion`,`wo`.`partID`,`wo`.`buildQty`,`wo`.`customerID` UNION ALL SELECT `a`.`woid` AS `woid`,`a`.`woNumber` AS `woNumber`,NULL AS `woVersion`,`a`.`partID` AS `partID`,0 AS `buildQty`,NULL AS `customerID`,0 AS `buildOverageQty`,0 AS `POQty`,MAX(`a`.`initialStockPoQty`) AS `initialStockPoQty`,0 AS `ScrapQty`,SUM(`a`.`ShippedQty`) AS `ShippedQty`,(SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`) - SUM(`a`.`ShippedQty`)) AS `readytoShipQty`,SUM(`a`.`stockAdjustmentQty`) AS `stockAdjustmentQty`,SUM(`a`.`stockAdjustmentQtyWithFinalAdjustment`) AS `stockAdjustmentQtyWithFinalAdjustment`,0 AS `firstOPtotalQty`,0 AS `wipQty` FROM (SELECT `sh`.`workorderID` AS `woid`,`sh`.`woNumber` AS `woNumber`,`sh`.`partID` AS `partID`,0 AS `initialStockPoQty`,SUM(`sh`.`shippedqty`) AS `ShippedQty`,0 AS `readytoShipQty`,0 AS `stockAdjustmentQty`,0 AS `stockAdjustmentQtyWithFinalAdjustment` FROM `shippedassembly` `sh` WHERE ((`sh`.`isDeleted` = 0) AND (`sh`.`workorderID` IS NULL) AND (`sh`.`woNumber` IS NOT NULL)) GROUP BY `sh`.`woNumber`,`sh`.`partID` UNION ALL SELECT `astock`.`woID` AS `woid`,`astock`.`woNumber` AS `woNumber`,`astock`.`partID` AS `partID`,SUM(`astock`.`poQty`) AS `initialStockPoQty`,0 AS `ShippedQty`,0 AS `readytoShipQty`,IFNULL(SUM((CASE WHEN (`astock`.`type` = 'AS') THEN `astock`.`openingStock` ELSE 0 END)),0) AS `stockAdjustmentQty`,IFNULL(SUM(`astock`.`openingStock`),0) AS `stockAdjustmentQtyWithFinalAdjustment` FROM `assemblystock` `astock` WHERE ((`astock`.`isDeleted` = 0) AND (`astock`.`woID` IS NULL) AND (`astock`.`woNumber` IS NOT NULL)) GROUP BY `astock`.`woNumber`,`astock`.`partID`) `a` GROUP BY `a`.`woNumber`,`a`.`partID`) `a` GROUP BY `a`.`woid`,`a`.`woNumber`,`a`.`woVersion`,`a`.`partID`,`a`.`buildQty`,`a`.`customerID`;  \n" +
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblySummaryDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblySummaryDetails`(  \n" +
                "	IN pPartID INT)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "     SELECT  \n" +
                "	partID,  \n" +
                "	SUM(readytoShipQty) readytoShipQty,  \n" +
                "	SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "	SUM(wipQty) wipQty,  \n" +
                "	SUM(excessFreetoUseQty) excessFreetoUseQty,  \n" +
                "	SUM(poQty) poQty,  \n" +
                "	SUM(shippedQty) shippedQty,  \n" +
                "	SUM(backOrderQty) backOrderQty  \n" +
                "	FROM(  \n" +
                "		SELECT  \n" +
                "			ka.partId partID,  \n" +
                "			0 readytoShipQty,  \n" +
                "			0 stockAdjustmentQty,  \n" +
                "			0 wipQty,  \n" +
                "			0 excessFreetoUseQty,  \n" +
                "			SUM(vu_ssr.`PO Qty`) poQty,  \n" +
                "			SUM(vu_ssr.`Shipped Qty`) shippedQty,  \n" +
                "			SUM((CASE WHEN (ka.perAssyBuildQty IS NULL OR ka.perAssyBuildQty = 0) THEN  \n" +
                "				(vu_ssr.`PO Qty` - vu_ssr.`Shipped Qty`)  \n" +
                "			ELSE  \n" +
                "				((ka.perAssyBuildQty * vu_ssr.`PO Qty`) - vu_ssr.`Shipped Qty`)  \n" +
                "			END)) AS backOrderQty,  \n" +
                "			ka.perAssyBuildQty AS qpa  \n" +
                "		 FROM vu_salesorder_shipped_report vu_ssr  \n" +
                "		 INNER JOIN kit_allocation_assy_detail ka  \n" +
                "			ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId` AND ka.isDeleted=0  \n" +
                "		WHERE ka.partID = pPartID  \n" +
                "		GROUP BY ka.partID  \n" +
                "		UNION ALL  \n" +
                "		SELECT  \n" +
                "			partID,  \n" +
                "			SUM(readytoShipQty) readytoShipQty,  \n" +
                "			SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "			SUM(wipQty) wipQty,  \n" +
                "			SUM((CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty  \n" +
                "				ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END)) AS excessFreetoUseQty,  \n" +
                "			0 poQty,  \n" +
                "			0 shippedQty,  \n" +
                "			0 backOrderQty,  \n" +
                "			1 qpa  \n" +
                "		FROM vu_workorder_summary_stk vu_wss  \n" +
                "		WHERE partID = pPartID  \n" +
                "		GROUP BY partID) a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1142,'1.00','V1','vu_workorder_summary_stk changes (fixed performance issue) - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1142:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_checkDelete_salesordermst;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_salesordermst`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	-- delete sales order master if reference ID is not null  \n" +
                "	-- refernece ID is equal to salesOrderDetID  \n" +
                "	IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_salesorder_details\" else \"\" end as msg FROM workorder_salesorder_details WHERE deletedAt IS NULL AND salesOrderDetailID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE type=\"OS\" and isDeleted = 0 AND refSalesOrderDetID IN(',IDs,') LIMIT 1)  \n" +
                "			  UNION ALL  \n" +
                "			 (select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg FROM salesorderdet where deletedAt IS NULL AND refSODetID IN(',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempSalesOrderMst t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						ka.updatedBy = ', deletedBy ,',  \n" +
                "						ka.updateByRoleId = ', pRoleID ,',  \n" +
                "						ka.`status` = \"D\",  \n" +
                "						ka.remark = \"Auto Deallocated from ReCalculation\"  \n" +
                "					WHERE 	ka.refSalesOrderDetID IN (', IDs ,')  \n" +
                "							AND ka.`status` = \"A\"  \n" +
                "				');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('  \n" +
                "					UPDATE 	salesorder_plan_detailsmst  \n" +
                "					SET 	isDeleted = ', 1 ,',  \n" +
                "						deletedAt = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						deletedBy = ', deletedBy ,'  \n" +
                "					WHERE 	salesOrderDetID IN (', IDs ,')  \n" +
                "							AND isDeleted = 0  \n" +
                "				');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update salesshippingmst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where sDetID  IN(',IDs,') and deletedAt is NULL');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update salesorderdet set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (id IN(',IDs,')) and deletedAt is NULL');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* [S] - Add Time line log for delete sales order mst */  \n" +
                "				SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "					FROM salesordermst  \n" +
                "				WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "				SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "				SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "				/* [E] - Add Time line log for delete sales order mst */  \n" +
                "  \n" +
                "				SELECT * FROM tempSalesOrderMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSalesOrderMst t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempSalesOrderMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempSalesOrderMst;  \n" +
                "	ELSE  \n" +
                "		/* [S] - Add Time line log for delete sales order mst */  \n" +
                "		SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "			FROM salesordermst  \n" +
                "		WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "		SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\"' deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "		/* [E] - Add Time line log for delete sales order mst */  \n" +
                "		-- Added for sales order master record delete  \n" +
                "		SET @SQl5 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "		PREPARE stmt5 FROM @SQl5;  \n" +
                "		EXECUTE stmt5;  \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM salesordermst WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1143,'1.00','V1','Sproc_checkDelete_salesordermst - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1143:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetActiveSalesOrderDetailList;  \n" +
                "CREATE PROCEDURE `Sproc_GetActiveSalesOrderDetailList`(  \n" +
                "	IN pPartID INT(11),  \n" +
                "	IN pWOID INT(11),  \n" +
                "	IN pCustomerID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE whereClause VARCHAR(500);  \n" +
                "	SET whereClause = \"AND co.category = 3 AND co.deletedAt IS NULL\";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1) > 0 THEN  \n" +
                "	 	SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (co.mfgcodeID in ( select buyTo from acquireCustomers) or co.mfgcodeID in(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(sm.customerID=\",pCustomerID,\" or sm.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT  	sd.id id,  \n" +
                "				sd.refSalesOrderID refSalesOrderID,  \n" +
                "				sd.qty qty,  \n" +
                "				sd.price price,  \n" +
                "				sd.mrpQty mrpQty,  \n" +
                "				sd.shippingQty shippingQty,  \n" +
                "				sd.remark remark,  \n" +
                "				sd.isHotJob isHotJob,  \n" +
                "				sd.partID partID,  \n" +
                "				sd.lineID lineID,  \n" +
                "				sd.isCancle isCancle,  \n" +
                "				sm.salesOrderNumber salesOrderNumber,  \n" +
                "				sm.poNumber poNumber,  \n" +
                "				sm.poDate poDate,  \n" +
                "				sm.customerID customerID,  \n" +
                "				sm.revision revision,  \n" +
                "				sm.status `status`,  \n" +
                "				sm.soDate soDate,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName` ,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	sd.partID = \",pPartID,\" THEN  \n" +
                "								1  \n" +
                "						ELSE  \n" +
                "								2  \n" +
                "					END  \n" +
                "				) AS AssyType,  \n" +
                "				(  \n" +
                "					SELECT perAssyBuildQty  \n" +
                "					FROM 	kit_allocation_assy_detail  \n" +
                "					WHERE 	refSalesorderdetid = sd.id  \n" +
                "							AND partId = \",pPartID,\"  \n" +
                "							AND isDeleted = 0  \n" +
                "				) AS qpaa,  \n" +
                "				(  \n" +
                "					CASE 	WHEN 	\",IFNULL(pWOID,0),\" = 0 THEN 0  \n" +
                "						ELSE 	(  \n" +
                "								SELECT 	IFNULL(SUM(wsd.poQty),0) - IFNULL(SUM(wsd.scrapQty),0)  \n" +
                "								FROM 	workorder_salesorder_details wsd  \n" +
                "								WHERE 	wsd.salesOrderDetailID = sd.id  \n" +
                "										AND wsd.parentPartID = sd.partID  \n" +
                "										AND wsd.deletedAt IS NULL  \n" +
                "										AND IFNULL(wsd.isDeleted,0)= 0  \n" +
                "										AND wsd.woID <> \",IFNULL(pWOID,0),\"  \n" +
                "							)  \n" +
                "					END  \n" +
                "				) AS totalAssignedQty , astk.initialStockCount  \n" +
                "		FROM 		salesorderdet sd  \n" +
                "		LEFT JOIN 	salesordermst sm ON (sm.id = sd.refSalesOrderID AND sm.deletedAt IS NULL AND IFNULL(sm.isDeleted,0)=0)  \n" +
                "		LEFT JOIN 	component co ON sd.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "		LEFT JOIN 	rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		LEFT JOIN 	mfgcodemst mfg ON co.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "        LEFT JOIN	vu_salesorder_updatedlist_report vsur ON sd.id = vsur.SalesOrderDetailId  \n" +
                "        LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE 		sd.isDeleted =0  \n" +
                "					AND sd.partCategory=3  \n" +
                "					AND IFNULL(sd.isCancle,0) = 0  \n" +
                "					AND sd.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\")\",  \n" +
                "                    \"AND sd.salesOrderDetStatus = 1 \", whereClause,'  \n" +
                "		order by 	co.PIDCode  \n" +
                "	');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1144,'1.00','V1','Sproc_GetActiveSalesOrderDetailList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1144:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAllAssemblyBySearch;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllAssemblyBySearch`(  \n" +
                "	IN pSearch VARCHAR(100),  \n" +
                "	IN pId INT(11),  \n" +
                "	IN pIsActiveAssembliy TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	 SELECT *  \n" +
                "     FROM (  \n" +
                "				SELECT 	com.id,  	com.mfgPN, 		com.PIDCode,	com.mfgPNDescription, m.id as mfgCodeID,  \n" +
                "						CONCAT('(', m.mfgCode, ') ', com.mfgPN) mfgPNWithMfgCode ,  \n" +
                "                        CONCAT('(', m.mfgCode, ') ', m.mfgName) As mfgCodewithName ,  \n" +
                "                        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) mfgCodeFormated,  \n" +
                "						com.nickName , m.mfgCode , r.rohsIcon , r.name ,  \n" +
                "                        concat(com.PIDCode ,' | ',com.mfgPN) SearchPIDMfgPN  \n" +
                "				FROM 	COMPONENT com  \n" +
                "				INNER JOIN mfgCodemst m ON com.mfgcodeID = m.id  AND m.isDeleted = 0 AND m.mfgType = 'MFG'  \n" +
                "                JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID  \n" +
                "				WHERE 	com.id = IFNULL(pId, com.id)  \n" +
                "				AND 	com.category = 3  \n" +
                "				AND 	com.isDeleted = 0  \n" +
                "				AND  	(CASE WHEN pIsActiveAssembliy = TRUE THEN  \n" +
                "								com.partStatus = 1  /*Active*/  \n" +
                "							WHEN pIsActiveAssembliy = FALSE THEN  \n" +
                "								com.partStatus != 1 /*Inactive (other than active consider as inactive)*/  \n" +
                "							ELSE 1 = 1 END)  \n" +
                "	) AS a  \n" +
                "	WHERE (CASE WHEN pSearch IS NULL THEN 1 = 1  \n" +
                "			ELSE (mfgPNWithMfgCode LIKE CONCAT('%', pSearch , '%') OR PIDCode LIKE CONCAT('%', pSearch , '%'))  \n" +
                "			END)  \n" +
                "	ORDER BY mfgPNWithMfgCode;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1145,'1.00','V1','Sproc_GetAllAssemblyBySearch - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1145:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyStock;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyStock`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pStockType VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetAssemblyStock = CONCAT(\" Select ass.id ,ass.openingdate,  \n" +
                "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
                "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
                "            ass.mfgCodeFormated, ass.mfgCodeID,  \n" +
                "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.woID, ass.serialNo,  \n" +
                "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
                "			ass.parentWarehouse,  \n" +
                "			ass.systemGeneratedsss,ass.typestock,  \n" +
                "			ass.dateCode, ifnull(ass.dateCodeFormat, wo.dateCodeFormat) dateCodeFormat,  \n" +
                "			ass.updatedby,ass.createdby,  \n" +
                "			ass.createdbyRole, ass.updatedbyRole,  \n" +
                "			ass.createdAt, ass.updatedAt,  \n" +
                "			ass.qtyBox,  \n" +
                "            ifnull(ass.poQty, SUM(`wsd`.`poQty`)) AS `totalPOQty`,  \n" +
                "			ifnull(ass.poNumber, GROUP_CONCAT(`so`.`poNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `poNumber`,  \n" +
                "			ifnull(ass.soNumber, GROUP_CONCAT(`so`.`salesOrderNumber`,'#####',so.id  SEPARATOR '@@@@@')) AS `salesOrderNumber`,  \n" +
                "            ass.refSalesOrderDetID , ass.soID , ass.isLegacyPO , ass.isLegacyPOText,  \n" +
                "            ass.isPOAdded, ass.isPOAddedText  \n" +
                "			from (SELECT s.id, s.openingdate,  \n" +
                "				c.imageURL, c.documentPath, s.partID, c.mfgPN, c.PIDCode,  \n" +
                "				c.nickname, c.rev, c.custAssyPN, c.mfgPNDescription,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") mfgCodeFormated,  \n" +
                "				ro.rohsIcon, ro.name AS rohsName, s.woNumber, s.serialNo,  \n" +
                "				s.openingStock,fun_getWarehouseNameByID(s.whID) warehouse,fun_getBinNameByID(s.binID) binName,  \n" +
                "				fun_getDepartmentNameByBinID(s.binID) parentWarehouse,  \n" +
                "				(select count(1) from shippedassembly sh where sh.partID=s.partID and sh.woNumber=s.woNumber and sh.isdeleted=0) systemGeneratedsss,  \n" +
                "				fun_getStockType(s.type) typestock,  \n" +
                "				s.dateCode,s.dateCodeFormat,  \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "				fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "				  ,(select sum(qtyPerBox) from workorder_boxserialno where assyStockId =  s.id) qtyBox,  \n" +
                "				   s.poQty,s.poNumber,s.soNumber,  \n" +
                "				  s.type,s.woID ,s.refSalesOrderDetID , s.refSalesOrderID soID, legcySO.isLegacyPO,  \n" +
                "                  fun_getIntToText(ifnull(legcySO.isLegacyPO,0)) isLegacyPOText,  \n" +
                "                  s.isPOAdded ,  \n" +
                "                  c.mfgCodeID,  \n" +
                "                  fun_getIntToText(ifnull(s.isPOAdded,0)) isPOAddedText  \n" +
                "			FROM assemblystock s  \n" +
                "			JOIN component c ON c.id = s.partID AND c.category = 3  \n" +
                "            INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  AND m.isDeleted = 0 AND m.mfgType = 'MFG'  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "            LEFT JOIN salesordermst legcySO on legcySO.id = s.refSalesOrderID and legcySO.isDeleted = 0  \n" +
                "			WHERE s.isdeleted = 0  \n" +
                "		) ass  \n" +
                "        LEFT JOIN workorder_salesorder_details wsd ON wsd.woID = ass.woID and wsd.partID = ass.partID and wsd.isDeleted = 0  \n" +
                "        LEFT JOIN workorder wo ON wo.woID = ass.woID and wo.isDeleted = 0  \n" +
                "        LEFT JOIN salesorderdet sod ON sod.id = wsd.salesOrderDetailID and wsd.partID = sod.partID and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst so ON so.id = sod.refSalesOrderID and so.isDeleted = 0  \n" +
                "        where FIND_IN_SET(ass.type,'\",pStockType,\"')  \n" +
                "        group by ass.id ,ass.openingdate,  \n" +
                "			ass.imageURL, ass.documentPath, ass.partID, ass.mfgPN, ass.PIDCode,  \n" +
                "			ass.nickname, ass.rev, ass.custAssyPN, ass.mfgPNDescription,  \n" +
                "			ass.rohsIcon, ass.rohsName, ass.woNumber, ass.serialNo,  \n" +
                "			ass.openingStock,ass.warehouse,ass.binName,  \n" +
                "			ass.parentWarehouse,  \n" +
                "			ass.systemGeneratedsss,ass.typestock,  \n" +
                "			ass.dateCode,ass.dateCodeFormat,  \n" +
                "			ass.updatedby,ass.createdby,  \n" +
                "			ass.createdbyRole, ass.updatedbyRole,  \n" +
                "			ass.createdAt, ass.updatedAt,  \n" +
                "			ass.qtyBox\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY PIDCode DESC\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetAssemblyStock,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetAssemblyStock,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1146,'1.00','V1','Sproc_GetAssemblyStock - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1146:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssyStockDetailByID;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyStockDetailByID`(  \n" +
                "	IN passyStockID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		SELECT s.id,s.openingStock,s.openingdate,  \n" +
                "			s.woNumber,s.serialNo,s.partID,s.`type`,  \n" +
                "			s.whID,s.binID,  s.dateCode, s.dateCodeFormat, s.poNumber, s.poQty , s.soNumber ,  \n" +
                "			(SELECT SUM(sh.shippedqty)  FROM shippedassembly sh WHERE sh.partID=s.partID  \n" +
                "				AND sh.woNumber=s.woNumber AND sh.isDeleted=0) shipQty,  \n" +
                "		    s.refSalesOrderDetID,s.refSalesOrderID,s.isPOAdded  ,  \n" +
                "            som.isLegacyPO,  \n" +
                "            som.poRevision  \n" +
                "		FROM assemblystock s  \n" +
                "        LEFT JOIN salesordermst som  ON som.id = s.refSalesOrderID and som.isDeleted  =0  \n" +
                "		WHERE s.id=passyStockID  \n" +
                "		AND s.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1147,'1.00','V1','Sproc_GetAssyStockDetailByID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1147:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS sproc_getLegacySalesOrderList  ;  \n" +
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderDetailByPartId  ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderDetailByPartId`(  \n" +
                "	pPartId INT,  \n" +
                "    pSearchPO Varchar(2000),  \n" +
                "    pSalesOrderDetId INT,  \n" +
                "    pIncludeCompleted INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @temp_sproc_getLegacySalesOrderList = concat(\"SELECT CONCAT(so.poNumber,' | ', lineID) SOPONumber,  \n" +
                "			so.salesOrderNumber soNumber,  \n" +
                "			so.poNumber,  \n" +
                "            so.customerId,  \n" +
                "            sod.id salesOrderDetID,  \n" +
                "            sod.partId,  \n" +
                "            sum(if(so.isLegacyPO = 1 ,sod.qty,sod.originalPOQty)) originalPOQty,  \n" +
                "            sum(if(so.isLegacyPO = 1 ,sod.originalPOQty,sod.qty)) POQty,  \n" +
                "            so.isLegacyPO,  \n" +
                "            so.id salesOrderID ,  \n" +
                "            sod.salesOrderDetStatus ,  \n" +
                "            sod.lineID,  \n" +
                "            so.poRevision  \n" +
                "		FROM Salesordermst so  \n" +
                "		JOIN Salesorderdet sod on sod.refSalesOrderID = so.id and sod.isDeleted = 0  \n" +
                "		WHERE so.isDeleted = 0  \n" +
                "		AND so.status = 1  \n" +
                "        AND sod.isCancle = 0  \n" +
                "        AND not exists (select 1 from workorder_salesorder_details wsd where wsd.salesOrderDetailID = sod.id and wsd.isDeleted = 0 and parentPartID = sod.partId )  \n" +
                "		AND sod.partId = \", pPartID ,  \n" +
                "	  \" AND (so.salesOrderNumber like '%\", pSearchPO ,\"%' or so.poNumber like '%\", pSearchPO ,\"%' )\"  \n" +
                "    );  \n" +
                "  \n" +
                "    IF pIncludeCompleted IS NOT NULL THEN  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = concat(@temp_sproc_getLegacySalesOrderList , \" and sod.salesOrderDetStatus in (1,2)\");  \n" +
                "    ELSE  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = concat(@temp_sproc_getLegacySalesOrderList , \" and sod.salesOrderDetStatus = 1\");  \n" +
                "    END IF;  \n" +
                "  -- SELECT  @temp_sproc_getLegacySalesOrderList;  \n" +
                "    IF(pSalesOrderDetId IS NOT NULL) THEN  \n" +
                "		SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" and sod.id = \",pSalesOrderDetId);  \n" +
                "    END IF;  \n" +
                "	SET @temp_sproc_getLegacySalesOrderList = CONCAT(@temp_sproc_getLegacySalesOrderList ,\" group by so.salesOrderNumber, so.poNumber,  \n" +
                "										so.customerId,sod.id,sod.partId,so.isLegacyPO,so.id\");  \n" +
                "    SET @temp_sproc_getLegacySalesOrderList = CONCAT(\" SELECT * FROM ( \",@temp_sproc_getLegacySalesOrderList,\" ) c\");  \n" +
                "    PREPARE query1 FROM @temp_sproc_getLegacySalesOrderList;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1148,'1.00','V1','Sproc_GetSalesOrderDetailByPartId - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1148:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\"FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                " -- select @temp_Sproc_GetSalesorderList;  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  	ELSE  \n" +
                "  	       SET pWhereClause = CONCAT(pWhereClause , \" AND salesOrderDetailId is not null \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1149,'1.00','V1','Sproc_GetSalesorderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1149:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
                "	IN pCustomerID INT(11),  \n" +
                "	IN pPartID INT(11)  ,  \n" +
                "	IN psubAssyID INT(11) ,  \n" +
                "    IN pSearchObj VARCHAR(500),  \n" +
                "    IN pSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT(11);  \n" +
                "	DECLARE whereClause VARCHAR(500);  \n" +
                "	DECLARE partStatusID INT(11);  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
                "	SET whereClause = \" a.partCategory = 3 \";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
                "		SET pCustomerID=NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
                "	END IF;  \n" +
                "  -- Added to search  Sales order number  \n" +
                "    IF pSearchObj IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
                "    END IF;  \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
                "    END IF;  \n" +
                "	IF(pPartID IS NOT NULL) THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "		c.partStatus, c.isGoodPart,  \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
                "		(SELECT  perAssyBuildQty  \n" +
                "			FROM 	kit_allocation_assy_detail  \n" +
                "			WHERE 	refSalesorderdetid = sd.id  \n" +
                "		AND 	partId = \",pPartID,\"  \n" +
                "			AND 	isDeleted = 0) AS qpaa,  \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
                "        sd.partCategory,  \n" +
                "        astk.initialStockCount  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
                "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
                "	        -- SELECT @SQLStatement2;  \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "		-- 	 SELECT @SQLStatement2;  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "			1 AssyType,  \n" +
                "			(SELECT  perAssyBuildQty  \n" +
                "				FROM 	kit_allocation_assy_detail  \n" +
                "				WHERE 	refSalesorderdetid = sd.id  \n" +
                "			AND 	partId = sd.partID  \n" +
                "				AND 	isDeleted = 0) AS qpaa,  \n" +
                "			CASE c.partStatus  \n" +
                "			WHEN \", partStatusID, \" THEN FALSE  \n" +
                "			ELSE TRUE  \n" +
                "			END AS isActive ,  \n" +
                "            sd.partCategory , c.partStatus , astk.initialStockCount  \n" +
                "			FROM salesorderdet sd  \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
                "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "			-- SELECT @SQLStatement2;  \n" +
                "	END IF;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1150,'1.00','V1','Sproc_GetSOPIDList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1150:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblySummaryDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblySummaryDetails`(  \n" +
                "	IN pPartID INT)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "     SELECT  \n" +
                "	partID,  \n" +
                "	SUM(readytoShipQty) readytoShipQty,  \n" +
                "	SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "	SUM(wipQty) wipQty,  \n" +
                "	SUM(excessFreetoUseQty) excessFreetoUseQty,  \n" +
                "	SUM(poQty) poQty,  \n" +
                "	SUM(shippedQty) shippedQty,  \n" +
                "	SUM(backOrderQty) backOrderQty  \n" +
                "	FROM(  \n" +
                "		SELECT  \n" +
                "			vu_ssr.partId partID,  \n" +
                "			0 readytoShipQty,  \n" +
                "			0 stockAdjustmentQty,  \n" +
                "			0 wipQty,  \n" +
                "			0 excessFreetoUseQty,  \n" +
                "			SUM(vu_ssr.`PO Qty`) poQty,  \n" +
                "			SUM(vu_ssr.`Shipped Qty`) shippedQty,  \n" +
                "			SUM((CASE WHEN (ka.perAssyBuildQty IS NULL OR ka.perAssyBuildQty = 0) THEN  \n" +
                "				(vu_ssr.`PO Qty` - vu_ssr.`Shipped Qty`)  \n" +
                "			ELSE  \n" +
                "				((ka.perAssyBuildQty * vu_ssr.`PO Qty`) - vu_ssr.`Shipped Qty`)  \n" +
                "			END)) AS backOrderQty,  \n" +
                "			ka.perAssyBuildQty AS qpa  \n" +
                "		 FROM vu_salesorder_shipped_report vu_ssr  \n" +
                "		 LEFT JOIN kit_allocation_assy_detail ka  \n" +
                "			ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId` AND ka.isDeleted=0  \n" +
                "		WHERE vu_ssr.partID = pPartID  \n" +
                "		GROUP BY vu_ssr.partID  \n" +
                "		UNION ALL  \n" +
                "		SELECT  \n" +
                "			partID,  \n" +
                "			SUM(readytoShipQty) readytoShipQty,  \n" +
                "			SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "			SUM(wipQty) wipQty,  \n" +
                "			SUM((CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty  \n" +
                "				ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END)) AS excessFreetoUseQty,  \n" +
                "			0 poQty,  \n" +
                "			0 shippedQty,  \n" +
                "			0 backOrderQty,  \n" +
                "			1 qpa  \n" +
                "		FROM vu_workorder_summary_stk vu_wss  \n" +
                "		WHERE partID = pPartID  \n" +
                "		GROUP BY partID) a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1151,'1.00','V1','Sproc_GetAssemblySummaryDetails - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1151:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-10-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustPNListFromPN`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustPNListFromPN`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pCPN TEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @cpnresult = CONCAT('SELECT c.id, c.mfgPN, c.mfgcodeID, c.RoHSStatusID,  cpn.refCPNPartID,  \n" +
                "	(SELECT mfgCode FROM mfgCodemst WHERE id = c.mfgcodeID) AS mfgCode,  \n" +
                "	r.name AS RoHSName, r.rohsIcon  \n" +
                "	FROM component_cust_alias_rev_pn cpn  \n" +
                "	JOIN component c ON c.id = cpn.refComponentID  \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "	WHERE cpn.refCPNPartID IN (  \n" +
                "		SELECT id FROM component WHERE mfgCodeID = (  \n" +
                "			SELECT mfgCodeID FROM component WHERE id =', pPartID ,'  \n" +
                "			)  AND mfgPn in (\"',pCPN,'\")   AND isDeleted = 0  \n" +
                "			)  \n" +
                "	AND cpn.isDeleted = 0;');  \n" +
                " 	PREPARE cpnresult1 FROM @cpnresult;  \n" +
                "	EXECUTE cpnresult1;  \n" +
                "	DEALLOCATE PREPARE cpnresult1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1152,'1.00','V1','Sproc_uti_generatekitConsolidateData - shirish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1152:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "   IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				p.umidCreatedQty AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        LEFT JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID  \n" +
                "	FROM		packing_slip_material_receive_det psm  \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "	AND			ps.receiptType = 'P'  \n" +
                "	AND			psm.isDeleted = 0  \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	WHERE 	r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1153,'1.00','V1',' Use umidCreatedQty column from packing_slip_material_receive_det table in Sproc_RetrivePackingSlipMaterialDetList for get umid created qty - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1153:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_CurrRefGencTransModeID INT;  \n" +
                "	DECLARE v_cntOfNotAllowedToLockRecord INT;  \n" +
                "  \n" +
                "	SET v_cntOfNotAllowedToLockRecord = 0;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_oldLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_oldLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_newLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_newLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* when customer refund then check all records valid or not - to display list */  \n" +
                "	IF (pRefPaymentMode = 'CR' AND pIsLockTransaction = 1) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tt_CustRefundValidatedList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "			SELECT pip.id AS custRefundMstID, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "				`fun_getCustRefundSubStatusNameByID`(pip.subStatus) AS refundSubStatusName ,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN COUNT(pipd.refRefundCustCreditMemoID)  \n" +
                "					WHEN refGencTransModeID = -9 THEN COUNT(pipd.refRefundPaymentID)  \n" +
                "				    ELSE NULL END) detItemCount,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN  \n" +
                "						(SELECT COUNT(1) FROM customer_packingslip WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundCustCreditMemoID))) AND isLocked != 1)  \n" +
                "					WHEN refGencTransModeID = -9 THEN  \n" +
                "						(SELECT COUNT(1) FROM packingslip_invoice_payment WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundPaymentID))) AND lockStatus != 'LC')  \n" +
                "					ELSE NULL END) detItemNotLockedCount  \n" +
                "			FROM packingslip_invoice_payment pip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON pip.id = pipd.refPayementid AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "			WHERE pip.id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "			 GROUP BY pip.id	, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "			 	`fun_getCustRefundSubStatusNameByID`(pip.subStatus) , pip.refGencTransModeID  \n" +
                "			;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_cntOfNotAllowedToLockRecord  \n" +
                "			FROM tt_CustRefundValidatedList  \n" +
                "			WHERE ((detItemNotLockedCount > 0) OR (subStatus != 4))  \n" +
                "			;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0 AND v_cntOfNotAllowedToLockRecord = 0) THEN  \n" +
                "  \n" +
                "		/* update all payments transaction to locked/unlocked */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "		    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "		    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "		    updatedBy = v_newLockedBy  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "		AND lockStatus = v_oldLockStatusPMT  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					/* update all payment dependent write off if any */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END)  \n" +
                "							 , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "					/* update all direct lock/unlock write off */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE id = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CR')) THEN  \n" +
                "			/* payment lock/unlock - If payment dependent Refund then Lock/Unlock (Check for all payment must be lock)  \n" +
                "			    OR direct customer refund Lock/Unlock case */  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "				/* when refund then no need of loop to get refRefundIDs. we already have selected refund list  \n" +
                "					so set 1 as default to start outer loop*/  \n" +
                "				SELECT 1 INTO totCustInvPayments ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			/* outer loop of main payment - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT pipd.refPayementid  \n" +
                "						FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "									AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "						WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "						GROUP BY pipd.refPayementid ;  \n" +
                "				ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT invPaymentMstID AS refPayementid , pip.refGencTransModeID  \n" +
                "						FROM tt_UI_CustInvoicePaymentList tuip  \n" +
                "							JOIN packingslip_invoice_payment pip ON tuip.invPaymentMstID = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "  \n" +
                "						;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'CR') THEN  \n" +
                "								SELECT refGencTransModeID INTO v_CurrRefGencTransModeID  \n" +
                "								FROM tt_refundPMTMasterIDs LIMIT i,1 ;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -9)) THEN  \n" +
                "								/* check all payments contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND lockStatus != 'LC' ;  \n" +
                "  \n" +
                "							ELSEIF (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -6) THEN  \n" +
                "								/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND isLocked != 1 ;  \n" +
                "							ELSE  \n" +
                "								/* in case of Transaction Mode other than over payment then no need to check any one unlock case */  \n" +
                "								SET v_cntOfUnLockPMT = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "							/* update refund transaction to locked */  \n" +
                "							UPDATE packingslip_invoice_payment  \n" +
                "							SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END) ,  \n" +
                "							  lockedAt = v_newLockedAt ,  \n" +
                "							    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "							    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "							     updatedBy = v_newLockedBy  \n" +
                "							WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "								ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "							AND refPaymentMode = 'CR'  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 0)) THEN  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				ELSEIF (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 1) THEN  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						 JOIN (SELECT refCustPackingslipInvoiceID ,  \n" +
                "								MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
                "							FROM (  \n" +
                "								SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
                "									pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
                "								FROM packingslip_invoice_payment_det pipd  \n" +
                "									JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "								WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
                "														FROM packingslip_invoice_payment_det  \n" +
                "														WHERE refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "														AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "														)  \n" +
                "								AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "								) AS tiila  \n" +
                "							 GROUP BY refCustPackingslipInvoiceID  \n" +
                "							) AS toila  \n" +
                "							ON cps.id = toila.refCustPackingslipInvoiceID AND toila.isInvLockAllowed = 1  \n" +
                "  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if no temp table tt_CustRefundValidatedList created then create it with no records */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (v_cntOfNotAllowedToLockRecord > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* resp[3] - get is Any Not Allowed To Lock Record found */  \n" +
                "	 IF (v_cntOfNotAllowedToLockRecord > 0) THEN  \n" +
                "		SELECT 1 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 ELSE  \n" +
                "		SELECT 0 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 /* resp[4] - get all validateed refund record list */  \n" +
                "	 SELECT * FROM tt_CustRefundValidatedList ;  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 08-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustInvCMTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustInvCMTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvCMList JSON,  \n" +
                "	IN pTransType VARCHAR(10),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_oldLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_cntOfInvCMWhichNotFullyApplied INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedInvCM INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvCM INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE v_cntOfUnLockCM INT;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = NULL;  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInvCM = 0;  \n" +
                "		SET v_newLockStatusInvCM = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "		SET v_newLockStatusPMT = NULL;  \n" +
                "		SET v_oldLockStatusInvCM = 1;  \n" +
                "		SET v_newLockStatusInvCM = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice/credit memo List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvCMList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvCMList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvCMList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invCMMstID` INT PATH \"$.invCMMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvCMList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any locked/unlocked invoice/CM there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedInvCM  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "	AND isLocked = v_newLockStatusInvCM  \n" +
                "	AND transType = pTransType  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF (pIsLockTransaction = 1 AND pTransType = 'C') THEN  \n" +
                "		/* get list of invoice/CM whose status not in RE,NP - then not allowed to lock  \n" +
                "			RE-Full Credit Applied or NP-No Pending Credit */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfInvCMWhichNotFullyApplied  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND paymentStatus NOT IN ('RE','NP')  \n" +
                "		AND transType = pTransType  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	ELSE  \n" +
                "		SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM = 0 AND v_cntOfInvCMWhichNotFullyApplied = 0) THEN  \n" +
                "  \n" +
                "  \n" +
                "		IF (pTransType = 'C') THEN  \n" +
                "  \n" +
                "			/* update all invoice/CM transaction to locked/unlocked */  \n" +
                "			UPDATE customer_packingslip  \n" +
                "			SET isLocked = v_newLockStatusInvCM , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRole = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = v_newLockedBy  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = pTransType  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all applied CM transaction to locked/unlocked */  \n" +
                "			UPDATE packingslip_invoice_payment  \n" +
                "			SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = v_newLockedBy  \n" +
                "			WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND refPaymentMode = 'CA'  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "				ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* credit memo lock/unlock - If credit memo dependent Refund then Lock/Unlock (Check for all credit memo must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvCM FROM tt_UI_CustInvCMList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/* outer loop of main CM list - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvCM DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockCM = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockCM  \n" +
                "							FROM customer_packingslip  \n" +
                "							WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									)  \n" +
                "							AND isLocked != 1 ;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all credit memo locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockCM = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockCM IS NOT NULL AND v_cntOfUnLockCM = 0) THEN  \n" +
                "							/* update refund transaction to locked */  \n" +
                "							UPDATE packingslip_invoice_payment  \n" +
                "							SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "							    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "							    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "							     updatedBy = v_newLockedBy  \n" +
                "							WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "							AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "								ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "							AND refPaymentMode = 'CR'  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				/* lock invlice which contain in applied CM with fully received */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					 JOIN (SELECT refCustPackingslipInvoiceID ,  \n" +
                "							MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
                "						FROM (  \n" +
                "							SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
                "								pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
                "							FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
                "													FROM packingslip_invoice_payment_det  \n" +
                "													WHERE refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "																WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "																AND isDeleted = 0)  \n" +
                "													AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "													)  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "							) AS tiila  \n" +
                "						 GROUP BY refCustPackingslipInvoiceID  \n" +
                "						) AS toila  \n" +
                "						ON cps.id = toila.refCustPackingslipInvoiceID  \n" +
                "							AND (CASE WHEN pIsLockTransaction = 1 THEN toila.isInvLockAllowed = 1 ELSE 1=1 END)  \n" +
                "  \n" +
                "				SET cps.isLocked = v_newLockStatusInvCM , cps.lockedAt = v_newLockedAt ,  \n" +
                "				    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "				    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    cps.updatedBy = v_newLockedBy  \n" +
                "				WHERE cps.paymentStatus = 'RE'  \n" +
                "				AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "				AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "				;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyLockedUnlockedInvCM > 0) OR (v_cntOfInvCMWhichNotFullyApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[1] - is any CM which not fully used */  \n" +
                "	IF (v_cntOfInvCMWhichNotFullyApplied > 0) THEN  \n" +
                "		SELECT 1 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Inv/CM Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM > 0) THEN  \n" +
                "		SELECT 1 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 08-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pCustRefundMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pDeleteCustPaymentDetList JSON,  \n" +
                "	IN pDeleteCustCMDetList JSON,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8) ,  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255) ,  \n" +
                "	IN pIsMarkAsPaid TINYINT,  \n" +
                "	IN pSubStatus INT,  \n" +
                "	IN pStatus INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;  \n" +
                "	IF(pTotSelectedPayOfCust > 0  \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "		/* get/map all Customer Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "		-- select * from temp_UI_CustPaymentDetList;  \n" +
                "  \n" +
                "		/* get all customer refund > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				psipd.id AS paymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det psipd  \n" +
                "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			AND psip.isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
                "  \n" +
                "            /* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL  \n" +
                "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL  \n" +
                "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustPaymentDetList_JT ;  \n" +
                "  \n" +
                "				 /* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN  \n" +
                "  \n" +
                "			/* start - create/update/delete payment refund process */  \n" +
                "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy2 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "				/* update refund payment status details and lock status which are deleted (unselected from UI) */  \n" +
                "				UPDATE packingslip_invoice_payment psip  \n" +
                "					LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "					LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "						ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "				SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "					psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
                "				AND psip.isPaymentVoided = 0  \n" +
                "				AND psip.isDeleted = 0 ;  \n" +
                "  			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustPaymentDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
                "  \n" +
                "			/* insert newly selected payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status which are newly created/updated */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN (CASE WHEN psip.lockStatus = 'LC' THEN 'LC' ELSE 'RL' END)  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "			       psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)  \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	/* customer credit memo refund cases */  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0 AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "  \n" +
                "	        /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all customer Refund > against total CM list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "				SELECT cps.id AS custCreditMemoMstID,  \n" +
                "				 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "		    (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) totalRefundIssuedAmount  \n" +
                "			FROM customer_packingslip AS cps  \n" +
                "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "			/* get/map all deleting customer CM Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustCMDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustCMtDetList_JT ;  \n" +
                "				-- select * from temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "			/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) CM det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "				-- select 'deleted refund for CM list' ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS  \n" +
                "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "									END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all CM det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustCMDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected CM det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "								END)  \n" +
                "						      ELSE 'NA' END),  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			payToName = pBillToName , payToAddress = pBillToAddress,  \n" +
                "			billToAddress = pBillToAddress, billToName = pBillToName,  \n" +
                "			isMarkAsPaid = pIsMarkAsPaid ,  \n" +
                "			subStatus = pSubStatus , `status` = pStatus ,  \n" +
                "			updatedBy = pUserID, offsetAmount = pOffsetAmount,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustRefundMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
                "		) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted payment det (passed from UI but not in db) */  \n" +
                "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all deleted CM det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
                "  \n" +
                "	/* Resp[3] - get all mis match payment amount records or deleted  */  \n" +
                "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/*  Resp[4] - get all mis match credit memo amount records or deleted  */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1154,'1.00','V1',' Lock Unlock Customer Payment sps - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1154:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  \n" +
                "				 fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				`vuss`.`modifyDate` AS modifyDate,  \n" +
                "				`vuss`.`createdDate` AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,  \n" +
                "				fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,  \n" +
                "				fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,  \n" +
                "				fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted=0  \n" +
                "							AND subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                " -- select 'Line 349', @temp_Sproc_GetSalesorderList;  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount = 0 AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as PartiallyPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty) AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1155,'1.00','V1','Sproc_GetSalesorderList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1154:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 11-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = \", pPaymentNumber ,\" \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** Add Script Version -> 11-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1155,'1.00','V1',' Bug 37577: Material Receipt: Duplicate Packing slip records are showing in list page - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1155:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
                "	DECLARE vPOLines INT;  \n" +
                "  \n" +
                "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
                "    SELECT count(1) INTO vPOLines FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID;  \n" +
                "  \n" +
                "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
                "		IF vPOLines IS NULL OR vPOLines=0 THEN  \n" +
                "			SET vStatus='P';  \n" +
                "		ELSE  \n" +
                "			SET vStatus=IFNULL(vStatus,'C');  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET vStatus='P';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end) WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1156,'1.00','V1',' Bug 37668: Supplier PO: Can not delete line anymore, had to delete PO PO was in DRAFT and COMPLETED Automatically.Hot-Fix - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1156:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipListByPODetId`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipListByPODetId`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRefPODetID INT,  \n" +
                "    IN pRefReleaseLineID INT,  \n" +
                "    IN pPONumber VARCHAR(100),  \n" +
                "    IN pPartID INT,  \n" +
                "    IN pRefPOLineID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT  \n" +
                "		p.id,  \n" +
                "        psmrd.packingSlipSerialNumber,  \n" +
                "		p.packingSlipNumber,  \n" +
                "		p.packingSlipDate,  \n" +
                "		p.supplierSONumber,  \n" +
                "		p.soDate,  \n" +
                "		p.receiptDate,  \n" +
                "		p.status,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "				WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "				WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "				WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "				WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "				WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) packingSlipStatus,  \n" +
                "		p.lockStatus,  \n" +
                "		psmrd.receivedQty,  \n" +
                "		psmrd.packingSlipQty,  \n" +
                "		c.unit,  \n" +
                "		fun_getUnitNameByID(c.uom) uomName,  \n" +
                "		fun_getPackagingNameByID(psmrd.packagingID) packaging,  \n" +
                "		fun_getBinNameByID(psmrd.binID) bin,  \n" +
                "		fun_getWarehouseNameByID(psmrd.warehouseID) warehouse,  \n" +
                "		fun_getWarehouseNameByID(psmrd.parentWarehouseID) parentWarehouse,  \n" +
                "		fun_getUserNameByID(psmrd.createdBy)  createdByName,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psmrd.createdAt,v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "        psmrd.refPurchaseOrderDetID,  \n" +
                "        psmrd.refPOReleaseLineID  \n" +
                "	FROM packing_slip_material_receive_det psmrd  \n" +
                "		JOIN packing_slip_material_receive p ON p.id = psmrd.refPackingSlipMaterialRecID AND p.isDeleted=0 AND p.receiptType='P' AND p.poNumber=IFNULL(pPONumber, p.poNumber)  \n" +
                "		LEFT JOIN component c ON c.id = psmrd.partID AND c.isDeleted = 0  \n" +
                "	WHERE psmrd.isdeleted=0 AND  psmrd.partID=IFNULL(pPartID, psmrd.partID) and psmrd.refPOLineID = IFNULL(pRefPOLineID, psmrd.refPOLineID);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC, packingSlipSerialNumber ASC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pRefPODetID IS NOT NULL AND pRefPODetID != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND refPurchaseOrderDetID=\", pRefPODetID);  \n" +
                "        IF(pRefReleaseLineID IS NOT NULL AND pRefReleaseLineID != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refPOReleaseLineID=\", pRefReleaseLineID);  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1157,'1.00','V1',' User Story 37522: Hyperlink Improvement: Display detail view for received qty of PO Main Branch - Jay'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1157:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetScannedWOSerialNoDetial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetScannedWOSerialNoDetial`(  \n" +
                " IN pwoID INT,  \n" +
                " IN pSerialNo VARCHAR(500),  \n" +
                " IN pSerailType TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    IF(pSerailType IS NULL)  \n" +
                "    THEN  \n" +
                "		SELECT (CASE WHEN(a.serialType = 2) THEN a.refMFGSerialNo ELSE a.SerialNo END) ID,  \n" +
                "				(CASE WHEN(a.serialType = 2) THEN  \n" +
                "					(SELECT ws.SerialNo FROM workorder_serialmst ws  \n" +
                "							WHERE ws.ID = a.refMFGSerialNoId AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)  \n" +
                "					ELSE a.SerialNo END) SerialNo,  \n" +
                "				(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE  \n" +
                "						(SELECT ws.SerialNo FROM workorder_serialmst ws  \n" +
                "							WHERE ws.refMFGSerialNoId = a.ID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)  \n" +
                "				END) ProductSerialNo  \n" +
                "			,a.currStatus  \n" +
                "			,fun_getOperationNameByWOOPID(a.currwoOPID) CurrentWoOperation ,  \n" +
                "			a.serialIntVal  \n" +
                "		FROM workorder_serialmst a  \n" +
                "		WHERE a.woId = pwoID  \n" +
                "		AND a.deletedAt IS NULL  \n" +
                "		AND a.isDeleted = 0  \n" +
                "		AND ((a.SerialNo = pSerialNo AND a.serialType = 1) OR  \n" +
                "					(a.SerialNo = pSerialNo AND a.serialType = 2 AND a.refMFGSerialNoId IS NOT NULL))  \n" +
                "		LIMIT 1;  \n" +
                "    ELSE  \n" +
                "		SELECT  a.SerialNo ID,  \n" +
                "			a.SerialNo SerialNo,  \n" +
                "			(CASE WHEN(a.serialType = 2) THEN a.SerialNo ELSE  \n" +
                "					(SELECT ws.SerialNo FROM workorder_serialmst ws  \n" +
                "						WHERE ws.refMFGSerialNoId = a.ID AND deletedAt IS NULL AND isDeleted = 0 LIMIT 1)  \n" +
                "			   END) ProductSerialNo  \n" +
                "			,a.currStatus  \n" +
                "			,fun_getOperationNameByWOOPID(a.currwoOPID) CurrentWoOperation ,  \n" +
                "			a.serialIntVal  \n" +
                "		FROM workorder_serialmst a  \n" +
                "		WHERE a.woId = pwoID  \n" +
                "		AND a.deletedAt IS NULL  \n" +
                "		AND a.isDeleted = 0  \n" +
                "		AND (a.SerialNo = pSerialNo AND a.serialType = pSerailType)  \n" +
                "		LIMIT 1;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1158,'1.00','V1',' Sproc_GetScannedWOSerialNoDetial - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1158:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "	IFNULL(sd.custPOLineNumber ,1)   custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        ss.releaseNotes,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "         c.mfgpn,  \n" +
                "         c.mfgpndescription,  \n" +
                "         c.pidcode,  \n" +
                "         fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "         c.nickName,  \n" +
                "         c.mfgcodeID,  \n" +
                "         sd.originalPOQty,  \n" +
                "         fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "	(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "	fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "	fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "	fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "	CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "	(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
                "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
                "		AND cpd.isdeleted=0) shippedQty ,  \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "		ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "        (SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "        sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID, sd.refRFQGroupID, sd.refRFQQtyTurnTimeID  ,  \n" +
                "        IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "						c.category partCategory  \n" +
                "        FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "  \n" +
                "WHERE sd.id=psalesorderDetID  \n" +
                "AND  sd.isDeleted = 0 AND  \n" +
                "(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
                "	ss.qty > (SELECT  \n" +
                "	IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
                "		AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  \n" +
                "		SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
                "ELSE  \n" +
                "	ss.qty=ss.qty  \n" +
                "END)  \n" +
                "AND ss.isdeleted=0  \n" +
                "ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "-- all list of shipping line with other charges  \n" +
                "SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "	      releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "                  pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        refSODetID,  \n" +
                "        refSOReleaseLineID,  \n" +
                "        frequency,  \n" +
                "        originalPOQty,  \n" +
                "        frequencyType  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 sd.refSODetID,  \n" +
                "			 sd.refSOReleaseLineID,  \n" +
                "			 sd.frequency,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "			LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetForOtherCharges` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetForOtherCharges`(  \n" +
                "	IN psalesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "         pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "			LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		WHERE sd.refSalesOrderID = psalesorderID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "		AND sd.isCancle=0  \n" +
                "		AND sd.partCategory = 2  \n" +
                "		AND sd.refSODetID IS NULL  \n" +
                "		AND c.partType  =4  \n" +
                "    ) a  WHERE a.poQty - IFNULL(a.shippedQty,0) > 0;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1159,'1.00','V1',' SO Procedure Changes - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1159:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES ('Sales Order Shipment Summary', '0', '0', 'Materialmanagement.shipmentsummaryview', 'app.transaction.shipmentsummary', '/shipmentsummary', 'Sales Order Shipment Summary', '0', '14.6', 't-icons-shipment-summary', '1', '1', '0', '1', 'Sales Order Shipment Summary', '1', '0', '0');  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1160,'1.00','V1','Add New menu-Shipment Summary - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1160:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(1000);  \n" +
                "    DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" and (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0	where sodet.isDeleted = 0  \n" +
                "															and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%')	))\");  \n" +
                "		SET detailWhereClause = CONCAT(\" (soDetail.PIDCode like '%\",pSearchText,\"%'  \n" +
                "										OR soDetail.mfgPN like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.poNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.lastCPSNumber like '%\",pSearchText,\"%' )\");  \n" +
                "                                        /*OR soDetail.refSalesOrderID in (select id from salesordermst where isDeleted = 0  \n" +
                "																		and (salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "																			or poNumber like '%\",pSearchText,\"%')))\");    */  \n" +
                "    ELSE  \n" +
                "        SET detailWhereClause = '1=1';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder where \",headerWhereClause, \"  \n" +
                "     group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName  \n" +
                "        order by soDate desc, soId desc \", rowNumWhere) ;  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workorderDet.woNumberList) woComment  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(shipQty) shippedQty from customer_packingslip_det where isDeleted = 0 group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select salesOrderDetailID,group_concat(wo.woNumber) woNumberList from workorder_salesorder_details woSo  join workorder wo  \n" +
                "                on woSo.woID = wo.woID and woSo.isDeleted = 0 where wo.isDeleted = 0 group by woSo.salesOrderDetailID) as workorderDet on workorderDet.salesOrderDetailID =  sod.id  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "				/*PIDCode, mfgPN, rohsName, rohsIcon, */  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 COUNT(refCustPackingSlipID) over (partition by releaseId) cpsDetailCnt,  \n" +
                "				 row_number() over (partition by releaseId) cpsIndex  \n" +
                "                 -- woNumberList  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate  \n" +
                "               -- workorderDet.woNumberList  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                where  \" , detailWhereClause);  \n" +
                "  -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                " 	SELECT * from temp_so_rel_detail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1161,'1.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1161:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1162,'1.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1162:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getDesignatorList;  \n" +
                "CREATE FUNCTION `fun_getDesignatorList`(  \n" +
                "	pRefDesig TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "  DECLARE vReturn,refDesigArr TEXT DEFAULT '';  \n" +
                "  DECLARE startPos,endPos,maxLength INT DEFAULT 1;  \n" +
                "  DECLARE item VARCHAR(200);  \n" +
                "  DECLARE delim CHAR(1) ;  \n" +
                "  DECLARE vGetRange VARCHAR(2000);  \n" +
                "  SET delim = ',';  \n" +
                "  If pRefDesig IS NOT NULL Then  \n" +
                "    -- Replace space with comma, as we consider space as a seperator too  \n" +
                "    SET refDesigArr = trim(pRefDesig);  \n" +
                "    SET refDesigArr = replace(refDesigArr,' ', ',');  \n" +
                "   -- SET refDesigArr = refDesigArr.replace('/ /g', ',');  \n" +
                "    set maxLength = length(refDesigArr);  \n" +
                "	REPEAT  \n" +
                "		SET endPos = LOCATE(delim,refDesigArr,startPos);  \n" +
                "        IF endPos = 0 THEN  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos);  \n" +
                "        ELSE  \n" +
                "			SET item = SUBSTR(refDesigArr,startPos,endPos-startPos);  \n" +
                "        END IF;  \n" +
                "		IF item <>'' OR item IS NOT NULL THEN  \n" +
                "			IF (instr(item,'-') > 0) THEN  \n" +
                "				SET vGetRange = fun_getRangeFromString(item,'-');  \n" +
                "			ELSE  \n" +
                "				SET vGetRange = item;  \n" +
                "			END IF;  \n" +
                "			IF startpos >=  1 AND  endPos = 0 THEN  \n" +
                "				SET vReturn = concat(vReturn,vGetRange);  \n" +
                "				SET startPos = maxLength ;  \n" +
                "			ELSE  \n" +
                "				SET vReturn = concat(vReturn,vGetRange,',');  \n" +
                "				SET startPos = endPos + 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	UNTIL startPos>= maxLength END REPEAT;  \n" +
                "  END IF;  \n" +
                "  return vReturn;  \n" +
                "end;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1163,'1.00','V1','fun_getDesignatorList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1163:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "select pageID into @pageID from page_detail  where pageName = 'Sales Order Shipment Summary';  \n" +
                "  \n" +
                "update page_detail  \n" +
                "set pageRoute = 'app.transaction.salesordershipment'  \n" +
                "where pageID = @pageID;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1164,'1.00','V1','Update route in page detail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1164:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "alter table salesorderdet add column woComment varchar(1000);  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1165,'1.00','V1','Add WOComment field in Salesorder detail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1165:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021  *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`,  \n" +
                " `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES ('Allow to Lock/Unlock Customer Applied Credit Memo', 1, 0, fun_DatetimetoUTCDateTime(),  \n" +
                " 1, fun_DatetimetoUTCDateTime(), 1, 1) ;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1166,'1.00','V1',' feature master entry for Lock/Unlock Customer Applied Credit Memo - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1166:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustInvCMTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustInvCMTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvCMList JSON,  \n" +
                "	IN pTransType VARCHAR(10),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_oldLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_cntOfInvCMWhichNotFullyApplied INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedInvCM INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvCM INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE v_cntOfUnLockCM INT;  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "  \n" +
                "	SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedInvCM  = 0;  \n" +
                "	SET v_cntOfAlreadyVoidedPMT = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedPMT = 0;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
                "		tblMstID INT NOT NULL,  \n" +
                "		invCMPMTNumber VARCHAR(150),  \n" +
                "		invCMPMTDate DATE,  \n" +
                "		entityShortCode VARCHAR(10),  \n" +
                "		entityNameForChange VARCHAR(150)  \n" +
                "	);  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = NULL;  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInvCM = 0;  \n" +
                "		SET v_newLockStatusInvCM = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "		SET v_newLockStatusPMT = NULL;  \n" +
                "		SET v_oldLockStatusInvCM = 1;  \n" +
                "		SET v_newLockStatusInvCM = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice/credit memo List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvCMList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvCMList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvCMList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invCMMstID` INT PATH \"$.invCMMstID\" ,  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvCMList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pTransType = 'C') THEN  \n" +
                "  \n" +
                "		/* check if any locked/unlocked invoice/CM there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedInvCM  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isLocked = v_newLockStatusInvCM  \n" +
                "		AND transType = pTransType  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "		/* check if any voided payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isPaymentVoided = 1  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* check if any locked/unlocked payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND lockStatus = v_newLockStatusPMT  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  \n" +
                "		IF (pIsLockTransaction = 1) THEN  \n" +
                "			/* get list of invoice/CM whose status not in RE,NP - then not allowed to lock  \n" +
                "				RE-Full Credit Applied or NP-No Pending Credit */  \n" +
                "			SELECT COUNT(1) INTO v_cntOfInvCMWhichNotFullyApplied  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND paymentStatus NOT IN ('RE','NP')  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM = 0 AND v_cntOfInvCMWhichNotFullyApplied = 0  \n" +
                "		AND v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0) THEN  \n" +
                "  \n" +
                "  \n" +
                "		IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "				/* get all invoice/CM transaction to locked/unlocked */  \n" +
                "				INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "				SELECT id, creditMemoNumber, creditMemoDate, 'C', 'Customer Credit Memo'  \n" +
                "				FROM customer_packingslip  \n" +
                "				WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "				AND isLocked = v_oldLockStatusInvCM  \n" +
                "				AND paymentStatus IN ('RE','NP')  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			ELSE  \n" +
                "				/* update all invoice/CM transaction to locked/unlocked */  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET isLocked = v_newLockStatusInvCM , lockedAt = v_newLockedAt ,  \n" +
                "				    lockedBy = v_newLockedBy , lockedByRole = v_newLockedByRoleId ,  \n" +
                "				    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    updatedBy = v_newLockedBy  \n" +
                "				WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "				AND isLocked = v_oldLockStatusInvCM  \n" +
                "				AND paymentStatus IN ('RE','NP')  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "				/* get all applied CM transaction to locked/unlocked */  \n" +
                "				INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "				SELECT refCustCreditMemoID, paymentNumber, NULL, 'CA', 'Applied Customer Credit Memo'  \n" +
                "				FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			ELSE  \n" +
                "				/* update all applied CM transaction to locked/unlocked */  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "				    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "				    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    updatedBy = v_newLockedBy  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* credit memo lock/unlock - If credit memo dependent Refund then Lock/Unlock (Check for all credit memo must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvCM FROM tt_UI_CustInvCMList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/* outer loop of main CM list - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvCM DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockCM = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all credit memo contain in refund transaction that all locked or not  \n" +
                "							  when view only that time no need to check current CM locked or not  \n" +
                "							  as we do actual lock above when doing lock only not while view only */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockCM  \n" +
                "							FROM customer_packingslip  \n" +
                "							WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
                "											THEN refRefundCustCreditMemoID != (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "										ELSE 1=1 END)  \n" +
                "									)  \n" +
                "							AND isLocked != 1 ;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all credit memo locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockCM = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockCM IS NOT NULL AND v_cntOfUnLockCM = 0) THEN  \n" +
                "  \n" +
                "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "  \n" +
                "								/* get to be lock refund transaction */  \n" +
                "								INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "								SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "  \n" +
                "							ELSE  \n" +
                "								/* update refund transaction to locked */  \n" +
                "								UPDATE packingslip_invoice_payment  \n" +
                "								SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "								    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "								     updatedBy = v_newLockedBy  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					/* get to be lock all invoice which contain in applied CM with fully received */  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
                "					FROM customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "						 /*(SELECT refCustPackingslipInvoiceID ,  \n" +
                "								MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
                "							FROM (  \n" +
                "								SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
                "									pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
                "								FROM packingslip_invoice_payment_det pipd  \n" +
                "									JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "								WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
                "														FROM packingslip_invoice_payment_det  \n" +
                "														WHERE refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "																	WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "																	AND isPaymentVoided = 0 AND isDeleted = 0)  \n" +
                "														AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "														)  \n" +
                "								AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "								) AS tiila  \n" +
                "							 GROUP BY refCustPackingslipInvoiceID  \n" +
                "							) AS toila  \n" +
                "							ON cps.id = toila.refCustPackingslipInvoiceID  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN toila.isInvLockAllowed = 1 ELSE 1=1 END)  \n" +
                "							*/  \n" +
                "  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				ELSE  \n" +
                "					/* lock all invoice which contain in applied CM with fully received */  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "						 /* JOIN (SELECT refCustPackingslipInvoiceID ,  \n" +
                "								MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
                "							FROM (  \n" +
                "								SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
                "									pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
                "								FROM packingslip_invoice_payment_det pipd  \n" +
                "									JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "								WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
                "														FROM packingslip_invoice_payment_det  \n" +
                "														WHERE refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "																	WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "																	AND isPaymentVoided = 0 AND isDeleted = 0)  \n" +
                "														AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "														)  \n" +
                "								AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "								) AS tiila  \n" +
                "							 GROUP BY refCustPackingslipInvoiceID  \n" +
                "							) AS toila  \n" +
                "							ON cps.id = toila.refCustPackingslipInvoiceID  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN toila.isInvLockAllowed = 1 ELSE 1=1 END)  \n" +
                "								*/  \n" +
                "  \n" +
                "					SET cps.isLocked = v_newLockStatusInvCM , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyLockedUnlockedInvCM > 0) OR (v_cntOfInvCMWhichNotFullyApplied > 0)  \n" +
                "		OR (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[1] - is any CM which not fully used */  \n" +
                "	IF (v_cntOfInvCMWhichNotFullyApplied > 0) THEN  \n" +
                "		SELECT 1 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Inv/CM Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM > 0) THEN  \n" +
                "		SELECT 1 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - is Payment Already Voided - applied CM */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - is Payment Already locked - applied CM */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] - view to be lock/unlock record list */  \n" +
                "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 21-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_CurrRefGencTransModeID INT;  \n" +
                "	DECLARE v_cntOfNotAllowedToLockRecord INT;  \n" +
                "  \n" +
                "	SET v_cntOfNotAllowedToLockRecord = 0;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_oldLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_oldLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_newLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_newLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* temporary table for display to be lock/unlock records */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
                "		tblMstID INT NOT NULL,  \n" +
                "		invCMPMTNumber VARCHAR(150),  \n" +
                "		invCMPMTDate DATE,  \n" +
                "		entityShortCode VARCHAR(10),  \n" +
                "		entityNameForChange VARCHAR(150)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* when customer refund then check all records valid or not - to display list */  \n" +
                "	IF (pRefPaymentMode = 'CR' AND pIsLockTransaction = 1) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tt_CustRefundValidatedList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "			SELECT pip.id AS custRefundMstID, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "				`fun_getCustRefundSubStatusNameByID`(pip.subStatus) AS refundSubStatusName ,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN COUNT(pipd.refRefundCustCreditMemoID)  \n" +
                "					WHEN refGencTransModeID = -9 THEN COUNT(pipd.refRefundPaymentID)  \n" +
                "				    ELSE NULL END) detItemCount,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN  \n" +
                "						(SELECT COUNT(1) FROM customer_packingslip WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundCustCreditMemoID))) AND isLocked != 1)  \n" +
                "					WHEN refGencTransModeID = -9 THEN  \n" +
                "						(SELECT COUNT(1) FROM packingslip_invoice_payment WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundPaymentID))) AND lockStatus != 'LC')  \n" +
                "					ELSE NULL END) detItemNotLockedCount  \n" +
                "			FROM packingslip_invoice_payment pip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON pip.id = pipd.refPayementid AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "			WHERE pip.id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "			 GROUP BY pip.id , pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "			 	`fun_getCustRefundSubStatusNameByID`(pip.subStatus) , pip.refGencTransModeID  \n" +
                "			;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_cntOfNotAllowedToLockRecord  \n" +
                "			FROM tt_CustRefundValidatedList  \n" +
                "			WHERE ((detItemNotLockedCount > 0) OR (subStatus != 4))  \n" +
                "			;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0 AND v_cntOfNotAllowedToLockRecord = 0) THEN  \n" +
                "  \n" +
                "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "			/* get list of all payments transaction to be locked/unlocked - selected from UI */  \n" +
                "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "			SELECT id, paymentNumber, paymentDate, pRefPaymentMode,  \n" +
                "				(CASE WHEN pRefPaymentMode = 'R' THEN  'Customer Payment' WHEN pRefPaymentMode = 'WOFF' THEN 'Customer Write Off'  \n" +
                "					WHEN pRefPaymentMode = 'CR' THEN 'Customer Refund' END) AS entityNameForChange  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "		ELSE  \n" +
                "			/* update all payments transaction to locked/unlocked - selected from UI */  \n" +
                "			UPDATE packingslip_invoice_payment  \n" +
                "			SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = v_newLockedBy  \n" +
                "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					/* get all payment dependent write off if any */  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT refPaymentID, paymentNumber, paymentDate, 'WOFF', 'Customer Write Off'  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				ELSE  \n" +
                "					/* update all payment dependent write off if any. we are maintaining lockStatus NA,RL for payment only  \n" +
                "					 not for write off, refund, applied CM so condition accordingly */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END)  \n" +
                "							 , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = v_newLockedBy  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CR')) THEN  \n" +
                "			/* payment lock/unlock - If payment dependent Refund then Lock/Unlock (Check for all payment must be lock)  \n" +
                "			    OR direct customer refund Lock/Unlock case */  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "				/* when refund then no need of loop to get refRefundIDs. we already have selected refund list  \n" +
                "					so set 1 as default to start outer loop*/  \n" +
                "				SELECT 1 INTO totCustInvPayments ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			/* outer loop of main payment - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT pipd.refPayementid  \n" +
                "						FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "									AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "						WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "						GROUP BY pipd.refPayementid ;  \n" +
                "				ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT invPaymentMstID AS refPayementid , pip.refGencTransModeID  \n" +
                "						FROM tt_UI_CustInvoicePaymentList tuip  \n" +
                "							JOIN packingslip_invoice_payment pip ON tuip.invPaymentMstID = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "  \n" +
                "						;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'CR') THEN  \n" +
                "								SELECT refGencTransModeID INTO v_CurrRefGencTransModeID  \n" +
                "								FROM tt_refundPMTMasterIDs LIMIT i,1 ;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -9)) THEN  \n" +
                "								/* check all payments contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
                "											THEN refRefundPaymentID != (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "											ELSE 1=1 END)  \n" +
                "										)  \n" +
                "								AND lockStatus != 'LC' ;  \n" +
                "  \n" +
                "							ELSEIF (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -6) THEN  \n" +
                "								/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND isLocked != 1 ;  \n" +
                "							ELSE  \n" +
                "								/* in case of Transaction Mode other than over payment then no need to check any one unlock case */  \n" +
                "								SET v_cntOfUnLockPMT = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "								/* for lock payment case need to display refund records too */  \n" +
                "								IF (pRefPaymentMode = 'R') THEN  \n" +
                "									/* get refund transaction to be lock/unlock */  \n" +
                "									INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "									SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
                "									FROM packingslip_invoice_payment  \n" +
                "									WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "										ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "									AND refPaymentMode = 'CR'  \n" +
                "									AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* update refund transaction to locked/unlocked */  \n" +
                "								UPDATE packingslip_invoice_payment  \n" +
                "								SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END) ,  \n" +
                "								  lockedAt = v_newLockedAt ,  \n" +
                "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "								    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "								     updatedBy = v_newLockedBy  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 0)) THEN  */  \n" +
                "  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
                "					FROM customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				ELSE  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				/* ELSEIF (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 1) THEN  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						 JOIN (SELECT refCustPackingslipInvoiceID ,  \n" +
                "								MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
                "							FROM (  \n" +
                "								SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
                "									pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
                "								FROM packingslip_invoice_payment_det pipd  \n" +
                "									JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "								WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
                "														FROM packingslip_invoice_payment_det  \n" +
                "														WHERE refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "														AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "														)  \n" +
                "								AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "								) AS tiila  \n" +
                "							 GROUP BY refCustPackingslipInvoiceID  \n" +
                "							) AS toila  \n" +
                "							ON cps.id = toila.refCustPackingslipInvoiceID AND toila.isInvLockAllowed = 1  \n" +
                "  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				END IF;  */  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if no temp table tt_CustRefundValidatedList created then create it with no records */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (v_cntOfNotAllowedToLockRecord > 0)  \n" +
                "		OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* resp[3] - get is Any Not Allowed To Lock Record found */  \n" +
                "	 IF (v_cntOfNotAllowedToLockRecord > 0) THEN  \n" +
                "		SELECT 1 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 ELSE  \n" +
                "		SELECT 0 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 /* resp[4] - get all validateed refund record list */  \n" +
                "	 SELECT * FROM tt_CustRefundValidatedList ;  \n" +
                "  \n" +
                "	 /* Resp[5] - view to be lock/unlock record list */  \n" +
                "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 21-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(  \n" +
                "	IN pCustCreditMemoMstID INT ,  \n" +
                "	IN pCustomerPaymentMstID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "			cps.totalAmount ,  cps.agreedRefundAmt , cps.isLocked ,  \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,  \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,  \n" +
                "			psip.paymentNumber , psip.lockStatus,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN NULL ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
                "			cps.paymentStatus AS CMPaymentStatus,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) AS updatedByEmpInitialName,  \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmpID ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) AS createdByEmpInitialName ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmpID  \n" +
                "	FROM customer_packingslip AS cps  \n" +
                "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID  \n" +
                "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)  \n" +
                "	WHERE cps.id = pCustCreditMemoMstID  \n" +
                "	AND cps.isDeleted = 0  \n" +
                "		;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustInvoiceDetForVoidPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustInvoiceDetForVoidPayment`(  \n" +
                "	IN pVoidCustPaymentMstID INT,  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(10),  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vRefCustCreditMemoMstID INT;  \n" +
                "	DECLARE vRefGencTransModeID INT;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'R' OR pRefPaymentModeOfInvPayment = 'CA' OR pRefPaymentModeOfInvPayment = 'WOFF') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "			SELECT refCustPackingslipInvoiceID  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = pVoidCustPaymentMstID  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy AS  \n" +
                "			SELECT refCustPackingslipInvoiceID  \n" +
                "			FROM temp_DB_ChangeStatus_CustInvoiceMstIDs ;  \n" +
                "  \n" +
                "		/* change invoice payment status */  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "				 FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "				GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "			 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "		SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "						cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "					   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "						cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "					   ELSE cps.paymentStatus END  \n" +
                "					) ,  \n" +
                "			cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
                "			cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy)  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if Applied Credit Memo void then change Credit Memo payment status */  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'CA') THEN  \n" +
                "  \n" +
                "		SELECT refCustCreditMemoID INTO vRefCustCreditMemoMstID  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pVoidCustPaymentMstID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID = vRefCustCreditMemoMstID  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID = vRefCustCreditMemoMstID  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "		SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "					   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "					   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "								(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "					   ELSE cps.paymentStatus END  \n" +
                "					) ,  \n" +
                "			cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
                "			cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
                "			cps.updatedBy = pUserID,  \n" +
                "			cps.updateByRoleId = pUserRoleID ,  \n" +
                "			cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE cps.id = vRefCustCreditMemoMstID  \n" +
                "		AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Update payment or credit memo payment status in case of customer refund voided */  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'CR') THEN  \n" +
                "  \n" +
                "		SELECT refGencTransModeID INTO vRefGencTransModeID  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pVoidCustPaymentMstID ;  \n" +
                "  \n" +
                "		IF (vRefGencTransModeID = -9) THEN  /* Customer Payment Refund */  \n" +
                "			/* update refund payment status  */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "				ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)  \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				lockStatus =  'NA',  \n" +
                "				lockedAt = NULL ,  \n" +
                "				lockedBy = NULL ,  \n" +
                "				lockedByRoleId = NULL ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT refRefundPaymentID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "		ELSEIF (vRefGencTransModeID = -6) THEN  /* Credit Memo Refund */  \n" +
                "			/* update customer credit memo - payment status and refund status  */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "				LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "						FROM packingslip_invoice_payment  \n" +
                "						WHERE refCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "					 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < totalAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = totalAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "						     ELSE 'NA' END),  \n" +
                "				cps.isLocked = 0, cps.lockedAt = NULL,  \n" +
                "				cps.lockedBy = NULL, cps.lockedByRole = NULL,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM packingslip_invoice_payment_det WHERE refPayementid = pVoidCustPaymentMstID AND isDeleted = 0)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ChangeStatus_CustInvoiceMstIDs_Copy;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 21-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pCustomerPaymentMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vTotRefundIssuedOfPayment DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND id != pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		/* get total refunded amount till now  */  \n" +
                "		SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfPayment  \n" +
                "		FROM packingslip_invoice_payment_det  \n" +
                "		WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "		/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "		IF (IFNULL(pAgreedRefundAmt,0) < vTotRefundIssuedOfPayment) THEN  \n" +
                "			SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				pipd.id invPaymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL  \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL  \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.* ,  \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,  \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "			-- SELECT 'update';  \n" +
                "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustInvPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "					SELECT refCustPackingslipInvoiceID  \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det pipd  \n" +
                "					JOIN customer_packingslip cps ON pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "				SET pipd.isDeleted = 1, pipd.deletedBy = pUserID,  \n" +
                "					pipd.deleteByRoleId = pUserRoleID, pipd.deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE pipd.id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "				AND pipd.isPaymentVoided = 0  \n" +
                "				AND pipd.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "						 FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END  \n" +
                "							) ,  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND cps.isLocked = 0  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate , invoiceMstID  \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl  \n" +
                "					ON pipd.id = tucipdl.invPaymentDetMstID  \n" +
                "				JOIN customer_packingslip cps ON tucipdl.invoiceMstID = cps.id AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),  \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,  \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipdl  \n" +
                "				JOIN customer_packingslip cps ON tucipdl.invoiceMstID = cps.id AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "			WHERE invPaymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isLocked = 0 AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pDeleteCustInvPaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "					)  \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT refCustPackingslipInvoiceID  \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN customer_packingslip cps ON pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "			SET pipd.isDeleted = 1, pipd.deletedBy = pUserID,  \n" +
                "				pipd.deleteByRoleId = pUserRoleID, pipd.deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isLocked = 0 AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created temp table from above */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* common update for all */  \n" +
                "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)  \n" +
                "		AND (vCountExistsCheckNo = 0) AND (vIsAgreedRefundLessThanTotIssued = 0)) THEN  \n" +
                "  \n" +
                "		/* update invoice payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			isMarkForRefund = pisMarkForRefund ,  \n" +
                "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
                "			refundStatus = (CASE WHEN pRefPaymentMode = 'R' THEN  \n" +
                "						(CASE WHEN pisMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN vTotRefundIssuedOfPayment = 0 THEN 'PE'  \n" +
                "								WHEN vTotRefundIssuedOfPayment < pPaymentAmount THEN 'PR'  \n" +
                "								WHEN vTotRefundIssuedOfPayment = pPaymentAmount THEN 'FR'  \n" +
                "							   END)  \n" +
                "						ELSE 'NA' END)  \n" +
                "					ELSE NULL END) ,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0 */  \n" +
                "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				NULL, 0, NULL, NULL,  \n" +
                "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList tuwocipd  \n" +
                "				JOIN customer_packingslip cps ON tuwocipd.invoiceMstID = cps.id  \n" +
                "						AND cps.isLocked = 0 AND cps.isDeleted = 0;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */  \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */  \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id = pCustomerPaymentMstID  \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;  \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET paymentAmount = pPaymentAmount,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pCustomerPaymentMstID  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
                "								    (CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							   WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
                "							   ELSE 'PE' END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isLocked = 0 AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "					ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "  \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END  \n" +
                "			WHERE psip.id = pCustomerPaymentMstID  \n" +
                "			AND psip.lockStatus != 'LC'  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)  \n" +
                "		OR (vCountExistsCheckNo > 0) OR (vIsAgreedRefundLessThanTotIssued > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[4] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE  \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1167,'1.00','V1',' Sample entry - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1167:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "UPDATE systemconfigrations sc SET sc.values = 'All Purchase Order or Sales Order by Flextron Circuit Assembly are subject to Terms and Conditions posted at  <a href=\"https://www.flextronassembly.com/terms-conditions\"  \n" +
                "target=\"_blank\"> https://www.flextronassembly.com/terms-conditions</a>' WHERE sc.key = 'Terms & Condition';  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1168,'1.00','V1','Update Terms&Condition in Data Key - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1168:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-10-2021  *********************************** */
                "drop procedure if exists Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(1000);  \n" +
                "    DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" and (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0	where sodet.isDeleted = 0  \n" +
                "															and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%')	))\");  \n" +
                "		SET detailWhereClause = CONCAT(\" (soDetail.PIDCode like '%\",pSearchText,\"%'  \n" +
                "										OR soDetail.mfgPN like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.poNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.lastCPSNumber like '%\",pSearchText,\"%' )\");  \n" +
                "                                        /*OR soDetail.refSalesOrderID in (select id from salesordermst where isDeleted = 0  \n" +
                "																		and (salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "																			or poNumber like '%\",pSearchText,\"%')))\");    */  \n" +
                "    ELSE  \n" +
                "        SET detailWhereClause = '1=1';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder where \",headerWhereClause, \"  \n" +
                "     group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName  \n" +
                "        order by soDate desc, soId desc \", rowNumWhere) ;  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workorderDet.woNumberList) woComment  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(shipQty) shippedQty from customer_packingslip_det where isDeleted = 0 group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select salesOrderDetailID,group_concat(wo.woNumber) woNumberList from workorder_salesorder_details woSo  join workorder wo  \n" +
                "                on woSo.woID = wo.woID and woSo.isDeleted = 0 where wo.isDeleted = 0 group by woSo.salesOrderDetailID) as workorderDet on workorderDet.salesOrderDetailID =  sod.id  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "				/*PIDCode, mfgPN, rohsName, rohsIcon, */  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "				cpsIndex  \n" +
                "                 -- woNumberList  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex  \n" +
                "               -- workorderDet.woNumberList  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                where  \" , detailWhereClause);  \n" +
                "  -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                " 	SELECT * from temp_so_rel_detail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1169,'1.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1169:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(1000);  \n" +
                "    DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" and (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0	where sodet.isDeleted = 0  \n" +
                "															and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%')	))\");  \n" +
                "		SET detailWhereClause = CONCAT(\" (soDetail.PIDCode like '%\",pSearchText,\"%'  \n" +
                "										OR soDetail.mfgPN like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.poNumber like '%\",pSearchText,\"%'  \n" +
                "                                        OR mst.lastCPSNumber like '%\",pSearchText,\"%' )\");  \n" +
                "                                        /*OR soDetail.refSalesOrderID in (select id from salesordermst where isDeleted = 0  \n" +
                "																		and (salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "																			or poNumber like '%\",pSearchText,\"%')))\");    */  \n" +
                "    ELSE  \n" +
                "        SET detailWhereClause = '1=1';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder where \",headerWhereClause, \"  \n" +
                "     group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName  \n" +
                "        order by soDate desc, soId desc \", rowNumWhere) ;  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workorderDet.woNumberList) woComment  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select salesOrderDetailID,group_concat(wo.woNumber) woNumberList from workorder_salesorder_details woSo  join workorder wo  \n" +
                "                on woSo.woID = wo.woID and woSo.isDeleted = 0 where wo.isDeleted = 0 group by woSo.salesOrderDetailID) as workorderDet on workorderDet.salesOrderDetailID =  sod.id  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, releaseLevelComment, internalComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "				/*PIDCode, mfgPN, rohsName, rohsIcon, */  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "				cpsIndex  \n" +
                "                 -- woNumberList  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex  \n" +
                "               -- workorderDet.woNumberList  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                where  \" , detailWhereClause);  \n" +
                "  -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                " 	SELECT * from temp_so_rel_detail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1170,'1.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1170:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-10-2021  *********************************** */
                "UPDATE feature_mst  \n" +
                "SET featureName = 'Allow to Lock/Unlock Customer Invoice' ,  \n" +
                "	updatedBy = 1,  updateByRoleId = 1, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "WHERE featureName = 'Allow to Lock Customer Invoice' ;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1171,'1.00','V1',' update feature entry entry Allow to Lock Customer Invoice - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1171:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustInvCMTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustInvCMTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvCMList JSON,  \n" +
                "	IN pTransType VARCHAR(10),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_oldLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_cntOfInvCMWhichNotFullyApplied INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedInvCM INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvCM INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE v_cntOfUnLockCM INT;  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "  \n" +
                "	SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedInvCM  = 0;  \n" +
                "	SET v_cntOfAlreadyVoidedPMT = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedPMT = 0;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
                "		tblMstID INT NOT NULL,  \n" +
                "		invCMPMTNumber VARCHAR(150),  \n" +
                "		invCMPMTDate DATE,  \n" +
                "		entityShortCode VARCHAR(10),  \n" +
                "		entityNameForChange VARCHAR(150)  \n" +
                "	);  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = NULL;  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInvCM = 0;  \n" +
                "		SET v_newLockStatusInvCM = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "		SET v_newLockStatusPMT = NULL;  \n" +
                "		SET v_oldLockStatusInvCM = 1;  \n" +
                "		SET v_newLockStatusInvCM = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice/credit memo List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvCMList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvCMList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvCMList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invCMMstID` INT PATH \"$.invCMMstID\" ,  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvCMList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pTransType IN ('C','I')) THEN  \n" +
                "  \n" +
                "		/* check if any locked/unlocked invoice/CM there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedInvCM  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isLocked = v_newLockStatusInvCM  \n" +
                "		AND transType = pTransType  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "		/* check if any voided payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isPaymentVoided = 1  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* check if any locked/unlocked payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND lockStatus = v_newLockStatusPMT  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/*IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  */  \n" +
                "		IF (pIsLockTransaction = 1) THEN  \n" +
                "			/* get list of invoice/CM whose status not in RE,NP - then not allowed to lock  \n" +
                "				RE-Fully Received/Full Credit Applied , NP-No Pending Credit */  \n" +
                "			SELECT COUNT(1) INTO v_cntOfInvCMWhichNotFullyApplied  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND paymentStatus NOT IN ('RE','NP')  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "		END IF;  \n" +
                "	/*END IF;  */  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM = 0 AND v_cntOfInvCMWhichNotFullyApplied = 0  \n" +
                "		AND v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0) THEN  \n" +
                "  \n" +
                "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "			/* get all invoice/CM transaction to locked/unlocked */  \n" +
                "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "			SELECT id,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN invoiceNumber  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoNumber ELSE NULL END) AS invCMPMTNumber,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN invoiceDate  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoDate ELSE NULL END) AS invCMPMTDate,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN 'I'  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'C' ELSE NULL END) AS entityShortCode,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN 'Customer Invoice'  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'Customer Credit Memo' ELSE NULL END) AS entityNameForChange  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "		ELSE  \n" +
                "			/* update all invoice/CM transaction to locked/unlocked */  \n" +
                "			UPDATE customer_packingslip  \n" +
                "			SET isLocked = v_newLockStatusInvCM , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRole = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = v_newLockedBy  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "				/* get all applied CM transaction to locked/unlocked */  \n" +
                "				INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "				SELECT refCustCreditMemoID, paymentNumber, NULL, 'CA', 'Applied Customer Credit Memo'  \n" +
                "				FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			ELSE  \n" +
                "				/* update all applied CM transaction to locked/unlocked */  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "				    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "				    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    updatedBy = v_newLockedBy  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* credit memo lock/unlock - If credit memo dependent Refund then Lock/Unlock (Check for all credit memo must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvCM FROM tt_UI_CustInvCMList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/* outer loop of main CM list - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvCM DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockCM = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all credit memo contain in refund transaction that all locked or not  \n" +
                "							  when view only that time no need to check current CM locked or not  \n" +
                "							  as we do actual lock above when doing lock only not while view only */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockCM  \n" +
                "							FROM customer_packingslip  \n" +
                "							WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
                "											THEN refRefundCustCreditMemoID != (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "										ELSE 1=1 END)  \n" +
                "									)  \n" +
                "							AND isLocked != 1 ;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all credit memo locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockCM = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockCM IS NOT NULL AND v_cntOfUnLockCM = 0) THEN  \n" +
                "  \n" +
                "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "  \n" +
                "								/* get to be lock refund transaction */  \n" +
                "								INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "								SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "  \n" +
                "							ELSE  \n" +
                "								/* update refund transaction to locked */  \n" +
                "								UPDATE packingslip_invoice_payment  \n" +
                "								SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "								    updateByRoleId = v_newLockedByRoleId , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "								     updatedBy = v_newLockedBy  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					/* get to be lock all invoice which contain in applied CM with fully received */  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
                "					FROM customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				ELSE  \n" +
                "					/* lock all invoice which contain in applied CM with fully received */  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					SET cps.isLocked = v_newLockStatusInvCM , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyLockedUnlockedInvCM > 0) OR (v_cntOfInvCMWhichNotFullyApplied > 0)  \n" +
                "		OR (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[1] - is any CM which not fully used */  \n" +
                "	IF (v_cntOfInvCMWhichNotFullyApplied > 0) THEN  \n" +
                "		SELECT 1 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Inv/CM Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM > 0) THEN  \n" +
                "		SELECT 1 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - is Payment Already Voided - applied CM */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - is Payment Already locked - applied CM */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] - view to be lock/unlock record list */  \n" +
                "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 28-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pRefVoidPaymentId INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pRemark VARCHAR(255),  \n" +
                "	IN pPayToName VARCHAR(255),  \n" +
                "	IN pPayToAddress VARCHAR(255),  \n" +
                "	IN pVoidPaymentReason VARCHAR(255),  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vNewPaymentID INT;  \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);  \n" +
                "	DECLARE vIsAlreadyLockedTrans TINYINT;  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */  \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount  \n" +
                "	FROM 	packingslip_invoice_payment  \n" +
                "	WHERE 	id = pRefVoidPaymentId  \n" +
                "	AND isPaymentVoided = 0  \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vIsAlreadyLockedTrans = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN  \n" +
                "		/*check duplicate check number validation*/  \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	isdeleted = 0  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND bankAccountMasID = pBankAccountMasID  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 IF (pRefPaymentModeOfInvPayment = 'R') THEN  \n" +
                "		/* if Receivable payment already locked then not allowed to void and rereceive */  \n" +
                "		SELECT COUNT(1) INTO vIsAlreadyLockedTrans  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pRefVoidPaymentId  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND lockStatus = 'LC'  \n" +
                "		AND isPaymentVoided = 0 AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCount = 1 AND vCountExistsCheckNo = 0 AND vIsAlreadyLockedTrans = 0) THEN  \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment  \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,  \n" +
                "			isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment  \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,  \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, depositBatchNumber,  \n" +
                "				lockStatus, refundStatus)  \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,  \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)  \n" +
                "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL'  \n" +
                "					ELSE NULL END),  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END)  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/  \n" +
                "		UPDATE 	packingslip_invoice_payment_det  \n" +
                "		SET 	isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
                "			pUserID, pRoleID, paymentAmount,  \n" +
                "			FALSE, refCustPackingslipInvoiceID  \n" +
                "		FROM 	packingslip_invoice_payment_det  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;  \n" +
                "	ELSE  \n" +
                "		IF vCountExistsCheckNo != 0 THEN  \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;  \n" +
                "		ELSEIF vCount = 0 THEN  \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId  \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN  \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;  \n" +
                "			ELSE  \n" +
                "				SELECT 'NOT_FOUND' AS message;  \n" +
                "			END IF;  \n" +
                "		ELSEIF vIsAlreadyLockedTrans = 1 THEN  \n" +
                "			SELECT 'ALREADY_LOCKED' AS message;  \n" +
                "		ELSE  \n" +
                "			SELECT 'NOT_FOUND' AS message;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pRefundStatus VARCHAR(5),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vCountSameCMApplied INT;  \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vCountSameCMApplied = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken >> R - Receivable payment */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "		/* check for duplicate credit memo applied entry >> C - Credit Memo Applied */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					-- `newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				cps.status,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db  \n" +
                "			> original Payment Amount Of Invoice  mismatch  \n" +
                "			> invoice Total Paid Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "		-- select 'create';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SET vLockStatusToBe = 'NA' ;  \n" +
                "				IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "					IF ((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)  \n" +
                "									FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN  \n" +
                "						SET vLockStatusToBe = 'RL' ;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "			ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "				SET vLockStatusToBe = NULL ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt` ,  `refundStatus` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "				pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "				pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "				vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,  \n" +
                "				pisMarkForRefund, pAgreedRefundAmt, pRefundStatus,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedInvPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* if any invoice selected from UI then create for Customer Payment OR Applied Credit memo */  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "  \n" +
                "		        IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "				INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "						`appliedDate` ,  \n" +
                "						`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "						`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "				SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "					appliedDate ,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "					fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  /* CA - Credit Memo applied */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
                "									(CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							 WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
                "							 ELSE 'PE' END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0  \n" +
                "		   write off 2 way >> 1. From Customer payment page 2. Separate write off transaction */  \n" +
                "		IF (pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` , `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason , 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				NULL, 0, NULL, NULL,  \n" +
                "				0, NULL, insertedInvPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pTotSelectedInvOfCust > 0) THEN  \n" +
                "			/* update invoice payment status */  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT invoiceMstID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT invoiceMstID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isLocked = 0 AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "			/*UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null  \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isDeleted = 0	;  */  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */  \n" +
                "	IF (pRefPaymentMode = 'R' OR pRefPaymentMode = 'CA') THEN  \n" +
                "		SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedInvPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */  \n" +
                "	IF (vCountSameCMApplied > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE  \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 28-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(  \n" +
                "	IN pCustInvoicePaymentDetList JSON,  \n" +
                "	IN pCustomerPaymentMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedInvOfCust INT,  \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pRefCustCreditMemoID INT,  \n" +
                "	IN pisMarkForRefund TINYINT,  \n" +
                "	IN pAgreedRefundAmt DECIMAL(18,8),  \n" +
                "	IN pIsWriteOffExtraAmount TINYINT,  \n" +
                "	IN pPaymentAmountForWriteOffCustPayment DECIMAL(18,8),  \n" +
                "	IN pPaymentNumberForWriteOffCustPayment VARCHAR(50),  \n" +
                "	IN pSystemIDForWriteOffCustPayment VARCHAR(20),  \n" +
                "	IN pPaymentTypeForWriteOffCustPayment INT,  \n" +
                "	IN pWriteOffCustInvoicePaymentDetList JSON,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pWriteOffReason VARCHAR(1000),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;  \n" +
                "	DECLARE insertedWriteOffPaymentMstID INT;  \n" +
                "	DECLARE vTotRefundIssuedOfPayment DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo DECIMAL(18,8);  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND id != pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		/* get total refunded amount till now  */  \n" +
                "		SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfPayment  \n" +
                "		FROM packingslip_invoice_payment_det  \n" +
                "		WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "		AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "		;  \n" +
                "  \n" +
                "		/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "		IF (IFNULL(pAgreedRefundAmt,0) < vTotRefundIssuedOfPayment) THEN  \n" +
                "			SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0  \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustInvoicePaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",  \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,  \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,  \n" +
                "					-- `newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"  \n" +
                "				)  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS  \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,  \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,  \n" +
                "				pipd.id invPaymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "			FROM customer_packingslip cps  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "			AND cps.isDeleted = 0  \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "		;  \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL  \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL  \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "			SELECT tucipl.* ,  \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,  \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN  \n" +
                "			-- SELECT 'update';  \n" +
                "			IF (pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustInvPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "					SELECT refCustPackingslipInvoiceID  \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det pipd  \n" +
                "					JOIN customer_packingslip cps ON pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "				SET pipd.isDeleted = 1, pipd.deletedBy = pUserID,  \n" +
                "					pipd.deleteByRoleId = pUserRoleID, pipd.deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE pipd.id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "				AND pipd.isPaymentVoided = 0  \n" +
                "				AND pipd.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "						 FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END  \n" +
                "							) ,  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "				AND cps.isLocked = 0  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate , invoiceMstID  \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList  \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl  \n" +
                "					ON pipd.id = tucipdl.invPaymentDetMstID  \n" +
                "				JOIN customer_packingslip cps ON tucipdl.invoiceMstID = cps.id AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),  \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,  \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipdl  \n" +
                "				JOIN customer_packingslip cps ON tucipdl.invoiceMstID = cps.id AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "			WHERE invPaymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT invoiceMstID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT invoiceMstID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isLocked = 0 AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "			/*UPDATE customer_packingslip cps  \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID  \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL  \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''  \n" +
                "			AND cps.isLocked = 0 AND cps.isDeleted = 0	;  */  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		IF (vIsAgreedRefundLessThanTotIssued = 0 AND vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN  \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pDeleteCustInvPaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",  \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"  \n" +
                "					)  \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT refCustPackingslipInvoiceID  \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN customer_packingslip cps ON pipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "						AND cps.isLocked = 0 AND cps.isDeleted = 0  \n" +
                "			SET pipd.isDeleted = 1, pipd.deletedBy = pUserID,  \n" +
                "				pipd.deleteByRoleId = pUserRoleID, pipd.deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isLocked = 0 AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created temp table from above */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* common update for all */  \n" +
                "	IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)  \n" +
                "		AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)  \n" +
                "		AND (vCountExistsCheckNo = 0) AND (vIsAgreedRefundLessThanTotIssued = 0)) THEN  \n" +
                "  \n" +
                "		/* update invoice payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			isMarkForRefund = pisMarkForRefund ,  \n" +
                "			agreedRefundAmt = pAgreedRefundAmt ,  \n" +
                "			refundStatus = (CASE WHEN pRefPaymentMode = 'R' THEN  \n" +
                "						(CASE WHEN pisMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN vTotRefundIssuedOfPayment = 0 THEN 'PE'  \n" +
                "								WHEN vTotRefundIssuedOfPayment < pPaymentAmount THEN 'PR'  \n" +
                "								WHEN vTotRefundIssuedOfPayment = pPaymentAmount THEN 'FR'  \n" +
                "							   END)  \n" +
                "						ELSE 'NA' END)  \n" +
                "					ELSE NULL END) ,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustomerPaymentMstID  \n" +
                "		AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		/* write off payment transaction entry - only if outstanding amount > 0 */  \n" +
                "		IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL AND pPaymentAmountForWriteOffCustPayment > 0  \n" +
                "			AND pWriteOffCustInvoicePaymentDetList IS NOT NULL AND pWriteOffCustInvoicePaymentDetList != '') THEN  \n" +
                "  \n" +
                "			INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "				`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "				`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "				`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID`,  \n" +
                "				`isMarkForRefund`, `agreedRefundAmt`, `refPaymentID` ,  `refGencTransModeID` ,  \n" +
                "				`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "				`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "			VALUES (pMfgcodeID, pPaymentNumberForWriteOffCustPayment, pPaymentDate, pPaymentAmountForWriteOffCustPayment,  \n" +
                "				pPaymentTypeForWriteOffCustPayment, pAccountReference, NULL, NULL,  \n" +
                "				NULL, pWriteOffReason, 'WOFF', pSystemIDForWriteOffCustPayment,  \n" +
                "				NULL, 0, NULL, NULL,  \n" +
                "				0, NULL, pCustomerPaymentMstID , pRefGencTransModeID ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "			SET insertedWriteOffPaymentMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "  \n" +
                "			/* get/map all write off Customer Invoice Payment Detail List send from UI */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_WriteOffCustInvPaymentDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_WriteOffCustInvPaymentDetList AS  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	JSON_TABLE(  \n" +
                "				pWriteOffCustInvoicePaymentDetList,  \n" +
                "					\"$[*]\" COLUMNS(  \n" +
                "						`invoiceMstID` INT PATH \"$.invoiceMstID\",  \n" +
                "						`dueAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.dueAmountForSelectedInvoice\"  \n" +
                "					)  \n" +
                "				) AS WriteOffCustInvPaymentDetList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "			/* packingslip_invoice_payment_det entry for write off */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "				`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedWriteOffPaymentMstID, dueAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_WriteOffCustInvPaymentDetList tuwocipd  \n" +
                "				JOIN customer_packingslip cps ON tuwocipd.invoiceMstID = cps.id  \n" +
                "						AND cps.isLocked = 0 AND cps.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS  \n" +
                "				SELECT invoiceMstID  \n" +
                "				FROM temp_UI_CustInvoicePaymentDetList ;  \n" +
                "  \n" +
                "			/* update invoice payment status */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet  \n" +
                "					 FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet  \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND  \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN(SELECT invoiceMstID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)  \n" +
                "			AND cps.isLocked = 0 AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'CA' OR pRefPaymentMode = 'WOFF') THEN   /* CA - Credit Memo applied , WOFF - Write off */  \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */  \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id = pCustomerPaymentMstID  \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;  \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET paymentAmount = pPaymentAmount,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pCustomerPaymentMstID  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status */  \n" +
                "			IF (pRefPaymentMode = 'CA') THEN  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedAgainstCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "				UPDATE customer_packingslip  \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) = (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN  \n" +
                "								    (CASE WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE' ELSE \"NP\" END)  \n" +
                "							   WHEN ABS(totalAmount) > (pPaymentAmount + vTotRefundIssuedAgainstCreditMemo) THEN 'PR'  \n" +
                "							   ELSE 'PE' END  \n" +
                "							) ,  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID ,  \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isLocked = 0 AND isDeleted = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN   /* Receivable Payment : 'R' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "					ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID = pCustomerPaymentMstID  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "  \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END  \n" +
                "			WHERE psip.id = pCustomerPaymentMstID  \n" +
                "			AND psip.lockStatus != 'LC'  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)  \n" +
                "		OR (vCountExistsCheckNo > 0) OR (vIsAgreedRefundLessThanTotIssued > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */  \n" +
                "	IF (vCountExistsCheckNo > 0) THEN  \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[4] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfPayment AS totRefundIssuedOfPayment;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] -  if customer payment entry and write off extra amount then return write inserted payment master id */  \n" +
                "	IF (pRefPaymentMode = 'R' AND pIsWriteOffExtraAmount = 1 AND pPaymentAmountForWriteOffCustPayment IS NOT NULL) THEN  \n" +
                "		SELECT insertedWriteOffPaymentMstID AS insertedWriteOffPaymentMstID;  \n" +
                "	ELSE  \n" +
                "		SELECT NULL AS insertedWriteOffPaymentMstID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 28-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromInvoiceDate DATE,  \n" +
                "	IN pToInvoiceDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pRefPaymentMstID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "	DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
                "	DECLARE v_PayStatusDetTblJoin VARCHAR(1000);  \n" +
                "	DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
                "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "	SET v_FieldsForPayStatus = '\"\"';  \n" +
                "	SET v_PayStatusDetTblJoin = '';  \n" +
                "	SET v_PayRefundTblJoin = '';  \n" +
                "	SET v_FieldsForPayRefundTbl = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "	ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "								FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refRefundPaymentID IS NOT NULL  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
                "		SET v_FieldsForPayRefundTbl = CONCAT(' psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
                "  \n" +
                "		SET v_PayStatusDetTblJoin = CONCAT(' LEFT JOIN (SELECT psipd.refPayementid, IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid ');  \n" +
                "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
                "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
                "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "										ELSE \"No Pending Amount\" END)  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "									THEN \"Not Applied\"  \n" +
                "									ELSE \"Partially Applied\" END)  \n" +
                "							END) ') ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cpscm ON psip.refCustCreditMemoID = cpscm.id AND cpscm.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cpscm.creditMemoDate , cpscm.creditMemoNumber ,  \n" +
                "			cpscm.totalAmount AS creditMemoAmount ,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus ,  \n" +
                "			');  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id AS paymentMstID ,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		psip.refPaymentMode ,  \n" +
                "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,  \n" +
                "		cps.totalAmount AS invoiceOrgAmount ,  \n" +
                "		psipd.paymentAmount AS invoiceDepositAmount ,  \n" +
                "		\" ,v_FieldsForPayRefundTbl ,\"  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		psipd.appliedDate ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
                "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "			\",v_PayStatusDetTblJoin ,\"  \n" +
                "			\", v_PayRefundTblJoin ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "		\" ,v_TypeOfPaymentWhereClause, \"  \n" +
                "            AND psip.isPaymentVoided = 0  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \");  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMstID IS NOT NULL AND pRefPaymentMstID != '') THEN  \n" +
                "		SET @Sproc_RetrieveCustomerInvoicePayment= CONCAT(@Sproc_RetrieveCustomerInvoicePayment, ' AND psipd.refPayementid = ',pRefPaymentMstID,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY appliedDate DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1172,'1.00','V1',' SPS for Lock/Unlock Customer Invoice - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1172:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "    DECLARE vKitQty DECIMAL(18,8);  \n" +
                "	DECLARE vCustomerId INT;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "    SELECT 		customerID  ,kitQty  \n" +
                "	INTO		vCustomerId ,vKitQty  \n" +
                "	FROM 		salesorderdet sd  \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
                "	(  \n" +
                "		mountingTypeID INT(11),  \n" +
                "		mountingType VARCHAR(50),  \n" +
                "		connecterTypeID INT(11),  \n" +
                "		connecterType VARCHAR(50),  \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
                "		shortageLine DECIMAL(18,8),  \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
                "		shortageForInputQty DECIMAL(18,8),  \n" +
                "		releasedQty DECIMAL(18,8),  \n" +
                "		pendingQty DECIMAL(18,8),  \n" +
                "		releasePercentage DECIMAL(18,8),  \n" +
                "		totalLine INT  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "			END  \n" +
                "		) AS kitQPAWithDNP,  \n" +
                "		kl.uomMismatchedStep,  \n" +
                "		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "					(  \n" +
                "						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
                "								THEN  MIN(c.mountingTypeID)  \n" +
                "							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
                "								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "							ELSE  -1  \n" +
                "						END  \n" +
                "					) mountingTypeID,  \n" +
                "					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
                "			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "			JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "			AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "			AND 		kal.isDeleted = 0  \n" +
                "			AND			c.isDeleted = 0  \n" +
                "			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "	) AS kl  \n" +
                "	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
                "	/* Get available and allocated stock for selected assembly*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
                "                    AND ks.assyID =  pAssyID  \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;  \n" +
                "  \n" +
                "    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
                "	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
                "			count(1) TotalLine ,  \n" +
                "			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
                "			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
                "	FROM  \n" +
                "	(  \n" +
                "			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
                "					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
                "                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
                "                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
                "                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
                "							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAllocation,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
                "							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAvailableAndAllocatedStock,  \n" +
                "					(CASE  \n" +
                "						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN r.connecterTypeID = -2 THEN  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
                "									END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
                "									END)  \n" +
                "							END  \n" +
                "					END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
                "                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "								END  \n" +
                "							) AS kitQPAWithDNP,  \n" +
                "							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "					FROM 	(  \n" +
                "								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "											(  \n" +
                "												CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "														THEN  MIN(c.mountingTypeID)  \n" +
                "													WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "													ELSE  -1  \n" +
                "												END  \n" +
                "											) mountingTypeID,  \n" +
                "											IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "									JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "									LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "									AND 		kal.isDeleted = 0  \n" +
                "									AND			c.isDeleted = 0  \n" +
                "									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "							) AS kl  \n" +
                "							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
                "				) r  \n" +
                "				INNER JOIN (  \n" +
                "							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
                "									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  AND isDeleted = 0  \n" +
                "                            ) b  \n" +
                "				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
                "		) a  \n" +
                "		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
                "  \n" +
                "	SELECT 	id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			b.kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
                "            c.shortageLines,  \n" +
                "			b.calculatedKitQty,  \n" +
                "			actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "			kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "				 					CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b           inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
                "	ORDER BY poDueDate;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT  \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_release_plan_release_return_status_det`;  \n" +
                "CREATE VIEW `vu_release_plan_release_return_status_det` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND (`s`.`subAssyID` IS NULL)  \n" +
                "            AND (`s`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND EXISTS( SELECT  \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE)) `a`  \n" +
                "    WHERE  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report`;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** New Script -> 11-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1173,'1.00','V1','User Story 38248: Main branch - Kit Flow related Changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1173:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = \", pPaymentNumber ,\" \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            p.isCustConsigned,  \n" +
                "                            CASE WHEN p.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                            p.CustomerID,  \n" +
                "                            fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, \",v_mfgNameFormat,\") customerName,  \n" +
                "                            p.isNonUMIDStock,  \n" +
                "                            CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "                    LEFT JOIN mfgcodemst mc ON mc.id = p.CustomerID  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** New Script -> 12-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1174,'1.00','V1',' Bug 38530: Main Branch Do Not Create UMID value not showing on Material Receipt List page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1174:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-11-2021  *********************************** */
                "drop procedure if exists `Sproc_PurchaseOrderChangeHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderChangeHistory`(  \n" +
                "	IN ppurchaseOrderID INT,  \n" +
                "	IN ppurchaseOrderDetId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vPODetIDs VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT group_concat(id) INTO vPODetIDs FROM purchase_order_det WHERE  refPurchaseOrderID=ppurchaseOrderID AND isDeleted=0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_PurchaseOrderChangeHistory = CONCAT(\"  \n" +
                "		   select ID,Tablename,RefTransID,Colname,Oldval,Newval,fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		from dataentrychange_auditlog where (RefTransID=\",ppurchaseOrderID,\" and Tablename='PURCHASEORDERMST')  \n" +
                "         \");  \n" +
                "  \n" +
                "	IF ppurchaseOrderDetId IS NOT NULL THEN  \n" +
                "         SET @temp_Sproc_PurchaseOrderChangeHistory=CONCAT(@temp_Sproc_PurchaseOrderChangeHistory, \" OR (Tablename='PURCHASE_ORDER_DET' AND RefTransID = \",ppurchaseOrderDetId,\")\");  \n" +
                "	elseif vPODetIDs is not null then  \n" +
                "		SET @temp_Sproc_PurchaseOrderChangeHistory=CONCAT(@temp_Sproc_PurchaseOrderChangeHistory, \" OR (Tablename='PURCHASE_ORDER_DET' AND RefTransID IN (\",vPODetIDs,\"))\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_PurchaseOrderChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_PurchaseOrderChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1175,'1.00','V1','Bug 38730: Purchase order->PO change history pop-up : SQL Syntax error'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1175:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-11-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                functionalCategoryText,                mountingTypeText,                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				connectorTypeText,				noOfPositionText,				noOfPosition,				noOfRowsText,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				partPackage,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,                uomText,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  functionalCategoryText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  mountingTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connectorTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPositionText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRowsText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  partPackage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  uomText ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "  \n" +
                "  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsSettings then  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		if pIsStandards then  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if pIsPackagingAliasPart then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If pIsAlternatePart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if pIsRoHSReplacementPart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if pIsDriveTool then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsProcessMaterial then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsRequiredMattingParts then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if pIsPickupPad then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if pIsFunctionalTesingTool then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if pIsFinctionalRestingEquipment then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1176,'1.00','V1','Bug 38192: [Main Branch] DeadLock issue while saving MFR part details - SHUBHAM'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1176:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                functionalCategoryText,                mountingTypeText,                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				connectorTypeText,				noOfPositionText,				noOfPosition,				noOfRowsText,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				partPackage,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,                uomText,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  functionalCategoryText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  mountingTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connectorTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPositionText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRowsText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  partPackage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  uomText ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "  \n" +
                "  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsSettings then  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		if pIsStandards then  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if pIsPackagingAliasPart then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If pIsAlternatePart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if pIsRoHSReplacementPart then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if pIsDriveTool then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsProcessMaterial then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if pIsRequiredMattingParts then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if pIsPickupPad then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if pIsFunctionalTesingTool then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if pIsFinctionalRestingEquipment then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1177,'1.00','V1','Bug 38192: [Main Branch] DeadLock issue while saving MFR part details - SHUBHAM'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1177:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-11-2021 *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "				pip.payToAddress,  \n" +
                "				pip.billToName supplierName,  \n" +
                "                pip.billToAddress supplierAddress,  \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "		SELECT concat(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,  \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, (select `name` from company_info where isDeleted = 0 ) companyName  \n" +
                "		FROM customer_addresses cua  \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "        join countrymst c ON c.countryID = cua.countryID  \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1178,'1.00','V1', 'Revert Sproc_GetCheckPrintAndRemittanceReport (US 27878) - Bhavik '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1178:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReturnStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReturnStatus`(  \n" +
                "    pPendingReleaseCount INT,  \n" +
                "	pReleasedNotReturnedCount INT,  \n" +
                "	pReturnedCount INT,  \n" +
                "	pReadyToReturnCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReturnStatus VARCHAR(50);  \n" +
                "  \n" +
                "	IF (pPendingReleaseCount = 0 AND  pReleasedNotReturnedCount = 0 AND pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Fully Returned';  \n" +
                "	ELSEIF (pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Partially Returned';  \n" +
                "	ELSEIF (pReleasedNotReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Not Returned';  \n" +
                "	ELSEIF (pReadyToReturnCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Ready To Return';  \n" +
                "	ELSE  \n" +
                "		SET vKitReturnStatus = 'N/A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN vKitReturnStatus;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseStatus`(  \n" +
                "	pKitAllocationPer DECIMAL(18,8),  \n" +
                "    pSOPlanTotalKitQty INT,  \n" +
                "    pSOPlanTotalPOQty INT,  \n" +
                "    pPOKitQty INT,  \n" +
                "    pPOQty INT,  \n" +
                "    pReleaseCount INT,  \n" +
                "    pPendingCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReleaseStatus VARCHAR(50);  \n" +
                "	SET vKitReleaseStatus = 'Not Released';  \n" +
                "  \n" +
                "    IF (ifnull(pReleaseCount,0) > 0 AND ifnull(pPendingCount,0) = 0 AND (ifnull(pSOPlanTotalKitQty,0) = ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) = ifnull(pPOQty,0))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Fully Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND ifnull(pPendingCount,0) > 0) THEN  \n" +
                "		SET vKitReleaseStatus = 'Not Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND (ifnull(pPendingCount,0) > 0 OR ifnull(pPendingCount,0) = 0) AND (pKitAllocationPer IS NOT NULL AND FLOOR(pKitAllocationPer) = 100)) THEN  \n" +
                "		SET vKitReleaseStatus = 'Ready To Release';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) > 0 AND (ifnull(pPendingCount,0) > 0 OR (ifnull(pSOPlanTotalKitQty,0) <> ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) <> ifnull(pPOQty,0)))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Partially Released';  \n" +
                "	END IF;  \n" +
                "	REturn vKitReleaseStatus;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report`;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pMainAssyID INT,  \n" +
                "	IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    SELECT  c.PartID,	c.releaseCount, 	c.kitReturnStatus,		c.salesOrderCompletedStatus,	c.shortageQty,		c.toBeRelease,		c.totalReleased,  \n" +
                "			FUN_GETKITRELEASESTATUS(allocPerWithSubAssy,totalReleaseQty,totalPOQty,assyKitQty,assyPOQty,releaseCount,pendingCount) releaseStatus  \n" +
                "	FROM  \n" +
                "		(SELECT vuss.PartID,  \n" +
                "                p.releaseCount,  \n" +
                "				p.pendingCount,  \n" +
                "				ka.allocPerWithSubAssy,  \n" +
                "				FUN_GETKITRETURNSTATUS(pendingReleaseCount, releasedNotReturnedCount, returnedCount, readyToreturnCount) kitReturnStatus,  \n" +
                "				IFNULL(`vuss`.`kitQty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyKitQty,  \n" +
                "				IFNULL(`vuss`.`PO Qty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyPOQty,  \n" +
                "				p.totalReleased,  \n" +
                "                p.totalReleaseQty,  \n" +
                "                p.totalPOQty,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(totalReleased, 0) AS toBeRelease,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(ka.totalBuildFesibility, 0) AS shortageQty,  \n" +
                "				vuss.`Status` salesOrderCompletedStatus  \n" +
                "		FROM  \n" +
                "			vu_salesorder_updatedlist_report vuss  \n" +
                "		JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND partID = pAssyID AND isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID , partID  \n" +
                "			) AS a ON a.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT  \n" +
                "							salesOrderDetID, refAssyId,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END) totalReleased,  \n" +
                "							SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalReleaseQty,  \n" +
                "							SUM(poQty) totalPOQty  \n" +
                "					FROM salesorder_plan_detailsmst  \n" +
                "					WHERE /*salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "							AND */(CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)  \n" +
                "							AND isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  \n" +
                "								salesOrderDetID, refAssyId,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "						FROM 	vu_release_plan_release_return_status_det  \n" +
                "						WHERE  /* salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "								AND */ (CASE WHEN (pIsConsolidated = 1) THEN 1 = 1 WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID ELSE subAssyID IS NULL END)  \n" +
                "						GROUP BY salesOrderDetID , refAssyId  \n" +
                "					) AS vrr ON vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  k.refSalesOrderDetID,  mainAssy AS assyID,  k.totalBuildFesibility,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`  \n" +
                "						FROM (  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(MIN(vk.allocatedpin/(vk.qpaWithDnp * vk.bomNumOfPosition)),0) ELSE IFNULL(MIN(vk.allocatedunit/vk.qpaWithDnp),0) END) AS totalBuildFesibility,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) `k`  \n" +
                "							GROUP BY k.refSalesOrderDetID, mainAssy  \n" +
                "			) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.assyID = `vuss`.`PartID`  \n" +
                "		WHERE vuss.SalesOrderDetailId = pRefSalesOrderDetID  \n" +
                "	) AS c;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_kit_plans`;  \n" +
                "CREATE VIEW `vu_kit_plans` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        `a`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`poQty` AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "                `s`.`releasedBy` AS `releasedBy`,  \n" +
                "                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`woID` AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                `s`.`releasedNote` AS `releasedNote`,  \n" +
                "                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "                `s`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `actualKitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseTimeFeasibility`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedNote`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseKitNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND (`s`.`subAssyID` IS NULL))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`s`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND EXISTS( SELECT  \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE)) `a`  \n" +
                "    WHERE  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW  IF EXISTS `vu_perjob_shortage`;  \n" +
                "CREATE VIEW `vu_perjob_shortage` AS  \n" +
                "    SELECT  \n" +
                "        `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "        `k`.`soNumber` AS `soNumber`,  \n" +
                "        `k`.`poNumber` AS `poNumber`,  \n" +
                "        `k`.`assyID` AS `assyID`,  \n" +
                "        `k`.`assyNickname` AS `assyNickname`,  \n" +
                "        `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
                "        (`k`.`kitAllocationTotalLine` - `k`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
                "        `k`.`shortageLine` AS `shortageLine`,  \n" +
                "        `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
                "                `s`.`poNumber` AS `poNumber`,  \n" +
                "                `k`.`assyID` AS `assyID`,  \n" +
                "                `c`.`nickName` AS `assyNickname`,  \n" +
                "                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
                "                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `shortageLine`,  \n" +
                "                ROUND(IFNULL(AVG((CASE  \n" +
                "                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
                "                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
                "                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
                "        FROM  \n" +
                "            ((((SELECT  \n" +
                "            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
                "                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
                "                END) AS `allocationPer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
                "                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
                "                END) AS `shortage`,  \n" +
                "                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "        FROM  \n" +
                "            `vu_kit_allocation_detail`) `k`  \n" +
                "        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
                "            AND (`sd`.`partCategory` = 3))))  \n" +
                "        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "        JOIN `component` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
                "        GROUP BY `k`.`refSalesOrderDetID`) `k`  \n" +
                "    ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_perjob_shortage_with_sub_assembly`;  \n" +
                "CREATE VIEW `vu_perjob_shortage_with_sub_assembly` AS  \n" +
                "    SELECT  \n" +
                "        `y`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "        `y`.`soNumber` AS `soNumber`,  \n" +
                "        `y`.`poNumber` AS `poNumber`,  \n" +
                "        `y`.`assyID` AS `subAssyID`,  \n" +
                "        `y`.`assyNickname` AS `subAssyNickname`,  \n" +
                "        `y`.`assyPIDCode` AS `subAssyPIDCode`,  \n" +
                "        `y`.`mainAssyID` AS `assyID`,  \n" +
                "        (`y`.`kitAllocationTotalLine` - `y`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
                "        `y`.`shortageLine` AS `shortageLine`,  \n" +
                "        `y`.`kitAllocationPercentage` AS `kitAllocationPercentage`,  \n" +
                "        FUN_GETASSYNICKNAMEBYID(`y`.`mainAssyID`) AS `assyNickname`,  \n" +
                "        FUN_GETASSYPIDCODEBYID(`y`.`mainAssyID`) AS `assyPIDCode`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `k`.`soNumber` AS `soNumber`,  \n" +
                "                `k`.`poNumber` AS `poNumber`,  \n" +
                "                `k`.`assyID` AS `assyID`,  \n" +
                "                `k`.`assyNickname` AS `assyNickname`,  \n" +
                "                `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
                "                (SELECT  \n" +
                "                        `kit_allocation_assy_detail`.`partId`  \n" +
                "                    FROM  \n" +
                "                        `kit_allocation_assy_detail`  \n" +
                "                    WHERE  \n" +
                "                        ((`kit_allocation_assy_detail`.`refSalesOrderDetID` = `k`.`refSalesOrderDetID`)  \n" +
                "                            AND (`kit_allocation_assy_detail`.`bomAssyLevel` = 0)  \n" +
                "                            AND (`kit_allocation_assy_detail`.`deletedAt` IS NULL))  \n" +
                "                    LIMIT 1) AS `mainAssyID`,  \n" +
                "                `k`.`kitAllocationTotalLine` AS `kitAllocationTotalLine`,  \n" +
                "                `k`.`notRequireKitAllocationTotalLine` AS `notRequireKitAllocationTotalLine`,  \n" +
                "                `k`.`shortageLine` AS `shortageLine`,  \n" +
                "                `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
                "                `s`.`poNumber` AS `poNumber`,  \n" +
                "                `k`.`assyID` AS `assyID`,  \n" +
                "                `c`.`nickName` AS `assyNickname`,  \n" +
                "                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
                "                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `shortageLine`,  \n" +
                "                ROUND(IFNULL(AVG((CASE  \n" +
                "                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
                "                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
                "                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
                "        FROM  \n" +
                "            ((((SELECT  \n" +
                "            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
                "                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
                "                END) AS `allocationPer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
                "                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
                "                END) AS `shortage`,  \n" +
                "                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "        FROM  \n" +
                "            `vu_kit_allocation_detail`) `k`  \n" +
                "        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
                "            AND (`sd`.`partCategory` = 3))))  \n" +
                "        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "        JOIN `component` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
                "        GROUP BY `k`.`refSalesOrderDetID` , `k`.`assyID` , `s`.`salesOrderNumber` , `s`.`poNumber` , `c`.`nickName` , `c`.`PIDCode`) `k`  \n" +
                "        ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`) `y`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1179,'1.00','V1','User Story 38652: Performance Tuning of Sales order Detail / Kit List Detail List page. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1179:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "							select  a.*  \n" +
                "							from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber ,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c where c.kitstatus = case when '\",v_ParentWHType,\"' ='M' then 'P' else 'R' end  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id =a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "							fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							ka.kitPercentage,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	refSalesOrderDetID,  \n" +
                "													assyID,  \n" +
                "													(  \n" +
                "														CASE  \n" +
                "															WHEN connecterTypeID = -2 THEN  \n" +
                "																((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "															ELSE  \n" +
                "																((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "														END  \n" +
                "													 ) AS allocationPer,  \n" +
                "													(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "												FROM 	vu_kit_allocation_detail  \n" +
                "											) k  \n" +
                "										GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	sd.isCancle != 1  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "					GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1180,'1.00','V1','User Story 38248: Main branch - Kit Flow related Changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1180:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                functionalCategoryText,                mountingTypeText,                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				connectorTypeText,				noOfPositionText,				noOfPosition,				noOfRowsText,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				partPackage,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,                uomText,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  functionalCategoryText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  mountingTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connectorTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPositionText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRowsText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  partPackage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  uomText ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "  \n" +
                "  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF pIsSettings then  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		if pIsStandards then  \n" +
                "			INSERT INTO `component_standard_details`  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "			and not exists (select 1 from component_standard_details csd  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "		end if;  \n" +
                "		if pIsRequiredMountingType then  \n" +
                "			INSERT INTO `component_requiremountingtype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requiremountingtype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		end if;  \n" +
                "		if pIsRequiredFunctionalType then  \n" +
                "			INSERT INTO `component_requirefunctionaltype`  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype  \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		end if;  \n" +
                "		IF pIsAcceptableShippinCountry then  \n" +
                "			INSERT INTO component_acceptable_shipping_countries  \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "			SELECT  \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "			FROM  \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)  \n" +
                "		THEN  \n" +
                "			set vMisMatchFields  = '';  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);  \n" +
                "		END IF;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "		ELSE  \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);  \n" +
                "  \n" +
                "			if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "			THEN  \n" +
                "				call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "				select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "                set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "			end if;  \n" +
                "            IF(vValidationPassed = 0)  \n" +
                "			THEN  \n" +
                "				select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "			ELSE  \n" +
                "				if (pIsPackagingAliasPart = 1 and vIsCPN = 0 and pIsCPN = 0 and vFromPartCategory != 3) then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "				end if;  \n" +
                "				if pIsOtherPartName then  \n" +
                "					INSERT INTO `component_otherpn`  \n" +
                "					(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_otherpn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "				end if;  \n" +
                "				If (pIsAlternatePart = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "				end if;  \n" +
                "				if (pIsRoHSReplacementPart = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "				end if;  \n" +
                "				if (pIsDriveTool = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_drivetools`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_drivetools  \n" +
                "					where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "				end if;  \n" +
                "				if (pIsProcessMaterial = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_processmaterial`  \n" +
                "					(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "					SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "					FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_processmaterial  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "				end if;  \n" +
                "				if (pIsRequiredMattingParts = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "				end if;  \n" +
                "				if (pIsPickupPad = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "				end if;  \n" +
                "				if (pIsFunctionalTesingTool = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_alternatepn`  \n" +
                "					(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "					SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`  \n" +
                "					FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID  \n" +
                "					and not exists (select 1 from component_alternatepn  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "				end if;  \n" +
                "				if (pIsFinctionalRestingEquipment = 1 and vIsCPN = 0 and pIsCPN = 0) then  \n" +
                "					INSERT INTO `component_functionaltestingequipment`  \n" +
                "					(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "					and not exists (select 1 from component_functionaltestingequipment  \n" +
                "					where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "				end if;  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsProgram tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vToPartIsCPN tinyint;  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vMessage varchar(20);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	/* Get From Part Detail For apply Validation */  \n" +
                "	select co.category, co.isCPN  \n" +
                "      into vFromPartCategory, vIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "    /* Get To Part Detail For apply Validation */  \n" +
                "    select co.isCPN  \n" +
                "      into  vToPartIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pToPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`,  \n" +
                "        /* Copy IsAttribute */  \n" +
                "        `functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height`,  \n" +
                "        /* Copy IsSetting */  \n" +
                "        `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`,  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`,`isEpoxyMount`,  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "         `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem`  \n" +
                "  \n" +
                "        from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryID ELSE toPart.`functionalCategoryID` END),  \n" +
                "		toPart.`functionalCategoryText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryText ELSE toPart.`functionalCategoryText` END),  \n" +
                "		toPart.`mountingTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeID ELSE toPart.`mountingTypeID` END),  \n" +
                "		toPart.`mountingTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeText ELSE toPart.`mountingTypeText` END),  \n" +
                "		toPart.`operatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.operatingTemp ELSE toPart.`operatingTemp` END),  \n" +
                "		toPart.`minOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.minOperatingTemp ELSE toPart.`minOperatingTemp` END),  \n" +
                "		toPart.`maxOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.maxOperatingTemp ELSE toPart.`maxOperatingTemp` END),  \n" +
                "		toPart.`temperatureCoefficient` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficient ELSE toPart.`temperatureCoefficient` END),  \n" +
                "		toPart.`temperatureCoefficientValue` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientValue ELSE toPart.`temperatureCoefficientValue` END),  \n" +
                "		toPart.`temperatureCoefficientUnit` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientUnit ELSE toPart.`temperatureCoefficientUnit` END),  \n" +
                "		toPart.`connecterTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connecterTypeID ELSE toPart.`connecterTypeID` END),  \n" +
                "		toPart.`connectorTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connectorTypeText ELSE toPart.`connectorTypeText` END),  \n" +
                "		toPart.`noOfPositionText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPositionText ELSE toPart.`noOfPositionText` END),  \n" +
                "		toPart.`noOfPosition` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPosition ELSE toPart.`noOfPosition` END),  \n" +
                "		toPart.`noOfRowsText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRowsText ELSE toPart.`noOfRowsText` END),  \n" +
                "		toPart.`noOfRows` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRows ELSE toPart.`noOfRows` END),  \n" +
                "		toPart.`pitch` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitch ELSE toPart.`pitch` END),  \n" +
                "		toPart.`pitchMating` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitchMating ELSE toPart.`pitchMating` END),  \n" +
                "		toPart.`sizeDimension` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.sizeDimension ELSE toPart.`sizeDimension` END),  \n" +
                "		toPart.`length` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.length ELSE toPart.`length` END),  \n" +
                "		toPart.`width` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.width ELSE toPart.`width` END),  \n" +
                "		toPart.`heightText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.heightText ELSE toPart.`heightText` END),  \n" +
                "		toPart.`height` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.height ELSE toPart.`height` END),  \n" +
                "        /* Copy IsSetting */  \n" +
                "        toPart.`scrapValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapValuePerBuild ELSE toPart.`scrapValuePerBuild` END),  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapRatePercentagePerBuild ELSE toPart.`scrapRatePercentagePerBuild` END),  \n" +
                "		toPart.`plannedValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedValuePerBuild ELSE toPart.`plannedValuePerBuild` END),  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedOverRunPercentagePerBuild ELSE toPart.`plannedOverRunPercentagePerBuild` END),  \n" +
                "		toPart.`selfLifeDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.selfLifeDays ELSE toPart.`selfLifeDays` END),  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeAcceptanceDays ELSE toPart.`shelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` =(CASE WHEN pIsSettings = 1 THEN fromPart.shelfListDaysThresholdPercentage ELSE toPart.`shelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfLifeAcceptanceDays ELSE toPart.`maxShelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfListDaysThresholdPercentage ELSE toPart.`maxShelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`shelfLifeDateType` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeDateType ELSE toPart.`shelfLifeDateType` END),  \n" +
                "		toPart.`maxPriceLimit` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxPriceLimit ELSE toPart.`maxPriceLimit` END),  \n" +
                "		toPart.`maxQtyonHand` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxQtyonHand ELSE toPart.`maxQtyonHand` END),  \n" +
                "		toPart.`saftyStock` = (CASE WHEN pIsSettings = 1 THEN fromPart.saftyStock ELSE toPart.`saftyStock` END),  \n" +
                "		toPart.`eau` = (CASE WHEN pIsSettings = 1 THEN fromPart.eau ELSE toPart.`eau` END),  \n" +
                "		toPart.`businessRisk` = (CASE WHEN pIsSettings = 1 THEN fromPart.businessRisk ELSE toPart.`businessRisk` END),  \n" +
                "		toPart.`driverToolRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "		toPart.`matingPartRquired` = (CASE WHEN pIsSettings = 1 THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "		toPart.`pickupPadRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "		toPart.`programingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.programingRequired ELSE toPart.`programingRequired` END),  \n" +
                "		toPart.`functionalTestingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "		toPart.`restrictUSEwithpermission` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUSEwithpermission ELSE toPart.`restrictUSEwithpermission` END),  \n" +
                "		toPart.`bomLock` = (CASE WHEN pIsSettings = 1 THEN fromPart.bomLock ELSE toPart.`bomLock` END),  \n" +
                "		toPart.`restrictUsePermanently` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUsePermanently ELSE toPart.`restrictUsePermanently` END),  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        toPart.`tolerance` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.tolerance ELSE toPart.`tolerance` END),  \n" +
                "		toPart.`voltage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.voltage ELSE toPart.`voltage` END),  \n" +
                "		toPart.`value` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.value ELSE toPart.`value` END),  \n" +
                "		toPart.`partPackage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.partPackage ELSE toPart.`partPackage` END),  \n" +
                "		toPart.`powerRating` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.powerRating ELSE toPart.`powerRating` END),  \n" +
                "		toPart.`weight` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.weight ELSE toPart.`weight` END),  \n" +
                "		toPart.`feature` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.feature ELSE toPart.`feature` END),  \n" +
                "		toPart.`isEpoxyMount` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.isEpoxyMount ELSE toPart.`isEpoxyMount` END),  \n" +
                "		toPart.`color` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.color ELSE toPart.`color` END),  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "        toPart.`deviceMarking` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.deviceMarking ELSE toPart.`deviceMarking` END),  \n" +
                "		toPart.`packagingID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingID ELSE toPart.`packagingID` END),  \n" +
                "		toPart.`minimum` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.minimum ELSE toPart.`minimum` END),  \n" +
                "		toPart.`mult` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.mult ELSE toPart.`mult` END),  \n" +
                "		toPart.`packageQty` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packageQty ELSE toPart.`packageQty` END),  \n" +
                "        toPart.`umidSPQ` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.umidSPQ ELSE toPart.`umidSPQ` END),  \n" +
                "		toPart.`uomClassID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomClassID ELSE toPart.`uomClassID` END),  \n" +
                "		toPart.`uom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uom ELSE toPart.`uom` END),  \n" +
                "		toPart.`uomText` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomText ELSE toPart.`uomText` END),  \n" +
                "		toPart.`unit` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.unit ELSE toPart.`unit` END),  \n" +
                "		toPart.`pcbPerArray` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.pcbPerArray ELSE toPart.`pcbPerArray` END),  \n" +
                "		toPart.`grossWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeight ELSE toPart.`grossWeight` END),  \n" +
                "		toPart.`grossWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeightUom ELSE toPart.`grossWeightUom` END),  \n" +
                "		toPart.`packagingWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeight ELSE toPart.`packagingWeight` END),  \n" +
                "		toPart.`packagingWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeightUom ELSE toPart.`packagingWeightUom` END),  \n" +
                "        toPart.`isReceiveBulkItem` =  (CASE WHEN pIsPackagingDetail = 1 THEN ((CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END))  \n" +
                "        ELSE toPart.`isReceiveBulkItem` END),  \n" +
                "  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if pIsStandards then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`countryOfOrigin` = fromPart.countryOfOrigin,  \n" +
                "		toPart.`htsCode` = fromPart.htsCode,  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "		INSERT INTO `component_standard_details`  \n" +
                "		(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "		select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "		from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "		and not exists (select 1 from component_standard_details csd  \n" +
                "		where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "	end if;  \n" +
                "	if pIsRequiredMountingType then  \n" +
                "		INSERT INTO `component_requiremountingtype`  \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "		and not exists (select 1 from component_requiremountingtype  \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "		set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "		if @requiredMountingTypecount>0 then  \n" +
                "			UPDATE `component` toPart  \n" +
                "			SET  \n" +
                "			toPart.`mountingTypePartRequired` = true,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = pToPartID;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "	if pIsRequiredFunctionalType then  \n" +
                "		INSERT INTO `component_requirefunctionaltype`  \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "		SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "		FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "		and not exists (select 1 from component_requirefunctionaltype  \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "		set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "		if @requiredFunctionalTypecount>0 then  \n" +
                "			UPDATE `component` toPart  \n" +
                "			SET  \n" +
                "			toPart.`functionalTypePartRequired` = true,  \n" +
                "			toPart.`updatedBy` = pUserID,  \n" +
                "			toPart.`updatedAt` = current_timestamp()  \n" +
                "			WHERE toPart.`id` = pToPartID;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "	IF(pIsPackagingAliasPart)  \n" +
                "	THEN  \n" +
                "		set vMisMatchFields  = '';  \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID, pFromPartID, vMisMatchFields);  \n" +
                "		set vValidationPassed = (select CASE WHEN (vMisMatchFields != '') THEN 0 ELSE 1 END);  \n" +
                "	END IF;  \n" +
                "	IF(vValidationPassed = 0)  \n" +
                "	THEN  \n" +
                "		ROLLBACK;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "		select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "		set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "		set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);  \n" +
                "  \n" +
                "		if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "					OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "		THEN  \n" +
                "			call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "			select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "		end if;  \n" +
                "  \n" +
                "        IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			ROLLBACK;  \n" +
                "			select 'PACKAGING_GROUP_TYPE_NOT_EXISTS' as message;  \n" +
                "		ELSE  \n" +
                "			if (pIsPackagingAliasPart = 1 and vFromPartCategory != 3 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "					# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "					update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table  \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);  \n" +
                "				elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "  \n" +
                "				# Insert data in packaging alias table for ToPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "				# Update data for packaging alias group id for  ToPartID  \n" +
                "					update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;  \n" +
                "  \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "  \n" +
                "				# Insert data in packaging alias table for ToPartID  \n" +
                "					INSERT INTO `component_packagingalias`  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "					values  \n" +
                "					(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "				# Update data for packaging alias group id for  FromPartID  \n" +
                "					update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if pIsOtherPartName then  \n" +
                "				INSERT INTO `component_otherpn`  \n" +
                "				(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_otherpn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "			end if;  \n" +
                "			If (pIsAlternatePart = 1 and (vIsCPN = 0 and vToPartIsCPN = 0))then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "			end if;  \n" +
                "			if (pIsRoHSReplacementPart = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "			end if;  \n" +
                "			if (pIsDriveTool = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_drivetools`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_drivetools  \n" +
                "				where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "  \n" +
                "				set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @DriveToolcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`driverToolRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if (pIsProcessMaterial = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_processmaterial`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_processmaterial  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "			end if;  \n" +
                "			if (pIsRequiredMattingParts = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "  \n" +
                "				set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @mattingpartcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`matingPartRquired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "  \n" +
                "			end if;  \n" +
                "			if (pIsPickupPad = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "			INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "  \n" +
                "				set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @PickupPadcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`pickupPadRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if (pIsProgram = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 3 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 3);  \n" +
                "  \n" +
                "				set @Programcount =  (select count(1) from component_alternatepn where type = '3' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @Programcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`programingRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if (pIsFunctionalTesingTool = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "  \n" +
                "				set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);  \n" +
                "				if @FunctionalTesingToolcount>0 then  \n" +
                "					UPDATE `component` toPart  \n" +
                "					SET  \n" +
                "					toPart.`functionalTestingRequired` = true,  \n" +
                "					toPart.`updatedBy` = pUserID,  \n" +
                "					toPart.`updatedAt` = current_timestamp()  \n" +
                "					WHERE toPart.`id` = pToPartID;  \n" +
                "				end if;  \n" +
                "			end if;  \n" +
                "			if (pIsFinctionalRestingEquipment = 1 and (vIsCPN = 0 and vToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_functionaltestingequipment`  \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_functionaltestingequipment  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "			end if;  \n" +
                "			commit;  \n" +
                "			select * from component where id = pToPartID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1181,'1.00','V1',' Bug 38896: [Main Branch] Need to restrict users to add Packaging Alias for Assembly/Sales kit at part master - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1181:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_update_UMID_initial_count`;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pOrgQty DECIMAL(18,8),  \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),  \n" +
                "	IN pUpdatedBy VARCHAR(255),  \n" +
                "	IN pInitialQtyChangeRemark VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);  \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);  \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);  \n" +
                "	DECLARE vIsQtyUpdate TINYINT(1);  \n" +
                "	DECLARE vInventoryType VARCHAR(2);  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "    DECLARE v_ErrorCode INT;  \n" +
                "    DECLARE v_PackingslipId INT;  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipDetId INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS  \n" +
                "		SELECT 	css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging,css.stockInventoryType, css.woNumber  \n" +
                "				FROM 	component_sid_stock css  \n" +
                "			WHERE 	css.id = pId  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "        SELECT orgQty, stockInventoryType INTO vOrgInitialQty, vInventoryType FROM tempUMIDDetail;  \n" +
                "  \n" +
                "        # get Packing slip Mode status and packing slip line level status for selected umid  \n" +
                "        SELECT  psd.id, psd.receivedStatus, ps.packingSlipModeStatus, ps.id, ps.packingSlipNumber  \n" +
                "				INTO  v_PackingSlipDetId, v_ReceivedStatus, v_PackingSlipModeStatus, v_PackingslipId, v_PackingSlipNumber  \n" +
                "			FROM	packing_slip_material_receive_det  psd  \n" +
                "				INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "			AND  psd.id IN (  \n" +
                "				SELECT 	refPackingSlipDetailID  \n" +
                "				FROM  	component_sid_stock_packing_detail  \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND isDeleted = 0  \n" +
                "					);  \n" +
                "	# Check if UMID is for new stock Else for existing stock  \n" +
                "	IF (vInventoryType = 'NI') THEN  \n" +
                "		# If packing slip status is in draft mode then we have to restrict  \n" +
                "        IF(v_PackingSlipModeStatus = 'D') THEN  \n" +
                "		# Update packing slip detail if new orginial qty is less than previous original qty  \n" +
                "             SET v_ErrorCode = 1;  \n" +
                "             SELECT  \n" +
                "					t.id,  \n" +
                "					t.uid,  \n" +
                "					v_PackingslipId AS packingslipId,  \n" +
                "					v_PackingSlipNumber AS packingSlipNumber,  \n" +
                "                    v_ErrorCode AS errorCode  \n" +
                "			FROM 	tempUMIDDetail t  \n" +
                "			INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "			INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "            SET vIsQtyUpdate = 0;  \n" +
                "		ELSE  \n" +
                "			IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "				# if new original qty is less than previous qty then make UMID created flag to false  \n" +
                "				UPDATE 	packing_slip_material_receive_det  \n" +
                "				SET 	umidCreated = FALSE,  \n" +
                "						umidCreatedQty = (IFNULL(umidCreatedQty,0) - (vOrgInitialQty - pOrgQty))  \n" +
                "				WHERE   id IN (  \n" +
                "					SELECT 	refPackingSlipDetailID  \n" +
                "					FROM  	component_sid_stock_packing_detail  \n" +
                "					WHERE 	refComponentSidStockID = pId  \n" +
                "							AND isDeleted = 0  \n" +
                "						);  \n" +
                "  \n" +
                "				UPDATE 	component_sid_stock_packing_detail  \n" +
                "				SET 	packingSlipQty =  pOrgQty  \n" +
                "				WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "  \n" +
                "			# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "			ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "				SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "				SELECT 	vu.BalanceQty INTO vBalanceQty  \n" +
                "				FROM 	vu_umid_creation_pending vu  \n" +
                "				WHERE 	vu.packingSlipDetID = v_PackingSlipDetId;  \n" +
                "  \n" +
                "				# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "				IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = FALSE,  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "				ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = TRUE,  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# Else inform user that stock is not available to increase original qty  \n" +
                "				ELSE  \n" +
                "					SELECT 		b.name AS binName,  \n" +
                "							IF(vBalanceQty > 0 , vBalanceQty, vBalanceQty * -1) AS BalanceQty,  \n" +
                "							c.PIDCode,  \n" +
                "							pOrgQty newOrgQty  \n" +
                "					FROM 		tempUMIDDetail t  \n" +
                "					INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "					INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSEIF(vInventoryType = 'AI') THEN  \n" +
                "		IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "			SET vIsQtyUpdate = 1;  \n" +
                "		# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "		ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "			SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "			SELECT 	vu.availableQty INTO vBalanceQty  \n" +
                "			FROM 	vu_customer_packing_slip_qty vu  \n" +
                "			WHERE 	EXISTS (SELECT 1  \n" +
                "							FROM tempUMIDDetail t  \n" +
                "                            WHERE t.fromBin = vu.binID  \n" +
                "                            AND t.refcompid = vu.partID  \n" +
                "                            AND t.woNumber = vu.woNumber);  \n" +
                "  \n" +
                "			# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "			IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "			ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# Else inform user that stock is not available to increase original qty  \n" +
                "			ELSE  \n" +
                "				SELECT 	 b.name AS binName,  \n" +
                "						vBalanceQty AS BalanceQty,  \n" +
                "						c.PIDCode,  \n" +
                "						pOrgQty newOrgQty  \n" +
                "				FROM 	tempUMIDDetail t  \n" +
                "				INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "				INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSE  \n" +
                "		SET vIsQtyUpdate = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN  \n" +
                "		# update qty and count based on data  \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t  \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),  \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),  \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),  \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,  \n" +
                "			css.updatedBy = pUpdatedBy,  \n" +
                "			css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	css.id = t.id;  \n" +
                "  \n" +
                "		-- Insert log in UMID history page  \n" +
                "		INSERT INTO component_sid_stock_history  \n" +
                "		(  \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,  \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,  \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason,  \n" +
                "			isDeleted, 				createdBy, 			createdAt,  \n" +
                "			updatedBy, 				updatedAt  \n" +
                "		)  \n" +
                "		SELECT  'Change Initial Qty.',  \n" +
                "			'Change Initial Qty',  \n" +
                "			css.id,  \n" +
                "			uid,  \n" +
                "			refcompid,  \n" +
                "			css.binID,  \n" +
                "			b.warehouseID,  \n" +
                "			w.parentWHID,  \n" +
                "			orgQty,  \n" +
                "			orgPkgUnit,  \n" +
                "			pkgQty,  \n" +
                "			pkgUnit,  \n" +
                "			uom,  \n" +
                "			pInitialQtyChangeRemark,  \n" +
                "			0,  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime(),  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime()  \n" +
                "		FROM 	component_sid_stock  css  \n" +
                "		JOIN 	binmst b ON css.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE 	css.id = pId;  \n" +
                "  \n" +
                "		# Update allocated qty with return status  \n" +
                "		UPDATE 	kit_allocation k  \n" +
                "		SET	k.status = 'D',  \n" +
                "			k.updatedBy = pUpdatedBy,  \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	k.refUIDId = pId  \n" +
                "				AND k.status = 'A';  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1182,'1.00','V1','Bug 38903: [Main Branch] Created UMID Count must not be greater than Received/Pending Qty of the part - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1182:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_packingslip` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslip as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_invoice\" else \"\" end as msg FROM customer_packingslip  \n" +
                "			where id IN(',IDs,') and refCustInvoiceID is not null LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslip t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update customer_packingslip_otherexpense_details set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update customer_packingslip_commission_attribute set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "			        SET @SQl6 = CONCAT('update customer_packing_slip_track_number set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipID IN(',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt6 FROM @SQl6;  \n" +
                "				EXECUTE stmt6;  \n" +
                "				DEALLOCATE PREPARE stmt6;  \n" +
                "  \n" +
                "				SET @SQL5 = CONCAT('UPDATE shippedassembly  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt5 FROM @SQL5;  \n" +
                "				EXECUTE stmt5;  \n" +
                "				DEALLOCATE PREPARE stmt5;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('UPDATE customer_packingslip_det  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,')) AND isDeleted=0');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN (',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "				SET @SQl7 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in (select refSalesorderDetid from customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) and sd.isDeleted=0');  \n" +
                "				PREPARE stmt7 FROM @SQl7;  \n" +
                "				EXECUTE stmt7;  \n" +
                "				DEALLOCATE PREPARE stmt7;  \n" +
                "				SELECT * FROM tempcustomerPackingslip WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslip t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempcustomerPackingslip t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- ELSE  \n" +
                "		/* [S] - Add Time line log for delete sales order mst */  \n" +
                "	-- 	SET @SQl5 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "	-- 	PREPARE stmt5 FROM @SQl5;  \n" +
                "	-- 	EXECUTE stmt5;  \n" +
                "	-- 	DEALLOCATE PREPARE  stmt5;  \n" +
                "	-- 	SELECT \"\" TotalCount ,\"\" AS Message FROM customer_packingslip WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "	-- END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1183,'1.00','V1','Bug 38901: Sales Order status should be updated based on customer packing slip shipped qty at sales order page - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1183:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "select pageID into @pageID from page_detail where pageName like 'Sales Order Shipment Summary';  \n" +
                "  \n" +
                "update page_detail  \n" +
                "set menuName = 'Customer Open Sales Order & Shipment Summary',  \n" +
                "pageName ='Customer Open Sales Order & Shipment Summary',  \n" +
                "displayMenuName='Open Sales Order & Shipment Summary'  \n" +
                "where pageID = @pageID;  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1184,'1.00','V1','Update page name of Shipment Summary - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1184:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "insert into  page_detail(pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName,  orderBy, tabLevel, iconClass, isActive,  \n" +
                "createdBy, isDeleted, isDisplay, displayMenuName, isAllowAsHomePage,createByRoleId)  \n" +
                "values('Open Sales Order & Shipment Summary', '0', '0', 'transaction.salesordershipment', 'app.transaction.salesordershipment', '/shipmentsummary', 'Open Sales Order & Shipment Summary', '17.10000000', NULL, 't-icons-shipment-summary', '1',  \n" +
                " 1,0, 1, 'Open Sales Order & Shipment Summary', 1,1);  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1185,'1.00','V1','Add Shipment Summary in Sales Mang. Menu - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1185:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA'  \n" +
                "			WHEN  isBlanketPO THEN 'BLANKET'  \n" +
                "            WHEN isLegacyPO THEN 'LEGACY'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1186,'1.00','V1',' fun_getPOTypeByID- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1186:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "  \n" +
                "    Select fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCodem,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "					cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1187,'1.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1187:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoDetCompletedStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT ,  \n" +
                "    IN pSortByColumn TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vOrderBy VARCHAR(200);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pSortByColumn = 1 THEN  \n" +
                "		SET vOrderBy =' order by customerName ' ;  \n" +
                "    ELSEIF pSortByColumn = 2 THEN  \n" +
                "		SET vOrderBy =' order by poNumber ' ;  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy =' order by soId Desc ' ;  \n" +
                "    END IF;  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    /*IF pIncludeCompletedPO IS NOT NULL OR pIncludeCompletedPO  = 1 THEN  \n" +
                "  \n" +
                "    END IF;*/  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "  \n" +
                "    END IF;  \n" +
                "-- select headerWhereClause;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "                        soStatus, soStatusText,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber , workingStatus, poType  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            som.status AS soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber ,  \n" +
                "            fun_GetSalesOrderHeaderWorkStatus(som.id) workingStatus,  \n" +
                "            fun_getPOTypeByID(som.id) poType  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder  \n" +
                "    where (salesOrder.workingStatus in (1,-1) OR  \n" +
                "			salesOrder.workingStatus = \",ifnull(pSoDetCompletedStatus,1),\")\",  \n" +
                "            \" and \", headerWhereClause,  \n" +
                "    \"  group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName \" ,  \n" +
                "    vOrderBy , rowNumWhere) ;  \n" +
                "  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  ,  \n" +
                "                cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.custAssyPN ,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 cpsDetailCnt, cpsIndex ,isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
                "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
                "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
                "-- select @SQLStatement1 ;  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  */  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail  \n" +
                "    order by relCompletedStatus , soDetId;  \n" +
                "  \n" +
                "	/*DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  */  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1188,'1.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1188:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "  \n" +
                "    Select fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "					cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1189,'1.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1189:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA'  \n" +
                "			WHEN  isBlanketPO THEN 'Blanket'  \n" +
                "            WHEN isLegacyPO THEN 'LEGACY'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1190,'1.00','V1','fun_getPOTypeByID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1190:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CopyPartDetailOnCopyAndDuplicatePart`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetailOnCopyAndDuplicatePart`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "	IN pIsCPN tinyint,  \n" +
                "    IN pToPartIsCPN tinyint,  \n" +
                "    IN pFromPartCategory tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    INOUT pMissMatchField  longtext,  \n" +
                "    INOUT vMessage longtext  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vValidationPassed tinyint;  \n" +
                "	IF(pIsPackagingAliasPart)  \n" +
                "	THEN  \n" +
                "		set pMissMatchField  = '';  \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID,pFromPartID, pMissMatchField);  \n" +
                "		set vValidationPassed = (select CASE WHEN (pMissMatchField  != '') THEN 0 ELSE 1 END);  \n" +
                "	END IF;  \n" +
                "	IF(vValidationPassed = 0)  \n" +
                "	THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "        set vMessage = 'PACKAGING_ALIAS_PART_VALIDATION_FAILED';  \n" +
                "		-- select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "        set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "		set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);  \n" +
                "		if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "				OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "		THEN  \n" +
                "			call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "			select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "		end if;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			set vMessage = 'PACKAGING_GROUP_TYPE_NOT_EXISTS';  \n" +
                "		ELSE  \n" +
                "			if pIsStandards then  \n" +
                "				INSERT INTO `component_standard_details`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "				select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "				from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "				and not exists (select 1 from component_standard_details csd  \n" +
                "				where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "			end if;  \n" +
                "			if pIsRequiredMountingType then  \n" +
                "				INSERT INTO `component_requiremountingtype`  \n" +
                "				(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_requiremountingtype  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "			end if;  \n" +
                "			if pIsRequiredFunctionalType then  \n" +
                "				INSERT INTO `component_requirefunctionaltype`  \n" +
                "				(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_requirefunctionaltype  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "			end if;  \n" +
                "			if (pIsPackagingAliasPart = 1 and pFromPartCategory != 3 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "			end if;  \n" +
                "			if pIsOtherPartName then  \n" +
                "						INSERT INTO `component_otherpn`  \n" +
                "						(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "						SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "						FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "						and not exists (select 1 from component_otherpn  \n" +
                "						where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "			end if;  \n" +
                "			If (pIsAlternatePart = 1 and (pIsCPN = 0 and pToPartIsCPN = 0))then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "			end if;  \n" +
                "			if (pIsRoHSReplacementPart = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "			end if;  \n" +
                "			if (pIsDriveTool = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_drivetools`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_drivetools  \n" +
                "				where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "			end if;  \n" +
                "			if (pIsProcessMaterial = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_processmaterial`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_processmaterial  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "			end if;  \n" +
                "			if (pIsRequiredMattingParts = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "			end if;  \n" +
                "			if (pIsPickupPad = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "			INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "			end if;  \n" +
                "			if (pIsFunctionalTesingTool = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "			end if;  \n" +
                "			if (pIsFinctionalRestingEquipment = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_functionaltestingequipment`  \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_functionaltestingequipment  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "			end if;  \n" +
                "		end if;  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsProgram tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vToPartIsCPN tinyint;  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	/* Get From Part Detail For apply Validation */  \n" +
                "	select co.category, co.isCPN  \n" +
                "      into vFromPartCategory, vIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "    /* Get To Part Detail For apply Validation */  \n" +
                "    select co.isCPN  \n" +
                "      into  vToPartIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pToPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`,  \n" +
                "        /* Copy IsAttribute */  \n" +
                "        `functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height`,  \n" +
                "        /* Copy IsSetting */  \n" +
                "        `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`,  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`,`isEpoxyMount`,  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "         `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem`,  \n" +
                "        /* Copy Standard Detail */  \n" +
                "        `countryOfOrigin`,`htsCode`  \n" +
                "  \n" +
                "        from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryID ELSE toPart.`functionalCategoryID` END),  \n" +
                "		toPart.`functionalCategoryText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryText ELSE toPart.`functionalCategoryText` END),  \n" +
                "		toPart.`mountingTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeID ELSE toPart.`mountingTypeID` END),  \n" +
                "		toPart.`mountingTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeText ELSE toPart.`mountingTypeText` END),  \n" +
                "		toPart.`operatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.operatingTemp ELSE toPart.`operatingTemp` END),  \n" +
                "		toPart.`minOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.minOperatingTemp ELSE toPart.`minOperatingTemp` END),  \n" +
                "		toPart.`maxOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.maxOperatingTemp ELSE toPart.`maxOperatingTemp` END),  \n" +
                "		toPart.`temperatureCoefficient` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficient ELSE toPart.`temperatureCoefficient` END),  \n" +
                "		toPart.`temperatureCoefficientValue` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientValue ELSE toPart.`temperatureCoefficientValue` END),  \n" +
                "		toPart.`temperatureCoefficientUnit` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientUnit ELSE toPart.`temperatureCoefficientUnit` END),  \n" +
                "		toPart.`connecterTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connecterTypeID ELSE toPart.`connecterTypeID` END),  \n" +
                "		toPart.`connectorTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connectorTypeText ELSE toPart.`connectorTypeText` END),  \n" +
                "		toPart.`noOfPositionText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPositionText ELSE toPart.`noOfPositionText` END),  \n" +
                "		toPart.`noOfPosition` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPosition ELSE toPart.`noOfPosition` END),  \n" +
                "		toPart.`noOfRowsText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRowsText ELSE toPart.`noOfRowsText` END),  \n" +
                "		toPart.`noOfRows` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRows ELSE toPart.`noOfRows` END),  \n" +
                "		toPart.`pitch` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitch ELSE toPart.`pitch` END),  \n" +
                "		toPart.`pitchMating` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitchMating ELSE toPart.`pitchMating` END),  \n" +
                "		toPart.`sizeDimension` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.sizeDimension ELSE toPart.`sizeDimension` END),  \n" +
                "		toPart.`length` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.length ELSE toPart.`length` END),  \n" +
                "		toPart.`width` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.width ELSE toPart.`width` END),  \n" +
                "		toPart.`heightText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.heightText ELSE toPart.`heightText` END),  \n" +
                "		toPart.`height` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.height ELSE toPart.`height` END),  \n" +
                "        /* Copy IsSetting */  \n" +
                "        toPart.`scrapValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapValuePerBuild ELSE toPart.`scrapValuePerBuild` END),  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapRatePercentagePerBuild ELSE toPart.`scrapRatePercentagePerBuild` END),  \n" +
                "		toPart.`plannedValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedValuePerBuild ELSE toPart.`plannedValuePerBuild` END),  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedOverRunPercentagePerBuild ELSE toPart.`plannedOverRunPercentagePerBuild` END),  \n" +
                "		toPart.`selfLifeDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.selfLifeDays ELSE toPart.`selfLifeDays` END),  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeAcceptanceDays ELSE toPart.`shelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` =(CASE WHEN pIsSettings = 1 THEN fromPart.shelfListDaysThresholdPercentage ELSE toPart.`shelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfLifeAcceptanceDays ELSE toPart.`maxShelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfListDaysThresholdPercentage ELSE toPart.`maxShelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`shelfLifeDateType` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeDateType ELSE toPart.`shelfLifeDateType` END),  \n" +
                "		toPart.`maxPriceLimit` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxPriceLimit ELSE toPart.`maxPriceLimit` END),  \n" +
                "		toPart.`maxQtyonHand` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxQtyonHand ELSE toPart.`maxQtyonHand` END),  \n" +
                "		toPart.`saftyStock` = (CASE WHEN pIsSettings = 1 THEN fromPart.saftyStock ELSE toPart.`saftyStock` END),  \n" +
                "		toPart.`eau` = (CASE WHEN pIsSettings = 1 THEN fromPart.eau ELSE toPart.`eau` END),  \n" +
                "		toPart.`businessRisk` = (CASE WHEN pIsSettings = 1 THEN fromPart.businessRisk ELSE toPart.`businessRisk` END),  \n" +
                "		toPart.`driverToolRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "		toPart.`matingPartRquired` = (CASE WHEN pIsSettings = 1 THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "		toPart.`pickupPadRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "		toPart.`programingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.programingRequired ELSE toPart.`programingRequired` END),  \n" +
                "		toPart.`functionalTestingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "		toPart.`restrictUSEwithpermission` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUSEwithpermission ELSE toPart.`restrictUSEwithpermission` END),  \n" +
                "		toPart.`bomLock` = (CASE WHEN pIsSettings = 1 THEN fromPart.bomLock ELSE toPart.`bomLock` END),  \n" +
                "		toPart.`restrictUsePermanently` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUsePermanently ELSE toPart.`restrictUsePermanently` END),  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        toPart.`tolerance` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.tolerance ELSE toPart.`tolerance` END),  \n" +
                "		toPart.`voltage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.voltage ELSE toPart.`voltage` END),  \n" +
                "		toPart.`value` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.value ELSE toPart.`value` END),  \n" +
                "		toPart.`partPackage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.partPackage ELSE toPart.`partPackage` END),  \n" +
                "		toPart.`powerRating` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.powerRating ELSE toPart.`powerRating` END),  \n" +
                "		toPart.`weight` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.weight ELSE toPart.`weight` END),  \n" +
                "		toPart.`feature` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.feature ELSE toPart.`feature` END),  \n" +
                "		toPart.`isEpoxyMount` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.isEpoxyMount ELSE toPart.`isEpoxyMount` END),  \n" +
                "		toPart.`color` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.color ELSE toPart.`color` END),  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "        toPart.`deviceMarking` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.deviceMarking ELSE toPart.`deviceMarking` END),  \n" +
                "		toPart.`packagingID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingID ELSE toPart.`packagingID` END),  \n" +
                "		toPart.`minimum` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.minimum ELSE toPart.`minimum` END),  \n" +
                "		toPart.`mult` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.mult ELSE toPart.`mult` END),  \n" +
                "		toPart.`packageQty` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packageQty ELSE toPart.`packageQty` END),  \n" +
                "        toPart.`umidSPQ` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.umidSPQ ELSE toPart.`umidSPQ` END),  \n" +
                "		toPart.`uomClassID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomClassID ELSE toPart.`uomClassID` END),  \n" +
                "		toPart.`uom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uom ELSE toPart.`uom` END),  \n" +
                "		toPart.`uomText` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomText ELSE toPart.`uomText` END),  \n" +
                "		toPart.`unit` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.unit ELSE toPart.`unit` END),  \n" +
                "		toPart.`pcbPerArray` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.pcbPerArray ELSE toPart.`pcbPerArray` END),  \n" +
                "		toPart.`grossWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeight ELSE toPart.`grossWeight` END),  \n" +
                "		toPart.`grossWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeightUom ELSE toPart.`grossWeightUom` END),  \n" +
                "		toPart.`packagingWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeight ELSE toPart.`packagingWeight` END),  \n" +
                "		toPart.`packagingWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeightUom ELSE toPart.`packagingWeightUom` END),  \n" +
                "        toPart.`isReceiveBulkItem` =  (CASE WHEN pIsPackagingDetail = 1 THEN ((CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END))  \n" +
                "        ELSE toPart.`isReceiveBulkItem` END),  \n" +
                "		/* Copy Standard Detail */  \n" +
                "		toPart.`countryOfOrigin` = (CASE WHEN pIsStandards = 1 THEN fromPart.countryOfOrigin ELSE toPart.`countryOfOrigin` END),  \n" +
                "		toPart.`htsCode` = (CASE WHEN pIsStandards = 1 THEN fromPart.packagingWeightUom ELSE toPart.`htsCode` END),  \n" +
                "  \n" +
                "		toPart.`requiredTestTime` = (CASE WHEN (pIsFunctionalTesingTool = 1 and pIsCPN = 0) THEN fromPart.requiredTestTime ELSE toPart.`requiredTestTime` END),  \n" +
                "        toPart.`mountingTypePartRequired`= (CASE WHEN (pIsRequiredMountingType = 1) THEN fromPart.mountingTypePartRequired ELSE  toPart.`mountingTypePartRequired` END),  \n" +
                "        toPart.`functionalTypePartRequired` = (CASE WHEN (pIsRequiredFunctionalType = 1) THEN fromPart.functionalTypePartRequired ELSE toPart.`functionalTypePartRequired` END),  \n" +
                "        toPart.`driverToolRequired`= (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "        toPart.`matingPartRquired` = (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "        toPart.`pickupPadRequired` = (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "        toPart.`functionalTestingRequired`= (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vMessage = '';  \n" +
                "			CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,pToPartID,pUserID,vIsCPN,vToPartIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "	IF(vMessage != '')  \n" +
                "	THEN  \n" +
                "		select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "		select * from component where id = pToPartID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                functionalCategoryText,                mountingTypeText,                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				connectorTypeText,				noOfPositionText,				noOfPosition,				noOfRowsText,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				partPackage,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,                uomText,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  functionalCategoryText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  mountingTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connectorTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPositionText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRowsText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  partPackage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  uomText ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(vValidationPassed = 1)  \n" +
                "		THEN  \n" +
                "			 set vMessage = '';  \n" +
                "			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "            IF(vMessage != '')  \n" +
                "			THEN  \n" +
                "				select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "			ELSE  \n" +
                "				IF pIsSettings then  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`  \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				IF pIsAcceptableShippinCountry then  \n" +
                "					INSERT INTO component_acceptable_shipping_countries  \n" +
                "						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "						component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1191,'1.00','V1','Bug 38954: Code Refactor: [Main Branch] Need to restrict users to add Packaging Alias for Assembly/Sales kit at part master - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1191:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
                "	IN pCustomerID INT(11),  \n" +
                "	IN pPartID INT(11)  ,  \n" +
                "	IN psubAssyID INT(11) ,  \n" +
                "    IN pSearchObj VARCHAR(500),  \n" +
                "    IN pSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT(11);  \n" +
                "	DECLARE whereClause VARCHAR(2000);  \n" +
                "	DECLARE partStatusID INT(11);  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
                "	SET whereClause = \" a.partCategory = 3 \";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
                "		SET pCustomerID=NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
                "	END IF;  \n" +
                "  -- Added to search  Sales order number  \n" +
                "    IF pSearchObj IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
                "    END IF;  \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
                "    END IF;  \n" +
                "	IF(pPartID IS NOT NULL) THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "		c.partStatus, c.isGoodPart,  \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
                "		(SELECT  perAssyBuildQty  \n" +
                "			FROM 	kit_allocation_assy_detail  \n" +
                "			WHERE 	refSalesorderdetid = sd.id  \n" +
                "		AND 	partId = \",pPartID,\"  \n" +
                "			AND 	isDeleted = 0) AS qpaa,  \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
                "        sd.partCategory,  \n" +
                "        astk.initialStockCount  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
                "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
                "	        -- SELECT @SQLStatement2;  \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "		-- 	 SELECT @SQLStatement2;  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "			1 AssyType,  \n" +
                "			(SELECT  perAssyBuildQty  \n" +
                "				FROM 	kit_allocation_assy_detail  \n" +
                "				WHERE 	refSalesorderdetid = sd.id  \n" +
                "			AND 	partId = sd.partID  \n" +
                "				AND 	isDeleted = 0) AS qpaa,  \n" +
                "			CASE c.partStatus  \n" +
                "			WHEN \", partStatusID, \" THEN FALSE  \n" +
                "			ELSE TRUE  \n" +
                "			END AS isActive ,  \n" +
                "            sd.partCategory , c.partStatus , astk.initialStockCount  \n" +
                "			FROM salesorderdet sd  \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
                "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "			-- SELECT @SQLStatement2;  \n" +
                "	END IF;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1192,'1.00','V1','Sproc_GetSOPIDList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1192:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-11-2021  *********************************** */
                "UPDATE systemconfigrations  \n" +
                "SET createdBy = 1  \n" +
                "WHERE createdBy IS NULL;  \n" +
                "  \n" +
                "UPDATE systemconfigrations  \n" +
                "SET createByRoleID = 1  \n" +
                "WHERE createByRoleID IS NULL;  \n" +
                "  \n" +
                "UPDATE systemconfigrations  \n" +
                "SET updatedBy = 1  \n" +
                "WHERE updatedBy IS NULL;  \n" +
                "  \n" +
                "UPDATE systemconfigrations  \n" +
                "SET updateByRoleID = 1  \n" +
                "WHERE updateByRoleID IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO systemconfigrations(`key`,`values`,`clusterName`,isActive,isDeleted,createdBy,isEditable,description,displayName)  \n" +
                "VALUES ('SkipCheckAccessTokenOnLogin', 1,'Company',1,0,1,1,'For Super Admin, on login skip check access token for pricing. 1-Skip checking access token for pricing, 0-Display popup for access token for pricing on super admin login','Skip Check Access Token On Login');  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1193,'1.00','V1','User Story 39009: Configurable Check Access Token Popup on Login'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1193:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2021  *********************************** */
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a key to access Newark API service which communicate with Newark Server to add and udpate transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='NewarkApiKey';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a key to access Mouser API service which communicate with Mouser Server to add and udpate transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='MouserApiKey';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a key to access Arrow API Logging which is required to process the API request. After Login with this key, add and update transaction related to Part, Part attributes, Datasheet, Images and Pricing are execute' WHERE `key`='ArrowLoginKey';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a key to access Arrow API service which communicate with Arrow Server after successful login with Login Key to add and update transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='ArrowApiKey';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a AvnetStoreID. Avnet is having multiple EndPoints and during the communication we have to send StoreID for get the Part data' WHERE `key`='AvnetStoreID';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a authentication token key to access Avnet API service which communicate with Avnet Server to add and update transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='AvnetAuthToken';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a Token key to access TTI API service for transmitting the API request' WHERE `key`='TTIAccessToken';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a key to access TTI Server to add and update transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='TTIHeader';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a key to access AvnetWCToken for authentication and update transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='AvnetWCToken';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a key to access AvnetWCTrustedToken for authentication and update transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='AvnetWCTrustedToken';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is maximum allowed character length for the PID in entire system.' WHERE `key`='PIDCodeLength';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Newark Customer Id will use only while requesting the special price through API request.' WHERE `key`='NewarkCustomerID';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Newark Secret key which communicate with Newark Server to add and update transaction related to Part, Part attributes, Datasheet, Images and Pricing' WHERE `key`='NewarkSecretKey';  \n" +
                "UPDATE `systemconfigrations` SET `description`='OctoPart APi key which communicate with OctoPart Server to download all datasheet for Part which are exist in the system' WHERE `key`='OctoPartApiKey';  \n" +
                "UPDATE `systemconfigrations` SET `description`='If user access level is below than X value, than password popup will prompt for user authentication' WHERE `key`='VerificationRoleAccess';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is showing number of day(s). System will run the batch job to update the part attributes which are blank for the each component which are older than the specific days(s) mentioned in the value field. System recommended minimum 7 day(s).' WHERE `key`='ComponentUpdateTimeInterval';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Cron job will trigger everyday on selected time to update off-the-shelf parts status from external API.' WHERE `key`='ComponentUpdateTimeInHrs';  \n" +
                "UPDATE `systemconfigrations` SET `description`='While scan the label, if \"Nickname\" is not defined during the process of Receiving Material, then the value defined in the files will be considered as prefix value.' WHERE `key`='BarcodePreFix';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Published Server IP for Bartender Server [xxx.xxx.xxx.xxx]' WHERE `key`='BartenderServer';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Published Server Port for Bartender Server [xxxx]' WHERE `key`='BartenderServerPort';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is in minutes [xx]. When there is an external call for getting the pricing from supplier through API call and if did not get the response even after the minutes which is mentioned in the value field, the pricing request will be terminate automatically' WHERE `key`='PricingStatusUpdateTime';  \n" +
                "UPDATE `systemconfigrations` SET `description`='For this the user can use either Text or Date. If a user wants to use the text method then please check the value for RFQInternalVersionPrefixText key and if user wants to use date method then please check value for RFQInternalVersionDateFormat key.' WHERE `key`='RFQInternalVersionMethod';  \n" +
                "UPDATE `systemconfigrations` SET `description`='If in \"RFQInternalVersionMethod\" value set as \"P\", then the value which is mentioned in the value field will be used as a prefix text. The allowed maximum character length is 8.' WHERE `key`='RFQInternalVersionPrefixText';  \n" +
                "UPDATE `systemconfigrations` SET `description`='If in \"RFQInternalVersionMethod\" value set as \"D\", then the Date format which is mentioned in the value field will be used as a prefix. There are only two date formats which can be configured, \"MMDDYY\" and \"YYMMDD\".' WHERE `key`='RFQInternalVersionDateFormat';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The role mentioned in the value field and its superior is allowed to delete the records. This role only applies to selected master pages.' WHERE `key`='DeleteRoleAccess';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is in percentage. In Sales Order, the system will generate the alert message to the user, when the percentage of the value entered in the MFR Quantity and Kit Quantity are equal or above the percentage value of PO Quantity.' WHERE `key`='POvsMRPQtyTolerancePer';  \n" +
                "UPDATE `systemconfigrations` SET `description`='This field is used in all the reports where we display the \"Terms & Conditions\":' WHERE `key`='Terms & Condition';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is in percentage. If Consumed quantity is more than defined percentage then during consumed material from UMID ask confirmation to user that Consumed quantity is more than <x>%. Are you sure you want to transfer and update quantity of this UMID?' WHERE `key`='CountMaterialPercentage';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Default Date format which used in the entire application for selecting the Date format in form and also in showing the report' WHERE `key`='DatePickerDateFormat';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Default Time format which is used in the entire application for selecting the Time format in form and also in showing the report.' WHERE `key`='TimePickerTimeFormat';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Default Date & Time format which used in the entire application for selecting the Date & Time format in form and also in showing the report.' WHERE `key`='DateTimePickerDateTimeFormat';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The value in this field will show as a disclaimer for reports in the entire application at the bottom of the report.' WHERE `key`='Report-Disclaimer';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The email address added in the value field will received email whenever system send the report via email' WHERE `key`='BCC Email Report';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The value in this field is used to apply the font style for the report header in the entire application.' WHERE `key`='ReportCommonData';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The URL mention in the field will show the image (logo) of the Compnay in Reports.' WHERE `key`='CompanyLogo';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Common number format used in entire application and reports.' WHERE `key`='CommonNumberFormat';  \n" +
                "UPDATE `systemconfigrations` SET `description`='At Traveler Page, on load show popup with list of part/material in use and expiry date near by configure {ExpireDaysLeft} days' WHERE `key`='ExpireDaysLeft';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Feeder status can be updated by the user having role which is set as the value or the role higher than that' WHERE `key`='FeederStatusAccess';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text mentioned in the value field is restricted for user input. The entered value indicates whether the InoAuto server is \"Offline\" or \"Online\". If the status is offline then the InoAuto request does not proceed and the system will show an alert message to the user.' WHERE `key`='InoAutoServerHeartbeatStatus';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text mentioned in the value field is computer name [hostname] where InoAuto server software is installed. Users can change the value if the software installed server location changes.' WHERE `key`='InoAutoServerName';  \n" +
                "UPDATE `systemconfigrations` SET `description`='When we get pricing from external API at that time we consider only those price which have sufficient stock. e.g., Required Qty. is 100 and if this parameter value is 5 then we get lowest price for that part which have minimum stock 500 (=100*5).' WHERE `key`='ForceToBuyPriceDifferenceXTimeLess';  \n" +
                "UPDATE `systemconfigrations` SET `description`='MFR Alias can be removed by the user having role as <Role Mentioned in Value> or above level' WHERE `key`='MFRRemoveAccess';  \n" +
                "UPDATE `systemconfigrations` SET `description`='For Accounting purposes, one of the following formats needs to select in the value field. 1) \"Calendar Year\" or \"Financial Year\". Accordingly system will maintain the financial transactions' WHERE `key`='AccountingYear';  \n" +
                "UPDATE `systemconfigrations` SET `description`='All date and time display in selected timezone in entire application.' WHERE `key`='TimeZone';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text mentioned in the value field will show the version we are using for DigiKey API' WHERE `key`='DKVersion';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The value which is visible is showing the status of the service. If the value is 1, then the service is in running mode and if the value is 0, then the service is in stop mode. If the service is in stop mode, then the user will get the message \"Contact to Administrator\" while accessing the pricing service.' WHERE `key`='PricingServiceStatus';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is showing the number of seconds. When user search the UMID, InoAuto will show the LED indication on connected BIN for till the seconds mention in the value field for pickup.' WHERE `key`='SearchRequestTimeout';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is showing the number of seconds. When user scan the \"Warehouse\" or \"Smart Cart\", LED indication will be on till the seconds mention in the value field for place.' WHERE `key`='CheckinRequestTimeout';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is showing the number of seconds. In InoAuto we have a limit to show the LED indication for 40 \"Warehouse\" or \"Smart Cart\". If there is no activity for selected \"Warehouse\" or \"Smart Cart\", then if there is any pending queue for indication, will show after the interval of seconds mention in the value field.' WHERE `key`='NextRowInterval';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is showing the number of days. The system will send an email to the client about the Part status in the system which was turned from Active to Obsolete within the day(s) mentioned in the value field.' WHERE `key`='DefaultMFRUpdateTime';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Value mentioned for this key is MAC address of system where we have given publish. It is used when we execute DB Script from UI to prevent execute from any other system. [xx-xx-xx-xx-xx-xx] is the format for MAC Address input. Other then this System, DB script udpate request are rejected.' WHERE `key`='ServerDBMACAddress';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The value set in the Value field will define the document upload size. The value should be set in the byte.' WHERE `key`='UploadDocumentSize';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The system will send an email to the customer for the obsolete part(s) details of the customer\''s Active Assembly BOM. This will update the customer to know about obsolete part(s) which are going to use in Active Assembly BOM. The value mentioned in the value field represents the days and this will be used during the generation of the obsolete part(s) report as a from date. e.g. If we set the value as 30 days, then \"From Date\" will be set as 30 days back from the current date and \"To Date\" as \"Current Date\". There is a separate schedule to run the report.' WHERE `key`='ObsoletePartReportDaysForCompany';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The Customer Packing slip number will be generated based on the format defined in the Value field. [YYMMDD]' WHERE `key`='CustomerPackingSlipNumber';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text mentioned in the value field is used by DB to group multiple text data in one row.' WHERE `key`='GroupConcatSeparator';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is showing the maximum length allowed for Production PN length in Part Master.' WHERE `key`='productionPNLength';  \n" +
                "UPDATE `systemconfigrations` SET `description`='In the payment report, it will show the date format that is defined in the value field. eg. [MM/dd/yyyy].' WHERE `key`='DatePickerPaymentReportDateFormat';  \n" +
                "UPDATE `systemconfigrations` SET `description`='If in \"CustomerReceiptInvoiceAutoSelect\" value set as \"1\", then once user enter payment amount at customer payment screen it will auto select invoice from pending invoice list based on matching payment amount. When value set as \"2\" then invoice selection is based of forwarding balance amount. When value set as \"0\" then invoice selection is manual.' WHERE `key`='CustomerReceiptInvoiceAutoSelect';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is in days [xx]. On the \"Customer Payment\" page, the user will be allowed to select the Payment date between the current date and the date which is coming after adding the days mentioned in the value field. e.g. Current date is 9th February 2021 and the value mention in the data key is 10, then the user will be able to select the payment date between 9th February 2021 and 19th February 2021.' WHERE `key`='CustomerAllowPaymentDays';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Select following option for Display MFG Code Format (Display Code first, Only Name, Only Code, Code Last) 1 - Display Code first,2 - Only Name,3 - Only Code, Default - Code Last' WHERE `key`='MfgCodeNameFormat';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a Avnet host name.' WHERE `key`='AvnetAPIHostName';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a Avnet Get API. Avnet for demo and production are two types of api where both are different keys' WHERE `key`='AvnetAPIPath';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text mentioned in the value field is the Avnet subscription key. Avnet for demo and production are two types of api where both are different keys' WHERE `key`='AvnetSubscriptionKey';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a Heilind partner name.' WHERE `key`='HeilindPartnerName';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a Heilind basic access token which can be generate through username and password.' WHERE `key`='HeilindAccessToken';  \n" +
                "UPDATE `systemconfigrations` SET `description`='default - To set theme color as \"current(Blue)\", tealTheme - To set theme color as \"Teal\", pinkTheme - To set theme color as \"Pink\"' WHERE `key`='DefaultTheme';  \n" +
                "UPDATE `systemconfigrations` SET `description`='1 - To view as demo application and we have set \"DEMO\" text below header icon for identification, 0 - To view as live application.' WHERE `key`='DemoTheme';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a per day limit for MouserApiKey.' WHERE `key`='MouserAPIRequestsLimit';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a per day limit for NewarkApiKey.' WHERE `key`='NewarkAPIRequestsLimit';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a day till that day quote valid from quote submitted days. Days calculate based on setting by user in Company Profile->Company Preference.' WHERE `key`='QuoteValidTillDays';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The text which is mentioned in the value field is a day till that day promised ship date calculated from promised dock date. Days calculate based on setting by user in Company Profile->Company Preference.' WHERE `key`='DefaultSOPromisedShipDateDays';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Authentication for check number duplication allowed under same bank account number. 1 - Authentication Required , 0 - Authentication not required' WHERE `key`='AuthenticateCheckNumberDuplication';  \n" +
                "UPDATE `systemconfigrations` SET `description`='If UMID scan at Workorder Operation Activity require approval then access level for approval should be equal or more than X value.' WHERE `key`='SupervisorApprovalForUMIDScan';  \n" +
                "UPDATE `systemconfigrations` SET `description`='Days left to expire before shipment from customer packing slip.' WHERE `key`='ExpireDaysLeftBeforeShipment';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1194,'1.00','V1','Bug 39010: Data key: Spell mistake in description for DatePickerDateFormat and DateTimePickerDateFormat Key of the grid - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1194:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "alter table salesordermst add column rmaNumber varchar(100) ;  \n" +
                "alter table salesordermst add column isDebitedByCustomer tinyint not null default 0;  \n" +
                "alter table salesordermst add column orgPONumber varchar(100) ;  \n" +
                "alter table salesordermst add column orgSalesOrderID int  ;  \n" +
                "alter table salesordermst add column isReworkRequired tinyint not null default 0;  \n" +
                "alter table salesordermst add column reworkPONumber varchar(100) ;  \n" +
                "  \n" +
                "alter table salesorderdet add column custOrgPOLineNumber varchar(10) ;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1195,'1.00','V1','Add RMA relavent fields in SO Master and Detail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1195:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "select chartRawDataCatID into @chartCatID from chart_rawdata_category where dbViewName = 'vu_salesorder_shipped_report';  \n" +
                "  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `aggregate`, `dataType`, `isActive`, `createdBy`, `isDeleted`, `isStaticField`, `displayOrder`, `fieldWidth`)  \n" +
                "VALUES (@chartCatID, 'IsRmaPOText', 'RMA PO', 'GROUP', 'varchar', '1', '1', '0', '1', '5.5', '110');  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1196,'1.00','V1','Make Entry of RMA PO Flag in MIS Report - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1196:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP VIEW IF EXISTS vu_salesorder_shipped_report;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`isRmaPOText` AS `isRmaPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT  \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isRmaPO`) AS `isRmaPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1197,'1.00','V1','vu_salesorder_shipped_report - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1197:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA'  \n" +
                "			WHEN  isBlanketPO THEN 'Blanket'  \n" +
                "            WHEN isLegacyPO THEN 'LEGACY'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1198,'1.00','V1','fun_getPOTypeByID - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1198:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyPOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT ,  \n" +
                "    IN pIsShowAllPO tinyint)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "    DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF !pIsShowAllPO THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");  \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"  \n" +
                "	select a.salesOrderDetailId,  \n" +
                "		a.soID,  \n" +
                "		a.poNumber,  \n" +
                "		a.poDate,  \n" +
                "		a.soNumber,  \n" +
                "		a.PartID,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,  \n" +
                "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,  \n" +
                "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN  \n" +
                "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))  \n" +
                "			ELSE 0 END) AS excessShipQty,  \n" +
                "		a.buildQty,  \n" +
                "        a.woCount ,a.isLegacyPO,a.IsLegacyPOText ,  \n" +
                "        a.POType  \n" +
                "        from (SELECT  \n" +
                "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,  \n" +
                "				vu_ssr.`Sales Order ID` soID,  \n" +
                "				vu_ssr.`Po Number` poNumber,  \n" +
                "				vu_ssr.`Po Date` poDate,  \n" +
                "				vu_ssr.`Sales Order` soNumber,  \n" +
                "				vu_ssr.`PO Qty` poQty,  \n" +
                "				vu_ssr.`Shipped Qty` shippedQty,  \n" +
                "				vu_ssr.`Balanced Due Qty` backOrderQty,  \n" +
                "				vu_ssr.`PartID` PartID,  \n" +
                "				ka.perAssyBuildQty AS    qpa,  \n" +
                "                vu_ssr.`Status` status,  \n" +
                "				vu_ssr.`lineID` lineID,  \n" +
                "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
                "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0)  \n" +
                "                FROM workorder_salesorder_details wsd  \n" +
                "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0  \n" +
                "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty ,  \n" +
                "                 (select count(vwss.woNumber) from  vu_workorder_summary_stk vwss  \n" +
                "                JOIN vu_workorder_sopoNumber_details vwsd ON vwsd.woID =  ifnull(vwss.woID,vwss.woNumber) and vwsd.partID = vwss.partID  \n" +
                "                LEFT JOIN workorder wo on ifnull(wo.terminateWOID,wo.woID) = vwss.woID  \n" +
                "                where FIND_IN_SET (vu_ssr.`Po Number`,vwsd.poNumber) AND   FIND_IN_SET (vu_ssr.`Sales Order`,vwsd.salesOrderNumber)  \n" +
                "                and vwss.partID = \",pPartID , \"  \n" +
                "                and (CASE WHEN vwss.woid IS NULL THEN ((vwss.readytoShipQty + vwss.shippedQty + vwss.stockAdjustmentQty) - (vwss.shippedQty)) ELSE ((vwss.buildQty) - (vwss.scrapQty + vwss.shippedQty + vwss.readytoShipQty)) END) >  0)   woCount  ,  \n" +
                "				vu_ssr.isLegacyPO,vu_ssr.IsLegacyPOText  ,  \n" +
                "                fun_getPOTypeByID(vu_ssr.`Sales Order ID`) POType  \n" +
                "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`  \n" +
                "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0 ) a \", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1199,'1.00','V1','Sproc_GetAssemblyPOStockDetails - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1199:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssyCompListForCustomerPackingSlipMISC;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pSearch VARCHAR(300),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pisFromSO TINYINT  ,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	/*NOTE:	pSalesOrderID is used for  RMA SO  for fetching part of original Q2C SO      */  \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (  \n" +
                "		customerID INT  \n" +
                "    );  \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/  \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN  \n" +
                "		SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/  \n" +
                "    IF 	pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "		SELECT buyTo AS customerID  \n" +
                "		FROM acquireCustomers;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "        SELECT smm.refMfgCodeMstID AS customerID  \n" +
                "		FROM supplier_mapping_mst smm  \n" +
                "		WHERE smm.supplierID = pCustomerID  \n" +
                "        AND smm.isDeleted = 0  \n" +
                "        AND smm.isCustMapping=0;  \n" +
                "	END IF;  \n" +
                "	IF pSalesOrderID IS NULL THEN  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				WHERE co.id > 0  \n" +
                "				AND  co.mfgType = 'MFG'  \n" +
                "				AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)  \n" +
                "								THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = co.mfgCodeID))  \n" +
                "							  ELSE 1 = 1  END)  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)  \n" +
                "				AND co.isDeleted = 0  \n" +
                "				AND co.isGoodPart = 1  \n" +
                "				AND co.partType != 4  \n" +
                "			) AS co  \n" +
                "			WHERE (CASE WHEN pSearch IS NOT NULL  \n" +
                "						THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))  \n" +
                "						ELSE 1 = 1  \n" +
                "				END);  \n" +
                "    ELSE  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  ,sod.custPOLineNumber  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				JOIN salesorderdet sod ON sod.partID = co.id and sod.isDeleted = 0  \n" +
                "				WHERE co.mfgType = 'MFG'  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!= -3  \n" +
                "				AND co.isDeleted = 0  \n" +
                "                and sod.refSalesOrderId = pSalesOrderID  \n" +
                "			) AS co  ;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1200,'1.00','V1','Sproc_GetAssyCompListForCustomerPackingSlipMISC - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1200:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
                "	IN invoiceID INT      ,  \n" +
                "    IN pTransType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	                 SELECT inv.id,   inv.transType,  \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "                        cps.id packingSlipID,  \n" +
                "						inv.refSalesOrderId  ,  \n" +
                "                        inv.systemID,  \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,  \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
                "						inv.soNumber,inv.soDate,  \n" +
                "                        inv.packingSlipType,inv.`status`,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
                "						inv.invoiceNumber,inv.invoiceDate,  \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
                "                        inv.intermediateShipmentId ,  \n" +
                "						inv.billingAddress,  \n" +
                "						inv.shippingAddress,  \n" +
                "						inv.intermediateAddress,  \n" +
                "                        inv.isLocked,  \n" +
                "                        inv.subStatus,  \n" +
                "                        inv.paymentStatus,  \n" +
                "                        inv.packingSlipType,  \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 OR inv.packingSlipType = 2  THEN 'Invoice' WHEN inv.packingSlipType = 3 THEN 'MISC Invoice' ELSE null END) invoiceTypeText,  \n" +
                "                        inv.isZeroValue,  \n" +
                "                        inv.revision,  \n" +
                "                        cps.subStatus packingSlipSubStatus,  \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
                "						ELSE '' END) materialStatus ,  \n" +
                "                        inv.isAlreadyPublished ,  \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
                "			cps.revision packingSlipVersion,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
                "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
                "			ELSE NULL END) receivedAmount,  \n" +
                "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
                "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN  \n" +
                "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
                "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
                "				END) AS paymentStatusCode,  \n" +
                "			inv.refundStatus,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
                "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
                "				sm.isRmaPO,  \n" +
                "				sm.isLegacyPO,  \n" +
                "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
                "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
                "			inv.isAskForVersionConfirmation,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  ,  \n" +
                "                        fun_getPOTypeByID(inv.refSalesOrderId) poType  \n" +
                "		FROM customer_packingslip inv  \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
                "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
                "                 WHERE inv.id = invoiceID  \n" +
                "                 AND inv.transType = pTransType  \n" +
                "                 AND inv.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,  \n" +
                "					cpd.id,  \n" +
                "                    cpd.refCustPackingSlipID,  \n" +
                "					cpd.custPOLineID,  \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                    cpd.lineID,  \n" +
                "                    co.PIDCode,  \n" +
                "                    co.mfgcodeID,  \n" +
                "                    ss.releaseNumber,  \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
                "					co.mfgpn,  \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                    cpd.partId,  \n" +
                "                    cpd.refChargesTypeID,  \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "                    othercharges AS lineOtherCharges,  \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "					cpd.shippingNotes,  \n" +
                "                    cpd.internalComment,  \n" +
                "                    cpd.assyDescription,  \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
                "                    co.partType,  \n" +
                "                    vu.packingLineID,  \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "                    cpd.isZeroValue,  \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
                "                 ORDER BY cpd.lineID ASC;  \n" +
                "  \n" +
                "                 SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                         cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName,  \n" +
                "			cpOther.frequencyType,  \n" +
                "			  (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
                "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "                 FROM  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "                   customer_packingslip_otherexpense_details cpOther  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cpOther.isdeleted=0;  \n" +
                "  \n" +
                "                  --  Tracking Number  \n" +
                "                SELECT id,trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = invoiceID  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- sales commission attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.quoted_commissionPercentage,  \n" +
                "                    cca.quoted_commissionValue,  \n" +
                "                    cca.poQty,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.quotedQty,  \n" +
                "                    cca.type,  \n" +
                "                    cca.rfqAssyID,  \n" +
                "                    cca.commissionCalculateFrom,  \n" +
                "                    cca.salesCommissionNotes,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.quoted_unitPrice  \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "                 -- sales commission child attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.refQuoteAttributeId,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.org_commissionPercentage,  \n" +
                "                    cca.org_commissionValue,  \n" +
                "                    cca.category,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.org_unitPrice,  \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
                "				FROM customer_packingslip_commission_attribute cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1201,'1.00','V1','Sproc_GetCustomerInvoiceDetail - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1201:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP VIEW IF EXISTS vu_salesorder_updatedlist_report;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1202,'1.00','V1','vu_salesorder_updatedlist_report - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1202:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP VIEW IF EXISTS vu_workorder_salesorder_details;  \n" +
                "CREATE VIEW `vu_workorder_salesorder_details` AS  \n" +
                "    SELECT  \n" +
                "        `wosodet`.`woID` AS `woID`,  \n" +
                "        SUM(`wosodet`.`poQty`) AS `totalPOQty`,  \n" +
                "        GROUP_CONCAT(`wosodet`.`poQty`  \n" +
                "            SEPARATOR ',') AS `POQtyValues`,  \n" +
                "        SUM(`sodet`.`mrpQty`) AS `totalMRPQty`,  \n" +
                "        MAX(`sodet`.`isHotJob`) AS `isHotJob`,  \n" +
                "        GROUP_CONCAT(`sodet`.`mrpQty`  \n" +
                "            SEPARATOR ',') AS `MRPQtyValues`,  \n" +
                "        GROUP_CONCAT(`som`.`poNumber`  \n" +
                "            SEPARATOR ', ') AS `poNumber`,  \n" +
                "        GROUP_CONCAT(`som`.`salesOrderNumber`  \n" +
                "            SEPARATOR ', ') AS `salesOrderNumber`,  \n" +
                "        GROUP_CONCAT(`sodet`.`lineID`  \n" +
                "            SEPARATOR ',') AS `lineID`,  \n" +
                "        GROUP_CONCAT(`som`.`id`  \n" +
                "            SEPARATOR ',') AS `salesOrderMstIDs`,  \n" +
                "        GROUP_CONCAT(`sodet`.`qty`  \n" +
                "            SEPARATOR ',') AS `SOPOQtyValues`,  \n" +
                "        GROUP_CONCAT(`sodet`.`partDescription`  \n" +
                "            SEPARATOR ',') AS `partDescription`,  \n" +
                "        GROUP_CONCAT(FUN_GETPOTYPEBYID(`som`.`id`)  \n" +
                "            SEPARATOR ',') AS `soType`  \n" +
                "    FROM  \n" +
                "        ((`workorder_salesorder_details` `wosodet`  \n" +
                "        LEFT JOIN `salesorderdet` `sodet` ON (((`wosodet`.`salesOrderDetailID` = `sodet`.`id`)  \n" +
                "            AND (`sodet`.`deletedAt` IS NULL))))  \n" +
                "        LEFT JOIN `salesordermst` `som` ON (((`sodet`.`refSalesOrderID` = `som`.`id`)  \n" +
                "            AND (`som`.`deletedAt` IS NULL))))  \n" +
                "    WHERE  \n" +
                "        ((`wosodet`.`deletedAt` IS NULL)  \n" +
                "            AND (IFNULL(`wosodet`.`isDeleted`, 0) = 0))  \n" +
                "    GROUP BY `wosodet`.`woID`;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1203,'1.00','V1','vu_workorder_salesorder_details - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1203:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getCustomerSalesOrderDetail;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSalesOrderDetail`(  \n" +
                "	IN pCustomerId INT,  \n" +
                "    IN pCurrSOId INT,  \n" +
                "    IN pSearchPO VARCHAR(100),  \n" +
                "    IN pSOId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF pCustomerId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(\"Select salesOrderNumber,PONumber ,  \n" +
                "										id AS soId,  \n" +
                "                                        som.contactPersonID,  \n" +
                "                                        som.billingAddressID,  \n" +
                "                                        som.shippingAddressID,  \n" +
                "                                        som.shippingMethodID,  \n" +
                "                                        som.intermediateShipmentId,  \n" +
                "										som.termsID,  \n" +
                "                                        som.salesCommissionTo,  \n" +
                "                                        som.freeOnBoardId,  \n" +
                "                                        som.carrierID,  \n" +
                "                                        som.carrierAccountNumber,  \n" +
                "                                        som.internalComment,  \n" +
                "                                        som.shippingComment  \n" +
                "									 From  salesordermst som  \n" +
                "                                     where som.isDeleted = 0  \n" +
                "                                     and som.status = 1  \n" +
                "                                     and som.customerID = \", pCustomerId ,  \n" +
                "                                     \" and som.id <> \" , ifNull(pCurrSOId,0),  \n" +
                "                                     \" and (som.poNumber like '%\",pSearchPO, \"%' OR  \n" +
                "											som.salesOrderNumber like '%\",pSearchPO, \"%')\");  \n" +
                "		IF pSOId IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1 , \" and som.id = \" , pSOId );  \n" +
                "        END IF;  \n" +
                "		PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "		EXECUTE mainQuery;  \n" +
                "		DEALLOCATE PREPARE mainQuery;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1204,'1.00','V1','Sproc_getCustomerSalesOrderDetail - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1204:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesorderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "       SELECT som.id FROM salesordermst som  \n" +
                "     WHERE som.id IN  \n" +
                "          (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "	       EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.isdeleted=0 AND sm.id=sd.refSalesOrderID) AND sd.isdeleted=0  \n" +
                "	       AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "							JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "							WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "                       )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat(fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\"),' | ' ,so.salesOrderNumber,' | ',so.poNumber,  \n" +
                "			(case when so.isLegacyPO || so.isRmaPO || so.isBlanketPo then ' | ' else '' end) ,fun_getPOTypeByID(so.id)) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "  IF(salesorderID IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "  END IF;  \n" +
                "	IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1205,'1.00','V1','Sproc_GetPendingSalesorderDetails - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1205:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetsalesOrderDetailStatus;  \n" +
                "CREATE PROCEDURE `Sproc_GetsalesOrderDetailStatus`(  \n" +
                "	IN psalesorderDetID VARCHAR(10000),  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vQtyRelease INT;  \n" +
                "	DECLARE vQtyWprkorder INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfRelease INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfWO INT;  \n" +
                "    DECLARE vTransactionCnt INT DEFAULT 0;  \n" +
                "    IF pSalesOrderId IS NULL THEN  \n" +
                "			SELECT 	IFNULL(SUM(kitReleaseQty),0), salesOrderDetID  \n" +
                "			INTO 	vQtyRelease, vSalesOrderDetailIdOfRelease  \n" +
                "			FROM 	salesorder_plan_detailsmst  \n" +
                "			WHERE 	FIND_IN_SET(salesOrderDetID, psalesorderDetID)  \n" +
                "					AND isdeleted = 0  \n" +
                "					AND kitStatus = 'R'  \n" +
                "			GROUP BY salesOrderDetID;  \n" +
                "  \n" +
                "			SELECT 	IFNULL(SUM(poQty),0), salesOrderDetailID  \n" +
                "			INTO 	vQtyWprkorder, vSalesOrderDetailIdOfWO  \n" +
                "			FROM 	workorder_salesorder_details  \n" +
                "			WHERE 	FIND_IN_SET(salesOrderDetailID, psalesorderDetID)  \n" +
                "					AND isdeleted = 0  \n" +
                "			GROUP BY salesOrderDetailID;  \n" +
                "  \n" +
                "			SELECT vQtyRelease, vSalesOrderDetailIdOfRelease, vQtyWprkorder, vSalesOrderDetailIdOfWO;  \n" +
                "		  IF(preleaseLineId IS NULL) THEN  \n" +
                "				SELECT 	IFNULL(SUM(cpd.shipQty),0) shippedqty, cp.id, GROUP_CONCAT(cp.packingSlipNumber) packingSlipNumber, refSalesOrderID vSalesOrderDetailIdOfCustPS  \n" +
                "				FROM 	customer_packingslip_det cpd  \n" +
                "				JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "				WHERE FIND_IN_SET(cpd.refsalesorderdetid,psalesorderDetID)  \n" +
                "				  AND  cpd.isdeleted = 0  \n" +
                "				  AND cp.transType = 'P';  \n" +
                "		   ELSE  \n" +
                "				SELECT shippedQty AS shippedqty FROM   vu_shippingsummaryperReleasePlan WHERE shippingId=preleaseLineId;  \n" +
                "		   END IF;  \n" +
                "	ELSE  \n" +
                "			SELECT 	vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	salesorder_plan_detailsmst    spd  \n" +
                "            JOIN 	salesorderdet sod ON sod.id = spd.salesOrderDetID and sod.isDeleted = 0  \n" +
                "			WHERE spd.isDeleted = 0  \n" +
                "			AND spd.kitStatus = 'R'  \n" +
                "            and sod.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "            SELECT  vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	workorder_salesorder_details  wsd  \n" +
                "             JOIN 	salesorderdet sod ON sod.id = wsd.salesOrderDetailID and sod.isDeleted = 0  \n" +
                "			WHERE 	sod.refSalesOrderID = pSalesOrderId  \n" +
                "			AND wsd.isdeleted = 0    ;  \n" +
                "  \n" +
                "            SELECT 	vTransactionCnt + count(1)  \n" +
                "            INTO 	vTransactionCnt  \n" +
                "			FROM 	customer_packingslip cp  \n" +
                "			JOIN 	salesordermst som ON som.id = cp.refSalesOrderID AND som.isdeleted = 0  \n" +
                "			WHERE 	cp.isDeleted = 0  \n" +
                "			AND cp.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "			Select 	ifnull(vTransactionCnt,0) transCnt;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1206,'1.00','V1','Sproc_GetsalesOrderDetailStatus - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1206:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderForElastic;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderForElastic`(  \n" +
                "    IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1) totalCount  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON tm.gencCategoryID=som.shippingMethodID AND tm.isdeleted=0  \n" +
                "		WHERE som.isDeleted = FALSE;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			som.id,  \n" +
                "			som.salesOrderNumber,  \n" +
                "			som.poNumber,  \n" +
                "			som.poDate,  \n" +
                "			som.soDate,  \n" +
                "			som.customerID,  \n" +
                "			som.freeOnBoardId,  \n" +
                "			cust.mfgCode,  \n" +
                "			cust.isCustOrDisty,  \n" +
                "			cust.mfgType,  \n" +
                "			cust.mfgName,  \n" +
                "			fob.name AS fobName,  \n" +
                "			som.shippingMethodID,  \n" +
                "			som.revision,  \n" +
                "			som.termsID,  \n" +
                "			CASE WHEN som.status=1 THEN 'Published' ELSE 'Draft' END statusText,  \n" +
                "			som.revisionChangeNote,  \n" +
                "			som.salesCommissionTo,  \n" +
                "			som.serialNumber,  \n" +
                "			som.carrierID,  \n" +
                "			som.carrierAccountNumber,  \n" +
                "                        som.poRevision,  \n" +
                "                        CASE WHEN som.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPO,  \n" +
                "                        CASE WHEN som.isLegacyPO=1 THEN 'Yes' ELSE 'No' END legacyPO,  \n" +
                "                        CASE WHEN som.isRmaPO=1 THEN 'Yes' ELSE 'No' END rmaPO,  \n" +
                "                        cm.gencCategoryName AS carrierName,  \n" +
                "                        cm.genccategoryCode AS carrierCode,  \n" +
                "                        tm.gencCategoryName AS termsCode,  \n" +
                "                        tm.genccategoryCode AS termsName,  \n" +
                "                        sm.gencCategoryName AS shippingMethodName,  \n" +
                "                        som.isdeleted,  \n" +
                "                        som.rmaNumber AS rmaNumber,  \n" +
                "                        CASE WHEN som.isDebitedByCustomer =1 THEN 'Yes' ELSE 'No' END AS isDebitedByCustomer,  \n" +
                "                        som.orgPONumber AS orgPONumber,  \n" +
                "                        CASE WHEN som.isReworkRequired =1 THEN 'Yes' ELSE 'No' END isReworkRequired,  \n" +
                "                        som.reworkPONumber  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON sm.gencCategoryID=som.shippingMethodID AND sm.isdeleted=0  \n" +
                "		WHERE  \n" +
                "			som.id = IFNULL(pId,som.id)  AND  \n" +
                "			(CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(som.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "							OR (DATE(fun_CovnertDateTimeByTimezoneValue(som.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1207,'1.00','V1','Sproc_GetSalesOrderForElastic - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1207:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1208,'1.00','V1','Sproc_GetSalesorderList - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1208:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderSummaryList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "		s.`rmaNumber` AS `rmaNumber`,  \n" +
                "                s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "	   ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  (sodCnt.completedLineCount * 100/sodCnt.totalLineCount) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "		    fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		    fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "	FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		   ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pIsRmaPO = 1) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1209,'1.00','V1','Sproc_GetSalesOrderSummaryList - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1209:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "  \n" +
                "    Select fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "					cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1210,'1.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID- US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1210:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
                "	IN pCustomerID INT(11),  \n" +
                "	IN pPartID INT(11)  ,  \n" +
                "	IN psubAssyID INT(11) ,  \n" +
                "    IN pSearchObj VARCHAR(500),  \n" +
                "    IN pSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT(11);  \n" +
                "	DECLARE whereClause VARCHAR(2000);  \n" +
                "	DECLARE partStatusID INT(11);  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
                "	SET whereClause = \" a.partCategory = 3 \";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
                "		SET pCustomerID=NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
                "	END IF;  \n" +
                "  -- Added to search  Sales order number  \n" +
                "    IF pSearchObj IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
                "    END IF;  \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
                "    END IF;  \n" +
                "	IF(pPartID IS NOT NULL) THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "		c.partStatus, c.isGoodPart,  \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
                "		(SELECT  perAssyBuildQty  \n" +
                "			FROM 	kit_allocation_assy_detail  \n" +
                "			WHERE 	refSalesorderdetid = sd.id  \n" +
                "		AND 	partId = \",pPartID,\"  \n" +
                "			AND 	isDeleted = 0) AS qpaa,  \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
                "        sd.partCategory,  \n" +
                "        astk.initialStockCount  ,  \n" +
                "        fun_getPOTypeByID(sm.id) POType  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
                "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
                "	        -- SELECT @SQLStatement2;  \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "		-- 	 SELECT @SQLStatement2;  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "			1 AssyType,  \n" +
                "			(SELECT  perAssyBuildQty  \n" +
                "				FROM 	kit_allocation_assy_detail  \n" +
                "				WHERE 	refSalesorderdetid = sd.id  \n" +
                "			AND 	partId = sd.partID  \n" +
                "				AND 	isDeleted = 0) AS qpaa,  \n" +
                "			CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE  ELSE TRUE  END AS isActive ,  \n" +
                "            sd.partCategory , c.partStatus , astk.initialStockCount  ,  \n" +
                "            fun_getPOTypeByID(sm.id) POType  \n" +
                "			FROM salesorderdet sd  \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
                "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,(case when a.POType <> '' then ' | ' else '' end), a.poType,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "			-- SELECT @SQLStatement2;  \n" +
                "	END IF;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1211,'1.00','V1','Sproc_GetSOPIDList - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1211:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetWOHeaderDisplayDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
                "	IN pwoID INT(11),  \n" +
                "	IN pwoOPID INT(11),  \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
                "	IN pNoCleanCleanType VARCHAR(5),  \n" +
                "	IN pwoAssyID INT(11) ,  \n" +
                "	IN pemployeeIDOfWOOP INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgNameFormat;  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
                "			`ca`.`PIDCode` ,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  \n" +
                "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,  \n" +
                "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.soType ELSE parentSaleDtl.soType END soType,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp ,  \n" +
                "            wo.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
                "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
                "		SELECT  \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
                "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
                "			`woop`.isPlacementTracking,  \n" +
                "			`woop`.isLoopOperation,  \n" +
                "			`woop`.isAllowFinalSerialMapping,  \n" +
                "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
                "			`woop`.colorCode,  \n" +
                "            `woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
                "            `woop`.`isNoClean` AS `opNoClean`,  \n" +
                "            `woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
                "			`ca`.`PIDCode`,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,  \n" +
                "			`ca`.`RoHSStatusID`, `ca`.isCustom ,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
                "				WHERE wc.clusterID  \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "						WHERE woc.woopid=pwoOPID AND `woc`.`deletedAt` IS NULL)  \n" +
                "				 AND wc.deletedAt IS NULL AND wc.woID = pwoID  \n" +
                "			) isParellelOperation,  \n" +
                "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "            wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
                "            fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification ,  \n" +
                "            wo.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "        -- END IF;  \n" +
                "  \n" +
                "	# last ECO request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "        # last DFM request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "  \n" +
                "        # is export controlled assembly  \n" +
                "        SELECT (CASE WHEN  \n" +
                "	(SELECT COUNT(1) FROM certificate_standards  \n" +
                "	WHERE deletedAt IS NULL  \n" +
                "	AND isExportControlled = 1  \n" +
                "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
                "					WHERE deletedAt IS NULL  \n" +
                "					AND componentID IN (  \n" +
                "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE deletedAt IS NULL  \n" +
                "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "										WHERE deletedAt IS NULL AND partID = pwoAssyID)  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
                "								WHERE deletedAt IS NULL AND woID = pwoID  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
                "							   )  \n" +
                "					) > 0) THEN 1  \n" +
                "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
                "  \n" +
                "  \n" +
                "	#  7. get wo op empl wise total time consumption details  \n" +
                "	# include both setup and production activity  \n" +
                "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1212,'1.00','V1','Sproc_GetWOHeaderDisplayDetails - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1212:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "		cd.subStatus,  \n" +
                "		cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "			(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) createdAt,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
                "         (select group_concat(trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumber,  \n" +
                "         (select COUNT(trackNumber) from customer_packing_slip_track_number cpTrack where cpTrack.refCustPackingSlipID = cd.id and cpTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           (select count(1) from customer_packingslip_det packingdtl where packingdtl.refCustPackingSlipID = cd.id and  packingdtl.isDeleted = 0) packingSlipCnt  ,  \n" +
                "           som.rmaNumber,som.isRmaPO,  \n" +
                "           (CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1213,'1.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1213:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1214,'1.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1214:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_salesordermst;  \n" +
                "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) THEN  \n" +
                "       UPDATE customer_packingslip SET soNumber=NEW.salesOrderNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SALESORDERNUMBER',CAST(OLD.salesOrderNumber AS CHAR),  \n" +
                "       CAST(new.salesOrderNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poNumber=NEW.poNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poDate=NEW.poDate,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR),  \n" +
                "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CUSTOMERID', CAST(OLD.customerID AS CHAR),  \n" +
                "       CAST(new.customerID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CONTACTPERSONID', CAST(OLD.contactPersonID AS CHAR),  \n" +
                "       CAST(new.contactPersonID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BILLINGADDRESSID', CAST(OLD.billingAddressID AS CHAR),  \n" +
                "       CAST(new.billingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESSID', CAST(OLD.shippingAddressID AS CHAR),  \n" +
                "       CAST(new.shippingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHODID', CAST(OLD.shippingMethodID AS CHAR),  \n" +
                "       CAST(new.shippingMethodID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISION', CAST(OLD.revision AS CHAR),  \n" +
                "       CAST(new.revision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCOMMENT', CAST(OLD.shippingComment AS CHAR),  \n" +
                "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "     IF IFNULL(OLD.internalComment ,0) != IFNULL(NEW.internalComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'INTERNALCOMMENT', CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'TERMSID', CAST(OLD.termsID AS CHAR),  \n" +
                "       CAST(new.termsID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'STATUS', CAST(OLD.status AS CHAR),  \n" +
                "       CAST(new.status AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SODATE', CAST(OLD.soDate AS CHAR),  \n" +
                "       CAST(new.soDate AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISIONCHANGENOTE', CAST(OLD.revisionChangeNote AS CHAR),  \n" +
                "       CAST(new.revisionChangeNote AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CASE WHEN old.isBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "      CASE WHEN new.isBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR),  \n" +
                "      CAST(NEW.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'', CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isRmaPO ,0) != IFNULL(NEW.isRmaPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMAPO', CASE WHEN old.isRmaPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isRmaPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isLegacyPO ,0) != IFNULL(NEW.isLegacyPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LEGACYPO', CASE WHEN old.isLegacyPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isLegacyPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.originalPODate ,0) != IFNULL(NEW.originalPODate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPODATE', CAST(DATE_FORMAT(OLD.originalPODate, \"%m/%d/%Y\") AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(new.originalPODate, \"%m/%d/%Y\") AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMANUMBER', CAST(OLD.rmaNumber AS CHAR),  \n" +
                "       CAST(new.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDebitedByCustomer ,0) != IFNULL(NEW.isDebitedByCustomer ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'DEBITBYCUST', CASE WHEN OLD.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.orgPONumber ,0) != IFNULL(NEW.orgPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPONUMBER', CAST(OLD.orgPONumber AS CHAR),  \n" +
                "       CAST(new.orgPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isReworkRequired ,0) != IFNULL(NEW.isReworkRequired ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKREQ', CASE WHEN OLD.isReworkRequired=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isReworkRequired=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.reworkPONumber ,0) != IFNULL(NEW.reworkPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKPONUMBER', CAST(OLD.reworkPONumber AS CHAR),  \n" +
                "       CAST(new.reworkPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1215,'1.00','V1','Trg_AU_salesordermst - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1215:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_salesorderdet;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),  \n" +
                "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(CAST(OLD.price AS DECIMAL(15,5)) AS CHAR),  \n" +
                "      CAST(CAST(new.price AS DECIMAL(15,5)) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),  \n" +
                "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),  \n" +
                "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),  \n" +
                "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),  \n" +
                "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),  \n" +
                "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),  \n" +
                "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),  \n" +
                "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),  \n" +
                "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),  \n" +
                "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(old.custPOLineNumber,\"\")!=IFNULL(NEW.custPOLineNumber,\"\")THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',OLD.custPOLineNumber,  \n" +
                "       new.custPOLineNumber,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "       END IF;  \n" +
                "       IF IFNULL(old.salesOrderDetStatus,0)!=IFNULL(NEW.salesOrderDetStatus,0)THEN  \n" +
                "		   INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		   VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'Status',CASE  WHEN OLD.salesOrderDetStatus=1 THEN 'InProgress' WHEN OLD.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END ,  \n" +
                "		   CASE WHEN NEW.salesOrderDetStatus=1 THEN 'InProgress' WHEN NEW.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "       END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isSkipKitCreation,0) != IFNULL(NEW.isSkipKitCreation,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISKIPKITCREATION',CASE WHEN OLD.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTENUMBER',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "       CAST(new.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.frequency,0) != IFNULL(NEW.frequency,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'FREQUENCY',CAST(CASE WHEN OLD.frequency=1 THEN 'Every' WHEN OLD.frequency=2 THEN 'First' WHEN OLD.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),  \n" +
                "       CAST(CASE WHEN new.frequency=1 THEN 'Every' WHEN new.frequency=2 THEN 'First' WHEN new.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTEFROM',  \n" +
                "       CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ'  \n" +
                "			WHEN OLD.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN OLD.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		CASE WHEN new.quoteFrom = 1 THEN 'From RFQ'  \n" +
                "			WHEN new.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN new.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.custOrgPOLineNumber,0) != IFNULL(NEW.custOrgPOLineNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CUSTORGPOLINENUMBER',CAST(OLD.custOrgPOLineNumber AS CHAR),  \n" +
                "       CAST(new.custOrgPOLineNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1216,'1.00','V1','Trg_AU_salesorderdet - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1216:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate  \n" +
                "  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustAgedReceivablesRangeDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustAgedReceivablesRangeDet`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT ,  \n" +
                "	IN pCustomerID VARCHAR(10000) ,  \n" +
                "	IN pAgedRecvAmtWithIn VARCHAR(20),  \n" +
                "	IN pIsAllCustAllInvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllUninvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllDraftCMOnly TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE vAgedAmtWithIn VARCHAR(1000);  \n" +
                "	-- DECLARE vSumOfAgedAmtWithIn VARCHAR(1000);  \n" +
                "	DECLARE vWCCustIDForInv VARCHAR(10000);  \n" +
                "	DECLARE vWCCustIDForPMT VARCHAR(10000);  \n" +
                "	DECLARE vWCAllCustAllInv VARCHAR(100);  \n" +
                "	DECLARE vAgedAmtWithInCondition VARCHAR(1000);  \n" +
                "  \n" +
                "	SET vAgedAmtWithIn = \" \";  \n" +
                "	-- SET vSumOfAgedAmtWithIn = \" \";  \n" +
                "	SET vWCCustIDForInv = \" \";  \n" +
                "	SET vWCCustIDForPMT = \" \";  \n" +
                "	SET vWCAllCustAllInv = \" \";  \n" +
                "	SET vAgedAmtWithInCondition = '';  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "	IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "		SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "		SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "	ELSE  \n" +
                "		SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pAgedRecvAmtWithIn IS NOT NULL AND pAgedRecvAmtWithIn != '') THEN  \n" +
                "		IF (pAgedRecvAmtWithIn = 'TotPastDue') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) ');  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = 'CurrAmtWithinTerms') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.currentAmount) totalAmountWithinTerms , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) ');  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '0-30') THEN  \n" +
                "			-- set vSumOfAgedAmtWithIn = concat( ' SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) ');  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '31-60') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) ' );  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '61-90') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) ' );  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '91-120') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) ' );  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '120+') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) ' );  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "		SET vWCCustIDForInv = CONCAT(' AND `a`.`customerID` IN (',pCustomerID,') ');  \n" +
                "		SET vWCCustIDForPMT = CONCAT(' AND `a`.`mfgcodeID` IN (',pCustomerID,') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsAllCustAllInvOnly = 1) THEN  \n" +
                "		SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`invoiceCount` = 1 ');  \n" +
                "	ELSEIF (pIsAllCustAllUninvOnly = 1) THEN  \n" +
                "		SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`unInvoiceCount` = 1 ');  \n" +
                "	ELSEIF (pIsAllCustAllDraftCMOnly = 1) THEN  \n" +
                "		SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`dratftCreditMemoCount` = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"  \n" +
                "	SELECT  temp_aged_details.*,  \n" +
                "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName  \n" +
                "  \n" +
                "	 FROM (  \n" +
                "			SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`transMstID` 		      AS `transMstID`,  \n" +
                "				  `cid`.`transNumber` 		      AS `transNumber` ,  \n" +
                "				  `cid`.`transType`		      AS  `transType` ,  \n" +
                "				  `cid`.`transTypeText` 	      AS `transTypeText` ,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "				  `cid`.`DocDate`                     AS `DocDate`,  \n" +
                "				  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  \",vAgedAmtWithIn,\"  \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT  \n" +
                "						 `a`.`customerID`                     AS `customerID`,  \n" +
                "						 `a`.termsDays			      AS `termsDays`,  \n" +
                "						 `a`.`id`                             AS `transMstID`,  \n" +
                "						 IF((`a`.`transType` = 'I'), `a`.`invoiceNumber`, `a`.`creditMemoNumber`) AS `transNumber`,  \n" +
                "						 `a`.`transType`		      AS `transType` ,  \n" +
                "						IF((`a`.`transType` = 'I'), 'Customer Invoice', 'Customer Credit Memo') AS `transTypeText`,  \n" +
                "						IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "						IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "						IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "						IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "						IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "						0                                    AS `totalUnappliedAmount`,  \n" +
                "						IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "						IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "						IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "						-- IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "						(CASE WHEN `a`.`transType` = 'I' AND (`a`.`subStatus` = '1' OR `a`.`subStatus` > '3') THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "							WHEN `a`.`transType` = 'C' AND `a`.`subStatus` = '1' THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "							ELSE 0 END) AS totalDraftAmount  \n" +
                "					FROM `customer_packingslip` `a`  \n" +
                "							LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "											      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "											      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "												SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "											    FROM (`packingslip_invoice_payment` `a`  \n" +
                "											       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "												 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "											    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "												   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "												   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "											    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "											ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT  \n" +
                "												a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "												SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "										FROM `packingslip_invoice_payment` `a`  \n" +
                "											       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "												 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "											    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "												   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "												   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "											    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "											    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "							LEFT JOIN (  \n" +
                "										SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "											FROM packingslip_invoice_payment_det  \n" +
                "											WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "											GROUP BY refRefundCustCreditMemoID  \n" +
                "										) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "					WHERE ( (`a`.`transType` IN('I','C'))  \n" +
                "					\",vWCCustIDForInv,\"  \n" +
                "					AND  (a.paymentStatus <> 'RE')  \n" +
                "					-- AND  (IFNULL(a.totalAmount,0) != 0)  \n" +
                "					AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "					AND (`a`.`isDeleted` = 0))  \n" +
                "  \n" +
                "				UNION  \n" +
                "  \n" +
                "					SELECT  \n" +
                "						`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "						NULL									AS `termsDays`,  \n" +
                "						`a`.`id`								AS `transMstID`,  \n" +
                "						`a`.`paymentNumber`							AS `transNumber` ,  \n" +
                "						'R'		  	    						AS `transType` ,  \n" +
                "						'Customer Payment' 							AS `transTypeText`,  \n" +
                "						0                                     					AS `invoiceCount`,  \n" +
                "						0                                     					AS `unInvoiceCount`,  \n" +
                "						0                                     					AS `dratftCreditMemoCount`,  \n" +
                "						`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "						0  									AS `totalRecievedAmount`,  \n" +
                "						((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "						0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "						0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "						0                                     					AS `totalInvoicedAmount`,  \n" +
                "						0                                     					AS `totalDraftAmount`  \n" +
                "						FROM (`packingslip_invoice_payment` `a`  \n" +
                "							LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "							LEFT JOIN (  \n" +
                "									SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									GROUP BY refRefundPaymentID  \n" +
                "								     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "						WHERE ( (`a`.`refPaymentMode` = 'R')  \n" +
                "						\",vWCCustIDForPMT,\"  \n" +
                "						AND (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "						AND (`a`.`isPaymentVoided` = 0) )  \n" +
                "						GROUP BY `a`.`mfgcodeID`, a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , `a`.`paymentNumber`  \n" +
                "						HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "				) AS  cid  \n" +
                "  \n" +
                "			\",vWCAllCustAllInv,\"  \n" +
                "			GROUP BY `cid`.`customerID`,`cid`.`transMstID`, `cid`.`transNumber` ,  \n" +
                "				`cid`.`DocDate`, `cid`.`termsDays` ,  `cid`.`transType` , `cid`.`transTypeText` ,  \n" +
                "				(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "			HAVING (CASE WHEN `cid`.`transType` = 'C' AND \",pIsAllCustAllDraftCMOnly,\" != 1 THEN SUM(`cid`.`totalUnappliedCreditMemoAmount`) != 0  \n" +
                "						\",vAgedAmtWithInCondition,\"  \n" +
                "					WHEN `cid`.`transType` = 'I' AND \",pIsAllCustAllUninvOnly,\" != 1 THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) != 0)  \n" +
                "						\",vAgedAmtWithInCondition,\"  \n" +
                "					WHEN `cid`.`transType` = 'R' THEN SUM(`cid`.`totalUnappliedAmount`) != 0  \n" +
                "				ELSE 1=1 END)  \n" +
                "  \n" +
                "  \n" +
                "                   ) AS temp_aged_details  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY transTypeText asc, customerCodeName asc \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1217,'1.00','V1',' Aged Receivable SPs - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1217:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_CurrRefGencTransModeID INT;  \n" +
                "	DECLARE v_cntOfNotAllowedToLockRecord INT;  \n" +
                "  \n" +
                "	SET v_cntOfNotAllowedToLockRecord = 0;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_oldLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_oldLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_newLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_newLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* temporary table for display to be lock/unlock records */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
                "		tblMstID INT NOT NULL,  \n" +
                "		invCMPMTNumber VARCHAR(150),  \n" +
                "		invCMPMTDate DATE,  \n" +
                "		entityShortCode VARCHAR(10),  \n" +
                "		entityNameForChange VARCHAR(150)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* when customer refund then check all records valid or not - to display list */  \n" +
                "	IF (pRefPaymentMode = 'CR' AND pIsLockTransaction = 1) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tt_CustRefundValidatedList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "			SELECT pip.id AS custRefundMstID, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "				`fun_getCustRefundSubStatusNameByID`(pip.subStatus) AS refundSubStatusName ,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN COUNT(pipd.refRefundCustCreditMemoID)  \n" +
                "					WHEN refGencTransModeID = -9 THEN COUNT(pipd.refRefundPaymentID)  \n" +
                "				    ELSE NULL END) detItemCount,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN  \n" +
                "						(SELECT COUNT(1) FROM customer_packingslip WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundCustCreditMemoID))) AND isLocked != 1)  \n" +
                "					WHEN refGencTransModeID = -9 THEN  \n" +
                "						(SELECT COUNT(1) FROM packingslip_invoice_payment WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundPaymentID))) AND lockStatus != 'LC')  \n" +
                "					ELSE NULL END) detItemNotLockedCount  \n" +
                "			FROM packingslip_invoice_payment pip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON pip.id = pipd.refPayementid AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "			WHERE pip.id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "			 GROUP BY pip.id , pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "			 	`fun_getCustRefundSubStatusNameByID`(pip.subStatus) , pip.refGencTransModeID  \n" +
                "			;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_cntOfNotAllowedToLockRecord  \n" +
                "			FROM tt_CustRefundValidatedList  \n" +
                "			WHERE ((detItemNotLockedCount > 0) OR (subStatus != 4))  \n" +
                "			;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0 AND v_cntOfNotAllowedToLockRecord = 0) THEN  \n" +
                "  \n" +
                "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "			/* get list of all payments transaction to be locked/unlocked - selected from UI */  \n" +
                "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "			SELECT id, paymentNumber, paymentDate, pRefPaymentMode,  \n" +
                "				(CASE WHEN pRefPaymentMode = 'R' THEN  'Customer Payment' WHEN pRefPaymentMode = 'WOFF' THEN 'Customer Write Off'  \n" +
                "					WHEN pRefPaymentMode = 'CR' THEN 'Customer Refund' END) AS entityNameForChange  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "		ELSE  \n" +
                "			/* update all payments transaction to locked/unlocked - selected from UI */  \n" +
                "			UPDATE packingslip_invoice_payment  \n" +
                "			SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = pUserID  \n" +
                "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					/* get all payment dependent write off if any */  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT refPaymentID, paymentNumber, paymentDate, 'WOFF', 'Customer Write Off'  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				ELSE  \n" +
                "					/* update all payment dependent write off if any. we are maintaining lockStatus NA,RL for payment only  \n" +
                "					 not for write off, refund, applied CM so condition accordingly */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END)  \n" +
                "							 , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = pUserID  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CR')) THEN  \n" +
                "			/* payment lock/unlock - If payment dependent Refund then Lock/Unlock (Check for all payment must be lock)  \n" +
                "			    OR direct customer refund Lock/Unlock case */  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "				/* when refund then no need of loop to get refRefundIDs. we already have selected refund list  \n" +
                "					so set 1 as default to start outer loop*/  \n" +
                "				SELECT 1 INTO totCustInvPayments ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			/* outer loop of main payment - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT pipd.refPayementid  \n" +
                "						FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "									AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "						WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "						GROUP BY pipd.refPayementid ;  \n" +
                "				ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT invPaymentMstID AS refPayementid , pip.refGencTransModeID  \n" +
                "						FROM tt_UI_CustInvoicePaymentList tuip  \n" +
                "							JOIN packingslip_invoice_payment pip ON tuip.invPaymentMstID = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "  \n" +
                "						;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'CR') THEN  \n" +
                "								SELECT refGencTransModeID INTO v_CurrRefGencTransModeID  \n" +
                "								FROM tt_refundPMTMasterIDs LIMIT i,1 ;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -9)) THEN  \n" +
                "								/* check all payments contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
                "											THEN refRefundPaymentID != (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "											ELSE 1=1 END)  \n" +
                "										)  \n" +
                "								AND lockStatus != 'LC' ;  \n" +
                "  \n" +
                "							ELSEIF (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -6) THEN  \n" +
                "								/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND isLocked != 1 ;  \n" +
                "							ELSE  \n" +
                "								/* in case of Transaction Mode other than over payment then no need to check any one unlock case */  \n" +
                "								SET v_cntOfUnLockPMT = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "								/* for lock payment case need to display refund records too */  \n" +
                "								IF (pRefPaymentMode = 'R') THEN  \n" +
                "									/* get refund transaction to be lock/unlock */  \n" +
                "									INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "									SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
                "									FROM packingslip_invoice_payment  \n" +
                "									WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "										ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "									AND refPaymentMode = 'CR'  \n" +
                "									AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* update refund transaction to locked/unlocked */  \n" +
                "								UPDATE packingslip_invoice_payment  \n" +
                "								SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END) ,  \n" +
                "								  lockedAt = v_newLockedAt ,  \n" +
                "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "								    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "								     updatedBy = pUserID  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 0)) THEN  */  \n" +
                "  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
                "					FROM customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				ELSE  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = pUserRoleID , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = pUserID  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				/* ELSEIF (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 1) THEN  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						 JOIN (SELECT refCustPackingslipInvoiceID ,  \n" +
                "								MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
                "							FROM (  \n" +
                "								SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
                "									pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
                "								FROM packingslip_invoice_payment_det pipd  \n" +
                "									JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "								WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
                "														FROM packingslip_invoice_payment_det  \n" +
                "														WHERE refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "														AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "														)  \n" +
                "								AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "								) AS tiila  \n" +
                "							 GROUP BY refCustPackingslipInvoiceID  \n" +
                "							) AS toila  \n" +
                "							ON cps.id = toila.refCustPackingslipInvoiceID AND toila.isInvLockAllowed = 1  \n" +
                "  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				END IF;  */  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if no temp table tt_CustRefundValidatedList created then create it with no records */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (v_cntOfNotAllowedToLockRecord > 0)  \n" +
                "		OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* resp[3] - get is Any Not Allowed To Lock Record found */  \n" +
                "	 IF (v_cntOfNotAllowedToLockRecord > 0) THEN  \n" +
                "		SELECT 1 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 ELSE  \n" +
                "		SELECT 0 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 /* resp[4] - get all validateed refund record list */  \n" +
                "	 SELECT * FROM tt_CustRefundValidatedList ;  \n" +
                "  \n" +
                "	 /* Resp[5] - view to be lock/unlock record list */  \n" +
                "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustInvCMTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustInvCMTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvCMList JSON,  \n" +
                "	IN pTransType VARCHAR(10),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_oldLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_cntOfInvCMWhichNotFullyApplied INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedInvCM INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvCM INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE v_cntOfUnLockCM INT;  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "  \n" +
                "	SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedInvCM  = 0;  \n" +
                "	SET v_cntOfAlreadyVoidedPMT = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedPMT = 0;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
                "		tblMstID INT NOT NULL,  \n" +
                "		invCMPMTNumber VARCHAR(150),  \n" +
                "		invCMPMTDate DATE,  \n" +
                "		entityShortCode VARCHAR(10),  \n" +
                "		entityNameForChange VARCHAR(150)  \n" +
                "	);  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = NULL;  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInvCM = 0;  \n" +
                "		SET v_newLockStatusInvCM = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "		SET v_newLockStatusPMT = NULL;  \n" +
                "		SET v_oldLockStatusInvCM = 1;  \n" +
                "		SET v_newLockStatusInvCM = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice/credit memo List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvCMList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvCMList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvCMList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invCMMstID` INT PATH \"$.invCMMstID\" ,  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvCMList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pTransType IN ('C','I')) THEN  \n" +
                "  \n" +
                "		/* check if any locked/unlocked invoice/CM there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedInvCM  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isLocked = v_newLockStatusInvCM  \n" +
                "		AND transType = pTransType  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "		/* check if any voided payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isPaymentVoided = 1  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* check if any locked/unlocked payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND lockStatus = v_newLockStatusPMT  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/*IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  */  \n" +
                "		IF (pIsLockTransaction = 1) THEN  \n" +
                "			/* get list of invoice/CM whose status not in RE,NP - then not allowed to lock  \n" +
                "				RE-Fully Received/Full Credit Applied , NP-No Pending Credit */  \n" +
                "			SELECT COUNT(1) INTO v_cntOfInvCMWhichNotFullyApplied  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND paymentStatus NOT IN ('RE','NP')  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "		END IF;  \n" +
                "	/*END IF;  */  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM = 0 AND v_cntOfInvCMWhichNotFullyApplied = 0  \n" +
                "		AND v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0) THEN  \n" +
                "  \n" +
                "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "			/* get all invoice/CM transaction to locked/unlocked */  \n" +
                "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "			SELECT id,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN invoiceNumber  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoNumber ELSE NULL END) AS invCMPMTNumber,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN invoiceDate  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoDate ELSE NULL END) AS invCMPMTDate,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN 'I'  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'C' ELSE NULL END) AS entityShortCode,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN 'Customer Invoice'  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'Customer Credit Memo' ELSE NULL END) AS entityNameForChange  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "		ELSE  \n" +
                "			/* update all invoice/CM transaction to locked/unlocked */  \n" +
                "			UPDATE customer_packingslip  \n" +
                "			SET isLocked = v_newLockStatusInvCM , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRole = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = pUserID  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "				/* get all applied CM transaction to locked/unlocked */  \n" +
                "				INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "				SELECT refCustCreditMemoID, paymentNumber, NULL, 'CA', 'Applied Customer Credit Memo'  \n" +
                "				FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			ELSE  \n" +
                "				/* update all applied CM transaction to locked/unlocked */  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "				    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "				    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    updatedBy = pUserID  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* credit memo lock/unlock - If credit memo dependent Refund then Lock/Unlock (Check for all credit memo must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvCM FROM tt_UI_CustInvCMList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/* outer loop of main CM list - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvCM DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockCM = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all credit memo contain in refund transaction that all locked or not  \n" +
                "							  when view only that time no need to check current CM locked or not  \n" +
                "							  as we do actual lock above when doing lock only not while view only */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockCM  \n" +
                "							FROM customer_packingslip  \n" +
                "							WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
                "											THEN refRefundCustCreditMemoID != (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "										ELSE 1=1 END)  \n" +
                "									)  \n" +
                "							AND isLocked != 1 ;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all credit memo locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockCM = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockCM IS NOT NULL AND v_cntOfUnLockCM = 0) THEN  \n" +
                "  \n" +
                "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "  \n" +
                "								/* get to be lock refund transaction */  \n" +
                "								INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "								SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "  \n" +
                "							ELSE  \n" +
                "								/* update refund transaction to locked */  \n" +
                "								UPDATE packingslip_invoice_payment  \n" +
                "								SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "								    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "								     updatedBy = pUserID  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					/* get to be lock all invoice which contain in applied CM with fully received */  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
                "					FROM customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				ELSE  \n" +
                "					/* lock all invoice which contain in applied CM with fully received */  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					SET cps.isLocked = v_newLockStatusInvCM , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = pUserRoleID , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = pUserID  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyLockedUnlockedInvCM > 0) OR (v_cntOfInvCMWhichNotFullyApplied > 0)  \n" +
                "		OR (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[1] - is any CM which not fully used */  \n" +
                "	IF (v_cntOfInvCMWhichNotFullyApplied > 0) THEN  \n" +
                "		SELECT 1 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Inv/CM Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM > 0) THEN  \n" +
                "		SELECT 1 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - is Payment Already Voided - applied CM */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - is Payment Already locked - applied CM */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] - view to be lock/unlock record list */  \n" +
                "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CustomerPackingSlipChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_CustomerPackingSlipChangeHistory`(  \n" +
                "	IN pcustomerslipID INT,  \n" +
                "	IN pcustomerslipDetId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vCustPSDetIdWhrClause VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_data_of_cust_packing_slip_det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_data_of_cust_packing_slip_det AS  \n" +
                "		SELECT id, lineID  \n" +
                "		FROM customer_packingslip_det  \n" +
                "		WHERE refCustPackingSlipID = pcustomerslipID  \n" +
                "		AND CASE WHEN (pcustomerslipDetId IS NOT NULL AND pcustomerslipDetId != '')  \n" +
                "				THEN id = pcustomerslipDetId  \n" +
                "			ELSE 1=1 END;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_data_of_cust_packing_slip_track_number;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_data_of_cust_packing_slip_track_number AS  \n" +
                "		SELECT id  \n" +
                "		FROM customer_packing_slip_track_number  \n" +
                "		WHERE refCustPackingSlipID = pcustomerslipID;  \n" +
                "  \n" +
                "  \n" +
                "         IF(pcustomerslipDetId IS NOT NULL AND pcustomerslipDetId != '') THEN  \n" +
                "		SET vCustPSDetIdWhrClause = CONCAT(\" AND cpd.id = \",pcustomerslipDetId,\" \");  \n" +
                "	 ELSE  \n" +
                "		SET vCustPSDetIdWhrClause = \" \";  \n" +
                "         END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_CustomerPackingSlipChangeHistory = CONCAT(\"  \n" +
                "		SELECT da.ID,da.Tablename,da.RefTransID,da.Colname,da.Oldval,da.Newval,  \n" +
                "			lineID AS lineNoSequence, da.valueDataType ,  \n" +
                "			fun_getUserNameByID(da.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(da.createdBy) createdby,  \n" +
                "			fun_getRoleByID(da.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(da.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM dataentrychange_auditlog da  \n" +
                "			LEFT JOIN customer_packingslip_det cpd ON da.RefTransID = cpd.id  \n" +
                "								AND da.Tablename = 'CUSTOMER_PACKINGSLIP_DET' \",vCustPSDetIdWhrClause,\"  \n" +
                "		WHERE (da.RefTransID=\",pcustomerslipID,\" AND da.Tablename='CUSTOMER_PACKINGSLIP')  \n" +
                "			OR  \n" +
                "			(EXISTS (  \n" +
                "				SELECT 	1  \n" +
                "				FROM 	temp_data_of_cust_packing_slip_det tdpcd  \n" +
                "				WHERE 	tdpcd.id = da.RefTransID  \n" +
                "				)  \n" +
                "				AND da.Tablename = 'CUSTOMER_PACKINGSLIP_DET'  \n" +
                "			)  \n" +
                "			OR  \n" +
                "			(EXISTS (  \n" +
                "				SELECT 	1  \n" +
                "				FROM 	temp_data_of_cust_packing_slip_track_number tdcpstn  \n" +
                "				WHERE 	tdcpstn.id = da.RefTransID  \n" +
                "				)  \n" +
                "				AND da.Tablename = 'CUSTOMER_PACKING_SLIP_TRACK_NUMBER'  \n" +
                "			)  \n" +
                "         \");  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_CustomerPackingSlipChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_CustomerPackingSlipChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_data_of_cust_packing_slip_det;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vLockUnlockFieldPTText VARCHAR(50) DEFAULT 'Locked' ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
                "						ELSE \"Payment# or Check#\" END),			OLD.paymentNumber,  \n" +
                "					NEW.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
                "						ELSE \"Payment Date\" END), 					OLD.paymentDate,  \n" +
                "					NEW.paymentDate,				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						OLD.paymentAmount,  \n" +
                "					NEW.paymentAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = OLD.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = NEW.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Payment Method\",								vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 		(vTableName,								NEW.id,  \n" +
                "					\"Account Reference\",							OLD.accountReference,  \n" +
                "					NEW.accountReference,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'accountReference'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
                "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankAccountNo'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Bank Name\",								OLD.bankName,  \n" +
                "					NEW.bankName,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankName'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Comments\",									OLD.remark,  \n" +
                "					NEW.remark,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'remark'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Agreed Refund Amount ($)\",						OLD.agreedRefundAmt,  \n" +
                "					NEW.agreedRefundAmt,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			 VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
                "		IF NEW.isDeleted = TRUE THEN  \n" +
                "			SET vNewval = 'Deleted';  \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
                "			SET vNewval = 'Restored';  \n" +
                "		ELSE  \n" +
                "			SET vNewval = 'Unknown action on delete';  \n" +
                "        END IF;  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "                    Colname,									Oldval,  \n" +
                "                    Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "                    vNewval,									NULL,  \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
                "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
                "						ELSE \"Payment Status\" END), 			vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided Date\",									'',  \n" +
                "							NEW.UpdatedAt,  								OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                            fun_getDataTypeBasedOnTableAndColumnName(vTableName,'UpdatedAt'));  \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided By\",									'',  \n" +
                "							fun_getUserNameByID(NEW.updatedBy),				OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		  END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'voidPaymentReason'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refVoidedPaymentNumber'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
                "  \n" +
                "	IF (OLD.lockStatus = 'LC') THEN  \n" +
                "		SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				 \"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,						'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" Date\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime()  \n" +
                "						ELSE NEW.lockedAt END), 						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 		(vTableName,									NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" By\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy)  \n" +
                "						ELSE fun_getUserNameByID(NEW.lockedBy) END),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,					'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =OLD.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =NEW.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "						\"Supplier\",									vOldval,  \n" +
                "						vNewval,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To name\",									OLD.payToName,  \n" +
                "						NEW.payToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To Address\",									OLD.payToAddress,  \n" +
                "						NEW.payToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Name\",									OLD.billToName,  \n" +
                "						NEW.billToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Address\",								OLD.billToAddress,  \n" +
                "						NEW.billToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,						refPaymentID,  \n" +
                "						Colname,						Oldval,  \n" +
                "						Newval,							createdAt,  \n" +
                "						createdBy,						createByRoleId,  \n" +
                "						updatedAt,						updatedBy,  \n" +
                "						updateByRoleId,					valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'depositBatchNumber'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
                "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
                "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
                "						ELSE '' END),								OLD.offsetAmount,  \n" +
                "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'amount');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"COA\",  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
                "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
                "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
                "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'CR' THEN  \n" +
                "		IF IFNULL(OLD.subStatus, \"\") != IFNULL(NEW.subStatus, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Refund Status\",						fun_getCustRefundSubStatusNameByID(OLD.subStatus),  \n" +
                "					fun_getCustRefundSubStatusNameByID(NEW.subStatus),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,	'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.isMarkAsPaid, \"\") != IFNULL(NEW.isMarkAsPaid, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark As Paid\",									fun_getIntToText(OLD.isMarkAsPaid),  \n" +
                "					fun_getIntToText(NEW.isMarkAsPaid),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransTypeText VARCHAR(20);  \n" +
                "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM customer_contactperson WHERE personId=OLD.contactPersonId),  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM customer_contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
                "	IF(NEW.transType='P')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='I')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='C')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1218,'1.00','V1',' lock/unlock payment transaction SPs - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1218:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pRefVoidPaymentId INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pRemark VARCHAR(255),  \n" +
                "	IN pPayToName VARCHAR(255),  \n" +
                "	IN pPayToAddress VARCHAR(255),  \n" +
                "	IN pVoidPaymentReason VARCHAR(255),  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vNewPaymentID INT;  \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);  \n" +
                "	DECLARE vPMTLockStatus VARCHAR(5) DEFAULT NULL;  \n" +
                "	DECLARE vPMTRefundStatus VARCHAR(5) DEFAULT NULL;  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */  \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount  \n" +
                "	FROM 	packingslip_invoice_payment  \n" +
                "	WHERE 	id = pRefVoidPaymentId  \n" +
                "	AND isPaymentVoided = 0  \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN  \n" +
                "		/*check duplicate check number validation*/  \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	isdeleted = 0  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND bankAccountMasID = pBankAccountMasID  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 IF (pRefPaymentModeOfInvPayment = 'R') THEN  \n" +
                "		/* if Receivable payment and already locked/refunded payment then not allowed to void and rereceive */  \n" +
                "		SELECT lockStatus, refundStatus INTO vPMTLockStatus, vPMTRefundStatus  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pRefVoidPaymentId  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND isPaymentVoided = 0 AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCount = 1 AND vCountExistsCheckNo = 0 AND vPMTLockStatus != 'LC' AND vPMTRefundStatus != 'PR' AND vPMTRefundStatus != 'FR') THEN  \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment  \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,  \n" +
                "			isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment  \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,  \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, depositBatchNumber,  \n" +
                "				lockStatus, refundStatus)  \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,  \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)  \n" +
                "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL'  \n" +
                "					ELSE NULL END),  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END)  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/  \n" +
                "		UPDATE 	packingslip_invoice_payment_det  \n" +
                "		SET 	isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
                "			pUserID, pRoleID, paymentAmount,  \n" +
                "			FALSE, refCustPackingslipInvoiceID  \n" +
                "		FROM 	packingslip_invoice_payment_det  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;  \n" +
                "	ELSE  \n" +
                "		IF vCountExistsCheckNo != 0 THEN  \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;  \n" +
                "		ELSEIF vCount = 0 THEN  \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId  \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN  \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;  \n" +
                "			ELSE  \n" +
                "				SELECT 'NOT_FOUND' AS message;  \n" +
                "			END IF;  \n" +
                "		ELSEIF vPMTLockStatus = 'LC' THEN  \n" +
                "			SELECT 'ALREADY_LOCKED' AS message;  \n" +
                "		ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND (vPMTRefundStatus = 'PR' OR vPMTRefundStatus = 'FR')) THEN  \n" +
                "			SELECT 'ALREADY_PMT_REFUNDED' AS message;  \n" +
                "		ELSE  \n" +
                "			SELECT 'NOT_FOUND' AS message;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1219,'1.00','V1',' Sproc_InvoicePaymentVoidAndReIssue SP - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1219:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pWoID INT ,  \n" +
                "    IN pPONumber VARCHAR(255),  \n" +
                "    IN pIsShowAllWO tinyint,  \n" +
                "    IN pSONumber VARCHAR(255))  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWoID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPONumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
                "	end if;  \n" +
                "  \n" +
                "     IF (!pIsShowAllWO)  THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
                "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
                "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
                "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
                "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ',')  \n" +
                "									 else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	) FROM `assemblystock`  WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
                "						   END) poNumber,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
                "									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  \n" +
                "									FROM `assemblystock` WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
                "                            END) soNumbers,  \n" +
                "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
                "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
                "					FROM vu_workorder_summary_stk vu_wss  \n" +
                "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
                "								ON vu_wss.woid = wo.woMstID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
                "					\", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "-- select @SQLStatement2;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1220,'1.00','V1','Sproc_GetAssemblyWOStockDetails  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1220:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_ValidateRefDesAgainstOperation;  \n" +
                "CREATE FUNCTION `fun_ValidateRefDesAgainstOperation`(  \n" +
                "		pAllowedRefDestList TEXT,  \n" +
                "        pEnteredRefDes TEXT  ,  \n" +
                "        pOdlyRefDes TEXT  \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	/*Allowed List and entered list is passed as it is here.  \n" +
                "    List converted to  comma separated from range in this function only    */  \n" +
                "  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "    DECLARE startPos, endPos, maxLength INT ;  \n" +
                "	DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                "    DECLARE itemRefDesg varchar(500);  \n" +
                "    DECLARE vAddedOddEnterRefDes,vAddedOddAllowedRefDes TEXT;  \n" +
                "	DECLARE vInvalidList TEXT DEFAULT '';  \n" +
                "  \n" +
                "  \n" +
                "    SET startPos = 1;  \n" +
                "	SET maxLength = Length(pAllowedRefDestList);  \n" +
                "    IF pAllowedRefDestList IS NOT NULL THEN  \n" +
                "		IF pOdlyRefDes IS NOT NULL THEN  \n" +
                "				SET startPos = 1;  \n" +
                "				SET maxLength = Length(pOdlyRefDes);  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',pOdlyRefDes,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(pOdlyRefDes,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(pOdlyRefDes,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						-- separate Oddly Ref Des from WO OP RefDes List  \n" +
                "						IF(INSTR(pEnteredRefDes, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedOddEnterRefDes = '' OR vAddedOddEnterRefDes IS NULL THEN  \n" +
                "								SET vAddedOddEnterRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedOddEnterRefDes = CONCAT_WS(',',vAddedOddEnterRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET pEnteredRefDes = REPLACE(pEnteredRefDes,concat(itemRefDesg,','),'');  \n" +
                "						-- separate Oddly Ref Des from BOM RefDes List  \n" +
                "						IF(INSTR(pAllowedRefDestList, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedOddAllowedRefDes = '' OR vAddedOddAllowedRefDes IS NULL THEN  \n" +
                "								SET vAddedOddAllowedRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedOddAllowedRefDes = CONCAT_WS(',',vAddedOddAllowedRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET pAllowedRefDestList = REPLACE(pAllowedRefDestList,concat(itemRefDesg,','),'');  \n" +
                "					END IF;  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "  \n" +
                "		SELECT  fun_getDesignatorList(pEnteredRefDes) into pEnteredRefDes;  \n" +
                "		IF vAddedOddEnterRefDes IS NOT NULL OR vAddedOddEnterRefDes <> '' THEN  \n" +
                "			SET pEnteredRefDes = CONCAT_WS(',',vAddedOddEnterRefDes,  pEnteredRefDes);  \n" +
                "		END IF;  \n" +
                "		SELECT  fun_getDesignatorList(pAllowedRefDestList) into pAllowedRefDestList;  \n" +
                "		IF vAddedOddAllowedRefDes IS NOT NULL OR vAddedOddAllowedRefDes <> '' THEN  \n" +
                "			SET pAllowedRefDestList = CONCAT_WS(',',vAddedOddAllowedRefDes,  pAllowedRefDestList);  \n" +
                "		END IF;  \n" +
                "		SET startPos = 1;  \n" +
                "		SET maxLength = Length(pAllowedRefDestList);  \n" +
                "		REPEAT  \n" +
                "			SET endPos = LOCATE(',',pEnteredRefDes,startPos);  \n" +
                "			IF endPos = 0 THEN  \n" +
                "				SET itemRefDesg = SUBSTR(pEnteredRefDes,startPos);  \n" +
                "			ELSE  \n" +
                "				SET itemRefDesg = SUBSTR(pEnteredRefDes,startPos,endPos-startPos);  \n" +
                "			END IF;  \n" +
                "			IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "				IF(INSTR(pAllowedRefDestList,itemRefDesg) = 0) THEN  \n" +
                "					SET vInvalidCount = vInvalidCount +1 ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			IF endPos = 0  AND startPos > 0 THEN  \n" +
                "				SET startPos = maxLength;  \n" +
                "			ELSE  \n" +
                "				SET startPos = endPos + 1;  \n" +
                "			END IF;  \n" +
                "		UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "	END IF;  \n" +
                "    IF vInvalidCount > 0 THEN  \n" +
                "		SET result = fun_checkAndInsertError('UMID052', 0, 1, 0, 0, 0, pEnteredRefDes , pAllowedRefDestList, NULL);  \n" +
                "    ELSE  \n" +
                "		SET result = 1;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1221,'1.00','V1','fun_ValidateRefDesAgainstOperation- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1221:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetRFQLineItemsByIDWithSubAssembly;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByIDWithSubAssembly`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = NULL;  \n" +
                "	END IF;  \n" +
                "    SET @SQLStatement1 = concat(\"SELECT 	a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                "			a.customerRev custPNRev,  \n" +
                "			a.refDesig ,  \n" +
                "            a.dnpQty,  \n" +
                "            a.dnpDesig,  \n" +
                "            a.isInstall,  \n" +
                "			rla.mfgPNID linePartId,  \n" +
                "			co.PIDCode,  \n" +
                "			co.mfgPN,  \n" +
                "			rohs.name AS rohsName,  \n" +
                "			rohs.rohsIcon,  \n" +
                "            co.mfgcodeID,  \n" +
                "            co.isCustom,  \n" +
                "            co.custAssyPN,  \n" +
                "            partMfg.mfgName ,  \n" +
                "            count(1) over (partition by lineID) bomLineCnt,  \n" +
                "            row_number() over (partition by lineID) bomLineIndex  ,  \n" +
                "			fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,\",vMfgCodeFormat,\") formattedMfrName  \n" +
                "	FROM rfq_lineitems a  \n" +
                "    LEFT JOIN rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = a.id and rla.isDeleted = 0  \n" +
                "	LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                "    LEFT JOIN component co  ON co.id = rla.mfgPNID and co.isDeleted = 0  \n" +
                "    LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst partMfg ON partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "	WHERE a.isDeleted = 0  \n" +
                "    AND a.partID in (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = \", ppartID, \" AND isDeleted = 0)  \n" +
                "     \");  \n" +
                "     IF rowNumWhere IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, rowNumWhere);  \n" +
                "     END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1222,'1.00','V1','Sproc_GetRFQLineItemsByIDWithSubAssembly- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1222:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveWorkorderTransEquipmentFeederDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWorkorderTransEquipmentFeederDetails`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWoOpEqpID INT(11),  \n" +
                "	IN pWoOPID INT(11),  \n" +
                "	IN pWoTransID INT(11),  \n" +
                "	IN pisVerify INT(11),  \n" +
                "	IN ptransactionType VARCHAR(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "		IF (ptransactionType='F') THEN  \n" +
                "			 SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(\"  \n" +
                "			SELECT wotfd.id,  \n" +
                "				wotfd.woTransID,  \n" +
                "				woefd.id AS eqpFeederID,  \n" +
                "				woefd.feederLocation,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(wol.rfqLineItemID,'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS rfqLineItemsID,  \n" +
                "				(SELECT GROUP_CONCAT(DISTINCT IFNULL(CAST(wol.lineID AS UNSIGNED),'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS lineID,  \n" +
                "				fun_getAlternatePartListforFeeder(woefd.id) AS alternateParts,  \n" +
                "				fun_getAllocatedUMIDCountfromFeeder(woefd.feederLocation,woefd.woOpEqpID,woefd.woID) as totalallocatedUMID,  \n" +
                "				wotfd.refsidid,  \n" +
                "				csc.uid AS umid,  \n" +
                "				csc.refcompid AS refcompid,  \n" +
                "				csc.expiryDate AS expiryDate,  \n" +
                "				(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'  \n" +
                "						WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,  \n" +
                "				woefd.mfgPNID,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				co.isCustom AS isCustom,  \n" +
                "				co.mfgPNDescription AS mfgPNDescription,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName`,  \n" +
                "				woefd.isApprovelineItems,  \n" +
                "				woefd.recommendedLineItem,  \n" +
                "				woefd.woOpEqpID,  \n" +
                "				woefd.isActive,  \n" +
                "				CASE WHEN woefd.isActive=1 THEN 'Active' ELSE 'Inactive' END feederStatus,  \n" +
                "				wotfd.assyQty,  \n" +
                "				wotfd.UOM,  \n" +
                "				wotfd.isVerified,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(wotfd.verifiedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as verifiedAt,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(wotfd.updatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as updatedAt,  \n" +
                "				woefd.woID,  \n" +
                "				woefd.partID,  \n" +
                "				woefd.eqpID,  \n" +
                "				woefd.woOPID,  \n" +
                "				woefd.qty,  \n" +
                "				fun_getBinNameByID(csc.binID) AS binName,  \n" +
                "				fun_getRestrictedFeederPart(woefd.id,woefd.mfgPNID) isRestricted,  \n" +
                "				fun_getbomRestrictedWithPermissionFeederPart(woefd.id,woefd.mfgPNID) restrictPermission,  \n" +
                "				(SELECT COUNT(1) FROM workorder_trans_umid_details wtud WHERE wtud.reelStatus='P' AND wtud.eqpFeederID=woefd.id) AS reelChangeCount,  \n" +
                "				(SELECT COUNT(1) FROM workorder_trans_umid_verification_history wtuvd WHERE wtuvd.woTransUMIDDetID=wotfd.id) AS reelVerificationCount,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.verifiedBy) AS verifiedBy,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,  \n" +
                "				CASE WHEN woefd.placementType=1 THEN 'By Machine' ELSE 'By Hand' END placementType,  \n" +
                "				wotfd.refDesig AS refDesig,  \n" +
                "				-- (SELECT refDesig FROM rfq_lineitems WHERE deletedAt IS NULL AND id = wotfd.rfqLineItemsID) AS refDesig,  \n" +
                "				 (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL AND id  \n" +
                "				 	IN (SELECT rfqLineItemID FROM workorder_operation_feeder_lineitem_details WHERE deletedAt IS NULL  \n" +
                "				 	and eqpFeederID IN (woefd.id))  \n" +
                "				) AS validRefDesig,  \n" +
                "				woefd.setupComment,  \n" +
                "				(case when (IFNULL(`wotfd`.`rfqLineItemsID`,0) = 0) then 'Supplies,Materials & Tools'  \n" +
                "					else 'BOM Part' END) AS partUsedFrom  ,  \n" +
                "                rli.custPN ,  \n" +
                "                rli.custPNID,  \n" +
                "                line_comp.PIDCode custPNPIDCode,  \n" +
                "                line_comp.RoHSStatusID custPNRoHSStatusID,  \n" +
                "                line_rohs.rohsIcon custPNrohsIcon,  \n" +
                "                line_rohs.name custPNrohsName,  \n" +
                "                IFNULL(wotfd.consumeQty,0) consumeQty,  \n" +
                "                fun_getUserNameByID(wotfd.approvedBy) approvedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(wotfd.approvedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as approvedOn,  \n" +
                "                wotfd.approvedReason  \n" +
                "			FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "			LEFT JOIN workorder_trans_umid_details wotfd ON (wotfd.eqpFeederID = woefd.id AND wotfd.deletedAt IS NULL AND wotfd.reelStatus='P' AND wotfd.transactionType='F')  \n" +
                "			LEFT JOIN component co ON (woefd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)  \n" +
                "			LEFT JOIN component_sid_stock csc ON (wotfd.refsidid = csc.id AND IFNULL(csc.isdeleted,0) = 0 AND csc.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)  \n" +
                "            LEFT JOIN rfq_lineitems rli ON rli.id = wotfd.rfqLineItemsID AND ifnull(rli.isDeleted,0) = 0  \n" +
                "				AND rli.id in (select rla.rfqLineItemsID from rfq_lineitems_alternatepart rla where  rla.mfgPNID =  woefd.mfgPNID   AND ifnull(rla.isDeleted,0) = 0  )  \n" +
                "            LEFT JOIN component line_comp ON line_comp.id =  rli.custPNID and ifnull(line_comp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN rfq_rohsmst line_rohs ON line_comp.RoHSStatusID = line_rohs.id AND IFNULL(line_rohs.isdeleted,0) = 0  \n" +
                "			WHERE woefd.`deletedAt` IS NULL  \n" +
                "			\");  \n" +
                "  \n" +
                "			IF(pWoOpEqpID IS NOT NULL AND pWoOpEqpID != '') THEN  \n" +
                "				SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(@temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" AND woefd.`woOpEqpID` = \",pWoOpEqpID);  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(\"  \n" +
                "			SELECT wotfd.id,  \n" +
                "				wotfd.woTransID,  \n" +
                "				wotfd.refsidid,  \n" +
                "				csc.uid AS umid,  \n" +
                "				csc.refcompid AS refcompid,  \n" +
                "				csc.expiryDate AS expiryDate,  \n" +
                "				csc.pkgQty AS pkgQty,  \n" +
                "				csc.pkgUnit AS pkgUnit,  \n" +
                "				fun_getUnitNameByID(csc.uom) partUOM,  \n" +
                "				(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'  \n" +
                "						WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				(SELECT mfgCode FROM mfgcodemst WHERE id = co.mfgCodeID) AS mfgCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				co.mfgPNDescription AS mfgPNDescription,  \n" +
                "				co.isCustom AS isCustom,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName`,  \n" +
                "				wotfd.assyQty,  \n" +
                "				wotfd.UOM,  \n" +
                "				wotfd.isVerified,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(wotfd.verifiedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as verifiedAt,  \n" +
                "                wotfd.verifiedOn verifiredDB,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(wotfd.updatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as updatedAt,  \n" +
                "				fun_getRestrictedFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) isRestricted,  \n" +
                "				fun_getbomRestrictedWithPermissionFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) restrictPermission,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.verifiedBy) AS verifiedBy,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,  \n" +
                "				(SELECT refDesig FROM rfq_lineitems WHERE deletedAt IS NULL AND id = wotfd.rfqLineItemsID) AS validRefDesig,  \n" +
                "				wotfd.refDesig AS refDesig,  \n" +
                "				wotfd.rfqLineItemsID,  \n" +
                "				(case when (IFNULL(`wotfd`.`rfqLineItemsID`,0) = 0) then 'Supplies,Materials & Tools'  \n" +
                "					else 'BOM Part' END) AS partUsedFrom  ,  \n" +
                "				rli.custPN ,  \n" +
                "                rli.custPNID,  \n" +
                "                line_comp.PIDCode custPNPIDCode,  \n" +
                "                line_comp.RoHSStatusID custPNRoHSStatusID,  \n" +
                "                line_rohs.rohsIcon custPNrohsIcon,  \n" +
                "                line_rohs.name custPNrohsName   ,  \n" +
                "                IFNULL(wotfd.consumeQty,0) consumeQty ,  \n" +
                "                 fun_getUserNameByID(wotfd.approvedBy) approvedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(wotfd.approvedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as approvedOn,  \n" +
                "                wotfd.approvedReason  \n" +
                "				FROM workorder_trans_umid_details wotfd  \n" +
                "            JOIN workorder_operation woOp ON wotfd.woOPID = woOp.woOPID AND ifnull(woOp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN workorder wo ON woOp.woID = wo.woID AND ifnull(wo.isDeleted,0) = 0  \n" +
                "			LEFT JOIN component co ON (wotfd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)  \n" +
                "			LEFT JOIN component_sid_stock csc ON (wotfd.refsidid = csc.id AND IFNULL(csc.isdeleted,0) = 0 AND csc.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_lineitems rli ON  rli.id = wotfd.rfqLineItemsID AND ifnull(rli.isDeleted,0) = 0  \n" +
                "									AND rli.id in (select rla.rfqLineItemsID from rfq_lineitems_alternatepart rla where  rla.mfgPNID =  wotfd.mfgPNID   AND ifnull(rla.isDeleted,0) = 0  )  \n" +
                "            LEFT JOIN component line_comp ON line_comp.id =  rli.custPNID and ifnull(line_comp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN rfq_rohsmst line_rohs ON line_comp.RoHSStatusID = line_rohs.id AND IFNULL(line_rohs.isdeleted,0) = 0  \n" +
                "			WHERE wotfd.`deletedAt` IS NULL AND wotfd.reelStatus='C'  \n" +
                "			AND wotfd.transactionType='U' AND wotfd.woOPID=\",pWoOPID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY fun_castStringDateTimeToDateTime(updatedAt) DESC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		IF (pisVerify = 1) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" and id > 0\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "		IF (ptransactionType='F') THEN  \n" +
                "			SELECT id,eqpFeederID,rfqLineItemID,CAST(lineID AS UNSIGNED) lineID  \n" +
                "				FROM workorder_operation_feeder_lineitem_details WHERE eqpFeederID IN  \n" +
                "			(SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "			WHERE woefd.`deletedAt` IS NULL  \n" +
                "			AND woefd.`woOpEqpID` = IFNULL(pWoOpEqpID,woefd.`woOpEqpID`)) AND deletedat IS NULL ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1223,'1.00','V1','Sproc_RetrieveWorkorderTransEquipmentFeederDetails Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1223:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateScanFeederFirst;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateScanFeederFirst`(  \n" +
                "	IN pfeederLocation VARCHAR(1000),  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpEqpID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN pisChangeReel INT,  \n" +
                "	IN preelChangeType VARCHAR(100),  \n" +
                "	IN ptoBinID INT,  \n" +
                "	IN pOldUMID VARCHAR(15),  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_comp_id INT;  \n" +
                "	DECLARE temp_comp_uom INT;  \n" +
                "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                "	DECLARE temp_lineID VARCHAR(100);  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE temp_eqpFeederID INT;  \n" +
                "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE feederVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_old_umid_comp_id INT;  \n" +
                "	DECLARE temp_old_umid_stock_id INT;  \n" +
                "	DECLARE temp_old_umid_pkgQty INT;  \n" +
                "	DECLARE temp_old_umid_pkgUnit INT;  \n" +
                "	DECLARE temp_old_umid_pkgUOM INT;  \n" +
                "	DECLARE temp_eqp_wh_id INT;  \n" +
                "	DECLARE temp_eqp_bin_id INT;  \n" +
                "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_salesOrderDetID VARCHAR(100);  \n" +
                "	DECLARE flag_isFeederTransExists INT  DEFAULT 0;  \n" +
                "	DECLARE valid_umid_transfer INT  DEFAULT 0;  \n" +
                "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5)  DEFAULT 'V';  \n" +
                "	DECLARE temp_json_object VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT ;  \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "    DECLARE temp_entered_refDes TEXT;  \n" +
                "    DECLARE temp_odddly_RefDes TEXT;  \n" +
                "  \n" +
                "	SET temp_eqp_wh_id = NULL;  \n" +
                "	SET temp_eqp_bin_id = NULL;  \n" +
                "	SET temp_eqp_wh_name = NULL;  \n" +
                "	SET temp_all_mfg_id_lineID = NULL;  \n" +
                "  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "		CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "		(  \n" +
                "			 errorText VARCHAR(2000),  \n" +
                "			 isFeederError INT,  \n" +
                "			 isUMIDError INT,  \n" +
                "			 isConfirmation INT,  \n" +
                "			 isMessage INT,  \n" +
                "			 isInformation INT,  \n" +
                "			 stringText1 VARCHAR(1000),  \n" +
                "			 stringText2 VARCHAR(1000),  \n" +
                "			 stringText3 VARCHAR(1000)  \n" +
                "		);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "  \n" +
                "		select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                "        INTO flag_tempVerificationApproval;  \n" +
                "  \n" +
                "		SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                "		FROM workorder wo  \n" +
                "		WHERE wo.woID = pwoID  \n" +
                "		AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "		FROM workorder_operation_refdesig  \n" +
                "		WHERE woID = pwoID  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "		From component_oddely_refdes cor  \n" +
                "		Where cor.refComponentID = ppartID  \n" +
                "		and cor.isDeleted =0;  \n" +
                "  \n" +
                "		SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "		FROM workorder_operation  \n" +
                "		WHERE woID = pwoID  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	IF ((fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, pisChangeReel) > 0)) THEN  \n" +
                "		SELECT id, rfqLineItemsID, partID, eqpFeederID, lineID, pidcode, uom, mfgPN, isCPN , refDesig  \n" +
                "		INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_eqpFeederID, temp_lineID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn ,  temp_entered_refDes  \n" +
                "		FROM temp_feeder_details;  \n" +
                "		-- removed due to allow verification multiple times  \n" +
                "		-- IF(pisChangeReel <> 1 AND pisVerify = 1) THEN  \n" +
                "		-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                "		-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                "		-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                "		-- 			-- FAILED  \n" +
                "		-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "		-- 		END IF;  \n" +
                "		-- 	END IF;  \n" +
                "		-- ELSE  \n" +
                "			IF (flag_isStrictlyLimitRefDes = 1 AND temp_allowed_refDesList IS NOT NULL  \n" +
                "				AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,temp_entered_refDes,temp_odddly_RefDes) = 0) THEN  \n" +
                "                SET result = 0;  \n" +
                "			ELSEIF (pUMID IS NOT NULL) THEN  \n" +
                "				-- select concat('select fun_checkUMIDScan(',pUMID,',',ppartID,',',pwoTransID,',',pwoOpID,',',pemployeeId,',',pcheckKitAllocation,',','',',','',',',ptransactionType,',','1',',',pisVerify,',',pwoOpEqpID,',',pfeederLocation,',',pCreatedBy,')');  \n" +
                "				IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "					SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "				ELSE  \n" +
                "					SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "				END IF;  \n" +
                "				IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "					SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "					-- , refSalesOrderDetID  \n" +
                "					INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "					-- , temp_salesorderdetID  \n" +
                "					FROM temp_umid_details;  \n" +
                "					#check umid id pid is allocated to same line id in bill of material  \n" +
                "					#yes - check for kit allocation of UMID  \n" +
                "					#no - Suggest location for scan UMID  \n" +
                "					-- select concat('select fun_checkKitAllocation(',IFNULL(pUMID,0),',',IFNULL(pwoID,0),',',IFNULL(pwoOPID,0),',',IFNULL(pwoTransID,0),',',IFNULL(temp_eqpFeederID,0),',',IFNULL(temp_umid_comp_id,0),',',IFNULL(temp_umid_package_id,0),',',IFNULL(pcheckKitAllocation,0),',',IFNULL(pisConfirmed,0),'1',','')');  \n" +
                "  \n" +
                "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                "							-- ALLOCATED  \n" +
                "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSE  \n" +
                "						#in case validate UMID without Kit set true at WO  \n" +
                "                        #select 'Line 134',flag_kit_allocation_not_required_wo ;  \n" +
                "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                "									-- WRONG_LOCATION  \n" +
                "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "                               ELSE  \n" +
                "									SET temp_continue = 1;  \n" +
                "                               END IF;  \n" +
                "						ELSEIF (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                "							SET temp_continue = 1;  \n" +
                "                        ELSE  \n" +
                "							SET temp_continue = 0;  \n" +
                "                        END IF;  \n" +
                "                       # select 'Line 142',temp_continue, pisVerify , pfeederLocation,temp_eqp_wh_id ;  \n" +
                "                        IF temp_continue = 1 THEN  \n" +
                "							#check part belongs to multiple line  \n" +
                "							#yes - check for umid and feeder component must be same  \n" +
                "							#no - check for restrict part  \n" +
                "							#no - allow to scan details  \n" +
                "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                "								-- INVALID  \n" +
                "								SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							-- fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID)  \n" +
                "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                "								SET result = 0;  \n" +
                "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSE  \n" +
                "								# if feeder details and umid details are valid than give umid qty details on screen  \n" +
                "								# insert transaction details for fedder first and umid validate details in  workorder_trans_umid_details  \n" +
                "								-- verify flag  \n" +
                "								IF (pisVerify <> 1) THEN  \n" +
                "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                "									IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                "										SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "										WHERE refEqpID IN (  \n" +
                "											SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "											WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "										) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "										END IF;  \n" +
                "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                "  \n" +
                "                                   --     select flag_tempVerificationApproval , pisConfirmed ;  \n" +
                "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                "												-- Take confirmation  \n" +
                "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "													AND refsidid = temp_umid_stock_id  \n" +
                "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                "													AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "												IF(temp_feeder_transID > 0) THEN  \n" +
                "													-- FAILED  \n" +
                "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "													INSERT INTO workorder_trans_umid_details  \n" +
                "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                "                                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "													VALUES  \n" +
                "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "													-- VERIFIED  \n" +
                "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "													SET valid_umid_transfer = 1;  \n" +
                "												END IF;  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN   -- verification required  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- add umid transaction details  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											-- WRONG_LOCATION  \n" +
                "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									-- If change reel and old umid details  \n" +
                "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										-- get component details based on old umid  \n" +
                "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                "											FROM component_sid_stock css  \n" +
                "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                "  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "									-- If not change reel than check for reel transaction is done or not  \n" +
                "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "											AND wtud.refsidid = temp_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND wtud.woOPID = pwoOpID;  \n" +
                "											-- AND isVerified=0;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									-- if not change reel than update verify flag for verfiy true  \n" +
                "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										UPDATE workorder_trans_umid_details  \n" +
                "										SET isVerified=1,  \n" +
                "										verifiedBy=pemployeeId,  \n" +
                "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                "										WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "										-- VERIFIED  \n" +
                "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "  \n" +
                "									-- if change reel than update verify flag for verfiy true  \n" +
                "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "											( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "											WHERE whmst.refEqpID IN (  \n" +
                "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "											) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "											END IF;  \n" +
                "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                "														-- Added for multiple kit  \n" +
                "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                "														(SELECT id FROM kit_allocation ka  \n" +
                "															WHERE ka.refSalesOrderDetID IN  \n" +
                "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                "																FROM workorder_salesorder_details wsd  \n" +
                "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                "														',\\\"returnQty\\\":',0,  \n" +
                "														',\\\"returnUnit\\\":',0,  \n" +
                "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, 0,  \n" +
                "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType)  \n" +
                "														,pwoTransID,  \n" +
                "														1,NULL,NULL,NULL,NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "												END IF;  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "  \n" +
                "												-- update old record toumid  \n" +
                "												UPDATE workorder_trans_umid_details  \n" +
                "												SET toRefUIDId=temp_umid_stock_id  \n" +
                "												WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- SELECT pwoTransID;  \n" +
                "												-- insert new umid for workorder equipment feeder  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												-- UMID SCANNED  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "											ELSE  \n" +
                "												-- WRONG_LOCATION  \n" +
                "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										-- FAILED  \n" +
                "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "                    END IF;  \n" +
                "				END IF;  \n" +
                "				-- SELECT IFNULL(COUNT(1),0) FROM kit_allocation WHERE uid = pUMID AND assyID=ppartID AND refBOMLineID IN (SELECT rfqLineItemsID FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details WHERE uid=pUMID))) > 0  \n" +
                "			ELSE  \n" +
                "				# if feeder details are valid than give PID Details on screen  \n" +
                "				SET feederVerified = 1;  \n" +
                "				-- SELECT * FROM temp_feeder_details;  \n" +
                "			END IF;  \n" +
                "		-- END IF;     -- removed due to allow verification multiple times  \n" +
                "	END IF;  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pfeederLocation, 					CASE WHEN (pUMID IS NULL) THEN '' ELSE pUMID END, 	temp_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_comp_id),		temp_mfgpn, 						temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),	temp_umid_mfgPN,					CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),					fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						pwoOpEqpID,						pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#1. return history of umid transfer  \n" +
                "	IF(valid_umid_transfer = 0) THEN  \n" +
                "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#2. return history of verification  \n" +
                "        SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "        #3. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#4. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#5. return feeder details  \n" +
                "	-- IF (feederVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                "	SELECT * FROM temp_feeder_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#6. return allocated UMID details  \n" +
                "	IF (pOldUMID IS NULL AND feederVerified=1) THEN  \n" +
                "		-- select '1';  \n" +
                "		SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
                "		WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;  \n" +
                "		/*IF (temp_comp_is_cpn = 0) THEN  \n" +
                "			SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
                "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                "		ELSE  */  \n" +
                "			SELECT CASE WHEN vuBOMDet.custPNID IS NOT NULL THEN GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID)  \n" +
                "						ELSE  GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) END  \n" +
                "            INTO temp_all_mfg_id_lineID  \n" +
                "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  AND vuBOMDet.isDeleted = 0  \n" +
                "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                "		-- END IF;  \n" +
                "  \n" +
                "		CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");  \n" +
                "	ELSE  \n" +
                "		SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                "		WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#7 return last inserted/updated records for umid transaction  \n" +
                "	SELECT temp_last_inserted_umid_id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1224,'1.00','V1','Sproc_ValidateScanFeederFirst- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1224:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_validateScanMissingUMIDOnly;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN prfqLineItemsID INT,  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pisPlacementTracking INT,  \n" +
                "	IN psaveUMIDDetails INT,  \n" +
                "	IN prefDesig VARCHAR(3000),  \n" +
                "	IN passyQty INT  ,  \n" +
                "    IN pConsumeQty INT,  \n" +
                "    IN pUMIDAllocateStatus INT,  \n" +
                "    IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pCreateByRoleId INT ,  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                "	DECLARE tot_stock_umid INT DEFAULT 0;  \n" +
                "    DECLARE allocated_stock_umid INT DEFAULT 0 ;  \n" +
                "    DECLARE kit_qty INT DEFAULT 0 ;  \n" +
                "    DECLARE temp_salesorder_detID INT ;  \n" +
                "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;  \n" +
                "    DECLARE vParentWoId INT;  \n" +
                "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "	DECLARE temp_odddly_RefDes  TEXT;  \n" +
                "  \n" +
                "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT,  \n" +
                "	     isUMIDError INT,  \n" +
                "	     isConfirmation INT,  \n" +
                "	     isMessage INT,  \n" +
                "	     isInformation INT,  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "		#Get parent WO ID in case of revise  work order.  \n" +
                "		WITH RECURSIVE RevWo AS  (  \n" +
                "			SELECT	woId,  \n" +
                "					1 lvl  ,  \n" +
                "					terminateWOID  \n" +
                "			FROM workorder  \n" +
                "			WHERE woId = pwoID  \n" +
                "			AND isDeleted = 0  \n" +
                "			UNION ALL  \n" +
                "			SELECT	wo.woID,  \n" +
                "					rw.lvl +1 lvl,  \n" +
                "					wo.terminateWOID  \n" +
                "			 FROM workorder wo  \n" +
                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
                "			 WHERE wo.isDeleted = 0  \n" +
                "			 )  \n" +
                "			SELECT rev.woID  INTO vParentWoId  \n" +
                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
                "  \n" +
                "		#Check for kit allocation flag from BOM Line  \n" +
                "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck  \n" +
                "		FROM rfq_lineitems rli  \n" +
                "		WHERE rli.id = prfqLineItemsID  \n" +
                "        AND rli.isDeleted = 0 ;  \n" +
                "  \n" +
                "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);  \n" +
                "  \n" +
                "		SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "		FROM workorder_operation_refdesig  \n" +
                "		WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "		FROM workorder_operation  \n" +
                "		WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "		From component_oddely_refdes cor  \n" +
                "		Where cor.refComponentID = ppartID  \n" +
                "		and cor.isDeleted =0;  \n" +
                "  \n" +
                "		#CHeck Only BOM Part allowed  \n" +
                "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                "											WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                "			    AND rla.partID =   ppartID  \n" +
                "				AND rla.isDeleted = 0) = 0 THEN  \n" +
                "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "        END IF;  \n" +
                "	# umid transaction details based on umid  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                "    INTO flag_tempVerificationApproval;  \n" +
                "  /*  \n" +
                "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                "		SET flag_tempVerificationRequire = 1;  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');  \n" +
                "    IF (pisPlacementTracking = 1 AND psaveUMIDDetails = 1 AND flag_isStrictlyLimitRefDes = 1  \n" +
                "				AND temp_allowed_refDesList IS NOT NULL AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,prefDesig,temp_odddly_RefDes) = 0) THEN  \n" +
                "                SET result = 0;  \n" +
                "	ELSEIF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		IF(flag_tempLineCount = 1) THEN  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                "			UPDATE temp_umid_details tud  \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                "			AND id = prfqLineItemsID)  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "        #step -2 Already  Allocated in Given KIT of same WO  \n" +
                "  \n" +
                "        IF (pUMIDAllocateStatus = 0 ) THEN  \n" +
                "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))  \n" +
                "            INTO kit_qty  \n" +
                "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID  \n" +
                "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )  \n" +
                "			AND STATUS = 'A';  \n" +
                "  \n" +
                "            IF kit_qty > 0 THEN  \n" +
                "				IF  kit_qty >= pConsumeQty THEN  \n" +
                "					SET pUMIDAllocateStatus = 1 ;  \n" +
                "				ELSEIF kit_qty < pConsumeQty THEN  \n" +
                "					SET pUMIDAllocateStatus = 2 ;  \n" +
                "				END IF ;  \n" +
                "                #SELECT 'LINE 122' , pUMIDAllocateStatus;  \n" +
                "            ELSE  \n" +
                "				SELECT SUM(css.pkgQty) INTO tot_stock_umid  \n" +
                "				FROM component_sid_stock AS css  \n" +
                "				WHERE css.uid = pUMID  \n" +
                "				AND css.isDeleted = 0;  \n" +
                "  \n" +
                "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid  \n" +
                "				FROM kit_allocation AS ka_all  \n" +
                "				WHERE ka_all.uid = pUMID  \n" +
                "				AND  ka_all.status IN ('A','R')  \n" +
                "				GROUP BY ka_all.uid ;  \n" +
                "  \n" +
                "				#step - 3 Check Un-Allocated  stock available or not  \n" +
                "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN  \n" +
                "					SET pUMIDAllocateStatus = 3;  \n" +
                "					#allocate kit from un allocated stock  \n" +
                "				END IF;  \n" +
                "                #SELECT 'LINE 139' , pUMIDAllocateStatus;  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "        #SELECT 'LINE 142' , pUMIDAllocateStatus;  \n" +
                "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate  \n" +
                "  \n" +
                "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "					SET uidVerified = 1;  \n" +
                "				ELSE  \n" +
                "					SET uidVerified = 0;  \n" +
                "					SET result = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                "					SET result = 0;  \n" +
                "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSE  \n" +
                "						#take first sales order default in case of multiple sales order  \n" +
                "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs  \n" +
                "						INTO temp_salesorder_detID  \n" +
                "						FROM  workorder_salesorder_details  \n" +
                "						WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                "						AND isDeleted = 0  \n" +
                "						LIMIT 1;  \n" +
                "					-- check verification required  \n" +
                "					-- than verification require than check from which page scan/verify  \n" +
                "                     IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) and psaveUMIDDetails = 1 THEN  \n" +
                "							-- Take confirmation  \n" +
                "						SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) and psaveUMIDDetails = 1 THEN -- verification not require  \n" +
                "						-- if scan option selected than check for already scanned in flow first  \n" +
                "						-- if not scanned than add as verified umid directly  \n" +
                "						IF(pisVerify <> 1) THEN  \n" +
                "							SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "							WHERE transactionType='U'  \n" +
                "							AND refsidid = temp_umid_stock_id  \n" +
                "							AND mfgPNID=temp_umid_comp_id  \n" +
                "							AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                "							AND woOPID = pwoOpID  \n" +
                "							AND employeeID=pemployeeId;  \n" +
                "							-- if already scanned than give message  \n" +
                "							-- else add as verified umid directly  \n" +
                "							IF(temp_feeder_transID > 0) THEN  \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "								INSERT INTO workorder_trans_umid_details  \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "									`verifiedOn`,`reelStatus`, refDesig,  \n" +
                "									`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "								VALUES  \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "									pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "	  							-- VERIFIED  \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "								SELECT LAST_INSERT_ID() AS id;  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								IF psaveUMIDDetails = 1 THEN  \n" +
                "									-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;  \n" +
                "										# Check wheather kit allocation required  or not  \n" +
                "  \n" +
                "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "												wop.partID = temp_umid_comp_id AND  \n" +
                "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF (result = 1 ) THEN  \n" +
                "										SET result = 1;  \n" +
                "										INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`, `reelStatus`, refDesig, consumeQty,  \n" +
                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "										VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "										-- VERIFIED  \n" +
                "										CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "										SELECT LAST_INSERT_ID() AS id;  \n" +
                "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                "										SET pUMIDAllocateStatus = 4;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							-- if already scanned than verify same umid for history  \n" +
                "							-- if not scanned yet than give message  \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								SET uidVerified = 0;  \n" +
                "								SET result = 0;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						-- verification require than check from which page/popup  \n" +
                "						-- if from scan popup than add umid as scanned new record  \n" +
                "						-- else check for verify flow  \n" +
                "                        #select  prfqLineItemsID;  \n" +
                "						IF (pisVerify <> 1) THEN  \n" +
                "							IF psaveUMIDDetails = 1 THEN  \n" +
                "								-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;  \n" +
                "                                # Check wheather kit allocation required  or not  \n" +
                "  \n" +
                "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                "                                    ELSE  \n" +
                "										SET result = 1;  \n" +
                "                                    END IF;  \n" +
                "                                ELSE  \n" +
                "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "											wop.partID = temp_umid_comp_id AND  \n" +
                "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "										SET result = 1;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "                                #select 'Line261' , result;  \n" +
                "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN  \n" +
                "                                IF result = 1 THEN  \n" +
                "									SET result = 1;  \n" +
                "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;  \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);  \n" +
                "									-- SCANNED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "                                    -- Condition for SMT material / For SMT UMID , only successful scan message  \n" +
                "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "                                    ELSE  \n" +
                "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "									END IF;  \n" +
                "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                "									SET pUMIDAllocateStatus = 4;  \n" +
                "                                END IF;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								SET uidVerified = 0;  \n" +
                "								SET result = 0;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		#END IF;  \n" +
                "	END IF;  \n" +
                "	#END IF;  \n" +
                "  \n" +
                "	#select '10' , 'AT END' ;  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							'',				temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						NULL,				pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#0. return assy part list  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "	ELSE  \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "			-- verified UMID  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#1. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#2. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';  \n" +
                "  \n" +
                "	#3. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                "	SELECT NULL AS id;  \n" +
                "	SELECT id FROM temp_umid_transIDs;  \n" +
                "  \n" +
                "    #5 return UMID allocation checking status  \n" +
                "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1225,'1.00','V1','Sproc_validateScanMissingUMIDOnly- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1225:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateWorkorderAndPublish;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoStatus INT,  \n" +
                "	IN pupdatedBy INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                "    DECLARE vPartID INT;  \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(5000)  \n" +
                "	);  \n" +
                "  \n" +
                "	Select partID into vPartID  \n" +
                "    From workorder wo  \n" +
                "    Where wo.woID = pwoID  \n" +
                "    and wo.isDeleted = 0;  \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/  \n" +
                "	block1: BEGIN  \n" +
                "		DECLARE current_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_previousopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;  \n" +
                "		DECLARE current_isTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE current_isLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPID INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE last_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE next_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE current_opname VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE current_woopid VARCHAR(500) DEFAULT '';  \n" +
                "  \n" +
                "		DECLARE opName_Max_ForMissingPartQtyOP VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE opNumber_Max_ForMissingPartQtyOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE opNumber_Max_ForReworkOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE anyPreProgPartInWOAssyBOM INT DEFAULT 0;  \n" +
                "		DECLARE anyPartPreProgRequireWOOP INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE assyCleanType VARCHAR(5) DEFAULT '';  \n" +
                "		DECLARE opCleanType VARCHAR(5)  DEFAULT 'NA';  \n" +
                "		DECLARE noCleanOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE waterSolubleOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE notApplicableOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE bothOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "  \n" +
                "		DECLARE err TINYINT  DEFAULT 0;  \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "		-- 2 declare the cursor operation  \n" +
                "		DECLARE operation_cursor CURSOR FOR  \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;  \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "  \n" +
                "		-- get first operation work order  \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get last operation work order  \n" +
                "		SELECT MAX(opnumber) INTO last_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get inspection process type id  \n" +
                "		SET InspectionOperationTypeID := 0;  \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory  \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
                "  \n" +
                "		-- get Assembly Clean Type  \n" +
                "		SELECT CASE WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'BOTH'  \n" +
                "					WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'  \n" +
                "					WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'  \n" +
                "					WHEN comst.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "                    ELSE ''  \n" +
                "               END INTO assyCleanType  \n" +
                "        FROM component comst  \n" +
                "        WHERE EXISTS (SELECT 1 FROM workorder wo WHERE wo.woID = pwoID AND isDeleted = 0 AND wo.partID = comst.id );  \n" +
                "		-- open the cursor  \n" +
                "		OPEN operation_cursor;  \n" +
                "  \n" +
                "		 -- start looping  \n" +
                "		operation_loop: LOOP  \n" +
                "  \n" +
                "			-- read the name from next row into the variables  \n" +
                "			FETCH operation_cursor INTO current_opnumber;  \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,  \n" +
                "			-- close the cursor and exit the loop if it has.  \n" +
                "			IF exit_loop THEN  \n" +
                "				 CLOSE operation_cursor;  \n" +
                "				 LEAVE operation_loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET current_opname:= '';  \n" +
                "			SET current_woopid:= 0;  \n" +
                "			SET current_operationTypeID:= 0;  \n" +
                "			SET current_qtyControl:= 0;  \n" +
                "			SET current_isTrackBySerialNo:= 0;  \n" +
                "			SET current_isLoopOperation:= 0;  \n" +
                "			SET current_refLoopWOOPNumber:= 0;  \n" +
                "			SET current_isIssueQty:= 0;  \n" +
                "			SET current_refLoopWOOPID:= 0;  \n" +
                "  \n" +
                "			-- get opname and woopid from operation number  \n" +
                "			SELECT curWOOP.opname, curWOOP.woopid, curWOOP.operationTypeID, curWOOP.qtyControl,  \n" +
                "			curWOOP.isIssueQty, curWOOP.isTrackBySerialNo, curWOOP.isLoopOperation,  \n" +
                "			(SELECT woop.opNumber FROM workorder_operation woop WHERE woop.woopid=curWOOP.refLoopWOOPID) AS refLoopWOOPNumber ,  \n" +
                "			  curWOOP.refLoopWOOPID  \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl,  \n" +
                "			current_isIssueQty, current_isTrackBySerialNo, current_isLoopOperation,  \n" +
                "			current_refLoopWOOPNumber ,  \n" +
                "			current_refLoopWOOPID  \n" +
                "			FROM workorder_operation curWOOP WHERE curWOOP.opnumber = current_opnumber  \n" +
                "			AND curWOOP.deletedat IS NULL AND curWOOP.woid=pwoid LIMIT 1;  \n" +
                "			-- get previous operation of rework operation  \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo  \n" +
                "				WHERE opnumber < current_opnumber  \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF first_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as first operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF last_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as last operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/  \n" +
                "			SET IsInspectionProcess:=0;  \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInspectionProcess := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is rework operation, it cannot be inspection process.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "			SET IsInValidReworkOperation:=0;  \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is rework operation, it must have manufacturer and issue qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "			SET IsInValidIsTrackBySerialNo:=0;  \n" +
                "  \n" +
                "			IF ((current_IsTrackBySerialNo = 1) AND (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidIsTrackBySerialNo := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidIsTrackBySerialNo  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is track by serial# operation, it must have manufacturer qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - loop operation validation for mfg qty, sequence operation ****************************************************/  \n" +
                "			SET IsInValidIsLoopOperation:=0;  \n" +
                "			IF (current_isLoopOperation = 1) THEN  \n" +
                "				SET next_opnumber:= 0;  \n" +
                "				-- get next operation of inspection operation  \n" +
                "				SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo  \n" +
                "					WHERE opnumber > current_opnumber  \n" +
                "					AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "				IF(current_qtyControl = 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if next operation is rework than not allow  \n" +
                "				ELSEIF(next_opnumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber = next_opnumber  \n" +
                "							AND isRework=1) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, next operation cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if found previous operation than check operation is inspection process or not  \n" +
                "				ELSEIF(current_refLoopWOOPNumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber <> current_refLoopWOOPNumber  \n" +
                "							AND opNumber <> current_opnumber  \n" +
                "							AND opNumber BETWEEN current_refLoopWOOPNumber AND current_opnumber) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, There should be no operation between loop operation', '(', FORMAT(current_opnumber,3), ') ',' and loop to operation', '(', FORMAT(current_refLoopWOOPNumber,3), ').');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- check refLoopWOOPID added or not  \n" +
                "				ELSEIF(current_refLoopWOOPID IS NULL OR current_refLoopWOOPID = 0  \n" +
                "					OR (SELECT COUNT(1) FROM  workorder_operation WHERE deletedat IS NULL  \n" +
                "						AND woOPID = current_refLoopWOOPID) = 0  \n" +
                "					) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, please add loop to operation for same.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - loop operation validation for mfg qty, sequence operation  ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "			SET found_in_paralleloperation:= 0;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO found_in_paralleloperation FROM workorder_operation_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (  \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1  \n" +
                "			) AND woopid=current_woopid;  \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not  \n" +
                "			IF current_previousopnumber > 0 THEN  \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;  \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process  \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)  \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;  \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process  \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN  \n" +
                "					IF(current_isLoopOperation = 1) THEN  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/  \n" +
                "		END LOOP operation_loop;  \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "		block2: BEGIN  \n" +
                "			-- 1 get list of inspection operation in workorder  \n" +
                "			DECLARE c_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_checkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_reworkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE temp_opname VARCHAR(500) DEFAULT 0;  \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;  \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;  \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation  \n" +
                "			DECLARE inspection_cursor CURSOR FOR  \n" +
                "			SELECT opnumber FROM workorder_operation  \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID  \n" +
                "			AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN inspection_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			inspection_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH inspection_cursor INTO c_opnumber;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_inspection_loop THEN  \n" +
                "					 CLOSE inspection_cursor;  \n" +
                "					 LEAVE inspection_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET temp_opname:= '';  \n" +
                "				SET temp_woopid:= 0;  \n" +
                "				SET temp_isRework:= 0;  \n" +
                "				SET temp_qtyControl:= 0;  \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl  \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl  \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber  \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                "				SET IsReworkInspectionOperation:= 0;  \n" +
                "				IF (temp_isRework = 1) THEN  \n" +
                "					SET IsReworkInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                "				SET IsInValidInspectionOperation:= 0;  \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN  \n" +
                "					SET IsInValidInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/  \n" +
                "				SET IsParallelClusterOperation:= 0;  \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation  \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (  \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL  \n" +
                "				 			AND clusterid IN (  \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL  \n" +
                "								AND woid=pwoid AND isparelleloperation=1  \n" +
                "				 	)  \n" +
                "				);  \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster  \n" +
                "				IF (IsParallelClusterOperation = 0) THEN  \n" +
                "					SET c_checkopnumber:= 0;  \n" +
                "					-- get next operation of inspection operation  \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo  \n" +
                "						WHERE opnumber > c_opnumber  \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not  \n" +
                "					IF c_checkopnumber > 0 THEN  \n" +
                "						SET c_reworkopnumber:= 0;  \n" +
                "						-- set checked operation number if found as rework process  \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation  \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1  \n" +
                "						AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process  \n" +
                "						IF c_reworkopnumber = 0 THEN  \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "			END LOOP inspection_loop;  \n" +
                "		END block2;  \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                "		block3: BEGIN  \n" +
                "			-- 1 get list of cluster in workorder  \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;  \n" +
                "			DECLARE current_minopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE current_maxopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE temp_clustername VARCHAR(100) DEFAULT '';  \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;  \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;  \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_loopoperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster  \n" +
                "			DECLARE cluster_cursor CURSOR FOR  \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;  \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN cluster_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			cluster_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH cluster_cursor INTO current_clusterid;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_cluster_loop THEN  \n" +
                "					 CLOSE cluster_cursor;  \n" +
                "					 LEAVE cluster_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN  \n" +
                "					SET temp_clustername:= '';  \n" +
                "					SET temp_isParellelOperation:= 0;  \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;  \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN  \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "						SET IsReworkParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "						SET IsPregrorammingParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                "						SET found_mismatchoperations:= 0;  \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (  \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						ELSE  \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "							IF (found_mismatchoperations = 1) THEN  \n" +
                "								SET found_operationTypeID:= 0;  \n" +
                "								SET cluster_maxOpNumber:= 0;  \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (  \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;  \n" +
                "									SET next_operation_to_cluster_is_loopoperation:= 0;  \n" +
                "  \n" +
                "									SELECT isRework,isLoopOperation INTO next_operation_to_cluster_is_rework,next_operation_to_cluster_is_loopoperation FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber > cluster_maxOpNumber);  \n" +
                "  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_loopoperation = 1) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> cannot be loop operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "						END IF;  \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/  \n" +
                "					END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/  \n" +
                "					SET current_minopnumber:= 0;  \n" +
                "					SET current_maxopnumber:= 0;  \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation  \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)  \n" +
                "					AND woid = pwoid AND deletedat IS NULL;  \n" +
                "					SET found_invalidsequenceoperation:= 0;  \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid  \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE  \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)  \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)  \n" +
                "					ORDER BY opnumber;  \n" +
                "					IF found_invalidsequenceoperation > 0 THEN  \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/  \n" +
                "				END IF;  \n" +
                "			END LOOP cluster_loop;  \n" +
                "		END block3;  \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "		block4: BEGIN  \n" +
                "  \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_move_to_stock_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_track_by_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_allow_final_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_loop_operation INT DEFAULT 0;  \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_operation_count INT DEFAULT 0;  \n" +
                "-- 			DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;  \n" +
                "			DECLARE invalid_wo_count INT DEFAULT 0;  \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_type_id INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_name VARCHAR(500);  \n" +
                "			DECLARE move_to_stock_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_assembly_part_not_added INT DEFAULT 0;  \n" +
                "			DECLARE found_assembly_equipment_not_added INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE allow_final_serialno_operation_op_name VARCHAR(500);  \n" +
                "			DECLARE allow_final_serialno_operation_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_rework_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_rework_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "			SET found_invalid_is_loop_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_loop_operation FROM workorder_operation WHERE isrework = 0 AND isLoopOperation=1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_loop_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Loop Operation must have rework operation set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_inspection_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_inspection_operation FROM workorder_operation WHERE  \n" +
                "			operationTypeID = InspectionOperationTypeID AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_inspection_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "			SET found_invalid_is_track_by_serialno_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_track_by_serialno_operation FROM workorder_operation WHERE  \n" +
                "			isTrackBySerialNo = 1 AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_track_by_serialno_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Track By Serial Operation must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "			SET check_workorder_isrevised:= 0;  \n" +
                "			SELECT COUNT(1) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;  \n" +
                "			IF check_workorder_isrevised > 0 THEN  \n" +
                "				SET first_OpTypeID:=0;  \n" +
                "  \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;  \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "			SET preprogramming_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;  \n" +
                "			IF preprogramming_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one pre-programming operation !!');  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			-- SET certificate_standard_count:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO certificate_standard_count FROM certificate_standards  \n" +
                "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND  \n" +
                "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);  \n" +
                "			-- IF certificate_standard_count > 0 THEN  \n" +
                "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');  \n" +
                "			-- END IF;  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			SET invalid_wo_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO invalid_wo_count FROM workorder_operation  \n" +
                "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;  \n" +
                "			IF invalid_wo_count > 0 THEN  \n" +
                "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published.');  \n" +
                "			END IF;  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "			SET move_to_stock_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO move_to_stock_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isMoveToStock=1;  \n" +
                "			IF move_to_stock_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one move to stock operation.');  \n" +
                "			ELSE  \n" +
                "				IF move_to_stock_operation_count = 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must have at least one <b>move to stock</b> operation, It should be last operation of work order.');  \n" +
                "				ELSE  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "					SELECT opNumber, opName, operationTypeID, isRework, isPreProgrammingComponent INTO move_to_stock_op_number, move_to_stock_op_name, move_to_stock_op_type_id, move_to_stock_is_rework, move_to_stock_is_preprogramming FROM workorder_operation WHERE isMoveToStock = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "					IF(last_opnumber <> move_to_stock_op_number) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It must be last operation of work order.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_op_type_id = InspectionOperationTypeID) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be inspection process.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					IF(move_to_stock_is_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "			SET allow_final_serialno_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO allow_final_serialno_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isAllowFinalSerialMapping=1;  \n" +
                "			IF allow_final_serialno_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('More than one operations configured with \"Serial# Mapping\". <br/>Only one operation with \"Serial# Mapping\" is allowed.');  \n" +
                "			ELSE  \n" +
                "				IF allow_final_serialno_operation_count <> 0 THEN  \n" +
                "					SELECT opNumber, opName, isRework, isPreProgrammingComponent, qtyControl  \n" +
                "					INTO allow_final_serialno_operation_op_number, allow_final_serialno_operation_op_name, allow_final_serialno_operation_is_rework, allow_final_serialno_operation_preprogramming,allow_final_serialno_operation_qtyControl FROM workorder_operation WHERE isAllowFinalSerialMapping = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_qtyControl = 0) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It must have manufacturer qty set as true.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_move_to_stock_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_move_to_stock_operation FROM workorder_operation WHERE isMoveToStock = 1 AND qtycontrol=0 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_move_to_stock_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Move To Stock Operation must have manufacturer qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "			-- SET found_assembly_part_not_added:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO found_assembly_part_not_added FROM rfq_lineitems_alternatepart  \n" +
                "			--   WHERE rfqLineItemsID  \n" +
                "			-- 	IN (SELECT id FROM rfq_lineitems  \n" +
                "			-- 		WHERE partID  \n" +
                "			-- 		IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "			-- 		AND deletedAt IS NULL)  \n" +
                "			-- 			AND mountingTypeID  \n" +
                "			-- 			IN (  \n" +
                "			-- 				SELECT rfqMountingTypeID  \n" +
                "			-- 				FROM component_logicalgroup_detail cld  \n" +
                "			-- 				WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "			-- 				IN (  \n" +
                "			-- 					SELECT id  \n" +
                "			-- 					FROM component_logicalgroup  \n" +
                "			-- 					WHERE `name`  \n" +
                "			-- 					IN ('Supplies','Materials','Tools')  \n" +
                "			-- 					AND deletedAt IS NULL  \n" +
                "			-- 				)  \n" +
                "			-- 			)  \n" +
                "			-- 			AND deletedAt IS NULL  \n" +
                "			-- 			AND mfgPNID  \n" +
                "			-- NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			SET found_assembly_part_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_part_not_added FROM component_drivetools  \n" +
                "			WHERE refComponentID IN (SELECT id FROM component WHERE id  \n" +
                "							IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE rfqLineItemsID IN (SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "												IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "												AND mountingTypeID  IN (SELECT rfqMountingTypeID  \n" +
                "														FROM component_logicalgroup_detail cld  \n" +
                "														WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "														IN (SELECT id  \n" +
                "														FROM component_logicalgroup  \n" +
                "														WHERE `name` IN ('Supplies','Materials','Tools')  \n" +
                "														AND deletedAt IS NULL)  \n" +
                "													)) AND deletedAt IS NULL  \n" +
                "							) AND deletedAt IS NULL AND driverToolRequired=1  \n" +
                "						) AND deletedAt IS NULL AND componentID  \n" +
                "			NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_part_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Parts</b> from assembly which belongs to <b>Supplies, Materials & Tools</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "			SET found_assembly_equipment_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_equipment_not_added  \n" +
                "			FROM component_functionaltestingequipment  \n" +
                "			WHERE refComponentID  \n" +
                "			IN (SELECT id FROM component WHERE id  \n" +
                "				IN (  \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "					WHERE rfqLineItemsID  \n" +
                "					IN (  \n" +
                "						SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "						IN(  \n" +
                "							SELECT partID FROM workorder WHERE woID=pwoID  \n" +
                "						)  \n" +
                "					) AND deletedAt IS NULL  \n" +
                "				) AND deletedAt IS NULL AND functionalTestingRequired=1  \n" +
                "			) AND deletedAt IS NULL  AND eqpID  \n" +
                "			NOT IN (SELECT eqpID FROM workorder_operation_equipment WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_equipment_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Equipments</b> from assembly which needs <b>Functional Testing Equipments</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "			SELECT opNumber, opName INTO opNumber_Max_ForMissingPartQtyOP , opName_Max_ForMissingPartQtyOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isAllowMissingPartQty` =  1  \n" +
                "			AND woop.deletedAt IS NULL  \n" +
                "			ORDER BY opNumber DESC LIMIT 1;  \n" +
                "  \n" +
                "			SELECT MAX(opNumber) INTO opNumber_Max_ForReworkOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isRework` =  1  \n" +
                "			AND woop.deletedAt IS NULL ;  \n" +
                "  \n" +
                "			IF(opNumber_Max_ForMissingPartQtyOP IS NOT NULL AND opNumber_Max_ForMissingPartQtyOP > 0 AND  \n" +
                "				(opNumber_Max_ForReworkOP IS NULL OR opNumber_Max_ForReworkOP = 0  \n" +
                "					OR (opNumber_Max_ForMissingPartQtyOP > opNumber_Max_ForReworkOP))) THEN  \n" +
                "  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(opNumber_Max_ForMissingPartQtyOP,3), ') ' ,opName_Max_ForMissingPartQtyOP, '</b> operation is \"Allow Operation To Continue With Possibility Of Missing Parts Placements\".  \n" +
                "							So after this operation, any one operation must be rework.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "			SELECT COUNT(1) INTO anyPreProgPartInWOAssyBOM FROM rfq_lineitems  \n" +
                "			WHERE partID = (SELECT partID FROM workorder WHERE woID= pwoID AND deletedAt IS NULL)  \n" +
                "			AND programingStatus = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO anyPartPreProgRequireWOOP FROM workorder_operation  \n" +
                "			WHERE woID = pwoID  \n" +
                "			AND isPreProgrammingComponent = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1;  \n" +
                "  \n" +
                "  \n" +
                "			IF(anyPreProgPartInWOAssyBOM > 0 AND anyPartPreProgRequireWOOP = 0) THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work order must have at least one part pre-programming operation.');  \n" +
                "			END IF;  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "  \n" +
                "  \n" +
                "		END block4;  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "		block5: BEGIN  \n" +
                "        	DECLARE v_IsAllowSerialMappingWOId INT;  \n" +
                "            DECLARE v_IsAllowSerialMappingOperationName VARCHAR(500);  \n" +
                "			DECLARE v_CountMFRSR INT;  \n" +
                "			IF allow_final_serialno_operation_count <= 2 THEN  \n" +
                "				SELECT woOPID, fun_getOperationNameByWOOPID(woOPID) INTO v_IsAllowSerialMappingWOId  \n" +
                "				,v_IsAllowSerialMappingOperationName FROM  \n" +
                "				workorder_operation WHERE woID = pwoID AND isDeleted = 0 AND isAllowFinalSerialMapping = 1;  \n" +
                "				IF(v_IsAllowSerialMappingWOId IS NOT NULL)  \n" +
                "				THEN  \n" +
                "					SELECT COUNT(1) INTO v_CountMFRSR FROM workorder_serialmst WHERE woID = pwoID AND serialType = 1 AND isDeleted = 0;  \n" +
                "					IF v_CountMFRSR = 0 THEN  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES ((CONCAT('Work Order must require MFR SR# because operation <b>',v_IsAllowSerialMappingOperationName,'</b> is configured as Serial# Mapping operation in work order.')));  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "            END IF;  \n" +
                "		END block5;  \n" +
                "		/**************************************** end - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 6 - Check cleaning type of operation againse Assembly cleaning type ****************************************************/  \n" +
                "        block6: BEGIN  \n" +
                "			SELECT	GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean and Water-Soluble </li>') ELSE NULL END)  SEPARATOR '' )  bothCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean </li>') ELSE NULL END)  SEPARATOR '' )  cleanCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isWaterSoluble = 1 AND isNoClean =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Water-Soluble</li>' )ELSE NULL END) SEPARATOR '') waterCnt,  \n" +
                "                    GROUP_CONCAT((CASE WHEN isFluxNotApplicable = 1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Not Applicable</li>' )ELSE NULL END) SEPARATOR '') naCnt  \n" +
                "			INTO  bothOp, noCleanOp, waterSolubleOp  , notApplicableOp  \n" +
                "			FROM workorder_operation WHERE woID = pwoID AND isDeleted = 0;  \n" +
                "			IF assyCleanType = '' THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly flux type from part master.<br/>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF assyCleanType = 'NA' AND  ( noCleanOp IS NOT NULL OR waterSolubleOp IS NOT NULL) THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly as No-Clean or Water-Soluble or Remove following operation from work order to validate.<br/>','<ul>',IFNULL(noCleanOp,''),IFNULL(waterSolubleOp,''),'</ul>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF	assyCleanType = 'NC' THEN  \n" +
                "				SET err = 0;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-Clean.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NULL THEN -- OR opWaterSolubleCnt > 0 ) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one No-Clean operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',waterSolubleOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'WS' THEN  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as Water-Soluble.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',noCleanOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'BOTH' THEN  \n" +
                "				-- Check Both Operation Available Then allow  \n" +
                "				-- Check NoClean and WaterSolubale Both Operation Allow  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-clean and Water-soluble.<br/><ul>';  \n" +
                "				IF  ((bothOp IS NULL) AND (noCleanOp IS NULL OR waterSolubleOp IS NULL)) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble and No-clean operation or Both operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "        END block6;  \n" +
                "		/**************************************** end - case 6 - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "        block7: BEGIN  \n" +
                "			DECLARE vBOMRefDesigList,vWoOpRefDesigList,vOdddlyRefDes,vAddedWoOpRefDes,vAddedOddlyBOMRefDes TEXT;  \n" +
                "			DECLARE startPos, endPos, maxLength INT ;  \n" +
                "            DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                "            DECLARE itemRefDesg varchar(500);  \n" +
                "            DECLARE vInvalidList TEXT DEFAULT '';  \n" +
                "            SET vAddedWoOpRefDes = '';  \n" +
                "  \n" +
                "  \n" +
                "            SELECT  Group_Concat(concat_ws(',',rl.refDesig,rl.dnpDesig)) INTO vBOMRefDesigList  \n" +
                "            From rfq_lineitems rl  \n" +
                "            LEFT JOIN part_sub_assy_relationship psub  ON rl.partID = psub.prPerPartID  and psub.isDeleted = 0  \n" +
                "            Where rl.isDeleted = 0  \n" +
                "            And psub.partID = vPartID;  \n" +
                "  \n" +
                "			/*IF vBOMRefDesigList IS NOT NULL OR  vBOMRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vBOMRefDesigList) into vBOMRefDesigList;  \n" +
                "			END IF;  */  \n" +
                "  \n" +
                "            SELECT  Group_Concat(wor.refDesig) INTO vWoOpRefDesigList  \n" +
                "            From workorder_operation_refDesig wor  \n" +
                "            Where wor.isDeleted = 0  \n" +
                "            AND wor.woID = pWoId;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(cor.refDes) INTO vOdddlyRefDes  \n" +
                "            From component_oddely_refdes cor  \n" +
                "            Where cor.refComponentID = vPartID  \n" +
                "            and cor.isDeleted =0;  \n" +
                "-- select   vBOMRefDesigList, vOdddlyRefDes;  \n" +
                "			--  validation for  oddly named ref des  \n" +
                "			--  case:  if oddly ref des added and one of them is 'V1-M1' then no need to  send that to fun_getDesignatorList  \n" +
                "            --  Separate added oddly RefDes and merge after getting valid refDes list  \n" +
                "            IF vOdddlyRefDes IS NOT NULL THEN  \n" +
                "				SET startPos = 1;  \n" +
                "				SET maxLength = Length(vOdddlyRefDes);  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',vOdddlyRefDes,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(vOdddlyRefDes,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(vOdddlyRefDes,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						-- separate Oddly Ref Des from WO OP RefDes List  \n" +
                "						IF(INSTR(vWoOpRefDesigList, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedWoOpRefDes = '' OR vAddedWoOpRefDes IS NULL THEN  \n" +
                "								SET vAddedWoOpRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedWoOpRefDes = CONCAT_WS(',',vAddedWoOpRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET vWoOpRefDesigList = REPLACE(vWoOpRefDesigList,concat(itemRefDesg,','),'');  \n" +
                "						-- separate Oddly Ref Des from BOM RefDes List  \n" +
                "						IF(INSTR(vBOMRefDesigList, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedOddlyBOMRefDes = '' OR vAddedOddlyBOMRefDes IS NULL THEN  \n" +
                "								SET vAddedOddlyBOMRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedOddlyBOMRefDes = CONCAT_WS(',',vAddedOddlyBOMRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET vBOMRefDesigList = REPLACE(vBOMRefDesigList,concat(itemRefDesg,','),'');  \n" +
                "					END IF;  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "			IF vWoOpRefDesigList IS NOT NULL OR  vWoOpRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vWoOpRefDesigList) into vWoOpRefDesigList;  \n" +
                "                IF vAddedWoOpRefDes IS NOT NULL OR vAddedWoOpRefDes <> '' THEN  \n" +
                "					SET vWoOpRefDesigList = CONCAT_WS(',',vAddedWoOpRefDes,  vWoOpRefDesigList);  \n" +
                "                END IF;  \n" +
                "            END IF;  \n" +
                "            IF vBOMRefDesigList IS NOT NULL OR  vBOMRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vBOMRefDesigList) into vBOMRefDesigList;  \n" +
                "                IF vAddedOddlyBOMRefDes IS NOT NULL OR vAddedOddlyBOMRefDes <> '' THEN  \n" +
                "					SET vBOMRefDesigList = CONCAT_WS(',',vAddedOddlyBOMRefDes,  vBOMRefDesigList);  \n" +
                "                END IF;  \n" +
                "            END IF;  \n" +
                "-- select vWoOpRefDesigList , vBOMRefDesigList;  \n" +
                "			SET startPos = 1;  \n" +
                "            SET maxLength = Length(vWoOpRefDesigList);  \n" +
                "            IF vWoOpRefDesigList IS NOT NULL THEN  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',vWoOpRefDesigList,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						IF(INSTR(vBOMRefDesigList,itemRefDesg) = 0) THEN  \n" +
                "							SET vInvalidCount = vInvalidCount +1 ;  \n" +
                "							IF vInvalidList = '' OR vInvalidList IS NULL THEN  \n" +
                "								SET vInvalidList = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vInvalidList = CONCAT_WS(',',vInvalidList,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "  \n" +
                "            IF vInvalidCount > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ( concat('Invalid RefDes found in one of Operation(s). <br/> <b>',vInvalidList,'</b>'));  \n" +
                "            END IF;  \n" +
                "        END block7;  \n" +
                "        /**************************************** end - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "		SELECT errorText FROM temp_operation_error;  \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/  \n" +
                "		IF (SELECT COUNT(1) FROM temp_operation_error) = 0 THEN  \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,  \n" +
                "			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoid;  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1226,'1.00','V1',' Sproc_ValidateWorkorderAndPublish -Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1226:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "UPDATE `systemconfigrations` SET `description`='MFR Alias can be removed by the user having role as {Role Mentioned in Value} or above level' WHERE `key`='MFRRemoveAccess';  \n" +
                "UPDATE `systemconfigrations` SET `description`='The number mentioned in the value field is in percentage. If Consumed quantity is more than defined percentage then during consumed material from UMID ask confirmation to user that Consumed quantity is more than {x}%. Are you sure you want to transfer and update quantity of this UMID?' WHERE `key`='CountMaterialPercentage';  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1227,'1.00','V1','Updated Datakey description - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1227:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssyCompListForCustomerPackingSlipMISC;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pSearch VARCHAR(300),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pisFromSO TINYINT  ,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	/*NOTE:	pSalesOrderID is used for  RMA SO  for fetching part of original Q2C SO      */  \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (  \n" +
                "		customerID INT  \n" +
                "    );  \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/  \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN  \n" +
                "		SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/  \n" +
                "    IF 	pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "		SELECT buyTo AS customerID  \n" +
                "		FROM acquireCustomers;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "        SELECT smm.refMfgCodeMstID AS customerID  \n" +
                "		FROM supplier_mapping_mst smm  \n" +
                "		WHERE smm.supplierID = pCustomerID  \n" +
                "        AND smm.isDeleted = 0  \n" +
                "        AND smm.isCustMapping=0;  \n" +
                "	END IF;  \n" +
                "	IF pSalesOrderID IS NULL THEN  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				WHERE co.id > 0  \n" +
                "				AND  co.mfgType = 'MFG'  \n" +
                "				AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)  \n" +
                "								THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = co.mfgCodeID))  \n" +
                "							  ELSE 1 = 1  END)  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)  \n" +
                "				AND co.isDeleted = 0  \n" +
                "				AND co.isGoodPart = 1  \n" +
                "				AND co.partType != 4  \n" +
                "			) AS co  \n" +
                "			WHERE (CASE WHEN pSearch IS NOT NULL  \n" +
                "						THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))  \n" +
                "						ELSE 1 = 1  \n" +
                "				END);  \n" +
                "    ELSE  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  ,sod.custPOLineNumber  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				JOIN salesorderdet sod ON sod.partID = co.id and sod.isDeleted = 0  \n" +
                "				WHERE co.mfgType = 'MFG'  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!= -3  \n" +
                "				AND co.isDeleted = 0  \n" +
                "                AND co.partType != 4  \n" +
                "                and sod.refSalesOrderId = pSalesOrderID  \n" +
                "			) AS co  ;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1228,'1.00','V1','Sproc_GetAssyCompListForCustomerPackingSlipMISC - Bug 39255: QA Testing issues of User Story 38431 - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1228:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_packingslip` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pToBinIDOfEmptyBin INT,  \n" +
                "	IN pTransTypeForUMID VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100) ,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE totCustPackingSlipIDs INT DEFAULT 0;  \n" +
                "	DECLARE i_cp INT DEFAULT 0;  \n" +
                "	DECLARE v_refCustPackingSlipDetIDs LONGTEXT ;  \n" +
                "  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslip as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_invoice\" else \"\" end as msg FROM customer_packingslip  \n" +
                "			where id IN(',IDs,') and refCustInvoiceID is not null LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslip t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "  \n" +
                "				/* update  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "				CREATE TEMPORARY TABLE t( txt TEXT );  \n" +
                "				INSERT INTO t VALUES(IDs);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_custPackingSlipIDList;  \n" +
                "				CREATE TEMPORARY TABLE temp_custPackingSlipIDList( val CHAR(255) );  \n" +
                "				SET @SQL = CONCAT(\"insert into temp_custPackingSlipIDList (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totCustPackingSlipIDs FROM temp_custPackingSlipIDList ;  \n" +
                "				SET i_cp=0;  \n" +
                "  \n" +
                "				/* customer packing slip loop - to reset UMID record quantity */  \n" +
                "				WHILE i_cp < totCustPackingSlipIDs DO  \n" +
                "  \n" +
                "					SET v_refCustPackingSlipDetIDs = NULL;  \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(id) INTO v_refCustPackingSlipDetIDs  \n" +
                "					FROM customer_packingslip_det  \n" +
                "					WHERE isDeleted = 0  \n" +
                "					AND refCustPackingSlipID = (SELECT val FROM temp_custPackingSlipIDList LIMIT i_cp,1)  \n" +
                "					;  \n" +
                "  \n" +
                "					IF (v_refCustPackingSlipDetIDs IS NOT NULL AND v_refCustPackingSlipDetIDs != '') THEN  \n" +
                "						CALL Sproc_DeleteCustomerPackingslipDet(v_refCustPackingSlipDetIDs , countList , pToBinIDOfEmptyBin , pTransTypeForUMID , pActionPerformedForUMIDAdjust , deletedBy , pRoleID) ;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					SET i_cp = i_cp + 1;  \n" +
                "				END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update customer_packingslip_otherexpense_details set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update customer_packingslip_commission_attribute set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "			        SET @SQl6 = CONCAT('update customer_packing_slip_track_number set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipID IN(',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt6 FROM @SQl6;  \n" +
                "				EXECUTE stmt6;  \n" +
                "				DEALLOCATE PREPARE stmt6;  \n" +
                "  \n" +
                "				SET @SQL5 = CONCAT('UPDATE shippedassembly  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt5 FROM @SQL5;  \n" +
                "				EXECUTE stmt5;  \n" +
                "				DEALLOCATE PREPARE stmt5;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('UPDATE customer_packingslip_det  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,')) AND isDeleted=0');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN (',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "				SET @SQl7 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in (select refSalesorderDetid from customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) and sd.isDeleted=0');  \n" +
                "				PREPARE stmt7 FROM @SQl7;  \n" +
                "				EXECUTE stmt7;  \n" +
                "				DEALLOCATE PREPARE stmt7;  \n" +
                "				SELECT * FROM tempcustomerPackingslip WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslip t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempcustomerPackingslip t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- ELSE  \n" +
                "		/* [S] - Add Time line log for delete sales order mst */  \n" +
                "	-- 	SET @SQl5 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "	-- 	PREPARE stmt5 FROM @SQl5;  \n" +
                "	-- 	EXECUTE stmt5;  \n" +
                "	-- 	DEALLOCATE PREPARE  stmt5;  \n" +
                "	-- 	SELECT \"\" TotalCount ,\"\" AS Message FROM customer_packingslip WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "	-- END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteCustomerPackingslipDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteCustomerPackingslipDet`(  \n" +
                "	IN pRefCustPackingSlipDetIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pToBinIDOfEmptyBin INT,  \n" +
                "	IN pTransTypeForUMID VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100) ,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE totCustPackingSlipDet INT DEFAULT 0;  \n" +
                "	DECLARE j_cpd INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totUIShipAssyUMID INT DEFAULT 0;  \n" +
                "	DECLARE lv_sa_refsidid INT;  \n" +
                "	DECLARE lv_sa_umid VARCHAR(20);  \n" +
                "	DECLARE lv_sa_shippedqty INT;  \n" +
                "	DECLARE lv_cpsd_refSalesorderDetid INT;  \n" +
                "	DECLARE lv_cpsd_partID INT;  \n" +
                "	DECLARE lv_sa_partID INT;  \n" +
                "	DECLARE lv_currRefCustPackingSlipDetID INT;  \n" +
                "	DECLARE lv_uomIDOfAssy INT;  \n" +
                "/*  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "*/  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslipdet;  \n" +
                "  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslipdet as  \n" +
                "		(SELECT 0 cnt ,\"\" as msg)  \n" +
                "	');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslipdet t)=0 THEN  \n" +
                "			-- START TRANSACTION;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "			CREATE TEMPORARY TABLE t( txt TEXT );  \n" +
                "			INSERT INTO t VALUES(pRefCustPackingSlipDetIDs);  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_refSalesorderDetids;  \n" +
                "			CREATE TEMPORARY TABLE temp_refSalesorderDetids( val CHAR(255) );  \n" +
                "			SET @SQL = CONCAT(\"insert into temp_refSalesorderDetids (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");  \n" +
                "			PREPARE stmt1 FROM @SQL;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustPackingSlipDet FROM temp_refSalesorderDetids ;  \n" +
                "			SET j_cpd=0;  \n" +
                "			/* customer packing slip det loop */  \n" +
                "			WHILE j_cpd < totCustPackingSlipDet DO  \n" +
                "  \n" +
                "				SET lv_currRefCustPackingSlipDetID = NULL;  \n" +
                "				SET lv_cpsd_refSalesorderDetid = NULL;  \n" +
                "  \n" +
                "				SELECT val INTO lv_currRefCustPackingSlipDetID  \n" +
                "				FROM temp_refSalesorderDetids LIMIT j_cpd,1 ;  \n" +
                "  \n" +
                "				/* get all UMID details for ref customer packing slip det from shipped assembly */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList_UMID;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UIShipAssyList_UMID AS  \n" +
                "					SELECT sa.woNumber, sa.refsidid,  \n" +
                "						(SELECT uid FROM component_sid_stock WHERE id = sa.refsidid AND isDeleted = 0) AS umid,  \n" +
                "						shippedqty , partID  \n" +
                "					FROM shippedassembly sa  \n" +
                "					WHERE sa.refCustPackingSlipDetID = lv_currRefCustPackingSlipDetID  \n" +
                "					AND sa.refsidid IS NOT NULL  \n" +
                "					AND sa.isDeleted = 0 AND sa.shippedqty > 0 ;  \n" +
                "  \n" +
                "				/* if cust packing det contain any UMID as shipped assembly then only  \n" +
                "					required ajdjust UMID stock */  \n" +
                "				IF((SELECT COUNT(1) FROM temp_UIShipAssyList_UMID) > 0) THEN  \n" +
                "  \n" +
                "					/* get all UMID details for ref customer packing slip det from component sid stock */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS temp_db_comp_sid_stock_list AS  \n" +
                "					SELECT 	csd.id,			csd.uid,		csd.refcompid,  \n" +
                "						csd.binID,		b.warehouseID,		w.parentWHID deptWHID,  \n" +
                "						csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,  \n" +
                "						csd.pkgUnit,		csd.uom,		csd.createdAt  \n" +
                "					FROM 	component_sid_stock   csd  \n" +
                "						JOIN 	binmst b ON csd.binID = b.id  \n" +
                "						JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "					WHERE   csd.id IN (SELECT refsidid FROM temp_UIShipAssyList_UMID)  \n" +
                "					AND 	csd.isdeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "					/* get required customer_packingslip_details */  \n" +
                "					SELECT refSalesorderDetid, partId INTO lv_cpsd_refSalesorderDetid, lv_cpsd_partID  \n" +
                "					FROM customer_packingslip_det  \n" +
                "					WHERE id = lv_currRefCustPackingSlipDetID AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SELECT uom INTO lv_uomIDOfAssy  \n" +
                "					FROM COMPONENT  \n" +
                "					WHERE id = lv_cpsd_partID ;  \n" +
                "  \n" +
                "					SELECT COUNT(1) INTO totUIShipAssyUMID FROM temp_UIShipAssyList_UMID ;  \n" +
                "					SET i=0;  \n" +
                "					WHILE i < totUIShipAssyUMID DO  \n" +
                "  \n" +
                "						SET lv_sa_refsidid = NULL;  \n" +
                "						SET lv_sa_umid = NULL;  \n" +
                "						SET lv_sa_shippedqty = 0;  \n" +
                "						SET lv_sa_partID = NULL;  \n" +
                "  \n" +
                "  \n" +
                "						SELECT refsidid, umid, shippedqty, partID  \n" +
                "							INTO lv_sa_refsidid , lv_sa_umid , lv_sa_shippedqty, lv_sa_partID  \n" +
                "						FROM temp_UIShipAssyList_UMID LIMIT i,1 ;  \n" +
                "  \n" +
                "  \n" +
                "						/* if change stock from UMID then check consume/adjustment UMID case */  \n" +
                "						CALL Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS(lv_sa_umid, lv_sa_refsidid,  \n" +
                "							0, lv_sa_shippedqty, pToBinIDOfEmptyBin, pTransTypeForUMID,  \n" +
                "							'', '', pActionPerformedForUMIDAdjust,  \n" +
                "							lv_cpsd_refSalesorderDetid, lv_sa_partID,lv_uomIDOfAssy, pUserID, pUserRoleID);  \n" +
                "  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET j_cpd = j_cpd + 1;  \n" +
                "			END WHILE;  \n" +
                "			/* to  update header amount when details deleted*/  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_removeAmt ;  \n" +
                "			CREATE TEMPORARY TABLE temp_removeAmt  \n" +
                "			SELECT cpd.refCustPackingSlipID AS id , SUM(extendedPrice) AS removeAmt  \n" +
                "			FROM customer_packingslip_det cpd  \n" +
                "			WHERE FIND_IN_SET(cpd.id,pRefCustPackingSlipDetIDs)  \n" +
                "			AND cpd.isDeleted = 0  \n" +
                "			GROUP BY cpd.refCustPackingSlipID;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip cp join temp_removeAmt tmp on tmp.id = cp.id set cp.totalAmount = cp.totalAmount - tmp.removeAmt where cp.id IN  ( select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.id in (',pRefCustPackingSlipDetIDs,') ) and cp.isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQL2 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in ( select refSalesorderDetid from customer_packingslip_det where  id in (',pRefCustPackingSlipDetIDs,') ) and sd.isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL2;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomerPackingslipdet WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "  \n" +
                "		-- COMMIT;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "		      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslipdet t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			FROM tempcustomerPackingslipdet t1  \n" +
                "			INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(t1.cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomerPackingslipdet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1229,'1.00','V1',' delete customer packing slip sps - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1229:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_validateScanUMIDOnly;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN prfqLineItemsID INT,  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pisPlacementTracking INT,  \n" +
                "	IN psaveUMIDDetails INT,  \n" +
                "	IN prefDesig VARCHAR(3000),  \n" +
                "	IN passyQty INT,  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval  VARCHAR(5)  DEFAULT 'V';  \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "	DECLARE temp_wo_sub_status INT ;  \n" +
                "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "    DECLARE temp_odddly_RefDes  TEXT;  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT,  \n" +
                "	     isUMIDError INT,  \n" +
                "	     isConfirmation INT,  \n" +
                "	     isMessage INT,  \n" +
                "	     isInformation INT,  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired,woSubStatus  \n" +
                "    INTO flag_kit_allocation_not_required_wo  , temp_wo_sub_status  \n" +
                "    FROM workorder wo  \n" +
                "    WHERE wo.woID = pwoID  \n" +
                "    AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "    FROM workorder_operation_refdesig  \n" +
                "    WHERE woID = pwoID  \n" +
                "    AND woOPID = pwoOpID  \n" +
                "    AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "    From component_oddely_refdes cor  \n" +
                "    Where cor.refComponentID = ppartID  \n" +
                "    and cor.isDeleted =0;  \n" +
                "  \n" +
                "    SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "    FROM workorder_operation  \n" +
                "    WHERE woID = pwoID  \n" +
                "    AND woOPID = pwoOpID  \n" +
                "    AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	#CHeck Only SMT Part allowed  in case of missing material status  \n" +
                "	IF (temp_wo_sub_status = 9 AND (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                "			WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                "										WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                "            AND rla.partID =   ppartID  \n" +
                "			AND rla.isDeleted = 0) > 0 ) THEN  \n" +
                "		 SET result = fun_checkAndInsertError('UMID051', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	# umid transaction details based on umid  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                "  \n" +
                "	select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                "    INTO flag_tempVerificationApproval;  \n" +
                "	/*IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                "		SET flag_tempVerificationRequire = 1;  \n" +
                "	END IF;                */  \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "    ELSE  \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		IF(flag_tempLineCount = 1) THEN  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                "			UPDATE temp_umid_details tud  \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(CONCAT_WS(',',refDesig,dnpDesig)) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                "			AND id = prfqLineItemsID)  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "		END IF;  \n" +
                "-- select pisPlacementTracking, psaveUMIDDetails, flag_isStrictlyLimitRefDes , temp_allowed_refDesList , flag_tempLineCount;  \n" +
                "-- select flag_kit_allocation_not_required_wo;  \n" +
                "-- select fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID);  \n" +
                "-- select * from temp_scan_error;  \n" +
                "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN  \n" +
                "			SET result = 0;  \n" +
                "        ELSEIF flag_kit_allocation_not_required_wo = 1 AND pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0  THEN  \n" +
                "			SET result = 0;  \n" +
                "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN  \n" +
                "-- select 'line 132';  \n" +
                "			SET result = 0;  \n" +
                "        ELSEIF (pisPlacementTracking = 1 AND psaveUMIDDetails = 1 AND flag_isStrictlyLimitRefDes = 1  \n" +
                "				AND temp_allowed_refDesList IS NOT NULL AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,prefDesig,temp_odddly_RefDes) = 0) THEN  \n" +
                "                SET result = 0;  \n" +
                "		ELSE  \n" +
                "			-- need to check from here  \n" +
                "			-- If scan popup with manual placement and allocated in kit and not saved details          --  \n" +
                "			-- Check placement tracking with more than one BOM line item for same part  \n" +
                "            -- Check for Allowed RefDes  \n" +
                "--  SELECT 'line 140',pisVerify,flag_tempLineCount,pisPlacementTracking,COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042');  \n" +
                "            IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042') > 0)) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSE  \n" +
                "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "						SET uidVerified = 1;  \n" +
                "					ELSE  \n" +
                "						SET uidVerified = 0;  \n" +
                "						SET result = 0;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                "						SET result = 0;  \n" +
                "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSE  \n" +
                "						-- check verification required  \n" +
                "						-- than verification require than check from which page scan/verify  \n" +
                "                        IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) THEN  \n" +
                "							-- Take confirmation  \n" +
                "							SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "						ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "							-- if scan option selected than check for already scanned in flow first  \n" +
                "							-- if not scanned than add as verified umid directly  \n" +
                "							IF(pisVerify <> 1) THEN  \n" +
                "								SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "								WHERE transactionType='U'  \n" +
                "								AND refsidid = temp_umid_stock_id  \n" +
                "								AND mfgPNID=temp_umid_comp_id  \n" +
                "								AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                "								AND woOPID = pwoOpID  \n" +
                "								AND employeeID=pemployeeId;  \n" +
                "  \n" +
                "								-- if already scanned than give message  \n" +
                "								-- else add as verified umid directly  \n" +
                "								IF(temp_feeder_transID > 0) THEN  \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`,`reelStatus`, refDesig,  \n" +
                "                                         `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- SCANNED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`, `reelStatus`, refDesig,  \n" +
                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- VERIFIED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								-- if already scanned than verify same umid for history  \n" +
                "								-- if not scanned yet than give message  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						 -- this code is commented because as per new implementation there will  be no verification for scan material  \n" +
                "                         /*ELSE  \n" +
                "							-- verification require than check from which page/popup  \n" +
                "							-- if from scan popup than add umid as scanned new record  \n" +
                "							-- else check for verify flow  \n" +
                "							IF (pisVerify <> 1) THEN  \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "								INSERT INTO workorder_trans_umid_details  \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)  \n" +
                "								VALUES  \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "									pCreatedBy, pCreatedBy, \"C\", prefDesig);  \n" +
                "  \n" +
                "								-- SCANNED  \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "								SELECT LAST_INSERT_ID() AS id;  \n" +
                "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF; */  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							'',				temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						NULL,				pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#0. return assy part list  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "	ELSE  \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "			-- verified UMID  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#1. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#2. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#3. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                "	SELECT NULL AS id;  \n" +
                "	SELECT id FROM temp_umid_transIDs;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1230,'1.00','V1','Sproc_validateScanUMIDOnly-Bug 39313: While scan UMID the error should not display.  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1230:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateScanUMIDFirst;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateScanUMIDFirst`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN pfeederLocation VARCHAR(1000),  \n" +
                "	IN ppartID INT(11),  \n" +
                "	IN pwoOpEqpID INT(11),  \n" +
                "	IN pwoOpID INT(11),  \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pemployeeId INT(11),  \n" +
                "	IN pcheckKitAllocation INT(11),  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT(11),  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN pisChangeReel INT(11),  \n" +
                "	IN preelChangeType VARCHAR(100),  \n" +
                "	IN ptoBinID INT(11),  \n" +
                "	IN pOldUMID VARCHAR(15),  \n" +
                "	IN pisConfirmed INT(11),  \n" +
                "	IN pwoID INT(11),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_comp_id INT(11);  \n" +
                "	DECLARE temp_comp_uom INT(11);  \n" +
                "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                "	DECLARE temp_lineID VARCHAR(100);  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE temp_eqpFeederID INT(11);  \n" +
                "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;  \n" +
                "	DECLARE uidVerified INT(11) DEFAULT 0;  \n" +
                "	DECLARE feederVerified INT(11) DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT(11);  \n" +
                "	DECLARE temp_umid_pkgQty INT(11);  \n" +
                "	DECLARE temp_umid_stock_id INT(11);  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT(11);  \n" +
                "	DECLARE temp_umid_pkgUnit INT(11);  \n" +
                "	DECLARE temp_umid_pkgCount INT(11);  \n" +
                "	DECLARE temp_umid_pkgUOM INT(11);  \n" +
                "	DECLARE temp_old_umid_comp_id INT(11);  \n" +
                "	DECLARE temp_old_umid_stock_id INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgQty INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgUnit INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgUOM INT(11);  \n" +
                "	DECLARE temp_eqp_wh_id INT(11);  \n" +
                "	DECLARE temp_eqp_bin_id INT(11);  \n" +
                "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_salesorderdetID VARCHAR(100);  \n" +
                "	DECLARE flag_isFeederTransExists INT (11) DEFAULT 0;  \n" +
                "	DECLARE valid_umid_transfer INT (11) DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                "	DECLARE temp_json_object VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT (11);  \n" +
                "    DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                "	DECLARE temp_old_umid_verify_status TINYINT DEFAULT 0; -- for  change reel flow  \n" +
                "	DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "    DECLARE temp_entered_refDes TEXT;  \n" +
                "	DECLARE temp_odddly_RefDes TEXT;  \n" +
                "  \n" +
                "	SET temp_eqp_wh_id = NULL;  \n" +
                "	SET temp_eqp_bin_id = NULL;  \n" +
                "	SET temp_eqp_wh_name = NULL;  \n" +
                "  \n" +
                "   -- This will be case when  call from  Change Reel SP : Sproc_ValidateScanChangeReel  \n" +
                "	CREATE temporary TABLE IF NOT EXISTS temp_old_umid_details  \n" +
                "    SELECT 0 As isVerified;  \n" +
                "	SELECT isVerified  \n" +
                "	INTO temp_old_umid_verify_status  \n" +
                "    FROM temp_old_umid_details;  \n" +
                "  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT(11),  \n" +
                "	     isUMIDError INT(11),  \n" +
                "	     isConfirmation INT(11),  \n" +
                "	     isMessage INT(11),  \n" +
                "	     isInformation INT(11),  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "  \n" +
                "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                "	INTO flag_tempVerificationApproval;  \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                "	FROM workorder wo  \n" +
                "	WHERE wo.woID = pwoID  \n" +
                "	AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "	FROM workorder_operation_refdesig  \n" +
                "	WHERE woID = pwoID  \n" +
                "	AND woOPID = pwoOpID  \n" +
                "	AND isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "    From component_oddely_refdes cor  \n" +
                "    Where cor.refComponentID = ppartID  \n" +
                "    and cor.isDeleted =0;  \n" +
                "  \n" +
                "	SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "	FROM workorder_operation  \n" +
                "	WHERE woID = pwoID  \n" +
                "	AND woOPID = pwoOpID  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "	ELSE  \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,')');  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, pkgUOM, pkgUnit, mfgPN, packagingGroupId  \n" +
                "		-- , refSalesOrderDetID  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_pkgUOM, temp_umid_pkgUnit, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		-- , temp_salesorderdetID  \n" +
                "		FROM temp_umid_details;  \n" +
                "		-- Before doing ZeroOut any UMID it should be verified  \n" +
                "		IF (preelChangeType = \"ZeroOut\"  AND  temp_old_umid_verify_status = 0 and  pUMID is not null) THEN  \n" +
                "			SET result = fun_checkAndInsertError('UMID050', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "        elseif (pfeederLocation IS NOT NULL) THEN  \n" +
                "			IF(fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, 0) > 0) THEN  \n" +
                "				SELECT id, rfqLineItemsID, partID, lineID, eqpFeederID, pidcode, uom, mfgPN, isCPN , refDesig  \n" +
                "				INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_lineID, temp_eqpFeederID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn,temp_entered_refDes  \n" +
                "				FROM temp_feeder_details;  \n" +
                "				-- IF(pisVerify = 1) THEN  \n" +
                "				-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                "				-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                "				-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                "				-- 			-- FAILED  \n" +
                "				-- 			SET @stmt_str = 'FEED001';  \n" +
                "				-- 			INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                "				-- 			VALUES (@stmt_str, 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				-- 		END IF;  \n" +
                "				-- 	END IF;  \n" +
                "				-- ELSE  \n" +
                "					# check for valid lineid for feeder details and umid details  \n" +
                "					#yes - check for lineid and valid than save transaction  \n" +
                "					#no - suggest valid feeder location  \n" +
                "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                "							-- ALLOCATED  \n" +
                "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSEIF (flag_isStrictlyLimitRefDes = 1 AND temp_allowed_refDesList IS NOT NULL  \n" +
                "							AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,temp_entered_refDes,temp_odddly_RefDes) = 0) THEN  \n" +
                "							SET result = 0;  \n" +
                "					ELSE  \n" +
                "						#in case validate UMID without Kit set true at WO  \n" +
                "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                "									-- WRONG_LOCATION  \n" +
                "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							   ELSE  \n" +
                "									SET temp_continue = 1;  \n" +
                "							   END IF;  \n" +
                "						ELSEIF ( fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                "							SET temp_continue = 1 ;  \n" +
                "						END IF;  \n" +
                "                        IF temp_continue = 1 THEN  \n" +
                "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id,1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                "								SET result = 0;  \n" +
                "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSE  \n" +
                "								IF (pisVerify <> 1) THEN  \n" +
                "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                "									-- IF NOT ALLOCATED THAN NO NEED TO GIVE ELSE PART, IT IS ALREADY ADDED IN FUNCTION  \n" +
                "                                    -- UMID016 for regualer feeder scan  \n" +
                "                                    -- UMID042 for Part level Kit Allocation checking success  . Both from  fun_checkKitAllocation  \n" +
                "									IF ( pwoOpEqpID IS NOT NULL AND  \n" +
                "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0)  OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                "										SELECT id, `name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst  \n" +
                "										WHERE refEqpID IN (  \n" +
                "											SELECT eqpID FROM workorder_operation_equipment  \n" +
                "											WHERE woOpEqpID=pwoOpEqpID AND deletedAt IS NULL  \n" +
                "										) AND deletedAt IS NULL;  \n" +
                "  \n" +
                "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "										END IF;  \n" +
                "  \n" +
                "										-- CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL, (SELECT binID FROM temp_umid_details),temp_eqp_wh_id, NULL, pCreatedBy, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);  \n" +
                "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                "												-- Take confirmation  \n" +
                "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "													AND refsidid = temp_umid_stock_id  \n" +
                "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                "													AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "  \n" +
                "												IF(temp_feeder_transID > 0) THEN  \n" +
                "													-- FAILED  \n" +
                "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "												ELSE  \n" +
                "  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "													INSERT INTO workorder_trans_umid_details  \n" +
                "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                "														`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "													VALUES  \n" +
                "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "													-- VERIFIED  \n" +
                "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "													SET valid_umid_transfer = 1;  \n" +
                "												END IF;  \n" +
                "											ELSEIF (flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "												-- SCANNED  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											-- WRONG_LOCATION  \n" +
                "											-- SET @stmt_str = 'UMID018';  \n" +
                "											-- INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                "											-- VALUES (@stmt_str, 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									SET feederVerified = 1;  \n" +
                "								ELSE  \n" +
                "									-- If change reel and old umid details  \n" +
                "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										-- get component details based on old umid  \n" +
                "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                "											FROM component_sid_stock css  \n" +
                "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                "  \n" +
                "										SELECT wtud.id  \n" +
                "                                        INTO temp_feeder_transID  \n" +
                "                                        FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND woOPID = pwoOpID;  \n" +
                "									-- If not change reel than check for reel transaction is done or not  \n" +
                "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "										WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "										AND wtud.refsidid = temp_umid_stock_id  \n" +
                "										AND wtud.mfgPNID=temp_umid_comp_id AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "										AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "										FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "											WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "										AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "										AND wtud.woOPID = pwoOpID;  \n" +
                "										-- AND isVerified=0;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										UPDATE workorder_trans_umid_details  \n" +
                "										SET isVerified=1,  \n" +
                "										verifiedBy=pemployeeId,  \n" +
                "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                "										WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "										-- VERIFIED  \n" +
                "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET feederVerified = 1;  \n" +
                "									-- if change reel than update verify flag for verfiy true  \n" +
                "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										 IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "                                        ( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                "                                        -- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "											WHERE whmst.refEqpID IN (  \n" +
                "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "											) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "											END IF;  \n" +
                "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                "														-- Added for multiple kit  \n" +
                "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                "														(SELECT id FROM kit_allocation ka  \n" +
                "															WHERE ka.refSalesOrderDetID IN  \n" +
                "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                "																FROM workorder_salesorder_details wsd  \n" +
                "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                "														',\\\"returnQty\\\":',0,  \n" +
                "														',\\\"returnUnit\\\":',0,  \n" +
                "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, 0,  \n" +
                "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														1,NULL,NULL,NULL,NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "												END IF;  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "  \n" +
                "												-- update old record toumid  \n" +
                "												UPDATE workorder_trans_umid_details  \n" +
                "												SET toRefUIDId=temp_umid_stock_id  \n" +
                "												WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- SELECT pwoTransID;  \n" +
                "												-- insert new umid for workorder equipment feeder  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												-- UMID SCANNED  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "											ELSE  \n" +
                "												-- WRONG_LOCATION  \n" +
                "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										-- FAILED  \n" +
                "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "                    END IF;  \n" +
                "				-- END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET uidVerified = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							CASE WHEN (pfeederLocation IS NULL) THEN '' ELSE pfeederLocation END,		temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 								temp_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_comp_id), 		temp_mfgpn,									CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),								fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						pwoOpEqpID,									pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#1. return history of umid transfer  \n" +
                "	IF(valid_umid_transfer = 0) THEN  \n" +
                "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#2. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#3. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#4. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#5. return feeder details  \n" +
                "	-- IF (feederVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                "	SELECT * FROM temp_feeder_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#6. return allocated UMID details  \n" +
                "	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                "	WHERE 1=0;  \n" +
                "  \n" +
                "	#7 return last inserted/updated records for umid transacrion  \n" +
                "	SELECT temp_last_inserted_umid_id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1231,'1.00','V1','Sproc_ValidateScanUMIDFirst-Bug 39313: While scan UMID the error should not display.  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1231:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponetCustAliasRevPN`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponetCustAliasRevPN`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefComponentCustAliasRevID VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_GetComponetCustAliasRevPN = CONCAT(\"  \n" +
                "       SELECT co.id, co.id as refComponentID, co.mfgPN,mfg.mfgCode,co.restrictUsePermanently, co.isCustom,co.pidCode,  \n" +
                "			co.restrictUSEwithpermission  , ro.rohsIcon , ro.name AS `rohsComplientConvertedValue`,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode, co.mfgPN,\", vMfgCodeFormat,\") as displayMfgPN,  \n" +
                "            co.mfgPNDescription,  \n" +
                "            fun_getUserNameByID(co.createdBy) createdby,  \n" +
                "            fun_getRoleByID(co.createByRoleId) createdbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt  \n" +
                "		FROM component co  \n" +
                "        Inner JOIN mfgcodemst mfg ON mfg.id= co.mfgcodeID AND mfg.isDeleted = 0  \n" +
                "		Inner JOIN rfq_rohsmst ro ON ro.id = co.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "		Inner Join rfq_partcategory pc on pc.id = co.partType  \n" +
                "		WHERE co.isDeleted = 0  \n" +
                "		AND co.id = \" , prefComponentCustAliasRevID ,\"  \n" +
                "		Union all  \n" +
                "		SELECT car_pn.id ,car_pn.refComponentID,comp.mfgPN,mfg.mfgCode,comp.restrictUsePermanently, comp.isCustom,comp.pidCode,  \n" +
                "			comp.restrictUSEwithpermission  , ro.rohsIcon , ro.name AS `rohsComplientConvertedValue`,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode, comp.mfgPN,\", vMfgCodeFormat,\") as displayMfgPN,  \n" +
                "            comp.mfgPNDescription,  \n" +
                "            fun_getUserNameByID(car_pn.createdBy) createdby,  \n" +
                "            fun_getRoleByID(car_pn.createByRoleId) createdbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(car_pn.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt  \n" +
                "		FROM component_cust_alias_rev_pn car_pn  \n" +
                "			LEFT OUTER JOIN component comp ON comp.id=car_pn.refComponentID AND IFNULL(comp.isDeleted,0)=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=comp.mfgcodeID AND IFNULL(mfg.isDeleted,0)=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id = comp.RoHSStatusID AND ro.deletedAt IS NULL  \n" +
                "		WHERE IFNULL(car_pn.isDeleted,0)=0  \n" +
                "		AND car_pn.refCPNPartID = \" , prefComponentCustAliasRevID ,\"  \n" +
                "	\");  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponetCustAliasRevPN,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponetCustAliasRevPN,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1232,'1.00','V1',' Update Sproc_GetComponetCustAliasRevPN - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1232:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10)  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	m_cpn.id cpnMFGCodeID, CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1233,'1.00','V1','Bug 39374: On UMID list showing Error when apply Expire material filter - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1233:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pMainAssyID INT,  \n" +
                "	IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SELECT  c.PartID,	c.releaseCount, 	c.kitReturnStatus,		c.salesOrderCompletedStatus,	c.shortageQty,		c.toBeRelease,		c.totalReleased,  \n" +
                "			FUN_GETKITRELEASESTATUS(allocPerWithSubAssy,totalReleaseQty,totalPOQty,assyKitQty,assyPOQty,releaseCount,pendingCount) releaseStatus  \n" +
                "	FROM  \n" +
                "		(SELECT vuss.PartID,  \n" +
                "                p.releaseCount,  \n" +
                "				p.pendingCount,  \n" +
                "				ka.allocPerWithSubAssy,  \n" +
                "				FUN_GETKITRETURNSTATUS(pendingReleaseCount, releasedNotReturnedCount, returnedCount, readyToreturnCount) kitReturnStatus,  \n" +
                "				IFNULL(`vuss`.`kitQty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyKitQty,  \n" +
                "				IFNULL(`vuss`.`PO Qty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyPOQty,  \n" +
                "				p.totalReleased,  \n" +
                "                p.totalReleaseQty,  \n" +
                "                p.totalPOQty,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(totalReleased, 0) AS toBeRelease,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(ka.totalBuildFesibility, 0) AS shortageQty,  \n" +
                "				vuss.`Status` salesOrderCompletedStatus  \n" +
                "		FROM  \n" +
                "			vu_salesorder_updatedlist_report vuss  \n" +
                "		JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND partID = pAssyID AND isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID , partID  \n" +
                "			) AS a ON a.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT  \n" +
                "							salesOrderDetID, refAssyId,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END) totalReleased,  \n" +
                "							SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalReleaseQty,  \n" +
                "							SUM(poQty) totalPOQty  \n" +
                "					FROM salesorder_plan_detailsmst  \n" +
                "					WHERE (CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)  \n" +
                "					AND isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  \n" +
                "								salesOrderDetID, refAssyId,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "						FROM 	vu_release_plan_release_return_status_det  \n" +
                "						WHERE  /* salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "								AND */ (CASE WHEN (pIsConsolidated = 1) THEN 1 = 1 WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID ELSE subAssyID IS NULL END)  \n" +
                "						GROUP BY salesOrderDetID , refAssyId  \n" +
                "					) AS vrr ON vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  k.refSalesOrderDetID,  mainAssy AS assyID,  min( k.totalBuildFesibility) as totalBuildFesibility,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`  \n" +
                "						FROM (  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN IFNULL((vk.allocatedpin/(vk.qpaWithDnp * vk.bomNumOfPosition)),0) ELSE IFNULL((vk.allocatedunit/vk.qpaWithDnp),0) END) AS totalBuildFesibility,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "							) `k`  \n" +
                "							GROUP BY k.refSalesOrderDetID, k.mainAssy  \n" +
                "			) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.assyID = `vuss`.`PartID`  \n" +
                "		WHERE vuss.SalesOrderDetailId = pRefSalesOrderDetID  \n" +
                "	) AS c;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseStatus`(  \n" +
                "	pKitAllocationPer DECIMAL(18,8),  \n" +
                "    pSOPlanTotalKitQty INT,  \n" +
                "    pSOPlanTotalPOQty INT,  \n" +
                "    pPOKitQty INT,  \n" +
                "    pPOQty INT,  \n" +
                "    pReleaseCount INT,  \n" +
                "    pPendingCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReleaseStatus VARCHAR(50);  \n" +
                "	SET vKitReleaseStatus = 'Not Released';  \n" +
                "  /* old logic  \n" +
                "   IF (ifnull(pReleaseCount,0) > 0 AND ifnull(pPendingCount,0) = 0 AND (ifnull(pSOPlanTotalKitQty,0) = ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) = ifnull(pPOQty,0))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Fully Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND ifnull(pPendingCount,0) > 0) THEN  \n" +
                "		SET vKitReleaseStatus = 'Not Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND (ifnull(pPendingCount,0) > 0 OR ifnull(pPendingCount,0) = 0) AND (pKitAllocationPer IS NOT NULL AND FLOOR(pKitAllocationPer) = 100)) THEN  \n" +
                "		SET vKitReleaseStatus = 'Ready To Release';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) > 0 AND (ifnull(pPendingCount,0) > 0 OR (ifnull(pSOPlanTotalKitQty,0) <> ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) <> ifnull(pPOQty,0)))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Partially Released';  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "    IF (ifnull(pReleaseCount,0) > 0 AND ifnull(pPendingCount,0) = 0 AND (ifnull(pSOPlanTotalKitQty,0) = ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) = ifnull(pPOQty,0))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Fully Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND ifnull(pPendingCount,0) > 0) AND  FLOOR(ifnull(pKitAllocationPer,0)) < 100 THEN  \n" +
                "		SET vKitReleaseStatus = 'Not Released';  \n" +
                "	ELSEIF ifnull(pReleaseCount,0) = 0 AND  FLOOR(ifnull(pKitAllocationPer,0)) = 100 THEN  \n" +
                "		SET vKitReleaseStatus = 'Ready To Release';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) > 0 AND (ifnull(pPendingCount,0) > 0 OR (ifnull(pSOPlanTotalKitQty,0) <> ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) <> ifnull(pPOQty,0)))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Partially Released';  \n" +
                "	END IF;  \n" +
                "	REturn vKitReleaseStatus;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
                "	pUMIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT *,  \n" +
                "        fun_getKitReleaseStatus(allocPerWithSubAssy,totalKitQty,totalPOQty, assyKitQty, assyPOQty, releaseCount, pendingCount) as kitReleaseStatus  FROM  \n" +
                "(SELECT  \n" +
                "		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        u.measurementTypeID as uomClassID,  \n" +
                "		FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(rp.kitReleaseDate) kitReleaseDate,  \n" +
                "        rp.promiseShipDate,  \n" +
                "        k.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,sd.kitQty, sd.qty, p.releaseCount, p.pendingCount,  \n" +
                "        (a.perAssyBuildQty * sd.kitQty) AS assyKitQty,  \n" +
                "        (a.perAssyBuildQty *  sd.qty)AS assyPOQty  \n" +
                "	From (  \n" +
                "			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
                "					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
                "					k.allocatedUOM allocatedUOMID  \n" +
                "			FROM 	kit_allocation k  \n" +
                "			WHERE 	k.id = k.id  \n" +
                "			AND 	k.refUIDId = pUMIDId  \n" +
                "			AND 	k.status = 'A'  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
                "		) ka  \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3 AND sd.isDeleted = 0  \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id AND s.isDeleted = 0  \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id AND assy.isDeleted = 0  \n" +
                "	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID AND u.isDeleted = 0  \n" +
                "    JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID, partID  \n" +
                "			) AS a ON a.refSalesOrderDetID = ka.refSalesOrderDetID  AND ka.assyID = a.refAssyId  \n" +
                "    LEFT JOIN (  \n" +
                "					SELECT 	salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                            subAssyID,  \n" +
                "                            IFNULL(subAssyID, refAssyId) AS mainAssy,  \n" +
                "                            kitStatus,  \n" +
                "							SUM(CASE WHEN  kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalKitQty,	SUM(poQty) totalPOQty  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "				) AS p ON ka.refSalesOrderDetID = p.salesOrderDetID AND ka.assyID = p.mainAssy  \n" +
                "	LEFT JOIN (  \n" +
                "				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "				FROM  \n" +
                "					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "									FROM  		vu_kit_allocation_detail vk  \n" +
                "									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id AND sd.isDeleted = 0  \n" +
                "									WHERE    	vk.isNotRequiredKitAllocation != 1 AND vk.qpaWithDnp != 0  \n" +
                "					) as k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
                "	LEFT JOIN (  \n" +
                "		SELECT 	salesOrderDetID,  \n" +
                "				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,  \n" +
                "				MIN(poDueDate) promiseShipDate  \n" +
                "		FROM 	vu_kit_plans  \n" +
                "		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
                "	) AS temp ORDER BY (kitReleaseDate IS NULL),  kitReleaseDate ASC, id ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "							select  a.*  \n" +
                "							from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber ,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c where c.kitstatus = case when '\",v_ParentWHType,\"' ='M' then 'P' else 'R' end  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id =a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "							fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							ka.kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPlanPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS kitAllocationPercentage  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	vk.refSalesOrderDetID,  \n" +
                "														vk.assyID,  vk.qpaWithDnp,  \n" +
                "														vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation,  \n" +
                "														IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "														(CASE WHEN vk.connecterTypeID = -2 THEN vk.shortagePins ELSE vk.shortage END) AS shortage  \n" +
                "												FROM 	vu_kit_allocation_detail vk  \n" +
                "                                                Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "												WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "											) k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	sd.isCancle != 1  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "					GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1234,'1.00','V1','Bug 39369: [Main Branch] showing Mismatched Kit Release status on details and list page - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1234:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Blanket PO to Future PO(s)'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderStatus`(  \n" +
                "	IN psalesId INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT w.woID,w.woNumber,sd.id,sh.shippingID FROM workorder_salesorder_details ws  \n" +
                "	LEFT JOIN salesorderdet sd ON sd.id=ws.salesOrderDetailID AND sd.isDeleted=0 AND sd.partCategory=3  \n" +
                "	LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isDeleted=0  \n" +
                "	LEFT JOIN salesshippingmst sh ON sd.id=sh.sDetID AND sh.isDeleted=0  \n" +
                "	LEFT JOIN workorder w ON w.woID=ws.woID AND w.isdeleted=0  \n" +
                "	WHERE sm.id=psalesId AND w.woSubStatus NOT IN (0,5);  \n" +
                "  \n" +
                "	SELECT kitNumber,id AS SalesOrderDetailId FROM salesorderdet WHERE refsalesOrderID=psalesId AND salesOrderDetStatus=2 AND isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetForOtherCharges` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetForOtherCharges`(  \n" +
                "	IN psalesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "         pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 smb.poNumber,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdb ON sdb.id=sd.refBlanketPOID AND sdb.isdeleted=0  \n" +
                "		LEFT JOIN salesordermst smb ON smb.id=sdb.refsalesOrderID  \n" +
                "		WHERE sd.refSalesOrderID = psalesorderID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "		AND sd.isCancle=0  \n" +
                "		AND sd.partCategory = 2  \n" +
                "		AND sd.refSODetID IS NULL  \n" +
                "		AND c.partType  =4  \n" +
                "    ) a  WHERE a.poQty - IFNULL(a.shippedQty,0) > 0;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1235,'1.00','V1',' SO Changes -CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

    }
    return allDbChangesArray;
});

// sample
//case 1123:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 09-09-2021  *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version ->  *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (1124,'1.00','V1',' Sample entry - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
//  );
//break;